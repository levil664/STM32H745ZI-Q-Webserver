
projectPP2024_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f34  08010dc8  08010dc8  00020dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cfc  08013cfc  00034adc  2**0
                  CONTENTS
  4 .ARM          00000000  08013cfc  08013cfc  00034adc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013cfc  08013cfc  00034adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cfc  08013cfc  00023cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d00  08013d00  00023d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08013d04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .Rx_PoolSection 00004983  24000098  08013d9c  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  24004a1c  0801871f  00034a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  24004a7c  0801877f  00034a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000071b8  24004adc  080187df  00034adc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2400bc94  080187df  0003bc94  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00034adc  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002312c  00000000  00000000  00034b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005d25  00000000  00000000  00057c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001958  00000000  00000000  0005d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001838  00000000  00000000  0005f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00046916  00000000  00000000  00060af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000294ba  00000000  00000000  000a7406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00191b9f  00000000  00000000  000d08c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0026245f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00006e58  00000000  00000000  002624b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004adc 	.word	0x24004adc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010db0 	.word	0x08010db0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004ae0 	.word	0x24004ae0
 80002dc:	08010db0 	.word	0x08010db0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <vApplicationGetIdleTaskMemory+0x30>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	24004af8 	.word	0x24004af8
 80003c0:	24004b4c 	.word	0x24004b4c

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ca:	f000 fa19 	bl	8000800 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	4b5d      	ldr	r3, [pc, #372]	; (8000544 <main+0x180>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11b      	bne.n	8000412 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003e6:	4b57      	ldr	r3, [pc, #348]	; (8000544 <main+0x180>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fa:	4b52      	ldr	r3, [pc, #328]	; (8000544 <main+0x180>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a51      	ldr	r2, [pc, #324]	; (8000544 <main+0x180>)
 8000400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000404:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000406:	f3bf 8f4f 	dsb	sy
}
 800040a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800040c:	f3bf 8f6f 	isb	sy
}
 8000410:	e000      	b.n	8000414 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000414:	4b4b      	ldr	r3, [pc, #300]	; (8000544 <main+0x180>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d138      	bne.n	8000492 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000420:	4b48      	ldr	r3, [pc, #288]	; (8000544 <main+0x180>)
 8000422:	2200      	movs	r2, #0
 8000424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000428:	f3bf 8f4f 	dsb	sy
}
 800042c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800042e:	4b45      	ldr	r3, [pc, #276]	; (8000544 <main+0x180>)
 8000430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000438:	0b5b      	lsrs	r3, r3, #13
 800043a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000448:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	015a      	lsls	r2, r3, #5
 800044e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000452:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000454:	6a3a      	ldr	r2, [r7, #32]
 8000456:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000458:	493a      	ldr	r1, [pc, #232]	; (8000544 <main+0x180>)
 800045a:	4313      	orrs	r3, r2
 800045c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000460:	6a3b      	ldr	r3, [r7, #32]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	623a      	str	r2, [r7, #32]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1ef      	bne.n	800044a <main+0x86>
    } while(sets-- != 0U);
 800046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	627a      	str	r2, [r7, #36]	; 0x24
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1e5      	bne.n	8000440 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000474:	f3bf 8f4f 	dsb	sy
}
 8000478:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <main+0x180>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a31      	ldr	r2, [pc, #196]	; (8000544 <main+0x180>)
 8000480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000484:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	e000      	b.n	8000494 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000492:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800049a:	bf00      	nop
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <main+0x184>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d004      	beq.n	80004b2 <main+0xee>
 80004a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dcf4      	bgt.n	800049c <main+0xd8>
  if ( timeout < 0 )
 80004b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	da01      	bge.n	80004bc <main+0xf8>
  {
  Error_Handler();
 80004b8:	f000 f9f2 	bl	80008a0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 f99c 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f848 	bl	8000554 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <main+0x184>)
 80004c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ca:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <main+0x184>)
 80004cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <main+0x184>)
 80004d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f003 f864 	bl	80035b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	2000      	movs	r0, #0
 80004ec:	f003 f87a 	bl	80035e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004f6:	bf00      	nop
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <main+0x184>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d104      	bne.n	800050e <main+0x14a>
 8000504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000506:	1e5a      	subs	r2, r3, #1
 8000508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800050a:	2b00      	cmp	r3, #0
 800050c:	dcf4      	bgt.n	80004f8 <main+0x134>
if ( timeout < 0 )
 800050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000510:	2b00      	cmp	r3, #0
 8000512:	da01      	bge.n	8000518 <main+0x154>
{
Error_Handler();
 8000514:	f000 f9c4 	bl	80008a0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f886 	bl	8000628 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <main+0x188>)
 800051e:	1d3c      	adds	r4, r7, #4
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 f89d 	bl	8004672 <osThreadCreate>
 8000538:	4603      	mov	r3, r0
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <main+0x18c>)
 800053c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800053e:	f004 f891 	bl	8004664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x17e>
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	58024400 	.word	0x58024400
 800054c:	08010dd4 	.word	0x08010dd4
 8000550:	24004d4c 	.word	0x24004d4c

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09c      	sub	sp, #112	; 0x70
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	224c      	movs	r2, #76	; 0x4c
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00f fbcc 	bl	800fd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2220      	movs	r2, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f00f fbc6 	bl	800fd00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000574:	2004      	movs	r0, #4
 8000576:	f003 f849 	bl	800360c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 8000580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000584:	f023 0301 	bic.w	r3, r3, #1
 8000588:	62d3      	str	r3, [r2, #44]	; 0x2c
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xd0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b0:	bf00      	nop
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xd0>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005be:	d1f8      	bne.n	80005b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f873 	bl	80036c0 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e0:	f000 f95e 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	233f      	movs	r3, #63	; 0x3f
 80005e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fcb3 	bl	8003f74 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f944 	bl	80008a0 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3770      	adds	r7, #112	; 0x70
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58000400 	.word	0x58000400
 8000624:	58024800 	.word	0x58024800

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <MX_GPIO_Init+0x13c>)
 8000640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000644:	4a47      	ldr	r2, [pc, #284]	; (8000764 <MX_GPIO_Init+0x13c>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064e:	4b45      	ldr	r3, [pc, #276]	; (8000764 <MX_GPIO_Init+0x13c>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b41      	ldr	r3, [pc, #260]	; (8000764 <MX_GPIO_Init+0x13c>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000662:	4a40      	ldr	r2, [pc, #256]	; (8000764 <MX_GPIO_Init+0x13c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066c:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <MX_GPIO_Init+0x13c>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <MX_GPIO_Init+0x13c>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000680:	4a38      	ldr	r2, [pc, #224]	; (8000764 <MX_GPIO_Init+0x13c>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <MX_GPIO_Init+0x13c>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <MX_GPIO_Init+0x13c>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a8:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	4a29      	ldr	r2, [pc, #164]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	4a22      	ldr	r2, [pc, #136]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0x13c>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2102      	movs	r1, #2
 80006f6:	481c      	ldr	r0, [pc, #112]	; (8000768 <MX_GPIO_Init+0x140>)
 80006f8:	f002 ff40 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800070e:	2307      	movs	r3, #7
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4814      	ldr	r0, [pc, #80]	; (800076c <MX_GPIO_Init+0x144>)
 800071a:	f002 fd7f 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800071e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000730:	230a      	movs	r3, #10
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_GPIO_Init+0x148>)
 800073c:	f002 fd6e 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x140>)
 8000758:	f002 fd60 	bl	800321c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3730      	adds	r7, #48	; 0x30
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58024400 	.word	0x58024400
 8000768:	58021000 	.word	0x58021000
 800076c:	58020c00 	.word	0x58020c00
 8000770:	58020000 	.word	0x58020000

08000774 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800077c:	f000 f9a2 	bl	8000ac4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* message = "Hello UDP message!\n\r";
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <StartDefaultTask+0x84>)
 8000782:	617b      	str	r3, [r7, #20]

  osDelay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f003 ffbf 	bl	800470a <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <StartDefaultTask+0x88>)
 800078e:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8000790:	f00f fa2c 	bl	800fbec <udp_new>
 8000794:	6138      	str	r0, [r7, #16]
  udp_connect(my_udp, &PC_IPADDR, 55151);
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800079e:	4619      	mov	r1, r3
 80007a0:	6938      	ldr	r0, [r7, #16]
 80007a2:	f00f f9b5 	bl	800fb10 <udp_connect>
  struct pbuf* udp_buffer = NULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
    osDelay(1000);
 80007aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ae:	f003 ffac 	bl	800470a <osDelay>
    /* !! PBUF_RAM is critical for correct operation !! */
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff fd94 	bl	80002e0 <strlen>
 80007b8:	4603      	mov	r3, r0
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80007c0:	4619      	mov	r1, r3
 80007c2:	2036      	movs	r0, #54	; 0x36
 80007c4:	f008 fd8c 	bl	80092e0 <pbuf_alloc>
 80007c8:	60f8      	str	r0, [r7, #12]

    if (udp_buffer != NULL) {
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0ec      	beq.n	80007aa <StartDefaultTask+0x36>
      memcpy(udp_buffer->payload, message, strlen(message));
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	685c      	ldr	r4, [r3, #4]
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f7ff fd83 	bl	80002e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	6979      	ldr	r1, [r7, #20]
 80007e0:	4620      	mov	r0, r4
 80007e2:	f00f fa7f 	bl	800fce4 <memcpy>
      udp_send(my_udp, udp_buffer);
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	6938      	ldr	r0, [r7, #16]
 80007ea:	f00e ff1f 	bl	800f62c <udp_send>
      pbuf_free(udp_buffer);
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f009 f858 	bl	80098a4 <pbuf_free>
    osDelay(1000);
 80007f4:	e7d9      	b.n	80007aa <StartDefaultTask+0x36>
 80007f6:	bf00      	nop
 80007f8:	08010df0 	.word	0x08010df0
 80007fc:	0101a8c0 	.word	0x0101a8c0

08000800 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000812:	f001 f987 	bl	8001b24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000816:	2301      	movs	r3, #1
 8000818:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800081a:	2300      	movs	r3, #0
 800081c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000822:	231f      	movs	r3, #31
 8000824:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000826:	2387      	movs	r3, #135	; 0x87
 8000828:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800082a:	2300      	movs	r3, #0
 800082c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800082e:	2300      	movs	r3, #0
 8000830:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000832:	2301      	movs	r3, #1
 8000834:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000842:	463b      	mov	r3, r7
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f9a5 	bl	8001b94 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800084a:	2301      	movs	r3, #1
 800084c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MPU_Config+0x98>)
 8000850:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000852:	2310      	movs	r3, #16
 8000854:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000856:	2300      	movs	r3, #0
 8000858:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800085a:	2301      	movs	r3, #1
 800085c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f001 f995 	bl	8001b94 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800086a:	2302      	movs	r3, #2
 800086c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MPU_Config+0x9c>)
 8000870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000872:	2308      	movs	r3, #8
 8000874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000876:	2300      	movs	r3, #0
 8000878:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800087a:	2301      	movs	r3, #1
 800087c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000882:	463b      	mov	r3, r7
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f985 	bl	8001b94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800088a:	2004      	movs	r0, #4
 800088c:	f001 f962 	bl	8001b54 <HAL_MPU_Enable>

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	30020000 	.word	0x30020000
 800089c:	30040000 	.word	0x30040000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x38>)
 80008b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x38>)
 80008ba:	f043 0302 	orr.w	r3, r3, #2
 80008be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x38>)
 80008c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	210f      	movs	r1, #15
 80008d4:	f06f 0001 	mvn.w	r0, #1
 80008d8:	f001 f8fd 	bl	8001ad6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58024400 	.word	0x58024400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 ffe0 	bl	80018dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800091c:	f005 f870 	bl	8005a00 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d001      	beq.n	800092a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000926:	f004 fb5f 	bl	8004fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}

0800092e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <_kill+0x20>)
 800094c:	2216      	movs	r2, #22
 800094e:	601a      	str	r2, [r3, #0]
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2400bc84 	.word	0x2400bc84

08000964 <_exit>:

void _exit (int status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffe5 	bl	8000940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000976:	e7fe      	b.n	8000976 <_exit+0x12>

08000978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
  }

  return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf1      	blt.n	80009c4 <_write+0x12>
  }
  return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d205      	bcs.n	8000a90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <_sbrk+0x6c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	24080000 	.word	0x24080000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	24004d50 	.word	0x24004d50
 8000abc:	2400bc98 	.word	0x2400bc98
 8000ac0:	2400bc84 	.word	0x2400bc84

08000ac4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8000aca:	4b87      	ldr	r3, [pc, #540]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000acc:	22c0      	movs	r2, #192	; 0xc0
 8000ace:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8000ad0:	4b85      	ldr	r3, [pc, #532]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000ad2:	22a8      	movs	r2, #168	; 0xa8
 8000ad4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8000ad6:	4b84      	ldr	r3, [pc, #528]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8000adc:	4b82      	ldr	r3, [pc, #520]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8000ae2:	4b82      	ldr	r3, [pc, #520]	; (8000cec <MX_LWIP_Init+0x228>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8000ae8:	4b80      	ldr	r3, [pc, #512]	; (8000cec <MX_LWIP_Init+0x228>)
 8000aea:	22ff      	movs	r2, #255	; 0xff
 8000aec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8000aee:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <MX_LWIP_Init+0x228>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8000af4:	4b7d      	ldr	r3, [pc, #500]	; (8000cec <MX_LWIP_Init+0x228>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8000afa:	4b7d      	ldr	r3, [pc, #500]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8000b00:	4b7b      	ldr	r3, [pc, #492]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8000b06:	4b7a      	ldr	r3, [pc, #488]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8000b0c:	4b78      	ldr	r3, [pc, #480]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8000b12:	f006 fab9 	bl	8007088 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8000b16:	4b74      	ldr	r3, [pc, #464]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	061a      	lsls	r2, r3, #24
 8000b1c:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	041b      	lsls	r3, r3, #16
 8000b22:	431a      	orrs	r2, r3
 8000b24:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	4a6e      	ldr	r2, [pc, #440]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b2e:	78d2      	ldrb	r2, [r2, #3]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	061a      	lsls	r2, r3, #24
 8000b34:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0619      	lsls	r1, r3, #24
 8000b3a:	4b6b      	ldr	r3, [pc, #428]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	041b      	lsls	r3, r3, #16
 8000b40:	4319      	orrs	r1, r3
 8000b42:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	4967      	ldr	r1, [pc, #412]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b4c:	78c9      	ldrb	r1, [r1, #3]
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000b56:	431a      	orrs	r2, r3
 8000b58:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0619      	lsls	r1, r3, #24
 8000b5e:	4b62      	ldr	r3, [pc, #392]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	4319      	orrs	r1, r3
 8000b66:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	495e      	ldr	r1, [pc, #376]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b70:	78c9      	ldrb	r1, [r1, #3]
 8000b72:	430b      	orrs	r3, r1
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	0619      	lsls	r1, r3, #24
 8000b82:	4b59      	ldr	r3, [pc, #356]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	041b      	lsls	r3, r3, #16
 8000b88:	4319      	orrs	r1, r3
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b8c:	789b      	ldrb	r3, [r3, #2]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	430b      	orrs	r3, r1
 8000b92:	4955      	ldr	r1, [pc, #340]	; (8000ce8 <MX_LWIP_Init+0x224>)
 8000b94:	78c9      	ldrb	r1, [r1, #3]
 8000b96:	430b      	orrs	r3, r1
 8000b98:	0e1b      	lsrs	r3, r3, #24
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <MX_LWIP_Init+0x230>)
 8000b9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <MX_LWIP_Init+0x228>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	061a      	lsls	r2, r3, #24
 8000ba6:	4b51      	ldr	r3, [pc, #324]	; (8000cec <MX_LWIP_Init+0x228>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	431a      	orrs	r2, r3
 8000bae:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bb0:	789b      	ldrb	r3, [r3, #2]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bb8:	78d2      	ldrb	r2, [r2, #3]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	061a      	lsls	r2, r3, #24
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0619      	lsls	r1, r3, #24
 8000bc4:	4b49      	ldr	r3, [pc, #292]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	4b47      	ldr	r3, [pc, #284]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	4945      	ldr	r1, [pc, #276]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bd6:	78c9      	ldrb	r1, [r1, #3]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000be0:	431a      	orrs	r2, r3
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <MX_LWIP_Init+0x228>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0619      	lsls	r1, r3, #24
 8000be8:	4b40      	ldr	r3, [pc, #256]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	4319      	orrs	r1, r3
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bf2:	789b      	ldrb	r3, [r3, #2]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	493c      	ldr	r1, [pc, #240]	; (8000cec <MX_LWIP_Init+0x228>)
 8000bfa:	78c9      	ldrb	r1, [r1, #3]
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c04:	431a      	orrs	r2, r3
 8000c06:	4b39      	ldr	r3, [pc, #228]	; (8000cec <MX_LWIP_Init+0x228>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0619      	lsls	r1, r3, #24
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <MX_LWIP_Init+0x228>)
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	4319      	orrs	r1, r3
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <MX_LWIP_Init+0x228>)
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	4933      	ldr	r1, [pc, #204]	; (8000cec <MX_LWIP_Init+0x228>)
 8000c1e:	78c9      	ldrb	r1, [r1, #3]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	4313      	orrs	r3, r2
 8000c26:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <MX_LWIP_Init+0x234>)
 8000c28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8000c2a:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	061a      	lsls	r2, r3, #24
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	431a      	orrs	r2, r3
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	4a2b      	ldr	r2, [pc, #172]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c42:	78d2      	ldrb	r2, [r2, #3]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	061a      	lsls	r2, r3, #24
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0619      	lsls	r1, r3, #24
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	4319      	orrs	r1, r3
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	4924      	ldr	r1, [pc, #144]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c60:	78c9      	ldrb	r1, [r1, #3]
 8000c62:	430b      	orrs	r3, r1
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	0619      	lsls	r1, r3, #24
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	041b      	lsls	r3, r3, #16
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	430b      	orrs	r3, r1
 8000c82:	491b      	ldr	r1, [pc, #108]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c84:	78c9      	ldrb	r1, [r1, #3]
 8000c86:	430b      	orrs	r3, r1
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0619      	lsls	r1, r3, #24
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	041b      	lsls	r3, r3, #16
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	4912      	ldr	r1, [pc, #72]	; (8000cf0 <MX_LWIP_Init+0x22c>)
 8000ca8:	78c9      	ldrb	r1, [r1, #3]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	0e1b      	lsrs	r3, r3, #24
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_LWIP_Init+0x238>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_LWIP_Init+0x23c>)
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_LWIP_Init+0x240>)
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_LWIP_Init+0x238>)
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <MX_LWIP_Init+0x234>)
 8000cc4:	490b      	ldr	r1, [pc, #44]	; (8000cf4 <MX_LWIP_Init+0x230>)
 8000cc6:	4810      	ldr	r0, [pc, #64]	; (8000d08 <MX_LWIP_Init+0x244>)
 8000cc8:	f007 ffca 	bl	8008c60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <MX_LWIP_Init+0x244>)
 8000cce:	f008 f979 	bl	8008fc4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_LWIP_Init+0x244>)
 8000cd4:	f008 f986 	bl	8008fe4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <MX_LWIP_Init+0x248>)
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_LWIP_Init+0x244>)
 8000cdc:	f008 fa84 	bl	80091e8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24004d94 	.word	0x24004d94
 8000cec:	24004d98 	.word	0x24004d98
 8000cf0:	24004d9c 	.word	0x24004d9c
 8000cf4:	24004d88 	.word	0x24004d88
 8000cf8:	24004d8c 	.word	0x24004d8c
 8000cfc:	24004d90 	.word	0x24004d90
 8000d00:	080069fd 	.word	0x080069fd
 8000d04:	08000f69 	.word	0x08000f69
 8000d08:	24004d54 	.word	0x24004d54
 8000d0c:	08000d11 	.word	0x08000d11

08000d10 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8000d30:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <low_level_init+0x120>)
 8000d32:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <low_level_init+0x124>)
 8000d34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8000d3e:	23e1      	movs	r3, #225	; 0xe1
 8000d40:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8000d4e:	4a3d      	ldr	r2, [pc, #244]	; (8000e44 <low_level_init+0x120>)
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d56:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <low_level_init+0x120>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <low_level_init+0x120>)
 8000d5e:	4a3b      	ldr	r2, [pc, #236]	; (8000e4c <low_level_init+0x128>)
 8000d60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d62:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <low_level_init+0x120>)
 8000d64:	4a3a      	ldr	r2, [pc, #232]	; (8000e50 <low_level_init+0x12c>)
 8000d66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <low_level_init+0x120>)
 8000d6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000d6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8000d70:	4834      	ldr	r0, [pc, #208]	; (8000e44 <low_level_init+0x120>)
 8000d72:	f000 ff53 	bl	8001c1c <HAL_ETH_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d7a:	2238      	movs	r2, #56	; 0x38
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4835      	ldr	r0, [pc, #212]	; (8000e54 <low_level_init+0x130>)
 8000d80:	f00e ffbe 	bl	800fd00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <low_level_init+0x130>)
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <low_level_init+0x130>)
 8000d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <low_level_init+0x130>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <low_level_init+0x134>)
 8000d9a:	f007 fe29 	bl	80089f0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2206      	movs	r2, #6
 8000da2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <low_level_init+0x120>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <low_level_init+0x120>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	785a      	ldrb	r2, [r3, #1]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <low_level_init+0x120>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	789a      	ldrb	r2, [r3, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <low_level_init+0x120>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	78da      	ldrb	r2, [r3, #3]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <low_level_init+0x120>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	791a      	ldrb	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <low_level_init+0x120>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	795a      	ldrb	r2, [r3, #5]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000df4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000dfc:	f043 030a 	orr.w	r3, r3, #10
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000e08:	4914      	ldr	r1, [pc, #80]	; (8000e5c <low_level_init+0x138>)
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <low_level_init+0x13c>)
 8000e0c:	f000 fafd 	bl	800140a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000e10:	4813      	ldr	r0, [pc, #76]	; (8000e60 <low_level_init+0x13c>)
 8000e12:	f000 fb2c 	bl	800146e <LAN8742_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f008 f9b3 	bl	8009188 <netif_set_link_down>
    netif_set_down(netif);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f008 f94a 	bl	80090bc <netif_set_down>
 8000e28:	e008      	b.n	8000e3c <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 fa05 	bl	8001240 <ethernet_link_check_state>
 8000e36:	e001      	b.n	8000e3c <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 8000e38:	f7ff fd32 	bl	80008a0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24004da8 	.word	0x24004da8
 8000e48:	40028000 	.word	0x40028000
 8000e4c:	24004a7c 	.word	0x24004a7c
 8000e50:	24004a1c 	.word	0x24004a1c
 8000e54:	24004e58 	.word	0x24004e58
 8000e58:	08013ab4 	.word	0x08013ab4
 8000e5c:	24000000 	.word	0x24000000
 8000e60:	24004e90 	.word	0x24004e90

08000e64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2230      	movs	r2, #48	; 0x30
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00e ff3b 	bl	800fd00 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00e ff34 	bl	800fd00 <memset>

  for(q = p; q != NULL; q = q->next)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000e9c:	e045      	b.n	8000f2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8000e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d902      	bls.n	8000eaa <low_level_output+0x46>
      return ERR_IF;
 8000ea4:	f06f 030b 	mvn.w	r3, #11
 8000ea8:	e055      	b.n	8000f56 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8000eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eac:	6859      	ldr	r1, [r3, #4]
 8000eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	3348      	adds	r3, #72	; 0x48
 8000eba:	443b      	add	r3, r7
 8000ebc:	3b3c      	subs	r3, #60	; 0x3c
 8000ebe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8000ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec2:	895b      	ldrh	r3, [r3, #10]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	3348      	adds	r3, #72	; 0x48
 8000ed2:	443b      	add	r3, r7
 8000ed4:	3b38      	subs	r3, #56	; 0x38
 8000ed6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8000ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d011      	beq.n	8000f02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8000ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	f107 000c 	add.w	r0, r7, #12
 8000ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000ee8:	460b      	mov	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	18c1      	adds	r1, r0, r3
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	3348      	adds	r3, #72	; 0x48
 8000efc:	443b      	add	r3, r7
 8000efe:	3b34      	subs	r3, #52	; 0x34
 8000f00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8000f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8000f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3348      	adds	r3, #72	; 0x48
 8000f16:	443b      	add	r3, r7
 8000f18:	3b34      	subs	r3, #52	; 0x34
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f20:	3301      	adds	r3, #1
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8000f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	643b      	str	r3, [r7, #64]	; 0x40
 8000f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1b6      	bne.n	8000e9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	891b      	ldrh	r3, [r3, #8]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <low_level_output+0xfc>)
 8000f38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <low_level_output+0xfc>)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <low_level_output+0xfc>)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000f48:	2214      	movs	r2, #20
 8000f4a:	4905      	ldr	r1, [pc, #20]	; (8000f60 <low_level_output+0xfc>)
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <low_level_output+0x100>)
 8000f4e:	f000 fffd 	bl	8001f4c <HAL_ETH_Transmit>

  return errval;
 8000f52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3748      	adds	r7, #72	; 0x48
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	24004e58 	.word	0x24004e58
 8000f64:	24004da8 	.word	0x24004da8

08000f68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <ethernetif_init+0x1c>
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <ethernetif_init+0x48>)
 8000f78:	f240 128b 	movw	r2, #395	; 0x18b
 8000f7c:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <ethernetif_init+0x4c>)
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <ethernetif_init+0x50>)
 8000f80:	f00e fec6 	bl	800fd10 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2273      	movs	r2, #115	; 0x73
 8000f88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2274      	movs	r2, #116	; 0x74
 8000f90:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <ethernetif_init+0x54>)
 8000f98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <ethernetif_init+0x58>)
 8000f9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff febf 	bl	8000d24 <low_level_init>

  return ERR_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	08010e08 	.word	0x08010e08
 8000fb4:	08010e58 	.word	0x08010e58
 8000fb8:	08010e68 	.word	0x08010e68
 8000fbc:	080063fd 	.word	0x080063fd
 8000fc0:	08000e65 	.word	0x08000e65

08000fc4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <pbuf_free_custom+0x2c>)
 8000fd4:	f007 fdee 	bl	8008bb4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <pbuf_free_custom+0x30>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d102      	bne.n	8000fe6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <pbuf_free_custom+0x30>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08013ab4 	.word	0x08013ab4
 8000ff4:	24004da4 	.word	0x24004da4

08000ff8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000ffc:	f000 fc82 	bl	8001904 <HAL_GetTick>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a59      	ldr	r2, [pc, #356]	; (800118c <HAL_ETH_MspInit+0x184>)
 8001026:	4293      	cmp	r3, r2
 8001028:	f040 80ab 	bne.w	8001182 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800102e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001032:	4a57      	ldr	r2, [pc, #348]	; (8001190 <HAL_ETH_MspInit+0x188>)
 8001034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001038:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800103c:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800103e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001046:	623b      	str	r3, [r7, #32]
 8001048:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800104a:	4b51      	ldr	r3, [pc, #324]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800104c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_ETH_MspInit+0x188>)
 8001052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001056:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800105c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001068:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106e:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_ETH_MspInit+0x188>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b42      	ldr	r3, [pc, #264]	; (8001190 <HAL_ETH_MspInit+0x188>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a40      	ldr	r2, [pc, #256]	; (8001190 <HAL_ETH_MspInit+0x188>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <HAL_ETH_MspInit+0x188>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a39      	ldr	r2, [pc, #228]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010fe:	2332      	movs	r3, #50	; 0x32
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800110e:	230b      	movs	r3, #11
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <HAL_ETH_MspInit+0x18c>)
 800111a:	f002 f87f 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800111e:	2386      	movs	r3, #134	; 0x86
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112e:	230b      	movs	r3, #11
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <HAL_ETH_MspInit+0x190>)
 800113a:	f002 f86f 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001150:	230b      	movs	r3, #11
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <HAL_ETH_MspInit+0x194>)
 800115c:	f002 f85e 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001160:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_ETH_MspInit+0x198>)
 800117e:	f002 f84d 	bl	800321c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40028000 	.word	0x40028000
 8001190:	58024400 	.word	0x58024400
 8001194:	58020800 	.word	0x58020800
 8001198:	58020000 	.word	0x58020000
 800119c:	58020400 	.word	0x58020400
 80011a0:	58021800 	.word	0x58021800

080011a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <ETH_PHY_IO_Init+0x10>)
 80011aa:	f001 fa6b 	bl	8002684 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24004da8 	.word	0x24004da8

080011b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <ETH_PHY_IO_ReadReg+0x30>)
 80011dc:	f000 ffbb 	bl	8002156 <HAL_ETH_ReadPHYRegister>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e000      	b.n	80011ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	24004da8 	.word	0x24004da8

080011fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <ETH_PHY_IO_WriteReg+0x30>)
 8001210:	f000 fff6 	bl	8002200 <HAL_ETH_WritePHYRegister>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e000      	b.n	8001222 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24004da8 	.word	0x24004da8

08001230 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001234:	f000 fb66 	bl	8001904 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0a0      	sub	sp, #128	; 0x80
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2264      	movs	r2, #100	; 0x64
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00e fd55 	bl	800fd00 <memset>
  int32_t PHYLinkState = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800125e:	2300      	movs	r3, #0
 8001260:	67bb      	str	r3, [r7, #120]	; 0x78
 8001262:	2300      	movs	r3, #0
 8001264:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001266:	483a      	ldr	r0, [pc, #232]	; (8001350 <ethernet_link_check_state+0x110>)
 8001268:	f000 f9a9 	bl	80015be <LAN8742_GetLinkState>
 800126c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <ethernet_link_check_state+0x5a>
 8001280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001282:	2b01      	cmp	r3, #1
 8001284:	dc09      	bgt.n	800129a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8001286:	4833      	ldr	r0, [pc, #204]	; (8001354 <ethernet_link_check_state+0x114>)
 8001288:	f000 fe10 	bl	8001eac <HAL_ETH_Stop>
    netif_set_down(netif);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f007 ff15 	bl	80090bc <netif_set_down>
    netif_set_link_down(netif);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f007 ff78 	bl	8009188 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8001298:	e055      	b.n	8001346 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14e      	bne.n	8001346 <ethernet_link_check_state+0x106>
 80012a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	dd4b      	ble.n	8001346 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80012ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012b0:	3b02      	subs	r3, #2
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d82a      	bhi.n	800130c <ethernet_link_check_state+0xcc>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <ethernet_link_check_state+0x7c>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012df 	.word	0x080012df
 80012c4:	080012ef 	.word	0x080012ef
 80012c8:	080012ff 	.word	0x080012ff
      duplex = ETH_FULLDUPLEX_MODE;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80012d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80012dc:	e017      	b.n	800130e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80012de:	2300      	movs	r3, #0
 80012e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80012e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80012ec:	e00f      	b.n	800130e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80012f4:	2300      	movs	r3, #0
 80012f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80012fc:	e007      	b.n	800130e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80012fe:	2300      	movs	r3, #0
 8001300:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001302:	2300      	movs	r3, #0
 8001304:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800130a:	e000      	b.n	800130e <ethernet_link_check_state+0xce>
      break;
 800130c:	bf00      	nop
    if(linkchanged)
 800130e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d018      	beq.n	8001346 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <ethernet_link_check_state+0x114>)
 800131c:	f000 ffc4 	bl	80022a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8001324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001326:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <ethernet_link_check_state+0x114>)
 8001330:	f001 f98e 	bl	8002650 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <ethernet_link_check_state+0x114>)
 8001336:	f000 fd57 	bl	8001de8 <HAL_ETH_Start>
      netif_set_up(netif);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f007 fe52 	bl	8008fe4 <netif_set_up>
      netif_set_link_up(netif);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f007 feed 	bl	8009120 <netif_set_link_up>
}
 8001346:	bf00      	nop
 8001348:	3780      	adds	r7, #128	; 0x80
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24004e90 	.word	0x24004e90
 8001354:	24004da8 	.word	0x24004da8

08001358 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <HAL_ETH_RxAllocateCallback+0x54>)
 8001362:	f007 fbb9 	bl	8008ad8 <memp_malloc_pool>
 8001366:	60f8      	str	r0, [r7, #12]
  if (p)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d014      	beq.n	8001398 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f103 0220 	add.w	r2, r3, #32
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_ETH_RxAllocateCallback+0x58>)
 800137c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2241      	movs	r2, #65	; 0x41
 800138e:	2100      	movs	r1, #0
 8001390:	2000      	movs	r0, #0
 8001392:	f008 f8cf 	bl	8009534 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8001396:	e005      	b.n	80013a4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	08013ab4 	.word	0x08013ab4
 80013b0:	08000fc5 	.word	0x08000fc5
 80013b4:	24004da4 	.word	0x24004da4

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f000 f986 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00e fc49 	bl	800fc7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7fe ffeb 	bl	80003c4 <main>
  bx  lr
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f8:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80013fc:	08013d04 	.word	0x08013d04
  ldr r2, =_sbss
 8001400:	24004adc 	.word	0x24004adc
  ldr r4, =_ebss
 8001404:	2400bc94 	.word	0x2400bc94

08001408 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC3_IRQHandler>

0800140a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <LAN8742_RegisterBusIO+0x28>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <LAN8742_RegisterBusIO+0x28>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <LAN8742_RegisterBusIO+0x28>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e014      	b.n	8001462 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d17c      	bne.n	8001588 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2220      	movs	r2, #32
 80014a0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e01c      	b.n	80014e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	2112      	movs	r1, #18
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	4798      	blx	r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da03      	bge.n	80014c4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80014bc:	f06f 0304 	mvn.w	r3, #4
 80014c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014c2:	e00b      	b.n	80014dc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d105      	bne.n	80014dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
         break;
 80014da:	e005      	b.n	80014e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b1f      	cmp	r3, #31
 80014e6:	d9df      	bls.n	80014a8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b1f      	cmp	r3, #31
 80014ee:	d902      	bls.n	80014f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80014f0:	f06f 0302 	mvn.w	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d145      	bne.n	8001588 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6810      	ldr	r0, [r2, #0]
 8001504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001508:	2100      	movs	r1, #0
 800150a:	4798      	blx	r3
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	db37      	blt.n	8001582 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6810      	ldr	r0, [r2, #0]
 800151a:	f107 0208 	add.w	r2, r7, #8
 800151e:	2100      	movs	r1, #0
 8001520:	4798      	blx	r3
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	db28      	blt.n	800157a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4798      	blx	r3
 800152e:	4603      	mov	r3, r0
 8001530:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001532:	e01c      	b.n	800156e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4798      	blx	r3
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001546:	d80e      	bhi.n	8001566 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6810      	ldr	r0, [r2, #0]
 8001550:	f107 0208 	add.w	r2, r7, #8
 8001554:	2100      	movs	r1, #0
 8001556:	4798      	blx	r3
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	da07      	bge.n	800156e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800155e:	f06f 0304 	mvn.w	r3, #4
 8001562:	613b      	str	r3, [r7, #16]
                 break;
 8001564:	e010      	b.n	8001588 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001566:	f06f 0301 	mvn.w	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
               break;
 800156c:	e00c      	b.n	8001588 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1dd      	bne.n	8001534 <LAN8742_Init+0xc6>
 8001578:	e006      	b.n	8001588 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800157a:	f06f 0304 	mvn.w	r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	e002      	b.n	8001588 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001582:	f06f 0303 	mvn.w	r3, #3
 8001586:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d112      	bne.n	80015b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4798      	blx	r3
 8001594:	4603      	mov	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001598:	bf00      	nop
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4798      	blx	r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015ac:	d9f5      	bls.n	800159a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015b4:	693b      	ldr	r3, [r7, #16]
 }
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6810      	ldr	r0, [r2, #0]
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	2101      	movs	r1, #1
 80015d8:	4798      	blx	r3
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da02      	bge.n	80015e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015e0:	f06f 0304 	mvn.w	r3, #4
 80015e4:	e06e      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6810      	ldr	r0, [r2, #0]
 80015ee:	f107 020c 	add.w	r2, r7, #12
 80015f2:	2101      	movs	r1, #1
 80015f4:	4798      	blx	r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da02      	bge.n	8001602 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015fc:	f06f 0304 	mvn.w	r3, #4
 8001600:	e060      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800160c:	2301      	movs	r3, #1
 800160e:	e059      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6810      	ldr	r0, [r2, #0]
 8001618:	f107 020c 	add.w	r2, r7, #12
 800161c:	2100      	movs	r1, #0
 800161e:	4798      	blx	r3
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	da02      	bge.n	800162c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001626:	f06f 0304 	mvn.w	r3, #4
 800162a:	e04b      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11b      	bne.n	800166e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <LAN8742_GetLinkState+0x90>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800164a:	2302      	movs	r3, #2
 800164c:	e03a      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001658:	2303      	movs	r3, #3
 800165a:	e033      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001666:	2304      	movs	r3, #4
 8001668:	e02c      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800166a:	2305      	movs	r3, #5
 800166c:	e02a      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6810      	ldr	r0, [r2, #0]
 8001676:	f107 020c 	add.w	r2, r7, #12
 800167a:	211f      	movs	r1, #31
 800167c:	4798      	blx	r3
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	da02      	bge.n	800168a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001684:	f06f 0304 	mvn.w	r3, #4
 8001688:	e01c      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001694:	2306      	movs	r3, #6
 8001696:	e015      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 031c 	and.w	r3, r3, #28
 800169e:	2b18      	cmp	r3, #24
 80016a0:	d101      	bne.n	80016a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00e      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 031c 	and.w	r3, r3, #28
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d101      	bne.n	80016b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e007      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 031c 	and.w	r3, r3, #28
 80016ba:	2b14      	cmp	r3, #20
 80016bc:	d101      	bne.n	80016c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016be:	2304      	movs	r3, #4
 80016c0:	e000      	b.n	80016c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016c2:	2305      	movs	r3, #5
    }				
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <SystemInit+0xfc>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <SystemInit+0xfc>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <SystemInit+0xfc>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <SystemInit+0xfc>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <SystemInit+0x100>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d807      	bhi.n	8001708 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <SystemInit+0x100>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 030f 	bic.w	r3, r3, #15
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <SystemInit+0x100>)
 8001702:	f043 0307 	orr.w	r3, r3, #7
 8001706:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <SystemInit+0x104>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <SystemInit+0x104>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <SystemInit+0x104>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <SystemInit+0x104>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <SystemInit+0x104>)
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <SystemInit+0x108>)
 8001722:	4013      	ands	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <SystemInit+0x100>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <SystemInit+0x100>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 030f 	bic.w	r3, r3, #15
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <SystemInit+0x100>)
 800173c:	f043 0307 	orr.w	r3, r3, #7
 8001740:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <SystemInit+0x104>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <SystemInit+0x104>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <SystemInit+0x104>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <SystemInit+0x104>)
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <SystemInit+0x10c>)
 8001758:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <SystemInit+0x104>)
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <SystemInit+0x110>)
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <SystemInit+0x104>)
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <SystemInit+0x114>)
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <SystemInit+0x104>)
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <SystemInit+0x104>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <SystemInit+0x114>)
 8001770:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <SystemInit+0x104>)
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <SystemInit+0x104>)
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <SystemInit+0x114>)
 800177c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <SystemInit+0x104>)
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <SystemInit+0x104>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <SystemInit+0x104>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <SystemInit+0x104>)
 8001792:	2200      	movs	r2, #0
 8001794:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <SystemInit+0x118>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <SystemInit+0x118>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <SystemInit+0x11c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <SystemInit+0x120>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ae:	d202      	bcs.n	80017b6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <SystemInit+0x124>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <SystemInit+0x128>)
 80017b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017bc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	52002000 	.word	0x52002000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017d8:	02020200 	.word	0x02020200
 80017dc:	01ff0000 	.word	0x01ff0000
 80017e0:	01010280 	.word	0x01010280
 80017e4:	580000c0 	.word	0x580000c0
 80017e8:	5c001000 	.word	0x5c001000
 80017ec:	ffff0000 	.word	0xffff0000
 80017f0:	51008108 	.word	0x51008108
 80017f4:	52004000 	.word	0x52004000

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	2003      	movs	r0, #3
 8001800:	f000 f95e 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001804:	f002 fd6c 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_Init+0x68>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	4913      	ldr	r1, [pc, #76]	; (8001864 <HAL_Init+0x6c>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_Init+0x68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_Init+0x6c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_Init+0x70>)
 800183a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_Init+0x74>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f814 	bl	8001870 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e002      	b.n	8001858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001852:	f7ff f82b 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	58024400 	.word	0x58024400
 8001864:	08013ac0 	.word	0x08013ac0
 8001868:	24000018 	.word	0x24000018
 800186c:	24000014 	.word	0x24000014

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_InitTick+0x60>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e021      	b.n	80018c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_InitTick+0x64>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_InitTick+0x60>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f935 	bl	8001b0a <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 f90d 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_InitTick+0x68>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	24000020 	.word	0x24000020
 80018d4:	24000014 	.word	0x24000014
 80018d8:	2400001c 	.word	0x2400001c

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	24000020 	.word	0x24000020
 8001900:	24004eb0 	.word	0x24004eb0

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	24004eb0 	.word	0x24004eb0

0800191c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetREVID+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0c1b      	lsrs	r3, r3, #16
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	5c001000 	.word	0x5c001000

08001934 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	58000400 	.word	0x58000400

0800195c <__NVIC_SetPriorityGrouping>:
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0000 	.word	0x05fa0000

080019a4 <__NVIC_GetPriorityGrouping>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_SetPriority>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff47 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff5e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffb2 	bl	8001a7c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b28:	f3bf 8f5f 	dmb	sy
}
 8001b2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_MPU_Disable+0x28>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_MPU_Disable+0x28>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_MPU_Disable+0x2c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	e000ed90 	.word	0xe000ed90

08001b54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_MPU_Enable+0x38>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MPU_Enable+0x3c>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_MPU_Enable+0x3c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b72:	f3bf 8f4f 	dsb	sy
}
 8001b76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b78:	f3bf 8f6f 	isb	sy
}
 8001b7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed90 	.word	0xe000ed90
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	785a      	ldrb	r2, [r3, #1]
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_MPU_ConfigRegion+0x84>)
 8001ba2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d029      	beq.n	8001c00 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001bac:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <HAL_MPU_ConfigRegion+0x84>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7adb      	ldrb	r3, [r3, #11]
 8001bbe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7a9b      	ldrb	r3, [r3, #10]
 8001bc6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7b5b      	ldrb	r3, [r3, #13]
 8001bce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7b9b      	ldrb	r3, [r3, #14]
 8001bd6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7bdb      	ldrb	r3, [r3, #15]
 8001bde:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7a5b      	ldrb	r3, [r3, #9]
 8001be6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a1b      	ldrb	r3, [r3, #8]
 8001bee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bf0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bfa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bfc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001bfe:	e005      	b.n	8001c0c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_MPU_ConfigRegion+0x84>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_MPU_ConfigRegion+0x84>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed90 	.word	0xe000ed90

08001c1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0cf      	b.n	8001dce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2223      	movs	r2, #35	; 0x23
 8001c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff f9e1 	bl	8001008 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <HAL_ETH_Init+0x1bc>)
 8001c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c4c:	4a62      	ldr	r2, [pc, #392]	; (8001dd8 <HAL_ETH_Init+0x1bc>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c56:	4b60      	ldr	r3, [pc, #384]	; (8001dd8 <HAL_ETH_Init+0x1bc>)
 8001c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7a1b      	ldrb	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fe61 	bl	8001934 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c72:	e003      	b.n	8001c7c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c78:	f7ff fe5c 	bl	8001934 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c7c:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_ETH_Init+0x1c0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff fe34 	bl	8001904 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c9e:	e011      	b.n	8001cc4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ca0:	f7ff fe30 	bl	8001904 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cae:	d909      	bls.n	8001cc4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	22e0      	movs	r2, #224	; 0xe0
 8001cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e084      	b.n	8001dce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e4      	bne.n	8001ca0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fcd4 	bl	8002684 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cdc:	f002 fc7a 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a3f      	ldr	r2, [pc, #252]	; (8001de0 <HAL_ETH_Init+0x1c4>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	0c9a      	lsrs	r2, r3, #18
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 febf 	bl	8002a78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d06:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d16:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	22e0      	movs	r2, #224	; 0xe0
 8001d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e049      	b.n	8001dce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_ETH_Init+0x1c8>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6952      	ldr	r2, [r2, #20]
 8001d4e:	0051      	lsls	r1, r2, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d5a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 ff27 	bl	8002bb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 ff6d 	bl	8002c44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	3305      	adds	r3, #5
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	021a      	lsls	r2, r3, #8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	3303      	adds	r3, #3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	061a      	lsls	r2, r3, #24
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	3302      	adds	r3, #2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001da8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001db6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001db8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58000400 	.word	0x58000400
 8001de0:	431bde83 	.word	0x431bde83
 8001de4:	ffff8001 	.word	0xffff8001

08001de8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d153      	bne.n	8001ea2 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2223      	movs	r2, #35	; 0x23
 8001dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f936 	bl	800207a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0202 	orr.w	r2, r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e76:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e92:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2223      	movs	r2, #35	; 0x23
 8001e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eba:	2b23      	cmp	r3, #35	; 0x23
 8001ebc:	d13f      	bne.n	8001f3e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2223      	movs	r2, #35	; 0x23
 8001ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ece:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ede:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0202 	bic.w	r2, r2, #2
 8001f30:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f78:	2b23      	cmp	r3, #35	; 0x23
 8001f7a:	d179      	bne.n	8002070 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 febd 	bl	8002d00 <ETH_Prepare_Tx_Descriptors>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f043 0202 	orr.w	r2, r3, #2
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e068      	b.n	8002072 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001fa0:	f3bf 8f4f 	dsb	sy
}
 8001fa4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3206      	adds	r2, #6
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d904      	bls.n	8001fd0 <HAL_ETH_Transmit+0x84>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	1f1a      	subs	r2, r3, #4
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3106      	adds	r1, #6
 8001fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fe0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fe4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001fe8:	f7ff fc8c 	bl	8001904 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001fee:	e039      	b.n	8002064 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f043 0208 	orr.w	r2, r3, #8
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e023      	b.n	8002072 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d018      	beq.n	8002064 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002032:	f7ff fc67 	bl	8001904 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <HAL_ETH_Transmit+0xfc>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800205e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e006      	b.n	8002072 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	dbc1      	blt.n	8001ff0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b088      	sub	sp, #32
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002086:	2301      	movs	r3, #1
 8002088:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	3212      	adds	r2, #18
 8002096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80020a2:	e03b      	b.n	800211c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d112      	bne.n	80020d2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f951 	bl	8001358 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	74fb      	strb	r3, [r7, #19]
 80020c0:	e007      	b.n	80020d2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	461a      	mov	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d021      	beq.n	800211c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80020d8:	f3bf 8f5f 	dmb	sy
}
 80020dc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	e003      	b.n	80020f8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80020f6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d902      	bls.n	800210a <ETH_UpdateDescriptor+0x90>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3b04      	subs	r3, #4
 8002108:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	3212      	adds	r2, #18
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	617b      	str	r3, [r7, #20]
      desccount--;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3b01      	subs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <ETH_UpdateDescriptor+0xae>
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1bd      	bne.n	80020a4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	429a      	cmp	r2, r3
 8002130:	d00d      	beq.n	800214e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213a:	461a      	mov	r2, r3
 800213c:	2300      	movs	r3, #0
 800213e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e03e      	b.n	80021f6 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002180:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f043 030c 	orr.w	r3, r3, #12
 80021a4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80021b8:	f7ff fba4 	bl	8001904 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021be:	e009      	b.n	80021d4 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80021c0:	f7ff fba0 	bl	8001904 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ce:	d901      	bls.n	80021d4 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e010      	b.n	80021f6 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ed      	bne.n	80021c0 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e03c      	b.n	800229c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800222a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 030c 	bic.w	r3, r3, #12
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800226e:	f7ff fb49 	bl	8001904 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002274:	e009      	b.n	800228a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002276:	f7ff fb45 	bl	8001904 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002284:	d901      	bls.n	800228a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e008      	b.n	800229c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ed      	bne.n	8002276 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40028000 	.word	0x40028000

080022a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e1c3      	b.n	8002644 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0e5b      	lsrs	r3, r3, #25
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	b29a      	uxth	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025d0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80025e0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00b      	b.n	800267c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266a:	2b10      	cmp	r3, #16
 800266c:	d105      	bne.n	800267a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f85f 	bl	8002734 <ETH_SetMACConfig>

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002694:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800269c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800269e:	f001 ff99 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80026a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <HAL_ETH_SetMDIOClockRange+0x3a>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d804      	bhi.n	80026be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e027      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d908      	bls.n	80026d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d204      	bcs.n	80026d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e01a      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d303      	bcc.n	80026e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d911      	bls.n	800270c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d908      	bls.n	8002702 <HAL_ETH_SetMDIOClockRange+0x7e>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_ETH_SetMDIOClockRange+0xac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d804      	bhi.n	8002702 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e005      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e000      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800270c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	01312cff 	.word	0x01312cff
 8002724:	02160ebf 	.word	0x02160ebf
 8002728:	03938700 	.word	0x03938700
 800272c:	05f5e0ff 	.word	0x05f5e0ff
 8002730:	08f0d17f 	.word	0x08f0d17f

08002734 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800274e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7b5b      	ldrb	r3, [r3, #13]
 800275c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800275e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	7b9b      	ldrb	r3, [r3, #14]
 8002764:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002766:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7bdb      	ldrb	r3, [r3, #15]
 800276c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800276e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	7c12      	ldrb	r2, [r2, #16]
 8002774:	2a00      	cmp	r2, #0
 8002776:	d102      	bne.n	800277e <ETH_SetMACConfig+0x4a>
 8002778:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800277c:	e000      	b.n	8002780 <ETH_SetMACConfig+0x4c>
 800277e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002780:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	7c52      	ldrb	r2, [r2, #17]
 8002786:	2a00      	cmp	r2, #0
 8002788:	d102      	bne.n	8002790 <ETH_SetMACConfig+0x5c>
 800278a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278e:	e000      	b.n	8002792 <ETH_SetMACConfig+0x5e>
 8002790:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	7c9b      	ldrb	r3, [r3, #18]
 8002798:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800279a:	431a      	orrs	r2, r3
               macconf->Speed |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80027a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80027a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7f1b      	ldrb	r3, [r3, #28]
 80027ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80027ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7f5b      	ldrb	r3, [r3, #29]
 80027b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	7f92      	ldrb	r2, [r2, #30]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d102      	bne.n	80027c6 <ETH_SetMACConfig+0x92>
 80027c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c4:	e000      	b.n	80027c8 <ETH_SetMACConfig+0x94>
 80027c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7fdb      	ldrb	r3, [r3, #31]
 80027ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d102      	bne.n	80027e2 <ETH_SetMACConfig+0xae>
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	e000      	b.n	80027e4 <ETH_SetMACConfig+0xb0>
 80027e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80027f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <ETH_SetMACConfig+0x22c>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	430b      	orrs	r3, r1
 8002810:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002820:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002828:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800282a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002832:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002834:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800283c:	2a00      	cmp	r2, #0
 800283e:	d102      	bne.n	8002846 <ETH_SetMACConfig+0x112>
 8002840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x114>
 8002846:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002848:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <ETH_SetMACConfig+0x230>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	430b      	orrs	r3, r1
 8002864:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <ETH_SetMACConfig+0x234>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	430b      	orrs	r3, r1
 8002888:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002890:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002896:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800289e:	2a00      	cmp	r2, #0
 80028a0:	d101      	bne.n	80028a6 <ETH_SetMACConfig+0x172>
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	e000      	b.n	80028a8 <ETH_SetMACConfig+0x174>
 80028a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80028a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80028d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80028d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f023 0103 	bic.w	r1, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80028fe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800291a:	2a00      	cmp	r2, #0
 800291c:	d101      	bne.n	8002922 <ETH_SetMACConfig+0x1ee>
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	e000      	b.n	8002924 <ETH_SetMACConfig+0x1f0>
 8002922:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002924:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800292c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800292e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002936:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002944:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	430a      	orrs	r2, r1
 8002950:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	00048083 	.word	0x00048083
 8002964:	c0f88000 	.word	0xc0f88000
 8002968:	fffffef0 	.word	0xfffffef0

0800296c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <ETH_SetDMAConfig+0xf8>)
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002992:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800299e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7b1b      	ldrb	r3, [r3, #12]
 80029a4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <ETH_SetDMAConfig+0xfc>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	430b      	orrs	r3, r1
 80029c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7b5b      	ldrb	r3, [r3, #13]
 80029ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <ETH_SetDMAConfig+0x100>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	430b      	orrs	r3, r1
 80029ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7d1b      	ldrb	r3, [r3, #20]
 80029fc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80029fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7f5b      	ldrb	r3, [r3, #29]
 8002a04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <ETH_SetDMAConfig+0x104>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	7f1b      	ldrb	r3, [r3, #28]
 8002a2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <ETH_SetDMAConfig+0x108>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	ffff87fd 	.word	0xffff87fd
 8002a68:	ffff2ffe 	.word	0xffff2ffe
 8002a6c:	fffec000 	.word	0xfffec000
 8002a70:	ffc0efef 	.word	0xffc0efef
 8002a74:	7fc0ffff 	.word	0x7fc0ffff

08002a78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0a4      	sub	sp, #144	; 0x90
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a86:	2300      	movs	r3, #0
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002ad0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002adc:	2300      	movs	r3, #0
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002af2:	2300      	movs	r3, #0
 8002af4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002afa:	2300      	movs	r3, #0
 8002afc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b10:	2320      	movs	r3, #32
 8002b12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b34:	2302      	movs	r3, #2
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002b52:	2300      	movs	r3, #0
 8002b54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fde6 	bl	8002734 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fee1 	bl	800296c <ETH_SetDMAConfig>
}
 8002baa:	bf00      	nop
 8002bac:	3790      	adds	r7, #144	; 0x90
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e01d      	b.n	8002bfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68d9      	ldr	r1, [r3, #12]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	3206      	adds	r2, #6
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d9de      	bls.n	8002bc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c10:	461a      	mov	r2, r3
 8002c12:	2303      	movs	r3, #3
 8002c14:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e023      	b.n	8002c9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	3212      	adds	r2, #18
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d9d8      	bls.n	8002c52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08d      	sub	sp, #52	; 0x34
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3318      	adds	r3, #24
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d007      	beq.n	8002d54 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	3304      	adds	r3, #4
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	e259      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d044      	beq.n	8002dee <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d70:	431a      	orrs	r2, r3
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d027      	beq.n	8002dee <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ddc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	6992      	ldr	r2, [r2, #24]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d036      	beq.n	8002e9e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e3c:	f3bf 8f5f 	dmb	sy
}
 8002e40:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3301      	adds	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d902      	bls.n	8002e60 <ETH_Prepare_Tx_Descriptors+0x160>
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e7c:	d10f      	bne.n	8002e9e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e88:	f3bf 8f5f 	dmb	sy
}
 8002e8c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e1b6      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	6852      	ldr	r2, [r2, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	6852      	ldr	r2, [r2, #4]
 8002ee4:	0412      	lsls	r2, r2, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e008      	b.n	8002f00 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d021      	beq.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	04db      	lsls	r3, r3, #19
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	69d2      	ldr	r2, [r2, #28]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	e02e      	b.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x29e>
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	ffffc000 	.word	0xffffc000
 8002f48:	c000ffff 	.word	0xc000ffff
 8002f4c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fd4:	f3bf 8f5f 	dmb	sy
}
 8002fd8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80da 	beq.w	80031a8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	431a      	orrs	r2, r3
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003006:	e0cf      	b.n	80031a8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	3301      	adds	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	2b03      	cmp	r3, #3
 800301e:	d902      	bls.n	8003026 <ETH_Prepare_Tx_Descriptors+0x326>
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	3b04      	subs	r3, #4
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003048:	d007      	beq.n	800305a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	3304      	adds	r3, #4
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d029      	beq.n	80030ae <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003066:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	e019      	b.n	80030a2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800306e:	f3bf 8f5f 	dmb	sy
}
 8003072:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	3301      	adds	r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b03      	cmp	r3, #3
 800308a:	d902      	bls.n	8003092 <ETH_Prepare_Tx_Descriptors+0x392>
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	3b04      	subs	r3, #4
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	3301      	adds	r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3e1      	bcc.n	800306e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ae      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <ETH_Prepare_Tx_Descriptors+0x448>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d012      	beq.n	8003104 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	6852      	ldr	r2, [r2, #4]
 80030fa:	0412      	lsls	r2, r2, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e008      	b.n	8003116 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003110:	4013      	ands	r3, r2
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	69d2      	ldr	r2, [r2, #28]
 800312e:	431a      	orrs	r2, r3
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e020      	b.n	8003184 <ETH_Prepare_Tx_Descriptors+0x484>
 8003142:	bf00      	nop
 8003144:	ffff8000 	.word	0xffff8000
 8003148:	ffffc000 	.word	0xffffc000
 800314c:	c000ffff 	.word	0xc000ffff
 8003150:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <ETH_Prepare_Tx_Descriptors+0x518>)
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	3301      	adds	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800318a:	f3bf 8f5f 	dmb	sy
}
 800318e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af2b 	bne.w	8003008 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e005      	b.n	80031d2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3304      	adds	r3, #4
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003206:	b662      	cpsie	i
}
 8003208:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3734      	adds	r7, #52	; 0x34
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	ffff8000 	.word	0xffff8000

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800322a:	4b89      	ldr	r3, [pc, #548]	; (8003450 <HAL_GPIO_Init+0x234>)
 800322c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322e:	e194      	b.n	800355a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8186 	beq.w	8003554 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d005      	beq.n	8003260 <HAL_GPIO_Init+0x44>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d130      	bne.n	80032c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003296:	2201      	movs	r2, #1
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0201 	and.w	r2, r3, #1
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d017      	beq.n	80032fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d123      	bne.n	8003352 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80e0 	beq.w	8003554 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003394:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_GPIO_Init+0x238>)
 8003396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339a:	4a2e      	ldr	r2, [pc, #184]	; (8003454 <HAL_GPIO_Init+0x238>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_GPIO_Init+0x238>)
 80033a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_GPIO_Init+0x23c>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_GPIO_Init+0x240>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d052      	beq.n	8003484 <HAL_GPIO_Init+0x268>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_GPIO_Init+0x244>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_GPIO_Init+0x22e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_GPIO_Init+0x248>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02b      	beq.n	8003446 <HAL_GPIO_Init+0x22a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_GPIO_Init+0x24c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d025      	beq.n	8003442 <HAL_GPIO_Init+0x226>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_GPIO_Init+0x250>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01f      	beq.n	800343e <HAL_GPIO_Init+0x222>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_GPIO_Init+0x254>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d019      	beq.n	800343a <HAL_GPIO_Init+0x21e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_GPIO_Init+0x258>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_GPIO_Init+0x21a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_GPIO_Init+0x25c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00d      	beq.n	8003432 <HAL_GPIO_Init+0x216>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_GPIO_Init+0x260>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <HAL_GPIO_Init+0x212>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_GPIO_Init+0x264>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_GPIO_Init+0x20e>
 8003426:	2309      	movs	r3, #9
 8003428:	e02d      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800342a:	230a      	movs	r3, #10
 800342c:	e02b      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800342e:	2308      	movs	r3, #8
 8003430:	e029      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 8003432:	2307      	movs	r3, #7
 8003434:	e027      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 8003436:	2306      	movs	r3, #6
 8003438:	e025      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800343a:	2305      	movs	r3, #5
 800343c:	e023      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800343e:	2304      	movs	r3, #4
 8003440:	e021      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 8003442:	2303      	movs	r3, #3
 8003444:	e01f      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 8003446:	2302      	movs	r3, #2
 8003448:	e01d      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800344a:	2301      	movs	r3, #1
 800344c:	e01b      	b.n	8003486 <HAL_GPIO_Init+0x26a>
 800344e:	bf00      	nop
 8003450:	58000080 	.word	0x58000080
 8003454:	58024400 	.word	0x58024400
 8003458:	58000400 	.word	0x58000400
 800345c:	58020000 	.word	0x58020000
 8003460:	58020400 	.word	0x58020400
 8003464:	58020800 	.word	0x58020800
 8003468:	58020c00 	.word	0x58020c00
 800346c:	58021000 	.word	0x58021000
 8003470:	58021400 	.word	0x58021400
 8003474:	58021800 	.word	0x58021800
 8003478:	58021c00 	.word	0x58021c00
 800347c:	58022000 	.word	0x58022000
 8003480:	58022400 	.word	0x58022400
 8003484:	2300      	movs	r3, #0
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003496:	4938      	ldr	r1, [pc, #224]	; (8003578 <HAL_GPIO_Init+0x35c>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f ae63 	bne.w	8003230 <HAL_GPIO_Init+0x14>
  }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	3724      	adds	r7, #36	; 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	58000400 	.word	0x58000400

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_HSEM_FastTake+0x2c>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3320      	adds	r3, #32
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_HSEM_FastTake+0x30>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	58026400 	.word	0x58026400
 80035e0:	80000300 	.word	0x80000300

080035e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035ee:	4906      	ldr	r1, [pc, #24]	; (8003608 <HAL_HSEM_Release+0x24>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	58026400 	.word	0x58026400

0800360c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	2b06      	cmp	r3, #6
 800361e:	d00a      	beq.n	8003636 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e040      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e03e      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800363e:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003646:	f7fe f95d 	bl	8001904 <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800364c:	e009      	b.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800364e:	f7fe f959 	bl	8001904 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800365c:	d901      	bls.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e028      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d1ee      	bne.n	800364e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b1e      	cmp	r3, #30
 8003674:	d008      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b2e      	cmp	r3, #46	; 0x2e
 800367a:	d005      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b1d      	cmp	r3, #29
 8003680:	d002      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b2d      	cmp	r3, #45	; 0x2d
 8003686:	d114      	bne.n	80036b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003688:	f7fe f93c 	bl	8001904 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800368e:	e009      	b.n	80036a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003690:	f7fe f938 	bl	8001904 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800369e:	d901      	bls.n	80036a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d1ee      	bne.n	8003690 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024800 	.word	0x58024800

080036c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f000 bc48 	b.w	8003f64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8088 	beq.w	80037f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ec:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d007      	beq.n	8003708 <HAL_RCC_OscConfig+0x48>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b18      	cmp	r3, #24
 80036fc:	d111      	bne.n	8003722 <HAL_RCC_OscConfig+0x62>
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d10c      	bne.n	8003722 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b8f      	ldr	r3, [pc, #572]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d06d      	beq.n	80037f0 <HAL_RCC_OscConfig+0x130>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d169      	bne.n	80037f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f000 bc21 	b.w	8003f64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x7a>
 800372c:	4b86      	ldr	r3, [pc, #536]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e02e      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x9c>
 8003742:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a80      	ldr	r2, [pc, #512]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7d      	ldr	r2, [pc, #500]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0xc0>
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a74      	ldr	r2, [pc, #464]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 8003780:	4b71      	ldr	r3, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a70      	ldr	r2, [pc, #448]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b6e      	ldr	r3, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6d      	ldr	r2, [pc, #436]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe f8b0 	bl	8001904 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe f8ac 	bl	8001904 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e3d4      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe8>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe f89c 	bl	8001904 <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe f898 	bl	8001904 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e3c0      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x110>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80ca 	beq.w	8003994 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003800:	4b51      	ldr	r3, [pc, #324]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003808:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_RCC_OscConfig+0x166>
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b18      	cmp	r3, #24
 800381a:	d156      	bne.n	80038ca <HAL_RCC_OscConfig+0x20a>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d151      	bne.n	80038ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003826:	4b48      	ldr	r3, [pc, #288]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x17e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e392      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383e:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0219 	bic.w	r2, r3, #25
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	493f      	ldr	r1, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f858 	bl	8001904 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003858:	f7fe f854 	bl	8001904 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e37c      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	f7fe f851 	bl	800191c <HAL_GetREVID>
 800387a:	4603      	mov	r3, r0
 800387c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003880:	4293      	cmp	r3, r2
 8003882:	d817      	bhi.n	80038b4 <HAL_RCC_OscConfig+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d108      	bne.n	800389e <HAL_RCC_OscConfig+0x1de>
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003894:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	e07a      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	4926      	ldr	r1, [pc, #152]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b2:	e06f      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	4921      	ldr	r1, [pc, #132]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c8:	e064      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d047      	beq.n	8003962 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 0219 	bic.w	r2, r3, #25
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f80e 	bl	8001904 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe f80a 	bl	8001904 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e332      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	f7fe f807 	bl	800191c <HAL_GetREVID>
 800390e:	4603      	mov	r3, r0
 8003910:	f241 0203 	movw	r2, #4099	; 0x1003
 8003914:	4293      	cmp	r3, r2
 8003916:	d819      	bhi.n	800394c <HAL_RCC_OscConfig+0x28c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d108      	bne.n	8003932 <HAL_RCC_OscConfig+0x272>
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392e:	6053      	str	r3, [r2, #4]
 8003930:	e030      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	031b      	lsls	r3, r3, #12
 8003940:	4901      	ldr	r1, [pc, #4]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 8003946:	e025      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
 8003948:	58024400 	.word	0x58024400
 800394c:	4b9a      	ldr	r3, [pc, #616]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4997      	ldr	r1, [pc, #604]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
 8003960:	e018      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a94      	ldr	r2, [pc, #592]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fd ffc9 	bl	8001904 <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fd ffc5 	bl	8001904 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e2ed      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003988:	4b8b      	ldr	r3, [pc, #556]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a9 	beq.w	8003af4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ac:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_OscConfig+0x308>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b18      	cmp	r3, #24
 80039bc:	d13a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x374>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d135      	bne.n	8003a34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c8:	4b7b      	ldr	r3, [pc, #492]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x320>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e2c1      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039e0:	f7fd ff9c 	bl	800191c <HAL_GetREVID>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d817      	bhi.n	8003a1e <HAL_RCC_OscConfig+0x35e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x348>
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039fe:	4a6e      	ldr	r2, [pc, #440]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a06:	e075      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a08:	4b6b      	ldr	r3, [pc, #428]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	069b      	lsls	r3, r3, #26
 8003a16:	4968      	ldr	r1, [pc, #416]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a1c:	e06a      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a1e:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	4962      	ldr	r1, [pc, #392]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a32:	e05f      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d042      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a3c:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd ff5c 	bl	8001904 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a50:	f7fd ff58 	bl	8001904 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e280      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a62:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a6e:	f7fd ff55 	bl	800191c <HAL_GetREVID>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d817      	bhi.n	8003aac <HAL_RCC_OscConfig+0x3ec>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3d6>
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a92:	6053      	str	r3, [r2, #4]
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
 8003a96:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	069b      	lsls	r3, r3, #26
 8003aa4:	4944      	ldr	r1, [pc, #272]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 8003aaa:	e023      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60cb      	str	r3, [r1, #12]
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd ff19 	bl	8001904 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ad6:	f7fd ff15 	bl	8001904 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e23d      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d036      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d019      	beq.n	8003b3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fef6 	bl	8001904 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fef2 	bl	8001904 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e21a      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x45c>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd fedc 	bl	8001904 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fd fed8 	bl	8001904 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e200      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d039      	beq.n	8003bee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd feb9 	bl	8001904 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b96:	f7fd feb5 	bl	8001904 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1dd      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x4d6>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x52e>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bbc:	4b9b      	ldr	r3, [pc, #620]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9a      	ldr	r2, [pc, #616]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fe9c 	bl	8001904 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd0:	f7fd fe98 	bl	8001904 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1c0      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003be2:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8081 	beq.w	8003cfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a8b      	ldr	r2, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c08:	f7fd fe7c 	bl	8001904 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fd fe78 	bl	8001904 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1a0      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c22:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x584>
 8003c36:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e02d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5a6>
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c8>
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a67      	ldr	r2, [pc, #412]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a64      	ldr	r2, [pc, #400]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fe2c 	bl	8001904 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fe28 	bl	8001904 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e14e      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc6:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x5f0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fe16 	bl	8001904 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd fe12 	bl	8001904 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e138      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 812d 	beq.w	8003f62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d10:	2b18      	cmp	r3, #24
 8003d12:	f000 80bd 	beq.w	8003e90 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	f040 809e 	bne.w	8003e5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fdea 	bl	8001904 <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fde6 	bl	8001904 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e10e      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x774>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	430a      	orrs	r2, r1
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	3b01      	subs	r3, #1
 8003d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	3b01      	subs	r3, #1
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d9c:	4923      	ldr	r1, [pc, #140]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x778>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f023 020c 	bic.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4917      	ldr	r1, [pc, #92]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f023 0202 	bic.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	4912      	ldr	r1, [pc, #72]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd fd6f 	bl	8001904 <HAL_GetTick>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e28:	e011      	b.n	8003e4e <HAL_RCC_OscConfig+0x78e>
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	58024800 	.word	0x58024800
 8003e34:	fffffc0c 	.word	0xfffffc0c
 8003e38:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fd62 	bl	8001904 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e08a      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x77c>
 8003e5a:	e082      	b.n	8003f62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a42      	ldr	r2, [pc, #264]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fd4c 	bl	8001904 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd fd48 	bl	8001904 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e070      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x7b0>
 8003e8e:	e068      	b.n	8003f62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d031      	beq.n	8003f08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d12a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d122      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0a5b      	lsrs	r3, r3, #9
 8003ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e02b      	b.n	8003f64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d01f      	beq.n	8003f62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f2e:	f7fd fce9 	bl	8001904 <HAL_GetTick>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f34:	bf00      	nop
 8003f36:	f7fd fce5 	bl	8001904 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d0f9      	beq.n	8003f36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_RCC_OscConfig+0x8b0>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f4e:	00d2      	lsls	r2, r2, #3
 8003f50:	4906      	ldr	r1, [pc, #24]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <HAL_RCC_OscConfig+0x8ac>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3730      	adds	r7, #48	; 0x30
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	ffff0007 	.word	0xffff0007

08003f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e19c      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b8a      	ldr	r3, [pc, #552]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d910      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	4985      	ldr	r1, [pc, #532]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b83      	ldr	r3, [pc, #524]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e184      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d908      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fd4:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4975      	ldr	r1, [pc, #468]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	4b70      	ldr	r3, [pc, #448]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d908      	bls.n	8004014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004002:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	496a      	ldr	r1, [pc, #424]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004010:	4313      	orrs	r3, r2
 8004012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800402c:	429a      	cmp	r2, r3
 800402e:	d908      	bls.n	8004042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004030:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	495e      	ldr	r1, [pc, #376]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 800403e:	4313      	orrs	r3, r2
 8004040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d010      	beq.n	8004070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405a:	429a      	cmp	r2, r3
 800405c:	d908      	bls.n	8004070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800405e:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4953      	ldr	r1, [pc, #332]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 800406c:	4313      	orrs	r3, r2
 800406e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	429a      	cmp	r2, r3
 800408a:	d908      	bls.n	800409e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f023 020f 	bic.w	r2, r3, #15
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4947      	ldr	r1, [pc, #284]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 800409a:	4313      	orrs	r3, r2
 800409c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d055      	beq.n	8004156 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4940      	ldr	r1, [pc, #256]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d121      	bne.n	8004114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0f6      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d115      	bne.n	8004114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0ea      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0de      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0d6      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004114:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f023 0207 	bic.w	r2, r3, #7
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4925      	ldr	r1, [pc, #148]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004122:	4313      	orrs	r3, r2
 8004124:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fd fbed 	bl	8001904 <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412c:	e00a      	b.n	8004144 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412e:	f7fd fbe9 	bl	8001904 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0be      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	429a      	cmp	r2, r3
 8004154:	d1eb      	bne.n	800412e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	429a      	cmp	r2, r3
 8004170:	d208      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	490e      	ldr	r1, [pc, #56]	; (80041b8 <HAL_RCC_ClockConfig+0x244>)
 8004180:	4313      	orrs	r3, r2
 8004182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d214      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 020f 	bic.w	r2, r3, #15
 800419a:	4906      	ldr	r1, [pc, #24]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <HAL_RCC_ClockConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e086      	b.n	80042c2 <HAL_RCC_ClockConfig+0x34e>
 80041b4:	52002000 	.word	0x52002000
 80041b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d208      	bcs.n	80041ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041d8:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	4939      	ldr	r1, [pc, #228]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d010      	beq.n	8004218 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004202:	429a      	cmp	r2, r3
 8004204:	d208      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	492e      	ldr	r1, [pc, #184]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004230:	429a      	cmp	r2, r3
 8004232:	d208      	bcs.n	8004246 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	4922      	ldr	r1, [pc, #136]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004242:	4313      	orrs	r3, r2
 8004244:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800425e:	429a      	cmp	r2, r3
 8004260:	d208      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4917      	ldr	r1, [pc, #92]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004270:	4313      	orrs	r3, r2
 8004272:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004274:	f000 f834 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	4912      	ldr	r1, [pc, #72]	; (80042d0 <HAL_RCC_ClockConfig+0x35c>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_RCC_ClockConfig+0x358>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <HAL_RCC_ClockConfig+0x35c>)
 800429c:	5cd3      	ldrb	r3, [r2, r3]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <HAL_RCC_ClockConfig+0x360>)
 80042aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x364>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x368>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd fada 	bl	8001870 <HAL_InitTick>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	58024400 	.word	0x58024400
 80042d0:	08013ac0 	.word	0x08013ac0
 80042d4:	24000018 	.word	0x24000018
 80042d8:	24000014 	.word	0x24000014
 80042dc:	2400001c 	.word	0x2400001c

080042e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e6:	4bb3      	ldr	r3, [pc, #716]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ee:	2b18      	cmp	r3, #24
 80042f0:	f200 8155 	bhi.w	800459e <HAL_RCC_GetSysClockFreq+0x2be>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004361 	.word	0x08004361
 8004300:	0800459f 	.word	0x0800459f
 8004304:	0800459f 	.word	0x0800459f
 8004308:	0800459f 	.word	0x0800459f
 800430c:	0800459f 	.word	0x0800459f
 8004310:	0800459f 	.word	0x0800459f
 8004314:	0800459f 	.word	0x0800459f
 8004318:	0800459f 	.word	0x0800459f
 800431c:	08004387 	.word	0x08004387
 8004320:	0800459f 	.word	0x0800459f
 8004324:	0800459f 	.word	0x0800459f
 8004328:	0800459f 	.word	0x0800459f
 800432c:	0800459f 	.word	0x0800459f
 8004330:	0800459f 	.word	0x0800459f
 8004334:	0800459f 	.word	0x0800459f
 8004338:	0800459f 	.word	0x0800459f
 800433c:	0800438d 	.word	0x0800438d
 8004340:	0800459f 	.word	0x0800459f
 8004344:	0800459f 	.word	0x0800459f
 8004348:	0800459f 	.word	0x0800459f
 800434c:	0800459f 	.word	0x0800459f
 8004350:	0800459f 	.word	0x0800459f
 8004354:	0800459f 	.word	0x0800459f
 8004358:	0800459f 	.word	0x0800459f
 800435c:	08004393 	.word	0x08004393
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004360:	4b94      	ldr	r3, [pc, #592]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	4a90      	ldr	r2, [pc, #576]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800437e:	e111      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004380:	4b8d      	ldr	r3, [pc, #564]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004382:	61bb      	str	r3, [r7, #24]
      break;
 8004384:	e10e      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004386:	4b8d      	ldr	r3, [pc, #564]	; (80045bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004388:	61bb      	str	r3, [r7, #24]
      break;
 800438a:	e10b      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800438c:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800438e:	61bb      	str	r3, [r7, #24]
      break;
 8004390:	e108      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800439c:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043a8:	4b82      	ldr	r3, [pc, #520]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043b2:	4b80      	ldr	r3, [pc, #512]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80e1 	beq.w	8004598 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f000 8083 	beq.w	80044e4 <HAL_RCC_GetSysClockFreq+0x204>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	f200 80a1 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x248>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x114>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d056      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043f2:	e099      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f4:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02d      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004400:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	4a6b      	ldr	r2, [pc, #428]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80045c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800445a:	e087      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a58 	vldr	s13, [pc, #352]	; 80045c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b51      	ldr	r3, [pc, #324]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a50 	vldr	s11, [pc, #320]	; 80045c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800449e:	e065      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80045cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80045c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044e2:	e043      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80045d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a02 	vldr	s12, [r7, #8]
 800450a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80045c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004526:	e021      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80045cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a02 	vldr	s12, [r7, #8]
 800454e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80045c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800456a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	0a5b      	lsrs	r3, r3, #9
 8004572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004576:	3301      	adds	r3, #1
 8004578:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004584:	edd7 6a07 	vldr	s13, [r7, #28]
 8004588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004590:	ee17 3a90 	vmov	r3, s15
 8004594:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004596:	e005      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
      break;
 800459c:	e002      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045a0:	61bb      	str	r3, [r7, #24]
      break;
 80045a2:	bf00      	nop
  }

  return sysclockfreq;
 80045a4:	69bb      	ldr	r3, [r7, #24]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	; 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400
 80045b8:	03d09000 	.word	0x03d09000
 80045bc:	003d0900 	.word	0x003d0900
 80045c0:	017d7840 	.word	0x017d7840
 80045c4:	46000000 	.word	0x46000000
 80045c8:	4c742400 	.word	0x4c742400
 80045cc:	4a742400 	.word	0x4a742400
 80045d0:	4bbebc20 	.word	0x4bbebc20

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045da:	f7ff fe81 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_RCC_GetHCLKFreq+0x50>)
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490f      	ldr	r1, [pc, #60]	; (8004628 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_RCC_GetHCLKFreq+0x50>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <HAL_RCC_GetHCLKFreq+0x54>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_RCC_GetHCLKFreq+0x58>)
 8004610:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004612:	4a07      	ldr	r2, [pc, #28]	; (8004630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCC_GetHCLKFreq+0x58>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	58024400 	.word	0x58024400
 8004628:	08013ac0 	.word	0x08013ac0
 800462c:	24000018 	.word	0x24000018
 8004630:	24000014 	.word	0x24000014

08004634 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004646:	2b84      	cmp	r3, #132	; 0x84
 8004648:	d005      	beq.n	8004656 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800464a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	3303      	adds	r3, #3
 8004654:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004668:	f000 fed6 	bl	8005418 <vTaskStartScheduler>
  
  return osOK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}

08004672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004674:	b089      	sub	sp, #36	; 0x24
 8004676:	af04      	add	r7, sp, #16
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <osThreadCreate+0x54>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01c      	beq.n	80046c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685c      	ldr	r4, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681d      	ldr	r5, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691e      	ldr	r6, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ffc8 	bl	8004634 <makeFreeRtosPriority>
 80046a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ae:	9202      	str	r2, [sp, #8]
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	9100      	str	r1, [sp, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4632      	mov	r2, r6
 80046b8:	4629      	mov	r1, r5
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 fce4 	bl	8005088 <xTaskCreateStatic>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e01c      	b.n	8004700 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685c      	ldr	r4, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d2:	b29e      	uxth	r6, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ffaa 	bl	8004634 <makeFreeRtosPriority>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	9200      	str	r2, [sp, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	4632      	mov	r2, r6
 80046ee:	4629      	mov	r1, r5
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fd26 	bl	8005142 <xTaskCreate>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004700:	68fb      	ldr	r3, [r7, #12]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <osDelay+0x16>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	e000      	b.n	8004722 <osDelay+0x18>
 8004720:	2301      	movs	r3, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fe44 	bl	80053b0 <vTaskDelay>
  
  return osOK;
 8004728:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004740:	f000 feca 	bl	80054d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004744:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <pvPortMalloc+0x180>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800474c:	f000 f920 	bl	8004990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <pvPortMalloc+0x184>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 8093 	bne.w	8004884 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01d      	beq.n	80047a0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004764:	2208      	movs	r2, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d014      	beq.n	80047a0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f023 0307 	bic.w	r3, r3, #7
 800477c:	3308      	adds	r3, #8
 800477e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d06e      	beq.n	8004884 <pvPortMalloc+0x150>
 80047a6:	4b45      	ldr	r3, [pc, #276]	; (80048bc <pvPortMalloc+0x188>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d869      	bhi.n	8004884 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <pvPortMalloc+0x18c>)
 80047b2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047b4:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <pvPortMalloc+0x18c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ba:	e004      	b.n	80047c6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <pvPortMalloc+0xa4>
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f1      	bne.n	80047bc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <pvPortMalloc+0x180>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d050      	beq.n	8004884 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2208      	movs	r2, #8
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	2308      	movs	r3, #8
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	429a      	cmp	r2, r3
 8004802:	d91f      	bls.n	8004844 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <pvPortMalloc+0xf8>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	613b      	str	r3, [r7, #16]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800483e:	69b8      	ldr	r0, [r7, #24]
 8004840:	f000 f908 	bl	8004a54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <pvPortMalloc+0x188>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <pvPortMalloc+0x188>)
 8004850:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <pvPortMalloc+0x188>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <pvPortMalloc+0x190>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d203      	bcs.n	8004866 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <pvPortMalloc+0x188>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <pvPortMalloc+0x190>)
 8004864:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <pvPortMalloc+0x184>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	431a      	orrs	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <pvPortMalloc+0x194>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <pvPortMalloc+0x194>)
 8004882:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004884:	f000 fe36 	bl	80054f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <pvPortMalloc+0x174>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <pvPortMalloc+0x172>
	return pvReturn;
 80048a8:	69fb      	ldr	r3, [r7, #28]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	24008abc 	.word	0x24008abc
 80048b8:	24008ad0 	.word	0x24008ad0
 80048bc:	24008ac0 	.word	0x24008ac0
 80048c0:	24008ab4 	.word	0x24008ab4
 80048c4:	24008ac4 	.word	0x24008ac4
 80048c8:	24008ac8 	.word	0x24008ac8

080048cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d04d      	beq.n	800497a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048de:	2308      	movs	r3, #8
 80048e0:	425b      	negs	r3, r3
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <vPortFree+0xb8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <vPortFree+0x44>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <vPortFree+0x62>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60bb      	str	r3, [r7, #8]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <vPortFree+0xb8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01e      	beq.n	800497a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11a      	bne.n	800497a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <vPortFree+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004954:	f000 fdc0 	bl	80054d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortFree+0xbc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4413      	add	r3, r2
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <vPortFree+0xbc>)
 8004964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f000 f874 	bl	8004a54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <vPortFree+0xc0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a06      	ldr	r2, [pc, #24]	; (800498c <vPortFree+0xc0>)
 8004974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004976:	f000 fdbd 	bl	80054f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	24008ad0 	.word	0x24008ad0
 8004988:	24008ac0 	.word	0x24008ac0
 800498c:	24008acc 	.word	0x24008acc

08004990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004996:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800499a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <prvHeapInit+0xac>)
 800499e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3307      	adds	r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <prvHeapInit+0xac>)
 80049c0:	4413      	add	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <prvHeapInit+0xb0>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <prvHeapInit+0xb0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049dc:	2208      	movs	r2, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0307 	bic.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <prvHeapInit+0xb4>)
 80049f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <prvHeapInit+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <prvHeapInit+0xb4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvHeapInit+0xb4>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <prvHeapInit+0xb8>)
 8004a1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <prvHeapInit+0xbc>)
 8004a26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <prvHeapInit+0xc0>)
 8004a2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	24004eb4 	.word	0x24004eb4
 8004a40:	24008ab4 	.word	0x24008ab4
 8004a44:	24008abc 	.word	0x24008abc
 8004a48:	24008ac4 	.word	0x24008ac4
 8004a4c:	24008ac0 	.word	0x24008ac0
 8004a50:	24008ad0 	.word	0x24008ad0

08004a54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <prvInsertBlockIntoFreeList+0xac>)
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e002      	b.n	8004a68 <prvInsertBlockIntoFreeList+0x14>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d8f7      	bhi.n	8004a62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d108      	bne.n	8004a96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d118      	bne.n	8004adc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d00d      	beq.n	8004ad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e008      	b.n	8004ae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e003      	b.n	8004ae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d002      	beq.n	8004af2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	24008ab4 	.word	0x24008ab4
 8004b04:	24008abc 	.word	0x24008abc

08004b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0208 	add.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f103 0208 	add.w	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f103 0208 	add.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00c      	b.n	8004be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e002      	b.n	8004bd8 <vListInsert+0x2e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d2f6      	bcs.n	8004bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6892      	ldr	r2, [r2, #8]
 8004c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6852      	ldr	r2, [r2, #4]
 8004c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d103      	bne.n	8004c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <pxPortInitialiseStack+0x64>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f06f 0202 	mvn.w	r2, #2
 8004cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b20      	subs	r3, #32
 8004cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	08004cd9 	.word	0x08004cd9

08004cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <prvTaskExitError+0x54>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d00a      	beq.n	8004d02 <prvTaskExitError+0x2a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvTaskExitError+0x28>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d16:	bf00      	nop
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0fc      	beq.n	8004d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	24000024 	.word	0x24000024

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	24008adc 	.word	0x24008adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <xPortStartScheduler+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10a      	bne.n	8004da6 <xPortStartScheduler+0x26>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <xPortStartScheduler+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10a      	bne.n	8004dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <xPortStartScheduler+0x12c>)
 8004dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df4:	e009      	b.n	8004e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004df6:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d0ef      	beq.n	8004df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00a      	beq.n	8004e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e6e:	f000 f8dd 	bl	800502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <xPortStartScheduler+0x13c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e78:	f000 f8fc 	bl	8005074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e88:	f7ff ff66 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e8c:	f000 fc86 	bl	800579c <vTaskSwitchContext>
	prvTaskExitError();
 8004e90:	f7ff ff22 	bl	8004cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00
 8004ea4:	410fc271 	.word	0x410fc271
 8004ea8:	410fc270 	.word	0x410fc270
 8004eac:	e000e400 	.word	0xe000e400
 8004eb0:	24008ad4 	.word	0x24008ad4
 8004eb4:	24008ad8 	.word	0x24008ad8
 8004eb8:	e000ed20 	.word	0xe000ed20
 8004ebc:	24000024 	.word	0x24000024
 8004ec0:	e000ef34 	.word	0xe000ef34

08004ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <vPortEnterCritical+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10f      	bne.n	8004f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortEnterCritical+0x5c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	603b      	str	r3, [r7, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortEnterCritical+0x4a>
	}
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	24000024 	.word	0x24000024
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <vPortExitCritical+0x50>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <vPortExitCritical+0x24>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	607b      	str	r3, [r7, #4]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <vPortExitCritical+0x50>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <vPortExitCritical+0x50>)
 8004f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <vPortExitCritical+0x42>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	24000024 	.word	0x24000024
	...

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f01e 0f10 	tst.w	lr, #16
 8004f90:	bf08      	it	eq
 8004f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	6010      	str	r0, [r2, #0]
 8004f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fa4:	f380 8811 	msr	BASEPRI, r0
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f000 fbf4 	bl	800579c <vTaskSwitchContext>
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f380 8811 	msr	BASEPRI, r0
 8004fbc:	bc09      	pop	{r0, r3}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc6:	f01e 0f10 	tst.w	lr, #16
 8004fca:	bf08      	it	eq
 8004fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fd0:	f380 8809 	msr	PSP, r0
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst>:
 8004fe0:	24008adc 	.word	0x24008adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005002:	f000 fb13 	bl	800562c <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <xPortSysTickHandler+0x40>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <vPortSetupTimerInterrupt+0x38>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <vPortSetupTimerInterrupt+0x3c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <vPortSetupTimerInterrupt+0x40>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <vPortSetupTimerInterrupt+0x44>)
 800504a:	3b01      	subs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010
 8005064:	e000e018 	.word	0xe000e018
 8005068:	24000014 	.word	0x24000014
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	e000e014 	.word	0xe000e014

08005074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005084 <vPortEnableVFP+0x10>
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800507e:	6001      	str	r1, [r0, #0]
 8005080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005082:	bf00      	nop
 8005084:	e000ed88 	.word	0xe000ed88

08005088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af04      	add	r7, sp, #16
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xTaskCreateStatic+0x46>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61fb      	str	r3, [r7, #28]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ce:	2354      	movs	r3, #84	; 0x54
 80050d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b54      	cmp	r3, #84	; 0x54
 80050d6:	d00a      	beq.n	80050ee <xTaskCreateStatic+0x66>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	61bb      	str	r3, [r7, #24]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01e      	beq.n	8005134 <xTaskCreateStatic+0xac>
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800510e:	2300      	movs	r3, #0
 8005110:	9303      	str	r3, [sp, #12]
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f850 	bl	80051cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800512c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512e:	f000 f8d5 	bl	80052dc <prvAddNewTaskToReadyList>
 8005132:	e001      	b.n	8005138 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005138:	697b      	ldr	r3, [r7, #20]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005142:	b580      	push	{r7, lr}
 8005144:	b08c      	sub	sp, #48	; 0x30
 8005146:	af04      	add	r7, sp, #16
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff faec 	bl	8004734 <pvPortMalloc>
 800515c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00e      	beq.n	8005182 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005164:	2054      	movs	r0, #84	; 0x54
 8005166:	f7ff fae5 	bl	8004734 <pvPortMalloc>
 800516a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
 8005178:	e005      	b.n	8005186 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	f7ff fba6 	bl	80048cc <vPortFree>
 8005180:	e001      	b.n	8005186 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d017      	beq.n	80051bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	2300      	movs	r3, #0
 8005198:	9303      	str	r3, [sp, #12]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f80e 	bl	80051cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b0:	69f8      	ldr	r0, [r7, #28]
 80051b2:	f000 f893 	bl	80052dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e002      	b.n	80051c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051c2:	69bb      	ldr	r3, [r7, #24]
	}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051e4:	440b      	add	r3, r1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <prvInitialiseNewTask+0x48>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01f      	beq.n	800525a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e012      	b.n	8005246 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	7819      	ldrb	r1, [r3, #0]
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	3334      	adds	r3, #52	; 0x34
 8005230:	460a      	mov	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d9e9      	bls.n	8005220 <prvInitialiseNewTask+0x54>
 800524c:	e000      	b.n	8005250 <prvInitialiseNewTask+0x84>
			{
				break;
 800524e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	e003      	b.n	8005262 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2b06      	cmp	r3, #6
 8005266:	d901      	bls.n	800526c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005268:	2306      	movs	r3, #6
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fc60 	bl	8004b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fc5b 	bl	8004b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f1c3 0207 	rsb	r2, r3, #7
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2200      	movs	r2, #0
 80052ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	69b8      	ldr	r0, [r7, #24]
 80052bc:	f7ff fcd8 	bl	8004c70 <pxPortInitialiseStack>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d2:	bf00      	nop
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052e4:	f7ff fdee 	bl	8004ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e8:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 80052f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052fa:	4a27      	ldr	r2, [pc, #156]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <prvAddNewTaskToReadyList+0xb8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005308:	f000 fabc 	bl	8005884 <prvInitialiseTaskLists>
 800530c:	e00d      	b.n	800532a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <prvAddNewTaskToReadyList+0xc0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d802      	bhi.n	800532a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005324:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 8005332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <prvAddNewTaskToReadyList+0xcc>)
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f7ff fc00 	bl	8004b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005362:	f7ff fddf 	bl	8004f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <prvAddNewTaskToReadyList+0xc0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <prvAddNewTaskToReadyList+0xbc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	429a      	cmp	r2, r3
 800537a:	d207      	bcs.n	800538c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvAddNewTaskToReadyList+0xd0>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	24008bdc 	.word	0x24008bdc
 8005398:	24008adc 	.word	0x24008adc
 800539c:	24008be8 	.word	0x24008be8
 80053a0:	24008bf8 	.word	0x24008bf8
 80053a4:	24008be4 	.word	0x24008be4
 80053a8:	24008ae0 	.word	0x24008ae0
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d017      	beq.n	80053f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <vTaskDelay+0x60>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <vTaskDelay+0x30>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053e0:	f000 f87a 	bl	80054d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fb28 	bl	8005a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ec:	f000 f882 	bl	80054f4 <xTaskResumeAll>
 80053f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053f8:	4b06      	ldr	r3, [pc, #24]	; (8005414 <vTaskDelay+0x64>)
 80053fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	24008c04 	.word	0x24008c04
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005426:	463a      	mov	r2, r7
 8005428:	1d39      	adds	r1, r7, #4
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4618      	mov	r0, r3
 8005430:	f7fa ffae 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	9202      	str	r2, [sp, #8]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	460a      	mov	r2, r1
 8005446:	491e      	ldr	r1, [pc, #120]	; (80054c0 <vTaskStartScheduler+0xa8>)
 8005448:	481e      	ldr	r0, [pc, #120]	; (80054c4 <vTaskStartScheduler+0xac>)
 800544a:	f7ff fe1d 	bl	8005088 <xTaskCreateStatic>
 800544e:	4603      	mov	r3, r0
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <vTaskStartScheduler+0xb0>)
 8005452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <vTaskStartScheduler+0xb0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e001      	b.n	8005466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d116      	bne.n	800549a <vTaskStartScheduler+0x82>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	613b      	str	r3, [r7, #16]
}
 800547e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <vTaskStartScheduler+0xb4>)
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <vTaskStartScheduler+0xb8>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <vTaskStartScheduler+0xbc>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005494:	f7ff fc74 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005498:	e00e      	b.n	80054b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d10a      	bne.n	80054b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskStartScheduler+0x9e>
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	08010e90 	.word	0x08010e90
 80054c4:	08005855 	.word	0x08005855
 80054c8:	24008c00 	.word	0x24008c00
 80054cc:	24008bfc 	.word	0x24008bfc
 80054d0:	24008be8 	.word	0x24008be8
 80054d4:	24008be0 	.word	0x24008be0

080054d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <vTaskSuspendAll+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <vTaskSuspendAll+0x18>)
 80054e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	24008c04 	.word	0x24008c04

080054f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005502:	4b41      	ldr	r3, [pc, #260]	; (8005608 <xTaskResumeAll+0x114>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xTaskResumeAll+0x2c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005520:	f7ff fcd0 	bl	8004ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <xTaskResumeAll+0x114>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3b01      	subs	r3, #1
 800552a:	4a37      	ldr	r2, [pc, #220]	; (8005608 <xTaskResumeAll+0x114>)
 800552c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552e:	4b36      	ldr	r3, [pc, #216]	; (8005608 <xTaskResumeAll+0x114>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d161      	bne.n	80055fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <xTaskResumeAll+0x118>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d05d      	beq.n	80055fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800553e:	e02e      	b.n	800559e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <xTaskResumeAll+0x11c>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3318      	adds	r3, #24
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fb65 	bl	8004c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3304      	adds	r3, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fb60 	bl	8004c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <xTaskResumeAll+0x120>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <xTaskResumeAll+0x120>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4a27      	ldr	r2, [pc, #156]	; (8005618 <xTaskResumeAll+0x124>)
 800557c:	441a      	add	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7ff faec 	bl	8004b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	4b23      	ldr	r3, [pc, #140]	; (800561c <xTaskResumeAll+0x128>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <xTaskResumeAll+0x12c>)
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800559e:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <xTaskResumeAll+0x11c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cc      	bne.n	8005540 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ac:	f000 fa08 	bl	80059c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055b0:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <xTaskResumeAll+0x130>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d010      	beq.n	80055de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055bc:	f000 f836 	bl	800562c <xTaskIncrementTick>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <xTaskResumeAll+0x12c>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f1      	bne.n	80055bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80055d8:	4b12      	ldr	r3, [pc, #72]	; (8005624 <xTaskResumeAll+0x130>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <xTaskResumeAll+0x12c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <xTaskResumeAll+0x134>)
 80055ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f7ff fc93 	bl	8004f24 <vPortExitCritical>

	return xAlreadyYielded;
 80055fe:	68bb      	ldr	r3, [r7, #8]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	24008c04 	.word	0x24008c04
 800560c:	24008bdc 	.word	0x24008bdc
 8005610:	24008b9c 	.word	0x24008b9c
 8005614:	24008be4 	.word	0x24008be4
 8005618:	24008ae0 	.word	0x24008ae0
 800561c:	24008adc 	.word	0x24008adc
 8005620:	24008bf0 	.word	0x24008bf0
 8005624:	24008bec 	.word	0x24008bec
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005636:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <xTaskIncrementTick+0x144>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 808e 	bne.w	800575c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005640:	4b4c      	ldr	r3, [pc, #304]	; (8005774 <xTaskIncrementTick+0x148>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005648:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <xTaskIncrementTick+0x148>)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005654:	4b48      	ldr	r3, [pc, #288]	; (8005778 <xTaskIncrementTick+0x14c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <xTaskIncrementTick+0x48>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	603b      	str	r3, [r7, #0]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xTaskIncrementTick+0x46>
 8005674:	4b40      	ldr	r3, [pc, #256]	; (8005778 <xTaskIncrementTick+0x14c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	4b40      	ldr	r3, [pc, #256]	; (800577c <xTaskIncrementTick+0x150>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a3e      	ldr	r2, [pc, #248]	; (8005778 <xTaskIncrementTick+0x14c>)
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4a3e      	ldr	r2, [pc, #248]	; (800577c <xTaskIncrementTick+0x150>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <xTaskIncrementTick+0x154>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <xTaskIncrementTick+0x154>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	f000 f995 	bl	80059c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005696:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <xTaskIncrementTick+0x158>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d348      	bcc.n	8005732 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a0:	4b35      	ldr	r3, [pc, #212]	; (8005778 <xTaskIncrementTick+0x14c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <xTaskIncrementTick+0x158>)
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	601a      	str	r2, [r3, #0]
					break;
 80056b2:	e03e      	b.n	8005732 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <xTaskIncrementTick+0x14c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d203      	bcs.n	80056d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056cc:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <xTaskIncrementTick+0x158>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056d2:	e02e      	b.n	8005732 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fa9f 	bl	8004c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3318      	adds	r3, #24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fa96 	bl	8004c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	409a      	lsls	r2, r3
 80056f8:	4b23      	ldr	r3, [pc, #140]	; (8005788 <xTaskIncrementTick+0x15c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	4a22      	ldr	r2, [pc, #136]	; (8005788 <xTaskIncrementTick+0x15c>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4a1f      	ldr	r2, [pc, #124]	; (800578c <xTaskIncrementTick+0x160>)
 8005710:	441a      	add	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7ff fa22 	bl	8004b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <xTaskIncrementTick+0x164>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	429a      	cmp	r2, r3
 800572a:	d3b9      	bcc.n	80056a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005730:	e7b6      	b.n	80056a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005732:	4b17      	ldr	r3, [pc, #92]	; (8005790 <xTaskIncrementTick+0x164>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	4914      	ldr	r1, [pc, #80]	; (800578c <xTaskIncrementTick+0x160>)
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d901      	bls.n	800574e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <xTaskIncrementTick+0x168>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e004      	b.n	8005766 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <xTaskIncrementTick+0x16c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <xTaskIncrementTick+0x16c>)
 8005764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005766:	697b      	ldr	r3, [r7, #20]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	24008c04 	.word	0x24008c04
 8005774:	24008be0 	.word	0x24008be0
 8005778:	24008b94 	.word	0x24008b94
 800577c:	24008b98 	.word	0x24008b98
 8005780:	24008bf4 	.word	0x24008bf4
 8005784:	24008bfc 	.word	0x24008bfc
 8005788:	24008be4 	.word	0x24008be4
 800578c:	24008ae0 	.word	0x24008ae0
 8005790:	24008adc 	.word	0x24008adc
 8005794:	24008bf0 	.word	0x24008bf0
 8005798:	24008bec 	.word	0x24008bec

0800579c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057a2:	4b27      	ldr	r3, [pc, #156]	; (8005840 <vTaskSwitchContext+0xa4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057aa:	4b26      	ldr	r3, [pc, #152]	; (8005844 <vTaskSwitchContext+0xa8>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057b0:	e03f      	b.n	8005832 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <vTaskSwitchContext+0xa8>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b23      	ldr	r3, [pc, #140]	; (8005848 <vTaskSwitchContext+0xac>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	f1c3 031f 	rsb	r3, r3, #31
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	491f      	ldr	r1, [pc, #124]	; (800584c <vTaskSwitchContext+0xb0>)
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	607b      	str	r3, [r7, #4]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vTaskSwitchContext+0x5a>
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <vTaskSwitchContext+0xb0>)
 8005804:	4413      	add	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3308      	adds	r3, #8
 800581a:	429a      	cmp	r2, r3
 800581c:	d104      	bne.n	8005828 <vTaskSwitchContext+0x8c>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4a08      	ldr	r2, [pc, #32]	; (8005850 <vTaskSwitchContext+0xb4>)
 8005830:	6013      	str	r3, [r2, #0]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	24008c04 	.word	0x24008c04
 8005844:	24008bf0 	.word	0x24008bf0
 8005848:	24008be4 	.word	0x24008be4
 800584c:	24008ae0 	.word	0x24008ae0
 8005850:	24008adc 	.word	0x24008adc

08005854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800585c:	f000 f852 	bl	8005904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <prvIdleTask+0x28>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d9f9      	bls.n	800585c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <prvIdleTask+0x2c>)
 800586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005878:	e7f0      	b.n	800585c <prvIdleTask+0x8>
 800587a:	bf00      	nop
 800587c:	24008ae0 	.word	0x24008ae0
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	e00c      	b.n	80058aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <prvInitialiseTaskLists+0x60>)
 800589c:	4413      	add	r3, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff f932 	bl	8004b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3301      	adds	r3, #1
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d9ef      	bls.n	8005890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058b0:	480d      	ldr	r0, [pc, #52]	; (80058e8 <prvInitialiseTaskLists+0x64>)
 80058b2:	f7ff f929 	bl	8004b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058b6:	480d      	ldr	r0, [pc, #52]	; (80058ec <prvInitialiseTaskLists+0x68>)
 80058b8:	f7ff f926 	bl	8004b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058bc:	480c      	ldr	r0, [pc, #48]	; (80058f0 <prvInitialiseTaskLists+0x6c>)
 80058be:	f7ff f923 	bl	8004b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058c2:	480c      	ldr	r0, [pc, #48]	; (80058f4 <prvInitialiseTaskLists+0x70>)
 80058c4:	f7ff f920 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058c8:	480b      	ldr	r0, [pc, #44]	; (80058f8 <prvInitialiseTaskLists+0x74>)
 80058ca:	f7ff f91d 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <prvInitialiseTaskLists+0x78>)
 80058d0:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <prvInitialiseTaskLists+0x64>)
 80058d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <prvInitialiseTaskLists+0x7c>)
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <prvInitialiseTaskLists+0x68>)
 80058d8:	601a      	str	r2, [r3, #0]
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	24008ae0 	.word	0x24008ae0
 80058e8:	24008b6c 	.word	0x24008b6c
 80058ec:	24008b80 	.word	0x24008b80
 80058f0:	24008b9c 	.word	0x24008b9c
 80058f4:	24008bb0 	.word	0x24008bb0
 80058f8:	24008bc8 	.word	0x24008bc8
 80058fc:	24008b94 	.word	0x24008b94
 8005900:	24008b98 	.word	0x24008b98

08005904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800590a:	e019      	b.n	8005940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800590c:	f7ff fada 	bl	8004ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005910:	4b10      	ldr	r3, [pc, #64]	; (8005954 <prvCheckTasksWaitingTermination+0x50>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff f97d 	bl	8004c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <prvCheckTasksWaitingTermination+0x54>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3b01      	subs	r3, #1
 8005928:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <prvCheckTasksWaitingTermination+0x54>)
 800592a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <prvCheckTasksWaitingTermination+0x58>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <prvCheckTasksWaitingTermination+0x58>)
 8005934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005936:	f7ff faf5 	bl	8004f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f810 	bl	8005960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <prvCheckTasksWaitingTermination+0x58>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e1      	bne.n	800590c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	24008bb0 	.word	0x24008bb0
 8005958:	24008bdc 	.word	0x24008bdc
 800595c:	24008bc4 	.word	0x24008bc4

08005960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe ffa8 	bl	80048cc <vPortFree>
				vPortFree( pxTCB );
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fe ffa5 	bl	80048cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005982:	e018      	b.n	80059b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800598a:	2b01      	cmp	r3, #1
 800598c:	d103      	bne.n	8005996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fe ff9c 	bl	80048cc <vPortFree>
	}
 8005994:	e00f      	b.n	80059b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599c:	2b02      	cmp	r3, #2
 800599e:	d00a      	beq.n	80059b6 <prvDeleteTCB+0x56>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <prvDeleteTCB+0x54>
	}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059d8:	e008      	b.n	80059ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	24008b94 	.word	0x24008b94
 80059fc:	24008bfc 	.word	0x24008bfc

08005a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <xTaskGetSchedulerState+0x34>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e008      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <xTaskGetSchedulerState+0x38>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e001      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a26:	687b      	ldr	r3, [r7, #4]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	24008be8 	.word	0x24008be8
 8005a38:	24008c04 	.word	0x24008c04

08005a3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a46:	4b29      	ldr	r3, [pc, #164]	; (8005aec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff f8e2 	bl	8004c1c <uxListRemove>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	2201      	movs	r2, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4013      	ands	r3, r2
 8005a72:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d10a      	bne.n	8005a94 <prvAddCurrentTaskToDelayedList+0x58>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a84:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	481a      	ldr	r0, [pc, #104]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a8e:	f7ff f868 	bl	8004b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a92:	e026      	b.n	8005ae2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a9c:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d209      	bcs.n	8005ac0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aac:	4b13      	ldr	r3, [pc, #76]	; (8005afc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7ff f876 	bl	8004baa <vListInsert>
}
 8005abe:	e010      	b.n	8005ae2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7ff f86c 	bl	8004baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d202      	bcs.n	8005ae2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005adc:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6013      	str	r3, [r2, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	24008be0 	.word	0x24008be0
 8005af0:	24008adc 	.word	0x24008adc
 8005af4:	24008be4 	.word	0x24008be4
 8005af8:	24008bc8 	.word	0x24008bc8
 8005afc:	24008b98 	.word	0x24008b98
 8005b00:	24008b94 	.word	0x24008b94
 8005b04:	24008bfc 	.word	0x24008bfc

08005b08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	b21a      	sxth	r2, r3
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	4313      	orrs	r3, r2
 8005b22:	b21b      	sxth	r3, r3
 8005b24:	b29b      	uxth	r3, r3
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	061a      	lsls	r2, r3, #24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	0e1b      	lsrs	r3, r3, #24
 8005b56:	4313      	orrs	r3, r2
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005b6c:	4915      	ldr	r1, [pc, #84]	; (8005bc4 <etharp_free_entry+0x60>)
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d013      	beq.n	8005ba8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005b80:	4910      	ldr	r1, [pc, #64]	; (8005bc4 <etharp_free_entry+0x60>)
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f003 fe87 	bl	80098a4 <pbuf_free>
    arp_table[i].q = NULL;
 8005b96:	490b      	ldr	r1, [pc, #44]	; (8005bc4 <etharp_free_entry+0x60>)
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	4413      	add	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	440b      	add	r3, r1
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005ba8:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <etharp_free_entry+0x60>)
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	24008c08 	.word	0x24008c08

08005bc8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e096      	b.n	8005d02 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8005bd4:	494f      	ldr	r1, [pc, #316]	; (8005d14 <etharp_tmr+0x14c>)
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	3314      	adds	r3, #20
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8086 	beq.w	8005cfc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8005bf0:	4948      	ldr	r1, [pc, #288]	; (8005d14 <etharp_tmr+0x14c>)
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3312      	adds	r3, #18
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	b298      	uxth	r0, r3
 8005c06:	4943      	ldr	r1, [pc, #268]	; (8005d14 <etharp_tmr+0x14c>)
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	440b      	add	r3, r1
 8005c14:	3312      	adds	r3, #18
 8005c16:	4602      	mov	r2, r0
 8005c18:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005c1a:	493e      	ldr	r1, [pc, #248]	; (8005d14 <etharp_tmr+0x14c>)
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	440b      	add	r3, r1
 8005c28:	3312      	adds	r3, #18
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005c30:	d215      	bcs.n	8005c5e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005c32:	4938      	ldr	r1, [pc, #224]	; (8005d14 <etharp_tmr+0x14c>)
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	440b      	add	r3, r1
 8005c40:	3314      	adds	r3, #20
 8005c42:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10e      	bne.n	8005c66 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8005c48:	4932      	ldr	r1, [pc, #200]	; (8005d14 <etharp_tmr+0x14c>)
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	440b      	add	r3, r1
 8005c56:	3312      	adds	r3, #18
 8005c58:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d903      	bls.n	8005c66 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ff80 	bl	8005b64 <etharp_free_entry>
 8005c64:	e04a      	b.n	8005cfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005c66:	492b      	ldr	r1, [pc, #172]	; (8005d14 <etharp_tmr+0x14c>)
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	440b      	add	r3, r1
 8005c74:	3314      	adds	r3, #20
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d10a      	bne.n	8005c92 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005c7c:	4925      	ldr	r1, [pc, #148]	; (8005d14 <etharp_tmr+0x14c>)
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e034      	b.n	8005cfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005c92:	4920      	ldr	r1, [pc, #128]	; (8005d14 <etharp_tmr+0x14c>)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d10a      	bne.n	8005cbe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005ca8:	491a      	ldr	r1, [pc, #104]	; (8005d14 <etharp_tmr+0x14c>)
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3314      	adds	r3, #20
 8005cb8:	2202      	movs	r2, #2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e01e      	b.n	8005cfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005cbe:	4915      	ldr	r1, [pc, #84]	; (8005d14 <etharp_tmr+0x14c>)
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	3314      	adds	r3, #20
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d113      	bne.n	8005cfc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005cd4:	490f      	ldr	r1, [pc, #60]	; (8005d14 <etharp_tmr+0x14c>)
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <etharp_tmr+0x14c>)
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f000 fe6e 	bl	80069d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b09      	cmp	r3, #9
 8005d06:	f77f af65 	ble.w	8005bd4 <etharp_tmr+0xc>
      }
    }
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	24008c08 	.word	0x24008c08

08005d18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	460b      	mov	r3, r1
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005d26:	230a      	movs	r3, #10
 8005d28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8005d2e:	230a      	movs	r3, #10
 8005d30:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8005d36:	230a      	movs	r3, #10
 8005d38:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	83bb      	strh	r3, [r7, #28]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	837b      	strh	r3, [r7, #26]
 8005d42:	2300      	movs	r3, #0
 8005d44:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005d46:	2300      	movs	r3, #0
 8005d48:	843b      	strh	r3, [r7, #32]
 8005d4a:	e0ae      	b.n	8005eaa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8005d4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005d50:	49a6      	ldr	r1, [pc, #664]	; (8005fec <etharp_find_entry+0x2d4>)
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005d66:	2b0a      	cmp	r3, #10
 8005d68:	d105      	bne.n	8005d76 <etharp_find_entry+0x5e>
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8005d70:	8c3b      	ldrh	r3, [r7, #32]
 8005d72:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d74:	e095      	b.n	8005ea2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8092 	beq.w	8005ea2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d009      	beq.n	8005d98 <etharp_find_entry+0x80>
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d806      	bhi.n	8005d98 <etharp_find_entry+0x80>
 8005d8a:	4b99      	ldr	r3, [pc, #612]	; (8005ff0 <etharp_find_entry+0x2d8>)
 8005d8c:	f240 1223 	movw	r2, #291	; 0x123
 8005d90:	4998      	ldr	r1, [pc, #608]	; (8005ff4 <etharp_find_entry+0x2dc>)
 8005d92:	4899      	ldr	r0, [pc, #612]	; (8005ff8 <etharp_find_entry+0x2e0>)
 8005d94:	f009 ffbc 	bl	800fd10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d020      	beq.n	8005de0 <etharp_find_entry+0xc8>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6819      	ldr	r1, [r3, #0]
 8005da2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005da6:	4891      	ldr	r0, [pc, #580]	; (8005fec <etharp_find_entry+0x2d4>)
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4403      	add	r3, r0
 8005db2:	3304      	adds	r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d112      	bne.n	8005de0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00c      	beq.n	8005dda <etharp_find_entry+0xc2>
 8005dc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005dc4:	4989      	ldr	r1, [pc, #548]	; (8005fec <etharp_find_entry+0x2d4>)
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d102      	bne.n	8005de0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8005dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005dde:	e100      	b.n	8005fe2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d140      	bne.n	8005e68 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8005de6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005dea:	4980      	ldr	r1, [pc, #512]	; (8005fec <etharp_find_entry+0x2d4>)
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8005dfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e00:	497a      	ldr	r1, [pc, #488]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e02:	4613      	mov	r3, r2
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3312      	adds	r3, #18
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	8bba      	ldrh	r2, [r7, #28]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d845      	bhi.n	8005ea2 <etharp_find_entry+0x18a>
            old_queue = i;
 8005e16:	8c3b      	ldrh	r3, [r7, #32]
 8005e18:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8005e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e1e:	4973      	ldr	r1, [pc, #460]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	3312      	adds	r3, #18
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	83bb      	strh	r3, [r7, #28]
 8005e30:	e037      	b.n	8005ea2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8005e32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e36:	496d      	ldr	r1, [pc, #436]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3312      	adds	r3, #18
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	8b7a      	ldrh	r2, [r7, #26]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d82a      	bhi.n	8005ea2 <etharp_find_entry+0x18a>
            old_pending = i;
 8005e4c:	8c3b      	ldrh	r3, [r7, #32]
 8005e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8005e50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e54:	4965      	ldr	r1, [pc, #404]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	3312      	adds	r3, #18
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	837b      	strh	r3, [r7, #26]
 8005e66:	e01c      	b.n	8005ea2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d919      	bls.n	8005ea2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8005e6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e72:	495e      	ldr	r1, [pc, #376]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3312      	adds	r3, #18
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	8b3a      	ldrh	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d80c      	bhi.n	8005ea2 <etharp_find_entry+0x18a>
            old_stable = i;
 8005e88:	8c3b      	ldrh	r3, [r7, #32]
 8005e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8005e8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e90:	4956      	ldr	r1, [pc, #344]	; (8005fec <etharp_find_entry+0x2d4>)
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3312      	adds	r3, #18
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005ea2:	8c3b      	ldrh	r3, [r7, #32]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	843b      	strh	r3, [r7, #32]
 8005eaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	f77f af4c 	ble.w	8005d4c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005eb4:	7afb      	ldrb	r3, [r7, #11]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <etharp_find_entry+0x1b8>
 8005ebe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005ec2:	2b0a      	cmp	r3, #10
 8005ec4:	d107      	bne.n	8005ed6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	e085      	b.n	8005fe2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8005ed6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	dc02      	bgt.n	8005ee4 <etharp_find_entry+0x1cc>
    i = empty;
 8005ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ee0:	843b      	strh	r3, [r7, #32]
 8005ee2:	e039      	b.n	8005f58 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8005ee4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005ee8:	2b09      	cmp	r3, #9
 8005eea:	dc14      	bgt.n	8005f16 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8005eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005ef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005ef4:	493d      	ldr	r1, [pc, #244]	; (8005fec <etharp_find_entry+0x2d4>)
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	440b      	add	r3, r1
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <etharp_find_entry+0x220>
 8005f06:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <etharp_find_entry+0x2d8>)
 8005f08:	f240 126d 	movw	r2, #365	; 0x16d
 8005f0c:	493b      	ldr	r1, [pc, #236]	; (8005ffc <etharp_find_entry+0x2e4>)
 8005f0e:	483a      	ldr	r0, [pc, #232]	; (8005ff8 <etharp_find_entry+0x2e0>)
 8005f10:	f009 fefe 	bl	800fd10 <iprintf>
 8005f14:	e010      	b.n	8005f38 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005f16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	dc02      	bgt.n	8005f24 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8005f1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f20:	843b      	strh	r3, [r7, #32]
 8005f22:	e009      	b.n	8005f38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005f24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	dc02      	bgt.n	8005f32 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8005f2c:	8bfb      	ldrh	r3, [r7, #30]
 8005f2e:	843b      	strh	r3, [r7, #32]
 8005f30:	e002      	b.n	8005f38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e054      	b.n	8005fe2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005f38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	dd06      	ble.n	8005f4e <etharp_find_entry+0x236>
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <etharp_find_entry+0x2d8>)
 8005f42:	f240 127f 	movw	r2, #383	; 0x17f
 8005f46:	492e      	ldr	r1, [pc, #184]	; (8006000 <etharp_find_entry+0x2e8>)
 8005f48:	482b      	ldr	r0, [pc, #172]	; (8005ff8 <etharp_find_entry+0x2e0>)
 8005f4a:	f009 fee1 	bl	800fd10 <iprintf>
    etharp_free_entry(i);
 8005f4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fe06 	bl	8005b64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005f58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	dd06      	ble.n	8005f6e <etharp_find_entry+0x256>
 8005f60:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <etharp_find_entry+0x2d8>)
 8005f62:	f240 1283 	movw	r2, #387	; 0x183
 8005f66:	4926      	ldr	r1, [pc, #152]	; (8006000 <etharp_find_entry+0x2e8>)
 8005f68:	4823      	ldr	r0, [pc, #140]	; (8005ff8 <etharp_find_entry+0x2e0>)
 8005f6a:	f009 fed1 	bl	800fd10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f72:	491e      	ldr	r1, [pc, #120]	; (8005fec <etharp_find_entry+0x2d4>)
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3314      	adds	r3, #20
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <etharp_find_entry+0x27c>
 8005f86:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <etharp_find_entry+0x2d8>)
 8005f88:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005f8c:	491d      	ldr	r1, [pc, #116]	; (8006004 <etharp_find_entry+0x2ec>)
 8005f8e:	481a      	ldr	r0, [pc, #104]	; (8005ff8 <etharp_find_entry+0x2e0>)
 8005f90:	f009 febe 	bl	800fd10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005f9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	4812      	ldr	r0, [pc, #72]	; (8005fec <etharp_find_entry+0x2d4>)
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	4413      	add	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4403      	add	r3, r0
 8005fae:	3304      	adds	r3, #4
 8005fb0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8005fb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005fb6:	490d      	ldr	r1, [pc, #52]	; (8005fec <etharp_find_entry+0x2d4>)
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3312      	adds	r3, #18
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8005fc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005fcc:	4907      	ldr	r1, [pc, #28]	; (8005fec <etharp_find_entry+0x2d4>)
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	440b      	add	r3, r1
 8005fd8:	3308      	adds	r3, #8
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8005fde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3728      	adds	r7, #40	; 0x28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	24008c08 	.word	0x24008c08
 8005ff0:	08010e98 	.word	0x08010e98
 8005ff4:	08010f00 	.word	0x08010f00
 8005ff8:	08010f40 	.word	0x08010f40
 8005ffc:	08010f68 	.word	0x08010f68
 8006000:	08010f80 	.word	0x08010f80
 8006004:	08010f94 	.word	0x08010f94

08006008 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800601c:	2b06      	cmp	r3, #6
 800601e:	d006      	beq.n	800602e <etharp_update_arp_entry+0x26>
 8006020:	4b48      	ldr	r3, [pc, #288]	; (8006144 <etharp_update_arp_entry+0x13c>)
 8006022:	f240 12a9 	movw	r2, #425	; 0x1a9
 8006026:	4948      	ldr	r1, [pc, #288]	; (8006148 <etharp_update_arp_entry+0x140>)
 8006028:	4848      	ldr	r0, [pc, #288]	; (800614c <etharp_update_arp_entry+0x144>)
 800602a:	f009 fe71 	bl	800fd10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <etharp_update_arp_entry+0x52>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	4618      	mov	r0, r3
 8006044:	f001 facc 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 8006048:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006056:	2be0      	cmp	r3, #224	; 0xe0
 8006058:	d102      	bne.n	8006060 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800605a:	f06f 030f 	mvn.w	r3, #15
 800605e:	e06c      	b.n	800613a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4619      	mov	r1, r3
 8006066:	68b8      	ldr	r0, [r7, #8]
 8006068:	f7ff fe56 	bl	8005d18 <etharp_find_entry>
 800606c:	4603      	mov	r3, r0
 800606e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8006070:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da02      	bge.n	800607e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8006078:	8afb      	ldrh	r3, [r7, #22]
 800607a:	b25b      	sxtb	r3, r3
 800607c:	e05d      	b.n	800613a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800607e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006082:	4933      	ldr	r1, [pc, #204]	; (8006150 <etharp_update_arp_entry+0x148>)
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	3314      	adds	r3, #20
 8006090:	2202      	movs	r2, #2
 8006092:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8006094:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006098:	492d      	ldr	r1, [pc, #180]	; (8006150 <etharp_update_arp_entry+0x148>)
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	3308      	adds	r3, #8
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80060aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	3308      	adds	r3, #8
 80060b8:	4a25      	ldr	r2, [pc, #148]	; (8006150 <etharp_update_arp_entry+0x148>)
 80060ba:	4413      	add	r3, r2
 80060bc:	3304      	adds	r3, #4
 80060be:	2206      	movs	r2, #6
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f009 fe0e 	bl	800fce4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80060c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80060cc:	4920      	ldr	r1, [pc, #128]	; (8006150 <etharp_update_arp_entry+0x148>)
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	440b      	add	r3, r1
 80060d8:	3312      	adds	r3, #18
 80060da:	2200      	movs	r2, #0
 80060dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80060de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80060e2:	491b      	ldr	r1, [pc, #108]	; (8006150 <etharp_update_arp_entry+0x148>)
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	440b      	add	r3, r1
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d021      	beq.n	8006138 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80060f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80060f8:	4915      	ldr	r1, [pc, #84]	; (8006150 <etharp_update_arp_entry+0x148>)
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	440b      	add	r3, r1
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8006108:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800610c:	4910      	ldr	r1, [pc, #64]	; (8006150 <etharp_update_arp_entry+0x148>)
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8006122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6939      	ldr	r1, [r7, #16]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fcf3 	bl	8006b18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8006132:	6938      	ldr	r0, [r7, #16]
 8006134:	f003 fbb6 	bl	80098a4 <pbuf_free>
  }
  return ERR_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08010e98 	.word	0x08010e98
 8006148:	08010fc0 	.word	0x08010fc0
 800614c:	08010f40 	.word	0x08010f40
 8006150:	24008c08 	.word	0x24008c08

08006154 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e01e      	b.n	80061a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8006162:	4913      	ldr	r1, [pc, #76]	; (80061b0 <etharp_cleanup_netif+0x5c>)
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	3314      	adds	r3, #20
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <etharp_cleanup_netif+0x46>
 800617c:	490c      	ldr	r1, [pc, #48]	; (80061b0 <etharp_cleanup_netif+0x5c>)
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4613      	mov	r3, r2
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	4413      	add	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	440b      	add	r3, r1
 800618a:	3308      	adds	r3, #8
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d102      	bne.n	800619a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff fce5 	bl	8005b64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b09      	cmp	r3, #9
 80061a4:	dddd      	ble.n	8006162 <etharp_cleanup_netif+0xe>
    }
  }
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	24008c08 	.word	0x24008c08

080061b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d107      	bne.n	80061d4 <etharp_input+0x20>
 80061c4:	4b3d      	ldr	r3, [pc, #244]	; (80062bc <etharp_input+0x108>)
 80061c6:	f240 228a 	movw	r2, #650	; 0x28a
 80061ca:	493d      	ldr	r1, [pc, #244]	; (80062c0 <etharp_input+0x10c>)
 80061cc:	483d      	ldr	r0, [pc, #244]	; (80062c4 <etharp_input+0x110>)
 80061ce:	f009 fd9f 	bl	800fd10 <iprintf>
 80061d2:	e06f      	b.n	80062b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d10c      	bne.n	8006200 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80061ea:	2b06      	cmp	r3, #6
 80061ec:	d108      	bne.n	8006200 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d104      	bne.n	8006200 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d003      	beq.n	8006208 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f003 fb4f 	bl	80098a4 <pbuf_free>
    return;
 8006206:	e055      	b.n	80062b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	330e      	adds	r3, #14
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3318      	adds	r3, #24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3304      	adds	r3, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <etharp_input+0x74>
    for_us = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
 8006226:	e009      	b.n	800623c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	3304      	adds	r3, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <etharp_input+0x98>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <etharp_input+0x9a>
 800624c:	2302      	movs	r3, #2
 800624e:	f107 010c 	add.w	r1, r7, #12
 8006252:	6838      	ldr	r0, [r7, #0]
 8006254:	f7ff fed8 	bl	8006008 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	d003      	beq.n	800626c <etharp_input+0xb8>
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	d01e      	beq.n	80062a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800626a:	e020      	b.n	80062ae <etharp_input+0xfa>
      if (for_us) {
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01c      	beq.n	80062ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800628c:	2102      	movs	r1, #2
 800628e:	9103      	str	r1, [sp, #12]
 8006290:	f107 010c 	add.w	r1, r7, #12
 8006294:	9102      	str	r1, [sp, #8]
 8006296:	9201      	str	r2, [sp, #4]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	462b      	mov	r3, r5
 800629c:	4622      	mov	r2, r4
 800629e:	4601      	mov	r1, r0
 80062a0:	6838      	ldr	r0, [r7, #0]
 80062a2:	f000 faeb 	bl	800687c <etharp_raw>
      break;
 80062a6:	e001      	b.n	80062ac <etharp_input+0xf8>
      break;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <etharp_input+0xfa>
      break;
 80062ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f003 faf8 	bl	80098a4 <pbuf_free>
}
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bdb0      	pop	{r4, r5, r7, pc}
 80062ba:	bf00      	nop
 80062bc:	08010e98 	.word	0x08010e98
 80062c0:	08011018 	.word	0x08011018
 80062c4:	08010f40 	.word	0x08010f40

080062c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80062d6:	79fa      	ldrb	r2, [r7, #7]
 80062d8:	4944      	ldr	r1, [pc, #272]	; (80063ec <etharp_output_to_arp_index+0x124>)
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	440b      	add	r3, r1
 80062e4:	3314      	adds	r3, #20
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d806      	bhi.n	80062fa <etharp_output_to_arp_index+0x32>
 80062ec:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <etharp_output_to_arp_index+0x128>)
 80062ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 80062f2:	4940      	ldr	r1, [pc, #256]	; (80063f4 <etharp_output_to_arp_index+0x12c>)
 80062f4:	4840      	ldr	r0, [pc, #256]	; (80063f8 <etharp_output_to_arp_index+0x130>)
 80062f6:	f009 fd0b 	bl	800fd10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	493b      	ldr	r1, [pc, #236]	; (80063ec <etharp_output_to_arp_index+0x124>)
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	440b      	add	r3, r1
 8006308:	3314      	adds	r3, #20
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d153      	bne.n	80063b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	4936      	ldr	r1, [pc, #216]	; (80063ec <etharp_output_to_arp_index+0x124>)
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	440b      	add	r3, r1
 800631e:	3312      	adds	r3, #18
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006326:	d919      	bls.n	800635c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	4613      	mov	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	4413      	add	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4a2e      	ldr	r2, [pc, #184]	; (80063ec <etharp_output_to_arp_index+0x124>)
 8006334:	4413      	add	r3, r2
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fb4c 	bl	80069d8 <etharp_request>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d138      	bne.n	80063b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	4928      	ldr	r1, [pc, #160]	; (80063ec <etharp_output_to_arp_index+0x124>)
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	440b      	add	r3, r1
 8006354:	3314      	adds	r3, #20
 8006356:	2203      	movs	r2, #3
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e02d      	b.n	80063b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800635c:	79fa      	ldrb	r2, [r7, #7]
 800635e:	4923      	ldr	r1, [pc, #140]	; (80063ec <etharp_output_to_arp_index+0x124>)
 8006360:	4613      	mov	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	440b      	add	r3, r1
 800636a:	3312      	adds	r3, #18
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006372:	d321      	bcc.n	80063b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006374:	79fa      	ldrb	r2, [r7, #7]
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <etharp_output_to_arp_index+0x124>)
 8006380:	4413      	add	r3, r2
 8006382:	1d19      	adds	r1, r3, #4
 8006384:	79fa      	ldrb	r2, [r7, #7]
 8006386:	4613      	mov	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	3308      	adds	r3, #8
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <etharp_output_to_arp_index+0x124>)
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	461a      	mov	r2, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fafb 	bl	8006994 <etharp_request_dst>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80063a4:	79fa      	ldrb	r2, [r7, #7]
 80063a6:	4911      	ldr	r1, [pc, #68]	; (80063ec <etharp_output_to_arp_index+0x124>)
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	440b      	add	r3, r1
 80063b2:	3314      	adds	r3, #20
 80063b4:	2203      	movs	r2, #3
 80063b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80063be:	79fa      	ldrb	r2, [r7, #7]
 80063c0:	4613      	mov	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	3308      	adds	r3, #8
 80063ca:	4a08      	ldr	r2, [pc, #32]	; (80063ec <etharp_output_to_arp_index+0x124>)
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063d4:	9200      	str	r2, [sp, #0]
 80063d6:	460a      	mov	r2, r1
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fb9c 	bl	8006b18 <ethernet_output>
 80063e0:	4603      	mov	r3, r0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	24008c08 	.word	0x24008c08
 80063f0:	08010e98 	.word	0x08010e98
 80063f4:	08011038 	.word	0x08011038
 80063f8:	08010f40 	.word	0x08010f40

080063fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <etharp_output+0x24>
 8006412:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <etharp_output+0x1e4>)
 8006414:	f240 321e 	movw	r2, #798	; 0x31e
 8006418:	4972      	ldr	r1, [pc, #456]	; (80065e4 <etharp_output+0x1e8>)
 800641a:	4873      	ldr	r0, [pc, #460]	; (80065e8 <etharp_output+0x1ec>)
 800641c:	f009 fc78 	bl	800fd10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <etharp_output+0x38>
 8006426:	4b6e      	ldr	r3, [pc, #440]	; (80065e0 <etharp_output+0x1e4>)
 8006428:	f240 321f 	movw	r2, #799	; 0x31f
 800642c:	496f      	ldr	r1, [pc, #444]	; (80065ec <etharp_output+0x1f0>)
 800642e:	486e      	ldr	r0, [pc, #440]	; (80065e8 <etharp_output+0x1ec>)
 8006430:	f009 fc6e 	bl	800fd10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <etharp_output+0x4c>
 800643a:	4b69      	ldr	r3, [pc, #420]	; (80065e0 <etharp_output+0x1e4>)
 800643c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006440:	496b      	ldr	r1, [pc, #428]	; (80065f0 <etharp_output+0x1f4>)
 8006442:	4869      	ldr	r0, [pc, #420]	; (80065e8 <etharp_output+0x1ec>)
 8006444:	f009 fc64 	bl	800fd10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f8c6 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800645a:	4b66      	ldr	r3, [pc, #408]	; (80065f4 <etharp_output+0x1f8>)
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e0af      	b.n	80065c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006468:	2be0      	cmp	r3, #224	; 0xe0
 800646a:	d118      	bne.n	800649e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800646c:	2301      	movs	r3, #1
 800646e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006470:	2300      	movs	r3, #0
 8006472:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006474:	235e      	movs	r3, #94	; 0x5e
 8006476:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3301      	adds	r3, #1
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006482:	b2db      	uxtb	r3, r3
 8006484:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3302      	adds	r3, #2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3303      	adds	r3, #3
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8006496:	f107 0310 	add.w	r3, r7, #16
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e090      	b.n	80065c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	405a      	eors	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3308      	adds	r3, #8
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80064bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	330c      	adds	r3, #12
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	330c      	adds	r3, #12
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	e002      	b.n	80064dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80064d6:	f06f 0303 	mvn.w	r3, #3
 80064da:	e07d      	b.n	80065d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80064dc:	4b46      	ldr	r3, [pc, #280]	; (80065f8 <etharp_output+0x1fc>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	4a46      	ldr	r2, [pc, #280]	; (80065fc <etharp_output+0x200>)
 80064e4:	460b      	mov	r3, r1
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	440b      	add	r3, r1
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4413      	add	r3, r2
 80064ee:	3314      	adds	r3, #20
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d925      	bls.n	8006542 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80064f6:	4b40      	ldr	r3, [pc, #256]	; (80065f8 <etharp_output+0x1fc>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4a3f      	ldr	r2, [pc, #252]	; (80065fc <etharp_output+0x200>)
 80064fe:	460b      	mov	r3, r1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	440b      	add	r3, r1
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4413      	add	r3, r2
 8006508:	3308      	adds	r3, #8
 800650a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d117      	bne.n	8006542 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b38      	ldr	r3, [pc, #224]	; (80065f8 <etharp_output+0x1fc>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	4937      	ldr	r1, [pc, #220]	; (80065fc <etharp_output+0x200>)
 800651e:	4603      	mov	r3, r0
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4403      	add	r3, r0
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	440b      	add	r3, r1
 8006528:	3304      	adds	r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800652c:	429a      	cmp	r2, r3
 800652e:	d108      	bne.n	8006542 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8006530:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <etharp_output+0x1fc>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fec5 	bl	80062c8 <etharp_output_to_arp_index>
 800653e:	4603      	mov	r3, r0
 8006540:	e04a      	b.n	80065d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
 8006546:	e031      	b.n	80065ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006548:	7dfa      	ldrb	r2, [r7, #23]
 800654a:	492c      	ldr	r1, [pc, #176]	; (80065fc <etharp_output+0x200>)
 800654c:	4613      	mov	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4413      	add	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	440b      	add	r3, r1
 8006556:	3314      	adds	r3, #20
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d923      	bls.n	80065a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800655e:	7dfa      	ldrb	r2, [r7, #23]
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <etharp_output+0x200>)
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	440b      	add	r3, r1
 800656c:	3308      	adds	r3, #8
 800656e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	429a      	cmp	r2, r3
 8006574:	d117      	bne.n	80065a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	7dfa      	ldrb	r2, [r7, #23]
 800657c:	481f      	ldr	r0, [pc, #124]	; (80065fc <etharp_output+0x200>)
 800657e:	4613      	mov	r3, r2
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	4413      	add	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4403      	add	r3, r0
 8006588:	3304      	adds	r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800658c:	4299      	cmp	r1, r3
 800658e:	d10a      	bne.n	80065a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <etharp_output+0x1fc>)
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	461a      	mov	r2, r3
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff fe93 	bl	80062c8 <etharp_output_to_arp_index>
 80065a2:	4603      	mov	r3, r0
 80065a4:	e018      	b.n	80065d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	3301      	adds	r3, #1
 80065aa:	75fb      	strb	r3, [r7, #23]
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d9ca      	bls.n	8006548 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f822 	bl	8006600 <etharp_query>
 80065bc:	4603      	mov	r3, r0
 80065be:	e00b      	b.n	80065d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80065c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 faa1 	bl	8006b18 <ethernet_output>
 80065d6:	4603      	mov	r3, r0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08010e98 	.word	0x08010e98
 80065e4:	08011018 	.word	0x08011018
 80065e8:	08010f40 	.word	0x08010f40
 80065ec:	08011068 	.word	0x08011068
 80065f0:	08011008 	.word	0x08011008
 80065f4:	08013ad0 	.word	0x08013ad0
 80065f8:	24008cf8 	.word	0x24008cf8
 80065fc:	24008c08 	.word	0x24008c08

08006600 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3326      	adds	r3, #38	; 0x26
 8006610:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8006612:	23ff      	movs	r3, #255	; 0xff
 8006614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 ffdc 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006636:	2be0      	cmp	r3, #224	; 0xe0
 8006638:	d006      	beq.n	8006648 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006648:	f06f 030f 	mvn.w	r3, #15
 800664c:	e101      	b.n	8006852 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	2101      	movs	r1, #1
 8006652:	68b8      	ldr	r0, [r7, #8]
 8006654:	f7ff fb60 	bl	8005d18 <etharp_find_entry>
 8006658:	4603      	mov	r3, r0
 800665a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800665c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da02      	bge.n	800666a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8006664:	8a7b      	ldrh	r3, [r7, #18]
 8006666:	b25b      	sxtb	r3, r3
 8006668:	e0f3      	b.n	8006852 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800666a:	8a7b      	ldrh	r3, [r7, #18]
 800666c:	2b7e      	cmp	r3, #126	; 0x7e
 800666e:	d906      	bls.n	800667e <etharp_query+0x7e>
 8006670:	4b7a      	ldr	r3, [pc, #488]	; (800685c <etharp_query+0x25c>)
 8006672:	f240 32c1 	movw	r2, #961	; 0x3c1
 8006676:	497a      	ldr	r1, [pc, #488]	; (8006860 <etharp_query+0x260>)
 8006678:	487a      	ldr	r0, [pc, #488]	; (8006864 <etharp_query+0x264>)
 800667a:	f009 fb49 	bl	800fd10 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800667e:	8a7b      	ldrh	r3, [r7, #18]
 8006680:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006682:	7c7a      	ldrb	r2, [r7, #17]
 8006684:	4978      	ldr	r1, [pc, #480]	; (8006868 <etharp_query+0x268>)
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	440b      	add	r3, r1
 8006690:	3314      	adds	r3, #20
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d115      	bne.n	80066c4 <etharp_query+0xc4>
    is_new_entry = 1;
 8006698:	2301      	movs	r3, #1
 800669a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800669c:	7c7a      	ldrb	r2, [r7, #17]
 800669e:	4972      	ldr	r1, [pc, #456]	; (8006868 <etharp_query+0x268>)
 80066a0:	4613      	mov	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	4413      	add	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	440b      	add	r3, r1
 80066aa:	3314      	adds	r3, #20
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80066b0:	7c7a      	ldrb	r2, [r7, #17]
 80066b2:	496d      	ldr	r1, [pc, #436]	; (8006868 <etharp_query+0x268>)
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	440b      	add	r3, r1
 80066be:	3308      	adds	r3, #8
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80066c4:	7c7a      	ldrb	r2, [r7, #17]
 80066c6:	4968      	ldr	r1, [pc, #416]	; (8006868 <etharp_query+0x268>)
 80066c8:	4613      	mov	r3, r2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	440b      	add	r3, r1
 80066d2:	3314      	adds	r3, #20
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d011      	beq.n	80066fe <etharp_query+0xfe>
 80066da:	7c7a      	ldrb	r2, [r7, #17]
 80066dc:	4962      	ldr	r1, [pc, #392]	; (8006868 <etharp_query+0x268>)
 80066de:	4613      	mov	r3, r2
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	4413      	add	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	440b      	add	r3, r1
 80066e8:	3314      	adds	r3, #20
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d806      	bhi.n	80066fe <etharp_query+0xfe>
 80066f0:	4b5a      	ldr	r3, [pc, #360]	; (800685c <etharp_query+0x25c>)
 80066f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80066f6:	495d      	ldr	r1, [pc, #372]	; (800686c <etharp_query+0x26c>)
 80066f8:	485a      	ldr	r0, [pc, #360]	; (8006864 <etharp_query+0x264>)
 80066fa:	f009 fb09 	bl	800fd10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <etharp_query+0x10a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10c      	bne.n	8006724 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f963 	bl	80069d8 <etharp_request>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <etharp_query+0x124>
      return result;
 800671e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006722:	e096      	b.n	8006852 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <etharp_query+0x138>
 800672a:	4b4c      	ldr	r3, [pc, #304]	; (800685c <etharp_query+0x25c>)
 800672c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8006730:	494f      	ldr	r1, [pc, #316]	; (8006870 <etharp_query+0x270>)
 8006732:	484c      	ldr	r0, [pc, #304]	; (8006864 <etharp_query+0x264>)
 8006734:	f009 faec 	bl	800fd10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006738:	7c7a      	ldrb	r2, [r7, #17]
 800673a:	494b      	ldr	r1, [pc, #300]	; (8006868 <etharp_query+0x268>)
 800673c:	4613      	mov	r3, r2
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4413      	add	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	440b      	add	r3, r1
 8006746:	3314      	adds	r3, #20
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d917      	bls.n	800677e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800674e:	4a49      	ldr	r2, [pc, #292]	; (8006874 <etharp_query+0x274>)
 8006750:	7c7b      	ldrb	r3, [r7, #17]
 8006752:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006754:	7c7a      	ldrb	r2, [r7, #17]
 8006756:	4613      	mov	r3, r2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4413      	add	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	3308      	adds	r3, #8
 8006760:	4a41      	ldr	r2, [pc, #260]	; (8006868 <etharp_query+0x268>)
 8006762:	4413      	add	r3, r2
 8006764:	3304      	adds	r3, #4
 8006766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800676a:	9200      	str	r2, [sp, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f9d1 	bl	8006b18 <ethernet_output>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800677c:	e067      	b.n	800684e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800677e:	7c7a      	ldrb	r2, [r7, #17]
 8006780:	4939      	ldr	r1, [pc, #228]	; (8006868 <etharp_query+0x268>)
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	440b      	add	r3, r1
 800678c:	3314      	adds	r3, #20
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d15c      	bne.n	800684e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800679c:	e01c      	b.n	80067d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	895a      	ldrh	r2, [r3, #10]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	891b      	ldrh	r3, [r3, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d10a      	bne.n	80067c0 <etharp_query+0x1c0>
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <etharp_query+0x1c0>
 80067b2:	4b2a      	ldr	r3, [pc, #168]	; (800685c <etharp_query+0x25c>)
 80067b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80067b8:	492f      	ldr	r1, [pc, #188]	; (8006878 <etharp_query+0x278>)
 80067ba:	482a      	ldr	r0, [pc, #168]	; (8006864 <etharp_query+0x264>)
 80067bc:	f009 faa8 	bl	800fd10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	7b1b      	ldrb	r3, [r3, #12]
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <etharp_query+0x1d2>
        copy_needed = 1;
 80067cc:	2301      	movs	r3, #1
 80067ce:	61bb      	str	r3, [r7, #24]
        break;
 80067d0:	e005      	b.n	80067de <etharp_query+0x1de>
      }
      p = p->next;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1df      	bne.n	800679e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80067ea:	200e      	movs	r0, #14
 80067ec:	f003 fac6 	bl	8009d7c <pbuf_clone>
 80067f0:	61f8      	str	r0, [r7, #28]
 80067f2:	e004      	b.n	80067fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80067f8:	69f8      	ldr	r0, [r7, #28]
 80067fa:	f003 f8f3 	bl	80099e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d021      	beq.n	8006848 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8006804:	7c7a      	ldrb	r2, [r7, #17]
 8006806:	4918      	ldr	r1, [pc, #96]	; (8006868 <etharp_query+0x268>)
 8006808:	4613      	mov	r3, r2
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4413      	add	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	440b      	add	r3, r1
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8006818:	7c7a      	ldrb	r2, [r7, #17]
 800681a:	4913      	ldr	r1, [pc, #76]	; (8006868 <etharp_query+0x268>)
 800681c:	4613      	mov	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	440b      	add	r3, r1
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f003 f83b 	bl	80098a4 <pbuf_free>
      }
      arp_table[i].q = p;
 800682e:	7c7a      	ldrb	r2, [r7, #17]
 8006830:	490d      	ldr	r1, [pc, #52]	; (8006868 <etharp_query+0x268>)
 8006832:	4613      	mov	r3, r2
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	440b      	add	r3, r1
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006846:	e002      	b.n	800684e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8006848:	23ff      	movs	r3, #255	; 0xff
 800684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800684e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	08010e98 	.word	0x08010e98
 8006860:	08011074 	.word	0x08011074
 8006864:	08010f40 	.word	0x08010f40
 8006868:	24008c08 	.word	0x24008c08
 800686c:	08011084 	.word	0x08011084
 8006870:	08011068 	.word	0x08011068
 8006874:	24008cf8 	.word	0x24008cf8
 8006878:	080110ac 	.word	0x080110ac

0800687c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	; 0x28
 8006880:	af02      	add	r7, sp, #8
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <etharp_raw+0x26>
 8006894:	4b3a      	ldr	r3, [pc, #232]	; (8006980 <etharp_raw+0x104>)
 8006896:	f240 4257 	movw	r2, #1111	; 0x457
 800689a:	493a      	ldr	r1, [pc, #232]	; (8006984 <etharp_raw+0x108>)
 800689c:	483a      	ldr	r0, [pc, #232]	; (8006988 <etharp_raw+0x10c>)
 800689e:	f009 fa37 	bl	800fd10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80068a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80068a6:	211c      	movs	r1, #28
 80068a8:	200e      	movs	r0, #14
 80068aa:	f002 fd19 	bl	80092e0 <pbuf_alloc>
 80068ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ba:	e05d      	b.n	8006978 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	895b      	ldrh	r3, [r3, #10]
 80068c0:	2b1b      	cmp	r3, #27
 80068c2:	d806      	bhi.n	80068d2 <etharp_raw+0x56>
 80068c4:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <etharp_raw+0x104>)
 80068c6:	f240 4262 	movw	r2, #1122	; 0x462
 80068ca:	4930      	ldr	r1, [pc, #192]	; (800698c <etharp_raw+0x110>)
 80068cc:	482e      	ldr	r0, [pc, #184]	; (8006988 <etharp_raw+0x10c>)
 80068ce:	f009 fa1f 	bl	800fd10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80068d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff f914 	bl	8005b08 <lwip_htons>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068ee:	2b06      	cmp	r3, #6
 80068f0:	d006      	beq.n	8006900 <etharp_raw+0x84>
 80068f2:	4b23      	ldr	r3, [pc, #140]	; (8006980 <etharp_raw+0x104>)
 80068f4:	f240 4269 	movw	r2, #1129	; 0x469
 80068f8:	4925      	ldr	r1, [pc, #148]	; (8006990 <etharp_raw+0x114>)
 80068fa:	4823      	ldr	r0, [pc, #140]	; (8006988 <etharp_raw+0x10c>)
 80068fc:	f009 fa08 	bl	800fd10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3308      	adds	r3, #8
 8006904:	2206      	movs	r2, #6
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f009 f9eb 	bl	800fce4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3312      	adds	r3, #18
 8006912:	2206      	movs	r2, #6
 8006914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006916:	4618      	mov	r0, r3
 8006918:	f009 f9e4 	bl	800fce4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	330e      	adds	r3, #14
 8006920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3318      	adds	r3, #24
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	f042 0208 	orr.w	r2, r2, #8
 8006946:	709a      	strb	r2, [r3, #2]
 8006948:	2200      	movs	r2, #0
 800694a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2206      	movs	r2, #6
 8006950:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2204      	movs	r2, #4
 8006956:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006958:	f640 0306 	movw	r3, #2054	; 0x806
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	69b9      	ldr	r1, [r7, #24]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f8d7 	bl	8006b18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800696a:	69b8      	ldr	r0, [r7, #24]
 800696c:	f002 ff9a 	bl	80098a4 <pbuf_free>
  p = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8006974:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	08010e98 	.word	0x08010e98
 8006984:	08011018 	.word	0x08011018
 8006988:	08010f40 	.word	0x08010f40
 800698c:	080110c8 	.word	0x080110c8
 8006990:	080110fc 	.word	0x080110fc

08006994 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af04      	add	r7, sp, #16
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80069b0:	2201      	movs	r2, #1
 80069b2:	9203      	str	r2, [sp, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	9202      	str	r2, [sp, #8]
 80069b8:	4a06      	ldr	r2, [pc, #24]	; (80069d4 <etharp_request_dst+0x40>)
 80069ba:	9201      	str	r2, [sp, #4]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4603      	mov	r3, r0
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff ff5a 	bl	800687c <etharp_raw>
 80069c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08013ad8 	.word	0x08013ad8

080069d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80069e2:	4a05      	ldr	r2, [pc, #20]	; (80069f8 <etharp_request+0x20>)
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ffd4 	bl	8006994 <etharp_request_dst>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08013ad0 	.word	0x08013ad0

080069fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8006a06:	230e      	movs	r3, #14
 8006a08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	895b      	ldrh	r3, [r3, #10]
 8006a0e:	2b0e      	cmp	r3, #14
 8006a10:	d96e      	bls.n	8006af0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7bdb      	ldrb	r3, [r3, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a20:	3301      	adds	r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	7b1a      	ldrb	r2, [r3, #12]
 8006a32:	7b5b      	ldrb	r3, [r3, #13]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	4313      	orrs	r3, r2
 8006a38:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d023      	beq.n	8006a8e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10f      	bne.n	8006a6e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11b      	bne.n	8006a8e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8006a5a:	2b5e      	cmp	r3, #94	; 0x5e
 8006a5c:	d117      	bne.n	8006a8e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	7b5b      	ldrb	r3, [r3, #13]
 8006a62:	f043 0310 	orr.w	r3, r3, #16
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	735a      	strb	r2, [r3, #13]
 8006a6c:	e00f      	b.n	8006a8e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2206      	movs	r2, #6
 8006a72:	4928      	ldr	r1, [pc, #160]	; (8006b14 <ethernet_input+0x118>)
 8006a74:	4618      	mov	r0, r3
 8006a76:	f009 f925 	bl	800fcc4 <memcmp>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7b5b      	ldrb	r3, [r3, #13]
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8006a8e:	89fb      	ldrh	r3, [r7, #14]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d003      	beq.n	8006a9c <ethernet_input+0xa0>
 8006a94:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8006a98:	d014      	beq.n	8006ac4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8006a9a:	e032      	b.n	8006b02 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d024      	beq.n	8006af4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8006aaa:	8afb      	ldrh	r3, [r7, #22]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f002 fe72 	bl	8009798 <pbuf_remove_header>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11e      	bne.n	8006af8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fb93 	bl	80071e8 <ip4_input>
      break;
 8006ac2:	e013      	b.n	8006aec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d014      	beq.n	8006afc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8006ad2:	8afb      	ldrh	r3, [r7, #22]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f002 fe5e 	bl	8009798 <pbuf_remove_header>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10e      	bne.n	8006b00 <ethernet_input+0x104>
        etharp_input(p, netif);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fb65 	bl	80061b4 <etharp_input>
      break;
 8006aea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e00c      	b.n	8006b0a <ethernet_input+0x10e>
    goto free_and_return;
 8006af0:	bf00      	nop
 8006af2:	e006      	b.n	8006b02 <ethernet_input+0x106>
        goto free_and_return;
 8006af4:	bf00      	nop
 8006af6:	e004      	b.n	8006b02 <ethernet_input+0x106>
        goto free_and_return;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <ethernet_input+0x106>
        goto free_and_return;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <ethernet_input+0x106>
        goto free_and_return;
 8006b00:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f002 fece 	bl	80098a4 <pbuf_free>
  return ERR_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	08013ad0 	.word	0x08013ad0

08006b18 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8006b26:	8c3b      	ldrh	r3, [r7, #32]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe ffed 	bl	8005b08 <lwip_htons>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8006b32:	210e      	movs	r1, #14
 8006b34:	68b8      	ldr	r0, [r7, #8]
 8006b36:	f002 fe1f 	bl	8009778 <pbuf_add_header>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d125      	bne.n	8006b8c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	8afa      	ldrh	r2, [r7, #22]
 8006b4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2206      	movs	r2, #6
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f009 f8c6 	bl	800fce4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3306      	adds	r3, #6
 8006b5c:	2206      	movs	r2, #6
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f009 f8bf 	bl	800fce4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	d006      	beq.n	8006b7e <ethernet_output+0x66>
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <ethernet_output+0x84>)
 8006b72:	f44f 7299 	mov.w	r2, #306	; 0x132
 8006b76:	490a      	ldr	r1, [pc, #40]	; (8006ba0 <ethernet_output+0x88>)
 8006b78:	480a      	ldr	r0, [pc, #40]	; (8006ba4 <ethernet_output+0x8c>)
 8006b7a:	f009 f8c9 	bl	800fd10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	4798      	blx	r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	e002      	b.n	8006b92 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8006b8c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8006b8e:	f06f 0301 	mvn.w	r3, #1
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08011140 	.word	0x08011140
 8006ba0:	080111a4 	.word	0x080111a4
 8006ba4:	080111d8 	.word	0x080111d8

08006ba8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af04      	add	r7, sp, #16
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8006bb2:	4b87      	ldr	r3, [pc, #540]	; (8006dd0 <icmp_input+0x228>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8006bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bca:	2b13      	cmp	r3, #19
 8006bcc:	f240 80e8 	bls.w	8006da0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	895b      	ldrh	r3, [r3, #10]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	f240 80e5 	bls.w	8006da4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8006be4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80d2 	beq.w	8006d92 <icmp_input+0x1ea>
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	f040 80d2 	bne.w	8006d98 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8006bf4:	4b77      	ldr	r3, [pc, #476]	; (8006dd4 <icmp_input+0x22c>)
 8006bf6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006bf8:	4b75      	ldr	r3, [pc, #468]	; (8006dd0 <icmp_input+0x228>)
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c00:	2be0      	cmp	r3, #224	; 0xe0
 8006c02:	f000 80d6 	beq.w	8006db2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006c06:	4b72      	ldr	r3, [pc, #456]	; (8006dd0 <icmp_input+0x228>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4a71      	ldr	r2, [pc, #452]	; (8006dd0 <icmp_input+0x228>)
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fce5 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 80cc 	bne.w	8006db6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	891b      	ldrh	r3, [r3, #8]
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	f240 80c0 	bls.w	8006da8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9e0 	bl	8006fee <inet_chksum_pbuf>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 fe35 	bl	80098a4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8006c3a:	e0c5      	b.n	8006dc8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c3e:	330e      	adds	r3, #14
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f002 fd98 	bl	8009778 <pbuf_add_header>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d04b      	beq.n	8006ce6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	891a      	ldrh	r2, [r3, #8]
 8006c52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c54:	4413      	add	r3, r2
 8006c56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	891b      	ldrh	r3, [r3, #8]
 8006c5c:	8b7a      	ldrh	r2, [r7, #26]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f0c0 80ab 	bcc.w	8006dba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8006c64:	8b7b      	ldrh	r3, [r7, #26]
 8006c66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	200e      	movs	r0, #14
 8006c6e:	f002 fb37 	bl	80092e0 <pbuf_alloc>
 8006c72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80a1 	beq.w	8006dbe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	895b      	ldrh	r3, [r3, #10]
 8006c80:	461a      	mov	r2, r3
 8006c82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c84:	3308      	adds	r3, #8
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d203      	bcs.n	8006c92 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8006c8a:	6978      	ldr	r0, [r7, #20]
 8006c8c:	f002 fe0a 	bl	80098a4 <pbuf_free>
          goto icmperr;
 8006c90:	e096      	b.n	8006dc0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f009 f822 	bl	800fce4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8006ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6978      	ldr	r0, [r7, #20]
 8006ca6:	f002 fd77 	bl	8009798 <pbuf_remove_header>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006cb0:	4b49      	ldr	r3, [pc, #292]	; (8006dd8 <icmp_input+0x230>)
 8006cb2:	22b6      	movs	r2, #182	; 0xb6
 8006cb4:	4949      	ldr	r1, [pc, #292]	; (8006ddc <icmp_input+0x234>)
 8006cb6:	484a      	ldr	r0, [pc, #296]	; (8006de0 <icmp_input+0x238>)
 8006cb8:	f009 f82a 	bl	800fd10 <iprintf>
          pbuf_free(r);
 8006cbc:	6978      	ldr	r0, [r7, #20]
 8006cbe:	f002 fdf1 	bl	80098a4 <pbuf_free>
          goto icmperr;
 8006cc2:	e07d      	b.n	8006dc0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	6978      	ldr	r0, [r7, #20]
 8006cc8:	f002 ff14 	bl	8009af4 <pbuf_copy>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8006cd2:	6978      	ldr	r0, [r7, #20]
 8006cd4:	f002 fde6 	bl	80098a4 <pbuf_free>
          goto icmperr;
 8006cd8:	e072      	b.n	8006dc0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fde2 	bl	80098a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	e00f      	b.n	8006d06 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ce8:	330e      	adds	r3, #14
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f002 fd53 	bl	8009798 <pbuf_remove_header>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006cf8:	4b37      	ldr	r3, [pc, #220]	; (8006dd8 <icmp_input+0x230>)
 8006cfa:	22c7      	movs	r2, #199	; 0xc7
 8006cfc:	4939      	ldr	r1, [pc, #228]	; (8006de4 <icmp_input+0x23c>)
 8006cfe:	4838      	ldr	r0, [pc, #224]	; (8006de0 <icmp_input+0x238>)
 8006d00:	f009 f806 	bl	800fd10 <iprintf>
          goto icmperr;
 8006d04:	e05c      	b.n	8006dc0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8006d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f002 fd31 	bl	8009778 <pbuf_add_header>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d13c      	bne.n	8006d96 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <icmp_input+0x228>)
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d907      	bls.n	8006d56 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3309      	adds	r3, #9
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	805a      	strh	r2, [r3, #2]
 8006d54:	e006      	b.n	8006d64 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	22ff      	movs	r2, #255	; 0xff
 8006d68:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	729a      	strb	r2, [r3, #10]
 8006d70:	2200      	movs	r2, #0
 8006d72:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	9302      	str	r3, [sp, #8]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	23ff      	movs	r3, #255	; 0xff
 8006d82:	2200      	movs	r2, #0
 8006d84:	69f9      	ldr	r1, [r7, #28]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb52 	bl	8007430 <ip4_output_if>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8006d90:	e001      	b.n	8006d96 <icmp_input+0x1ee>
      break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <icmp_input+0x1f0>
      break;
 8006d96:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f002 fd83 	bl	80098a4 <pbuf_free>
  return;
 8006d9e:	e013      	b.n	8006dc8 <icmp_input+0x220>
    goto lenerr;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <icmp_input+0x202>
    goto lenerr;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <icmp_input+0x202>
        goto lenerr;
 8006da8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f002 fd7a 	bl	80098a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006db0:	e00a      	b.n	8006dc8 <icmp_input+0x220>
        goto icmperr;
 8006db2:	bf00      	nop
 8006db4:	e004      	b.n	8006dc0 <icmp_input+0x218>
        goto icmperr;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <icmp_input+0x218>
          goto icmperr;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <icmp_input+0x218>
          goto icmperr;
 8006dbe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fd6f 	bl	80098a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006dc6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8006dc8:	3728      	adds	r7, #40	; 0x28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	24008cfc 	.word	0x24008cfc
 8006dd4:	24008d10 	.word	0x24008d10
 8006dd8:	08011200 	.word	0x08011200
 8006ddc:	08011264 	.word	0x08011264
 8006de0:	0801129c 	.word	0x0801129c
 8006de4:	080112c4 	.word	0x080112c4

08006de8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	461a      	mov	r2, r3
 8006df8:	2103      	movs	r1, #3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f814 	bl	8006e28 <icmp_send_response>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	461a      	mov	r2, r3
 8006e18:	210b      	movs	r1, #11
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f804 	bl	8006e28 <icmp_send_response>
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08c      	sub	sp, #48	; 0x30
 8006e2c:	af04      	add	r7, sp, #16
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
 8006e34:	4613      	mov	r3, r2
 8006e36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006e38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006e3c:	2124      	movs	r1, #36	; 0x24
 8006e3e:	2022      	movs	r0, #34	; 0x22
 8006e40:	f002 fa4e 	bl	80092e0 <pbuf_alloc>
 8006e44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d056      	beq.n	8006efa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	895b      	ldrh	r3, [r3, #10]
 8006e50:	2b23      	cmp	r3, #35	; 0x23
 8006e52:	d806      	bhi.n	8006e62 <icmp_send_response+0x3a>
 8006e54:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <icmp_send_response+0xdc>)
 8006e56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006e5a:	492b      	ldr	r1, [pc, #172]	; (8006f08 <icmp_send_response+0xe0>)
 8006e5c:	482b      	ldr	r0, [pc, #172]	; (8006f0c <icmp_send_response+0xe4>)
 8006e5e:	f008 ff57 	bl	800fd10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	78ba      	ldrb	r2, [r7, #2]
 8006e78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	711a      	strb	r2, [r3, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2200      	movs	r2, #0
 8006e88:	719a      	strb	r2, [r3, #6]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f103 0008 	add.w	r0, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	221c      	movs	r2, #28
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f008 ff21 	bl	800fce4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006ea8:	f107 030c 	add.w	r3, r7, #12
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f901 	bl	80070b4 <ip4_route>
 8006eb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01b      	beq.n	8006ef2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	709a      	strb	r2, [r3, #2]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f000 f87d 	bl	8006fca <inet_chksum>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006ed8:	f107 020c 	add.w	r2, r7, #12
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	9302      	str	r3, [sp, #8]
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	23ff      	movs	r3, #255	; 0xff
 8006eea:	2100      	movs	r1, #0
 8006eec:	69f8      	ldr	r0, [r7, #28]
 8006eee:	f000 fa9f 	bl	8007430 <ip4_output_if>
  }
  pbuf_free(q);
 8006ef2:	69f8      	ldr	r0, [r7, #28]
 8006ef4:	f002 fcd6 	bl	80098a4 <pbuf_free>
 8006ef8:	e000      	b.n	8006efc <icmp_send_response+0xd4>
    return;
 8006efa:	bf00      	nop
}
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08011200 	.word	0x08011200
 8006f08:	080112f8 	.word	0x080112f8
 8006f0c:	0801129c 	.word	0x0801129c

08006f10 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00d      	beq.n	8006f50 <lwip_standard_chksum+0x40>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd0a      	ble.n	8006f50 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	1c53      	adds	r3, r2, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	f107 030e 	add.w	r3, r7, #14
 8006f44:	3301      	adds	r3, #1
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	701a      	strb	r2, [r3, #0]
    len--;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006f54:	e00a      	b.n	8006f6c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	61ba      	str	r2, [r7, #24]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	4413      	add	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	3b02      	subs	r3, #2
 8006f6a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	dcf1      	bgt.n	8006f56 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd04      	ble.n	8006f82 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006f78:	f107 030e 	add.w	r3, r7, #14
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	461a      	mov	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	0c1a      	lsrs	r2, r3, #16
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	0c1a      	lsrs	r2, r3, #16
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	0a1b      	lsrs	r3, r3, #8
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	b29b      	uxth	r3, r3
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3724      	adds	r7, #36	; 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006fd6:	887b      	ldrh	r3, [r7, #2]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ff98 	bl	8006f10 <lwip_standard_chksum>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	b29b      	uxth	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	e02b      	b.n	800705c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	895b      	ldrh	r3, [r3, #10]
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7ff ff7e 	bl	8006f10 <lwip_standard_chksum>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4413      	add	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	0c1a      	lsrs	r2, r3, #16
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	b29b      	uxth	r3, r3
 8007026:	4413      	add	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	895b      	ldrh	r3, [r3, #10]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00e      	beq.n	8007056 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	b29a      	uxth	r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b2db      	uxtb	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1d0      	bne.n	8007004 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	b29a      	uxth	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	b29b      	uxth	r3, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	b29b      	uxth	r3, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007092:	f001 f9e9 	bl	8008468 <mem_init>
  memp_init();
 8007096:	f001 fcdb 	bl	8008a50 <memp_init>
  pbuf_init();
  netif_init();
 800709a:	f001 fdd9 	bl	8008c50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800709e:	f008 f903 	bl	800f2a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80070a2:	f002 fe9d 	bl	8009de0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80070a6:	f008 f8b7 	bl	800f218 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80070bc:	4b33      	ldr	r3, [pc, #204]	; (800718c <ip4_route+0xd8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e036      	b.n	8007132 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d02b      	beq.n	800712c <ip4_route+0x78>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070da:	089b      	lsrs	r3, r3, #2
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d022      	beq.n	800712c <ip4_route+0x78>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3304      	adds	r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01d      	beq.n	800712c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3304      	adds	r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	405a      	eors	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3308      	adds	r3, #8
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e038      	b.n	800717e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <ip4_route+0x78>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	330c      	adds	r3, #12
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d101      	bne.n	800712c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e028      	b.n	800717e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1c5      	bne.n	80070c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007138:	4b15      	ldr	r3, [pc, #84]	; (8007190 <ip4_route+0xdc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01a      	beq.n	8007176 <ip4_route+0xc2>
 8007140:	4b13      	ldr	r3, [pc, #76]	; (8007190 <ip4_route+0xdc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d012      	beq.n	8007176 <ip4_route+0xc2>
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <ip4_route+0xdc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <ip4_route+0xdc>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3304      	adds	r3, #4
 8007166:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b7f      	cmp	r3, #127	; 0x7f
 8007174:	d101      	bne.n	800717a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	e001      	b.n	800717e <ip4_route+0xca>
  }

  return netif_default;
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <ip4_route+0xdc>)
 800717c:	681b      	ldr	r3, [r3, #0]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	2400bc18 	.word	0x2400bc18
 8007190:	2400bc1c 	.word	0x2400bc1c

08007194 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d016      	beq.n	80071da <ip4_input_accept+0x46>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d011      	beq.n	80071da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80071b6:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <ip4_input_accept+0x50>)
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d008      	beq.n	80071d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <ip4_input_accept+0x50>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fa08 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 80071d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	24008cfc 	.word	0x24008cfc

080071e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b04      	cmp	r3, #4
 8007202:	d004      	beq.n	800720e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f002 fb4d 	bl	80098a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e107      	b.n	800741e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	b2db      	uxtb	r3, r3
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	885b      	ldrh	r3, [r3, #2]
 8007222:	b29b      	uxth	r3, r3
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fc6f 	bl	8005b08 <lwip_htons>
 800722a:	4603      	mov	r3, r0
 800722c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	891b      	ldrh	r3, [r3, #8]
 8007232:	89ba      	ldrh	r2, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d204      	bcs.n	8007242 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8007238:	89bb      	ldrh	r3, [r7, #12]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 f9ad 	bl	800959c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	895b      	ldrh	r3, [r3, #10]
 8007246:	89fa      	ldrh	r2, [r7, #14]
 8007248:	429a      	cmp	r2, r3
 800724a:	d807      	bhi.n	800725c <ip4_input+0x74>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	891b      	ldrh	r3, [r3, #8]
 8007250:	89ba      	ldrh	r2, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d802      	bhi.n	800725c <ip4_input+0x74>
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	2b13      	cmp	r3, #19
 800725a:	d804      	bhi.n	8007266 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 fb21 	bl	80098a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e0db      	b.n	800741e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	4a6f      	ldr	r2, [pc, #444]	; (8007428 <ip4_input+0x240>)
 800726c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	4a6d      	ldr	r2, [pc, #436]	; (8007428 <ip4_input+0x240>)
 8007274:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007276:	4b6c      	ldr	r3, [pc, #432]	; (8007428 <ip4_input+0x240>)
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800727e:	2be0      	cmp	r3, #224	; 0xe0
 8007280:	d112      	bne.n	80072a8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <ip4_input+0xba>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	3304      	adds	r3, #4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <ip4_input+0xba>
      netif = inp;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	e02a      	b.n	80072f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	e027      	b.n	80072f8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80072a8:	6838      	ldr	r0, [r7, #0]
 80072aa:	f7ff ff73 	bl	8007194 <ip4_input_accept>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <ip4_input+0xd2>
      netif = inp;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	e01e      	b.n	80072f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80072be:	4b5a      	ldr	r3, [pc, #360]	; (8007428 <ip4_input+0x240>)
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b7f      	cmp	r3, #127	; 0x7f
 80072c6:	d017      	beq.n	80072f8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80072c8:	4b58      	ldr	r3, [pc, #352]	; (800742c <ip4_input+0x244>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	e00e      	b.n	80072ee <ip4_input+0x106>
          if (netif == inp) {
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d006      	beq.n	80072e6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80072d8:	6938      	ldr	r0, [r7, #16]
 80072da:	f7ff ff5b 	bl	8007194 <ip4_input_accept>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <ip4_input+0x10e>
 80072e4:	e000      	b.n	80072e8 <ip4_input+0x100>
            continue;
 80072e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ed      	bne.n	80072d0 <ip4_input+0xe8>
 80072f4:	e000      	b.n	80072f8 <ip4_input+0x110>
            break;
 80072f6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80072f8:	4b4b      	ldr	r3, [pc, #300]	; (8007428 <ip4_input+0x240>)
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f96e 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800730a:	4b47      	ldr	r3, [pc, #284]	; (8007428 <ip4_input+0x240>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007312:	2be0      	cmp	r3, #224	; 0xe0
 8007314:	d104      	bne.n	8007320 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 fac4 	bl	80098a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e07e      	b.n	800741e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f002 fabc 	bl	80098a4 <pbuf_free>
    return ERR_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	e076      	b.n	800741e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	88db      	ldrh	r3, [r3, #6]
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800733c:	4013      	ands	r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc92 	bl	8007c6c <ip4_reass>
 8007348:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <ip4_input+0x16c>
      return ERR_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e064      	b.n	800741e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800735a:	4a33      	ldr	r2, [pc, #204]	; (8007428 <ip4_input+0x240>)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8007360:	4a31      	ldr	r2, [pc, #196]	; (8007428 <ip4_input+0x240>)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8007366:	4a30      	ldr	r2, [pc, #192]	; (8007428 <ip4_input+0x240>)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	b2db      	uxtb	r3, r3
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	b2db      	uxtb	r3, r3
 800737a:	b29a      	uxth	r2, r3
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <ip4_input+0x240>)
 800737e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 fa07 	bl	8009798 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	7a5b      	ldrb	r3, [r3, #9]
 800738e:	2b11      	cmp	r3, #17
 8007390:	d006      	beq.n	80073a0 <ip4_input+0x1b8>
 8007392:	2b11      	cmp	r3, #17
 8007394:	dc13      	bgt.n	80073be <ip4_input+0x1d6>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00c      	beq.n	80073b4 <ip4_input+0x1cc>
 800739a:	2b06      	cmp	r3, #6
 800739c:	d005      	beq.n	80073aa <ip4_input+0x1c2>
 800739e:	e00e      	b.n	80073be <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f008 f82e 	bl	800f404 <udp_input>
        break;
 80073a8:	e026      	b.n	80073f8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f004 f8b1 	bl	800b514 <tcp_input>
        break;
 80073b2:	e021      	b.n	80073f8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fbf6 	bl	8006ba8 <icmp_input>
        break;
 80073bc:	e01c      	b.n	80073f8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80073be:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <ip4_input+0x240>)
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	6939      	ldr	r1, [r7, #16]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f90b 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10f      	bne.n	80073f0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80073d0:	4b15      	ldr	r3, [pc, #84]	; (8007428 <ip4_input+0x240>)
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80073d8:	2be0      	cmp	r3, #224	; 0xe0
 80073da:	d009      	beq.n	80073f0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80073dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 fa4b 	bl	800987e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80073e8:	2102      	movs	r1, #2
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fcfc 	bl	8006de8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 fa57 	bl	80098a4 <pbuf_free>
        break;
 80073f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <ip4_input+0x240>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <ip4_input+0x240>)
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <ip4_input+0x240>)
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800740a:	4b07      	ldr	r3, [pc, #28]	; (8007428 <ip4_input+0x240>)
 800740c:	2200      	movs	r2, #0
 800740e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <ip4_input+0x240>)
 8007412:	2200      	movs	r2, #0
 8007414:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <ip4_input+0x240>)
 8007418:	2200      	movs	r2, #0
 800741a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	24008cfc 	.word	0x24008cfc
 800742c:	2400bc18 	.word	0x2400bc18

08007430 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	; 0x28
 8007434:	af04      	add	r7, sp, #16
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <ip4_output_if+0x26>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	3304      	adds	r3, #4
 800745a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	9302      	str	r3, [sp, #8]
 8007462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4613      	mov	r3, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6979      	ldr	r1, [r7, #20]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f805 	bl	8007484 <ip4_output_if_src>
 800747a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	7b9b      	ldrb	r3, [r3, #14]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d006      	beq.n	80074a8 <ip4_output_if_src+0x24>
 800749a:	4b4b      	ldr	r3, [pc, #300]	; (80075c8 <ip4_output_if_src+0x144>)
 800749c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80074a0:	494a      	ldr	r1, [pc, #296]	; (80075cc <ip4_output_if_src+0x148>)
 80074a2:	484b      	ldr	r0, [pc, #300]	; (80075d0 <ip4_output_if_src+0x14c>)
 80074a4:	f008 fc34 	bl	800fd10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d060      	beq.n	8007570 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80074ae:	2314      	movs	r3, #20
 80074b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80074b2:	2114      	movs	r1, #20
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f002 f95f 	bl	8009778 <pbuf_add_header>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80074c0:	f06f 0301 	mvn.w	r3, #1
 80074c4:	e07c      	b.n	80075c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	895b      	ldrh	r3, [r3, #10]
 80074d0:	2b13      	cmp	r3, #19
 80074d2:	d806      	bhi.n	80074e2 <ip4_output_if_src+0x5e>
 80074d4:	4b3c      	ldr	r3, [pc, #240]	; (80075c8 <ip4_output_if_src+0x144>)
 80074d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80074da:	493e      	ldr	r1, [pc, #248]	; (80075d4 <ip4_output_if_src+0x150>)
 80074dc:	483c      	ldr	r0, [pc, #240]	; (80075d0 <ip4_output_if_src+0x14c>)
 80074de:	f008 fc17 	bl	800fd10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80074ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80074f8:	8b7b      	ldrh	r3, [r7, #26]
 80074fa:	089b      	lsrs	r3, r3, #2
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007504:	b2da      	uxtb	r2, r3
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007510:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	891b      	ldrh	r3, [r3, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe faf6 	bl	8005b08 <lwip_htons>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2200      	movs	r2, #0
 8007528:	719a      	strb	r2, [r3, #6]
 800752a:	2200      	movs	r2, #0
 800752c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800752e:	4b2a      	ldr	r3, [pc, #168]	; (80075d8 <ip4_output_if_src+0x154>)
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fae8 	bl	8005b08 <lwip_htons>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <ip4_output_if_src+0x154>)
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <ip4_output_if_src+0x154>)
 800754a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007552:	4b22      	ldr	r3, [pc, #136]	; (80075dc <ip4_output_if_src+0x158>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	60da      	str	r2, [r3, #12]
 800755a:	e003      	b.n	8007564 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2200      	movs	r2, #0
 8007568:	729a      	strb	r2, [r3, #10]
 800756a:	2200      	movs	r2, #0
 800756c:	72da      	strb	r2, [r3, #11]
 800756e:	e00f      	b.n	8007590 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	895b      	ldrh	r3, [r3, #10]
 8007574:	2b13      	cmp	r3, #19
 8007576:	d802      	bhi.n	800757e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007578:	f06f 0301 	mvn.w	r3, #1
 800757c:	e020      	b.n	80075c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <ip4_output_if_src+0x12e>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	891a      	ldrh	r2, [r3, #8]
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d906      	bls.n	80075b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fd53 	bl	8008054 <ip4_frag>
 80075ae:	4603      	mov	r3, r0
 80075b0:	e006      	b.n	80075c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075bc:	4798      	blx	r3
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	08011324 	.word	0x08011324
 80075cc:	08011388 	.word	0x08011388
 80075d0:	08011394 	.word	0x08011394
 80075d4:	080113bc 	.word	0x080113bc
 80075d8:	24008d14 	.word	0x24008d14
 80075dc:	08013ae0 	.word	0x08013ae0

080075e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d002      	beq.n	80075fc <ip4_addr_isbroadcast_u32+0x1c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e02a      	b.n	8007656 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800760e:	2300      	movs	r3, #0
 8007610:	e021      	b.n	8007656 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	3304      	adds	r3, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	429a      	cmp	r2, r3
 800761c:	d101      	bne.n	8007622 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800761e:	2300      	movs	r3, #0
 8007620:	e019      	b.n	8007656 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3304      	adds	r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	405a      	eors	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4013      	ands	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	3308      	adds	r3, #8
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	43da      	mvns	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800764c:	429a      	cmp	r2, r3
 800764e:	d101      	bne.n	8007654 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8007654:	2300      	movs	r3, #0
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <ip_reass_tmr+0x54>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8007674:	e018      	b.n	80076a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7fdb      	ldrb	r3, [r3, #31]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <ip_reass_tmr+0x32>
      r->timer--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	7fdb      	ldrb	r3, [r3, #31]
 8007682:	3b01      	subs	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e008      	b.n	80076a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f80a 	bl	80076bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e3      	bne.n	8007676 <ip_reass_tmr+0x12>
    }
  }
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	24008d18 	.word	0x24008d18

080076bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d105      	bne.n	80076de <ip_reass_free_complete_datagram+0x22>
 80076d2:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <ip_reass_free_complete_datagram+0x12c>)
 80076d4:	22ab      	movs	r2, #171	; 0xab
 80076d6:	4945      	ldr	r1, [pc, #276]	; (80077ec <ip_reass_free_complete_datagram+0x130>)
 80076d8:	4845      	ldr	r0, [pc, #276]	; (80077f0 <ip_reass_free_complete_datagram+0x134>)
 80076da:	f008 fb19 	bl	800fd10 <iprintf>
  if (prev != NULL) {
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d005      	beq.n	80076fa <ip_reass_free_complete_datagram+0x3e>
 80076ee:	4b3e      	ldr	r3, [pc, #248]	; (80077e8 <ip_reass_free_complete_datagram+0x12c>)
 80076f0:	22ad      	movs	r2, #173	; 0xad
 80076f2:	4940      	ldr	r1, [pc, #256]	; (80077f4 <ip_reass_free_complete_datagram+0x138>)
 80076f4:	483e      	ldr	r0, [pc, #248]	; (80077f0 <ip_reass_free_complete_datagram+0x134>)
 80076f6:	f008 fb0b 	bl	800fd10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	889b      	ldrh	r3, [r3, #4]
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d12a      	bne.n	8007762 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	6858      	ldr	r0, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3308      	adds	r3, #8
 8007722:	2214      	movs	r2, #20
 8007724:	4619      	mov	r1, r3
 8007726:	f008 fadd 	bl	800fce4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800772a:	2101      	movs	r1, #1
 800772c:	69b8      	ldr	r0, [r7, #24]
 800772e:	f7ff fb6b 	bl	8006e08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007732:	69b8      	ldr	r0, [r7, #24]
 8007734:	f002 f93e 	bl	80099b4 <pbuf_clen>
 8007738:	4603      	mov	r3, r0
 800773a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800773c:	8bfa      	ldrh	r2, [r7, #30]
 800773e:	8a7b      	ldrh	r3, [r7, #18]
 8007740:	4413      	add	r3, r2
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	db05      	blt.n	8007754 <ip_reass_free_complete_datagram+0x98>
 8007748:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <ip_reass_free_complete_datagram+0x12c>)
 800774a:	22bc      	movs	r2, #188	; 0xbc
 800774c:	492a      	ldr	r1, [pc, #168]	; (80077f8 <ip_reass_free_complete_datagram+0x13c>)
 800774e:	4828      	ldr	r0, [pc, #160]	; (80077f0 <ip_reass_free_complete_datagram+0x134>)
 8007750:	f008 fade 	bl	800fd10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007754:	8bfa      	ldrh	r2, [r7, #30]
 8007756:	8a7b      	ldrh	r3, [r7, #18]
 8007758:	4413      	add	r3, r2
 800775a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800775c:	69b8      	ldr	r0, [r7, #24]
 800775e:	f002 f8a1 	bl	80098a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8007768:	e01f      	b.n	80077aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f002 f91a 	bl	80099b4 <pbuf_clen>
 8007780:	4603      	mov	r3, r0
 8007782:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007784:	8bfa      	ldrh	r2, [r7, #30]
 8007786:	8a7b      	ldrh	r3, [r7, #18]
 8007788:	4413      	add	r3, r2
 800778a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778e:	db05      	blt.n	800779c <ip_reass_free_complete_datagram+0xe0>
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <ip_reass_free_complete_datagram+0x12c>)
 8007792:	22cc      	movs	r2, #204	; 0xcc
 8007794:	4918      	ldr	r1, [pc, #96]	; (80077f8 <ip_reass_free_complete_datagram+0x13c>)
 8007796:	4816      	ldr	r0, [pc, #88]	; (80077f0 <ip_reass_free_complete_datagram+0x134>)
 8007798:	f008 faba 	bl	800fd10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800779c:	8bfa      	ldrh	r2, [r7, #30]
 800779e:	8a7b      	ldrh	r3, [r7, #18]
 80077a0:	4413      	add	r3, r2
 80077a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f002 f87d 	bl	80098a4 <pbuf_free>
  while (p != NULL) {
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1dc      	bne.n	800776a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8c2 	bl	800793c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <ip_reass_free_complete_datagram+0x140>)
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	8bfa      	ldrh	r2, [r7, #30]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d905      	bls.n	80077ce <ip_reass_free_complete_datagram+0x112>
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <ip_reass_free_complete_datagram+0x12c>)
 80077c4:	22d2      	movs	r2, #210	; 0xd2
 80077c6:	490e      	ldr	r1, [pc, #56]	; (8007800 <ip_reass_free_complete_datagram+0x144>)
 80077c8:	4809      	ldr	r0, [pc, #36]	; (80077f0 <ip_reass_free_complete_datagram+0x134>)
 80077ca:	f008 faa1 	bl	800fd10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <ip_reass_free_complete_datagram+0x140>)
 80077d0:	881a      	ldrh	r2, [r3, #0]
 80077d2:	8bfb      	ldrh	r3, [r7, #30]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	4b08      	ldr	r3, [pc, #32]	; (80077fc <ip_reass_free_complete_datagram+0x140>)
 80077da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80077dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	080113ec 	.word	0x080113ec
 80077ec:	08011454 	.word	0x08011454
 80077f0:	08011460 	.word	0x08011460
 80077f4:	08011488 	.word	0x08011488
 80077f8:	0801149c 	.word	0x0801149c
 80077fc:	24008d1c 	.word	0x24008d1c
 8007800:	080114bc 	.word	0x080114bc

08007804 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8007822:	4b28      	ldr	r3, [pc, #160]	; (80078c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8007828:	e030      	b.n	800788c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	429a      	cmp	r2, r3
 8007834:	d10c      	bne.n	8007850 <ip_reass_remove_oldest_datagram+0x4c>
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	d106      	bne.n	8007850 <ip_reass_remove_oldest_datagram+0x4c>
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	899a      	ldrh	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	889b      	ldrh	r3, [r3, #4]
 800784a:	b29b      	uxth	r3, r3
 800784c:	429a      	cmp	r2, r3
 800784e:	d014      	beq.n	800787a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3301      	adds	r3, #1
 8007854:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	e009      	b.n	800787a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	7fda      	ldrb	r2, [r3, #31]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	7fdb      	ldrb	r3, [r3, #31]
 800786e:	429a      	cmp	r2, r3
 8007870:	d803      	bhi.n	800787a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1cb      	bne.n	800782a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	6a38      	ldr	r0, [r7, #32]
 800789c:	f7ff ff0e 	bl	80076bc <ip_reass_free_complete_datagram>
 80078a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	da02      	bge.n	80078b8 <ip_reass_remove_oldest_datagram+0xb4>
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	dcac      	bgt.n	8007812 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80078b8:	697b      	ldr	r3, [r7, #20]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3728      	adds	r7, #40	; 0x28
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	24008d18 	.word	0x24008d18

080078c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80078d2:	2004      	movs	r0, #4
 80078d4:	f001 f922 	bl	8008b1c <memp_malloc>
 80078d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d110      	bne.n	8007902 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff ff8e 	bl	8007804 <ip_reass_remove_oldest_datagram>
 80078e8:	4602      	mov	r2, r0
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	dc03      	bgt.n	80078f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80078f0:	2004      	movs	r0, #4
 80078f2:	f001 f913 	bl	8008b1c <memp_malloc>
 80078f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	e016      	b.n	8007930 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007902:	2220      	movs	r2, #32
 8007904:	2100      	movs	r1, #0
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f008 f9fa 	bl	800fd00 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	220f      	movs	r2, #15
 8007910:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <ip_reass_enqueue_new_datagram+0x70>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800791a:	4a07      	ldr	r2, [pc, #28]	; (8007938 <ip_reass_enqueue_new_datagram+0x70>)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3308      	adds	r3, #8
 8007924:	2214      	movs	r2, #20
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	f008 f9db 	bl	800fce4 <memcpy>
  return ipr;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	24008d18 	.word	0x24008d18

0800793c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8007946:	4b10      	ldr	r3, [pc, #64]	; (8007988 <ip_reass_dequeue_datagram+0x4c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d104      	bne.n	800795a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a0c      	ldr	r2, [pc, #48]	; (8007988 <ip_reass_dequeue_datagram+0x4c>)
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e00d      	b.n	8007976 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <ip_reass_dequeue_datagram+0x32>
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <ip_reass_dequeue_datagram+0x50>)
 8007962:	f240 1245 	movw	r2, #325	; 0x145
 8007966:	490a      	ldr	r1, [pc, #40]	; (8007990 <ip_reass_dequeue_datagram+0x54>)
 8007968:	480a      	ldr	r0, [pc, #40]	; (8007994 <ip_reass_dequeue_datagram+0x58>)
 800796a:	f008 f9d1 	bl	800fd10 <iprintf>
    prev->next = ipr->next;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	2004      	movs	r0, #4
 800797a:	f001 f93f 	bl	8008bfc <memp_free>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	24008d18 	.word	0x24008d18
 800798c:	080113ec 	.word	0x080113ec
 8007990:	080114e0 	.word	0x080114e0
 8007994:	08011460 	.word	0x08011460

08007998 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe f8a5 	bl	8005b08 <lwip_htons>
 80079be:	4603      	mov	r3, r0
 80079c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80079d0:	7e7b      	ldrb	r3, [r7, #25]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8b7a      	ldrh	r2, [r7, #26]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d202      	bcs.n	80079e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	e135      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80079e0:	7e7b      	ldrb	r3, [r7, #25]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8b7a      	ldrh	r2, [r7, #26]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe f889 	bl	8005b08 <lwip_htons>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	705a      	strb	r2, [r3, #1]
 8007a12:	2200      	movs	r2, #0
 8007a14:	709a      	strb	r2, [r3, #2]
 8007a16:	2200      	movs	r2, #0
 8007a18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	8afa      	ldrh	r2, [r7, #22]
 8007a1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8007a20:	8afa      	ldrh	r2, [r7, #22]
 8007a22:	8b7b      	ldrh	r3, [r7, #26]
 8007a24:	4413      	add	r3, r2
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	88db      	ldrh	r3, [r3, #6]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	8afa      	ldrh	r2, [r7, #22]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d902      	bls.n	8007a3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e106      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
 8007a44:	e068      	b.n	8007b18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	889b      	ldrh	r3, [r3, #4]
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	889b      	ldrh	r3, [r3, #4]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d235      	bcs.n	8007ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d020      	beq.n	8007aaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	889b      	ldrh	r3, [r3, #4]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	88db      	ldrh	r3, [r3, #6]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d307      	bcc.n	8007a88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d902      	bls.n	8007a8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007a88:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8c:	e0de      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	889b      	ldrh	r3, [r3, #4]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d03d      	beq.n	8007b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8007aa8:	e03a      	b.n	8007b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	889b      	ldrh	r3, [r3, #4]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d902      	bls.n	8007ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295
 8007abe:	e0c5      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	605a      	str	r2, [r3, #4]
      break;
 8007ac6:	e02b      	b.n	8007b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	889b      	ldrh	r3, [r3, #4]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	889b      	ldrh	r3, [r3, #4]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d102      	bne.n	8007ade <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	e0b6      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	889b      	ldrh	r3, [r3, #4]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d202      	bcs.n	8007af4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	e0ab      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	889b      	ldrh	r3, [r3, #4]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d001      	beq.n	8007b0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d193      	bne.n	8007a46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8007b1e:	e000      	b.n	8007b22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8007b20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d12d      	bne.n	8007b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01c      	beq.n	8007b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	88db      	ldrh	r3, [r3, #6]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	889b      	ldrh	r3, [r3, #4]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d906      	bls.n	8007b4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8007b3e:	4b45      	ldr	r3, [pc, #276]	; (8007c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007b40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007b44:	4944      	ldr	r1, [pc, #272]	; (8007c58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8007b46:	4845      	ldr	r0, [pc, #276]	; (8007c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007b48:	f008 f8e2 	bl	800fd10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	889b      	ldrh	r3, [r3, #4]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d010      	beq.n	8007b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	e00d      	b.n	8007b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d006      	beq.n	8007b7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8007b70:	4b38      	ldr	r3, [pc, #224]	; (8007c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007b72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8007b76:	493a      	ldr	r1, [pc, #232]	; (8007c60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8007b78:	4838      	ldr	r0, [pc, #224]	; (8007c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007b7a:	f008 f8c9 	bl	800fd10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	7f9b      	ldrb	r3, [r3, #30]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d059      	beq.n	8007c4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d04f      	beq.n	8007c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	889b      	ldrh	r3, [r3, #4]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	e041      	b.n	8007c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8007bc2:	e012      	b.n	8007bea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	88db      	ldrh	r3, [r3, #6]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	889b      	ldrh	r3, [r3, #4]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d002      	beq.n	8007be0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	623b      	str	r3, [r7, #32]
            break;
 8007bde:	e007      	b.n	8007bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e9      	bne.n	8007bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d022      	beq.n	8007c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8007bfe:	4b15      	ldr	r3, [pc, #84]	; (8007c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007c00:	f240 12df 	movw	r2, #479	; 0x1df
 8007c04:	4917      	ldr	r1, [pc, #92]	; (8007c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8007c06:	4815      	ldr	r0, [pc, #84]	; (8007c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007c08:	f008 f882 	bl	800fd10 <iprintf>
          LWIP_ASSERT("sanity check",
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d106      	bne.n	8007c26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007c1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c1e:	4911      	ldr	r1, [pc, #68]	; (8007c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8007c20:	480e      	ldr	r0, [pc, #56]	; (8007c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007c22:	f008 f875 	bl	800fd10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d006      	beq.n	8007c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007c30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8007c34:	490c      	ldr	r1, [pc, #48]	; (8007c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8007c36:	4809      	ldr	r0, [pc, #36]	; (8007c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007c38:	f008 f86a 	bl	800fd10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	e000      	b.n	8007c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3730      	adds	r7, #48	; 0x30
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	080113ec 	.word	0x080113ec
 8007c58:	080114fc 	.word	0x080114fc
 8007c5c:	08011460 	.word	0x08011460
 8007c60:	0801151c 	.word	0x0801151c
 8007c64:	08011554 	.word	0x08011554
 8007c68:	08011564 	.word	0x08011564

08007c6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	; 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b14      	cmp	r3, #20
 8007c8a:	f040 8171 	bne.w	8007f70 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	88db      	ldrh	r3, [r3, #6]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd ff37 	bl	8005b08 <lwip_htons>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	885b      	ldrh	r3, [r3, #2]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd ff2b 	bl	8005b08 <lwip_htons>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8007cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	f0c0 8150 	bcc.w	8007f74 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8007cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fe67 	bl	80099b4 <pbuf_clen>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007cea:	4b8c      	ldr	r3, [pc, #560]	; (8007f1c <ip4_reass+0x2b0>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	8c3b      	ldrh	r3, [r7, #32]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	dd10      	ble.n	8007d1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007cf8:	8c3b      	ldrh	r3, [r7, #32]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfe:	f7ff fd81 	bl	8007804 <ip_reass_remove_oldest_datagram>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8137 	beq.w	8007f78 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007d0a:	4b84      	ldr	r3, [pc, #528]	; (8007f1c <ip4_reass+0x2b0>)
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	8c3b      	ldrh	r3, [r7, #32]
 8007d12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007d14:	2b0a      	cmp	r3, #10
 8007d16:	f300 812f 	bgt.w	8007f78 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007d1a:	4b81      	ldr	r3, [pc, #516]	; (8007f20 <ip4_reass+0x2b4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d20:	e015      	b.n	8007d4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d10c      	bne.n	8007d48 <ip4_reass+0xdc>
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d106      	bne.n	8007d48 <ip4_reass+0xdc>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	899a      	ldrh	r2, [r3, #12]
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	889b      	ldrh	r3, [r3, #4]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d006      	beq.n	8007d56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <ip4_reass+0xb6>
 8007d54:	e000      	b.n	8007d58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8007d56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8007d5e:	8c3b      	ldrh	r3, [r7, #32]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d64:	f7ff fdb0 	bl	80078c8 <ip_reass_enqueue_new_datagram>
 8007d68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11c      	bne.n	8007daa <ip4_reass+0x13e>
      goto nullreturn;
 8007d70:	e105      	b.n	8007f7e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	88db      	ldrh	r3, [r3, #6]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fd fec5 	bl	8005b08 <lwip_htons>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d110      	bne.n	8007daa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	89db      	ldrh	r3, [r3, #14]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd febb 	bl	8005b08 <lwip_htons>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d006      	beq.n	8007daa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	3308      	adds	r3, #8
 8007da0:	2214      	movs	r2, #20
 8007da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da4:	4618      	mov	r0, r3
 8007da6:	f007 ff9d 	bl	800fce4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8007dc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dca:	4413      	add	r3, r2
 8007dcc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007dce:	8b7a      	ldrh	r2, [r7, #26]
 8007dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	f0c0 80a0 	bcc.w	8007f18 <ip4_reass+0x2ac>
 8007dd8:	8b7b      	ldrh	r3, [r7, #26]
 8007dda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8007dde:	4293      	cmp	r3, r2
 8007de0:	f200 809a 	bhi.w	8007f18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f7ff fdd5 	bl	8007998 <ip_reass_chain_frag_into_datagram_and_validate>
 8007dee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	f000 809b 	beq.w	8007f30 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007dfa:	4b48      	ldr	r3, [pc, #288]	; (8007f1c <ip4_reass+0x2b0>)
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	8c3b      	ldrh	r3, [r7, #32]
 8007e00:	4413      	add	r3, r2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	4b45      	ldr	r3, [pc, #276]	; (8007f1c <ip4_reass+0x2b0>)
 8007e06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8007e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e12:	4413      	add	r3, r2
 8007e14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	8a7a      	ldrh	r2, [r7, #18]
 8007e1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	7f9b      	ldrb	r3, [r3, #30]
 8007e20:	f043 0301 	orr.w	r3, r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d171      	bne.n	8007f14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	8b9b      	ldrh	r3, [r3, #28]
 8007e34:	3314      	adds	r3, #20
 8007e36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	2214      	movs	r2, #20
 8007e50:	4619      	mov	r1, r3
 8007e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e54:	f007 ff46 	bl	800fce4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007e58:	8a3b      	ldrh	r3, [r7, #16]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fd fe54 	bl	8005b08 <lwip_htons>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	719a      	strb	r2, [r3, #6]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2200      	movs	r2, #0
 8007e76:	729a      	strb	r2, [r3, #10]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8007e82:	e00d      	b.n	8007ea0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8007e8a:	2114      	movs	r1, #20
 8007e8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e8e:	f001 fc83 	bl	8009798 <pbuf_remove_header>
      pbuf_cat(p, r);
 8007e92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fdc7 	bl	8009a28 <pbuf_cat>
      r = iprh->next_pbuf;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1ee      	bne.n	8007e84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8007ea6:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <ip4_reass+0x2b4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d102      	bne.n	8007eb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb4:	e010      	b.n	8007ed8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007eb6:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <ip4_reass+0x2b4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebc:	e007      	b.n	8007ece <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d006      	beq.n	8007ed6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f4      	bne.n	8007ebe <ip4_reass+0x252>
 8007ed4:	e000      	b.n	8007ed8 <ip4_reass+0x26c>
          break;
 8007ed6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007edc:	f7ff fd2e 	bl	800793c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fd67 	bl	80099b4 <pbuf_clen>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007eea:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <ip4_reass+0x2b0>)
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	8c3a      	ldrh	r2, [r7, #32]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d906      	bls.n	8007f02 <ip4_reass+0x296>
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <ip4_reass+0x2b8>)
 8007ef6:	f240 229b 	movw	r2, #667	; 0x29b
 8007efa:	490b      	ldr	r1, [pc, #44]	; (8007f28 <ip4_reass+0x2bc>)
 8007efc:	480b      	ldr	r0, [pc, #44]	; (8007f2c <ip4_reass+0x2c0>)
 8007efe:	f007 ff07 	bl	800fd10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <ip4_reass+0x2b0>)
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	8c3b      	ldrh	r3, [r7, #32]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	4b03      	ldr	r3, [pc, #12]	; (8007f1c <ip4_reass+0x2b0>)
 8007f0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	e038      	b.n	8007f86 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e036      	b.n	8007f86 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8007f18:	bf00      	nop
 8007f1a:	e00a      	b.n	8007f32 <ip4_reass+0x2c6>
 8007f1c:	24008d1c 	.word	0x24008d1c
 8007f20:	24008d18 	.word	0x24008d18
 8007f24:	080113ec 	.word	0x080113ec
 8007f28:	08011588 	.word	0x08011588
 8007f2c:	08011460 	.word	0x08011460
    goto nullreturn_ipr;
 8007f30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <ip4_reass+0x2da>
 8007f38:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <ip4_reass+0x324>)
 8007f3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007f3e:	4915      	ldr	r1, [pc, #84]	; (8007f94 <ip4_reass+0x328>)
 8007f40:	4815      	ldr	r0, [pc, #84]	; (8007f98 <ip4_reass+0x32c>)
 8007f42:	f007 fee5 	bl	800fd10 <iprintf>
  if (ipr->p == NULL) {
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d116      	bne.n	8007f7c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <ip4_reass+0x330>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d006      	beq.n	8007f66 <ip4_reass+0x2fa>
 8007f58:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <ip4_reass+0x324>)
 8007f5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007f5e:	4910      	ldr	r1, [pc, #64]	; (8007fa0 <ip4_reass+0x334>)
 8007f60:	480d      	ldr	r0, [pc, #52]	; (8007f98 <ip4_reass+0x32c>)
 8007f62:	f007 fed5 	bl	800fd10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8007f66:	2100      	movs	r1, #0
 8007f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6a:	f7ff fce7 	bl	800793c <ip_reass_dequeue_datagram>
 8007f6e:	e006      	b.n	8007f7e <ip4_reass+0x312>
    goto nullreturn;
 8007f70:	bf00      	nop
 8007f72:	e004      	b.n	8007f7e <ip4_reass+0x312>
    goto nullreturn;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <ip4_reass+0x312>
      goto nullreturn;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <ip4_reass+0x312>
  }

nullreturn:
 8007f7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fc90 	bl	80098a4 <pbuf_free>
  return NULL;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3738      	adds	r7, #56	; 0x38
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	080113ec 	.word	0x080113ec
 8007f94:	080115a4 	.word	0x080115a4
 8007f98:	08011460 	.word	0x08011460
 8007f9c:	24008d18 	.word	0x24008d18
 8007fa0:	080115b0 	.word	0x080115b0

08007fa4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8007fa8:	2005      	movs	r0, #5
 8007faa:	f000 fdb7 	bl	8008b1c <memp_malloc>
 8007fae:	4603      	mov	r3, r0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8007fc4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007fc8:	4906      	ldr	r1, [pc, #24]	; (8007fe4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8007fca:	4807      	ldr	r0, [pc, #28]	; (8007fe8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8007fcc:	f007 fea0 	bl	800fd10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	2005      	movs	r0, #5
 8007fd4:	f000 fe12 	bl	8008bfc <memp_free>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	080113ec 	.word	0x080113ec
 8007fe4:	080115d0 	.word	0x080115d0
 8007fe8:	08011460 	.word	0x08011460

08007fec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <ipfrag_free_pbuf_custom+0x20>
 8007ffe:	4b11      	ldr	r3, [pc, #68]	; (8008044 <ipfrag_free_pbuf_custom+0x58>)
 8008000:	f240 22ce 	movw	r2, #718	; 0x2ce
 8008004:	4910      	ldr	r1, [pc, #64]	; (8008048 <ipfrag_free_pbuf_custom+0x5c>)
 8008006:	4811      	ldr	r0, [pc, #68]	; (800804c <ipfrag_free_pbuf_custom+0x60>)
 8008008:	f007 fe82 	bl	800fd10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d006      	beq.n	8008022 <ipfrag_free_pbuf_custom+0x36>
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <ipfrag_free_pbuf_custom+0x58>)
 8008016:	f240 22cf 	movw	r2, #719	; 0x2cf
 800801a:	490d      	ldr	r1, [pc, #52]	; (8008050 <ipfrag_free_pbuf_custom+0x64>)
 800801c:	480b      	ldr	r0, [pc, #44]	; (800804c <ipfrag_free_pbuf_custom+0x60>)
 800801e:	f007 fe77 	bl	800fd10 <iprintf>
  if (pcr->original != NULL) {
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fc38 	bl	80098a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff ffbd 	bl	8007fb4 <ip_frag_free_pbuf_custom_ref>
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	080113ec 	.word	0x080113ec
 8008048:	080115dc 	.word	0x080115dc
 800804c:	08011460 	.word	0x08011460
 8008050:	080115e8 	.word	0x080115e8

08008054 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b094      	sub	sp, #80	; 0x50
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800806a:	3b14      	subs	r3, #20
 800806c:	2b00      	cmp	r3, #0
 800806e:	da00      	bge.n	8008072 <ip4_frag+0x1e>
 8008070:	3307      	adds	r3, #7
 8008072:	10db      	asrs	r3, r3, #3
 8008074:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8008076:	2314      	movs	r3, #20
 8008078:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8008080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	b2db      	uxtb	r3, r3
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b14      	cmp	r3, #20
 8008094:	d002      	beq.n	800809c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8008096:	f06f 0305 	mvn.w	r3, #5
 800809a:	e110      	b.n	80082be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	895b      	ldrh	r3, [r3, #10]
 80080a0:	2b13      	cmp	r3, #19
 80080a2:	d809      	bhi.n	80080b8 <ip4_frag+0x64>
 80080a4:	4b88      	ldr	r3, [pc, #544]	; (80082c8 <ip4_frag+0x274>)
 80080a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80080aa:	4988      	ldr	r1, [pc, #544]	; (80082cc <ip4_frag+0x278>)
 80080ac:	4888      	ldr	r0, [pc, #544]	; (80082d0 <ip4_frag+0x27c>)
 80080ae:	f007 fe2f 	bl	800fd10 <iprintf>
 80080b2:	f06f 0305 	mvn.w	r3, #5
 80080b6:	e102      	b.n	80082be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fd fd22 	bl	8005b08 <lwip_htons>
 80080c4:	4603      	mov	r3, r0
 80080c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80080c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80080ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80080d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80080d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	891b      	ldrh	r3, [r3, #8]
 80080de:	3b14      	subs	r3, #20
 80080e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80080e4:	e0e1      	b.n	80082aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80080e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80080f0:	4293      	cmp	r3, r2
 80080f2:	bf28      	it	cs
 80080f4:	4613      	movcs	r3, r2
 80080f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80080f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80080fc:	2114      	movs	r1, #20
 80080fe:	200e      	movs	r0, #14
 8008100:	f001 f8ee 	bl	80092e0 <pbuf_alloc>
 8008104:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80d5 	beq.w	80082b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	895b      	ldrh	r3, [r3, #10]
 8008112:	2b13      	cmp	r3, #19
 8008114:	d806      	bhi.n	8008124 <ip4_frag+0xd0>
 8008116:	4b6c      	ldr	r3, [pc, #432]	; (80082c8 <ip4_frag+0x274>)
 8008118:	f44f 7249 	mov.w	r2, #804	; 0x324
 800811c:	496d      	ldr	r1, [pc, #436]	; (80082d4 <ip4_frag+0x280>)
 800811e:	486c      	ldr	r0, [pc, #432]	; (80082d0 <ip4_frag+0x27c>)
 8008120:	f007 fdf6 	bl	800fd10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2214      	movs	r2, #20
 800812a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800812c:	4618      	mov	r0, r3
 800812e:	f007 fdd9 	bl	800fce4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8008138:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800813a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800813e:	e064      	b.n	800820a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	895a      	ldrh	r2, [r3, #10]
 8008144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	895b      	ldrh	r3, [r3, #10]
 800814e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008150:	429a      	cmp	r2, r3
 8008152:	d906      	bls.n	8008162 <ip4_frag+0x10e>
 8008154:	4b5c      	ldr	r3, [pc, #368]	; (80082c8 <ip4_frag+0x274>)
 8008156:	f240 322d 	movw	r2, #813	; 0x32d
 800815a:	495f      	ldr	r1, [pc, #380]	; (80082d8 <ip4_frag+0x284>)
 800815c:	485c      	ldr	r0, [pc, #368]	; (80082d0 <ip4_frag+0x27c>)
 800815e:	f007 fdd7 	bl	800fd10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8008162:	8bfa      	ldrh	r2, [r7, #30]
 8008164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008168:	4293      	cmp	r3, r2
 800816a:	bf28      	it	cs
 800816c:	4613      	movcs	r3, r2
 800816e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8008172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <ip4_frag+0x132>
        poff = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]
        continue;
 8008184:	e041      	b.n	800820a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8008186:	f7ff ff0d 	bl	8007fa4 <ip_frag_alloc_pbuf_custom_ref>
 800818a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8008192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008194:	f001 fb86 	bl	80098a4 <pbuf_free>
        goto memerr;
 8008198:	e08f      	b.n	80082ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800819a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80081a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081a2:	4413      	add	r3, r2
 80081a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80081a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4603      	mov	r3, r0
 80081b2:	2241      	movs	r2, #65	; 0x41
 80081b4:	2000      	movs	r0, #0
 80081b6:	f001 f9bd 	bl	8009534 <pbuf_alloced_custom>
 80081ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80081c2:	69b8      	ldr	r0, [r7, #24]
 80081c4:	f7ff fef6 	bl	8007fb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80081c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ca:	f001 fb6b 	bl	80098a4 <pbuf_free>
        goto memerr;
 80081ce:	e074      	b.n	80082ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fc07 	bl	80099e4 <pbuf_ref>
      pcr->original = p;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	4a3f      	ldr	r2, [pc, #252]	; (80082dc <ip4_frag+0x288>)
 80081e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081e6:	f001 fc1f 	bl	8009a28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80081ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80081ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80081f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <ip4_frag+0x1b6>
        poff = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800820a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800820e:	2b00      	cmp	r3, #0
 8008210:	d196      	bne.n	8008140 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8008212:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008218:	4413      	add	r3, r2
 800821a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008220:	f1a3 0213 	sub.w	r2, r3, #19
 8008224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008228:	429a      	cmp	r2, r3
 800822a:	bfcc      	ite	gt
 800822c:	2301      	movgt	r3, #1
 800822e:	2300      	movle	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8008234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800823c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <ip4_frag+0x1f6>
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800824a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800824c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008250:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008254:	4618      	mov	r0, r3
 8008256:	f7fd fc57 	bl	8005b08 <lwip_htons>
 800825a:	4603      	mov	r3, r0
 800825c:	461a      	mov	r2, r3
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008264:	3314      	adds	r3, #20
 8008266:	b29b      	uxth	r3, r3
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd fc4d 	bl	8005b08 <lwip_htons>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2200      	movs	r2, #0
 800827a:	729a      	strb	r2, [r3, #10]
 800827c:	2200      	movs	r2, #0
 800827e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008288:	68b8      	ldr	r0, [r7, #8]
 800828a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800828c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800828e:	f001 fb09 	bl	80098a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800829e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80082a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80082a4:	4413      	add	r3, r2
 80082a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80082aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f47f af19 	bne.w	80080e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e002      	b.n	80082be <ip4_frag+0x26a>
      goto memerr;
 80082b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3748      	adds	r7, #72	; 0x48
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	080113ec 	.word	0x080113ec
 80082cc:	080115f4 	.word	0x080115f4
 80082d0:	08011460 	.word	0x08011460
 80082d4:	08011610 	.word	0x08011610
 80082d8:	08011630 	.word	0x08011630
 80082dc:	08007fed 	.word	0x08007fed

080082e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <ptr_to_mem+0x1c>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4413      	add	r3, r2
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	24008d20 	.word	0x24008d20

08008300 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <mem_to_ptr+0x1c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	1ad3      	subs	r3, r2, r3
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	24008d20 	.word	0x24008d20

08008320 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008328:	4b45      	ldr	r3, [pc, #276]	; (8008440 <plug_holes+0x120>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	429a      	cmp	r2, r3
 8008330:	d206      	bcs.n	8008340 <plug_holes+0x20>
 8008332:	4b44      	ldr	r3, [pc, #272]	; (8008444 <plug_holes+0x124>)
 8008334:	f240 12df 	movw	r2, #479	; 0x1df
 8008338:	4943      	ldr	r1, [pc, #268]	; (8008448 <plug_holes+0x128>)
 800833a:	4844      	ldr	r0, [pc, #272]	; (800844c <plug_holes+0x12c>)
 800833c:	f007 fce8 	bl	800fd10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008340:	4b43      	ldr	r3, [pc, #268]	; (8008450 <plug_holes+0x130>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d306      	bcc.n	8008358 <plug_holes+0x38>
 800834a:	4b3e      	ldr	r3, [pc, #248]	; (8008444 <plug_holes+0x124>)
 800834c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008350:	4940      	ldr	r1, [pc, #256]	; (8008454 <plug_holes+0x134>)
 8008352:	483e      	ldr	r0, [pc, #248]	; (800844c <plug_holes+0x12c>)
 8008354:	f007 fcdc 	bl	800fd10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7a1b      	ldrb	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <plug_holes+0x4e>
 8008360:	4b38      	ldr	r3, [pc, #224]	; (8008444 <plug_holes+0x124>)
 8008362:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008366:	493c      	ldr	r1, [pc, #240]	; (8008458 <plug_holes+0x138>)
 8008368:	4838      	ldr	r0, [pc, #224]	; (800844c <plug_holes+0x12c>)
 800836a:	f007 fcd1 	bl	800fd10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a3a      	ldr	r2, [pc, #232]	; (800845c <plug_holes+0x13c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d906      	bls.n	8008386 <plug_holes+0x66>
 8008378:	4b32      	ldr	r3, [pc, #200]	; (8008444 <plug_holes+0x124>)
 800837a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800837e:	4938      	ldr	r1, [pc, #224]	; (8008460 <plug_holes+0x140>)
 8008380:	4832      	ldr	r0, [pc, #200]	; (800844c <plug_holes+0x12c>)
 8008382:	f007 fcc5 	bl	800fd10 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff ffa8 	bl	80082e0 <ptr_to_mem>
 8008390:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	429a      	cmp	r2, r3
 8008398:	d024      	beq.n	80083e4 <plug_holes+0xc4>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	7a1b      	ldrb	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d120      	bne.n	80083e4 <plug_holes+0xc4>
 80083a2:	4b2b      	ldr	r3, [pc, #172]	; (8008450 <plug_holes+0x130>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d01b      	beq.n	80083e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <plug_holes+0x144>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d102      	bne.n	80083bc <plug_holes+0x9c>
      lfree = mem;
 80083b6:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <plug_holes+0x144>)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a24      	ldr	r2, [pc, #144]	; (800845c <plug_holes+0x13c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00a      	beq.n	80083e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff ff84 	bl	80082e0 <ptr_to_mem>
 80083d8:	4604      	mov	r4, r0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff ff90 	bl	8008300 <mem_to_ptr>
 80083e0:	4603      	mov	r3, r0
 80083e2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff ff79 	bl	80082e0 <ptr_to_mem>
 80083ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d01f      	beq.n	8008438 <plug_holes+0x118>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7a1b      	ldrb	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d11b      	bne.n	8008438 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008400:	4b18      	ldr	r3, [pc, #96]	; (8008464 <plug_holes+0x144>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	429a      	cmp	r2, r3
 8008408:	d102      	bne.n	8008410 <plug_holes+0xf0>
      lfree = pmem;
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <plug_holes+0x144>)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a0f      	ldr	r2, [pc, #60]	; (800845c <plug_holes+0x13c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00a      	beq.n	8008438 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff ff5a 	bl	80082e0 <ptr_to_mem>
 800842c:	4604      	mov	r4, r0
 800842e:	68b8      	ldr	r0, [r7, #8]
 8008430:	f7ff ff66 	bl	8008300 <mem_to_ptr>
 8008434:	4603      	mov	r3, r0
 8008436:	6063      	str	r3, [r4, #4]
    }
  }
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}
 8008440:	24008d20 	.word	0x24008d20
 8008444:	08011640 	.word	0x08011640
 8008448:	080116a0 	.word	0x080116a0
 800844c:	080116b8 	.word	0x080116b8
 8008450:	24008d24 	.word	0x24008d24
 8008454:	080116e0 	.word	0x080116e0
 8008458:	080116fc 	.word	0x080116fc
 800845c:	0001ffe8 	.word	0x0001ffe8
 8008460:	08011718 	.word	0x08011718
 8008464:	24008d28 	.word	0x24008d28

08008468 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <mem_init+0x58>)
 8008470:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <mem_init+0x5c>)
 8008472:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <mem_init+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a12      	ldr	r2, [pc, #72]	; (80084c8 <mem_init+0x60>)
 800847e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800848c:	480e      	ldr	r0, [pc, #56]	; (80084c8 <mem_init+0x60>)
 800848e:	f7ff ff27 	bl	80082e0 <ptr_to_mem>
 8008492:	4603      	mov	r3, r0
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <mem_init+0x64>)
 8008496:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008498:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <mem_init+0x64>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2201      	movs	r2, #1
 800849e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <mem_init+0x64>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <mem_init+0x60>)
 80084a6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80084a8:	4b08      	ldr	r3, [pc, #32]	; (80084cc <mem_init+0x64>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a06      	ldr	r2, [pc, #24]	; (80084c8 <mem_init+0x60>)
 80084ae:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80084b0:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <mem_init+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <mem_init+0x68>)
 80084b6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	24008d20 	.word	0x24008d20
 80084c4:	30020000 	.word	0x30020000
 80084c8:	0001ffe8 	.word	0x0001ffe8
 80084cc:	24008d24 	.word	0x24008d24
 80084d0:	24008d28 	.word	0x24008d28

080084d4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ff0f 	bl	8008300 <mem_to_ptr>
 80084e2:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fef9 	bl	80082e0 <ptr_to_mem>
 80084ee:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fef3 	bl	80082e0 <ptr_to_mem>
 80084fa:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a11      	ldr	r2, [pc, #68]	; (8008548 <mem_link_valid+0x74>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d818      	bhi.n	8008538 <mem_link_valid+0x64>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4a0f      	ldr	r2, [pc, #60]	; (8008548 <mem_link_valid+0x74>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d813      	bhi.n	8008538 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	429a      	cmp	r2, r3
 8008518:	d004      	beq.n	8008524 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	429a      	cmp	r2, r3
 8008522:	d109      	bne.n	8008538 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008524:	4b09      	ldr	r3, [pc, #36]	; (800854c <mem_link_valid+0x78>)
 8008526:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	429a      	cmp	r2, r3
 800852c:	d006      	beq.n	800853c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d001      	beq.n	800853c <mem_link_valid+0x68>
    return 0;
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <mem_link_valid+0x6a>
  }
  return 1;
 800853c:	2301      	movs	r3, #1
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	0001ffe8 	.word	0x0001ffe8
 800854c:	24008d24 	.word	0x24008d24

08008550 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d04c      	beq.n	80085f8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008568:	4b25      	ldr	r3, [pc, #148]	; (8008600 <mem_free+0xb0>)
 800856a:	f240 2273 	movw	r2, #627	; 0x273
 800856e:	4925      	ldr	r1, [pc, #148]	; (8008604 <mem_free+0xb4>)
 8008570:	4825      	ldr	r0, [pc, #148]	; (8008608 <mem_free+0xb8>)
 8008572:	f007 fbcd 	bl	800fd10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008576:	e040      	b.n	80085fa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3b0c      	subs	r3, #12
 800857c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800857e:	4b23      	ldr	r3, [pc, #140]	; (800860c <mem_free+0xbc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	429a      	cmp	r2, r3
 8008586:	d306      	bcc.n	8008596 <mem_free+0x46>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f103 020c 	add.w	r2, r3, #12
 800858e:	4b20      	ldr	r3, [pc, #128]	; (8008610 <mem_free+0xc0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d907      	bls.n	80085a6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <mem_free+0xb0>)
 8008598:	f240 227f 	movw	r2, #639	; 0x27f
 800859c:	491d      	ldr	r1, [pc, #116]	; (8008614 <mem_free+0xc4>)
 800859e:	481a      	ldr	r0, [pc, #104]	; (8008608 <mem_free+0xb8>)
 80085a0:	f007 fbb6 	bl	800fd10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80085a4:	e029      	b.n	80085fa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	7a1b      	ldrb	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <mem_free+0xb0>)
 80085b0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80085b4:	4918      	ldr	r1, [pc, #96]	; (8008618 <mem_free+0xc8>)
 80085b6:	4814      	ldr	r0, [pc, #80]	; (8008608 <mem_free+0xb8>)
 80085b8:	f007 fbaa 	bl	800fd10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80085bc:	e01d      	b.n	80085fa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff ff88 	bl	80084d4 <mem_link_valid>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80085ca:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <mem_free+0xb0>)
 80085cc:	f240 2295 	movw	r2, #661	; 0x295
 80085d0:	4912      	ldr	r1, [pc, #72]	; (800861c <mem_free+0xcc>)
 80085d2:	480d      	ldr	r0, [pc, #52]	; (8008608 <mem_free+0xb8>)
 80085d4:	f007 fb9c 	bl	800fd10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80085d8:	e00f      	b.n	80085fa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 80085e0:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <mem_free+0xd0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d202      	bcs.n	80085f0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80085ea:	4a0d      	ldr	r2, [pc, #52]	; (8008620 <mem_free+0xd0>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fe95 	bl	8008320 <plug_holes>
 80085f6:	e000      	b.n	80085fa <mem_free+0xaa>
    return;
 80085f8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	08011640 	.word	0x08011640
 8008604:	08011744 	.word	0x08011744
 8008608:	080116b8 	.word	0x080116b8
 800860c:	24008d20 	.word	0x24008d20
 8008610:	24008d24 	.word	0x24008d24
 8008614:	08011768 	.word	0x08011768
 8008618:	08011784 	.word	0x08011784
 800861c:	080117ac 	.word	0x080117ac
 8008620:	24008d28 	.word	0x24008d28

08008624 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	3303      	adds	r3, #3
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	2b0b      	cmp	r3, #11
 800863c:	d801      	bhi.n	8008642 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800863e:	230c      	movs	r3, #12
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	4a68      	ldr	r2, [pc, #416]	; (80087e8 <mem_trim+0x1c4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d803      	bhi.n	8008652 <mem_trim+0x2e>
 800864a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d201      	bcs.n	8008656 <mem_trim+0x32>
    return NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	e0c4      	b.n	80087e0 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008656:	4b65      	ldr	r3, [pc, #404]	; (80087ec <mem_trim+0x1c8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d304      	bcc.n	800866a <mem_trim+0x46>
 8008660:	4b63      	ldr	r3, [pc, #396]	; (80087f0 <mem_trim+0x1cc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	429a      	cmp	r2, r3
 8008668:	d306      	bcc.n	8008678 <mem_trim+0x54>
 800866a:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <mem_trim+0x1d0>)
 800866c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008670:	4961      	ldr	r1, [pc, #388]	; (80087f8 <mem_trim+0x1d4>)
 8008672:	4862      	ldr	r0, [pc, #392]	; (80087fc <mem_trim+0x1d8>)
 8008674:	f007 fb4c 	bl	800fd10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008678:	4b5c      	ldr	r3, [pc, #368]	; (80087ec <mem_trim+0x1c8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	429a      	cmp	r2, r3
 8008680:	d304      	bcc.n	800868c <mem_trim+0x68>
 8008682:	4b5b      	ldr	r3, [pc, #364]	; (80087f0 <mem_trim+0x1cc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d301      	bcc.n	8008690 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	e0a7      	b.n	80087e0 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3b0c      	subs	r3, #12
 8008694:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008696:	6a38      	ldr	r0, [r7, #32]
 8008698:	f7ff fe32 	bl	8008300 <mem_to_ptr>
 800869c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	3b0c      	subs	r3, #12
 80086a8:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d906      	bls.n	80086c0 <mem_trim+0x9c>
 80086b2:	4b50      	ldr	r3, [pc, #320]	; (80087f4 <mem_trim+0x1d0>)
 80086b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80086b8:	4951      	ldr	r1, [pc, #324]	; (8008800 <mem_trim+0x1dc>)
 80086ba:	4850      	ldr	r0, [pc, #320]	; (80087fc <mem_trim+0x1d8>)
 80086bc:	f007 fb28 	bl	800fd10 <iprintf>
  if (newsize > size) {
 80086c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d901      	bls.n	80086cc <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e089      	b.n	80087e0 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 80086cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d101      	bne.n	80086d8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	e083      	b.n	80087e0 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fdff 	bl	80082e0 <ptr_to_mem>
 80086e2:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	7a1b      	ldrb	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d13c      	bne.n	8008766 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a3d      	ldr	r2, [pc, #244]	; (80087e8 <mem_trim+0x1c4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d106      	bne.n	8008704 <mem_trim+0xe0>
 80086f6:	4b3f      	ldr	r3, [pc, #252]	; (80087f4 <mem_trim+0x1d0>)
 80086f8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80086fc:	4941      	ldr	r1, [pc, #260]	; (8008804 <mem_trim+0x1e0>)
 80086fe:	483f      	ldr	r0, [pc, #252]	; (80087fc <mem_trim+0x1d8>)
 8008700:	f007 fb06 	bl	800fd10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	4413      	add	r3, r2
 8008710:	330c      	adds	r3, #12
 8008712:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8008714:	4b3c      	ldr	r3, [pc, #240]	; (8008808 <mem_trim+0x1e4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	429a      	cmp	r2, r3
 800871c:	d105      	bne.n	800872a <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800871e:	6938      	ldr	r0, [r7, #16]
 8008720:	f7ff fdde 	bl	80082e0 <ptr_to_mem>
 8008724:	4603      	mov	r3, r0
 8008726:	4a38      	ldr	r2, [pc, #224]	; (8008808 <mem_trim+0x1e4>)
 8008728:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f7ff fdd8 	bl	80082e0 <ptr_to_mem>
 8008730:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2200      	movs	r2, #0
 8008736:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a26      	ldr	r2, [pc, #152]	; (80087e8 <mem_trim+0x1c4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d044      	beq.n	80087de <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fdc1 	bl	80082e0 <ptr_to_mem>
 800875e:	4602      	mov	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6053      	str	r3, [r2, #4]
 8008764:	e03b      	b.n	80087de <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	3318      	adds	r3, #24
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	d336      	bcc.n	80087de <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	4413      	add	r3, r2
 8008776:	330c      	adds	r3, #12
 8008778:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1a      	ldr	r2, [pc, #104]	; (80087e8 <mem_trim+0x1c4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d106      	bne.n	8008792 <mem_trim+0x16e>
 8008784:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <mem_trim+0x1d0>)
 8008786:	f240 3216 	movw	r2, #790	; 0x316
 800878a:	491e      	ldr	r1, [pc, #120]	; (8008804 <mem_trim+0x1e0>)
 800878c:	481b      	ldr	r0, [pc, #108]	; (80087fc <mem_trim+0x1d8>)
 800878e:	f007 fabf 	bl	800fd10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008792:	6938      	ldr	r0, [r7, #16]
 8008794:	f7ff fda4 	bl	80082e0 <ptr_to_mem>
 8008798:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <mem_trim+0x1e4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d202      	bcs.n	80087aa <mem_trim+0x186>
      lfree = mem2;
 80087a4:	4a18      	ldr	r2, [pc, #96]	; (8008808 <mem_trim+0x1e4>)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <mem_trim+0x1c4>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d007      	beq.n	80087de <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fd84 	bl	80082e0 <ptr_to_mem>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80087de:	687b      	ldr	r3, [r7, #4]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3728      	adds	r7, #40	; 0x28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	0001ffe8 	.word	0x0001ffe8
 80087ec:	24008d20 	.word	0x24008d20
 80087f0:	24008d24 	.word	0x24008d24
 80087f4:	08011640 	.word	0x08011640
 80087f8:	080117e0 	.word	0x080117e0
 80087fc:	080116b8 	.word	0x080116b8
 8008800:	080117f8 	.word	0x080117f8
 8008804:	08011818 	.word	0x08011818
 8008808:	24008d28 	.word	0x24008d28

0800880c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <mem_malloc+0x12>
    return NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	e0d0      	b.n	80089c0 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3303      	adds	r3, #3
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b0b      	cmp	r3, #11
 800882c:	d801      	bhi.n	8008832 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800882e:	230c      	movs	r3, #12
 8008830:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	4a64      	ldr	r2, [pc, #400]	; (80089c8 <mem_malloc+0x1bc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d803      	bhi.n	8008842 <mem_malloc+0x36>
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	429a      	cmp	r2, r3
 8008840:	d201      	bcs.n	8008846 <mem_malloc+0x3a>
    return NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	e0bc      	b.n	80089c0 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008846:	4b61      	ldr	r3, [pc, #388]	; (80089cc <mem_malloc+0x1c0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fd58 	bl	8008300 <mem_to_ptr>
 8008850:	61f8      	str	r0, [r7, #28]
 8008852:	e0ad      	b.n	80089b0 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008854:	69f8      	ldr	r0, [r7, #28]
 8008856:	f7ff fd43 	bl	80082e0 <ptr_to_mem>
 800885a:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	7a1b      	ldrb	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 809f 	bne.w	80089a4 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	429a      	cmp	r2, r3
 8008874:	f200 8096 	bhi.w	80089a4 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f1a3 020c 	sub.w	r2, r3, #12
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	3318      	adds	r3, #24
 8008888:	429a      	cmp	r2, r3
 800888a:	d331      	bcc.n	80088f0 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	4413      	add	r3, r2
 8008892:	330c      	adds	r3, #12
 8008894:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a4b      	ldr	r2, [pc, #300]	; (80089c8 <mem_malloc+0x1bc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d106      	bne.n	80088ac <mem_malloc+0xa0>
 800889e:	4b4c      	ldr	r3, [pc, #304]	; (80089d0 <mem_malloc+0x1c4>)
 80088a0:	f240 3287 	movw	r2, #903	; 0x387
 80088a4:	494b      	ldr	r1, [pc, #300]	; (80089d4 <mem_malloc+0x1c8>)
 80088a6:	484c      	ldr	r0, [pc, #304]	; (80089d8 <mem_malloc+0x1cc>)
 80088a8:	f007 fa32 	bl	800fd10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff fd17 	bl	80082e0 <ptr_to_mem>
 80088b2:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2201      	movs	r2, #1
 80088d2:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a3b      	ldr	r2, [pc, #236]	; (80089c8 <mem_malloc+0x1bc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00b      	beq.n	80088f6 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff fcfc 	bl	80082e0 <ptr_to_mem>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6053      	str	r3, [r2, #4]
 80088ee:	e002      	b.n	80088f6 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	2201      	movs	r2, #1
 80088f4:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80088f6:	4b35      	ldr	r3, [pc, #212]	; (80089cc <mem_malloc+0x1c0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d127      	bne.n	8008950 <mem_malloc+0x144>
          struct mem *cur = lfree;
 8008900:	4b32      	ldr	r3, [pc, #200]	; (80089cc <mem_malloc+0x1c0>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008906:	e005      	b.n	8008914 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fce7 	bl	80082e0 <ptr_to_mem>
 8008912:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	7a1b      	ldrb	r3, [r3, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <mem_malloc+0x11a>
 800891c:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <mem_malloc+0x1d0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	429a      	cmp	r2, r3
 8008924:	d1f0      	bne.n	8008908 <mem_malloc+0xfc>
          }
          lfree = cur;
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <mem_malloc+0x1c0>)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800892c:	4b27      	ldr	r3, [pc, #156]	; (80089cc <mem_malloc+0x1c0>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	4b2a      	ldr	r3, [pc, #168]	; (80089dc <mem_malloc+0x1d0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d00b      	beq.n	8008950 <mem_malloc+0x144>
 8008938:	4b24      	ldr	r3, [pc, #144]	; (80089cc <mem_malloc+0x1c0>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	7a1b      	ldrb	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d006      	beq.n	8008950 <mem_malloc+0x144>
 8008942:	4b23      	ldr	r3, [pc, #140]	; (80089d0 <mem_malloc+0x1c4>)
 8008944:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008948:	4925      	ldr	r1, [pc, #148]	; (80089e0 <mem_malloc+0x1d4>)
 800894a:	4823      	ldr	r0, [pc, #140]	; (80089d8 <mem_malloc+0x1cc>)
 800894c:	f007 f9e0 	bl	800fd10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	4413      	add	r3, r2
 8008956:	330c      	adds	r3, #12
 8008958:	4a20      	ldr	r2, [pc, #128]	; (80089dc <mem_malloc+0x1d0>)
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	4293      	cmp	r3, r2
 800895e:	d906      	bls.n	800896e <mem_malloc+0x162>
 8008960:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <mem_malloc+0x1c4>)
 8008962:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008966:	491f      	ldr	r1, [pc, #124]	; (80089e4 <mem_malloc+0x1d8>)
 8008968:	481b      	ldr	r0, [pc, #108]	; (80089d8 <mem_malloc+0x1cc>)
 800896a:	f007 f9d1 	bl	800fd10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <mem_malloc+0x17a>
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <mem_malloc+0x1c4>)
 800897a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800897e:	491a      	ldr	r1, [pc, #104]	; (80089e8 <mem_malloc+0x1dc>)
 8008980:	4815      	ldr	r0, [pc, #84]	; (80089d8 <mem_malloc+0x1cc>)
 8008982:	f007 f9c5 	bl	800fd10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d006      	beq.n	800899e <mem_malloc+0x192>
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <mem_malloc+0x1c4>)
 8008992:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008996:	4915      	ldr	r1, [pc, #84]	; (80089ec <mem_malloc+0x1e0>)
 8008998:	480f      	ldr	r0, [pc, #60]	; (80089d8 <mem_malloc+0x1cc>)
 800899a:	f007 f9b9 	bl	800fd10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	330c      	adds	r3, #12
 80089a2:	e00d      	b.n	80089c0 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 80089a4:	69f8      	ldr	r0, [r7, #28]
 80089a6:	f7ff fc9b 	bl	80082e0 <ptr_to_mem>
 80089aa:	4603      	mov	r3, r0
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <mem_malloc+0x1bc>)
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	f4ff af4b 	bcc.w	8008854 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3720      	adds	r7, #32
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	0001ffe8 	.word	0x0001ffe8
 80089cc:	24008d28 	.word	0x24008d28
 80089d0:	08011640 	.word	0x08011640
 80089d4:	08011818 	.word	0x08011818
 80089d8:	080116b8 	.word	0x080116b8
 80089dc:	24008d24 	.word	0x24008d24
 80089e0:	0801182c 	.word	0x0801182c
 80089e4:	08011848 	.word	0x08011848
 80089e8:	08011878 	.word	0x08011878
 80089ec:	080118a8 	.word	0x080118a8

080089f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	3303      	adds	r3, #3
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e011      	b.n	8008a36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	dbe7      	blt.n	8008a12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a56:	2300      	movs	r3, #0
 8008a58:	80fb      	strh	r3, [r7, #6]
 8008a5a:	e009      	b.n	8008a70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008a5c:	88fb      	ldrh	r3, [r7, #6]
 8008a5e:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <memp_init+0x30>)
 8008a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff ffc3 	bl	80089f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	80fb      	strh	r3, [r7, #6]
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d9f2      	bls.n	8008a5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	08013b50 	.word	0x08013b50

08008a84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d012      	beq.n	8008ac0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d006      	beq.n	8008abc <do_memp_malloc_pool+0x38>
 8008aae:	4b07      	ldr	r3, [pc, #28]	; (8008acc <do_memp_malloc_pool+0x48>)
 8008ab0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008ab4:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <do_memp_malloc_pool+0x4c>)
 8008ab6:	4807      	ldr	r0, [pc, #28]	; (8008ad4 <do_memp_malloc_pool+0x50>)
 8008ab8:	f007 f92a 	bl	800fd10 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	e000      	b.n	8008ac2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	080118cc 	.word	0x080118cc
 8008ad0:	0801192c 	.word	0x0801192c
 8008ad4:	08011950 	.word	0x08011950

08008ad8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <memp_malloc_pool+0x1c>
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <memp_malloc_pool+0x38>)
 8008ae8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008aec:	4909      	ldr	r1, [pc, #36]	; (8008b14 <memp_malloc_pool+0x3c>)
 8008aee:	480a      	ldr	r0, [pc, #40]	; (8008b18 <memp_malloc_pool+0x40>)
 8008af0:	f007 f90e 	bl	800fd10 <iprintf>
  if (desc == NULL) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <memp_malloc_pool+0x26>
    return NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e003      	b.n	8008b06 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffc0 	bl	8008a84 <do_memp_malloc_pool>
 8008b04:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	080118cc 	.word	0x080118cc
 8008b14:	08011978 	.word	0x08011978
 8008b18:	08011950 	.word	0x08011950

08008b1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d908      	bls.n	8008b3e <memp_malloc+0x22>
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <memp_malloc+0x3c>)
 8008b2e:	f240 1257 	movw	r2, #343	; 0x157
 8008b32:	490a      	ldr	r1, [pc, #40]	; (8008b5c <memp_malloc+0x40>)
 8008b34:	480a      	ldr	r0, [pc, #40]	; (8008b60 <memp_malloc+0x44>)
 8008b36:	f007 f8eb 	bl	800fd10 <iprintf>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e008      	b.n	8008b50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <memp_malloc+0x48>)
 8008b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff ff9c 	bl	8008a84 <do_memp_malloc_pool>
 8008b4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	080118cc 	.word	0x080118cc
 8008b5c:	0801198c 	.word	0x0801198c
 8008b60:	08011950 	.word	0x08011950
 8008b64:	08013b50 	.word	0x08013b50

08008b68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d006      	beq.n	8008b8a <do_memp_free_pool+0x22>
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <do_memp_free_pool+0x40>)
 8008b7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008b82:	490a      	ldr	r1, [pc, #40]	; (8008bac <do_memp_free_pool+0x44>)
 8008b84:	480a      	ldr	r0, [pc, #40]	; (8008bb0 <do_memp_free_pool+0x48>)
 8008b86:	f007 f8c3 	bl	800fd10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	080118cc 	.word	0x080118cc
 8008bac:	080119ac 	.word	0x080119ac
 8008bb0:	08011950 	.word	0x08011950

08008bb4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <memp_free_pool+0x1e>
 8008bc4:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <memp_free_pool+0x3c>)
 8008bc6:	f240 1295 	movw	r2, #405	; 0x195
 8008bca:	490a      	ldr	r1, [pc, #40]	; (8008bf4 <memp_free_pool+0x40>)
 8008bcc:	480a      	ldr	r0, [pc, #40]	; (8008bf8 <memp_free_pool+0x44>)
 8008bce:	f007 f89f 	bl	800fd10 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <memp_free_pool+0x34>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d004      	beq.n	8008be8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ffc1 	bl	8008b68 <do_memp_free_pool>
 8008be6:	e000      	b.n	8008bea <memp_free_pool+0x36>
    return;
 8008be8:	bf00      	nop
}
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	080118cc 	.word	0x080118cc
 8008bf4:	08011978 	.word	0x08011978
 8008bf8:	08011950 	.word	0x08011950

08008bfc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d907      	bls.n	8008c1e <memp_free+0x22>
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <memp_free+0x44>)
 8008c10:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008c14:	490b      	ldr	r1, [pc, #44]	; (8008c44 <memp_free+0x48>)
 8008c16:	480c      	ldr	r0, [pc, #48]	; (8008c48 <memp_free+0x4c>)
 8008c18:	f007 f87a 	bl	800fd10 <iprintf>
 8008c1c:	e00c      	b.n	8008c38 <memp_free+0x3c>

  if (mem == NULL) {
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <memp_free+0x50>)
 8008c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff ff9a 	bl	8008b68 <do_memp_free_pool>
 8008c34:	e000      	b.n	8008c38 <memp_free+0x3c>
    return;
 8008c36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	080118cc 	.word	0x080118cc
 8008c44:	080119cc 	.word	0x080119cc
 8008c48:	08011950 	.word	0x08011950
 8008c4c:	08013b50 	.word	0x08013b50

08008c50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d108      	bne.n	8008c86 <netif_add+0x26>
 8008c74:	4b57      	ldr	r3, [pc, #348]	; (8008dd4 <netif_add+0x174>)
 8008c76:	f240 1227 	movw	r2, #295	; 0x127
 8008c7a:	4957      	ldr	r1, [pc, #348]	; (8008dd8 <netif_add+0x178>)
 8008c7c:	4857      	ldr	r0, [pc, #348]	; (8008ddc <netif_add+0x17c>)
 8008c7e:	f007 f847 	bl	800fd10 <iprintf>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e0a2      	b.n	8008dcc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d108      	bne.n	8008c9e <netif_add+0x3e>
 8008c8c:	4b51      	ldr	r3, [pc, #324]	; (8008dd4 <netif_add+0x174>)
 8008c8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008c92:	4953      	ldr	r1, [pc, #332]	; (8008de0 <netif_add+0x180>)
 8008c94:	4851      	ldr	r0, [pc, #324]	; (8008ddc <netif_add+0x17c>)
 8008c96:	f007 f83b 	bl	800fd10 <iprintf>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e096      	b.n	8008dcc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008ca4:	4b4f      	ldr	r3, [pc, #316]	; (8008de4 <netif_add+0x184>)
 8008ca6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008cae:	4b4d      	ldr	r3, [pc, #308]	; (8008de4 <netif_add+0x184>)
 8008cb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008cb8:	4b4a      	ldr	r3, [pc, #296]	; (8008de4 <netif_add+0x184>)
 8008cba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4a45      	ldr	r2, [pc, #276]	; (8008de8 <netif_add+0x188>)
 8008cd2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008cee:	4b3f      	ldr	r3, [pc, #252]	; (8008dec <netif_add+0x18c>)
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cfc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 f913 	bl	8008f30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	4798      	blx	r3
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <netif_add+0xba>
    return NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e058      	b.n	8008dcc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d20:	2bff      	cmp	r3, #255	; 0xff
 8008d22:	d103      	bne.n	8008d2c <netif_add+0xcc>
        netif->num = 0;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d30:	4b2f      	ldr	r3, [pc, #188]	; (8008df0 <netif_add+0x190>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e02b      	b.n	8008d90 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d106      	bne.n	8008d4e <netif_add+0xee>
 8008d40:	4b24      	ldr	r3, [pc, #144]	; (8008dd4 <netif_add+0x174>)
 8008d42:	f240 128b 	movw	r2, #395	; 0x18b
 8008d46:	492b      	ldr	r1, [pc, #172]	; (8008df4 <netif_add+0x194>)
 8008d48:	4824      	ldr	r0, [pc, #144]	; (8008ddc <netif_add+0x17c>)
 8008d4a:	f006 ffe1 	bl	800fd10 <iprintf>
        num_netifs++;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2bff      	cmp	r3, #255	; 0xff
 8008d58:	dd06      	ble.n	8008d68 <netif_add+0x108>
 8008d5a:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <netif_add+0x174>)
 8008d5c:	f240 128d 	movw	r2, #397	; 0x18d
 8008d60:	4925      	ldr	r1, [pc, #148]	; (8008df8 <netif_add+0x198>)
 8008d62:	481e      	ldr	r0, [pc, #120]	; (8008ddc <netif_add+0x17c>)
 8008d64:	f006 ffd4 	bl	800fd10 <iprintf>
        if (netif2->num == netif->num) {
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d108      	bne.n	8008d8a <netif_add+0x12a>
          netif->num++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008d88:	e005      	b.n	8008d96 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1d0      	bne.n	8008d38 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1be      	bne.n	8008d1a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008da2:	2bfe      	cmp	r3, #254	; 0xfe
 8008da4:	d103      	bne.n	8008dae <netif_add+0x14e>
    netif_num = 0;
 8008da6:	4b11      	ldr	r3, [pc, #68]	; (8008dec <netif_add+0x18c>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e006      	b.n	8008dbc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008db4:	3301      	adds	r3, #1
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <netif_add+0x18c>)
 8008dba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <netif_add+0x190>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008dc4:	4a0a      	ldr	r2, [pc, #40]	; (8008df0 <netif_add+0x190>)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	080119e8 	.word	0x080119e8
 8008dd8:	08011aa8 	.word	0x08011aa8
 8008ddc:	08011a64 	.word	0x08011a64
 8008de0:	08011ac4 	.word	0x08011ac4
 8008de4:	08013ae0 	.word	0x08013ae0
 8008de8:	0800920b 	.word	0x0800920b
 8008dec:	2400bc20 	.word	0x2400bc20
 8008df0:	2400bc18 	.word	0x2400bc18
 8008df4:	08011ae8 	.word	0x08011ae8
 8008df8:	08011afc 	.word	0x08011afc

08008dfc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f002 fb31 	bl	800b470 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f006 ff03 	bl	800fc1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <netif_do_set_ipaddr+0x20>
 8008e32:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <netif_do_set_ipaddr+0x88>)
 8008e34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008e38:	491c      	ldr	r1, [pc, #112]	; (8008eac <netif_do_set_ipaddr+0x8c>)
 8008e3a:	481d      	ldr	r0, [pc, #116]	; (8008eb0 <netif_do_set_ipaddr+0x90>)
 8008e3c:	f006 ff68 	bl	800fd10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <netif_do_set_ipaddr+0x34>
 8008e46:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <netif_do_set_ipaddr+0x88>)
 8008e48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008e4c:	4917      	ldr	r1, [pc, #92]	; (8008eac <netif_do_set_ipaddr+0x8c>)
 8008e4e:	4818      	ldr	r0, [pc, #96]	; (8008eb0 <netif_do_set_ipaddr+0x90>)
 8008e50:	f006 ff5e 	bl	800fd10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d01c      	beq.n	8008e9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ffbf 	bl	8008dfc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <netif_do_set_ipaddr+0x6a>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	e000      	b.n	8008e8c <netif_do_set_ipaddr+0x6c>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008e90:	2101      	movs	r1, #1
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 f8d2 	bl	800903c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	080119e8 	.word	0x080119e8
 8008eac:	08011b2c 	.word	0x08011b2c
 8008eb0:	08011a64 	.word	0x08011a64

08008eb4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d00a      	beq.n	8008ee4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <netif_do_set_netmask+0x26>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	e000      	b.n	8008edc <netif_do_set_netmask+0x28>
 8008eda:	2300      	movs	r3, #0
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	330c      	adds	r3, #12
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d00a      	beq.n	8008f22 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <netif_do_set_gw+0x26>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	e000      	b.n	8008f1a <netif_do_set_gw+0x28>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e000      	b.n	8008f24 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008f4c:	4b1c      	ldr	r3, [pc, #112]	; (8008fc0 <netif_set_addr+0x90>)
 8008f4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008f56:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <netif_set_addr+0x90>)
 8008f58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008f60:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <netif_set_addr+0x90>)
 8008f62:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <netif_set_addr+0x42>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <netif_set_addr+0x46>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <netif_set_addr+0x48>
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008f80:	f107 0310 	add.w	r3, r7, #16
 8008f84:	461a      	mov	r2, r3
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff ff49 	bl	8008e20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff ff8e 	bl	8008eb4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff ffa8 	bl	8008ef2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008fa8:	f107 0310 	add.w	r3, r7, #16
 8008fac:	461a      	mov	r2, r3
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff ff35 	bl	8008e20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008fb6:	bf00      	nop
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	08013ae0 	.word	0x08013ae0

08008fc4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008fcc:	4a04      	ldr	r2, [pc, #16]	; (8008fe0 <netif_set_default+0x1c>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	2400bc1c 	.word	0x2400bc1c

08008fe4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d107      	bne.n	8009002 <netif_set_up+0x1e>
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <netif_set_up+0x4c>)
 8008ff4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008ff8:	490e      	ldr	r1, [pc, #56]	; (8009034 <netif_set_up+0x50>)
 8008ffa:	480f      	ldr	r0, [pc, #60]	; (8009038 <netif_set_up+0x54>)
 8008ffc:	f006 fe88 	bl	800fd10 <iprintf>
 8009000:	e013      	b.n	800902a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10c      	bne.n	800902a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009022:	2103      	movs	r1, #3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f809 	bl	800903c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	080119e8 	.word	0x080119e8
 8009034:	08011b9c 	.word	0x08011b9c
 8009038:	08011a64 	.word	0x08011a64

0800903c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <netif_issue_reports+0x20>
 800904e:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <netif_issue_reports+0x74>)
 8009050:	f240 326d 	movw	r2, #877	; 0x36d
 8009054:	4917      	ldr	r1, [pc, #92]	; (80090b4 <netif_issue_reports+0x78>)
 8009056:	4818      	ldr	r0, [pc, #96]	; (80090b8 <netif_issue_reports+0x7c>)
 8009058:	f006 fe5a 	bl	800fd10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01e      	beq.n	80090a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009070:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d017      	beq.n	80090a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d013      	beq.n	80090aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3304      	adds	r3, #4
 8009086:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00e      	beq.n	80090aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fd fc99 	bl	80069d8 <etharp_request>
 80090a6:	e000      	b.n	80090aa <netif_issue_reports+0x6e>
    return;
 80090a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	080119e8 	.word	0x080119e8
 80090b4:	08011bb8 	.word	0x08011bb8
 80090b8:	08011a64 	.word	0x08011a64

080090bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <netif_set_down+0x1e>
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <netif_set_down+0x58>)
 80090cc:	f240 329b 	movw	r2, #923	; 0x39b
 80090d0:	4911      	ldr	r1, [pc, #68]	; (8009118 <netif_set_down+0x5c>)
 80090d2:	4812      	ldr	r0, [pc, #72]	; (800911c <netif_set_down+0x60>)
 80090d4:	f006 fe1c 	bl	800fd10 <iprintf>
 80090d8:	e019      	b.n	800910e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d012      	beq.n	800910e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009100:	f003 0308 	and.w	r3, r3, #8
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fd f823 	bl	8006154 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	080119e8 	.word	0x080119e8
 8009118:	08011bdc 	.word	0x08011bdc
 800911c:	08011a64 	.word	0x08011a64

08009120 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <netif_set_link_up+0x1e>
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <netif_set_link_up+0x5c>)
 8009130:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009134:	4912      	ldr	r1, [pc, #72]	; (8009180 <netif_set_link_up+0x60>)
 8009136:	4813      	ldr	r0, [pc, #76]	; (8009184 <netif_set_link_up+0x64>)
 8009138:	f006 fdea 	bl	800fd10 <iprintf>
 800913c:	e01b      	b.n	8009176 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d114      	bne.n	8009176 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009152:	f043 0304 	orr.w	r3, r3, #4
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800915e:	2103      	movs	r1, #3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ff6b 	bl	800903c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <netif_set_link_up+0x56>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	080119e8 	.word	0x080119e8
 8009180:	08011bfc 	.word	0x08011bfc
 8009184:	08011a64 	.word	0x08011a64

08009188 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <netif_set_link_down+0x1e>
 8009196:	4b11      	ldr	r3, [pc, #68]	; (80091dc <netif_set_link_down+0x54>)
 8009198:	f240 4206 	movw	r2, #1030	; 0x406
 800919c:	4910      	ldr	r1, [pc, #64]	; (80091e0 <netif_set_link_down+0x58>)
 800919e:	4811      	ldr	r0, [pc, #68]	; (80091e4 <netif_set_link_down+0x5c>)
 80091a0:	f006 fdb6 	bl	800fd10 <iprintf>
 80091a4:	e017      	b.n	80091d6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d010      	beq.n	80091d6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091ba:	f023 0304 	bic.w	r3, r3, #4
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <netif_set_link_down+0x4e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	080119e8 	.word	0x080119e8
 80091e0:	08011c20 	.word	0x08011c20
 80091e4:	08011a64 	.word	0x08011a64

080091e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	61da      	str	r2, [r3, #28]
  }
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009216:	f06f 030b 	mvn.w	r3, #11
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d013      	beq.n	8009260 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <netif_get_by_index+0x48>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	e00c      	b.n	800925a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009246:	3301      	adds	r3, #1
 8009248:	b2db      	uxtb	r3, r3
 800924a:	79fa      	ldrb	r2, [r7, #7]
 800924c:	429a      	cmp	r2, r3
 800924e:	d101      	bne.n	8009254 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e006      	b.n	8009262 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1ef      	bne.n	8009240 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	2400bc18 	.word	0x2400bc18

08009274 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009278:	4b03      	ldr	r3, [pc, #12]	; (8009288 <pbuf_pool_is_empty+0x14>)
 800927a:	2201      	movs	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800927e:	bf00      	nop
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	2400bc21 	.word	0x2400bc21

0800928c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4611      	mov	r1, r2
 8009298:	461a      	mov	r2, r3
 800929a:	460b      	mov	r3, r1
 800929c:	80fb      	strh	r3, [r7, #6]
 800929e:	4613      	mov	r3, r2
 80092a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	88fa      	ldrh	r2, [r7, #6]
 80092b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	88ba      	ldrh	r2, [r7, #4]
 80092b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80092ba:	8b3b      	ldrh	r3, [r7, #24]
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	7f3a      	ldrb	r2, [r7, #28]
 80092c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	73da      	strb	r2, [r3, #15]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08c      	sub	sp, #48	; 0x30
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	4603      	mov	r3, r0
 80092e8:	71fb      	strb	r3, [r7, #7]
 80092ea:	460b      	mov	r3, r1
 80092ec:	80bb      	strh	r3, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80092f6:	887b      	ldrh	r3, [r7, #2]
 80092f8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80092fc:	d07f      	beq.n	80093fe <pbuf_alloc+0x11e>
 80092fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009302:	f300 80c7 	bgt.w	8009494 <pbuf_alloc+0x1b4>
 8009306:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800930a:	d010      	beq.n	800932e <pbuf_alloc+0x4e>
 800930c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009310:	f300 80c0 	bgt.w	8009494 <pbuf_alloc+0x1b4>
 8009314:	2b01      	cmp	r3, #1
 8009316:	d002      	beq.n	800931e <pbuf_alloc+0x3e>
 8009318:	2b41      	cmp	r3, #65	; 0x41
 800931a:	f040 80bb 	bne.w	8009494 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800931e:	887a      	ldrh	r2, [r7, #2]
 8009320:	88bb      	ldrh	r3, [r7, #4]
 8009322:	4619      	mov	r1, r3
 8009324:	2000      	movs	r0, #0
 8009326:	f000 f8d1 	bl	80094cc <pbuf_alloc_reference>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800932c:	e0bc      	b.n	80094a8 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009336:	88bb      	ldrh	r3, [r7, #4]
 8009338:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800933a:	2008      	movs	r0, #8
 800933c:	f7ff fbee 	bl	8008b1c <memp_malloc>
 8009340:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d109      	bne.n	800935c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009348:	f7ff ff94 	bl	8009274 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009354:	f000 faa6 	bl	80098a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	e0a6      	b.n	80094aa <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800935c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800935e:	3303      	adds	r3, #3
 8009360:	b29b      	uxth	r3, r3
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	b29b      	uxth	r3, r3
 8009368:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800936c:	b29b      	uxth	r3, r3
 800936e:	8b7a      	ldrh	r2, [r7, #26]
 8009370:	4293      	cmp	r3, r2
 8009372:	bf28      	it	cs
 8009374:	4613      	movcs	r3, r2
 8009376:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800937a:	3310      	adds	r3, #16
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4413      	add	r3, r2
 8009380:	3303      	adds	r3, #3
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	4618      	mov	r0, r3
 8009388:	89f9      	ldrh	r1, [r7, #14]
 800938a:	8b7a      	ldrh	r2, [r7, #26]
 800938c:	2300      	movs	r3, #0
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	887b      	ldrh	r3, [r7, #2]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	460b      	mov	r3, r1
 8009396:	4601      	mov	r1, r0
 8009398:	6938      	ldr	r0, [r7, #16]
 800939a:	f7ff ff77 	bl	800928c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <pbuf_alloc+0xd8>
 80093aa:	4b42      	ldr	r3, [pc, #264]	; (80094b4 <pbuf_alloc+0x1d4>)
 80093ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093b0:	4941      	ldr	r1, [pc, #260]	; (80094b8 <pbuf_alloc+0x1d8>)
 80093b2:	4842      	ldr	r0, [pc, #264]	; (80094bc <pbuf_alloc+0x1dc>)
 80093b4:	f006 fcac 	bl	800fd10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80093b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093ba:	3303      	adds	r3, #3
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80093c4:	d106      	bne.n	80093d4 <pbuf_alloc+0xf4>
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <pbuf_alloc+0x1d4>)
 80093c8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80093cc:	493c      	ldr	r1, [pc, #240]	; (80094c0 <pbuf_alloc+0x1e0>)
 80093ce:	483b      	ldr	r0, [pc, #236]	; (80094bc <pbuf_alloc+0x1dc>)
 80093d0:	f006 fc9e 	bl	800fd10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
 80093de:	e002      	b.n	80093e6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80093ea:	8b7a      	ldrh	r2, [r7, #26]
 80093ec:	89fb      	ldrh	r3, [r7, #14]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80093f6:	8b7b      	ldrh	r3, [r7, #26]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d19e      	bne.n	800933a <pbuf_alloc+0x5a>
      break;
 80093fc:	e054      	b.n	80094a8 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80093fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009400:	3303      	adds	r3, #3
 8009402:	b29b      	uxth	r3, r3
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	b29a      	uxth	r2, r3
 800940a:	88bb      	ldrh	r3, [r7, #4]
 800940c:	3303      	adds	r3, #3
 800940e:	b29b      	uxth	r3, r3
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	b29b      	uxth	r3, r3
 8009416:	4413      	add	r3, r2
 8009418:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800941a:	8b3b      	ldrh	r3, [r7, #24]
 800941c:	3310      	adds	r3, #16
 800941e:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009420:	8b3a      	ldrh	r2, [r7, #24]
 8009422:	88bb      	ldrh	r3, [r7, #4]
 8009424:	3303      	adds	r3, #3
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	429a      	cmp	r2, r3
 800942c:	d306      	bcc.n	800943c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800942e:	88bb      	ldrh	r3, [r7, #4]
 8009430:	3303      	adds	r3, #3
 8009432:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	429a      	cmp	r2, r3
 800943a:	d201      	bcs.n	8009440 <pbuf_alloc+0x160>
        return NULL;
 800943c:	2300      	movs	r3, #0
 800943e:	e034      	b.n	80094aa <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009440:	6978      	ldr	r0, [r7, #20]
 8009442:	f7ff f9e3 	bl	800880c <mem_malloc>
 8009446:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <pbuf_alloc+0x172>
        return NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	e02b      	b.n	80094aa <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009454:	3310      	adds	r3, #16
 8009456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009458:	4413      	add	r3, r2
 800945a:	3303      	adds	r3, #3
 800945c:	f023 0303 	bic.w	r3, r3, #3
 8009460:	4618      	mov	r0, r3
 8009462:	88b9      	ldrh	r1, [r7, #4]
 8009464:	88ba      	ldrh	r2, [r7, #4]
 8009466:	2300      	movs	r3, #0
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	887b      	ldrh	r3, [r7, #2]
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	460b      	mov	r3, r1
 8009470:	4601      	mov	r1, r0
 8009472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009474:	f7ff ff0a 	bl	800928c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d010      	beq.n	80094a6 <pbuf_alloc+0x1c6>
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <pbuf_alloc+0x1d4>)
 8009486:	f44f 7291 	mov.w	r2, #290	; 0x122
 800948a:	490e      	ldr	r1, [pc, #56]	; (80094c4 <pbuf_alloc+0x1e4>)
 800948c:	480b      	ldr	r0, [pc, #44]	; (80094bc <pbuf_alloc+0x1dc>)
 800948e:	f006 fc3f 	bl	800fd10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009492:	e008      	b.n	80094a6 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <pbuf_alloc+0x1d4>)
 8009496:	f240 1227 	movw	r2, #295	; 0x127
 800949a:	490b      	ldr	r1, [pc, #44]	; (80094c8 <pbuf_alloc+0x1e8>)
 800949c:	4807      	ldr	r0, [pc, #28]	; (80094bc <pbuf_alloc+0x1dc>)
 800949e:	f006 fc37 	bl	800fd10 <iprintf>
      return NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e001      	b.n	80094aa <pbuf_alloc+0x1ca>
      break;
 80094a6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3728      	adds	r7, #40	; 0x28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	08011c44 	.word	0x08011c44
 80094b8:	08011ca4 	.word	0x08011ca4
 80094bc:	08011cd4 	.word	0x08011cd4
 80094c0:	08011cfc 	.word	0x08011cfc
 80094c4:	08011d30 	.word	0x08011d30
 80094c8:	08011d5c 	.word	0x08011d5c

080094cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	807b      	strh	r3, [r7, #2]
 80094d8:	4613      	mov	r3, r2
 80094da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80094dc:	883b      	ldrh	r3, [r7, #0]
 80094de:	2b41      	cmp	r3, #65	; 0x41
 80094e0:	d009      	beq.n	80094f6 <pbuf_alloc_reference+0x2a>
 80094e2:	883b      	ldrh	r3, [r7, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d006      	beq.n	80094f6 <pbuf_alloc_reference+0x2a>
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <pbuf_alloc_reference+0x5c>)
 80094ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80094ee:	490f      	ldr	r1, [pc, #60]	; (800952c <pbuf_alloc_reference+0x60>)
 80094f0:	480f      	ldr	r0, [pc, #60]	; (8009530 <pbuf_alloc_reference+0x64>)
 80094f2:	f006 fc0d 	bl	800fd10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80094f6:	2007      	movs	r0, #7
 80094f8:	f7ff fb10 	bl	8008b1c <memp_malloc>
 80094fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009504:	2300      	movs	r3, #0
 8009506:	e00b      	b.n	8009520 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009508:	8879      	ldrh	r1, [r7, #2]
 800950a:	887a      	ldrh	r2, [r7, #2]
 800950c:	2300      	movs	r3, #0
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	883b      	ldrh	r3, [r7, #0]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	460b      	mov	r3, r1
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff feb7 	bl	800928c <pbuf_init_alloced_pbuf>
  return p;
 800951e:	68fb      	ldr	r3, [r7, #12]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	08011c44 	.word	0x08011c44
 800952c:	08011d78 	.word	0x08011d78
 8009530:	08011cd4 	.word	0x08011cd4

08009534 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	607b      	str	r3, [r7, #4]
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
 8009540:	460b      	mov	r3, r1
 8009542:	81bb      	strh	r3, [r7, #12]
 8009544:	4613      	mov	r3, r2
 8009546:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800954c:	8a7b      	ldrh	r3, [r7, #18]
 800954e:	3303      	adds	r3, #3
 8009550:	f023 0203 	bic.w	r2, r3, #3
 8009554:	89bb      	ldrh	r3, [r7, #12]
 8009556:	441a      	add	r2, r3
 8009558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800955a:	429a      	cmp	r2, r3
 800955c:	d901      	bls.n	8009562 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	e018      	b.n	8009594 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009568:	8a7b      	ldrh	r3, [r7, #18]
 800956a:	3303      	adds	r3, #3
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	6a3a      	ldr	r2, [r7, #32]
 8009572:	4413      	add	r3, r2
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e001      	b.n	800957c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	89b9      	ldrh	r1, [r7, #12]
 8009580:	89ba      	ldrh	r2, [r7, #12]
 8009582:	2302      	movs	r3, #2
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	897b      	ldrh	r3, [r7, #10]
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	460b      	mov	r3, r1
 800958c:	6979      	ldr	r1, [r7, #20]
 800958e:	f7ff fe7d 	bl	800928c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009592:	687b      	ldr	r3, [r7, #4]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <pbuf_realloc+0x20>
 80095ae:	4b39      	ldr	r3, [pc, #228]	; (8009694 <pbuf_realloc+0xf8>)
 80095b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80095b4:	4938      	ldr	r1, [pc, #224]	; (8009698 <pbuf_realloc+0xfc>)
 80095b6:	4839      	ldr	r0, [pc, #228]	; (800969c <pbuf_realloc+0x100>)
 80095b8:	f006 fbaa 	bl	800fd10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	891b      	ldrh	r3, [r3, #8]
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d261      	bcs.n	800968a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	891a      	ldrh	r2, [r3, #8]
 80095ca:	887b      	ldrh	r3, [r7, #2]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80095d0:	887b      	ldrh	r3, [r7, #2]
 80095d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80095d8:	e018      	b.n	800960c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	895b      	ldrh	r3, [r3, #10]
 80095de:	897a      	ldrh	r2, [r7, #10]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	891a      	ldrh	r2, [r3, #8]
 80095e8:	893b      	ldrh	r3, [r7, #8]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <pbuf_realloc+0x70>
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <pbuf_realloc+0xf8>)
 8009600:	f240 12af 	movw	r2, #431	; 0x1af
 8009604:	4926      	ldr	r1, [pc, #152]	; (80096a0 <pbuf_realloc+0x104>)
 8009606:	4825      	ldr	r0, [pc, #148]	; (800969c <pbuf_realloc+0x100>)
 8009608:	f006 fb82 	bl	800fd10 <iprintf>
  while (rem_len > q->len) {
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	895b      	ldrh	r3, [r3, #10]
 8009610:	897a      	ldrh	r2, [r7, #10]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8e1      	bhi.n	80095da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	7b1b      	ldrb	r3, [r3, #12]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	2b00      	cmp	r3, #0
 8009620:	d11f      	bne.n	8009662 <pbuf_realloc+0xc6>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	895b      	ldrh	r3, [r3, #10]
 8009626:	897a      	ldrh	r2, [r7, #10]
 8009628:	429a      	cmp	r2, r3
 800962a:	d01a      	beq.n	8009662 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	7b5b      	ldrb	r3, [r3, #13]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d114      	bne.n	8009662 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	897b      	ldrh	r3, [r7, #10]
 8009642:	4413      	add	r3, r2
 8009644:	4619      	mov	r1, r3
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7fe ffec 	bl	8008624 <mem_trim>
 800964c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <pbuf_realloc+0xc6>
 8009654:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <pbuf_realloc+0xf8>)
 8009656:	f240 12bd 	movw	r2, #445	; 0x1bd
 800965a:	4912      	ldr	r1, [pc, #72]	; (80096a4 <pbuf_realloc+0x108>)
 800965c:	480f      	ldr	r0, [pc, #60]	; (800969c <pbuf_realloc+0x100>)
 800965e:	f006 fb57 	bl	800fd10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	897a      	ldrh	r2, [r7, #10]
 8009666:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	895a      	ldrh	r2, [r3, #10]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f911 	bl	80098a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e000      	b.n	800968c <pbuf_realloc+0xf0>
    return;
 800968a:	bf00      	nop

}
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	08011c44 	.word	0x08011c44
 8009698:	08011d8c 	.word	0x08011d8c
 800969c:	08011cd4 	.word	0x08011cd4
 80096a0:	08011da4 	.word	0x08011da4
 80096a4:	08011dbc 	.word	0x08011dbc

080096a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <pbuf_add_header_impl+0x22>
 80096bc:	4b2b      	ldr	r3, [pc, #172]	; (800976c <pbuf_add_header_impl+0xc4>)
 80096be:	f240 12df 	movw	r2, #479	; 0x1df
 80096c2:	492b      	ldr	r1, [pc, #172]	; (8009770 <pbuf_add_header_impl+0xc8>)
 80096c4:	482b      	ldr	r0, [pc, #172]	; (8009774 <pbuf_add_header_impl+0xcc>)
 80096c6:	f006 fb23 	bl	800fd10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <pbuf_add_header_impl+0x30>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d6:	d301      	bcc.n	80096dc <pbuf_add_header_impl+0x34>
    return 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	e043      	b.n	8009764 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	e03e      	b.n	8009764 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	891a      	ldrh	r2, [r3, #8]
 80096ee:	8a7b      	ldrh	r3, [r7, #18]
 80096f0:	4413      	add	r3, r2
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	8a7a      	ldrh	r2, [r7, #18]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d901      	bls.n	80096fe <pbuf_add_header_impl+0x56>
    return 1;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e032      	b.n	8009764 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	7b1b      	ldrb	r3, [r3, #12]
 8009702:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009704:	8a3b      	ldrh	r3, [r7, #16]
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00c      	beq.n	8009728 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	425b      	negs	r3, r3
 8009716:	4413      	add	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3310      	adds	r3, #16
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	429a      	cmp	r2, r3
 8009722:	d20d      	bcs.n	8009740 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009724:	2301      	movs	r3, #1
 8009726:	e01d      	b.n	8009764 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d006      	beq.n	800973c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	425b      	negs	r3, r3
 8009736:	4413      	add	r3, r2
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	e001      	b.n	8009740 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800973c:	2301      	movs	r3, #1
 800973e:	e011      	b.n	8009764 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	895a      	ldrh	r2, [r3, #10]
 800974a:	8a7b      	ldrh	r3, [r7, #18]
 800974c:	4413      	add	r3, r2
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	891a      	ldrh	r2, [r3, #8]
 8009758:	8a7b      	ldrh	r3, [r7, #18]
 800975a:	4413      	add	r3, r2
 800975c:	b29a      	uxth	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	811a      	strh	r2, [r3, #8]


  return 0;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	08011c44 	.word	0x08011c44
 8009770:	08011dd8 	.word	0x08011dd8
 8009774:	08011cd4 	.word	0x08011cd4

08009778 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff ff8e 	bl	80096a8 <pbuf_add_header_impl>
 800978c:	4603      	mov	r3, r0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <pbuf_remove_header+0x1e>
 80097a8:	4b20      	ldr	r3, [pc, #128]	; (800982c <pbuf_remove_header+0x94>)
 80097aa:	f240 224b 	movw	r2, #587	; 0x24b
 80097ae:	4920      	ldr	r1, [pc, #128]	; (8009830 <pbuf_remove_header+0x98>)
 80097b0:	4820      	ldr	r0, [pc, #128]	; (8009834 <pbuf_remove_header+0x9c>)
 80097b2:	f006 faad 	bl	800fd10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <pbuf_remove_header+0x2c>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c2:	d301      	bcc.n	80097c8 <pbuf_remove_header+0x30>
    return 1;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e02c      	b.n	8009822 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <pbuf_remove_header+0x3a>
    return 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e027      	b.n	8009822 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	895b      	ldrh	r3, [r3, #10]
 80097da:	89fa      	ldrh	r2, [r7, #14]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d908      	bls.n	80097f2 <pbuf_remove_header+0x5a>
 80097e0:	4b12      	ldr	r3, [pc, #72]	; (800982c <pbuf_remove_header+0x94>)
 80097e2:	f240 2255 	movw	r2, #597	; 0x255
 80097e6:	4914      	ldr	r1, [pc, #80]	; (8009838 <pbuf_remove_header+0xa0>)
 80097e8:	4812      	ldr	r0, [pc, #72]	; (8009834 <pbuf_remove_header+0x9c>)
 80097ea:	f006 fa91 	bl	800fd10 <iprintf>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e017      	b.n	8009822 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	441a      	add	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	895a      	ldrh	r2, [r3, #10]
 8009808:	89fb      	ldrh	r3, [r7, #14]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	b29a      	uxth	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	891a      	ldrh	r2, [r3, #8]
 8009816:	89fb      	ldrh	r3, [r7, #14]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	b29a      	uxth	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	08011c44 	.word	0x08011c44
 8009830:	08011dd8 	.word	0x08011dd8
 8009834:	08011cd4 	.word	0x08011cd4
 8009838:	08011de4 	.word	0x08011de4

0800983c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	807b      	strh	r3, [r7, #2]
 8009848:	4613      	mov	r3, r2
 800984a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800984c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da08      	bge.n	8009866 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009858:	425b      	negs	r3, r3
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff ff9b 	bl	8009798 <pbuf_remove_header>
 8009862:	4603      	mov	r3, r0
 8009864:	e007      	b.n	8009876 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800986a:	787a      	ldrb	r2, [r7, #1]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff ff1a 	bl	80096a8 <pbuf_add_header_impl>
 8009874:	4603      	mov	r3, r0
  }
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800988a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800988e:	2201      	movs	r2, #1
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ffd2 	bl	800983c <pbuf_header_impl>
 8009898:	4603      	mov	r3, r0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10b      	bne.n	80098ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d106      	bne.n	80098c6 <pbuf_free+0x22>
 80098b8:	4b38      	ldr	r3, [pc, #224]	; (800999c <pbuf_free+0xf8>)
 80098ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80098be:	4938      	ldr	r1, [pc, #224]	; (80099a0 <pbuf_free+0xfc>)
 80098c0:	4838      	ldr	r0, [pc, #224]	; (80099a4 <pbuf_free+0x100>)
 80098c2:	f006 fa25 	bl	800fd10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e063      	b.n	8009992 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80098ce:	e05c      	b.n	800998a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	7b9b      	ldrb	r3, [r3, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <pbuf_free+0x42>
 80098d8:	4b30      	ldr	r3, [pc, #192]	; (800999c <pbuf_free+0xf8>)
 80098da:	f240 22f1 	movw	r2, #753	; 0x2f1
 80098de:	4932      	ldr	r1, [pc, #200]	; (80099a8 <pbuf_free+0x104>)
 80098e0:	4830      	ldr	r0, [pc, #192]	; (80099a4 <pbuf_free+0x100>)
 80098e2:	f006 fa15 	bl	800fd10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7b9b      	ldrb	r3, [r3, #14]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	739a      	strb	r2, [r3, #14]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	7b9b      	ldrb	r3, [r3, #14]
 80098f6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80098f8:	7dbb      	ldrb	r3, [r7, #22]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d143      	bne.n	8009986 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7b1b      	ldrb	r3, [r3, #12]
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7b5b      	ldrb	r3, [r3, #13]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d011      	beq.n	800993e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <pbuf_free+0x90>
 8009926:	4b1d      	ldr	r3, [pc, #116]	; (800999c <pbuf_free+0xf8>)
 8009928:	f240 22ff 	movw	r2, #767	; 0x2ff
 800992c:	491f      	ldr	r1, [pc, #124]	; (80099ac <pbuf_free+0x108>)
 800992e:	481d      	ldr	r0, [pc, #116]	; (80099a4 <pbuf_free+0x100>)
 8009930:	f006 f9ee 	bl	800fd10 <iprintf>
        pc->custom_free_function(p);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	4798      	blx	r3
 800993c:	e01d      	b.n	800997a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d104      	bne.n	800994e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	2008      	movs	r0, #8
 8009948:	f7ff f958 	bl	8008bfc <memp_free>
 800994c:	e015      	b.n	800997a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d104      	bne.n	800995e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	2007      	movs	r0, #7
 8009958:	f7ff f950 	bl	8008bfc <memp_free>
 800995c:	e00d      	b.n	800997a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <pbuf_free+0xc8>
          mem_free(p);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fe fdf3 	bl	8008550 <mem_free>
 800996a:	e006      	b.n	800997a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <pbuf_free+0xf8>)
 800996e:	f240 320f 	movw	r2, #783	; 0x30f
 8009972:	490f      	ldr	r1, [pc, #60]	; (80099b0 <pbuf_free+0x10c>)
 8009974:	480b      	ldr	r0, [pc, #44]	; (80099a4 <pbuf_free+0x100>)
 8009976:	f006 f9cb 	bl	800fd10 <iprintf>
        }
      }
      count++;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	3301      	adds	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	e001      	b.n	800998a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d19f      	bne.n	80098d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	08011c44 	.word	0x08011c44
 80099a0:	08011dd8 	.word	0x08011dd8
 80099a4:	08011cd4 	.word	0x08011cd4
 80099a8:	08011e04 	.word	0x08011e04
 80099ac:	08011e1c 	.word	0x08011e1c
 80099b0:	08011e40 	.word	0x08011e40

080099b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80099c0:	e005      	b.n	80099ce <pbuf_clen+0x1a>
    ++len;
 80099c2:	89fb      	ldrh	r3, [r7, #14]
 80099c4:	3301      	adds	r3, #1
 80099c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f6      	bne.n	80099c2 <pbuf_clen+0xe>
  }
  return len;
 80099d4:	89fb      	ldrh	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
	...

080099e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	7b9b      	ldrb	r3, [r3, #14]
 80099f6:	3301      	adds	r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7b9b      	ldrb	r3, [r3, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d106      	bne.n	8009a14 <pbuf_ref+0x30>
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <pbuf_ref+0x38>)
 8009a08:	f240 3242 	movw	r2, #834	; 0x342
 8009a0c:	4904      	ldr	r1, [pc, #16]	; (8009a20 <pbuf_ref+0x3c>)
 8009a0e:	4805      	ldr	r0, [pc, #20]	; (8009a24 <pbuf_ref+0x40>)
 8009a10:	f006 f97e 	bl	800fd10 <iprintf>
  }
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	08011c44 	.word	0x08011c44
 8009a20:	08011e54 	.word	0x08011e54
 8009a24:	08011cd4 	.word	0x08011cd4

08009a28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <pbuf_cat+0x16>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d107      	bne.n	8009a4e <pbuf_cat+0x26>
 8009a3e:	4b20      	ldr	r3, [pc, #128]	; (8009ac0 <pbuf_cat+0x98>)
 8009a40:	f240 3259 	movw	r2, #857	; 0x359
 8009a44:	491f      	ldr	r1, [pc, #124]	; (8009ac4 <pbuf_cat+0x9c>)
 8009a46:	4820      	ldr	r0, [pc, #128]	; (8009ac8 <pbuf_cat+0xa0>)
 8009a48:	f006 f962 	bl	800fd10 <iprintf>
 8009a4c:	e034      	b.n	8009ab8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	e00a      	b.n	8009a6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	891a      	ldrh	r2, [r3, #8]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	891b      	ldrh	r3, [r3, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f0      	bne.n	8009a54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	891a      	ldrh	r2, [r3, #8]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	895b      	ldrh	r3, [r3, #10]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d006      	beq.n	8009a8c <pbuf_cat+0x64>
 8009a7e:	4b10      	ldr	r3, [pc, #64]	; (8009ac0 <pbuf_cat+0x98>)
 8009a80:	f240 3262 	movw	r2, #866	; 0x362
 8009a84:	4911      	ldr	r1, [pc, #68]	; (8009acc <pbuf_cat+0xa4>)
 8009a86:	4810      	ldr	r0, [pc, #64]	; (8009ac8 <pbuf_cat+0xa0>)
 8009a88:	f006 f942 	bl	800fd10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <pbuf_cat+0x7a>
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <pbuf_cat+0x98>)
 8009a96:	f240 3263 	movw	r2, #867	; 0x363
 8009a9a:	490d      	ldr	r1, [pc, #52]	; (8009ad0 <pbuf_cat+0xa8>)
 8009a9c:	480a      	ldr	r0, [pc, #40]	; (8009ac8 <pbuf_cat+0xa0>)
 8009a9e:	f006 f937 	bl	800fd10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	891a      	ldrh	r2, [r3, #8]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	891b      	ldrh	r3, [r3, #8]
 8009aaa:	4413      	add	r3, r2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	08011c44 	.word	0x08011c44
 8009ac4:	08011e68 	.word	0x08011e68
 8009ac8:	08011cd4 	.word	0x08011cd4
 8009acc:	08011ea0 	.word	0x08011ea0
 8009ad0:	08011ed0 	.word	0x08011ed0

08009ad4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff ffa1 	bl	8009a28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009ae6:	6838      	ldr	r0, [r7, #0]
 8009ae8:	f7ff ff7c 	bl	80099e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	2300      	movs	r3, #0
 8009b04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <pbuf_copy+0x2a>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <pbuf_copy+0x2a>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	891a      	ldrh	r2, [r3, #8]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	891b      	ldrh	r3, [r3, #8]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d209      	bcs.n	8009b32 <pbuf_copy+0x3e>
 8009b1e:	4b57      	ldr	r3, [pc, #348]	; (8009c7c <pbuf_copy+0x188>)
 8009b20:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009b24:	4956      	ldr	r1, [pc, #344]	; (8009c80 <pbuf_copy+0x18c>)
 8009b26:	4857      	ldr	r0, [pc, #348]	; (8009c84 <pbuf_copy+0x190>)
 8009b28:	f006 f8f2 	bl	800fd10 <iprintf>
 8009b2c:	f06f 030f 	mvn.w	r3, #15
 8009b30:	e09f      	b.n	8009c72 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	895b      	ldrh	r3, [r3, #10]
 8009b36:	461a      	mov	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	1ad2      	subs	r2, r2, r3
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	895b      	ldrh	r3, [r3, #10]
 8009b40:	4619      	mov	r1, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1acb      	subs	r3, r1, r3
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d306      	bcc.n	8009b58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	895b      	ldrh	r3, [r3, #10]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	e005      	b.n	8009b64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	895b      	ldrh	r3, [r3, #10]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	18d0      	adds	r0, r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4619      	mov	r1, r3
 8009b78:	f006 f8b4 	bl	800fce4 <memcpy>
    offset_to += len;
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	895b      	ldrh	r3, [r3, #10]
 8009b90:	461a      	mov	r2, r3
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d906      	bls.n	8009ba6 <pbuf_copy+0xb2>
 8009b98:	4b38      	ldr	r3, [pc, #224]	; (8009c7c <pbuf_copy+0x188>)
 8009b9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009b9e:	493a      	ldr	r1, [pc, #232]	; (8009c88 <pbuf_copy+0x194>)
 8009ba0:	4838      	ldr	r0, [pc, #224]	; (8009c84 <pbuf_copy+0x190>)
 8009ba2:	f006 f8b5 	bl	800fd10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	895b      	ldrh	r3, [r3, #10]
 8009baa:	461a      	mov	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d906      	bls.n	8009bc0 <pbuf_copy+0xcc>
 8009bb2:	4b32      	ldr	r3, [pc, #200]	; (8009c7c <pbuf_copy+0x188>)
 8009bb4:	f240 32da 	movw	r2, #986	; 0x3da
 8009bb8:	4934      	ldr	r1, [pc, #208]	; (8009c8c <pbuf_copy+0x198>)
 8009bba:	4832      	ldr	r0, [pc, #200]	; (8009c84 <pbuf_copy+0x190>)
 8009bbc:	f006 f8a8 	bl	800fd10 <iprintf>
    if (offset_from >= p_from->len) {
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d304      	bcc.n	8009bd6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	895b      	ldrh	r3, [r3, #10]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d114      	bne.n	8009c0c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10c      	bne.n	8009c0c <pbuf_copy+0x118>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d009      	beq.n	8009c0c <pbuf_copy+0x118>
 8009bf8:	4b20      	ldr	r3, [pc, #128]	; (8009c7c <pbuf_copy+0x188>)
 8009bfa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009bfe:	4924      	ldr	r1, [pc, #144]	; (8009c90 <pbuf_copy+0x19c>)
 8009c00:	4820      	ldr	r0, [pc, #128]	; (8009c84 <pbuf_copy+0x190>)
 8009c02:	f006 f885 	bl	800fd10 <iprintf>
 8009c06:	f06f 030f 	mvn.w	r3, #15
 8009c0a:	e032      	b.n	8009c72 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d013      	beq.n	8009c3a <pbuf_copy+0x146>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	895a      	ldrh	r2, [r3, #10]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	891b      	ldrh	r3, [r3, #8]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d10d      	bne.n	8009c3a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <pbuf_copy+0x146>
 8009c26:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <pbuf_copy+0x188>)
 8009c28:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009c2c:	4919      	ldr	r1, [pc, #100]	; (8009c94 <pbuf_copy+0x1a0>)
 8009c2e:	4815      	ldr	r0, [pc, #84]	; (8009c84 <pbuf_copy+0x190>)
 8009c30:	f006 f86e 	bl	800fd10 <iprintf>
 8009c34:	f06f 0305 	mvn.w	r3, #5
 8009c38:	e01b      	b.n	8009c72 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d013      	beq.n	8009c68 <pbuf_copy+0x174>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	895a      	ldrh	r2, [r3, #10]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	891b      	ldrh	r3, [r3, #8]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d10d      	bne.n	8009c68 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <pbuf_copy+0x174>
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <pbuf_copy+0x188>)
 8009c56:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009c5a:	490e      	ldr	r1, [pc, #56]	; (8009c94 <pbuf_copy+0x1a0>)
 8009c5c:	4809      	ldr	r0, [pc, #36]	; (8009c84 <pbuf_copy+0x190>)
 8009c5e:	f006 f857 	bl	800fd10 <iprintf>
 8009c62:	f06f 0305 	mvn.w	r3, #5
 8009c66:	e004      	b.n	8009c72 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f47f af61 	bne.w	8009b32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	08011c44 	.word	0x08011c44
 8009c80:	08011f1c 	.word	0x08011f1c
 8009c84:	08011cd4 	.word	0x08011cd4
 8009c88:	08011f4c 	.word	0x08011f4c
 8009c8c:	08011f64 	.word	0x08011f64
 8009c90:	08011f80 	.word	0x08011f80
 8009c94:	08011f90 	.word	0x08011f90

08009c98 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	80fb      	strh	r3, [r7, #6]
 8009caa:	4613      	mov	r3, r2
 8009cac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d108      	bne.n	8009cce <pbuf_copy_partial+0x36>
 8009cbc:	4b2b      	ldr	r3, [pc, #172]	; (8009d6c <pbuf_copy_partial+0xd4>)
 8009cbe:	f240 420a 	movw	r2, #1034	; 0x40a
 8009cc2:	492b      	ldr	r1, [pc, #172]	; (8009d70 <pbuf_copy_partial+0xd8>)
 8009cc4:	482b      	ldr	r0, [pc, #172]	; (8009d74 <pbuf_copy_partial+0xdc>)
 8009cc6:	f006 f823 	bl	800fd10 <iprintf>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e04a      	b.n	8009d64 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d108      	bne.n	8009ce6 <pbuf_copy_partial+0x4e>
 8009cd4:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <pbuf_copy_partial+0xd4>)
 8009cd6:	f240 420b 	movw	r2, #1035	; 0x40b
 8009cda:	4927      	ldr	r1, [pc, #156]	; (8009d78 <pbuf_copy_partial+0xe0>)
 8009cdc:	4825      	ldr	r0, [pc, #148]	; (8009d74 <pbuf_copy_partial+0xdc>)
 8009cde:	f006 f817 	bl	800fd10 <iprintf>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e03e      	b.n	8009d64 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e034      	b.n	8009d56 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009cec:	88bb      	ldrh	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <pbuf_copy_partial+0x70>
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	895b      	ldrh	r3, [r3, #10]
 8009cf6:	88ba      	ldrh	r2, [r7, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d305      	bcc.n	8009d08 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	895b      	ldrh	r3, [r3, #10]
 8009d00:	88ba      	ldrh	r2, [r7, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	80bb      	strh	r3, [r7, #4]
 8009d06:	e023      	b.n	8009d50 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	895a      	ldrh	r2, [r3, #10]
 8009d0c:	88bb      	ldrh	r3, [r7, #4]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009d12:	8b3a      	ldrh	r2, [r7, #24]
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d901      	bls.n	8009d1e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009d1e:	8b7b      	ldrh	r3, [r7, #26]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	18d0      	adds	r0, r2, r3
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	88bb      	ldrh	r3, [r7, #4]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	8b3a      	ldrh	r2, [r7, #24]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f005 ffd8 	bl	800fce4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009d34:	8afa      	ldrh	r2, [r7, #22]
 8009d36:	8b3b      	ldrh	r3, [r7, #24]
 8009d38:	4413      	add	r3, r2
 8009d3a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009d3c:	8b7a      	ldrh	r2, [r7, #26]
 8009d3e:	8b3b      	ldrh	r3, [r7, #24]
 8009d40:	4413      	add	r3, r2
 8009d42:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	8b3b      	ldrh	r3, [r7, #24]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <pbuf_copy_partial+0xca>
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1c4      	bne.n	8009cec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009d62:	8afb      	ldrh	r3, [r7, #22]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	08011c44 	.word	0x08011c44
 8009d70:	08011fbc 	.word	0x08011fbc
 8009d74:	08011cd4 	.word	0x08011cd4
 8009d78:	08011fdc 	.word	0x08011fdc

08009d7c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	603a      	str	r2, [r7, #0]
 8009d86:	71fb      	strb	r3, [r7, #7]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	8919      	ldrh	r1, [r3, #8]
 8009d90:	88ba      	ldrh	r2, [r7, #4]
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff faa3 	bl	80092e0 <pbuf_alloc>
 8009d9a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <pbuf_clone+0x2a>
    return NULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e011      	b.n	8009dca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff fea3 	bl	8009af4 <pbuf_copy>
 8009dae:	4603      	mov	r3, r0
 8009db0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009db2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d006      	beq.n	8009dc8 <pbuf_clone+0x4c>
 8009dba:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <pbuf_clone+0x58>)
 8009dbc:	f240 5224 	movw	r2, #1316	; 0x524
 8009dc0:	4905      	ldr	r1, [pc, #20]	; (8009dd8 <pbuf_clone+0x5c>)
 8009dc2:	4806      	ldr	r0, [pc, #24]	; (8009ddc <pbuf_clone+0x60>)
 8009dc4:	f005 ffa4 	bl	800fd10 <iprintf>
  return q;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	08011c44 	.word	0x08011c44
 8009dd8:	080120e8 	.word	0x080120e8
 8009ddc:	08011cd4 	.word	0x08011cd4

08009de0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009de4:	f005 ffac 	bl	800fd40 <rand>
 8009de8:	4603      	mov	r3, r0
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <tcp_init+0x20>)
 8009dfa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009dfc:	bf00      	nop
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	24000028 	.word	0x24000028

08009e04 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7d1b      	ldrb	r3, [r3, #20]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d105      	bne.n	8009e20 <tcp_free+0x1c>
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <tcp_free+0x2c>)
 8009e16:	22d4      	movs	r2, #212	; 0xd4
 8009e18:	4906      	ldr	r1, [pc, #24]	; (8009e34 <tcp_free+0x30>)
 8009e1a:	4807      	ldr	r0, [pc, #28]	; (8009e38 <tcp_free+0x34>)
 8009e1c:	f005 ff78 	bl	800fd10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	2001      	movs	r0, #1
 8009e24:	f7fe feea 	bl	8008bfc <memp_free>
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	08012174 	.word	0x08012174
 8009e34:	080121d4 	.word	0x080121d4
 8009e38:	080121e8 	.word	0x080121e8

08009e3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	7d1b      	ldrb	r3, [r3, #20]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d105      	bne.n	8009e58 <tcp_free_listen+0x1c>
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <tcp_free_listen+0x2c>)
 8009e4e:	22df      	movs	r2, #223	; 0xdf
 8009e50:	4906      	ldr	r1, [pc, #24]	; (8009e6c <tcp_free_listen+0x30>)
 8009e52:	4807      	ldr	r0, [pc, #28]	; (8009e70 <tcp_free_listen+0x34>)
 8009e54:	f005 ff5c 	bl	800fd10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	2002      	movs	r0, #2
 8009e5c:	f7fe fece 	bl	8008bfc <memp_free>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	08012174 	.word	0x08012174
 8009e6c:	08012210 	.word	0x08012210
 8009e70:	080121e8 	.word	0x080121e8

08009e74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009e78:	f000 fea2 	bl	800abc0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009e7c:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <tcp_tmr+0x28>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <tcp_tmr+0x28>)
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <tcp_tmr+0x28>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009e94:	f000 fb54 	bl	800a540 <tcp_slowtmr>
  }
}
 8009e98:	bf00      	nop
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	2400bc39 	.word	0x2400bc39

08009ea0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d105      	bne.n	8009ebc <tcp_remove_listener+0x1c>
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <tcp_remove_listener+0x48>)
 8009eb2:	22ff      	movs	r2, #255	; 0xff
 8009eb4:	490d      	ldr	r1, [pc, #52]	; (8009eec <tcp_remove_listener+0x4c>)
 8009eb6:	480e      	ldr	r0, [pc, #56]	; (8009ef0 <tcp_remove_listener+0x50>)
 8009eb8:	f005 ff2a 	bl	800fd10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e00a      	b.n	8009ed8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d102      	bne.n	8009ed2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f1      	bne.n	8009ec2 <tcp_remove_listener+0x22>
    }
  }
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	08012174 	.word	0x08012174
 8009eec:	0801222c 	.word	0x0801222c
 8009ef0:	080121e8 	.word	0x080121e8

08009ef4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <tcp_listen_closed+0x1c>
 8009f02:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <tcp_listen_closed+0x60>)
 8009f04:	f240 1211 	movw	r2, #273	; 0x111
 8009f08:	4913      	ldr	r1, [pc, #76]	; (8009f58 <tcp_listen_closed+0x64>)
 8009f0a:	4814      	ldr	r0, [pc, #80]	; (8009f5c <tcp_listen_closed+0x68>)
 8009f0c:	f005 ff00 	bl	800fd10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	7d1b      	ldrb	r3, [r3, #20]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d006      	beq.n	8009f26 <tcp_listen_closed+0x32>
 8009f18:	4b0e      	ldr	r3, [pc, #56]	; (8009f54 <tcp_listen_closed+0x60>)
 8009f1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009f1e:	4910      	ldr	r1, [pc, #64]	; (8009f60 <tcp_listen_closed+0x6c>)
 8009f20:	480e      	ldr	r0, [pc, #56]	; (8009f5c <tcp_listen_closed+0x68>)
 8009f22:	f005 fef5 	bl	800fd10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009f26:	2301      	movs	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	e00b      	b.n	8009f44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009f2c:	4a0d      	ldr	r2, [pc, #52]	; (8009f64 <tcp_listen_closed+0x70>)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff ffb1 	bl	8009ea0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3301      	adds	r3, #1
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d9f0      	bls.n	8009f2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	08012174 	.word	0x08012174
 8009f58:	08012254 	.word	0x08012254
 8009f5c:	080121e8 	.word	0x080121e8
 8009f60:	08012260 	.word	0x08012260
 8009f64:	08013b8c 	.word	0x08013b8c

08009f68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af04      	add	r7, sp, #16
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <tcp_close_shutdown+0x20>
 8009f7a:	4b63      	ldr	r3, [pc, #396]	; (800a108 <tcp_close_shutdown+0x1a0>)
 8009f7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009f80:	4962      	ldr	r1, [pc, #392]	; (800a10c <tcp_close_shutdown+0x1a4>)
 8009f82:	4863      	ldr	r0, [pc, #396]	; (800a110 <tcp_close_shutdown+0x1a8>)
 8009f84:	f005 fec4 	bl	800fd10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d066      	beq.n	800a05c <tcp_close_shutdown+0xf4>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	7d1b      	ldrb	r3, [r3, #20]
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d003      	beq.n	8009f9e <tcp_close_shutdown+0x36>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7d1b      	ldrb	r3, [r3, #20]
 8009f9a:	2b07      	cmp	r3, #7
 8009f9c:	d15e      	bne.n	800a05c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d104      	bne.n	8009fb0 <tcp_close_shutdown+0x48>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009faa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009fae:	d055      	beq.n	800a05c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8b5b      	ldrh	r3, [r3, #26]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <tcp_close_shutdown+0x62>
 8009fbc:	4b52      	ldr	r3, [pc, #328]	; (800a108 <tcp_close_shutdown+0x1a0>)
 8009fbe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009fc2:	4954      	ldr	r1, [pc, #336]	; (800a114 <tcp_close_shutdown+0x1ac>)
 8009fc4:	4852      	ldr	r0, [pc, #328]	; (800a110 <tcp_close_shutdown+0x1a8>)
 8009fc6:	f005 fea3 	bl	800fd10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009fd2:	687d      	ldr	r5, [r7, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	8ad2      	ldrh	r2, [r2, #22]
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	8b09      	ldrh	r1, [r1, #24]
 8009fe0:	9102      	str	r1, [sp, #8]
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4601      	mov	r1, r0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f004 fe91 	bl	800ed14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 f8c6 	bl	800b184 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009ff8:	4b47      	ldr	r3, [pc, #284]	; (800a118 <tcp_close_shutdown+0x1b0>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d105      	bne.n	800a00e <tcp_close_shutdown+0xa6>
 800a002:	4b45      	ldr	r3, [pc, #276]	; (800a118 <tcp_close_shutdown+0x1b0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	4a43      	ldr	r2, [pc, #268]	; (800a118 <tcp_close_shutdown+0x1b0>)
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	e013      	b.n	800a036 <tcp_close_shutdown+0xce>
 800a00e:	4b42      	ldr	r3, [pc, #264]	; (800a118 <tcp_close_shutdown+0x1b0>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	e00c      	b.n	800a030 <tcp_close_shutdown+0xc8>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d104      	bne.n	800a02a <tcp_close_shutdown+0xc2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	60da      	str	r2, [r3, #12]
 800a028:	e005      	b.n	800a036 <tcp_close_shutdown+0xce>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1ef      	bne.n	800a016 <tcp_close_shutdown+0xae>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	60da      	str	r2, [r3, #12]
 800a03c:	4b37      	ldr	r3, [pc, #220]	; (800a11c <tcp_close_shutdown+0x1b4>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a042:	4b37      	ldr	r3, [pc, #220]	; (800a120 <tcp_close_shutdown+0x1b8>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d102      	bne.n	800a052 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a04c:	f003 fd5e 	bl	800db0c <tcp_trigger_input_pcb_close>
 800a050:	e002      	b.n	800a058 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fed6 	bl	8009e04 <tcp_free>
      }
      return ERR_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e050      	b.n	800a0fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7d1b      	ldrb	r3, [r3, #20]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d03b      	beq.n	800a0dc <tcp_close_shutdown+0x174>
 800a064:	2b02      	cmp	r3, #2
 800a066:	dc44      	bgt.n	800a0f2 <tcp_close_shutdown+0x18a>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <tcp_close_shutdown+0x10a>
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d02a      	beq.n	800a0c6 <tcp_close_shutdown+0x15e>
 800a070:	e03f      	b.n	800a0f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8adb      	ldrh	r3, [r3, #22]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d021      	beq.n	800a0be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a07a:	4b2a      	ldr	r3, [pc, #168]	; (800a124 <tcp_close_shutdown+0x1bc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d105      	bne.n	800a090 <tcp_close_shutdown+0x128>
 800a084:	4b27      	ldr	r3, [pc, #156]	; (800a124 <tcp_close_shutdown+0x1bc>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	4a26      	ldr	r2, [pc, #152]	; (800a124 <tcp_close_shutdown+0x1bc>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	e013      	b.n	800a0b8 <tcp_close_shutdown+0x150>
 800a090:	4b24      	ldr	r3, [pc, #144]	; (800a124 <tcp_close_shutdown+0x1bc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60bb      	str	r3, [r7, #8]
 800a096:	e00c      	b.n	800a0b2 <tcp_close_shutdown+0x14a>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d104      	bne.n	800a0ac <tcp_close_shutdown+0x144>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	e005      	b.n	800a0b8 <tcp_close_shutdown+0x150>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	60bb      	str	r3, [r7, #8]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1ef      	bne.n	800a098 <tcp_close_shutdown+0x130>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff fea0 	bl	8009e04 <tcp_free>
      break;
 800a0c4:	e01a      	b.n	800a0fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff ff14 	bl	8009ef4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4816      	ldr	r0, [pc, #88]	; (800a128 <tcp_close_shutdown+0x1c0>)
 800a0d0:	f001 f8a8 	bl	800b224 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff feb1 	bl	8009e3c <tcp_free_listen>
      break;
 800a0da:	e00f      	b.n	800a0fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	480e      	ldr	r0, [pc, #56]	; (800a118 <tcp_close_shutdown+0x1b0>)
 800a0e0:	f001 f8a0 	bl	800b224 <tcp_pcb_remove>
 800a0e4:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <tcp_close_shutdown+0x1b4>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7ff fe8a 	bl	8009e04 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a0f0:	e004      	b.n	800a0fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f81a 	bl	800a12c <tcp_close_shutdown_fin>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	e000      	b.n	800a0fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bdb0      	pop	{r4, r5, r7, pc}
 800a106:	bf00      	nop
 800a108:	08012174 	.word	0x08012174
 800a10c:	08012278 	.word	0x08012278
 800a110:	080121e8 	.word	0x080121e8
 800a114:	08012298 	.word	0x08012298
 800a118:	2400bc30 	.word	0x2400bc30
 800a11c:	2400bc38 	.word	0x2400bc38
 800a120:	2400bc70 	.word	0x2400bc70
 800a124:	2400bc28 	.word	0x2400bc28
 800a128:	2400bc2c 	.word	0x2400bc2c

0800a12c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <tcp_close_shutdown_fin+0x1c>
 800a13a:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <tcp_close_shutdown_fin+0xc8>)
 800a13c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a140:	492d      	ldr	r1, [pc, #180]	; (800a1f8 <tcp_close_shutdown_fin+0xcc>)
 800a142:	482e      	ldr	r0, [pc, #184]	; (800a1fc <tcp_close_shutdown_fin+0xd0>)
 800a144:	f005 fde4 	bl	800fd10 <iprintf>

  switch (pcb->state) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	2b07      	cmp	r3, #7
 800a14e:	d020      	beq.n	800a192 <tcp_close_shutdown_fin+0x66>
 800a150:	2b07      	cmp	r3, #7
 800a152:	dc2b      	bgt.n	800a1ac <tcp_close_shutdown_fin+0x80>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d002      	beq.n	800a15e <tcp_close_shutdown_fin+0x32>
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d00d      	beq.n	800a178 <tcp_close_shutdown_fin+0x4c>
 800a15c:	e026      	b.n	800a1ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f003 fee6 	bl	800df30 <tcp_send_fin>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d11f      	bne.n	800a1b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2205      	movs	r2, #5
 800a174:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a176:	e01b      	b.n	800a1b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f003 fed9 	bl	800df30 <tcp_send_fin>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d114      	bne.n	800a1b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2205      	movs	r2, #5
 800a18e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a190:	e010      	b.n	800a1b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f003 fecc 	bl	800df30 <tcp_send_fin>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2209      	movs	r2, #9
 800a1a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a1aa:	e005      	b.n	800a1b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e01c      	b.n	800a1ea <tcp_close_shutdown_fin+0xbe>
      break;
 800a1b0:	bf00      	nop
 800a1b2:	e002      	b.n	800a1ba <tcp_close_shutdown_fin+0x8e>
      break;
 800a1b4:	bf00      	nop
 800a1b6:	e000      	b.n	800a1ba <tcp_close_shutdown_fin+0x8e>
      break;
 800a1b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f003 fff2 	bl	800e1ac <tcp_output>
 800a1c8:	e00d      	b.n	800a1e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d2:	d108      	bne.n	800a1e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8b5b      	ldrh	r3, [r3, #26]
 800a1d8:	f043 0308 	orr.w	r3, r3, #8
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e001      	b.n	800a1ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	08012174 	.word	0x08012174
 800a1f8:	08012254 	.word	0x08012254
 800a1fc:	080121e8 	.word	0x080121e8

0800a200 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <tcp_close+0x22>
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <tcp_close+0x4c>)
 800a210:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a214:	490e      	ldr	r1, [pc, #56]	; (800a250 <tcp_close+0x50>)
 800a216:	480f      	ldr	r0, [pc, #60]	; (800a254 <tcp_close+0x54>)
 800a218:	f005 fd7a 	bl	800fd10 <iprintf>
 800a21c:	f06f 030f 	mvn.w	r3, #15
 800a220:	e00f      	b.n	800a242 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	7d1b      	ldrb	r3, [r3, #20]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d006      	beq.n	800a238 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8b5b      	ldrh	r3, [r3, #26]
 800a22e:	f043 0310 	orr.w	r3, r3, #16
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fe94 	bl	8009f68 <tcp_close_shutdown>
 800a240:	4603      	mov	r3, r0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	08012174 	.word	0x08012174
 800a250:	080122b4 	.word	0x080122b4
 800a254:	080121e8 	.word	0x080121e8

0800a258 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08e      	sub	sp, #56	; 0x38
 800a25c:	af04      	add	r7, sp, #16
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d107      	bne.n	800a278 <tcp_abandon+0x20>
 800a268:	4b52      	ldr	r3, [pc, #328]	; (800a3b4 <tcp_abandon+0x15c>)
 800a26a:	f240 223d 	movw	r2, #573	; 0x23d
 800a26e:	4952      	ldr	r1, [pc, #328]	; (800a3b8 <tcp_abandon+0x160>)
 800a270:	4852      	ldr	r0, [pc, #328]	; (800a3bc <tcp_abandon+0x164>)
 800a272:	f005 fd4d 	bl	800fd10 <iprintf>
 800a276:	e099      	b.n	800a3ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7d1b      	ldrb	r3, [r3, #20]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d106      	bne.n	800a28e <tcp_abandon+0x36>
 800a280:	4b4c      	ldr	r3, [pc, #304]	; (800a3b4 <tcp_abandon+0x15c>)
 800a282:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a286:	494e      	ldr	r1, [pc, #312]	; (800a3c0 <tcp_abandon+0x168>)
 800a288:	484c      	ldr	r0, [pc, #304]	; (800a3bc <tcp_abandon+0x164>)
 800a28a:	f005 fd41 	bl	800fd10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7d1b      	ldrb	r3, [r3, #20]
 800a292:	2b0a      	cmp	r3, #10
 800a294:	d107      	bne.n	800a2a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	484a      	ldr	r0, [pc, #296]	; (800a3c4 <tcp_abandon+0x16c>)
 800a29a:	f000 ffc3 	bl	800b224 <tcp_pcb_remove>
    tcp_free(pcb);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fdb0 	bl	8009e04 <tcp_free>
 800a2a4:	e082      	b.n	800a3ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	7d1b      	ldrb	r3, [r3, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d126      	bne.n	800a31e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	8adb      	ldrh	r3, [r3, #22]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02e      	beq.n	800a336 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2d8:	4b3b      	ldr	r3, [pc, #236]	; (800a3c8 <tcp_abandon+0x170>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d105      	bne.n	800a2ee <tcp_abandon+0x96>
 800a2e2:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <tcp_abandon+0x170>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	4a37      	ldr	r2, [pc, #220]	; (800a3c8 <tcp_abandon+0x170>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	e013      	b.n	800a316 <tcp_abandon+0xbe>
 800a2ee:	4b36      	ldr	r3, [pc, #216]	; (800a3c8 <tcp_abandon+0x170>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	e00c      	b.n	800a310 <tcp_abandon+0xb8>
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d104      	bne.n	800a30a <tcp_abandon+0xb2>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	60da      	str	r2, [r3, #12]
 800a308:	e005      	b.n	800a316 <tcp_abandon+0xbe>
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1ef      	bne.n	800a2f6 <tcp_abandon+0x9e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	60da      	str	r2, [r3, #12]
 800a31c:	e00b      	b.n	800a336 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8adb      	ldrh	r3, [r3, #22]
 800a326:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4828      	ldr	r0, [pc, #160]	; (800a3cc <tcp_abandon+0x174>)
 800a32c:	f000 ff7a 	bl	800b224 <tcp_pcb_remove>
 800a330:	4b27      	ldr	r3, [pc, #156]	; (800a3d0 <tcp_abandon+0x178>)
 800a332:	2201      	movs	r2, #1
 800a334:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d004      	beq.n	800a348 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fd1c 	bl	800ad80 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fd13 	bl	800ad80 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d004      	beq.n	800a36c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a366:	4618      	mov	r0, r3
 800a368:	f000 fd0a 	bl	800ad80 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00e      	beq.n	800a390 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	8b12      	ldrh	r2, [r2, #24]
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a380:	9201      	str	r2, [sp, #4]
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	460b      	mov	r3, r1
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	69b9      	ldr	r1, [r7, #24]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f004 fcc2 	bl	800ed14 <tcp_rst>
    }
    last_state = pcb->state;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
 800a394:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fd34 	bl	8009e04 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <tcp_abandon+0x154>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f06f 010c 	mvn.w	r1, #12
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	4798      	blx	r3
  }
}
 800a3ac:	3728      	adds	r7, #40	; 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	08012174 	.word	0x08012174
 800a3b8:	080122e8 	.word	0x080122e8
 800a3bc:	080121e8 	.word	0x080121e8
 800a3c0:	08012304 	.word	0x08012304
 800a3c4:	2400bc34 	.word	0x2400bc34
 800a3c8:	2400bc28 	.word	0x2400bc28
 800a3cc:	2400bc30 	.word	0x2400bc30
 800a3d0:	2400bc38 	.word	0x2400bc38

0800a3d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a3dc:	2101      	movs	r1, #1
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff ff3a 	bl	800a258 <tcp_abandon>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <tcp_update_rcv_ann_wnd+0x1c>
 800a3fa:	4b25      	ldr	r3, [pc, #148]	; (800a490 <tcp_update_rcv_ann_wnd+0xa4>)
 800a3fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a400:	4924      	ldr	r1, [pc, #144]	; (800a494 <tcp_update_rcv_ann_wnd+0xa8>)
 800a402:	4825      	ldr	r0, [pc, #148]	; (800a498 <tcp_update_rcv_ann_wnd+0xac>)
 800a404:	f005 fc84 	bl	800fd10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a410:	4413      	add	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a41c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a420:	bf28      	it	cs
 800a422:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a426:	b292      	uxth	r2, r2
 800a428:	4413      	add	r3, r2
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	db08      	blt.n	800a444 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	e020      	b.n	800a486 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dd03      	ble.n	800a45a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a458:	e014      	b.n	800a484 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a46c:	d306      	bcc.n	800a47c <tcp_update_rcv_ann_wnd+0x90>
 800a46e:	4b08      	ldr	r3, [pc, #32]	; (800a490 <tcp_update_rcv_ann_wnd+0xa4>)
 800a470:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a474:	4909      	ldr	r1, [pc, #36]	; (800a49c <tcp_update_rcv_ann_wnd+0xb0>)
 800a476:	4808      	ldr	r0, [pc, #32]	; (800a498 <tcp_update_rcv_ann_wnd+0xac>)
 800a478:	f005 fc4a 	bl	800fd10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a484:	2300      	movs	r3, #0
  }
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	08012174 	.word	0x08012174
 800a494:	08012400 	.word	0x08012400
 800a498:	080121e8 	.word	0x080121e8
 800a49c:	08012424 	.word	0x08012424

0800a4a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d107      	bne.n	800a4c2 <tcp_recved+0x22>
 800a4b2:	4b1f      	ldr	r3, [pc, #124]	; (800a530 <tcp_recved+0x90>)
 800a4b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a4b8:	491e      	ldr	r1, [pc, #120]	; (800a534 <tcp_recved+0x94>)
 800a4ba:	481f      	ldr	r0, [pc, #124]	; (800a538 <tcp_recved+0x98>)
 800a4bc:	f005 fc28 	bl	800fd10 <iprintf>
 800a4c0:	e032      	b.n	800a528 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7d1b      	ldrb	r3, [r3, #20]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d106      	bne.n	800a4d8 <tcp_recved+0x38>
 800a4ca:	4b19      	ldr	r3, [pc, #100]	; (800a530 <tcp_recved+0x90>)
 800a4cc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a4d0:	491a      	ldr	r1, [pc, #104]	; (800a53c <tcp_recved+0x9c>)
 800a4d2:	4819      	ldr	r0, [pc, #100]	; (800a538 <tcp_recved+0x98>)
 800a4d4:	f005 fc1c 	bl	800fd10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4dc:	887b      	ldrh	r3, [r7, #2]
 800a4de:	4413      	add	r3, r2
 800a4e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a4e2:	89fb      	ldrh	r3, [r7, #14]
 800a4e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a4e8:	d804      	bhi.n	800a4f4 <tcp_recved+0x54>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ee:	89fa      	ldrh	r2, [r7, #14]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d204      	bcs.n	800a4fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a4fa:	851a      	strh	r2, [r3, #40]	; 0x28
 800a4fc:	e002      	b.n	800a504 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	89fa      	ldrh	r2, [r7, #14]
 800a502:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff ff71 	bl	800a3ec <tcp_update_rcv_ann_wnd>
 800a50a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a512:	d309      	bcc.n	800a528 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8b5b      	ldrh	r3, [r3, #26]
 800a518:	f043 0302 	orr.w	r3, r3, #2
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f003 fe42 	bl	800e1ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	08012174 	.word	0x08012174
 800a534:	08012440 	.word	0x08012440
 800a538:	080121e8 	.word	0x080121e8
 800a53c:	08012458 	.word	0x08012458

0800a540 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a540:	b5b0      	push	{r4, r5, r7, lr}
 800a542:	b090      	sub	sp, #64	; 0x40
 800a544:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a54c:	4b94      	ldr	r3, [pc, #592]	; (800a7a0 <tcp_slowtmr+0x260>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3301      	adds	r3, #1
 800a552:	4a93      	ldr	r2, [pc, #588]	; (800a7a0 <tcp_slowtmr+0x260>)
 800a554:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a556:	4b93      	ldr	r3, [pc, #588]	; (800a7a4 <tcp_slowtmr+0x264>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	4b91      	ldr	r3, [pc, #580]	; (800a7a4 <tcp_slowtmr+0x264>)
 800a560:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a566:	4b90      	ldr	r3, [pc, #576]	; (800a7a8 <tcp_slowtmr+0x268>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a56c:	e29d      	b.n	800aaaa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	7d1b      	ldrb	r3, [r3, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <tcp_slowtmr+0x44>
 800a576:	4b8d      	ldr	r3, [pc, #564]	; (800a7ac <tcp_slowtmr+0x26c>)
 800a578:	f240 42be 	movw	r2, #1214	; 0x4be
 800a57c:	498c      	ldr	r1, [pc, #560]	; (800a7b0 <tcp_slowtmr+0x270>)
 800a57e:	488d      	ldr	r0, [pc, #564]	; (800a7b4 <tcp_slowtmr+0x274>)
 800a580:	f005 fbc6 	bl	800fd10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	7d1b      	ldrb	r3, [r3, #20]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d106      	bne.n	800a59a <tcp_slowtmr+0x5a>
 800a58c:	4b87      	ldr	r3, [pc, #540]	; (800a7ac <tcp_slowtmr+0x26c>)
 800a58e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a592:	4989      	ldr	r1, [pc, #548]	; (800a7b8 <tcp_slowtmr+0x278>)
 800a594:	4887      	ldr	r0, [pc, #540]	; (800a7b4 <tcp_slowtmr+0x274>)
 800a596:	f005 fbbb 	bl	800fd10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	7d1b      	ldrb	r3, [r3, #20]
 800a59e:	2b0a      	cmp	r3, #10
 800a5a0:	d106      	bne.n	800a5b0 <tcp_slowtmr+0x70>
 800a5a2:	4b82      	ldr	r3, [pc, #520]	; (800a7ac <tcp_slowtmr+0x26c>)
 800a5a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a5a8:	4984      	ldr	r1, [pc, #528]	; (800a7bc <tcp_slowtmr+0x27c>)
 800a5aa:	4882      	ldr	r0, [pc, #520]	; (800a7b4 <tcp_slowtmr+0x274>)
 800a5ac:	f005 fbb0 	bl	800fd10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	7f9a      	ldrb	r2, [r3, #30]
 800a5b4:	4b7b      	ldr	r3, [pc, #492]	; (800a7a4 <tcp_slowtmr+0x264>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d105      	bne.n	800a5c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a5c6:	e270      	b.n	800aaaa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a5c8:	4b76      	ldr	r3, [pc, #472]	; (800a7a4 <tcp_slowtmr+0x264>)
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	7d1b      	ldrb	r3, [r3, #20]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d10a      	bne.n	800a5fa <tcp_slowtmr+0xba>
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5ea:	2b05      	cmp	r3, #5
 800a5ec:	d905      	bls.n	800a5fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a5ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5f8:	e11e      	b.n	800a838 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a600:	2b0b      	cmp	r3, #11
 800a602:	d905      	bls.n	800a610 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a608:	3301      	adds	r3, #1
 800a60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a60e:	e113      	b.n	800a838 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a616:	2b00      	cmp	r3, #0
 800a618:	d075      	beq.n	800a706 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <tcp_slowtmr+0xf0>
 800a622:	4b62      	ldr	r3, [pc, #392]	; (800a7ac <tcp_slowtmr+0x26c>)
 800a624:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a628:	4965      	ldr	r1, [pc, #404]	; (800a7c0 <tcp_slowtmr+0x280>)
 800a62a:	4862      	ldr	r0, [pc, #392]	; (800a7b4 <tcp_slowtmr+0x274>)
 800a62c:	f005 fb70 	bl	800fd10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <tcp_slowtmr+0x106>
 800a638:	4b5c      	ldr	r3, [pc, #368]	; (800a7ac <tcp_slowtmr+0x26c>)
 800a63a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a63e:	4961      	ldr	r1, [pc, #388]	; (800a7c4 <tcp_slowtmr+0x284>)
 800a640:	485c      	ldr	r0, [pc, #368]	; (800a7b4 <tcp_slowtmr+0x274>)
 800a642:	f005 fb65 	bl	800fd10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d905      	bls.n	800a65c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a654:	3301      	adds	r3, #1
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a65a:	e0ed      	b.n	800a838 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a662:	3b01      	subs	r3, #1
 800a664:	4a58      	ldr	r2, [pc, #352]	; (800a7c8 <tcp_slowtmr+0x288>)
 800a666:	5cd3      	ldrb	r3, [r2, r3]
 800a668:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a670:	7c7a      	ldrb	r2, [r7, #17]
 800a672:	429a      	cmp	r2, r3
 800a674:	d907      	bls.n	800a686 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a67c:	3301      	adds	r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a68c:	7c7a      	ldrb	r2, [r7, #17]
 800a68e:	429a      	cmp	r2, r3
 800a690:	f200 80d2 	bhi.w	800a838 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a694:	2301      	movs	r3, #1
 800a696:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a6a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a4:	f004 fc2a 	bl	800eefc <tcp_zero_window_probe>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d014      	beq.n	800a6d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	623b      	str	r3, [r7, #32]
 800a6b2:	e011      	b.n	800a6d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6be:	f003 faef 	bl	800dca0 <tcp_split_unsent_seg>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d107      	bne.n	800a6d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a6c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ca:	f003 fd6f 	bl	800e1ac <tcp_output>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 80ac 	beq.w	800a838 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a6ee:	2b06      	cmp	r3, #6
 800a6f0:	f200 80a2 	bhi.w	800a838 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a704:	e098      	b.n	800a838 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	db0f      	blt.n	800a730 <tcp_slowtmr+0x1f0>
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a716:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d008      	beq.n	800a730 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a724:	b29b      	uxth	r3, r3
 800a726:	3301      	adds	r3, #1
 800a728:	b29b      	uxth	r3, r3
 800a72a:	b21a      	sxth	r2, r3
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a73c:	429a      	cmp	r2, r3
 800a73e:	db7b      	blt.n	800a838 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a742:	f004 f825 	bl	800e790 <tcp_rexmit_rto_prepare>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <tcp_slowtmr+0x21c>
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a750:	2b00      	cmp	r3, #0
 800a752:	d171      	bne.n	800a838 <tcp_slowtmr+0x2f8>
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d06d      	beq.n	800a838 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75e:	7d1b      	ldrb	r3, [r3, #20]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d03a      	beq.n	800a7da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a76a:	2b0c      	cmp	r3, #12
 800a76c:	bf28      	it	cs
 800a76e:	230c      	movcs	r3, #12
 800a770:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a778:	10db      	asrs	r3, r3, #3
 800a77a:	b21b      	sxth	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a784:	4413      	add	r3, r2
 800a786:	7efa      	ldrb	r2, [r7, #27]
 800a788:	4910      	ldr	r1, [pc, #64]	; (800a7cc <tcp_slowtmr+0x28c>)
 800a78a:	5c8a      	ldrb	r2, [r1, r2]
 800a78c:	4093      	lsls	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a796:	4293      	cmp	r3, r2
 800a798:	dc1a      	bgt.n	800a7d0 <tcp_slowtmr+0x290>
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	b21a      	sxth	r2, r3
 800a79e:	e019      	b.n	800a7d4 <tcp_slowtmr+0x294>
 800a7a0:	2400bc24 	.word	0x2400bc24
 800a7a4:	2400bc3a 	.word	0x2400bc3a
 800a7a8:	2400bc30 	.word	0x2400bc30
 800a7ac:	08012174 	.word	0x08012174
 800a7b0:	080124e8 	.word	0x080124e8
 800a7b4:	080121e8 	.word	0x080121e8
 800a7b8:	08012514 	.word	0x08012514
 800a7bc:	08012540 	.word	0x08012540
 800a7c0:	08012570 	.word	0x08012570
 800a7c4:	080125a4 	.word	0x080125a4
 800a7c8:	08013b84 	.word	0x08013b84
 800a7cc:	08013b74 	.word	0x08013b74
 800a7d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	2200      	movs	r2, #0
 800a7de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	bf28      	it	cs
 800a7f0:	4613      	movcs	r3, r2
 800a7f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a7f4:	8a7b      	ldrh	r3, [r7, #18]
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a802:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	429a      	cmp	r2, r3
 800a810:	d206      	bcs.n	800a820 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	b29a      	uxth	r2, r3
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a834:	f004 f81c 	bl	800e870 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	7d1b      	ldrb	r3, [r3, #20]
 800a83c:	2b06      	cmp	r3, #6
 800a83e:	d111      	bne.n	800a864 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	8b5b      	ldrh	r3, [r3, #26]
 800a844:	f003 0310 	and.w	r3, r3, #16
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00b      	beq.n	800a864 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a84c:	4b9c      	ldr	r3, [pc, #624]	; (800aac0 <tcp_slowtmr+0x580>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b28      	cmp	r3, #40	; 0x28
 800a858:	d904      	bls.n	800a864 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a85e:	3301      	adds	r3, #1
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	7a5b      	ldrb	r3, [r3, #9]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d04a      	beq.n	800a906 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a874:	2b04      	cmp	r3, #4
 800a876:	d003      	beq.n	800a880 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a87c:	2b07      	cmp	r3, #7
 800a87e:	d142      	bne.n	800a906 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a880:	4b8f      	ldr	r3, [pc, #572]	; (800aac0 <tcp_slowtmr+0x580>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a890:	4b8c      	ldr	r3, [pc, #560]	; (800aac4 <tcp_slowtmr+0x584>)
 800a892:	440b      	add	r3, r1
 800a894:	498c      	ldr	r1, [pc, #560]	; (800aac8 <tcp_slowtmr+0x588>)
 800a896:	fba1 1303 	umull	r1, r3, r1, r3
 800a89a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d90a      	bls.n	800a8b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a8aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8b4:	e027      	b.n	800a906 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a8b6:	4b82      	ldr	r3, [pc, #520]	; (800aac0 <tcp_slowtmr+0x580>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	4b7f      	ldr	r3, [pc, #508]	; (800aacc <tcp_slowtmr+0x58c>)
 800a8d0:	fb00 f303 	mul.w	r3, r0, r3
 800a8d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a8d6:	497c      	ldr	r1, [pc, #496]	; (800aac8 <tcp_slowtmr+0x588>)
 800a8d8:	fba1 1303 	umull	r1, r3, r1, r3
 800a8dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d911      	bls.n	800a906 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8e4:	f004 faca 	bl	800ee7c <tcp_keepalive>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a8ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d107      	bne.n	800a906 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d011      	beq.n	800a932 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a90e:	4b6c      	ldr	r3, [pc, #432]	; (800aac0 <tcp_slowtmr+0x580>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a91e:	4619      	mov	r1, r3
 800a920:	460b      	mov	r3, r1
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	440b      	add	r3, r1
 800a926:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a92c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a92e:	f000 fddd 	bl	800b4ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	7d1b      	ldrb	r3, [r3, #20]
 800a936:	2b03      	cmp	r3, #3
 800a938:	d10b      	bne.n	800a952 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a93a:	4b61      	ldr	r3, [pc, #388]	; (800aac0 <tcp_slowtmr+0x580>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b28      	cmp	r3, #40	; 0x28
 800a946:	d904      	bls.n	800a952 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a94c:	3301      	adds	r3, #1
 800a94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	7d1b      	ldrb	r3, [r3, #20]
 800a956:	2b09      	cmp	r3, #9
 800a958:	d10b      	bne.n	800a972 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a95a:	4b59      	ldr	r3, [pc, #356]	; (800aac0 <tcp_slowtmr+0x580>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2bf0      	cmp	r3, #240	; 0xf0
 800a966:	d904      	bls.n	800a972 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a96c:	3301      	adds	r3, #1
 800a96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a976:	2b00      	cmp	r3, #0
 800a978:	d060      	beq.n	800aa3c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a980:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a984:	f000 fbfe 	bl	800b184 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d010      	beq.n	800a9b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a98e:	4b50      	ldr	r3, [pc, #320]	; (800aad0 <tcp_slowtmr+0x590>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a994:	429a      	cmp	r2, r3
 800a996:	d106      	bne.n	800a9a6 <tcp_slowtmr+0x466>
 800a998:	4b4e      	ldr	r3, [pc, #312]	; (800aad4 <tcp_slowtmr+0x594>)
 800a99a:	f240 526d 	movw	r2, #1389	; 0x56d
 800a99e:	494e      	ldr	r1, [pc, #312]	; (800aad8 <tcp_slowtmr+0x598>)
 800a9a0:	484e      	ldr	r0, [pc, #312]	; (800aadc <tcp_slowtmr+0x59c>)
 800a9a2:	f005 f9b5 	bl	800fd10 <iprintf>
        prev->next = pcb->next;
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	60da      	str	r2, [r3, #12]
 800a9ae:	e00f      	b.n	800a9d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a9b0:	4b47      	ldr	r3, [pc, #284]	; (800aad0 <tcp_slowtmr+0x590>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d006      	beq.n	800a9c8 <tcp_slowtmr+0x488>
 800a9ba:	4b46      	ldr	r3, [pc, #280]	; (800aad4 <tcp_slowtmr+0x594>)
 800a9bc:	f240 5271 	movw	r2, #1393	; 0x571
 800a9c0:	4947      	ldr	r1, [pc, #284]	; (800aae0 <tcp_slowtmr+0x5a0>)
 800a9c2:	4846      	ldr	r0, [pc, #280]	; (800aadc <tcp_slowtmr+0x59c>)
 800a9c4:	f005 f9a4 	bl	800fd10 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	4a40      	ldr	r2, [pc, #256]	; (800aad0 <tcp_slowtmr+0x590>)
 800a9ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a9d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d013      	beq.n	800aa00 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a9e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e8:	8ad2      	ldrh	r2, [r2, #22]
 800a9ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9ec:	8b09      	ldrh	r1, [r1, #24]
 800a9ee:	9102      	str	r1, [sp, #8]
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9fc:	f004 f98a 	bl	800ed14 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	7d1b      	ldrb	r3, [r3, #20]
 800aa0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800aa16:	6838      	ldr	r0, [r7, #0]
 800aa18:	f7ff f9f4 	bl	8009e04 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800aa1c:	4b31      	ldr	r3, [pc, #196]	; (800aae4 <tcp_slowtmr+0x5a4>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <tcp_slowtmr+0x4f2>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f06f 010c 	mvn.w	r1, #12
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800aa32:	4b2c      	ldr	r3, [pc, #176]	; (800aae4 <tcp_slowtmr+0x5a4>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d037      	beq.n	800aaaa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800aa3a:	e592      	b.n	800a562 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	7f1b      	ldrb	r3, [r3, #28]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	7f1a      	ldrb	r2, [r3, #28]
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	7f5b      	ldrb	r3, [r3, #29]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d325      	bcc.n	800aaaa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	2200      	movs	r2, #0
 800aa62:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800aa64:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <tcp_slowtmr+0x5a4>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <tcp_slowtmr+0x54c>
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7c:	6912      	ldr	r2, [r2, #16]
 800aa7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aa8a:	e002      	b.n	800aa92 <tcp_slowtmr+0x552>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800aa92:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <tcp_slowtmr+0x5a4>)
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d000      	beq.n	800aa9c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800aa9a:	e562      	b.n	800a562 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800aa9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800aaa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa6:	f003 fb81 	bl	800e1ac <tcp_output>
  while (pcb != NULL) {
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f47f ad5e 	bne.w	800a56e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <tcp_slowtmr+0x5a8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800aabc:	e069      	b.n	800ab92 <tcp_slowtmr+0x652>
 800aabe:	bf00      	nop
 800aac0:	2400bc24 	.word	0x2400bc24
 800aac4:	000a4cb8 	.word	0x000a4cb8
 800aac8:	10624dd3 	.word	0x10624dd3
 800aacc:	000124f8 	.word	0x000124f8
 800aad0:	2400bc30 	.word	0x2400bc30
 800aad4:	08012174 	.word	0x08012174
 800aad8:	080125dc 	.word	0x080125dc
 800aadc:	080121e8 	.word	0x080121e8
 800aae0:	08012608 	.word	0x08012608
 800aae4:	2400bc38 	.word	0x2400bc38
 800aae8:	2400bc34 	.word	0x2400bc34
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b0a      	cmp	r3, #10
 800aaf2:	d006      	beq.n	800ab02 <tcp_slowtmr+0x5c2>
 800aaf4:	4b2b      	ldr	r3, [pc, #172]	; (800aba4 <tcp_slowtmr+0x664>)
 800aaf6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800aafa:	492b      	ldr	r1, [pc, #172]	; (800aba8 <tcp_slowtmr+0x668>)
 800aafc:	482b      	ldr	r0, [pc, #172]	; (800abac <tcp_slowtmr+0x66c>)
 800aafe:	f005 f907 	bl	800fd10 <iprintf>
    pcb_remove = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab08:	4b29      	ldr	r3, [pc, #164]	; (800abb0 <tcp_slowtmr+0x670>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2bf0      	cmp	r3, #240	; 0xf0
 800ab14:	d904      	bls.n	800ab20 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ab16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ab20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d02f      	beq.n	800ab88 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ab28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab2a:	f000 fb2b 	bl	800b184 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d010      	beq.n	800ab56 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ab34:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <tcp_slowtmr+0x674>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d106      	bne.n	800ab4c <tcp_slowtmr+0x60c>
 800ab3e:	4b19      	ldr	r3, [pc, #100]	; (800aba4 <tcp_slowtmr+0x664>)
 800ab40:	f240 52af 	movw	r2, #1455	; 0x5af
 800ab44:	491c      	ldr	r1, [pc, #112]	; (800abb8 <tcp_slowtmr+0x678>)
 800ab46:	4819      	ldr	r0, [pc, #100]	; (800abac <tcp_slowtmr+0x66c>)
 800ab48:	f005 f8e2 	bl	800fd10 <iprintf>
        prev->next = pcb->next;
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	60da      	str	r2, [r3, #12]
 800ab54:	e00f      	b.n	800ab76 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <tcp_slowtmr+0x674>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d006      	beq.n	800ab6e <tcp_slowtmr+0x62e>
 800ab60:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <tcp_slowtmr+0x664>)
 800ab62:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ab66:	4915      	ldr	r1, [pc, #84]	; (800abbc <tcp_slowtmr+0x67c>)
 800ab68:	4810      	ldr	r0, [pc, #64]	; (800abac <tcp_slowtmr+0x66c>)
 800ab6a:	f005 f8d1 	bl	800fd10 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <tcp_slowtmr+0x674>)
 800ab74:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ab80:	69f8      	ldr	r0, [r7, #28]
 800ab82:	f7ff f93f 	bl	8009e04 <tcp_free>
 800ab86:	e004      	b.n	800ab92 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1a9      	bne.n	800aaec <tcp_slowtmr+0x5ac>
    }
  }
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	3730      	adds	r7, #48	; 0x30
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bdb0      	pop	{r4, r5, r7, pc}
 800aba2:	bf00      	nop
 800aba4:	08012174 	.word	0x08012174
 800aba8:	08012634 	.word	0x08012634
 800abac:	080121e8 	.word	0x080121e8
 800abb0:	2400bc24 	.word	0x2400bc24
 800abb4:	2400bc34 	.word	0x2400bc34
 800abb8:	08012664 	.word	0x08012664
 800abbc:	0801268c 	.word	0x0801268c

0800abc0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800abc6:	4b2d      	ldr	r3, [pc, #180]	; (800ac7c <tcp_fasttmr+0xbc>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <tcp_fasttmr+0xbc>)
 800abd0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800abd2:	4b2b      	ldr	r3, [pc, #172]	; (800ac80 <tcp_fasttmr+0xc0>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800abd8:	e048      	b.n	800ac6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	7f9a      	ldrb	r2, [r3, #30]
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <tcp_fasttmr+0xbc>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d03f      	beq.n	800ac66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800abe6:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <tcp_fasttmr+0xbc>)
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8b5b      	ldrh	r3, [r3, #26]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d010      	beq.n	800ac1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	8b5b      	ldrh	r3, [r3, #26]
 800abfe:	f043 0302 	orr.w	r3, r3, #2
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f003 facf 	bl	800e1ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8b5b      	ldrh	r3, [r3, #26]
 800ac12:	f023 0303 	bic.w	r3, r3, #3
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8b5b      	ldrh	r3, [r3, #26]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	8b5b      	ldrh	r3, [r3, #26]
 800ac2c:	f023 0308 	bic.w	r3, r3, #8
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fa78 	bl	800a12c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ac4a:	4b0e      	ldr	r3, [pc, #56]	; (800ac84 <tcp_fasttmr+0xc4>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f819 	bl	800ac88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ac56:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <tcp_fasttmr+0xc4>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d000      	beq.n	800ac60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ac5e:	e7b8      	b.n	800abd2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	e002      	b.n	800ac6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1b3      	bne.n	800abda <tcp_fasttmr+0x1a>
    }
  }
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	2400bc3a 	.word	0x2400bc3a
 800ac80:	2400bc30 	.word	0x2400bc30
 800ac84:	2400bc38 	.word	0x2400bc38

0800ac88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <tcp_process_refused_data+0x22>
 800ac96:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <tcp_process_refused_data+0xec>)
 800ac98:	f240 6209 	movw	r2, #1545	; 0x609
 800ac9c:	4936      	ldr	r1, [pc, #216]	; (800ad78 <tcp_process_refused_data+0xf0>)
 800ac9e:	4837      	ldr	r0, [pc, #220]	; (800ad7c <tcp_process_refused_data+0xf4>)
 800aca0:	f005 f836 	bl	800fd10 <iprintf>
 800aca4:	f06f 030f 	mvn.w	r3, #15
 800aca8:	e060      	b.n	800ad6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acae:	7b5b      	ldrb	r3, [r3, #13]
 800acb0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <tcp_process_refused_data+0x58>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6918      	ldr	r0, [r3, #16]
 800acd2:	2300      	movs	r3, #0
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	47a0      	blx	r4
 800acda:	4603      	mov	r3, r0
 800acdc:	73fb      	strb	r3, [r7, #15]
 800acde:	e007      	b.n	800acf0 <tcp_process_refused_data+0x68>
 800ace0:	2300      	movs	r3, #0
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	2000      	movs	r0, #0
 800ace8:	f000 f8a4 	bl	800ae34 <tcp_recv_null>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800acf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d12a      	bne.n	800ad4e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
 800acfa:	f003 0320 	and.w	r3, r3, #32
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d033      	beq.n	800ad6a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ad0a:	d005      	beq.n	800ad18 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad10:	3301      	adds	r3, #1
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <tcp_process_refused_data+0xb2>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6918      	ldr	r0, [r3, #16]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	47a0      	blx	r4
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]
 800ad38:	e001      	b.n	800ad3e <tcp_process_refused_data+0xb6>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ad3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad42:	f113 0f0d 	cmn.w	r3, #13
 800ad46:	d110      	bne.n	800ad6a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ad48:	f06f 030c 	mvn.w	r3, #12
 800ad4c:	e00e      	b.n	800ad6c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ad4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad52:	f113 0f0d 	cmn.w	r3, #13
 800ad56:	d102      	bne.n	800ad5e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ad58:	f06f 030c 	mvn.w	r3, #12
 800ad5c:	e006      	b.n	800ad6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ad64:	f06f 0304 	mvn.w	r3, #4
 800ad68:	e000      	b.n	800ad6c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd90      	pop	{r4, r7, pc}
 800ad74:	08012174 	.word	0x08012174
 800ad78:	080126b4 	.word	0x080126b4
 800ad7c:	080121e8 	.word	0x080121e8

0800ad80 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ad88:	e007      	b.n	800ad9a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f80a 	bl	800adaa <tcp_seg_free>
    seg = next;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f4      	bne.n	800ad8a <tcp_segs_free+0xa>
  }
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00c      	beq.n	800add2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fd6d 	bl	80098a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	2003      	movs	r0, #3
 800adce:	f7fd ff15 	bl	8008bfc <memp_free>
  }
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d106      	bne.n	800adf8 <tcp_seg_copy+0x1c>
 800adea:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <tcp_seg_copy+0x4c>)
 800adec:	f240 6282 	movw	r2, #1666	; 0x682
 800adf0:	490e      	ldr	r1, [pc, #56]	; (800ae2c <tcp_seg_copy+0x50>)
 800adf2:	480f      	ldr	r0, [pc, #60]	; (800ae30 <tcp_seg_copy+0x54>)
 800adf4:	f004 ff8c 	bl	800fd10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800adf8:	2003      	movs	r0, #3
 800adfa:	f7fd fe8f 	bl	8008b1c <memp_malloc>
 800adfe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <tcp_seg_copy+0x2e>
    return NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	e00a      	b.n	800ae20 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f004 ff68 	bl	800fce4 <memcpy>
  pbuf_ref(cseg->p);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fde3 	bl	80099e4 <pbuf_ref>
  return cseg;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	08012174 	.word	0x08012174
 800ae2c:	080126f8 	.word	0x080126f8
 800ae30:	080121e8 	.word	0x080121e8

0800ae34 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <tcp_recv_null+0x28>
 800ae48:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <tcp_recv_null+0x60>)
 800ae4a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ae4e:	4912      	ldr	r1, [pc, #72]	; (800ae98 <tcp_recv_null+0x64>)
 800ae50:	4812      	ldr	r0, [pc, #72]	; (800ae9c <tcp_recv_null+0x68>)
 800ae52:	f004 ff5d 	bl	800fd10 <iprintf>
 800ae56:	f06f 030f 	mvn.w	r3, #15
 800ae5a:	e016      	b.n	800ae8a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	891b      	ldrh	r3, [r3, #8]
 800ae66:	4619      	mov	r1, r3
 800ae68:	68b8      	ldr	r0, [r7, #8]
 800ae6a:	f7ff fb19 	bl	800a4a0 <tcp_recved>
    pbuf_free(p);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fe fd18 	bl	80098a4 <pbuf_free>
 800ae74:	e008      	b.n	800ae88 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ae76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d104      	bne.n	800ae88 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ae7e:	68b8      	ldr	r0, [r7, #8]
 800ae80:	f7ff f9be 	bl	800a200 <tcp_close>
 800ae84:	4603      	mov	r3, r0
 800ae86:	e000      	b.n	800ae8a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	08012174 	.word	0x08012174
 800ae98:	08012714 	.word	0x08012714
 800ae9c:	080121e8 	.word	0x080121e8

0800aea0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	4603      	mov	r3, r0
 800aea8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	db01      	blt.n	800aeb6 <tcp_kill_prio+0x16>
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	e000      	b.n	800aeb8 <tcp_kill_prio+0x18>
 800aeb6:	237f      	movs	r3, #127	; 0x7f
 800aeb8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d034      	beq.n	800af2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aece:	4b19      	ldr	r3, [pc, #100]	; (800af34 <tcp_kill_prio+0x94>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	e01f      	b.n	800af16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	7d5b      	ldrb	r3, [r3, #21]
 800aeda:	7afa      	ldrb	r2, [r7, #11]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d80c      	bhi.n	800aefa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d112      	bne.n	800af10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aeea:	4b13      	ldr	r3, [pc, #76]	; (800af38 <tcp_kill_prio+0x98>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d80a      	bhi.n	800af10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800aefa:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <tcp_kill_prio+0x98>)
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	7d5b      	ldrb	r3, [r3, #21]
 800af0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1dc      	bne.n	800aed6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d004      	beq.n	800af2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800af22:	6938      	ldr	r0, [r7, #16]
 800af24:	f7ff fa56 	bl	800a3d4 <tcp_abort>
 800af28:	e000      	b.n	800af2c <tcp_kill_prio+0x8c>
    return;
 800af2a:	bf00      	nop
  }
}
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	2400bc30 	.word	0x2400bc30
 800af38:	2400bc24 	.word	0x2400bc24

0800af3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	2b08      	cmp	r3, #8
 800af4a:	d009      	beq.n	800af60 <tcp_kill_state+0x24>
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	2b09      	cmp	r3, #9
 800af50:	d006      	beq.n	800af60 <tcp_kill_state+0x24>
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <tcp_kill_state+0x80>)
 800af54:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800af58:	4919      	ldr	r1, [pc, #100]	; (800afc0 <tcp_kill_state+0x84>)
 800af5a:	481a      	ldr	r0, [pc, #104]	; (800afc4 <tcp_kill_state+0x88>)
 800af5c:	f004 fed8 	bl	800fd10 <iprintf>

  inactivity = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800af64:	2300      	movs	r3, #0
 800af66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af68:	4b17      	ldr	r3, [pc, #92]	; (800afc8 <tcp_kill_state+0x8c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	e017      	b.n	800afa0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
 800af74:	79fa      	ldrb	r2, [r7, #7]
 800af76:	429a      	cmp	r2, r3
 800af78:	d10f      	bne.n	800af9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800af7a:	4b14      	ldr	r3, [pc, #80]	; (800afcc <tcp_kill_state+0x90>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	429a      	cmp	r2, r3
 800af88:	d807      	bhi.n	800af9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <tcp_kill_state+0x90>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e4      	bne.n	800af70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800afac:	2100      	movs	r1, #0
 800afae:	6938      	ldr	r0, [r7, #16]
 800afb0:	f7ff f952 	bl	800a258 <tcp_abandon>
  }
}
 800afb4:	bf00      	nop
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08012174 	.word	0x08012174
 800afc0:	08012730 	.word	0x08012730
 800afc4:	080121e8 	.word	0x080121e8
 800afc8:	2400bc30 	.word	0x2400bc30
 800afcc:	2400bc24 	.word	0x2400bc24

0800afd0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800afde:	4b12      	ldr	r3, [pc, #72]	; (800b028 <tcp_kill_timewait+0x58>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e012      	b.n	800b00c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800afe6:	4b11      	ldr	r3, [pc, #68]	; (800b02c <tcp_kill_timewait+0x5c>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d807      	bhi.n	800b006 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <tcp_kill_timewait+0x5c>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e9      	bne.n	800afe6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b018:	68b8      	ldr	r0, [r7, #8]
 800b01a:	f7ff f9db 	bl	800a3d4 <tcp_abort>
  }
}
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	2400bc34 	.word	0x2400bc34
 800b02c:	2400bc24 	.word	0x2400bc24

0800b030 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <tcp_handle_closepend+0x48>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b03c:	e014      	b.n	800b068 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8b5b      	ldrh	r3, [r3, #26]
 800b048:	f003 0308 	and.w	r3, r3, #8
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8b5b      	ldrh	r3, [r3, #26]
 800b054:	f023 0308 	bic.w	r3, r3, #8
 800b058:	b29a      	uxth	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff f864 	bl	800a12c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e7      	bne.n	800b03e <tcp_handle_closepend+0xe>
  }
}
 800b06e:	bf00      	nop
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	2400bc30 	.word	0x2400bc30

0800b07c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b086:	2001      	movs	r0, #1
 800b088:	f7fd fd48 	bl	8008b1c <memp_malloc>
 800b08c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d126      	bne.n	800b0e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b094:	f7ff ffcc 	bl	800b030 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b098:	f7ff ff9a 	bl	800afd0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7fd fd3d 	bl	8008b1c <memp_malloc>
 800b0a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11b      	bne.n	800b0e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b0aa:	2009      	movs	r0, #9
 800b0ac:	f7ff ff46 	bl	800af3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7fd fd33 	bl	8008b1c <memp_malloc>
 800b0b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d111      	bne.n	800b0e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b0be:	2008      	movs	r0, #8
 800b0c0:	f7ff ff3c 	bl	800af3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	f7fd fd29 	bl	8008b1c <memp_malloc>
 800b0ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d107      	bne.n	800b0e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fee3 	bl	800aea0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f7fd fd1e 	bl	8008b1c <memp_malloc>
 800b0e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d03f      	beq.n	800b168 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b0e8:	229c      	movs	r2, #156	; 0x9c
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f004 fe07 	bl	800fd00 <memset>
    pcb->prio = prio;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	79fa      	ldrb	r2, [r7, #7]
 800b0f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b0fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	22ff      	movs	r2, #255	; 0xff
 800b116:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b11e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2206      	movs	r2, #6
 800b124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2206      	movs	r2, #6
 800b12c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b134:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b13e:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <tcp_alloc+0xf8>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b146:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <tcp_alloc+0xfc>)
 800b148:	781a      	ldrb	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b154:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4a08      	ldr	r2, [pc, #32]	; (800b17c <tcp_alloc+0x100>)
 800b15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	4a07      	ldr	r2, [pc, #28]	; (800b180 <tcp_alloc+0x104>)
 800b164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b168:	68fb      	ldr	r3, [r7, #12]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	2400bc24 	.word	0x2400bc24
 800b178:	2400bc3a 	.word	0x2400bc3a
 800b17c:	0800ae35 	.word	0x0800ae35
 800b180:	006ddd00 	.word	0x006ddd00

0800b184 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d107      	bne.n	800b1a2 <tcp_pcb_purge+0x1e>
 800b192:	4b21      	ldr	r3, [pc, #132]	; (800b218 <tcp_pcb_purge+0x94>)
 800b194:	f640 0251 	movw	r2, #2129	; 0x851
 800b198:	4920      	ldr	r1, [pc, #128]	; (800b21c <tcp_pcb_purge+0x98>)
 800b19a:	4821      	ldr	r0, [pc, #132]	; (800b220 <tcp_pcb_purge+0x9c>)
 800b19c:	f004 fdb8 	bl	800fd10 <iprintf>
 800b1a0:	e037      	b.n	800b212 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d033      	beq.n	800b212 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b1ae:	2b0a      	cmp	r3, #10
 800b1b0:	d02f      	beq.n	800b212 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d02b      	beq.n	800b212 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d007      	beq.n	800b1d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fb6c 	bl	80098a4 <pbuf_free>
      pcb->refused_data = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f986 	bl	800b4ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1e6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fdc7 	bl	800ad80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fdc2 	bl	800ad80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	66da      	str	r2, [r3, #108]	; 0x6c
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	08012174 	.word	0x08012174
 800b21c:	080127f0 	.word	0x080127f0
 800b220:	080121e8 	.word	0x080121e8

0800b224 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d106      	bne.n	800b242 <tcp_pcb_remove+0x1e>
 800b234:	4b3e      	ldr	r3, [pc, #248]	; (800b330 <tcp_pcb_remove+0x10c>)
 800b236:	f640 0283 	movw	r2, #2179	; 0x883
 800b23a:	493e      	ldr	r1, [pc, #248]	; (800b334 <tcp_pcb_remove+0x110>)
 800b23c:	483e      	ldr	r0, [pc, #248]	; (800b338 <tcp_pcb_remove+0x114>)
 800b23e:	f004 fd67 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d106      	bne.n	800b256 <tcp_pcb_remove+0x32>
 800b248:	4b39      	ldr	r3, [pc, #228]	; (800b330 <tcp_pcb_remove+0x10c>)
 800b24a:	f640 0284 	movw	r2, #2180	; 0x884
 800b24e:	493b      	ldr	r1, [pc, #236]	; (800b33c <tcp_pcb_remove+0x118>)
 800b250:	4839      	ldr	r0, [pc, #228]	; (800b338 <tcp_pcb_remove+0x114>)
 800b252:	f004 fd5d 	bl	800fd10 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d105      	bne.n	800b26c <tcp_pcb_remove+0x48>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	e013      	b.n	800b294 <tcp_pcb_remove+0x70>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	e00c      	b.n	800b28e <tcp_pcb_remove+0x6a>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d104      	bne.n	800b288 <tcp_pcb_remove+0x64>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	60da      	str	r2, [r3, #12]
 800b286:	e005      	b.n	800b294 <tcp_pcb_remove+0x70>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1ef      	bne.n	800b274 <tcp_pcb_remove+0x50>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2200      	movs	r2, #0
 800b298:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b29a:	6838      	ldr	r0, [r7, #0]
 800b29c:	f7ff ff72 	bl	800b184 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	7d1b      	ldrb	r3, [r3, #20]
 800b2a4:	2b0a      	cmp	r3, #10
 800b2a6:	d013      	beq.n	800b2d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d00f      	beq.n	800b2d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	8b5b      	ldrh	r3, [r3, #26]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d009      	beq.n	800b2d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	8b5b      	ldrh	r3, [r3, #26]
 800b2c0:	f043 0302 	orr.w	r3, r3, #2
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b2ca:	6838      	ldr	r0, [r7, #0]
 800b2cc:	f002 ff6e 	bl	800e1ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	7d1b      	ldrb	r3, [r3, #20]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d020      	beq.n	800b31a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d006      	beq.n	800b2ee <tcp_pcb_remove+0xca>
 800b2e0:	4b13      	ldr	r3, [pc, #76]	; (800b330 <tcp_pcb_remove+0x10c>)
 800b2e2:	f640 0293 	movw	r2, #2195	; 0x893
 800b2e6:	4916      	ldr	r1, [pc, #88]	; (800b340 <tcp_pcb_remove+0x11c>)
 800b2e8:	4813      	ldr	r0, [pc, #76]	; (800b338 <tcp_pcb_remove+0x114>)
 800b2ea:	f004 fd11 	bl	800fd10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d006      	beq.n	800b304 <tcp_pcb_remove+0xe0>
 800b2f6:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <tcp_pcb_remove+0x10c>)
 800b2f8:	f640 0294 	movw	r2, #2196	; 0x894
 800b2fc:	4911      	ldr	r1, [pc, #68]	; (800b344 <tcp_pcb_remove+0x120>)
 800b2fe:	480e      	ldr	r0, [pc, #56]	; (800b338 <tcp_pcb_remove+0x114>)
 800b300:	f004 fd06 	bl	800fd10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <tcp_pcb_remove+0xf6>
 800b30c:	4b08      	ldr	r3, [pc, #32]	; (800b330 <tcp_pcb_remove+0x10c>)
 800b30e:	f640 0296 	movw	r2, #2198	; 0x896
 800b312:	490d      	ldr	r1, [pc, #52]	; (800b348 <tcp_pcb_remove+0x124>)
 800b314:	4808      	ldr	r0, [pc, #32]	; (800b338 <tcp_pcb_remove+0x114>)
 800b316:	f004 fcfb 	bl	800fd10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2200      	movs	r2, #0
 800b31e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2200      	movs	r2, #0
 800b324:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b326:	bf00      	nop
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	08012174 	.word	0x08012174
 800b334:	0801280c 	.word	0x0801280c
 800b338:	080121e8 	.word	0x080121e8
 800b33c:	08012828 	.word	0x08012828
 800b340:	08012848 	.word	0x08012848
 800b344:	08012860 	.word	0x08012860
 800b348:	0801287c 	.word	0x0801287c

0800b34c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <tcp_next_iss+0x1c>
 800b35a:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <tcp_next_iss+0x38>)
 800b35c:	f640 02af 	movw	r2, #2223	; 0x8af
 800b360:	4909      	ldr	r1, [pc, #36]	; (800b388 <tcp_next_iss+0x3c>)
 800b362:	480a      	ldr	r0, [pc, #40]	; (800b38c <tcp_next_iss+0x40>)
 800b364:	f004 fcd4 	bl	800fd10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <tcp_next_iss+0x44>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	4b09      	ldr	r3, [pc, #36]	; (800b394 <tcp_next_iss+0x48>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4413      	add	r3, r2
 800b372:	4a07      	ldr	r2, [pc, #28]	; (800b390 <tcp_next_iss+0x44>)
 800b374:	6013      	str	r3, [r2, #0]
  return iss;
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <tcp_next_iss+0x44>)
 800b378:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	08012174 	.word	0x08012174
 800b388:	08012894 	.word	0x08012894
 800b38c:	080121e8 	.word	0x080121e8
 800b390:	2400002c 	.word	0x2400002c
 800b394:	2400bc24 	.word	0x2400bc24

0800b398 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <tcp_eff_send_mss_netif+0x22>
 800b3ac:	4b14      	ldr	r3, [pc, #80]	; (800b400 <tcp_eff_send_mss_netif+0x68>)
 800b3ae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b3b2:	4914      	ldr	r1, [pc, #80]	; (800b404 <tcp_eff_send_mss_netif+0x6c>)
 800b3b4:	4814      	ldr	r0, [pc, #80]	; (800b408 <tcp_eff_send_mss_netif+0x70>)
 800b3b6:	f004 fcab 	bl	800fd10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b3c0:	89fb      	ldrh	r3, [r7, #14]
 800b3c2:	e019      	b.n	800b3f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b3c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b3ca:	8afb      	ldrh	r3, [r7, #22]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d012      	beq.n	800b3f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b3d0:	2328      	movs	r3, #40	; 0x28
 800b3d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b3d4:	8afa      	ldrh	r2, [r7, #22]
 800b3d6:	8abb      	ldrh	r3, [r7, #20]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d904      	bls.n	800b3e6 <tcp_eff_send_mss_netif+0x4e>
 800b3dc:	8afa      	ldrh	r2, [r7, #22]
 800b3de:	8abb      	ldrh	r3, [r7, #20]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	e000      	b.n	800b3e8 <tcp_eff_send_mss_netif+0x50>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b3ea:	8a7a      	ldrh	r2, [r7, #18]
 800b3ec:	89fb      	ldrh	r3, [r7, #14]
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	bf28      	it	cs
 800b3f2:	4613      	movcs	r3, r2
 800b3f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b3f6:	89fb      	ldrh	r3, [r7, #14]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	08012174 	.word	0x08012174
 800b404:	080128b0 	.word	0x080128b0
 800b408:	080121e8 	.word	0x080121e8

0800b40c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d119      	bne.n	800b454 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b420:	4b10      	ldr	r3, [pc, #64]	; (800b464 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b422:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b426:	4910      	ldr	r1, [pc, #64]	; (800b468 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b428:	4810      	ldr	r0, [pc, #64]	; (800b46c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b42a:	f004 fc71 	bl	800fd10 <iprintf>

  while (pcb != NULL) {
 800b42e:	e011      	b.n	800b454 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d108      	bne.n	800b44e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7fe ffc6 	bl	800a3d4 <tcp_abort>
      pcb = next;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e002      	b.n	800b454 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1ea      	bne.n	800b430 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	08012174 	.word	0x08012174
 800b468:	080128d8 	.word	0x080128d8
 800b46c:	080121e8 	.word	0x080121e8

0800b470 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d02a      	beq.n	800b4d6 <tcp_netif_ip_addr_changed+0x66>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d026      	beq.n	800b4d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b488:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <tcp_netif_ip_addr_changed+0x70>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff ffbc 	bl	800b40c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b494:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <tcp_netif_ip_addr_changed+0x74>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7ff ffb6 	bl	800b40c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d017      	beq.n	800b4d6 <tcp_netif_ip_addr_changed+0x66>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d013      	beq.n	800b4d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b4ae:	4b0e      	ldr	r3, [pc, #56]	; (800b4e8 <tcp_netif_ip_addr_changed+0x78>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e00c      	b.n	800b4d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d103      	bne.n	800b4ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1ef      	bne.n	800b4b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	2400bc30 	.word	0x2400bc30
 800b4e4:	2400bc28 	.word	0x2400bc28
 800b4e8:	2400bc2c 	.word	0x2400bc2c

0800b4ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d007      	beq.n	800b50c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fc3d 	bl	800ad80 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b08d      	sub	sp, #52	; 0x34
 800b518:	af04      	add	r7, sp, #16
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d105      	bne.n	800b530 <tcp_input+0x1c>
 800b524:	4b9b      	ldr	r3, [pc, #620]	; (800b794 <tcp_input+0x280>)
 800b526:	2283      	movs	r2, #131	; 0x83
 800b528:	499b      	ldr	r1, [pc, #620]	; (800b798 <tcp_input+0x284>)
 800b52a:	489c      	ldr	r0, [pc, #624]	; (800b79c <tcp_input+0x288>)
 800b52c:	f004 fbf0 	bl	800fd10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	4a9a      	ldr	r2, [pc, #616]	; (800b7a0 <tcp_input+0x28c>)
 800b536:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	895b      	ldrh	r3, [r3, #10]
 800b53c:	2b13      	cmp	r3, #19
 800b53e:	f240 83d1 	bls.w	800bce4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b542:	4b98      	ldr	r3, [pc, #608]	; (800b7a4 <tcp_input+0x290>)
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	4a97      	ldr	r2, [pc, #604]	; (800b7a4 <tcp_input+0x290>)
 800b548:	6812      	ldr	r2, [r2, #0]
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fc f847 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	f040 83c7 	bne.w	800bce8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b55a:	4b92      	ldr	r3, [pc, #584]	; (800b7a4 <tcp_input+0x290>)
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b562:	2be0      	cmp	r3, #224	; 0xe0
 800b564:	f000 83c0 	beq.w	800bce8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b568:	4b8d      	ldr	r3, [pc, #564]	; (800b7a0 <tcp_input+0x28c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	899b      	ldrh	r3, [r3, #12]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	4618      	mov	r0, r3
 800b572:	f7fa fac9 	bl	8005b08 <lwip_htons>
 800b576:	4603      	mov	r3, r0
 800b578:	0b1b      	lsrs	r3, r3, #12
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b582:	7cbb      	ldrb	r3, [r7, #18]
 800b584:	2b13      	cmp	r3, #19
 800b586:	f240 83b1 	bls.w	800bcec <tcp_input+0x7d8>
 800b58a:	7cbb      	ldrb	r3, [r7, #18]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	891b      	ldrh	r3, [r3, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	f200 83aa 	bhi.w	800bcec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b598:	7cbb      	ldrb	r3, [r7, #18]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b14      	subs	r3, #20
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	4b81      	ldr	r3, [pc, #516]	; (800b7a8 <tcp_input+0x294>)
 800b5a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b5a4:	4b81      	ldr	r3, [pc, #516]	; (800b7ac <tcp_input+0x298>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	895a      	ldrh	r2, [r3, #10]
 800b5ae:	7cbb      	ldrb	r3, [r7, #18]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d309      	bcc.n	800b5ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b5b6:	4b7c      	ldr	r3, [pc, #496]	; (800b7a8 <tcp_input+0x294>)
 800b5b8:	881a      	ldrh	r2, [r3, #0]
 800b5ba:	4b7d      	ldr	r3, [pc, #500]	; (800b7b0 <tcp_input+0x29c>)
 800b5bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b5be:	7cbb      	ldrb	r3, [r7, #18]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fe f8e8 	bl	8009798 <pbuf_remove_header>
 800b5c8:	e04e      	b.n	800b668 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d105      	bne.n	800b5de <tcp_input+0xca>
 800b5d2:	4b70      	ldr	r3, [pc, #448]	; (800b794 <tcp_input+0x280>)
 800b5d4:	22c2      	movs	r2, #194	; 0xc2
 800b5d6:	4977      	ldr	r1, [pc, #476]	; (800b7b4 <tcp_input+0x2a0>)
 800b5d8:	4870      	ldr	r0, [pc, #448]	; (800b79c <tcp_input+0x288>)
 800b5da:	f004 fb99 	bl	800fd10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b5de:	2114      	movs	r1, #20
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7fe f8d9 	bl	8009798 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	895a      	ldrh	r2, [r3, #10]
 800b5ea:	4b71      	ldr	r3, [pc, #452]	; (800b7b0 <tcp_input+0x29c>)
 800b5ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b5ee:	4b6e      	ldr	r3, [pc, #440]	; (800b7a8 <tcp_input+0x294>)
 800b5f0:	881a      	ldrh	r2, [r3, #0]
 800b5f2:	4b6f      	ldr	r3, [pc, #444]	; (800b7b0 <tcp_input+0x29c>)
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b5fa:	4b6d      	ldr	r3, [pc, #436]	; (800b7b0 <tcp_input+0x29c>)
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe f8c9 	bl	8009798 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	895b      	ldrh	r3, [r3, #10]
 800b60c:	8a3a      	ldrh	r2, [r7, #16]
 800b60e:	429a      	cmp	r2, r3
 800b610:	f200 836e 	bhi.w	800bcf0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	4a64      	ldr	r2, [pc, #400]	; (800b7ac <tcp_input+0x298>)
 800b61c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	8a3a      	ldrh	r2, [r7, #16]
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe f8b6 	bl	8009798 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	891a      	ldrh	r2, [r3, #8]
 800b630:	8a3b      	ldrh	r3, [r7, #16]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	b29a      	uxth	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	895b      	ldrh	r3, [r3, #10]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <tcp_input+0x13a>
 800b642:	4b54      	ldr	r3, [pc, #336]	; (800b794 <tcp_input+0x280>)
 800b644:	22df      	movs	r2, #223	; 0xdf
 800b646:	495c      	ldr	r1, [pc, #368]	; (800b7b8 <tcp_input+0x2a4>)
 800b648:	4854      	ldr	r0, [pc, #336]	; (800b79c <tcp_input+0x288>)
 800b64a:	f004 fb61 	bl	800fd10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	891a      	ldrh	r2, [r3, #8]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	891b      	ldrh	r3, [r3, #8]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d005      	beq.n	800b668 <tcp_input+0x154>
 800b65c:	4b4d      	ldr	r3, [pc, #308]	; (800b794 <tcp_input+0x280>)
 800b65e:	22e0      	movs	r2, #224	; 0xe0
 800b660:	4956      	ldr	r1, [pc, #344]	; (800b7bc <tcp_input+0x2a8>)
 800b662:	484e      	ldr	r0, [pc, #312]	; (800b79c <tcp_input+0x288>)
 800b664:	f004 fb54 	bl	800fd10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b668:	4b4d      	ldr	r3, [pc, #308]	; (800b7a0 <tcp_input+0x28c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4a4b      	ldr	r2, [pc, #300]	; (800b7a0 <tcp_input+0x28c>)
 800b672:	6814      	ldr	r4, [r2, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f7fa fa47 	bl	8005b08 <lwip_htons>
 800b67a:	4603      	mov	r3, r0
 800b67c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b67e:	4b48      	ldr	r3, [pc, #288]	; (800b7a0 <tcp_input+0x28c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	885b      	ldrh	r3, [r3, #2]
 800b684:	b29b      	uxth	r3, r3
 800b686:	4a46      	ldr	r2, [pc, #280]	; (800b7a0 <tcp_input+0x28c>)
 800b688:	6814      	ldr	r4, [r2, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fa fa3c 	bl	8005b08 <lwip_htons>
 800b690:	4603      	mov	r3, r0
 800b692:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b694:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <tcp_input+0x28c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	4a41      	ldr	r2, [pc, #260]	; (800b7a0 <tcp_input+0x28c>)
 800b69c:	6814      	ldr	r4, [r2, #0]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fa fa47 	bl	8005b32 <lwip_htonl>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	6063      	str	r3, [r4, #4]
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	4a45      	ldr	r2, [pc, #276]	; (800b7c0 <tcp_input+0x2ac>)
 800b6ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b6ae:	4b3c      	ldr	r3, [pc, #240]	; (800b7a0 <tcp_input+0x28c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	4a3a      	ldr	r2, [pc, #232]	; (800b7a0 <tcp_input+0x28c>)
 800b6b6:	6814      	ldr	r4, [r2, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fa fa3a 	bl	8005b32 <lwip_htonl>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	60a3      	str	r3, [r4, #8]
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	4a3f      	ldr	r2, [pc, #252]	; (800b7c4 <tcp_input+0x2b0>)
 800b6c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b6c8:	4b35      	ldr	r3, [pc, #212]	; (800b7a0 <tcp_input+0x28c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	89db      	ldrh	r3, [r3, #14]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4a33      	ldr	r2, [pc, #204]	; (800b7a0 <tcp_input+0x28c>)
 800b6d2:	6814      	ldr	r4, [r2, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fa fa17 	bl	8005b08 <lwip_htons>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b6de:	4b30      	ldr	r3, [pc, #192]	; (800b7a0 <tcp_input+0x28c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	899b      	ldrh	r3, [r3, #12]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fa fa0e 	bl	8005b08 <lwip_htons>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	4b34      	ldr	r3, [pc, #208]	; (800b7c8 <tcp_input+0x2b4>)
 800b6f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	891a      	ldrh	r2, [r3, #8]
 800b6fe:	4b33      	ldr	r3, [pc, #204]	; (800b7cc <tcp_input+0x2b8>)
 800b700:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b702:	4b31      	ldr	r3, [pc, #196]	; (800b7c8 <tcp_input+0x2b4>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	f003 0303 	and.w	r3, r3, #3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00c      	beq.n	800b728 <tcp_input+0x214>
    tcplen++;
 800b70e:	4b2f      	ldr	r3, [pc, #188]	; (800b7cc <tcp_input+0x2b8>)
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	3301      	adds	r3, #1
 800b714:	b29a      	uxth	r2, r3
 800b716:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <tcp_input+0x2b8>)
 800b718:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	891a      	ldrh	r2, [r3, #8]
 800b71e:	4b2b      	ldr	r3, [pc, #172]	; (800b7cc <tcp_input+0x2b8>)
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	f200 82e6 	bhi.w	800bcf4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b728:	2300      	movs	r3, #0
 800b72a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b72c:	4b28      	ldr	r3, [pc, #160]	; (800b7d0 <tcp_input+0x2bc>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	61fb      	str	r3, [r7, #28]
 800b732:	e09d      	b.n	800b870 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	7d1b      	ldrb	r3, [r3, #20]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d105      	bne.n	800b748 <tcp_input+0x234>
 800b73c:	4b15      	ldr	r3, [pc, #84]	; (800b794 <tcp_input+0x280>)
 800b73e:	22fb      	movs	r2, #251	; 0xfb
 800b740:	4924      	ldr	r1, [pc, #144]	; (800b7d4 <tcp_input+0x2c0>)
 800b742:	4816      	ldr	r0, [pc, #88]	; (800b79c <tcp_input+0x288>)
 800b744:	f004 fae4 	bl	800fd10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	7d1b      	ldrb	r3, [r3, #20]
 800b74c:	2b0a      	cmp	r3, #10
 800b74e:	d105      	bne.n	800b75c <tcp_input+0x248>
 800b750:	4b10      	ldr	r3, [pc, #64]	; (800b794 <tcp_input+0x280>)
 800b752:	22fc      	movs	r2, #252	; 0xfc
 800b754:	4920      	ldr	r1, [pc, #128]	; (800b7d8 <tcp_input+0x2c4>)
 800b756:	4811      	ldr	r0, [pc, #68]	; (800b79c <tcp_input+0x288>)
 800b758:	f004 fada 	bl	800fd10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	7d1b      	ldrb	r3, [r3, #20]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d105      	bne.n	800b770 <tcp_input+0x25c>
 800b764:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <tcp_input+0x280>)
 800b766:	22fd      	movs	r2, #253	; 0xfd
 800b768:	491c      	ldr	r1, [pc, #112]	; (800b7dc <tcp_input+0x2c8>)
 800b76a:	480c      	ldr	r0, [pc, #48]	; (800b79c <tcp_input+0x288>)
 800b76c:	f004 fad0 	bl	800fd10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	7a1b      	ldrb	r3, [r3, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d033      	beq.n	800b7e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	7a1a      	ldrb	r2, [r3, #8]
 800b77c:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <tcp_input+0x290>)
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b784:	3301      	adds	r3, #1
 800b786:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b788:	429a      	cmp	r2, r3
 800b78a:	d029      	beq.n	800b7e0 <tcp_input+0x2cc>
      prev = pcb;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	61bb      	str	r3, [r7, #24]
      continue;
 800b790:	e06b      	b.n	800b86a <tcp_input+0x356>
 800b792:	bf00      	nop
 800b794:	0801290c 	.word	0x0801290c
 800b798:	08012970 	.word	0x08012970
 800b79c:	08012988 	.word	0x08012988
 800b7a0:	2400bc4c 	.word	0x2400bc4c
 800b7a4:	24008cfc 	.word	0x24008cfc
 800b7a8:	2400bc50 	.word	0x2400bc50
 800b7ac:	2400bc54 	.word	0x2400bc54
 800b7b0:	2400bc52 	.word	0x2400bc52
 800b7b4:	080129b0 	.word	0x080129b0
 800b7b8:	080129c0 	.word	0x080129c0
 800b7bc:	080129cc 	.word	0x080129cc
 800b7c0:	2400bc5c 	.word	0x2400bc5c
 800b7c4:	2400bc60 	.word	0x2400bc60
 800b7c8:	2400bc68 	.word	0x2400bc68
 800b7cc:	2400bc66 	.word	0x2400bc66
 800b7d0:	2400bc30 	.word	0x2400bc30
 800b7d4:	080129ec 	.word	0x080129ec
 800b7d8:	08012a14 	.word	0x08012a14
 800b7dc:	08012a40 	.word	0x08012a40
    }

    if (pcb->remote_port == tcphdr->src &&
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	8b1a      	ldrh	r2, [r3, #24]
 800b7e4:	4b72      	ldr	r3, [pc, #456]	; (800b9b0 <tcp_input+0x49c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d13a      	bne.n	800b866 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	8ada      	ldrh	r2, [r3, #22]
 800b7f4:	4b6e      	ldr	r3, [pc, #440]	; (800b9b0 <tcp_input+0x49c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d132      	bne.n	800b866 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	4b6b      	ldr	r3, [pc, #428]	; (800b9b4 <tcp_input+0x4a0>)
 800b806:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b808:	429a      	cmp	r2, r3
 800b80a:	d12c      	bne.n	800b866 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	4b68      	ldr	r3, [pc, #416]	; (800b9b4 <tcp_input+0x4a0>)
 800b812:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b814:	429a      	cmp	r2, r3
 800b816:	d126      	bne.n	800b866 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d106      	bne.n	800b830 <tcp_input+0x31c>
 800b822:	4b65      	ldr	r3, [pc, #404]	; (800b9b8 <tcp_input+0x4a4>)
 800b824:	f240 120d 	movw	r2, #269	; 0x10d
 800b828:	4964      	ldr	r1, [pc, #400]	; (800b9bc <tcp_input+0x4a8>)
 800b82a:	4865      	ldr	r0, [pc, #404]	; (800b9c0 <tcp_input+0x4ac>)
 800b82c:	f004 fa70 	bl	800fd10 <iprintf>
      if (prev != NULL) {
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00a      	beq.n	800b84c <tcp_input+0x338>
        prev->next = pcb->next;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b83e:	4b61      	ldr	r3, [pc, #388]	; (800b9c4 <tcp_input+0x4b0>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b846:	4a5f      	ldr	r2, [pc, #380]	; (800b9c4 <tcp_input+0x4b0>)
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	429a      	cmp	r2, r3
 800b854:	d111      	bne.n	800b87a <tcp_input+0x366>
 800b856:	4b58      	ldr	r3, [pc, #352]	; (800b9b8 <tcp_input+0x4a4>)
 800b858:	f240 1215 	movw	r2, #277	; 0x115
 800b85c:	495a      	ldr	r1, [pc, #360]	; (800b9c8 <tcp_input+0x4b4>)
 800b85e:	4858      	ldr	r0, [pc, #352]	; (800b9c0 <tcp_input+0x4ac>)
 800b860:	f004 fa56 	bl	800fd10 <iprintf>
      break;
 800b864:	e009      	b.n	800b87a <tcp_input+0x366>
    }
    prev = pcb;
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	61fb      	str	r3, [r7, #28]
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f47f af5e 	bne.w	800b734 <tcp_input+0x220>
 800b878:	e000      	b.n	800b87c <tcp_input+0x368>
      break;
 800b87a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f040 80aa 	bne.w	800b9d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b884:	4b51      	ldr	r3, [pc, #324]	; (800b9cc <tcp_input+0x4b8>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	e03f      	b.n	800b90c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	7d1b      	ldrb	r3, [r3, #20]
 800b890:	2b0a      	cmp	r3, #10
 800b892:	d006      	beq.n	800b8a2 <tcp_input+0x38e>
 800b894:	4b48      	ldr	r3, [pc, #288]	; (800b9b8 <tcp_input+0x4a4>)
 800b896:	f240 121f 	movw	r2, #287	; 0x11f
 800b89a:	494d      	ldr	r1, [pc, #308]	; (800b9d0 <tcp_input+0x4bc>)
 800b89c:	4848      	ldr	r0, [pc, #288]	; (800b9c0 <tcp_input+0x4ac>)
 800b89e:	f004 fa37 	bl	800fd10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	7a1b      	ldrb	r3, [r3, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d009      	beq.n	800b8be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	7a1a      	ldrb	r2, [r3, #8]
 800b8ae:	4b41      	ldr	r3, [pc, #260]	; (800b9b4 <tcp_input+0x4a0>)
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d122      	bne.n	800b904 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	8b1a      	ldrh	r2, [r3, #24]
 800b8c2:	4b3b      	ldr	r3, [pc, #236]	; (800b9b0 <tcp_input+0x49c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d11b      	bne.n	800b906 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	8ada      	ldrh	r2, [r3, #22]
 800b8d2:	4b37      	ldr	r3, [pc, #220]	; (800b9b0 <tcp_input+0x49c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	885b      	ldrh	r3, [r3, #2]
 800b8d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d113      	bne.n	800b906 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <tcp_input+0x4a0>)
 800b8e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d10d      	bne.n	800b906 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <tcp_input+0x4a0>)
 800b8f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d107      	bne.n	800b906 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b8f6:	69f8      	ldr	r0, [r7, #28]
 800b8f8:	f000 fb56 	bl	800bfa8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7fd ffd1 	bl	80098a4 <pbuf_free>
        return;
 800b902:	e1fd      	b.n	800bd00 <tcp_input+0x7ec>
        continue;
 800b904:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1bc      	bne.n	800b88c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b916:	4b2f      	ldr	r3, [pc, #188]	; (800b9d4 <tcp_input+0x4c0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	617b      	str	r3, [r7, #20]
 800b91c:	e02a      	b.n	800b974 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	7a1b      	ldrb	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00c      	beq.n	800b940 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	7a1a      	ldrb	r2, [r3, #8]
 800b92a:	4b22      	ldr	r3, [pc, #136]	; (800b9b4 <tcp_input+0x4a0>)
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b932:	3301      	adds	r3, #1
 800b934:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b936:	429a      	cmp	r2, r3
 800b938:	d002      	beq.n	800b940 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	61bb      	str	r3, [r7, #24]
        continue;
 800b93e:	e016      	b.n	800b96e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	8ada      	ldrh	r2, [r3, #22]
 800b944:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <tcp_input+0x49c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	885b      	ldrh	r3, [r3, #2]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d10c      	bne.n	800b96a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	4b17      	ldr	r3, [pc, #92]	; (800b9b4 <tcp_input+0x4a0>)
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d00f      	beq.n	800b97c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <tcp_input+0x46a>
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d009      	beq.n	800b97e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1d1      	bne.n	800b91e <tcp_input+0x40a>
 800b97a:	e000      	b.n	800b97e <tcp_input+0x46a>
            break;
 800b97c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d029      	beq.n	800b9d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b992:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <tcp_input+0x4c0>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b99a:	4a0e      	ldr	r2, [pc, #56]	; (800b9d4 <tcp_input+0x4c0>)
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b9a0:	6978      	ldr	r0, [r7, #20]
 800b9a2:	f000 fa03 	bl	800bdac <tcp_listen_input>
      }
      pbuf_free(p);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fd ff7c 	bl	80098a4 <pbuf_free>
      return;
 800b9ac:	e1a8      	b.n	800bd00 <tcp_input+0x7ec>
 800b9ae:	bf00      	nop
 800b9b0:	2400bc4c 	.word	0x2400bc4c
 800b9b4:	24008cfc 	.word	0x24008cfc
 800b9b8:	0801290c 	.word	0x0801290c
 800b9bc:	08012a68 	.word	0x08012a68
 800b9c0:	08012988 	.word	0x08012988
 800b9c4:	2400bc30 	.word	0x2400bc30
 800b9c8:	08012a94 	.word	0x08012a94
 800b9cc:	2400bc34 	.word	0x2400bc34
 800b9d0:	08012ac0 	.word	0x08012ac0
 800b9d4:	2400bc2c 	.word	0x2400bc2c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 8158 	beq.w	800bc90 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b9e0:	4b95      	ldr	r3, [pc, #596]	; (800bc38 <tcp_input+0x724>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	4b93      	ldr	r3, [pc, #588]	; (800bc38 <tcp_input+0x724>)
 800b9ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b9ee:	4a92      	ldr	r2, [pc, #584]	; (800bc38 <tcp_input+0x724>)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b9f4:	4b91      	ldr	r3, [pc, #580]	; (800bc3c <tcp_input+0x728>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a8f      	ldr	r2, [pc, #572]	; (800bc38 <tcp_input+0x724>)
 800b9fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b9fc:	4b90      	ldr	r3, [pc, #576]	; (800bc40 <tcp_input+0x72c>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ba02:	4b90      	ldr	r3, [pc, #576]	; (800bc44 <tcp_input+0x730>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ba08:	4b8f      	ldr	r3, [pc, #572]	; (800bc48 <tcp_input+0x734>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ba0e:	4b8f      	ldr	r3, [pc, #572]	; (800bc4c <tcp_input+0x738>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d006      	beq.n	800ba28 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7b5b      	ldrb	r3, [r3, #13]
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d017      	beq.n	800ba60 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ba30:	69f8      	ldr	r0, [r7, #28]
 800ba32:	f7ff f929 	bl	800ac88 <tcp_process_refused_data>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f113 0f0d 	cmn.w	r3, #13
 800ba3c:	d007      	beq.n	800ba4e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00c      	beq.n	800ba60 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ba46:	4b82      	ldr	r3, [pc, #520]	; (800bc50 <tcp_input+0x73c>)
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d008      	beq.n	800ba60 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 80e3 	bne.w	800bc1e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ba58:	69f8      	ldr	r0, [r7, #28]
 800ba5a:	f003 f9ad 	bl	800edb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ba5e:	e0de      	b.n	800bc1e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ba60:	4a7c      	ldr	r2, [pc, #496]	; (800bc54 <tcp_input+0x740>)
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ba66:	69f8      	ldr	r0, [r7, #28]
 800ba68:	f000 fb18 	bl	800c09c <tcp_process>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ba70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba74:	f113 0f0d 	cmn.w	r3, #13
 800ba78:	f000 80d3 	beq.w	800bc22 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ba7c:	4b71      	ldr	r3, [pc, #452]	; (800bc44 <tcp_input+0x730>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d015      	beq.n	800bab4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d008      	beq.n	800baa4 <tcp_input+0x590>
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba98:	69fa      	ldr	r2, [r7, #28]
 800ba9a:	6912      	ldr	r2, [r2, #16]
 800ba9c:	f06f 010d 	mvn.w	r1, #13
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800baa4:	69f9      	ldr	r1, [r7, #28]
 800baa6:	486c      	ldr	r0, [pc, #432]	; (800bc58 <tcp_input+0x744>)
 800baa8:	f7ff fbbc 	bl	800b224 <tcp_pcb_remove>
        tcp_free(pcb);
 800baac:	69f8      	ldr	r0, [r7, #28]
 800baae:	f7fe f9a9 	bl	8009e04 <tcp_free>
 800bab2:	e0da      	b.n	800bc6a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bab8:	4b63      	ldr	r3, [pc, #396]	; (800bc48 <tcp_input+0x734>)
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01d      	beq.n	800bafc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bac0:	4b61      	ldr	r3, [pc, #388]	; (800bc48 <tcp_input+0x734>)
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <tcp_input+0x5d2>
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	6910      	ldr	r0, [r2, #16]
 800bada:	89fa      	ldrh	r2, [r7, #14]
 800badc:	69f9      	ldr	r1, [r7, #28]
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	74fb      	strb	r3, [r7, #19]
 800bae4:	e001      	b.n	800baea <tcp_input+0x5d6>
 800bae6:	2300      	movs	r3, #0
 800bae8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800baea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800baee:	f113 0f0d 	cmn.w	r3, #13
 800baf2:	f000 8098 	beq.w	800bc26 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800baf6:	4b54      	ldr	r3, [pc, #336]	; (800bc48 <tcp_input+0x734>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bafc:	69f8      	ldr	r0, [r7, #28]
 800bafe:	f000 f915 	bl	800bd2c <tcp_input_delayed_close>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f040 8090 	bne.w	800bc2a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bb0a:	4b4d      	ldr	r3, [pc, #308]	; (800bc40 <tcp_input+0x72c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d041      	beq.n	800bb96 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d006      	beq.n	800bb28 <tcp_input+0x614>
 800bb1a:	4b50      	ldr	r3, [pc, #320]	; (800bc5c <tcp_input+0x748>)
 800bb1c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bb20:	494f      	ldr	r1, [pc, #316]	; (800bc60 <tcp_input+0x74c>)
 800bb22:	4850      	ldr	r0, [pc, #320]	; (800bc64 <tcp_input+0x750>)
 800bb24:	f004 f8f4 	bl	800fd10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	8b5b      	ldrh	r3, [r3, #26]
 800bb2c:	f003 0310 	and.w	r3, r3, #16
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bb34:	4b42      	ldr	r3, [pc, #264]	; (800bc40 <tcp_input+0x72c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fd feb3 	bl	80098a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bb3e:	69f8      	ldr	r0, [r7, #28]
 800bb40:	f7fe fc48 	bl	800a3d4 <tcp_abort>
            goto aborted;
 800bb44:	e091      	b.n	800bc6a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00c      	beq.n	800bb6a <tcp_input+0x656>
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	6918      	ldr	r0, [r3, #16]
 800bb5a:	4b39      	ldr	r3, [pc, #228]	; (800bc40 <tcp_input+0x72c>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	69f9      	ldr	r1, [r7, #28]
 800bb62:	47a0      	blx	r4
 800bb64:	4603      	mov	r3, r0
 800bb66:	74fb      	strb	r3, [r7, #19]
 800bb68:	e008      	b.n	800bb7c <tcp_input+0x668>
 800bb6a:	4b35      	ldr	r3, [pc, #212]	; (800bc40 <tcp_input+0x72c>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	69f9      	ldr	r1, [r7, #28]
 800bb72:	2000      	movs	r0, #0
 800bb74:	f7ff f95e 	bl	800ae34 <tcp_recv_null>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bb7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb80:	f113 0f0d 	cmn.w	r3, #13
 800bb84:	d053      	beq.n	800bc2e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bb86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bb8e:	4b2c      	ldr	r3, [pc, #176]	; (800bc40 <tcp_input+0x72c>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bb96:	4b2b      	ldr	r3, [pc, #172]	; (800bc44 <tcp_input+0x730>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	f003 0320 	and.w	r3, r3, #32
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d030      	beq.n	800bc04 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d009      	beq.n	800bbbe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbae:	7b5a      	ldrb	r2, [r3, #13]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbb4:	f042 0220 	orr.w	r2, r2, #32
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	735a      	strb	r2, [r3, #13]
 800bbbc:	e022      	b.n	800bc04 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bbc6:	d005      	beq.n	800bbd4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbcc:	3301      	adds	r3, #1
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00b      	beq.n	800bbf6 <tcp_input+0x6e2>
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	6918      	ldr	r0, [r3, #16]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2200      	movs	r2, #0
 800bbec:	69f9      	ldr	r1, [r7, #28]
 800bbee:	47a0      	blx	r4
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	74fb      	strb	r3, [r7, #19]
 800bbf4:	e001      	b.n	800bbfa <tcp_input+0x6e6>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bbfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbfe:	f113 0f0d 	cmn.w	r3, #13
 800bc02:	d016      	beq.n	800bc32 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bc04:	4b13      	ldr	r3, [pc, #76]	; (800bc54 <tcp_input+0x740>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bc0a:	69f8      	ldr	r0, [r7, #28]
 800bc0c:	f000 f88e 	bl	800bd2c <tcp_input_delayed_close>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d128      	bne.n	800bc68 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bc16:	69f8      	ldr	r0, [r7, #28]
 800bc18:	f002 fac8 	bl	800e1ac <tcp_output>
 800bc1c:	e025      	b.n	800bc6a <tcp_input+0x756>
        goto aborted;
 800bc1e:	bf00      	nop
 800bc20:	e023      	b.n	800bc6a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bc22:	bf00      	nop
 800bc24:	e021      	b.n	800bc6a <tcp_input+0x756>
              goto aborted;
 800bc26:	bf00      	nop
 800bc28:	e01f      	b.n	800bc6a <tcp_input+0x756>
          goto aborted;
 800bc2a:	bf00      	nop
 800bc2c:	e01d      	b.n	800bc6a <tcp_input+0x756>
            goto aborted;
 800bc2e:	bf00      	nop
 800bc30:	e01b      	b.n	800bc6a <tcp_input+0x756>
              goto aborted;
 800bc32:	bf00      	nop
 800bc34:	e019      	b.n	800bc6a <tcp_input+0x756>
 800bc36:	bf00      	nop
 800bc38:	2400bc3c 	.word	0x2400bc3c
 800bc3c:	2400bc4c 	.word	0x2400bc4c
 800bc40:	2400bc6c 	.word	0x2400bc6c
 800bc44:	2400bc69 	.word	0x2400bc69
 800bc48:	2400bc64 	.word	0x2400bc64
 800bc4c:	2400bc68 	.word	0x2400bc68
 800bc50:	2400bc66 	.word	0x2400bc66
 800bc54:	2400bc70 	.word	0x2400bc70
 800bc58:	2400bc30 	.word	0x2400bc30
 800bc5c:	0801290c 	.word	0x0801290c
 800bc60:	08012af0 	.word	0x08012af0
 800bc64:	08012988 	.word	0x08012988
          goto aborted;
 800bc68:	bf00      	nop
    tcp_input_pcb = NULL;
 800bc6a:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <tcp_input+0x7f4>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bc70:	4b26      	ldr	r3, [pc, #152]	; (800bd0c <tcp_input+0x7f8>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bc76:	4b26      	ldr	r3, [pc, #152]	; (800bd10 <tcp_input+0x7fc>)
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d03f      	beq.n	800bcfe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bc7e:	4b24      	ldr	r3, [pc, #144]	; (800bd10 <tcp_input+0x7fc>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fe0e 	bl	80098a4 <pbuf_free>
      inseg.p = NULL;
 800bc88:	4b21      	ldr	r3, [pc, #132]	; (800bd10 <tcp_input+0x7fc>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bc8e:	e036      	b.n	800bcfe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bc90:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <tcp_input+0x800>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	899b      	ldrh	r3, [r3, #12]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7f9 ff35 	bl	8005b08 <lwip_htons>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d118      	bne.n	800bcdc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcaa:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <tcp_input+0x804>)
 800bcac:	6819      	ldr	r1, [r3, #0]
 800bcae:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <tcp_input+0x808>)
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4b1a      	ldr	r3, [pc, #104]	; (800bd20 <tcp_input+0x80c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcba:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <tcp_input+0x800>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcbe:	885b      	ldrh	r3, [r3, #2]
 800bcc0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcc2:	4a14      	ldr	r2, [pc, #80]	; (800bd14 <tcp_input+0x800>)
 800bcc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcc6:	8812      	ldrh	r2, [r2, #0]
 800bcc8:	b292      	uxth	r2, r2
 800bcca:	9202      	str	r2, [sp, #8]
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	4b15      	ldr	r3, [pc, #84]	; (800bd24 <tcp_input+0x810>)
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <tcp_input+0x814>)
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	f003 f81c 	bl	800ed14 <tcp_rst>
    pbuf_free(p);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7fd fde1 	bl	80098a4 <pbuf_free>
  return;
 800bce2:	e00c      	b.n	800bcfe <tcp_input+0x7ea>
    goto dropped;
 800bce4:	bf00      	nop
 800bce6:	e006      	b.n	800bcf6 <tcp_input+0x7e2>
    goto dropped;
 800bce8:	bf00      	nop
 800bcea:	e004      	b.n	800bcf6 <tcp_input+0x7e2>
    goto dropped;
 800bcec:	bf00      	nop
 800bcee:	e002      	b.n	800bcf6 <tcp_input+0x7e2>
      goto dropped;
 800bcf0:	bf00      	nop
 800bcf2:	e000      	b.n	800bcf6 <tcp_input+0x7e2>
      goto dropped;
 800bcf4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7fd fdd4 	bl	80098a4 <pbuf_free>
 800bcfc:	e000      	b.n	800bd00 <tcp_input+0x7ec>
  return;
 800bcfe:	bf00      	nop
}
 800bd00:	3724      	adds	r7, #36	; 0x24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd90      	pop	{r4, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	2400bc70 	.word	0x2400bc70
 800bd0c:	2400bc6c 	.word	0x2400bc6c
 800bd10:	2400bc3c 	.word	0x2400bc3c
 800bd14:	2400bc4c 	.word	0x2400bc4c
 800bd18:	2400bc60 	.word	0x2400bc60
 800bd1c:	2400bc66 	.word	0x2400bc66
 800bd20:	2400bc5c 	.word	0x2400bc5c
 800bd24:	24008d0c 	.word	0x24008d0c
 800bd28:	24008d10 	.word	0x24008d10

0800bd2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <tcp_input_delayed_close+0x1c>
 800bd3a:	4b17      	ldr	r3, [pc, #92]	; (800bd98 <tcp_input_delayed_close+0x6c>)
 800bd3c:	f240 225a 	movw	r2, #602	; 0x25a
 800bd40:	4916      	ldr	r1, [pc, #88]	; (800bd9c <tcp_input_delayed_close+0x70>)
 800bd42:	4817      	ldr	r0, [pc, #92]	; (800bda0 <tcp_input_delayed_close+0x74>)
 800bd44:	f003 ffe4 	bl	800fd10 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bd48:	4b16      	ldr	r3, [pc, #88]	; (800bda4 <tcp_input_delayed_close+0x78>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f003 0310 	and.w	r3, r3, #16
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d01c      	beq.n	800bd8e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8b5b      	ldrh	r3, [r3, #26]
 800bd58:	f003 0310 	and.w	r3, r3, #16
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10d      	bne.n	800bd7c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d008      	beq.n	800bd7c <tcp_input_delayed_close+0x50>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6912      	ldr	r2, [r2, #16]
 800bd74:	f06f 010e 	mvn.w	r1, #14
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	480a      	ldr	r0, [pc, #40]	; (800bda8 <tcp_input_delayed_close+0x7c>)
 800bd80:	f7ff fa50 	bl	800b224 <tcp_pcb_remove>
    tcp_free(pcb);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7fe f83d 	bl	8009e04 <tcp_free>
    return 1;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	0801290c 	.word	0x0801290c
 800bd9c:	08012b0c 	.word	0x08012b0c
 800bda0:	08012988 	.word	0x08012988
 800bda4:	2400bc69 	.word	0x2400bc69
 800bda8:	2400bc30 	.word	0x2400bc30

0800bdac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bdac:	b590      	push	{r4, r7, lr}
 800bdae:	b08b      	sub	sp, #44	; 0x2c
 800bdb0:	af04      	add	r7, sp, #16
 800bdb2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bdb4:	4b6f      	ldr	r3, [pc, #444]	; (800bf74 <tcp_listen_input+0x1c8>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 0304 	and.w	r3, r3, #4
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 80d2 	bne.w	800bf66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <tcp_listen_input+0x2a>
 800bdc8:	4b6b      	ldr	r3, [pc, #428]	; (800bf78 <tcp_listen_input+0x1cc>)
 800bdca:	f240 2281 	movw	r2, #641	; 0x281
 800bdce:	496b      	ldr	r1, [pc, #428]	; (800bf7c <tcp_listen_input+0x1d0>)
 800bdd0:	486b      	ldr	r0, [pc, #428]	; (800bf80 <tcp_listen_input+0x1d4>)
 800bdd2:	f003 ff9d 	bl	800fd10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bdd6:	4b67      	ldr	r3, [pc, #412]	; (800bf74 <tcp_listen_input+0x1c8>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 0310 	and.w	r3, r3, #16
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d019      	beq.n	800be16 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bde2:	4b68      	ldr	r3, [pc, #416]	; (800bf84 <tcp_listen_input+0x1d8>)
 800bde4:	6819      	ldr	r1, [r3, #0]
 800bde6:	4b68      	ldr	r3, [pc, #416]	; (800bf88 <tcp_listen_input+0x1dc>)
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	4b67      	ldr	r3, [pc, #412]	; (800bf8c <tcp_listen_input+0x1e0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdf2:	4b67      	ldr	r3, [pc, #412]	; (800bf90 <tcp_listen_input+0x1e4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdf6:	885b      	ldrh	r3, [r3, #2]
 800bdf8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdfa:	4a65      	ldr	r2, [pc, #404]	; (800bf90 <tcp_listen_input+0x1e4>)
 800bdfc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdfe:	8812      	ldrh	r2, [r2, #0]
 800be00:	b292      	uxth	r2, r2
 800be02:	9202      	str	r2, [sp, #8]
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <tcp_listen_input+0x1e8>)
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	4b63      	ldr	r3, [pc, #396]	; (800bf98 <tcp_listen_input+0x1ec>)
 800be0c:	4602      	mov	r2, r0
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f002 ff80 	bl	800ed14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800be14:	e0a9      	b.n	800bf6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800be16:	4b57      	ldr	r3, [pc, #348]	; (800bf74 <tcp_listen_input+0x1c8>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 80a3 	beq.w	800bf6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7d5b      	ldrb	r3, [r3, #21]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff f927 	bl	800b07c <tcp_alloc>
 800be2e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d111      	bne.n	800be5a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <tcp_listen_input+0xa8>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	6910      	ldr	r0, [r2, #16]
 800be46:	f04f 32ff 	mov.w	r2, #4294967295
 800be4a:	2100      	movs	r1, #0
 800be4c:	4798      	blx	r3
 800be4e:	4603      	mov	r3, r0
 800be50:	73bb      	strb	r3, [r7, #14]
      return;
 800be52:	e08b      	b.n	800bf6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800be54:	23f0      	movs	r3, #240	; 0xf0
 800be56:	73bb      	strb	r3, [r7, #14]
      return;
 800be58:	e088      	b.n	800bf6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800be5a:	4b50      	ldr	r3, [pc, #320]	; (800bf9c <tcp_listen_input+0x1f0>)
 800be5c:	695a      	ldr	r2, [r3, #20]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800be62:	4b4e      	ldr	r3, [pc, #312]	; (800bf9c <tcp_listen_input+0x1f0>)
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	8ada      	ldrh	r2, [r3, #22]
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800be72:	4b47      	ldr	r3, [pc, #284]	; (800bf90 <tcp_listen_input+0x1e4>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2203      	movs	r2, #3
 800be82:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800be84:	4b41      	ldr	r3, [pc, #260]	; (800bf8c <tcp_listen_input+0x1e0>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800be96:	6978      	ldr	r0, [r7, #20]
 800be98:	f7ff fa58 	bl	800b34c <tcp_next_iss>
 800be9c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800beb6:	4b35      	ldr	r3, [pc, #212]	; (800bf8c <tcp_listen_input+0x1e0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	1e5a      	subs	r2, r3, #1
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	691a      	ldr	r2, [r3, #16]
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7a5b      	ldrb	r3, [r3, #9]
 800bed2:	f003 030c 	and.w	r3, r3, #12
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7a1a      	ldrb	r2, [r3, #8]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bee4:	4b2e      	ldr	r3, [pc, #184]	; (800bfa0 <tcp_listen_input+0x1f4>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	60da      	str	r2, [r3, #12]
 800beec:	4a2c      	ldr	r2, [pc, #176]	; (800bfa0 <tcp_listen_input+0x1f4>)
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	f003 f8d1 	bl	800f098 <tcp_timer_needed>
 800bef6:	4b2b      	ldr	r3, [pc, #172]	; (800bfa4 <tcp_listen_input+0x1f8>)
 800bef8:	2201      	movs	r2, #1
 800befa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800befc:	6978      	ldr	r0, [r7, #20]
 800befe:	f001 fd8f 	bl	800da20 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bf02:	4b23      	ldr	r3, [pc, #140]	; (800bf90 <tcp_listen_input+0x1e4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	89db      	ldrh	r3, [r3, #14]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fb f8c5 	bl	80070b4 <ip4_route>
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	461a      	mov	r2, r3
 800bf32:	4620      	mov	r0, r4
 800bf34:	f7ff fa30 	bl	800b398 <tcp_eff_send_mss_netif>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bf40:	2112      	movs	r1, #18
 800bf42:	6978      	ldr	r0, [r7, #20]
 800bf44:	f002 f844 	bl	800dfd0 <tcp_enqueue_flags>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bf4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bf54:	2100      	movs	r1, #0
 800bf56:	6978      	ldr	r0, [r7, #20]
 800bf58:	f7fe f97e 	bl	800a258 <tcp_abandon>
      return;
 800bf5c:	e006      	b.n	800bf6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bf5e:	6978      	ldr	r0, [r7, #20]
 800bf60:	f002 f924 	bl	800e1ac <tcp_output>
  return;
 800bf64:	e001      	b.n	800bf6a <tcp_listen_input+0x1be>
    return;
 800bf66:	bf00      	nop
 800bf68:	e000      	b.n	800bf6c <tcp_listen_input+0x1c0>
  return;
 800bf6a:	bf00      	nop
}
 800bf6c:	371c      	adds	r7, #28
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd90      	pop	{r4, r7, pc}
 800bf72:	bf00      	nop
 800bf74:	2400bc68 	.word	0x2400bc68
 800bf78:	0801290c 	.word	0x0801290c
 800bf7c:	08012b34 	.word	0x08012b34
 800bf80:	08012988 	.word	0x08012988
 800bf84:	2400bc60 	.word	0x2400bc60
 800bf88:	2400bc66 	.word	0x2400bc66
 800bf8c:	2400bc5c 	.word	0x2400bc5c
 800bf90:	2400bc4c 	.word	0x2400bc4c
 800bf94:	24008d0c 	.word	0x24008d0c
 800bf98:	24008d10 	.word	0x24008d10
 800bf9c:	24008cfc 	.word	0x24008cfc
 800bfa0:	2400bc30 	.word	0x2400bc30
 800bfa4:	2400bc38 	.word	0x2400bc38

0800bfa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af04      	add	r7, sp, #16
 800bfae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bfb0:	4b2f      	ldr	r3, [pc, #188]	; (800c070 <tcp_timewait_input+0xc8>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d153      	bne.n	800c064 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <tcp_timewait_input+0x28>
 800bfc2:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <tcp_timewait_input+0xcc>)
 800bfc4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bfc8:	492b      	ldr	r1, [pc, #172]	; (800c078 <tcp_timewait_input+0xd0>)
 800bfca:	482c      	ldr	r0, [pc, #176]	; (800c07c <tcp_timewait_input+0xd4>)
 800bfcc:	f003 fea0 	bl	800fd10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bfd0:	4b27      	ldr	r3, [pc, #156]	; (800c070 <tcp_timewait_input+0xc8>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d02a      	beq.n	800c032 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bfdc:	4b28      	ldr	r3, [pc, #160]	; (800c080 <tcp_timewait_input+0xd8>)
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	db2d      	blt.n	800c046 <tcp_timewait_input+0x9e>
 800bfea:	4b25      	ldr	r3, [pc, #148]	; (800c080 <tcp_timewait_input+0xd8>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bff6:	440b      	add	r3, r1
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dc23      	bgt.n	800c046 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bffe:	4b21      	ldr	r3, [pc, #132]	; (800c084 <tcp_timewait_input+0xdc>)
 800c000:	6819      	ldr	r1, [r3, #0]
 800c002:	4b21      	ldr	r3, [pc, #132]	; (800c088 <tcp_timewait_input+0xe0>)
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <tcp_timewait_input+0xd8>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c00e:	4b1f      	ldr	r3, [pc, #124]	; (800c08c <tcp_timewait_input+0xe4>)
 800c010:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c016:	4a1d      	ldr	r2, [pc, #116]	; (800c08c <tcp_timewait_input+0xe4>)
 800c018:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c01a:	8812      	ldrh	r2, [r2, #0]
 800c01c:	b292      	uxth	r2, r2
 800c01e:	9202      	str	r2, [sp, #8]
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	4b1b      	ldr	r3, [pc, #108]	; (800c090 <tcp_timewait_input+0xe8>)
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	4b1b      	ldr	r3, [pc, #108]	; (800c094 <tcp_timewait_input+0xec>)
 800c028:	4602      	mov	r2, r0
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f002 fe72 	bl	800ed14 <tcp_rst>
      return;
 800c030:	e01b      	b.n	800c06a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c032:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <tcp_timewait_input+0xc8>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c03e:	4b16      	ldr	r3, [pc, #88]	; (800c098 <tcp_timewait_input+0xf0>)
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <tcp_timewait_input+0xe0>)
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00c      	beq.n	800c068 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	8b5b      	ldrh	r3, [r3, #26]
 800c052:	f043 0302 	orr.w	r3, r3, #2
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 f8a5 	bl	800e1ac <tcp_output>
  }
  return;
 800c062:	e001      	b.n	800c068 <tcp_timewait_input+0xc0>
    return;
 800c064:	bf00      	nop
 800c066:	e000      	b.n	800c06a <tcp_timewait_input+0xc2>
  return;
 800c068:	bf00      	nop
}
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	2400bc68 	.word	0x2400bc68
 800c074:	0801290c 	.word	0x0801290c
 800c078:	08012b54 	.word	0x08012b54
 800c07c:	08012988 	.word	0x08012988
 800c080:	2400bc5c 	.word	0x2400bc5c
 800c084:	2400bc60 	.word	0x2400bc60
 800c088:	2400bc66 	.word	0x2400bc66
 800c08c:	2400bc4c 	.word	0x2400bc4c
 800c090:	24008d0c 	.word	0x24008d0c
 800c094:	24008d10 	.word	0x24008d10
 800c098:	2400bc24 	.word	0x2400bc24

0800c09c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b08d      	sub	sp, #52	; 0x34
 800c0a0:	af04      	add	r7, sp, #16
 800c0a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <tcp_process+0x24>
 800c0b2:	4b9d      	ldr	r3, [pc, #628]	; (800c328 <tcp_process+0x28c>)
 800c0b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c0b8:	499c      	ldr	r1, [pc, #624]	; (800c32c <tcp_process+0x290>)
 800c0ba:	489d      	ldr	r0, [pc, #628]	; (800c330 <tcp_process+0x294>)
 800c0bc:	f003 fe28 	bl	800fd10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c0c0:	4b9c      	ldr	r3, [pc, #624]	; (800c334 <tcp_process+0x298>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	f003 0304 	and.w	r3, r3, #4
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d04e      	beq.n	800c16a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7d1b      	ldrb	r3, [r3, #20]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d108      	bne.n	800c0e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0d8:	4b97      	ldr	r3, [pc, #604]	; (800c338 <tcp_process+0x29c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d123      	bne.n	800c128 <tcp_process+0x8c>
        acceptable = 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	76fb      	strb	r3, [r7, #27]
 800c0e4:	e020      	b.n	800c128 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ea:	4b94      	ldr	r3, [pc, #592]	; (800c33c <tcp_process+0x2a0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d102      	bne.n	800c0f8 <tcp_process+0x5c>
        acceptable = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	76fb      	strb	r3, [r7, #27]
 800c0f6:	e017      	b.n	800c128 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0f8:	4b90      	ldr	r3, [pc, #576]	; (800c33c <tcp_process+0x2a0>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	db10      	blt.n	800c128 <tcp_process+0x8c>
 800c106:	4b8d      	ldr	r3, [pc, #564]	; (800c33c <tcp_process+0x2a0>)
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c112:	440b      	add	r3, r1
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc06      	bgt.n	800c128 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	8b5b      	ldrh	r3, [r3, #26]
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c128:	7efb      	ldrb	r3, [r7, #27]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d01b      	beq.n	800c166 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7d1b      	ldrb	r3, [r3, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <tcp_process+0xa8>
 800c136:	4b7c      	ldr	r3, [pc, #496]	; (800c328 <tcp_process+0x28c>)
 800c138:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c13c:	4980      	ldr	r1, [pc, #512]	; (800c340 <tcp_process+0x2a4>)
 800c13e:	487c      	ldr	r0, [pc, #496]	; (800c330 <tcp_process+0x294>)
 800c140:	f003 fde6 	bl	800fd10 <iprintf>
      recv_flags |= TF_RESET;
 800c144:	4b7f      	ldr	r3, [pc, #508]	; (800c344 <tcp_process+0x2a8>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	f043 0308 	orr.w	r3, r3, #8
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	4b7d      	ldr	r3, [pc, #500]	; (800c344 <tcp_process+0x2a8>)
 800c150:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	8b5b      	ldrh	r3, [r3, #26]
 800c156:	f023 0301 	bic.w	r3, r3, #1
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c160:	f06f 030d 	mvn.w	r3, #13
 800c164:	e37a      	b.n	800c85c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	e378      	b.n	800c85c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c16a:	4b72      	ldr	r3, [pc, #456]	; (800c334 <tcp_process+0x298>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d010      	beq.n	800c198 <tcp_process+0xfc>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	7d1b      	ldrb	r3, [r3, #20]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d00c      	beq.n	800c198 <tcp_process+0xfc>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7d1b      	ldrb	r3, [r3, #20]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d008      	beq.n	800c198 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	8b5b      	ldrh	r3, [r3, #26]
 800c18a:	f043 0302 	orr.w	r3, r3, #2
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	e361      	b.n	800c85c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8b5b      	ldrh	r3, [r3, #26]
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c1a4:	4b68      	ldr	r3, [pc, #416]	; (800c348 <tcp_process+0x2ac>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 fc2f 	bl	800da20 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	7d1b      	ldrb	r3, [r3, #20]
 800c1c6:	3b02      	subs	r3, #2
 800c1c8:	2b07      	cmp	r3, #7
 800c1ca:	f200 8337 	bhi.w	800c83c <tcp_process+0x7a0>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <tcp_process+0x138>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c1f5 	.word	0x0800c1f5
 800c1d8:	0800c425 	.word	0x0800c425
 800c1dc:	0800c59d 	.word	0x0800c59d
 800c1e0:	0800c5c7 	.word	0x0800c5c7
 800c1e4:	0800c6eb 	.word	0x0800c6eb
 800c1e8:	0800c59d 	.word	0x0800c59d
 800c1ec:	0800c777 	.word	0x0800c777
 800c1f0:	0800c807 	.word	0x0800c807
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c1f4:	4b4f      	ldr	r3, [pc, #316]	; (800c334 <tcp_process+0x298>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	f003 0310 	and.w	r3, r3, #16
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 80e4 	beq.w	800c3ca <tcp_process+0x32e>
 800c202:	4b4c      	ldr	r3, [pc, #304]	; (800c334 <tcp_process+0x298>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 80dd 	beq.w	800c3ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	4b48      	ldr	r3, [pc, #288]	; (800c338 <tcp_process+0x29c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	f040 80d5 	bne.w	800c3ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c220:	4b46      	ldr	r3, [pc, #280]	; (800c33c <tcp_process+0x2a0>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c232:	4b41      	ldr	r3, [pc, #260]	; (800c338 <tcp_process+0x29c>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c23a:	4b44      	ldr	r3, [pc, #272]	; (800c34c <tcp_process+0x2b0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	89db      	ldrh	r3, [r3, #14]
 800c240:	b29a      	uxth	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c254:	4b39      	ldr	r3, [pc, #228]	; (800c33c <tcp_process+0x2a0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	1e5a      	subs	r2, r3, #1
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2204      	movs	r2, #4
 800c262:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fa ff21 	bl	80070b4 <ip4_route>
 800c272:	4601      	mov	r1, r0
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	461a      	mov	r2, r3
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7ff f88c 	bl	800b398 <tcp_eff_send_mss_netif>
 800c280:	4603      	mov	r3, r0
 800c282:	461a      	mov	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c28c:	009a      	lsls	r2, r3, #2
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	f241 111c 	movw	r1, #4380	; 0x111c
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf38      	it	cc
 800c29c:	460b      	movcc	r3, r1
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d204      	bcs.n	800c2ac <tcp_process+0x210>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	e00d      	b.n	800c2c8 <tcp_process+0x22c>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d904      	bls.n	800c2c4 <tcp_process+0x228>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	e001      	b.n	800c2c8 <tcp_process+0x22c>
 800c2c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d106      	bne.n	800c2e6 <tcp_process+0x24a>
 800c2d8:	4b13      	ldr	r3, [pc, #76]	; (800c328 <tcp_process+0x28c>)
 800c2da:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c2de:	491c      	ldr	r1, [pc, #112]	; (800c350 <tcp_process+0x2b4>)
 800c2e0:	4813      	ldr	r0, [pc, #76]	; (800c330 <tcp_process+0x294>)
 800c2e2:	f003 fd15 	bl	800fd10 <iprintf>
        --pcb->snd_queuelen;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d12a      	bne.n	800c358 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c306:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d106      	bne.n	800c31c <tcp_process+0x280>
 800c30e:	4b06      	ldr	r3, [pc, #24]	; (800c328 <tcp_process+0x28c>)
 800c310:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c314:	490f      	ldr	r1, [pc, #60]	; (800c354 <tcp_process+0x2b8>)
 800c316:	4806      	ldr	r0, [pc, #24]	; (800c330 <tcp_process+0x294>)
 800c318:	f003 fcfa 	bl	800fd10 <iprintf>
          pcb->unsent = rseg->next;
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	66da      	str	r2, [r3, #108]	; 0x6c
 800c324:	e01c      	b.n	800c360 <tcp_process+0x2c4>
 800c326:	bf00      	nop
 800c328:	0801290c 	.word	0x0801290c
 800c32c:	08012b74 	.word	0x08012b74
 800c330:	08012988 	.word	0x08012988
 800c334:	2400bc68 	.word	0x2400bc68
 800c338:	2400bc60 	.word	0x2400bc60
 800c33c:	2400bc5c 	.word	0x2400bc5c
 800c340:	08012b90 	.word	0x08012b90
 800c344:	2400bc69 	.word	0x2400bc69
 800c348:	2400bc24 	.word	0x2400bc24
 800c34c:	2400bc4c 	.word	0x2400bc4c
 800c350:	08012bb0 	.word	0x08012bb0
 800c354:	08012bc8 	.word	0x08012bc8
        } else {
          pcb->unacked = rseg->next;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c360:	69f8      	ldr	r0, [r7, #28]
 800c362:	f7fe fd22 	bl	800adaa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d104      	bne.n	800c378 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c374:	861a      	strh	r2, [r3, #48]	; 0x30
 800c376:	e006      	b.n	800c386 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <tcp_process+0x30a>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	6910      	ldr	r0, [r2, #16]
 800c39a:	2200      	movs	r2, #0
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	4798      	blx	r3
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	76bb      	strb	r3, [r7, #26]
 800c3a4:	e001      	b.n	800c3aa <tcp_process+0x30e>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c3aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c3ae:	f113 0f0d 	cmn.w	r3, #13
 800c3b2:	d102      	bne.n	800c3ba <tcp_process+0x31e>
          return ERR_ABRT;
 800c3b4:	f06f 030c 	mvn.w	r3, #12
 800c3b8:	e250      	b.n	800c85c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	8b5b      	ldrh	r3, [r3, #26]
 800c3be:	f043 0302 	orr.w	r3, r3, #2
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c3c8:	e23a      	b.n	800c840 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c3ca:	4b98      	ldr	r3, [pc, #608]	; (800c62c <tcp_process+0x590>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	f003 0310 	and.w	r3, r3, #16
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8234 	beq.w	800c840 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3d8:	4b95      	ldr	r3, [pc, #596]	; (800c630 <tcp_process+0x594>)
 800c3da:	6819      	ldr	r1, [r3, #0]
 800c3dc:	4b95      	ldr	r3, [pc, #596]	; (800c634 <tcp_process+0x598>)
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4b95      	ldr	r3, [pc, #596]	; (800c638 <tcp_process+0x59c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3e8:	4b94      	ldr	r3, [pc, #592]	; (800c63c <tcp_process+0x5a0>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ec:	885b      	ldrh	r3, [r3, #2]
 800c3ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3f0:	4a92      	ldr	r2, [pc, #584]	; (800c63c <tcp_process+0x5a0>)
 800c3f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3f4:	8812      	ldrh	r2, [r2, #0]
 800c3f6:	b292      	uxth	r2, r2
 800c3f8:	9202      	str	r2, [sp, #8]
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	4b90      	ldr	r3, [pc, #576]	; (800c640 <tcp_process+0x5a4>)
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	4b90      	ldr	r3, [pc, #576]	; (800c644 <tcp_process+0x5a8>)
 800c402:	4602      	mov	r2, r0
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f002 fc85 	bl	800ed14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c410:	2b05      	cmp	r3, #5
 800c412:	f200 8215 	bhi.w	800c840 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f002 fa4f 	bl	800e8c0 <tcp_rexmit_rto>
      break;
 800c422:	e20d      	b.n	800c840 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c424:	4b81      	ldr	r3, [pc, #516]	; (800c62c <tcp_process+0x590>)
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	f003 0310 	and.w	r3, r3, #16
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 80a1 	beq.w	800c574 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c432:	4b7f      	ldr	r3, [pc, #508]	; (800c630 <tcp_process+0x594>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	3b01      	subs	r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	db7e      	blt.n	800c540 <tcp_process+0x4a4>
 800c442:	4b7b      	ldr	r3, [pc, #492]	; (800c630 <tcp_process+0x594>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	dc77      	bgt.n	800c540 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2204      	movs	r2, #4
 800c454:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d102      	bne.n	800c464 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c45e:	23fa      	movs	r3, #250	; 0xfa
 800c460:	76bb      	strb	r3, [r7, #26]
 800c462:	e01d      	b.n	800c4a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <tcp_process+0x3e0>
 800c46e:	4b76      	ldr	r3, [pc, #472]	; (800c648 <tcp_process+0x5ac>)
 800c470:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c474:	4975      	ldr	r1, [pc, #468]	; (800c64c <tcp_process+0x5b0>)
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <tcp_process+0x5b4>)
 800c478:	f003 fc4a 	bl	800fd10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00a      	beq.n	800c49c <tcp_process+0x400>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	6910      	ldr	r0, [r2, #16]
 800c490:	2200      	movs	r2, #0
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	4798      	blx	r3
 800c496:	4603      	mov	r3, r0
 800c498:	76bb      	strb	r3, [r7, #26]
 800c49a:	e001      	b.n	800c4a0 <tcp_process+0x404>
 800c49c:	23f0      	movs	r3, #240	; 0xf0
 800c49e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c4a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c4a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c4ac:	f113 0f0d 	cmn.w	r3, #13
 800c4b0:	d002      	beq.n	800c4b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fd ff8e 	bl	800a3d4 <tcp_abort>
            }
            return ERR_ABRT;
 800c4b8:	f06f 030c 	mvn.w	r3, #12
 800c4bc:	e1ce      	b.n	800c85c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fae0 	bl	800ca84 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c4c4:	4b63      	ldr	r3, [pc, #396]	; (800c654 <tcp_process+0x5b8>)
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d005      	beq.n	800c4d8 <tcp_process+0x43c>
            recv_acked--;
 800c4cc:	4b61      	ldr	r3, [pc, #388]	; (800c654 <tcp_process+0x5b8>)
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	4b5f      	ldr	r3, [pc, #380]	; (800c654 <tcp_process+0x5b8>)
 800c4d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4dc:	009a      	lsls	r2, r3, #2
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	f241 111c 	movw	r1, #4380	; 0x111c
 800c4e8:	428b      	cmp	r3, r1
 800c4ea:	bf38      	it	cc
 800c4ec:	460b      	movcc	r3, r1
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d204      	bcs.n	800c4fc <tcp_process+0x460>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	e00d      	b.n	800c518 <tcp_process+0x47c>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	f241 121c 	movw	r2, #4380	; 0x111c
 800c506:	4293      	cmp	r3, r2
 800c508:	d904      	bls.n	800c514 <tcp_process+0x478>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	b29b      	uxth	r3, r3
 800c512:	e001      	b.n	800c518 <tcp_process+0x47c>
 800c514:	f241 131c 	movw	r3, #4380	; 0x111c
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c51e:	4b4e      	ldr	r3, [pc, #312]	; (800c658 <tcp_process+0x5bc>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b00      	cmp	r3, #0
 800c528:	d037      	beq.n	800c59a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	8b5b      	ldrh	r3, [r3, #26]
 800c52e:	f043 0302 	orr.w	r3, r3, #2
 800c532:	b29a      	uxth	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2207      	movs	r2, #7
 800c53c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c53e:	e02c      	b.n	800c59a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c540:	4b3b      	ldr	r3, [pc, #236]	; (800c630 <tcp_process+0x594>)
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	4b3b      	ldr	r3, [pc, #236]	; (800c634 <tcp_process+0x598>)
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	4b3b      	ldr	r3, [pc, #236]	; (800c638 <tcp_process+0x59c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c550:	4b3a      	ldr	r3, [pc, #232]	; (800c63c <tcp_process+0x5a0>)
 800c552:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c554:	885b      	ldrh	r3, [r3, #2]
 800c556:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c558:	4a38      	ldr	r2, [pc, #224]	; (800c63c <tcp_process+0x5a0>)
 800c55a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c55c:	8812      	ldrh	r2, [r2, #0]
 800c55e:	b292      	uxth	r2, r2
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	4b36      	ldr	r3, [pc, #216]	; (800c640 <tcp_process+0x5a4>)
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	4b36      	ldr	r3, [pc, #216]	; (800c644 <tcp_process+0x5a8>)
 800c56a:	4602      	mov	r2, r0
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f002 fbd1 	bl	800ed14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c572:	e167      	b.n	800c844 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c574:	4b2d      	ldr	r3, [pc, #180]	; (800c62c <tcp_process+0x590>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	f003 0302 	and.w	r3, r3, #2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 8161 	beq.w	800c844 <tcp_process+0x7a8>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	1e5a      	subs	r2, r3, #1
 800c588:	4b2b      	ldr	r3, [pc, #172]	; (800c638 <tcp_process+0x59c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	f040 8159 	bne.w	800c844 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f002 f9b6 	bl	800e904 <tcp_rexmit>
      break;
 800c598:	e154      	b.n	800c844 <tcp_process+0x7a8>
 800c59a:	e153      	b.n	800c844 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa71 	bl	800ca84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c5a2:	4b2d      	ldr	r3, [pc, #180]	; (800c658 <tcp_process+0x5bc>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	f003 0320 	and.w	r3, r3, #32
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 814c 	beq.w	800c848 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	8b5b      	ldrh	r3, [r3, #26]
 800c5b4:	f043 0302 	orr.w	r3, r3, #2
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2207      	movs	r2, #7
 800c5c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c5c4:	e140      	b.n	800c848 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fa5c 	bl	800ca84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c5cc:	4b22      	ldr	r3, [pc, #136]	; (800c658 <tcp_process+0x5bc>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d071      	beq.n	800c6bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c5d8:	4b14      	ldr	r3, [pc, #80]	; (800c62c <tcp_process+0x590>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d060      	beq.n	800c6a6 <tcp_process+0x60a>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5e8:	4b11      	ldr	r3, [pc, #68]	; (800c630 <tcp_process+0x594>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d15a      	bne.n	800c6a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d156      	bne.n	800c6a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	8b5b      	ldrh	r3, [r3, #26]
 800c5fc:	f043 0302 	orr.w	r3, r3, #2
 800c600:	b29a      	uxth	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7fe fdbc 	bl	800b184 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c60c:	4b13      	ldr	r3, [pc, #76]	; (800c65c <tcp_process+0x5c0>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d105      	bne.n	800c622 <tcp_process+0x586>
 800c616:	4b11      	ldr	r3, [pc, #68]	; (800c65c <tcp_process+0x5c0>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	4a0f      	ldr	r2, [pc, #60]	; (800c65c <tcp_process+0x5c0>)
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	e02e      	b.n	800c680 <tcp_process+0x5e4>
 800c622:	4b0e      	ldr	r3, [pc, #56]	; (800c65c <tcp_process+0x5c0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e027      	b.n	800c67a <tcp_process+0x5de>
 800c62a:	bf00      	nop
 800c62c:	2400bc68 	.word	0x2400bc68
 800c630:	2400bc60 	.word	0x2400bc60
 800c634:	2400bc66 	.word	0x2400bc66
 800c638:	2400bc5c 	.word	0x2400bc5c
 800c63c:	2400bc4c 	.word	0x2400bc4c
 800c640:	24008d0c 	.word	0x24008d0c
 800c644:	24008d10 	.word	0x24008d10
 800c648:	0801290c 	.word	0x0801290c
 800c64c:	08012bdc 	.word	0x08012bdc
 800c650:	08012988 	.word	0x08012988
 800c654:	2400bc64 	.word	0x2400bc64
 800c658:	2400bc69 	.word	0x2400bc69
 800c65c:	2400bc30 	.word	0x2400bc30
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d104      	bne.n	800c674 <tcp_process+0x5d8>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	60da      	str	r2, [r3, #12]
 800c672:	e005      	b.n	800c680 <tcp_process+0x5e4>
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1ef      	bne.n	800c660 <tcp_process+0x5c4>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	60da      	str	r2, [r3, #12]
 800c686:	4b77      	ldr	r3, [pc, #476]	; (800c864 <tcp_process+0x7c8>)
 800c688:	2201      	movs	r2, #1
 800c68a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	220a      	movs	r2, #10
 800c690:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c692:	4b75      	ldr	r3, [pc, #468]	; (800c868 <tcp_process+0x7cc>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60da      	str	r2, [r3, #12]
 800c69a:	4a73      	ldr	r2, [pc, #460]	; (800c868 <tcp_process+0x7cc>)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	f002 fcfa 	bl	800f098 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c6a4:	e0d2      	b.n	800c84c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	8b5b      	ldrh	r3, [r3, #26]
 800c6aa:	f043 0302 	orr.w	r3, r3, #2
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2208      	movs	r2, #8
 800c6b8:	751a      	strb	r2, [r3, #20]
      break;
 800c6ba:	e0c7      	b.n	800c84c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c6bc:	4b6b      	ldr	r3, [pc, #428]	; (800c86c <tcp_process+0x7d0>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f003 0310 	and.w	r3, r3, #16
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 80c1 	beq.w	800c84c <tcp_process+0x7b0>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6ce:	4b68      	ldr	r3, [pc, #416]	; (800c870 <tcp_process+0x7d4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	f040 80ba 	bne.w	800c84c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f040 80b5 	bne.w	800c84c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2206      	movs	r2, #6
 800c6e6:	751a      	strb	r2, [r3, #20]
      break;
 800c6e8:	e0b0      	b.n	800c84c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f9ca 	bl	800ca84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c6f0:	4b60      	ldr	r3, [pc, #384]	; (800c874 <tcp_process+0x7d8>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 0320 	and.w	r3, r3, #32
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 80a9 	beq.w	800c850 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	8b5b      	ldrh	r3, [r3, #26]
 800c702:	f043 0302 	orr.w	r3, r3, #2
 800c706:	b29a      	uxth	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7fe fd39 	bl	800b184 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c712:	4b59      	ldr	r3, [pc, #356]	; (800c878 <tcp_process+0x7dc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d105      	bne.n	800c728 <tcp_process+0x68c>
 800c71c:	4b56      	ldr	r3, [pc, #344]	; (800c878 <tcp_process+0x7dc>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	4a55      	ldr	r2, [pc, #340]	; (800c878 <tcp_process+0x7dc>)
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	e013      	b.n	800c750 <tcp_process+0x6b4>
 800c728:	4b53      	ldr	r3, [pc, #332]	; (800c878 <tcp_process+0x7dc>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	613b      	str	r3, [r7, #16]
 800c72e:	e00c      	b.n	800c74a <tcp_process+0x6ae>
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d104      	bne.n	800c744 <tcp_process+0x6a8>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	60da      	str	r2, [r3, #12]
 800c742:	e005      	b.n	800c750 <tcp_process+0x6b4>
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	613b      	str	r3, [r7, #16]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1ef      	bne.n	800c730 <tcp_process+0x694>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	60da      	str	r2, [r3, #12]
 800c756:	4b43      	ldr	r3, [pc, #268]	; (800c864 <tcp_process+0x7c8>)
 800c758:	2201      	movs	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	220a      	movs	r2, #10
 800c760:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c762:	4b41      	ldr	r3, [pc, #260]	; (800c868 <tcp_process+0x7cc>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	60da      	str	r2, [r3, #12]
 800c76a:	4a3f      	ldr	r2, [pc, #252]	; (800c868 <tcp_process+0x7cc>)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	f002 fc92 	bl	800f098 <tcp_timer_needed>
      }
      break;
 800c774:	e06c      	b.n	800c850 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f984 	bl	800ca84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c77c:	4b3b      	ldr	r3, [pc, #236]	; (800c86c <tcp_process+0x7d0>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	d065      	beq.n	800c854 <tcp_process+0x7b8>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c78c:	4b38      	ldr	r3, [pc, #224]	; (800c870 <tcp_process+0x7d4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d15f      	bne.n	800c854 <tcp_process+0x7b8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d15b      	bne.n	800c854 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7fe fcf1 	bl	800b184 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c7a2:	4b35      	ldr	r3, [pc, #212]	; (800c878 <tcp_process+0x7dc>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d105      	bne.n	800c7b8 <tcp_process+0x71c>
 800c7ac:	4b32      	ldr	r3, [pc, #200]	; (800c878 <tcp_process+0x7dc>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	4a31      	ldr	r2, [pc, #196]	; (800c878 <tcp_process+0x7dc>)
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	e013      	b.n	800c7e0 <tcp_process+0x744>
 800c7b8:	4b2f      	ldr	r3, [pc, #188]	; (800c878 <tcp_process+0x7dc>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e00c      	b.n	800c7da <tcp_process+0x73e>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d104      	bne.n	800c7d4 <tcp_process+0x738>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68da      	ldr	r2, [r3, #12]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	60da      	str	r2, [r3, #12]
 800c7d2:	e005      	b.n	800c7e0 <tcp_process+0x744>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1ef      	bne.n	800c7c0 <tcp_process+0x724>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	60da      	str	r2, [r3, #12]
 800c7e6:	4b1f      	ldr	r3, [pc, #124]	; (800c864 <tcp_process+0x7c8>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	220a      	movs	r2, #10
 800c7f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <tcp_process+0x7cc>)
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60da      	str	r2, [r3, #12]
 800c7fa:	4a1b      	ldr	r2, [pc, #108]	; (800c868 <tcp_process+0x7cc>)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	f002 fc4a 	bl	800f098 <tcp_timer_needed>
      }
      break;
 800c804:	e026      	b.n	800c854 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f93c 	bl	800ca84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c80c:	4b17      	ldr	r3, [pc, #92]	; (800c86c <tcp_process+0x7d0>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	f003 0310 	and.w	r3, r3, #16
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01f      	beq.n	800c858 <tcp_process+0x7bc>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c81c:	4b14      	ldr	r3, [pc, #80]	; (800c870 <tcp_process+0x7d4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d119      	bne.n	800c858 <tcp_process+0x7bc>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d115      	bne.n	800c858 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c82c:	4b11      	ldr	r3, [pc, #68]	; (800c874 <tcp_process+0x7d8>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	f043 0310 	orr.w	r3, r3, #16
 800c834:	b2da      	uxtb	r2, r3
 800c836:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <tcp_process+0x7d8>)
 800c838:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c83a:	e00d      	b.n	800c858 <tcp_process+0x7bc>
    default:
      break;
 800c83c:	bf00      	nop
 800c83e:	e00c      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c840:	bf00      	nop
 800c842:	e00a      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c844:	bf00      	nop
 800c846:	e008      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c848:	bf00      	nop
 800c84a:	e006      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c84c:	bf00      	nop
 800c84e:	e004      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c850:	bf00      	nop
 800c852:	e002      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c854:	bf00      	nop
 800c856:	e000      	b.n	800c85a <tcp_process+0x7be>
      break;
 800c858:	bf00      	nop
  }
  return ERR_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3724      	adds	r7, #36	; 0x24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}
 800c864:	2400bc38 	.word	0x2400bc38
 800c868:	2400bc34 	.word	0x2400bc34
 800c86c:	2400bc68 	.word	0x2400bc68
 800c870:	2400bc60 	.word	0x2400bc60
 800c874:	2400bc69 	.word	0x2400bc69
 800c878:	2400bc30 	.word	0x2400bc30

0800c87c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c87c:	b590      	push	{r4, r7, lr}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d106      	bne.n	800c89a <tcp_oos_insert_segment+0x1e>
 800c88c:	4b3b      	ldr	r3, [pc, #236]	; (800c97c <tcp_oos_insert_segment+0x100>)
 800c88e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c892:	493b      	ldr	r1, [pc, #236]	; (800c980 <tcp_oos_insert_segment+0x104>)
 800c894:	483b      	ldr	r0, [pc, #236]	; (800c984 <tcp_oos_insert_segment+0x108>)
 800c896:	f003 fa3b 	bl	800fd10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	899b      	ldrh	r3, [r3, #12]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f9 f930 	bl	8005b08 <lwip_htons>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d028      	beq.n	800c906 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c8b4:	6838      	ldr	r0, [r7, #0]
 800c8b6:	f7fe fa63 	bl	800ad80 <tcp_segs_free>
    next = NULL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	603b      	str	r3, [r7, #0]
 800c8be:	e056      	b.n	800c96e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	899b      	ldrh	r3, [r3, #12]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7f9 f91d 	bl	8005b08 <lwip_htons>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00d      	beq.n	800c8f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	899b      	ldrh	r3, [r3, #12]
 800c8e0:	b29c      	uxth	r4, r3
 800c8e2:	2001      	movs	r0, #1
 800c8e4:	f7f9 f910 	bl	8005b08 <lwip_htons>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	4322      	orrs	r2, r4
 800c8f2:	b292      	uxth	r2, r2
 800c8f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7fe fa52 	bl	800adaa <tcp_seg_free>
    while (next &&
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00e      	beq.n	800c92a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	891b      	ldrh	r3, [r3, #8]
 800c910:	461a      	mov	r2, r3
 800c912:	4b1d      	ldr	r3, [pc, #116]	; (800c988 <tcp_oos_insert_segment+0x10c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	441a      	add	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	8909      	ldrh	r1, [r1, #8]
 800c922:	440b      	add	r3, r1
 800c924:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c926:	2b00      	cmp	r3, #0
 800c928:	daca      	bge.n	800c8c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d01e      	beq.n	800c96e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	891b      	ldrh	r3, [r3, #8]
 800c934:	461a      	mov	r2, r3
 800c936:	4b14      	ldr	r3, [pc, #80]	; (800c988 <tcp_oos_insert_segment+0x10c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	441a      	add	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c944:	2b00      	cmp	r3, #0
 800c946:	dd12      	ble.n	800c96e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	4b0d      	ldr	r3, [pc, #52]	; (800c988 <tcp_oos_insert_segment+0x10c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	b29b      	uxth	r3, r3
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	891b      	ldrh	r3, [r3, #8]
 800c966:	4619      	mov	r1, r3
 800c968:	4610      	mov	r0, r2
 800c96a:	f7fc fe17 	bl	800959c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	601a      	str	r2, [r3, #0]
}
 800c974:	bf00      	nop
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd90      	pop	{r4, r7, pc}
 800c97c:	0801290c 	.word	0x0801290c
 800c980:	08012bfc 	.word	0x08012bfc
 800c984:	08012988 	.word	0x08012988
 800c988:	2400bc5c 	.word	0x2400bc5c

0800c98c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c98c:	b5b0      	push	{r4, r5, r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c99a:	e03e      	b.n	800ca1a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fd f802 	bl	80099b4 <pbuf_clen>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9ba:	8a7a      	ldrh	r2, [r7, #18]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d906      	bls.n	800c9ce <tcp_free_acked_segments+0x42>
 800c9c0:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <tcp_free_acked_segments+0xe0>)
 800c9c2:	f240 4257 	movw	r2, #1111	; 0x457
 800c9c6:	492a      	ldr	r1, [pc, #168]	; (800ca70 <tcp_free_acked_segments+0xe4>)
 800c9c8:	482a      	ldr	r0, [pc, #168]	; (800ca74 <tcp_free_acked_segments+0xe8>)
 800c9ca:	f003 f9a1 	bl	800fd10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c9d4:	8a7b      	ldrh	r3, [r7, #18]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	891a      	ldrh	r2, [r3, #8]
 800c9e4:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <tcp_free_acked_segments+0xec>)
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	4b22      	ldr	r3, [pc, #136]	; (800ca78 <tcp_free_acked_segments+0xec>)
 800c9ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	f7fe f9da 	bl	800adaa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00c      	beq.n	800ca1a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <tcp_free_acked_segments+0x8e>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <tcp_free_acked_segments+0x8e>
 800ca0c:	4b17      	ldr	r3, [pc, #92]	; (800ca6c <tcp_free_acked_segments+0xe0>)
 800ca0e:	f240 4261 	movw	r2, #1121	; 0x461
 800ca12:	491a      	ldr	r1, [pc, #104]	; (800ca7c <tcp_free_acked_segments+0xf0>)
 800ca14:	4817      	ldr	r0, [pc, #92]	; (800ca74 <tcp_free_acked_segments+0xe8>)
 800ca16:	f003 f97b 	bl	800fd10 <iprintf>
  while (seg_list != NULL &&
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d020      	beq.n	800ca62 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f9 f883 	bl	8005b32 <lwip_htonl>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	461d      	mov	r5, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	899b      	ldrh	r3, [r3, #12]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f9 f863 	bl	8005b08 <lwip_htons>
 800ca42:	4603      	mov	r3, r0
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 0303 	and.w	r3, r3, #3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <tcp_free_acked_segments+0xc6>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <tcp_free_acked_segments+0xc8>
 800ca52:	2300      	movs	r3, #0
 800ca54:	442b      	add	r3, r5
 800ca56:	18e2      	adds	r2, r4, r3
 800ca58:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <tcp_free_acked_segments+0xf4>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	dd9c      	ble.n	800c99c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ca62:	68bb      	ldr	r3, [r7, #8]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3718      	adds	r7, #24
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca6c:	0801290c 	.word	0x0801290c
 800ca70:	08012c24 	.word	0x08012c24
 800ca74:	08012988 	.word	0x08012988
 800ca78:	2400bc64 	.word	0x2400bc64
 800ca7c:	08012c4c 	.word	0x08012c4c
 800ca80:	2400bc60 	.word	0x2400bc60

0800ca84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ca84:	b5b0      	push	{r4, r5, r7, lr}
 800ca86:	b094      	sub	sp, #80	; 0x50
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <tcp_receive+0x20>
 800ca96:	4b91      	ldr	r3, [pc, #580]	; (800ccdc <tcp_receive+0x258>)
 800ca98:	f240 427b 	movw	r2, #1147	; 0x47b
 800ca9c:	4990      	ldr	r1, [pc, #576]	; (800cce0 <tcp_receive+0x25c>)
 800ca9e:	4891      	ldr	r0, [pc, #580]	; (800cce4 <tcp_receive+0x260>)
 800caa0:	f003 f936 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d806      	bhi.n	800caba <tcp_receive+0x36>
 800caac:	4b8b      	ldr	r3, [pc, #556]	; (800ccdc <tcp_receive+0x258>)
 800caae:	f240 427c 	movw	r2, #1148	; 0x47c
 800cab2:	498d      	ldr	r1, [pc, #564]	; (800cce8 <tcp_receive+0x264>)
 800cab4:	488b      	ldr	r0, [pc, #556]	; (800cce4 <tcp_receive+0x260>)
 800cab6:	f003 f92b 	bl	800fd10 <iprintf>

  if (flags & TCP_ACK) {
 800caba:	4b8c      	ldr	r3, [pc, #560]	; (800ccec <tcp_receive+0x268>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 0310 	and.w	r3, r3, #16
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 8264 	beq.w	800cf90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cace:	461a      	mov	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad4:	4413      	add	r3, r2
 800cad6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cadc:	4b84      	ldr	r3, [pc, #528]	; (800ccf0 <tcp_receive+0x26c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	db1b      	blt.n	800cb1e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caea:	4b81      	ldr	r3, [pc, #516]	; (800ccf0 <tcp_receive+0x26c>)
 800caec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800caee:	429a      	cmp	r2, r3
 800caf0:	d106      	bne.n	800cb00 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800caf6:	4b7f      	ldr	r3, [pc, #508]	; (800ccf4 <tcp_receive+0x270>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	db0e      	blt.n	800cb1e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb04:	4b7b      	ldr	r3, [pc, #492]	; (800ccf4 <tcp_receive+0x270>)
 800cb06:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d125      	bne.n	800cb58 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cb0c:	4b7a      	ldr	r3, [pc, #488]	; (800ccf8 <tcp_receive+0x274>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	89db      	ldrh	r3, [r3, #14]
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d91c      	bls.n	800cb58 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cb1e:	4b76      	ldr	r3, [pc, #472]	; (800ccf8 <tcp_receive+0x274>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	89db      	ldrh	r3, [r3, #14]
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d205      	bcs.n	800cb48 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cb48:	4b69      	ldr	r3, [pc, #420]	; (800ccf0 <tcp_receive+0x26c>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cb50:	4b68      	ldr	r3, [pc, #416]	; (800ccf4 <tcp_receive+0x270>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cb58:	4b66      	ldr	r3, [pc, #408]	; (800ccf4 <tcp_receive+0x270>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	dc58      	bgt.n	800cc18 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cb66:	4b65      	ldr	r3, [pc, #404]	; (800ccfc <tcp_receive+0x278>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d14b      	bne.n	800cc06 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cb78:	4413      	add	r3, r2
 800cb7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d142      	bne.n	800cc06 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	db3d      	blt.n	800cc06 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb8e:	4b59      	ldr	r3, [pc, #356]	; (800ccf4 <tcp_receive+0x270>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d137      	bne.n	800cc06 <tcp_receive+0x182>
              found_dupack = 1;
 800cb96:	2301      	movs	r3, #1
 800cb98:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cba0:	2bff      	cmp	r3, #255	; 0xff
 800cba2:	d007      	beq.n	800cbb4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d91b      	bls.n	800cbf6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbc8:	4413      	add	r3, r2
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d30a      	bcc.n	800cbec <tcp_receive+0x168>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbe0:	4413      	add	r3, r2
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cbea:	e004      	b.n	800cbf6 <tcp_receive+0x172>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d902      	bls.n	800cc06 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 feeb 	bl	800e9dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f040 8161 	bne.w	800ced0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc16:	e15b      	b.n	800ced0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc18:	4b36      	ldr	r3, [pc, #216]	; (800ccf4 <tcp_receive+0x270>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f2c0 814e 	blt.w	800cec6 <tcp_receive+0x442>
 800cc2a:	4b32      	ldr	r3, [pc, #200]	; (800ccf4 <tcp_receive+0x270>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f300 8146 	bgt.w	800cec6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8b5b      	ldrh	r3, [r3, #26]
 800cc3e:	f003 0304 	and.w	r3, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d010      	beq.n	800cc68 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	8b5b      	ldrh	r3, [r3, #26]
 800cc4a:	f023 0304 	bic.w	r3, r3, #4
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc76:	10db      	asrs	r3, r3, #3
 800cc78:	b21b      	sxth	r3, r3
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	4413      	add	r3, r2
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	b21a      	sxth	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cc90:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <tcp_receive+0x270>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cca8:	4b12      	ldr	r3, [pc, #72]	; (800ccf4 <tcp_receive+0x270>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	2b03      	cmp	r3, #3
 800ccb6:	f240 8097 	bls.w	800cde8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d245      	bcs.n	800cd56 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	8b5b      	ldrh	r3, [r3, #26]
 800ccce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d014      	beq.n	800cd00 <tcp_receive+0x27c>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e013      	b.n	800cd02 <tcp_receive+0x27e>
 800ccda:	bf00      	nop
 800ccdc:	0801290c 	.word	0x0801290c
 800cce0:	08012c6c 	.word	0x08012c6c
 800cce4:	08012988 	.word	0x08012988
 800cce8:	08012c88 	.word	0x08012c88
 800ccec:	2400bc68 	.word	0x2400bc68
 800ccf0:	2400bc5c 	.word	0x2400bc5c
 800ccf4:	2400bc60 	.word	0x2400bc60
 800ccf8:	2400bc4c 	.word	0x2400bc4c
 800ccfc:	2400bc66 	.word	0x2400bc66
 800cd00:	2302      	movs	r3, #2
 800cd02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cd06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd10:	fb12 f303 	smulbb	r3, r2, r3
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	bf28      	it	cs
 800cd1c:	4613      	movcs	r3, r2
 800cd1e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd28:	4413      	add	r3, r2
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d309      	bcc.n	800cd4a <tcp_receive+0x2c6>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd3e:	4413      	add	r3, r2
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd48:	e04e      	b.n	800cde8 <tcp_receive+0x364>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd54:	e048      	b.n	800cde8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cd5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd5e:	4413      	add	r3, r2
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d309      	bcc.n	800cd80 <tcp_receive+0x2fc>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cd72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd74:	4413      	add	r3, r2
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cd7e:	e004      	b.n	800cd8a <tcp_receive+0x306>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d326      	bcc.n	800cde8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d30a      	bcc.n	800cdde <tcp_receive+0x35a>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdd2:	4413      	add	r3, r2
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cddc:	e004      	b.n	800cde8 <tcp_receive+0x364>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cde4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdf0:	4a98      	ldr	r2, [pc, #608]	; (800d054 <tcp_receive+0x5d0>)
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff fdca 	bl	800c98c <tcp_free_acked_segments>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce06:	4a94      	ldr	r2, [pc, #592]	; (800d058 <tcp_receive+0x5d4>)
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fdbf 	bl	800c98c <tcp_free_acked_segments>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce22:	861a      	strh	r2, [r3, #48]	; 0x30
 800ce24:	e002      	b.n	800ce2c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ce48:	4b84      	ldr	r3, [pc, #528]	; (800d05c <tcp_receive+0x5d8>)
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	8b5b      	ldrh	r3, [r3, #26]
 800ce5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d035      	beq.n	800cece <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d118      	bne.n	800ce9c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00c      	beq.n	800ce8c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f8 fe57 	bl	8005b32 <lwip_htonl>
 800ce84:	4603      	mov	r3, r0
 800ce86:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc20      	bgt.n	800cece <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	8b5b      	ldrh	r3, [r3, #26]
 800ce90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce9a:	e018      	b.n	800cece <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7f8 fe42 	bl	8005b32 <lwip_htonl>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	1ae3      	subs	r3, r4, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc0b      	bgt.n	800cece <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	8b5b      	ldrh	r3, [r3, #26]
 800ceba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cec4:	e003      	b.n	800cece <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f001 ff76 	bl	800edb8 <tcp_send_empty_ack>
 800cecc:	e000      	b.n	800ced0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cece:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d05b      	beq.n	800cf90 <tcp_receive+0x50c>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cedc:	4b60      	ldr	r3, [pc, #384]	; (800d060 <tcp_receive+0x5dc>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	da54      	bge.n	800cf90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cee6:	4b5f      	ldr	r3, [pc, #380]	; (800d064 <tcp_receive+0x5e0>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cefa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf04:	10db      	asrs	r3, r3, #3
 800cf06:	b21b      	sxth	r3, r3
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cf1e:	4413      	add	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	b21a      	sxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cf28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da05      	bge.n	800cf3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cf30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cf34:	425b      	negs	r3, r3
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cf3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf46:	109b      	asrs	r3, r3, #2
 800cf48:	b21b      	sxth	r3, r3
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cf60:	4413      	add	r3, r2
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	b21a      	sxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf70:	10db      	asrs	r3, r3, #3
 800cf72:	b21b      	sxth	r3, r3
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	4413      	add	r3, r2
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	b21a      	sxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cf90:	4b35      	ldr	r3, [pc, #212]	; (800d068 <tcp_receive+0x5e4>)
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 84e2 	beq.w	800d95e <tcp_receive+0xeda>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7d1b      	ldrb	r3, [r3, #20]
 800cf9e:	2b06      	cmp	r3, #6
 800cfa0:	f200 84dd 	bhi.w	800d95e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfa8:	4b30      	ldr	r3, [pc, #192]	; (800d06c <tcp_receive+0x5e8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f2c0 808f 	blt.w	800d0d4 <tcp_receive+0x650>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfba:	4b2b      	ldr	r3, [pc, #172]	; (800d068 <tcp_receive+0x5e4>)
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4b2a      	ldr	r3, [pc, #168]	; (800d06c <tcp_receive+0x5e8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	440b      	add	r3, r1
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	3301      	adds	r3, #1
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f300 8082 	bgt.w	800d0d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cfd0:	4b27      	ldr	r3, [pc, #156]	; (800d070 <tcp_receive+0x5ec>)
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfda:	4b24      	ldr	r3, [pc, #144]	; (800d06c <tcp_receive+0x5e8>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cfe2:	4b23      	ldr	r3, [pc, #140]	; (800d070 <tcp_receive+0x5ec>)
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <tcp_receive+0x574>
 800cfea:	4b22      	ldr	r3, [pc, #136]	; (800d074 <tcp_receive+0x5f0>)
 800cfec:	f240 5294 	movw	r2, #1428	; 0x594
 800cff0:	4921      	ldr	r1, [pc, #132]	; (800d078 <tcp_receive+0x5f4>)
 800cff2:	4822      	ldr	r0, [pc, #136]	; (800d07c <tcp_receive+0x5f8>)
 800cff4:	f002 fe8c 	bl	800fd10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cffe:	4293      	cmp	r3, r2
 800d000:	d906      	bls.n	800d010 <tcp_receive+0x58c>
 800d002:	4b1c      	ldr	r3, [pc, #112]	; (800d074 <tcp_receive+0x5f0>)
 800d004:	f240 5295 	movw	r2, #1429	; 0x595
 800d008:	491d      	ldr	r1, [pc, #116]	; (800d080 <tcp_receive+0x5fc>)
 800d00a:	481c      	ldr	r0, [pc, #112]	; (800d07c <tcp_receive+0x5f8>)
 800d00c:	f002 fe80 	bl	800fd10 <iprintf>
      off = (u16_t)off32;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d016:	4b16      	ldr	r3, [pc, #88]	; (800d070 <tcp_receive+0x5ec>)
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	891b      	ldrh	r3, [r3, #8]
 800d01c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d020:	429a      	cmp	r2, r3
 800d022:	d906      	bls.n	800d032 <tcp_receive+0x5ae>
 800d024:	4b13      	ldr	r3, [pc, #76]	; (800d074 <tcp_receive+0x5f0>)
 800d026:	f240 5297 	movw	r2, #1431	; 0x597
 800d02a:	4916      	ldr	r1, [pc, #88]	; (800d084 <tcp_receive+0x600>)
 800d02c:	4813      	ldr	r0, [pc, #76]	; (800d07c <tcp_receive+0x5f8>)
 800d02e:	f002 fe6f 	bl	800fd10 <iprintf>
      inseg.len -= off;
 800d032:	4b0f      	ldr	r3, [pc, #60]	; (800d070 <tcp_receive+0x5ec>)
 800d034:	891a      	ldrh	r2, [r3, #8]
 800d036:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	4b0c      	ldr	r3, [pc, #48]	; (800d070 <tcp_receive+0x5ec>)
 800d040:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d042:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <tcp_receive+0x5ec>)
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	891a      	ldrh	r2, [r3, #8]
 800d048:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d050:	e02a      	b.n	800d0a8 <tcp_receive+0x624>
 800d052:	bf00      	nop
 800d054:	08012ca4 	.word	0x08012ca4
 800d058:	08012cac 	.word	0x08012cac
 800d05c:	2400bc64 	.word	0x2400bc64
 800d060:	2400bc60 	.word	0x2400bc60
 800d064:	2400bc24 	.word	0x2400bc24
 800d068:	2400bc66 	.word	0x2400bc66
 800d06c:	2400bc5c 	.word	0x2400bc5c
 800d070:	2400bc3c 	.word	0x2400bc3c
 800d074:	0801290c 	.word	0x0801290c
 800d078:	08012cb4 	.word	0x08012cb4
 800d07c:	08012988 	.word	0x08012988
 800d080:	08012cc4 	.word	0x08012cc4
 800d084:	08012cd4 	.word	0x08012cd4
        off -= p->len;
 800d088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08a:	895b      	ldrh	r3, [r3, #10]
 800d08c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d098:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d09a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d09e:	2200      	movs	r2, #0
 800d0a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0aa:	895b      	ldrh	r3, [r3, #10]
 800d0ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d8e9      	bhi.n	800d088 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d0b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d0bc:	f7fc fb6c 	bl	8009798 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	4a91      	ldr	r2, [pc, #580]	; (800d30c <tcp_receive+0x888>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	4b91      	ldr	r3, [pc, #580]	; (800d310 <tcp_receive+0x88c>)
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	4a8f      	ldr	r2, [pc, #572]	; (800d30c <tcp_receive+0x888>)
 800d0ce:	6812      	ldr	r2, [r2, #0]
 800d0d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d0d2:	e00d      	b.n	800d0f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d0d4:	4b8d      	ldr	r3, [pc, #564]	; (800d30c <tcp_receive+0x888>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da06      	bge.n	800d0f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	8b5b      	ldrh	r3, [r3, #26]
 800d0e6:	f043 0302 	orr.w	r3, r3, #2
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d0f0:	4b86      	ldr	r3, [pc, #536]	; (800d30c <tcp_receive+0x888>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f2c0 842a 	blt.w	800d954 <tcp_receive+0xed0>
 800d100:	4b82      	ldr	r3, [pc, #520]	; (800d30c <tcp_receive+0x888>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	6879      	ldr	r1, [r7, #4]
 800d10a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d10c:	440b      	add	r3, r1
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	3301      	adds	r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	f300 841e 	bgt.w	800d954 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d11c:	4b7b      	ldr	r3, [pc, #492]	; (800d30c <tcp_receive+0x888>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	429a      	cmp	r2, r3
 800d122:	f040 829a 	bne.w	800d65a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d126:	4b7a      	ldr	r3, [pc, #488]	; (800d310 <tcp_receive+0x88c>)
 800d128:	891c      	ldrh	r4, [r3, #8]
 800d12a:	4b79      	ldr	r3, [pc, #484]	; (800d310 <tcp_receive+0x88c>)
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	899b      	ldrh	r3, [r3, #12]
 800d130:	b29b      	uxth	r3, r3
 800d132:	4618      	mov	r0, r3
 800d134:	f7f8 fce8 	bl	8005b08 <lwip_htons>
 800d138:	4603      	mov	r3, r0
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	f003 0303 	and.w	r3, r3, #3
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <tcp_receive+0x6c4>
 800d144:	2301      	movs	r3, #1
 800d146:	e000      	b.n	800d14a <tcp_receive+0x6c6>
 800d148:	2300      	movs	r3, #0
 800d14a:	4423      	add	r3, r4
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	4b71      	ldr	r3, [pc, #452]	; (800d314 <tcp_receive+0x890>)
 800d150:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d156:	4b6f      	ldr	r3, [pc, #444]	; (800d314 <tcp_receive+0x890>)
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d275      	bcs.n	800d24a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d15e:	4b6c      	ldr	r3, [pc, #432]	; (800d310 <tcp_receive+0x88c>)
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	899b      	ldrh	r3, [r3, #12]
 800d164:	b29b      	uxth	r3, r3
 800d166:	4618      	mov	r0, r3
 800d168:	f7f8 fcce 	bl	8005b08 <lwip_htons>
 800d16c:	4603      	mov	r3, r0
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01f      	beq.n	800d1b8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d178:	4b65      	ldr	r3, [pc, #404]	; (800d310 <tcp_receive+0x88c>)
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	899b      	ldrh	r3, [r3, #12]
 800d17e:	b29b      	uxth	r3, r3
 800d180:	b21b      	sxth	r3, r3
 800d182:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d186:	b21c      	sxth	r4, r3
 800d188:	4b61      	ldr	r3, [pc, #388]	; (800d310 <tcp_receive+0x88c>)
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	899b      	ldrh	r3, [r3, #12]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	4618      	mov	r0, r3
 800d192:	f7f8 fcb9 	bl	8005b08 <lwip_htons>
 800d196:	4603      	mov	r3, r0
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f8 fcb0 	bl	8005b08 <lwip_htons>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	b21b      	sxth	r3, r3
 800d1ac:	4323      	orrs	r3, r4
 800d1ae:	b21a      	sxth	r2, r3
 800d1b0:	4b57      	ldr	r3, [pc, #348]	; (800d310 <tcp_receive+0x88c>)
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	b292      	uxth	r2, r2
 800d1b6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1bc:	4b54      	ldr	r3, [pc, #336]	; (800d310 <tcp_receive+0x88c>)
 800d1be:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d1c0:	4b53      	ldr	r3, [pc, #332]	; (800d310 <tcp_receive+0x88c>)
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	899b      	ldrh	r3, [r3, #12]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7f8 fc9d 	bl	8005b08 <lwip_htons>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d005      	beq.n	800d1e6 <tcp_receive+0x762>
            inseg.len -= 1;
 800d1da:	4b4d      	ldr	r3, [pc, #308]	; (800d310 <tcp_receive+0x88c>)
 800d1dc:	891b      	ldrh	r3, [r3, #8]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	4b4b      	ldr	r3, [pc, #300]	; (800d310 <tcp_receive+0x88c>)
 800d1e4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d1e6:	4b4a      	ldr	r3, [pc, #296]	; (800d310 <tcp_receive+0x88c>)
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	4a49      	ldr	r2, [pc, #292]	; (800d310 <tcp_receive+0x88c>)
 800d1ec:	8912      	ldrh	r2, [r2, #8]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fc f9d3 	bl	800959c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d1f6:	4b46      	ldr	r3, [pc, #280]	; (800d310 <tcp_receive+0x88c>)
 800d1f8:	891c      	ldrh	r4, [r3, #8]
 800d1fa:	4b45      	ldr	r3, [pc, #276]	; (800d310 <tcp_receive+0x88c>)
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	899b      	ldrh	r3, [r3, #12]
 800d200:	b29b      	uxth	r3, r3
 800d202:	4618      	mov	r0, r3
 800d204:	f7f8 fc80 	bl	8005b08 <lwip_htons>
 800d208:	4603      	mov	r3, r0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	f003 0303 	and.w	r3, r3, #3
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <tcp_receive+0x794>
 800d214:	2301      	movs	r3, #1
 800d216:	e000      	b.n	800d21a <tcp_receive+0x796>
 800d218:	2300      	movs	r3, #0
 800d21a:	4423      	add	r3, r4
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	4b3d      	ldr	r3, [pc, #244]	; (800d314 <tcp_receive+0x890>)
 800d220:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d222:	4b3c      	ldr	r3, [pc, #240]	; (800d314 <tcp_receive+0x890>)
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	4b38      	ldr	r3, [pc, #224]	; (800d30c <tcp_receive+0x888>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	441a      	add	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d236:	440b      	add	r3, r1
 800d238:	429a      	cmp	r2, r3
 800d23a:	d006      	beq.n	800d24a <tcp_receive+0x7c6>
 800d23c:	4b36      	ldr	r3, [pc, #216]	; (800d318 <tcp_receive+0x894>)
 800d23e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d242:	4936      	ldr	r1, [pc, #216]	; (800d31c <tcp_receive+0x898>)
 800d244:	4836      	ldr	r0, [pc, #216]	; (800d320 <tcp_receive+0x89c>)
 800d246:	f002 fd63 	bl	800fd10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80e7 	beq.w	800d422 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d254:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <tcp_receive+0x88c>)
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	899b      	ldrh	r3, [r3, #12]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f8 fc53 	bl	8005b08 <lwip_htons>
 800d262:	4603      	mov	r3, r0
 800d264:	b2db      	uxtb	r3, r3
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d010      	beq.n	800d290 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d26e:	e00a      	b.n	800d286 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d274:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7fd fd92 	bl	800adaa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1f0      	bne.n	800d270 <tcp_receive+0x7ec>
 800d28e:	e0c8      	b.n	800d422 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d294:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d296:	e052      	b.n	800d33e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	899b      	ldrh	r3, [r3, #12]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f8 fc31 	bl	8005b08 <lwip_htons>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d03d      	beq.n	800d32e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d2b2:	4b17      	ldr	r3, [pc, #92]	; (800d310 <tcp_receive+0x88c>)
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	899b      	ldrh	r3, [r3, #12]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f8 fc24 	bl	8005b08 <lwip_htons>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d130      	bne.n	800d32e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d2cc:	4b10      	ldr	r3, [pc, #64]	; (800d310 <tcp_receive+0x88c>)
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	899b      	ldrh	r3, [r3, #12]
 800d2d2:	b29c      	uxth	r4, r3
 800d2d4:	2001      	movs	r0, #1
 800d2d6:	f7f8 fc17 	bl	8005b08 <lwip_htons>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <tcp_receive+0x88c>)
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	4322      	orrs	r2, r4
 800d2e4:	b292      	uxth	r2, r2
 800d2e6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d2e8:	4b09      	ldr	r3, [pc, #36]	; (800d310 <tcp_receive+0x88c>)
 800d2ea:	891c      	ldrh	r4, [r3, #8]
 800d2ec:	4b08      	ldr	r3, [pc, #32]	; (800d310 <tcp_receive+0x88c>)
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	899b      	ldrh	r3, [r3, #12]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7f8 fc07 	bl	8005b08 <lwip_htons>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00e      	beq.n	800d324 <tcp_receive+0x8a0>
 800d306:	2301      	movs	r3, #1
 800d308:	e00d      	b.n	800d326 <tcp_receive+0x8a2>
 800d30a:	bf00      	nop
 800d30c:	2400bc5c 	.word	0x2400bc5c
 800d310:	2400bc3c 	.word	0x2400bc3c
 800d314:	2400bc66 	.word	0x2400bc66
 800d318:	0801290c 	.word	0x0801290c
 800d31c:	08012ce4 	.word	0x08012ce4
 800d320:	08012988 	.word	0x08012988
 800d324:	2300      	movs	r3, #0
 800d326:	4423      	add	r3, r4
 800d328:	b29a      	uxth	r2, r3
 800d32a:	4b98      	ldr	r3, [pc, #608]	; (800d58c <tcp_receive+0xb08>)
 800d32c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d330:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d338:	6938      	ldr	r0, [r7, #16]
 800d33a:	f7fd fd36 	bl	800adaa <tcp_seg_free>
            while (next &&
 800d33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00e      	beq.n	800d362 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d344:	4b91      	ldr	r3, [pc, #580]	; (800d58c <tcp_receive+0xb08>)
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	461a      	mov	r2, r3
 800d34a:	4b91      	ldr	r3, [pc, #580]	; (800d590 <tcp_receive+0xb0c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	441a      	add	r2, r3
 800d350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d358:	8909      	ldrh	r1, [r1, #8]
 800d35a:	440b      	add	r3, r1
 800d35c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d35e:	2b00      	cmp	r3, #0
 800d360:	da9a      	bge.n	800d298 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d059      	beq.n	800d41c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d368:	4b88      	ldr	r3, [pc, #544]	; (800d58c <tcp_receive+0xb08>)
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	461a      	mov	r2, r3
 800d36e:	4b88      	ldr	r3, [pc, #544]	; (800d590 <tcp_receive+0xb0c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	441a      	add	r2, r3
 800d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dd4d      	ble.n	800d41c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	b29a      	uxth	r2, r3
 800d388:	4b81      	ldr	r3, [pc, #516]	; (800d590 <tcp_receive+0xb0c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	b29a      	uxth	r2, r3
 800d392:	4b80      	ldr	r3, [pc, #512]	; (800d594 <tcp_receive+0xb10>)
 800d394:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d396:	4b7f      	ldr	r3, [pc, #508]	; (800d594 <tcp_receive+0xb10>)
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	899b      	ldrh	r3, [r3, #12]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7f8 fbb2 	bl	8005b08 <lwip_htons>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 0302 	and.w	r3, r3, #2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <tcp_receive+0x938>
                inseg.len -= 1;
 800d3b0:	4b78      	ldr	r3, [pc, #480]	; (800d594 <tcp_receive+0xb10>)
 800d3b2:	891b      	ldrh	r3, [r3, #8]
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	4b76      	ldr	r3, [pc, #472]	; (800d594 <tcp_receive+0xb10>)
 800d3ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d3bc:	4b75      	ldr	r3, [pc, #468]	; (800d594 <tcp_receive+0xb10>)
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4a74      	ldr	r2, [pc, #464]	; (800d594 <tcp_receive+0xb10>)
 800d3c2:	8912      	ldrh	r2, [r2, #8]
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fc f8e8 	bl	800959c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d3cc:	4b71      	ldr	r3, [pc, #452]	; (800d594 <tcp_receive+0xb10>)
 800d3ce:	891c      	ldrh	r4, [r3, #8]
 800d3d0:	4b70      	ldr	r3, [pc, #448]	; (800d594 <tcp_receive+0xb10>)
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	899b      	ldrh	r3, [r3, #12]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f8 fb95 	bl	8005b08 <lwip_htons>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	f003 0303 	and.w	r3, r3, #3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d001      	beq.n	800d3ee <tcp_receive+0x96a>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <tcp_receive+0x96c>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	4423      	add	r3, r4
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	4b65      	ldr	r3, [pc, #404]	; (800d58c <tcp_receive+0xb08>)
 800d3f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d3f8:	4b64      	ldr	r3, [pc, #400]	; (800d58c <tcp_receive+0xb08>)
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4b64      	ldr	r3, [pc, #400]	; (800d590 <tcp_receive+0xb0c>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	441a      	add	r2, r3
 800d404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d006      	beq.n	800d41c <tcp_receive+0x998>
 800d40e:	4b62      	ldr	r3, [pc, #392]	; (800d598 <tcp_receive+0xb14>)
 800d410:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d414:	4961      	ldr	r1, [pc, #388]	; (800d59c <tcp_receive+0xb18>)
 800d416:	4862      	ldr	r0, [pc, #392]	; (800d5a0 <tcp_receive+0xb1c>)
 800d418:	f002 fc7a 	bl	800fd10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d420:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d422:	4b5a      	ldr	r3, [pc, #360]	; (800d58c <tcp_receive+0xb08>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	4b59      	ldr	r3, [pc, #356]	; (800d590 <tcp_receive+0xb0c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	441a      	add	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d436:	4b55      	ldr	r3, [pc, #340]	; (800d58c <tcp_receive+0xb08>)
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d206      	bcs.n	800d44c <tcp_receive+0x9c8>
 800d43e:	4b56      	ldr	r3, [pc, #344]	; (800d598 <tcp_receive+0xb14>)
 800d440:	f240 6207 	movw	r2, #1543	; 0x607
 800d444:	4957      	ldr	r1, [pc, #348]	; (800d5a4 <tcp_receive+0xb20>)
 800d446:	4856      	ldr	r0, [pc, #344]	; (800d5a0 <tcp_receive+0xb1c>)
 800d448:	f002 fc62 	bl	800fd10 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d450:	4b4e      	ldr	r3, [pc, #312]	; (800d58c <tcp_receive+0xb08>)
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	b29a      	uxth	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7fc ffc5 	bl	800a3ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d462:	4b4c      	ldr	r3, [pc, #304]	; (800d594 <tcp_receive+0xb10>)
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	891b      	ldrh	r3, [r3, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d46c:	4b49      	ldr	r3, [pc, #292]	; (800d594 <tcp_receive+0xb10>)
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	4a4d      	ldr	r2, [pc, #308]	; (800d5a8 <tcp_receive+0xb24>)
 800d472:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d474:	4b47      	ldr	r3, [pc, #284]	; (800d594 <tcp_receive+0xb10>)
 800d476:	2200      	movs	r2, #0
 800d478:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d47a:	4b46      	ldr	r3, [pc, #280]	; (800d594 <tcp_receive+0xb10>)
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	899b      	ldrh	r3, [r3, #12]
 800d480:	b29b      	uxth	r3, r3
 800d482:	4618      	mov	r0, r3
 800d484:	f7f8 fb40 	bl	8005b08 <lwip_htons>
 800d488:	4603      	mov	r3, r0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 80b8 	beq.w	800d606 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d496:	4b45      	ldr	r3, [pc, #276]	; (800d5ac <tcp_receive+0xb28>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f043 0320 	orr.w	r3, r3, #32
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	4b42      	ldr	r3, [pc, #264]	; (800d5ac <tcp_receive+0xb28>)
 800d4a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d4a4:	e0af      	b.n	800d606 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4a36      	ldr	r2, [pc, #216]	; (800d590 <tcp_receive+0xb0c>)
 800d4b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	891b      	ldrh	r3, [r3, #8]
 800d4bc:	461c      	mov	r4, r3
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	899b      	ldrh	r3, [r3, #12]
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f8 fb1e 	bl	8005b08 <lwip_htons>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f003 0303 	and.w	r3, r3, #3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <tcp_receive+0xa58>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <tcp_receive+0xa5a>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	191a      	adds	r2, r3, r4
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e4:	441a      	add	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ee:	461c      	mov	r4, r3
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	891b      	ldrh	r3, [r3, #8]
 800d4f4:	461d      	mov	r5, r3
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	899b      	ldrh	r3, [r3, #12]
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f8 fb02 	bl	8005b08 <lwip_htons>
 800d504:	4603      	mov	r3, r0
 800d506:	b2db      	uxtb	r3, r3
 800d508:	f003 0303 	and.w	r3, r3, #3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <tcp_receive+0xa90>
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <tcp_receive+0xa92>
 800d514:	2300      	movs	r3, #0
 800d516:	442b      	add	r3, r5
 800d518:	429c      	cmp	r4, r3
 800d51a:	d206      	bcs.n	800d52a <tcp_receive+0xaa6>
 800d51c:	4b1e      	ldr	r3, [pc, #120]	; (800d598 <tcp_receive+0xb14>)
 800d51e:	f240 622b 	movw	r2, #1579	; 0x62b
 800d522:	4923      	ldr	r1, [pc, #140]	; (800d5b0 <tcp_receive+0xb2c>)
 800d524:	481e      	ldr	r0, [pc, #120]	; (800d5a0 <tcp_receive+0xb1c>)
 800d526:	f002 fbf3 	bl	800fd10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	461c      	mov	r4, r3
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	899b      	ldrh	r3, [r3, #12]
 800d536:	b29b      	uxth	r3, r3
 800d538:	4618      	mov	r0, r3
 800d53a:	f7f8 fae5 	bl	8005b08 <lwip_htons>
 800d53e:	4603      	mov	r3, r0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	f003 0303 	and.w	r3, r3, #3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <tcp_receive+0xaca>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e000      	b.n	800d550 <tcp_receive+0xacc>
 800d54e:	2300      	movs	r3, #0
 800d550:	1919      	adds	r1, r3, r4
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d556:	b28b      	uxth	r3, r1
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7fc ff43 	bl	800a3ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	891b      	ldrh	r3, [r3, #8]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d028      	beq.n	800d5c2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <tcp_receive+0xb24>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d01d      	beq.n	800d5b4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d578:	4b0b      	ldr	r3, [pc, #44]	; (800d5a8 <tcp_receive+0xb24>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	4619      	mov	r1, r3
 800d582:	4610      	mov	r0, r2
 800d584:	f7fc fa50 	bl	8009a28 <pbuf_cat>
 800d588:	e018      	b.n	800d5bc <tcp_receive+0xb38>
 800d58a:	bf00      	nop
 800d58c:	2400bc66 	.word	0x2400bc66
 800d590:	2400bc5c 	.word	0x2400bc5c
 800d594:	2400bc3c 	.word	0x2400bc3c
 800d598:	0801290c 	.word	0x0801290c
 800d59c:	08012d1c 	.word	0x08012d1c
 800d5a0:	08012988 	.word	0x08012988
 800d5a4:	08012d58 	.word	0x08012d58
 800d5a8:	2400bc6c 	.word	0x2400bc6c
 800d5ac:	2400bc69 	.word	0x2400bc69
 800d5b0:	08012d78 	.word	0x08012d78
            } else {
              recv_data = cseg->p;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	4a70      	ldr	r2, [pc, #448]	; (800d77c <tcp_receive+0xcf8>)
 800d5ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	899b      	ldrh	r3, [r3, #12]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7f8 fa9c 	bl	8005b08 <lwip_htons>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00d      	beq.n	800d5f8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d5dc:	4b68      	ldr	r3, [pc, #416]	; (800d780 <tcp_receive+0xcfc>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	f043 0320 	orr.w	r3, r3, #32
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	4b66      	ldr	r3, [pc, #408]	; (800d780 <tcp_receive+0xcfc>)
 800d5e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7d1b      	ldrb	r3, [r3, #20]
 800d5ee:	2b04      	cmp	r3, #4
 800d5f0:	d102      	bne.n	800d5f8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2207      	movs	r2, #7
 800d5f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d600:	68b8      	ldr	r0, [r7, #8]
 800d602:	f7fd fbd2 	bl	800adaa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d008      	beq.n	800d620 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d61a:	429a      	cmp	r2, r3
 800d61c:	f43f af43 	beq.w	800d4a6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8b5b      	ldrh	r3, [r3, #26]
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00e      	beq.n	800d64a <tcp_receive+0xbc6>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	8b5b      	ldrh	r3, [r3, #26]
 800d630:	f023 0301 	bic.w	r3, r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	835a      	strh	r2, [r3, #26]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8b5b      	ldrh	r3, [r3, #26]
 800d63e:	f043 0302 	orr.w	r3, r3, #2
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d648:	e188      	b.n	800d95c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	8b5b      	ldrh	r3, [r3, #26]
 800d64e:	f043 0301 	orr.w	r3, r3, #1
 800d652:	b29a      	uxth	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d658:	e180      	b.n	800d95c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d662:	4848      	ldr	r0, [pc, #288]	; (800d784 <tcp_receive+0xd00>)
 800d664:	f7fd fbba 	bl	800addc <tcp_seg_copy>
 800d668:	4602      	mov	r2, r0
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	675a      	str	r2, [r3, #116]	; 0x74
 800d66e:	e16d      	b.n	800d94c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d670:	2300      	movs	r3, #0
 800d672:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d678:	63bb      	str	r3, [r7, #56]	; 0x38
 800d67a:	e157      	b.n	800d92c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	4b41      	ldr	r3, [pc, #260]	; (800d788 <tcp_receive+0xd04>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	429a      	cmp	r2, r3
 800d688:	d11d      	bne.n	800d6c6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d68a:	4b3e      	ldr	r3, [pc, #248]	; (800d784 <tcp_receive+0xd00>)
 800d68c:	891a      	ldrh	r2, [r3, #8]
 800d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d690:	891b      	ldrh	r3, [r3, #8]
 800d692:	429a      	cmp	r2, r3
 800d694:	f240 814f 	bls.w	800d936 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d698:	483a      	ldr	r0, [pc, #232]	; (800d784 <tcp_receive+0xd00>)
 800d69a:	f7fd fb9f 	bl	800addc <tcp_seg_copy>
 800d69e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 8149 	beq.w	800d93a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	e002      	b.n	800d6bc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d6bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6be:	6978      	ldr	r0, [r7, #20]
 800d6c0:	f7ff f8dc 	bl	800c87c <tcp_oos_insert_segment>
                }
                break;
 800d6c4:	e139      	b.n	800d93a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d117      	bne.n	800d6fc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d6cc:	4b2e      	ldr	r3, [pc, #184]	; (800d788 <tcp_receive+0xd04>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da57      	bge.n	800d78c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d6dc:	4829      	ldr	r0, [pc, #164]	; (800d784 <tcp_receive+0xd00>)
 800d6de:	f7fd fb7d 	bl	800addc <tcp_seg_copy>
 800d6e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 8129 	beq.w	800d93e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	69ba      	ldr	r2, [r7, #24]
 800d6f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d6f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6f4:	69b8      	ldr	r0, [r7, #24]
 800d6f6:	f7ff f8c1 	bl	800c87c <tcp_oos_insert_segment>
                  }
                  break;
 800d6fa:	e120      	b.n	800d93e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d6fc:	4b22      	ldr	r3, [pc, #136]	; (800d788 <tcp_receive+0xd04>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	3b01      	subs	r3, #1
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	db3e      	blt.n	800d78c <tcp_receive+0xd08>
 800d70e:	4b1e      	ldr	r3, [pc, #120]	; (800d788 <tcp_receive+0xd04>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	3301      	adds	r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	dc35      	bgt.n	800d78c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d720:	4818      	ldr	r0, [pc, #96]	; (800d784 <tcp_receive+0xd00>)
 800d722:	f7fd fb5b 	bl	800addc <tcp_seg_copy>
 800d726:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f000 8109 	beq.w	800d942 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d738:	8912      	ldrh	r2, [r2, #8]
 800d73a:	441a      	add	r2, r3
 800d73c:	4b12      	ldr	r3, [pc, #72]	; (800d788 <tcp_receive+0xd04>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	dd12      	ble.n	800d76c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <tcp_receive+0xd04>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	b29b      	uxth	r3, r3
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	b29a      	uxth	r2, r3
 800d758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d762:	891b      	ldrh	r3, [r3, #8]
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f7fb ff18 	bl	800959c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d774:	69f8      	ldr	r0, [r7, #28]
 800d776:	f7ff f881 	bl	800c87c <tcp_oos_insert_segment>
                  }
                  break;
 800d77a:	e0e2      	b.n	800d942 <tcp_receive+0xebe>
 800d77c:	2400bc6c 	.word	0x2400bc6c
 800d780:	2400bc69 	.word	0x2400bc69
 800d784:	2400bc3c 	.word	0x2400bc3c
 800d788:	2400bc5c 	.word	0x2400bc5c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f040 80c6 	bne.w	800d926 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d79a:	4b80      	ldr	r3, [pc, #512]	; (800d99c <tcp_receive+0xf18>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f340 80bd 	ble.w	800d926 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	899b      	ldrh	r3, [r3, #12]
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7f8 f9a7 	bl	8005b08 <lwip_htons>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f040 80bf 	bne.w	800d946 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d7c8:	4875      	ldr	r0, [pc, #468]	; (800d9a0 <tcp_receive+0xf1c>)
 800d7ca:	f7fd fb07 	bl	800addc <tcp_seg_copy>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 80b6 	beq.w	800d94a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7e6:	8912      	ldrh	r2, [r2, #8]
 800d7e8:	441a      	add	r2, r3
 800d7ea:	4b6c      	ldr	r3, [pc, #432]	; (800d99c <tcp_receive+0xf18>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	dd12      	ble.n	800d81a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d7f4:	4b69      	ldr	r3, [pc, #420]	; (800d99c <tcp_receive+0xf18>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	b29b      	uxth	r3, r3
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	b29a      	uxth	r2, r3
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	891b      	ldrh	r3, [r3, #8]
 800d812:	4619      	mov	r1, r3
 800d814:	4610      	mov	r0, r2
 800d816:	f7fb fec1 	bl	800959c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d81a:	4b62      	ldr	r3, [pc, #392]	; (800d9a4 <tcp_receive+0xf20>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	4b5e      	ldr	r3, [pc, #376]	; (800d99c <tcp_receive+0xf18>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	441a      	add	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	6879      	ldr	r1, [r7, #4]
 800d82c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d82e:	440b      	add	r3, r1
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	2b00      	cmp	r3, #0
 800d834:	f340 8089 	ble.w	800d94a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	899b      	ldrh	r3, [r3, #12]
 800d840:	b29b      	uxth	r3, r3
 800d842:	4618      	mov	r0, r3
 800d844:	f7f8 f960 	bl	8005b08 <lwip_htons>
 800d848:	4603      	mov	r3, r0
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d022      	beq.n	800d89a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	899b      	ldrh	r3, [r3, #12]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	b21b      	sxth	r3, r3
 800d860:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d864:	b21c      	sxth	r4, r3
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	899b      	ldrh	r3, [r3, #12]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	4618      	mov	r0, r3
 800d872:	f7f8 f949 	bl	8005b08 <lwip_htons>
 800d876:	4603      	mov	r3, r0
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d880:	b29b      	uxth	r3, r3
 800d882:	4618      	mov	r0, r3
 800d884:	f7f8 f940 	bl	8005b08 <lwip_htons>
 800d888:	4603      	mov	r3, r0
 800d88a:	b21b      	sxth	r3, r3
 800d88c:	4323      	orrs	r3, r4
 800d88e:	b21a      	sxth	r2, r3
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	b292      	uxth	r2, r2
 800d898:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8a4:	4413      	add	r3, r2
 800d8a6:	b299      	uxth	r1, r3
 800d8a8:	4b3c      	ldr	r3, [pc, #240]	; (800d99c <tcp_receive+0xf18>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	1a8a      	subs	r2, r1, r2
 800d8b4:	b292      	uxth	r2, r2
 800d8b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	891b      	ldrh	r3, [r3, #8]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	f7fb fe68 	bl	800959c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	891c      	ldrh	r4, [r3, #8]
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	899b      	ldrh	r3, [r3, #12]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f8 f913 	bl	8005b08 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <tcp_receive+0xe6e>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <tcp_receive+0xe70>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	4423      	add	r3, r4
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	4b2a      	ldr	r3, [pc, #168]	; (800d9a4 <tcp_receive+0xf20>)
 800d8fa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d8fc:	4b29      	ldr	r3, [pc, #164]	; (800d9a4 <tcp_receive+0xf20>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	461a      	mov	r2, r3
 800d902:	4b26      	ldr	r3, [pc, #152]	; (800d99c <tcp_receive+0xf18>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	441a      	add	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90c:	6879      	ldr	r1, [r7, #4]
 800d90e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d910:	440b      	add	r3, r1
 800d912:	429a      	cmp	r2, r3
 800d914:	d019      	beq.n	800d94a <tcp_receive+0xec6>
 800d916:	4b24      	ldr	r3, [pc, #144]	; (800d9a8 <tcp_receive+0xf24>)
 800d918:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d91c:	4923      	ldr	r1, [pc, #140]	; (800d9ac <tcp_receive+0xf28>)
 800d91e:	4824      	ldr	r0, [pc, #144]	; (800d9b0 <tcp_receive+0xf2c>)
 800d920:	f002 f9f6 	bl	800fd10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d924:	e011      	b.n	800d94a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f47f aea4 	bne.w	800d67c <tcp_receive+0xbf8>
 800d934:	e00a      	b.n	800d94c <tcp_receive+0xec8>
                break;
 800d936:	bf00      	nop
 800d938:	e008      	b.n	800d94c <tcp_receive+0xec8>
                break;
 800d93a:	bf00      	nop
 800d93c:	e006      	b.n	800d94c <tcp_receive+0xec8>
                  break;
 800d93e:	bf00      	nop
 800d940:	e004      	b.n	800d94c <tcp_receive+0xec8>
                  break;
 800d942:	bf00      	nop
 800d944:	e002      	b.n	800d94c <tcp_receive+0xec8>
                  break;
 800d946:	bf00      	nop
 800d948:	e000      	b.n	800d94c <tcp_receive+0xec8>
                break;
 800d94a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f001 fa33 	bl	800edb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d952:	e003      	b.n	800d95c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 fa2f 	bl	800edb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d95a:	e01a      	b.n	800d992 <tcp_receive+0xf0e>
 800d95c:	e019      	b.n	800d992 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d95e:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <tcp_receive+0xf18>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	db0a      	blt.n	800d982 <tcp_receive+0xefe>
 800d96c:	4b0b      	ldr	r3, [pc, #44]	; (800d99c <tcp_receive+0xf18>)
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d978:	440b      	add	r3, r1
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	3301      	adds	r3, #1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	dd07      	ble.n	800d992 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	8b5b      	ldrh	r3, [r3, #26]
 800d986:	f043 0302 	orr.w	r3, r3, #2
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d990:	e7ff      	b.n	800d992 <tcp_receive+0xf0e>
 800d992:	bf00      	nop
 800d994:	3750      	adds	r7, #80	; 0x50
 800d996:	46bd      	mov	sp, r7
 800d998:	bdb0      	pop	{r4, r5, r7, pc}
 800d99a:	bf00      	nop
 800d99c:	2400bc5c 	.word	0x2400bc5c
 800d9a0:	2400bc3c 	.word	0x2400bc3c
 800d9a4:	2400bc66 	.word	0x2400bc66
 800d9a8:	0801290c 	.word	0x0801290c
 800d9ac:	08012ce4 	.word	0x08012ce4
 800d9b0:	08012988 	.word	0x08012988

0800d9b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d9ba:	4b15      	ldr	r3, [pc, #84]	; (800da10 <tcp_get_next_optbyte+0x5c>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	b291      	uxth	r1, r2
 800d9c2:	4a13      	ldr	r2, [pc, #76]	; (800da10 <tcp_get_next_optbyte+0x5c>)
 800d9c4:	8011      	strh	r1, [r2, #0]
 800d9c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d9c8:	4b12      	ldr	r3, [pc, #72]	; (800da14 <tcp_get_next_optbyte+0x60>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <tcp_get_next_optbyte+0x26>
 800d9d0:	4b11      	ldr	r3, [pc, #68]	; (800da18 <tcp_get_next_optbyte+0x64>)
 800d9d2:	881b      	ldrh	r3, [r3, #0]
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d208      	bcs.n	800d9ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d9da:	4b10      	ldr	r3, [pc, #64]	; (800da1c <tcp_get_next_optbyte+0x68>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	3314      	adds	r3, #20
 800d9e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d9e2:	88fb      	ldrh	r3, [r7, #6]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	e00b      	b.n	800da04 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d9ec:	88fb      	ldrh	r3, [r7, #6]
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	4b09      	ldr	r3, [pc, #36]	; (800da18 <tcp_get_next_optbyte+0x64>)
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d9fa:	4b06      	ldr	r3, [pc, #24]	; (800da14 <tcp_get_next_optbyte+0x60>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	797b      	ldrb	r3, [r7, #5]
 800da00:	4413      	add	r3, r2
 800da02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	2400bc58 	.word	0x2400bc58
 800da14:	2400bc54 	.word	0x2400bc54
 800da18:	2400bc52 	.word	0x2400bc52
 800da1c:	2400bc4c 	.word	0x2400bc4c

0800da20 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <tcp_parseopt+0x1c>
 800da2e:	4b32      	ldr	r3, [pc, #200]	; (800daf8 <tcp_parseopt+0xd8>)
 800da30:	f240 727d 	movw	r2, #1917	; 0x77d
 800da34:	4931      	ldr	r1, [pc, #196]	; (800dafc <tcp_parseopt+0xdc>)
 800da36:	4832      	ldr	r0, [pc, #200]	; (800db00 <tcp_parseopt+0xe0>)
 800da38:	f002 f96a 	bl	800fd10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800da3c:	4b31      	ldr	r3, [pc, #196]	; (800db04 <tcp_parseopt+0xe4>)
 800da3e:	881b      	ldrh	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d055      	beq.n	800daf0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800da44:	4b30      	ldr	r3, [pc, #192]	; (800db08 <tcp_parseopt+0xe8>)
 800da46:	2200      	movs	r2, #0
 800da48:	801a      	strh	r2, [r3, #0]
 800da4a:	e045      	b.n	800dad8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800da4c:	f7ff ffb2 	bl	800d9b4 <tcp_get_next_optbyte>
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	2b02      	cmp	r3, #2
 800da58:	d006      	beq.n	800da68 <tcp_parseopt+0x48>
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	dc2b      	bgt.n	800dab6 <tcp_parseopt+0x96>
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d041      	beq.n	800dae6 <tcp_parseopt+0xc6>
 800da62:	2b01      	cmp	r3, #1
 800da64:	d127      	bne.n	800dab6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800da66:	e037      	b.n	800dad8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800da68:	f7ff ffa4 	bl	800d9b4 <tcp_get_next_optbyte>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b04      	cmp	r3, #4
 800da70:	d13b      	bne.n	800daea <tcp_parseopt+0xca>
 800da72:	4b25      	ldr	r3, [pc, #148]	; (800db08 <tcp_parseopt+0xe8>)
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	3301      	adds	r3, #1
 800da78:	4a22      	ldr	r2, [pc, #136]	; (800db04 <tcp_parseopt+0xe4>)
 800da7a:	8812      	ldrh	r2, [r2, #0]
 800da7c:	4293      	cmp	r3, r2
 800da7e:	da34      	bge.n	800daea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800da80:	f7ff ff98 	bl	800d9b4 <tcp_get_next_optbyte>
 800da84:	4603      	mov	r3, r0
 800da86:	b29b      	uxth	r3, r3
 800da88:	021b      	lsls	r3, r3, #8
 800da8a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800da8c:	f7ff ff92 	bl	800d9b4 <tcp_get_next_optbyte>
 800da90:	4603      	mov	r3, r0
 800da92:	b29a      	uxth	r2, r3
 800da94:	89bb      	ldrh	r3, [r7, #12]
 800da96:	4313      	orrs	r3, r2
 800da98:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800da9a:	89bb      	ldrh	r3, [r7, #12]
 800da9c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800daa0:	d804      	bhi.n	800daac <tcp_parseopt+0x8c>
 800daa2:	89bb      	ldrh	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <tcp_parseopt+0x8c>
 800daa8:	89ba      	ldrh	r2, [r7, #12]
 800daaa:	e001      	b.n	800dab0 <tcp_parseopt+0x90>
 800daac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800dab4:	e010      	b.n	800dad8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dab6:	f7ff ff7d 	bl	800d9b4 <tcp_get_next_optbyte>
 800daba:	4603      	mov	r3, r0
 800dabc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d914      	bls.n	800daee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dac4:	7afb      	ldrb	r3, [r7, #11]
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <tcp_parseopt+0xe8>)
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	4413      	add	r3, r2
 800dace:	b29b      	uxth	r3, r3
 800dad0:	3b02      	subs	r3, #2
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <tcp_parseopt+0xe8>)
 800dad6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dad8:	4b0b      	ldr	r3, [pc, #44]	; (800db08 <tcp_parseopt+0xe8>)
 800dada:	881a      	ldrh	r2, [r3, #0]
 800dadc:	4b09      	ldr	r3, [pc, #36]	; (800db04 <tcp_parseopt+0xe4>)
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d3b3      	bcc.n	800da4c <tcp_parseopt+0x2c>
 800dae4:	e004      	b.n	800daf0 <tcp_parseopt+0xd0>
          return;
 800dae6:	bf00      	nop
 800dae8:	e002      	b.n	800daf0 <tcp_parseopt+0xd0>
            return;
 800daea:	bf00      	nop
 800daec:	e000      	b.n	800daf0 <tcp_parseopt+0xd0>
            return;
 800daee:	bf00      	nop
      }
    }
  }
}
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	0801290c 	.word	0x0801290c
 800dafc:	08012da0 	.word	0x08012da0
 800db00:	08012988 	.word	0x08012988
 800db04:	2400bc50 	.word	0x2400bc50
 800db08:	2400bc58 	.word	0x2400bc58

0800db0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800db10:	4b05      	ldr	r3, [pc, #20]	; (800db28 <tcp_trigger_input_pcb_close+0x1c>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	f043 0310 	orr.w	r3, r3, #16
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	4b03      	ldr	r3, [pc, #12]	; (800db28 <tcp_trigger_input_pcb_close+0x1c>)
 800db1c:	701a      	strb	r2, [r3, #0]
}
 800db1e:	bf00      	nop
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	2400bc69 	.word	0x2400bc69

0800db2c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <tcp_route+0x28>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	7a1b      	ldrb	r3, [r3, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d006      	beq.n	800db54 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	7a1b      	ldrb	r3, [r3, #8]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fb fb6c 	bl	8009228 <netif_get_by_index>
 800db50:	4603      	mov	r3, r0
 800db52:	e003      	b.n	800db5c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7f9 faad 	bl	80070b4 <ip4_route>
 800db5a:	4603      	mov	r3, r0
  }
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800db64:	b590      	push	{r4, r7, lr}
 800db66:	b087      	sub	sp, #28
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d105      	bne.n	800db86 <tcp_create_segment+0x22>
 800db7a:	4b44      	ldr	r3, [pc, #272]	; (800dc8c <tcp_create_segment+0x128>)
 800db7c:	22a3      	movs	r2, #163	; 0xa3
 800db7e:	4944      	ldr	r1, [pc, #272]	; (800dc90 <tcp_create_segment+0x12c>)
 800db80:	4844      	ldr	r0, [pc, #272]	; (800dc94 <tcp_create_segment+0x130>)
 800db82:	f002 f8c5 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d105      	bne.n	800db98 <tcp_create_segment+0x34>
 800db8c:	4b3f      	ldr	r3, [pc, #252]	; (800dc8c <tcp_create_segment+0x128>)
 800db8e:	22a4      	movs	r2, #164	; 0xa4
 800db90:	4941      	ldr	r1, [pc, #260]	; (800dc98 <tcp_create_segment+0x134>)
 800db92:	4840      	ldr	r0, [pc, #256]	; (800dc94 <tcp_create_segment+0x130>)
 800db94:	f002 f8bc 	bl	800fd10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f003 0304 	and.w	r3, r3, #4
 800dba4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dba6:	2003      	movs	r0, #3
 800dba8:	f7fa ffb8 	bl	8008b1c <memp_malloc>
 800dbac:	6138      	str	r0, [r7, #16]
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d104      	bne.n	800dbbe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dbb4:	68b8      	ldr	r0, [r7, #8]
 800dbb6:	f7fb fe75 	bl	80098a4 <pbuf_free>
    return NULL;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e061      	b.n	800dc82 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dbc4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	891a      	ldrh	r2, [r3, #8]
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d205      	bcs.n	800dbea <tcp_create_segment+0x86>
 800dbde:	4b2b      	ldr	r3, [pc, #172]	; (800dc8c <tcp_create_segment+0x128>)
 800dbe0:	22b0      	movs	r2, #176	; 0xb0
 800dbe2:	492e      	ldr	r1, [pc, #184]	; (800dc9c <tcp_create_segment+0x138>)
 800dbe4:	482b      	ldr	r0, [pc, #172]	; (800dc94 <tcp_create_segment+0x130>)
 800dbe6:	f002 f893 	bl	800fd10 <iprintf>
  seg->len = p->tot_len - optlen;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	891a      	ldrh	r2, [r3, #8]
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dbfa:	2114      	movs	r1, #20
 800dbfc:	68b8      	ldr	r0, [r7, #8]
 800dbfe:	f7fb fdbb 	bl	8009778 <pbuf_add_header>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dc08:	6938      	ldr	r0, [r7, #16]
 800dc0a:	f7fd f8ce 	bl	800adaa <tcp_seg_free>
    return NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e037      	b.n	800dc82 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	8ada      	ldrh	r2, [r3, #22]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	68dc      	ldr	r4, [r3, #12]
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7f7 ff6f 	bl	8005b08 <lwip_htons>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	8b1a      	ldrh	r2, [r3, #24]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	68dc      	ldr	r4, [r3, #12]
 800dc36:	4610      	mov	r0, r2
 800dc38:	f7f7 ff66 	bl	8005b08 <lwip_htons>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	68dc      	ldr	r4, [r3, #12]
 800dc44:	6838      	ldr	r0, [r7, #0]
 800dc46:	f7f7 ff74 	bl	8005b32 <lwip_htonl>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
 800dc50:	089b      	lsrs	r3, r3, #2
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	3305      	adds	r3, #5
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	031b      	lsls	r3, r3, #12
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	4313      	orrs	r3, r2
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	68dc      	ldr	r4, [r3, #12]
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7f7 ff4c 	bl	8005b08 <lwip_htons>
 800dc70:	4603      	mov	r3, r0
 800dc72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	749a      	strb	r2, [r3, #18]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	74da      	strb	r2, [r3, #19]
  return seg;
 800dc80:	693b      	ldr	r3, [r7, #16]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd90      	pop	{r4, r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	08012dbc 	.word	0x08012dbc
 800dc90:	08012e20 	.word	0x08012e20
 800dc94:	08012e40 	.word	0x08012e40
 800dc98:	08012e68 	.word	0x08012e68
 800dc9c:	08012e8c 	.word	0x08012e8c

0800dca0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b08b      	sub	sp, #44	; 0x2c
 800dca4:	af02      	add	r7, sp, #8
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800dcac:	2300      	movs	r3, #0
 800dcae:	61fb      	str	r3, [r7, #28]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d106      	bne.n	800dccc <tcp_split_unsent_seg+0x2c>
 800dcbe:	4b95      	ldr	r3, [pc, #596]	; (800df14 <tcp_split_unsent_seg+0x274>)
 800dcc0:	f240 324b 	movw	r2, #843	; 0x34b
 800dcc4:	4994      	ldr	r1, [pc, #592]	; (800df18 <tcp_split_unsent_seg+0x278>)
 800dcc6:	4895      	ldr	r0, [pc, #596]	; (800df1c <tcp_split_unsent_seg+0x27c>)
 800dcc8:	f002 f822 	bl	800fd10 <iprintf>

  useg = pcb->unsent;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d102      	bne.n	800dcde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcdc:	e116      	b.n	800df0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dcde:	887b      	ldrh	r3, [r7, #2]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d109      	bne.n	800dcf8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dce4:	4b8b      	ldr	r3, [pc, #556]	; (800df14 <tcp_split_unsent_seg+0x274>)
 800dce6:	f240 3253 	movw	r2, #851	; 0x353
 800dcea:	498d      	ldr	r1, [pc, #564]	; (800df20 <tcp_split_unsent_seg+0x280>)
 800dcec:	488b      	ldr	r0, [pc, #556]	; (800df1c <tcp_split_unsent_seg+0x27c>)
 800dcee:	f002 f80f 	bl	800fd10 <iprintf>
    return ERR_VAL;
 800dcf2:	f06f 0305 	mvn.w	r3, #5
 800dcf6:	e109      	b.n	800df0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	887a      	ldrh	r2, [r7, #2]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d301      	bcc.n	800dd06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e102      	b.n	800df0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd0a:	887a      	ldrh	r2, [r7, #2]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d906      	bls.n	800dd1e <tcp_split_unsent_seg+0x7e>
 800dd10:	4b80      	ldr	r3, [pc, #512]	; (800df14 <tcp_split_unsent_seg+0x274>)
 800dd12:	f240 325b 	movw	r2, #859	; 0x35b
 800dd16:	4983      	ldr	r1, [pc, #524]	; (800df24 <tcp_split_unsent_seg+0x284>)
 800dd18:	4880      	ldr	r0, [pc, #512]	; (800df1c <tcp_split_unsent_seg+0x27c>)
 800dd1a:	f001 fff9 	bl	800fd10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	891b      	ldrh	r3, [r3, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d106      	bne.n	800dd34 <tcp_split_unsent_seg+0x94>
 800dd26:	4b7b      	ldr	r3, [pc, #492]	; (800df14 <tcp_split_unsent_seg+0x274>)
 800dd28:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800dd2c:	497e      	ldr	r1, [pc, #504]	; (800df28 <tcp_split_unsent_seg+0x288>)
 800dd2e:	487b      	ldr	r0, [pc, #492]	; (800df1c <tcp_split_unsent_seg+0x27c>)
 800dd30:	f001 ffee 	bl	800fd10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	7a9b      	ldrb	r3, [r3, #10]
 800dd38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f003 0304 	and.w	r3, r3, #4
 800dd44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	891a      	ldrh	r2, [r3, #8]
 800dd4a:	887b      	ldrh	r3, [r7, #2]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dd50:	7bbb      	ldrb	r3, [r7, #14]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	89bb      	ldrh	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd5e:	4619      	mov	r1, r3
 800dd60:	2036      	movs	r0, #54	; 0x36
 800dd62:	f7fb fabd 	bl	80092e0 <pbuf_alloc>
 800dd66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 80b7 	beq.w	800dede <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	891a      	ldrh	r2, [r3, #8]
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	891b      	ldrh	r3, [r3, #8]
 800dd7a:	1ad3      	subs	r3, r2, r3
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	887b      	ldrh	r3, [r7, #2]
 800dd80:	4413      	add	r3, r2
 800dd82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	6858      	ldr	r0, [r3, #4]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	18d1      	adds	r1, r2, r3
 800dd90:	897b      	ldrh	r3, [r7, #10]
 800dd92:	89ba      	ldrh	r2, [r7, #12]
 800dd94:	f7fb ff80 	bl	8009c98 <pbuf_copy_partial>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	89bb      	ldrh	r3, [r7, #12]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	f040 809f 	bne.w	800dee2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	899b      	ldrh	r3, [r3, #12]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7f7 feab 	bl	8005b08 <lwip_htons>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ddc0:	7efb      	ldrb	r3, [r7, #27]
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d007      	beq.n	800ddda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ddca:	7efb      	ldrb	r3, [r7, #27]
 800ddcc:	f023 0308 	bic.w	r3, r3, #8
 800ddd0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ddd2:	7ebb      	ldrb	r3, [r7, #26]
 800ddd4:	f043 0308 	orr.w	r3, r3, #8
 800ddd8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ddda:	7efb      	ldrb	r3, [r7, #27]
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d007      	beq.n	800ddf4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dde4:	7efb      	ldrb	r3, [r7, #27]
 800dde6:	f023 0301 	bic.w	r3, r3, #1
 800ddea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ddec:	7ebb      	ldrb	r3, [r7, #26]
 800ddee:	f043 0301 	orr.w	r3, r3, #1
 800ddf2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7f7 fe99 	bl	8005b32 <lwip_htonl>
 800de00:	4602      	mov	r2, r0
 800de02:	887b      	ldrh	r3, [r7, #2]
 800de04:	18d1      	adds	r1, r2, r3
 800de06:	7eba      	ldrb	r2, [r7, #26]
 800de08:	7bfb      	ldrb	r3, [r7, #15]
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	460b      	mov	r3, r1
 800de0e:	6939      	ldr	r1, [r7, #16]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff fea7 	bl	800db64 <tcp_create_segment>
 800de16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d063      	beq.n	800dee6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	4618      	mov	r0, r3
 800de24:	f7fb fdc6 	bl	80099b4 <pbuf_clen>
 800de28:	4603      	mov	r3, r0
 800de2a:	461a      	mov	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de32:	1a9b      	subs	r3, r3, r2
 800de34:	b29a      	uxth	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6858      	ldr	r0, [r3, #4]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	891a      	ldrh	r2, [r3, #8]
 800de46:	89bb      	ldrh	r3, [r7, #12]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	4619      	mov	r1, r3
 800de4e:	f7fb fba5 	bl	800959c <pbuf_realloc>
  useg->len -= remainder;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	891a      	ldrh	r2, [r3, #8]
 800de56:	89bb      	ldrh	r3, [r7, #12]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	899b      	ldrh	r3, [r3, #12]
 800de66:	b29c      	uxth	r4, r3
 800de68:	7efb      	ldrb	r3, [r7, #27]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f7 fe4b 	bl	8005b08 <lwip_htons>
 800de72:	4603      	mov	r3, r0
 800de74:	461a      	mov	r2, r3
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	4322      	orrs	r2, r4
 800de7c:	b292      	uxth	r2, r2
 800de7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	4618      	mov	r0, r3
 800de86:	f7fb fd95 	bl	80099b4 <pbuf_clen>
 800de8a:	4603      	mov	r3, r0
 800de8c:	461a      	mov	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de94:	4413      	add	r3, r2
 800de96:	b29a      	uxth	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fb fd86 	bl	80099b4 <pbuf_clen>
 800dea8:	4603      	mov	r3, r0
 800deaa:	461a      	mov	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800deb2:	4413      	add	r3, r2
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d103      	bne.n	800deda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	e016      	b.n	800df0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dede:	bf00      	nop
 800dee0:	e002      	b.n	800dee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dee2:	bf00      	nop
 800dee4:	e000      	b.n	800dee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dee6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <tcp_split_unsent_seg+0x25c>
 800deee:	4b09      	ldr	r3, [pc, #36]	; (800df14 <tcp_split_unsent_seg+0x274>)
 800def0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800def4:	490d      	ldr	r1, [pc, #52]	; (800df2c <tcp_split_unsent_seg+0x28c>)
 800def6:	4809      	ldr	r0, [pc, #36]	; (800df1c <tcp_split_unsent_seg+0x27c>)
 800def8:	f001 ff0a 	bl	800fd10 <iprintf>
  if (p != NULL) {
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800df02:	6938      	ldr	r0, [r7, #16]
 800df04:	f7fb fcce 	bl	80098a4 <pbuf_free>
  }

  return ERR_MEM;
 800df08:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3724      	adds	r7, #36	; 0x24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd90      	pop	{r4, r7, pc}
 800df14:	08012dbc 	.word	0x08012dbc
 800df18:	08013180 	.word	0x08013180
 800df1c:	08012e40 	.word	0x08012e40
 800df20:	080131a4 	.word	0x080131a4
 800df24:	080131c8 	.word	0x080131c8
 800df28:	080131d8 	.word	0x080131d8
 800df2c:	080131e8 	.word	0x080131e8

0800df30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800df30:	b590      	push	{r4, r7, lr}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <tcp_send_fin+0x1c>
 800df3e:	4b21      	ldr	r3, [pc, #132]	; (800dfc4 <tcp_send_fin+0x94>)
 800df40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800df44:	4920      	ldr	r1, [pc, #128]	; (800dfc8 <tcp_send_fin+0x98>)
 800df46:	4821      	ldr	r0, [pc, #132]	; (800dfcc <tcp_send_fin+0x9c>)
 800df48:	f001 fee2 	bl	800fd10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df50:	2b00      	cmp	r3, #0
 800df52:	d02e      	beq.n	800dfb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df58:	60fb      	str	r3, [r7, #12]
 800df5a:	e002      	b.n	800df62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1f8      	bne.n	800df5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	899b      	ldrh	r3, [r3, #12]
 800df70:	b29b      	uxth	r3, r3
 800df72:	4618      	mov	r0, r3
 800df74:	f7f7 fdc8 	bl	8005b08 <lwip_htons>
 800df78:	4603      	mov	r3, r0
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	f003 0307 	and.w	r3, r3, #7
 800df80:	2b00      	cmp	r3, #0
 800df82:	d116      	bne.n	800dfb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	899b      	ldrh	r3, [r3, #12]
 800df8a:	b29c      	uxth	r4, r3
 800df8c:	2001      	movs	r0, #1
 800df8e:	f7f7 fdbb 	bl	8005b08 <lwip_htons>
 800df92:	4603      	mov	r3, r0
 800df94:	461a      	mov	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	4322      	orrs	r2, r4
 800df9c:	b292      	uxth	r2, r2
 800df9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	8b5b      	ldrh	r3, [r3, #26]
 800dfa4:	f043 0320 	orr.w	r3, r3, #32
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e004      	b.n	800dfbc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f80b 	bl	800dfd0 <tcp_enqueue_flags>
 800dfba:	4603      	mov	r3, r0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd90      	pop	{r4, r7, pc}
 800dfc4:	08012dbc 	.word	0x08012dbc
 800dfc8:	080131f4 	.word	0x080131f4
 800dfcc:	08012e40 	.word	0x08012e40

0800dfd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08a      	sub	sp, #40	; 0x28
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dfe4:	78fb      	ldrb	r3, [r7, #3]
 800dfe6:	f003 0303 	and.w	r3, r3, #3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_enqueue_flags+0x2c>
 800dfee:	4b67      	ldr	r3, [pc, #412]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800dff0:	f240 4211 	movw	r2, #1041	; 0x411
 800dff4:	4966      	ldr	r1, [pc, #408]	; (800e190 <tcp_enqueue_flags+0x1c0>)
 800dff6:	4867      	ldr	r0, [pc, #412]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800dff8:	f001 fe8a 	bl	800fd10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <tcp_enqueue_flags+0x40>
 800e002:	4b62      	ldr	r3, [pc, #392]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800e004:	f240 4213 	movw	r2, #1043	; 0x413
 800e008:	4963      	ldr	r1, [pc, #396]	; (800e198 <tcp_enqueue_flags+0x1c8>)
 800e00a:	4862      	ldr	r0, [pc, #392]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800e00c:	f001 fe80 	bl	800fd10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	f003 0302 	and.w	r3, r3, #2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e01a:	2301      	movs	r3, #1
 800e01c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e01e:	7ffb      	ldrb	r3, [r7, #31]
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	b2db      	uxtb	r3, r3
 800e024:	f003 0304 	and.w	r3, r3, #4
 800e028:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e02a:	7dfb      	ldrb	r3, [r7, #23]
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e032:	4619      	mov	r1, r3
 800e034:	2036      	movs	r0, #54	; 0x36
 800e036:	f7fb f953 	bl	80092e0 <pbuf_alloc>
 800e03a:	6138      	str	r0, [r7, #16]
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d109      	bne.n	800e056 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	8b5b      	ldrh	r3, [r3, #26]
 800e046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e050:	f04f 33ff 	mov.w	r3, #4294967295
 800e054:	e095      	b.n	800e182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	895a      	ldrh	r2, [r3, #10]
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	429a      	cmp	r2, r3
 800e060:	d206      	bcs.n	800e070 <tcp_enqueue_flags+0xa0>
 800e062:	4b4a      	ldr	r3, [pc, #296]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800e064:	f240 4239 	movw	r2, #1081	; 0x439
 800e068:	494c      	ldr	r1, [pc, #304]	; (800e19c <tcp_enqueue_flags+0x1cc>)
 800e06a:	484a      	ldr	r0, [pc, #296]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800e06c:	f001 fe50 	bl	800fd10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e074:	78fa      	ldrb	r2, [r7, #3]
 800e076:	7ffb      	ldrb	r3, [r7, #31]
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	460b      	mov	r3, r1
 800e07c:	6939      	ldr	r1, [r7, #16]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff fd70 	bl	800db64 <tcp_create_segment>
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d109      	bne.n	800e0a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8b5b      	ldrh	r3, [r3, #26]
 800e090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e094:	b29a      	uxth	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e09a:	f04f 33ff 	mov.w	r3, #4294967295
 800e09e:	e070      	b.n	800e182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	f003 0303 	and.w	r3, r3, #3
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d006      	beq.n	800e0ba <tcp_enqueue_flags+0xea>
 800e0ac:	4b37      	ldr	r3, [pc, #220]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800e0ae:	f240 4242 	movw	r2, #1090	; 0x442
 800e0b2:	493b      	ldr	r1, [pc, #236]	; (800e1a0 <tcp_enqueue_flags+0x1d0>)
 800e0b4:	4837      	ldr	r0, [pc, #220]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800e0b6:	f001 fe2b 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	891b      	ldrh	r3, [r3, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d006      	beq.n	800e0d0 <tcp_enqueue_flags+0x100>
 800e0c2:	4b32      	ldr	r3, [pc, #200]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800e0c4:	f240 4243 	movw	r2, #1091	; 0x443
 800e0c8:	4936      	ldr	r1, [pc, #216]	; (800e1a4 <tcp_enqueue_flags+0x1d4>)
 800e0ca:	4832      	ldr	r0, [pc, #200]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800e0cc:	f001 fe20 	bl	800fd10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0de:	e00d      	b.n	800e0fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e4:	61bb      	str	r3, [r7, #24]
 800e0e6:	e002      	b.n	800e0ee <tcp_enqueue_flags+0x11e>
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	61bb      	str	r3, [r7, #24]
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1f8      	bne.n	800e0e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d104      	bne.n	800e118 <tcp_enqueue_flags+0x148>
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	f003 0301 	and.w	r3, r3, #1
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e122:	78fb      	ldrb	r3, [r7, #3]
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d006      	beq.n	800e13a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8b5b      	ldrh	r3, [r3, #26]
 800e130:	f043 0320 	orr.w	r3, r3, #32
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fb fc38 	bl	80099b4 <pbuf_clen>
 800e144:	4603      	mov	r3, r0
 800e146:	461a      	mov	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e14e:	4413      	add	r3, r2
 800e150:	b29a      	uxth	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10a      	bne.n	800e180 <tcp_enqueue_flags+0x1b0>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <tcp_enqueue_flags+0x1b0>
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <tcp_enqueue_flags+0x1bc>)
 800e174:	f240 4265 	movw	r2, #1125	; 0x465
 800e178:	490b      	ldr	r1, [pc, #44]	; (800e1a8 <tcp_enqueue_flags+0x1d8>)
 800e17a:	4806      	ldr	r0, [pc, #24]	; (800e194 <tcp_enqueue_flags+0x1c4>)
 800e17c:	f001 fdc8 	bl	800fd10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3720      	adds	r7, #32
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	08012dbc 	.word	0x08012dbc
 800e190:	08013210 	.word	0x08013210
 800e194:	08012e40 	.word	0x08012e40
 800e198:	08013268 	.word	0x08013268
 800e19c:	08013288 	.word	0x08013288
 800e1a0:	080132c4 	.word	0x080132c4
 800e1a4:	080132dc 	.word	0x080132dc
 800e1a8:	08013308 	.word	0x08013308

0800e1ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e1ac:	b5b0      	push	{r4, r5, r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d106      	bne.n	800e1c8 <tcp_output+0x1c>
 800e1ba:	4b8a      	ldr	r3, [pc, #552]	; (800e3e4 <tcp_output+0x238>)
 800e1bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e1c0:	4989      	ldr	r1, [pc, #548]	; (800e3e8 <tcp_output+0x23c>)
 800e1c2:	488a      	ldr	r0, [pc, #552]	; (800e3ec <tcp_output+0x240>)
 800e1c4:	f001 fda4 	bl	800fd10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	7d1b      	ldrb	r3, [r3, #20]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d106      	bne.n	800e1de <tcp_output+0x32>
 800e1d0:	4b84      	ldr	r3, [pc, #528]	; (800e3e4 <tcp_output+0x238>)
 800e1d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e1d6:	4986      	ldr	r1, [pc, #536]	; (800e3f0 <tcp_output+0x244>)
 800e1d8:	4884      	ldr	r0, [pc, #528]	; (800e3ec <tcp_output+0x240>)
 800e1da:	f001 fd99 	bl	800fd10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e1de:	4b85      	ldr	r3, [pc, #532]	; (800e3f4 <tcp_output+0x248>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d101      	bne.n	800e1ec <tcp_output+0x40>
    return ERR_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	e1ce      	b.n	800e58a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	bf28      	it	cs
 800e1fc:	4613      	movcs	r3, r2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e206:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10b      	bne.n	800e226 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	8b5b      	ldrh	r3, [r3, #26]
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 81aa 	beq.w	800e570 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fdcb 	bl	800edb8 <tcp_send_empty_ack>
 800e222:	4603      	mov	r3, r0
 800e224:	e1b1      	b.n	800e58a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3304      	adds	r3, #4
 800e22c:	461a      	mov	r2, r3
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff fc7c 	bl	800db2c <tcp_route>
 800e234:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d102      	bne.n	800e242 <tcp_output+0x96>
    return ERR_RTE;
 800e23c:	f06f 0303 	mvn.w	r3, #3
 800e240:	e1a3      	b.n	800e58a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <tcp_output+0xa4>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d111      	bne.n	800e274 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <tcp_output+0xb0>
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	3304      	adds	r3, #4
 800e25a:	e000      	b.n	800e25e <tcp_output+0xb2>
 800e25c:	2300      	movs	r3, #0
 800e25e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d102      	bne.n	800e26c <tcp_output+0xc0>
      return ERR_RTE;
 800e266:	f06f 0303 	mvn.w	r3, #3
 800e26a:	e18e      	b.n	800e58a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7f7 fc59 	bl	8005b32 <lwip_htonl>
 800e280:	4602      	mov	r2, r0
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e28a:	8912      	ldrh	r2, [r2, #8]
 800e28c:	4413      	add	r3, r2
 800e28e:	69ba      	ldr	r2, [r7, #24]
 800e290:	429a      	cmp	r2, r3
 800e292:	d227      	bcs.n	800e2e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e29a:	461a      	mov	r2, r3
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d114      	bne.n	800e2cc <tcp_output+0x120>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d110      	bne.n	800e2cc <tcp_output+0x120>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10b      	bne.n	800e2cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	8b5b      	ldrh	r3, [r3, #26]
 800e2d0:	f003 0302 	and.w	r3, r3, #2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 814d 	beq.w	800e574 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fd6c 	bl	800edb8 <tcp_send_empty_ack>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	e152      	b.n	800e58a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 811c 	beq.w	800e532 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e2fa:	e002      	b.n	800e302 <tcp_output+0x156>
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	623b      	str	r3, [r7, #32]
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1f8      	bne.n	800e2fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e30a:	e112      	b.n	800e532 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	899b      	ldrh	r3, [r3, #12]
 800e312:	b29b      	uxth	r3, r3
 800e314:	4618      	mov	r0, r3
 800e316:	f7f7 fbf7 	bl	8005b08 <lwip_htons>
 800e31a:	4603      	mov	r3, r0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	f003 0304 	and.w	r3, r3, #4
 800e322:	2b00      	cmp	r3, #0
 800e324:	d006      	beq.n	800e334 <tcp_output+0x188>
 800e326:	4b2f      	ldr	r3, [pc, #188]	; (800e3e4 <tcp_output+0x238>)
 800e328:	f240 5236 	movw	r2, #1334	; 0x536
 800e32c:	4932      	ldr	r1, [pc, #200]	; (800e3f8 <tcp_output+0x24c>)
 800e32e:	482f      	ldr	r0, [pc, #188]	; (800e3ec <tcp_output+0x240>)
 800e330:	f001 fcee 	bl	800fd10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d01f      	beq.n	800e37c <tcp_output+0x1d0>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	8b5b      	ldrh	r3, [r3, #26]
 800e340:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e344:	2b00      	cmp	r3, #0
 800e346:	d119      	bne.n	800e37c <tcp_output+0x1d0>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <tcp_output+0x1bc>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d110      	bne.n	800e37c <tcp_output+0x1d0>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35e:	891a      	ldrh	r2, [r3, #8]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e364:	429a      	cmp	r2, r3
 800e366:	d209      	bcs.n	800e37c <tcp_output+0x1d0>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d004      	beq.n	800e37c <tcp_output+0x1d0>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e378:	2b08      	cmp	r3, #8
 800e37a:	d901      	bls.n	800e380 <tcp_output+0x1d4>
 800e37c:	2301      	movs	r3, #1
 800e37e:	e000      	b.n	800e382 <tcp_output+0x1d6>
 800e380:	2300      	movs	r3, #0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d106      	bne.n	800e394 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8b5b      	ldrh	r3, [r3, #26]
 800e38a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 80e4 	beq.w	800e55c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7d1b      	ldrb	r3, [r3, #20]
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d00d      	beq.n	800e3b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	899b      	ldrh	r3, [r3, #12]
 800e3a2:	b29c      	uxth	r4, r3
 800e3a4:	2010      	movs	r0, #16
 800e3a6:	f7f7 fbaf 	bl	8005b08 <lwip_htons>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	4322      	orrs	r2, r4
 800e3b4:	b292      	uxth	r2, r2
 800e3b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e3b8:	697a      	ldr	r2, [r7, #20]
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3be:	f000 f909 	bl	800e5d4 <tcp_output_segment>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d016      	beq.n	800e3fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	8b5b      	ldrh	r3, [r3, #26]
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	835a      	strh	r2, [r3, #26]
      return err;
 800e3dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3e0:	e0d3      	b.n	800e58a <tcp_output+0x3de>
 800e3e2:	bf00      	nop
 800e3e4:	08012dbc 	.word	0x08012dbc
 800e3e8:	08013330 	.word	0x08013330
 800e3ec:	08012e40 	.word	0x08012e40
 800e3f0:	08013348 	.word	0x08013348
 800e3f4:	2400bc70 	.word	0x2400bc70
 800e3f8:	08013370 	.word	0x08013370
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	7d1b      	ldrb	r3, [r3, #20]
 800e408:	2b02      	cmp	r3, #2
 800e40a:	d006      	beq.n	800e41a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8b5b      	ldrh	r3, [r3, #26]
 800e410:	f023 0303 	bic.w	r3, r3, #3
 800e414:	b29a      	uxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4618      	mov	r0, r3
 800e422:	f7f7 fb86 	bl	8005b32 <lwip_htonl>
 800e426:	4604      	mov	r4, r0
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	891b      	ldrh	r3, [r3, #8]
 800e42c:	461d      	mov	r5, r3
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	899b      	ldrh	r3, [r3, #12]
 800e434:	b29b      	uxth	r3, r3
 800e436:	4618      	mov	r0, r3
 800e438:	f7f7 fb66 	bl	8005b08 <lwip_htons>
 800e43c:	4603      	mov	r3, r0
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	f003 0303 	and.w	r3, r3, #3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <tcp_output+0x2a0>
 800e448:	2301      	movs	r3, #1
 800e44a:	e000      	b.n	800e44e <tcp_output+0x2a2>
 800e44c:	2300      	movs	r3, #0
 800e44e:	442b      	add	r3, r5
 800e450:	4423      	add	r3, r4
 800e452:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	da02      	bge.n	800e466 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	891b      	ldrh	r3, [r3, #8]
 800e46a:	461c      	mov	r4, r3
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	899b      	ldrh	r3, [r3, #12]
 800e472:	b29b      	uxth	r3, r3
 800e474:	4618      	mov	r0, r3
 800e476:	f7f7 fb47 	bl	8005b08 <lwip_htons>
 800e47a:	4603      	mov	r3, r0
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	f003 0303 	and.w	r3, r3, #3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <tcp_output+0x2de>
 800e486:	2301      	movs	r3, #1
 800e488:	e000      	b.n	800e48c <tcp_output+0x2e0>
 800e48a:	2300      	movs	r3, #0
 800e48c:	4423      	add	r3, r4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d049      	beq.n	800e526 <tcp_output+0x37a>
      seg->next = NULL;
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d105      	bne.n	800e4ac <tcp_output+0x300>
        pcb->unacked = seg;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	623b      	str	r3, [r7, #32]
 800e4aa:	e03f      	b.n	800e52c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f7 fb3d 	bl	8005b32 <lwip_htonl>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f7 fb36 	bl	8005b32 <lwip_htonl>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	1ae3      	subs	r3, r4, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da24      	bge.n	800e518 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	3370      	adds	r3, #112	; 0x70
 800e4d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e4d4:	e002      	b.n	800e4dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d011      	beq.n	800e508 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7f7 fb20 	bl	8005b32 <lwip_htonl>
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7f7 fb19 	bl	8005b32 <lwip_htonl>
 800e500:	4603      	mov	r3, r0
 800e502:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e504:	2b00      	cmp	r3, #0
 800e506:	dbe6      	blt.n	800e4d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	e009      	b.n	800e52c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e51c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	623b      	str	r3, [r7, #32]
 800e524:	e002      	b.n	800e52c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e528:	f7fc fc3f 	bl	800adaa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e530:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	2b00      	cmp	r3, #0
 800e536:	d012      	beq.n	800e55e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7f7 faf7 	bl	8005b32 <lwip_htonl>
 800e544:	4602      	mov	r2, r0
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54e:	8912      	ldrh	r2, [r2, #8]
 800e550:	4413      	add	r3, r2
  while (seg != NULL &&
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	429a      	cmp	r2, r3
 800e556:	f4bf aed9 	bcs.w	800e30c <tcp_output+0x160>
 800e55a:	e000      	b.n	800e55e <tcp_output+0x3b2>
      break;
 800e55c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e562:	2b00      	cmp	r3, #0
 800e564:	d108      	bne.n	800e578 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e56e:	e004      	b.n	800e57a <tcp_output+0x3ce>
    goto output_done;
 800e570:	bf00      	nop
 800e572:	e002      	b.n	800e57a <tcp_output+0x3ce>
    goto output_done;
 800e574:	bf00      	nop
 800e576:	e000      	b.n	800e57a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e578:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	8b5b      	ldrh	r3, [r3, #26]
 800e57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e582:	b29a      	uxth	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3728      	adds	r7, #40	; 0x28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bdb0      	pop	{r4, r5, r7, pc}
 800e592:	bf00      	nop

0800e594 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <tcp_output_segment_busy+0x1c>
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <tcp_output_segment_busy+0x34>)
 800e5a4:	f240 529a 	movw	r2, #1434	; 0x59a
 800e5a8:	4908      	ldr	r1, [pc, #32]	; (800e5cc <tcp_output_segment_busy+0x38>)
 800e5aa:	4809      	ldr	r0, [pc, #36]	; (800e5d0 <tcp_output_segment_busy+0x3c>)
 800e5ac:	f001 fbb0 	bl	800fd10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	7b9b      	ldrb	r3, [r3, #14]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d001      	beq.n	800e5be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e000      	b.n	800e5c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	08012dbc 	.word	0x08012dbc
 800e5cc:	08013388 	.word	0x08013388
 800e5d0:	08012e40 	.word	0x08012e40

0800e5d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e5d4:	b5b0      	push	{r4, r5, r7, lr}
 800e5d6:	b08c      	sub	sp, #48	; 0x30
 800e5d8:	af04      	add	r7, sp, #16
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d106      	bne.n	800e5f4 <tcp_output_segment+0x20>
 800e5e6:	4b63      	ldr	r3, [pc, #396]	; (800e774 <tcp_output_segment+0x1a0>)
 800e5e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e5ec:	4962      	ldr	r1, [pc, #392]	; (800e778 <tcp_output_segment+0x1a4>)
 800e5ee:	4863      	ldr	r0, [pc, #396]	; (800e77c <tcp_output_segment+0x1a8>)
 800e5f0:	f001 fb8e 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d106      	bne.n	800e608 <tcp_output_segment+0x34>
 800e5fa:	4b5e      	ldr	r3, [pc, #376]	; (800e774 <tcp_output_segment+0x1a0>)
 800e5fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e600:	495f      	ldr	r1, [pc, #380]	; (800e780 <tcp_output_segment+0x1ac>)
 800e602:	485e      	ldr	r0, [pc, #376]	; (800e77c <tcp_output_segment+0x1a8>)
 800e604:	f001 fb84 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d106      	bne.n	800e61c <tcp_output_segment+0x48>
 800e60e:	4b59      	ldr	r3, [pc, #356]	; (800e774 <tcp_output_segment+0x1a0>)
 800e610:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e614:	495b      	ldr	r1, [pc, #364]	; (800e784 <tcp_output_segment+0x1b0>)
 800e616:	4859      	ldr	r0, [pc, #356]	; (800e77c <tcp_output_segment+0x1a8>)
 800e618:	f001 fb7a 	bl	800fd10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f7ff ffb9 	bl	800e594 <tcp_output_segment_busy>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	e09f      	b.n	800e76c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	68dc      	ldr	r4, [r3, #12]
 800e634:	4610      	mov	r0, r2
 800e636:	f7f7 fa7c 	bl	8005b32 <lwip_htonl>
 800e63a:	4603      	mov	r3, r0
 800e63c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68dc      	ldr	r4, [r3, #12]
 800e646:	4610      	mov	r0, r2
 800e648:	f7f7 fa5e 	bl	8005b08 <lwip_htons>
 800e64c:	4603      	mov	r3, r0
 800e64e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e658:	441a      	add	r2, r3
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	3314      	adds	r3, #20
 800e664:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	7a9b      	ldrb	r3, [r3, #10]
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d015      	beq.n	800e69e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	3304      	adds	r3, #4
 800e676:	461a      	mov	r2, r3
 800e678:	6879      	ldr	r1, [r7, #4]
 800e67a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e67e:	f7fc fe8b 	bl	800b398 <tcp_eff_send_mss_netif>
 800e682:	4603      	mov	r3, r0
 800e684:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e686:	8b7b      	ldrh	r3, [r7, #26]
 800e688:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7f7 fa50 	bl	8005b32 <lwip_htonl>
 800e692:	4602      	mov	r2, r0
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	3304      	adds	r3, #4
 800e69c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	da02      	bge.n	800e6ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10c      	bne.n	800e6d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e6b6:	4b34      	ldr	r3, [pc, #208]	; (800e788 <tcp_output_segment+0x1b4>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f7 fa34 	bl	8005b32 <lwip_htonl>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	68da      	ldr	r2, [r3, #12]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	8959      	ldrh	r1, [r3, #10]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	8b3a      	ldrh	r2, [r7, #24]
 800e6ea:	1a8a      	subs	r2, r1, r2
 800e6ec:	b292      	uxth	r2, r2
 800e6ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	8919      	ldrh	r1, [r3, #8]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	8b3a      	ldrh	r2, [r7, #24]
 800e6fc:	1a8a      	subs	r2, r1, r2
 800e6fe:	b292      	uxth	r2, r2
 800e700:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	68fa      	ldr	r2, [r7, #12]
 800e708:	68d2      	ldr	r2, [r2, #12]
 800e70a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	741a      	strb	r2, [r3, #16]
 800e714:	2200      	movs	r2, #0
 800e716:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	f103 0214 	add.w	r2, r3, #20
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	7a9b      	ldrb	r3, [r3, #10]
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	f003 0304 	and.w	r3, r3, #4
 800e72a:	4413      	add	r3, r2
 800e72c:	69fa      	ldr	r2, [r7, #28]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d006      	beq.n	800e740 <tcp_output_segment+0x16c>
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <tcp_output_segment+0x1a0>)
 800e734:	f240 621c 	movw	r2, #1564	; 0x61c
 800e738:	4914      	ldr	r1, [pc, #80]	; (800e78c <tcp_output_segment+0x1b8>)
 800e73a:	4810      	ldr	r0, [pc, #64]	; (800e77c <tcp_output_segment+0x1a8>)
 800e73c:	f001 fae8 	bl	800fd10 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6858      	ldr	r0, [r3, #4]
 800e744:	68b9      	ldr	r1, [r7, #8]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	1d1c      	adds	r4, r3, #4
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	7add      	ldrb	r5, [r3, #11]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	7a9b      	ldrb	r3, [r3, #10]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	9202      	str	r2, [sp, #8]
 800e756:	2206      	movs	r2, #6
 800e758:	9201      	str	r2, [sp, #4]
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	462b      	mov	r3, r5
 800e75e:	4622      	mov	r2, r4
 800e760:	f7f8 fe66 	bl	8007430 <ip4_output_if>
 800e764:	4603      	mov	r3, r0
 800e766:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bdb0      	pop	{r4, r5, r7, pc}
 800e774:	08012dbc 	.word	0x08012dbc
 800e778:	080133b0 	.word	0x080133b0
 800e77c:	08012e40 	.word	0x08012e40
 800e780:	080133d0 	.word	0x080133d0
 800e784:	080133f0 	.word	0x080133f0
 800e788:	2400bc24 	.word	0x2400bc24
 800e78c:	08013414 	.word	0x08013414

0800e790 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e790:	b5b0      	push	{r4, r5, r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d106      	bne.n	800e7ac <tcp_rexmit_rto_prepare+0x1c>
 800e79e:	4b31      	ldr	r3, [pc, #196]	; (800e864 <tcp_rexmit_rto_prepare+0xd4>)
 800e7a0:	f240 6263 	movw	r2, #1635	; 0x663
 800e7a4:	4930      	ldr	r1, [pc, #192]	; (800e868 <tcp_rexmit_rto_prepare+0xd8>)
 800e7a6:	4831      	ldr	r0, [pc, #196]	; (800e86c <tcp_rexmit_rto_prepare+0xdc>)
 800e7a8:	f001 fab2 	bl	800fd10 <iprintf>

  if (pcb->unacked == NULL) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e7b4:	f06f 0305 	mvn.w	r3, #5
 800e7b8:	e050      	b.n	800e85c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	e00b      	b.n	800e7da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f7ff fee6 	bl	800e594 <tcp_output_segment_busy>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e7ce:	f06f 0305 	mvn.w	r3, #5
 800e7d2:	e043      	b.n	800e85c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1ef      	bne.n	800e7c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff fed6 	bl	800e594 <tcp_output_segment_busy>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d002      	beq.n	800e7f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e7ee:	f06f 0305 	mvn.w	r3, #5
 800e7f2:	e033      	b.n	800e85c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	8b5b      	ldrh	r3, [r3, #26]
 800e80e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e812:	b29a      	uxth	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f7 f987 	bl	8005b32 <lwip_htonl>
 800e824:	4604      	mov	r4, r0
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	891b      	ldrh	r3, [r3, #8]
 800e82a:	461d      	mov	r5, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	899b      	ldrh	r3, [r3, #12]
 800e832:	b29b      	uxth	r3, r3
 800e834:	4618      	mov	r0, r3
 800e836:	f7f7 f967 	bl	8005b08 <lwip_htons>
 800e83a:	4603      	mov	r3, r0
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 0303 	and.w	r3, r3, #3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <tcp_rexmit_rto_prepare+0xba>
 800e846:	2301      	movs	r3, #1
 800e848:	e000      	b.n	800e84c <tcp_rexmit_rto_prepare+0xbc>
 800e84a:	2300      	movs	r3, #0
 800e84c:	442b      	add	r3, r5
 800e84e:	18e2      	adds	r2, r4, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bdb0      	pop	{r4, r5, r7, pc}
 800e864:	08012dbc 	.word	0x08012dbc
 800e868:	08013428 	.word	0x08013428
 800e86c:	08012e40 	.word	0x08012e40

0800e870 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <tcp_rexmit_rto_commit+0x1c>
 800e87e:	4b0d      	ldr	r3, [pc, #52]	; (800e8b4 <tcp_rexmit_rto_commit+0x44>)
 800e880:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e884:	490c      	ldr	r1, [pc, #48]	; (800e8b8 <tcp_rexmit_rto_commit+0x48>)
 800e886:	480d      	ldr	r0, [pc, #52]	; (800e8bc <tcp_rexmit_rto_commit+0x4c>)
 800e888:	f001 fa42 	bl	800fd10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e892:	2bff      	cmp	r3, #255	; 0xff
 800e894:	d007      	beq.n	800e8a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e89c:	3301      	adds	r3, #1
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7ff fc80 	bl	800e1ac <tcp_output>
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	08012dbc 	.word	0x08012dbc
 800e8b8:	0801344c 	.word	0x0801344c
 800e8bc:	08012e40 	.word	0x08012e40

0800e8c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <tcp_rexmit_rto+0x1c>
 800e8ce:	4b0a      	ldr	r3, [pc, #40]	; (800e8f8 <tcp_rexmit_rto+0x38>)
 800e8d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e8d4:	4909      	ldr	r1, [pc, #36]	; (800e8fc <tcp_rexmit_rto+0x3c>)
 800e8d6:	480a      	ldr	r0, [pc, #40]	; (800e900 <tcp_rexmit_rto+0x40>)
 800e8d8:	f001 fa1a 	bl	800fd10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff ff57 	bl	800e790 <tcp_rexmit_rto_prepare>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ffc1 	bl	800e870 <tcp_rexmit_rto_commit>
  }
}
 800e8ee:	bf00      	nop
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	08012dbc 	.word	0x08012dbc
 800e8fc:	08013470 	.word	0x08013470
 800e900:	08012e40 	.word	0x08012e40

0800e904 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d106      	bne.n	800e920 <tcp_rexmit+0x1c>
 800e912:	4b2f      	ldr	r3, [pc, #188]	; (800e9d0 <tcp_rexmit+0xcc>)
 800e914:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e918:	492e      	ldr	r1, [pc, #184]	; (800e9d4 <tcp_rexmit+0xd0>)
 800e91a:	482f      	ldr	r0, [pc, #188]	; (800e9d8 <tcp_rexmit+0xd4>)
 800e91c:	f001 f9f8 	bl	800fd10 <iprintf>

  if (pcb->unacked == NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e928:	f06f 0305 	mvn.w	r3, #5
 800e92c:	e04c      	b.n	800e9c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e932:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e934:	68b8      	ldr	r0, [r7, #8]
 800e936:	f7ff fe2d 	bl	800e594 <tcp_output_segment_busy>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e940:	f06f 0305 	mvn.w	r3, #5
 800e944:	e040      	b.n	800e9c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	336c      	adds	r3, #108	; 0x6c
 800e952:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e954:	e002      	b.n	800e95c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d011      	beq.n	800e988 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7f7 f8e0 	bl	8005b32 <lwip_htonl>
 800e972:	4604      	mov	r4, r0
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f7 f8d9 	bl	8005b32 <lwip_htonl>
 800e980:	4603      	mov	r3, r0
 800e982:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e984:	2b00      	cmp	r3, #0
 800e986:	dbe6      	blt.n	800e956 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d103      	bne.n	800e9a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9ac:	2bff      	cmp	r3, #255	; 0xff
 800e9ae:	d007      	beq.n	800e9c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3714      	adds	r7, #20
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd90      	pop	{r4, r7, pc}
 800e9d0:	08012dbc 	.word	0x08012dbc
 800e9d4:	0801348c 	.word	0x0801348c
 800e9d8:	08012e40 	.word	0x08012e40

0800e9dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <tcp_rexmit_fast+0x1c>
 800e9ea:	4b2a      	ldr	r3, [pc, #168]	; (800ea94 <tcp_rexmit_fast+0xb8>)
 800e9ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e9f0:	4929      	ldr	r1, [pc, #164]	; (800ea98 <tcp_rexmit_fast+0xbc>)
 800e9f2:	482a      	ldr	r0, [pc, #168]	; (800ea9c <tcp_rexmit_fast+0xc0>)
 800e9f4:	f001 f98c 	bl	800fd10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d045      	beq.n	800ea8c <tcp_rexmit_fast+0xb0>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	8b5b      	ldrh	r3, [r3, #26]
 800ea04:	f003 0304 	and.w	r3, r3, #4
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d13f      	bne.n	800ea8c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff ff79 	bl	800e904 <tcp_rexmit>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d139      	bne.n	800ea8c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea24:	4293      	cmp	r3, r2
 800ea26:	bf28      	it	cs
 800ea28:	4613      	movcs	r3, r2
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	da00      	bge.n	800ea32 <tcp_rexmit_fast+0x56>
 800ea30:	3301      	adds	r3, #1
 800ea32:	105b      	asrs	r3, r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea42:	461a      	mov	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d206      	bcs.n	800ea5c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea66:	4619      	mov	r1, r3
 800ea68:	0049      	lsls	r1, r1, #1
 800ea6a:	440b      	add	r3, r1
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	4413      	add	r3, r2
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	8b5b      	ldrh	r3, [r3, #26]
 800ea7c:	f043 0304 	orr.w	r3, r3, #4
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ea8c:	bf00      	nop
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	08012dbc 	.word	0x08012dbc
 800ea98:	080134a4 	.word	0x080134a4
 800ea9c:	08012e40 	.word	0x08012e40

0800eaa0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	817b      	strh	r3, [r7, #10]
 800eaae:	4613      	mov	r3, r2
 800eab0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800eab2:	897a      	ldrh	r2, [r7, #10]
 800eab4:	893b      	ldrh	r3, [r7, #8]
 800eab6:	4413      	add	r3, r2
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	3314      	adds	r3, #20
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eac2:	4619      	mov	r1, r3
 800eac4:	2022      	movs	r0, #34	; 0x22
 800eac6:	f7fa fc0b 	bl	80092e0 <pbuf_alloc>
 800eaca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d04d      	beq.n	800eb6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ead2:	897b      	ldrh	r3, [r7, #10]
 800ead4:	3313      	adds	r3, #19
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	8952      	ldrh	r2, [r2, #10]
 800eada:	4293      	cmp	r3, r2
 800eadc:	db06      	blt.n	800eaec <tcp_output_alloc_header_common+0x4c>
 800eade:	4b26      	ldr	r3, [pc, #152]	; (800eb78 <tcp_output_alloc_header_common+0xd8>)
 800eae0:	f240 7223 	movw	r2, #1827	; 0x723
 800eae4:	4925      	ldr	r1, [pc, #148]	; (800eb7c <tcp_output_alloc_header_common+0xdc>)
 800eae6:	4826      	ldr	r0, [pc, #152]	; (800eb80 <tcp_output_alloc_header_common+0xe0>)
 800eae8:	f001 f912 	bl	800fd10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eaf2:	8c3b      	ldrh	r3, [r7, #32]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7f7 f807 	bl	8005b08 <lwip_htons>
 800eafa:	4603      	mov	r3, r0
 800eafc:	461a      	mov	r2, r3
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eb02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7f6 ffff 	bl	8005b08 <lwip_htons>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7f7 f80a 	bl	8005b32 <lwip_htonl>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800eb24:	897b      	ldrh	r3, [r7, #10]
 800eb26:	089b      	lsrs	r3, r3, #2
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	3305      	adds	r3, #5
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	031b      	lsls	r3, r3, #12
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7f6 ffe3 	bl	8005b08 <lwip_htons>
 800eb42:	4603      	mov	r3, r0
 800eb44:	461a      	mov	r2, r3
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800eb4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7f6 ffdb 	bl	8005b08 <lwip_htons>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	741a      	strb	r2, [r3, #16]
 800eb60:	2200      	movs	r2, #0
 800eb62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	2200      	movs	r2, #0
 800eb68:	749a      	strb	r2, [r3, #18]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800eb6e:	697b      	ldr	r3, [r7, #20]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3718      	adds	r7, #24
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08012dbc 	.word	0x08012dbc
 800eb7c:	080134c4 	.word	0x080134c4
 800eb80:	08012e40 	.word	0x08012e40

0800eb84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800eb84:	b5b0      	push	{r4, r5, r7, lr}
 800eb86:	b08a      	sub	sp, #40	; 0x28
 800eb88:	af04      	add	r7, sp, #16
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	607b      	str	r3, [r7, #4]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	817b      	strh	r3, [r7, #10]
 800eb92:	4613      	mov	r3, r2
 800eb94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <tcp_output_alloc_header+0x26>
 800eb9c:	4b15      	ldr	r3, [pc, #84]	; (800ebf4 <tcp_output_alloc_header+0x70>)
 800eb9e:	f240 7242 	movw	r2, #1858	; 0x742
 800eba2:	4915      	ldr	r1, [pc, #84]	; (800ebf8 <tcp_output_alloc_header+0x74>)
 800eba4:	4815      	ldr	r0, [pc, #84]	; (800ebfc <tcp_output_alloc_header+0x78>)
 800eba6:	f001 f8b3 	bl	800fd10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	8adb      	ldrh	r3, [r3, #22]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	8b12      	ldrh	r2, [r2, #24]
 800ebb6:	68f9      	ldr	r1, [r7, #12]
 800ebb8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ebba:	893d      	ldrh	r5, [r7, #8]
 800ebbc:	897c      	ldrh	r4, [r7, #10]
 800ebbe:	9103      	str	r1, [sp, #12]
 800ebc0:	2110      	movs	r1, #16
 800ebc2:	9102      	str	r1, [sp, #8]
 800ebc4:	9201      	str	r2, [sp, #4]
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4621      	mov	r1, r4
 800ebce:	f7ff ff67 	bl	800eaa0 <tcp_output_alloc_header_common>
 800ebd2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d006      	beq.n	800ebe8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ebe2:	441a      	add	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ebe8:	697b      	ldr	r3, [r7, #20]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08012dbc 	.word	0x08012dbc
 800ebf8:	080134f4 	.word	0x080134f4
 800ebfc:	08012e40 	.word	0x08012e40

0800ec00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b088      	sub	sp, #32
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	4611      	mov	r1, r2
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	460b      	mov	r3, r1
 800ec10:	71fb      	strb	r3, [r7, #7]
 800ec12:	4613      	mov	r3, r2
 800ec14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d106      	bne.n	800ec2e <tcp_output_fill_options+0x2e>
 800ec20:	4b13      	ldr	r3, [pc, #76]	; (800ec70 <tcp_output_fill_options+0x70>)
 800ec22:	f240 7256 	movw	r2, #1878	; 0x756
 800ec26:	4913      	ldr	r1, [pc, #76]	; (800ec74 <tcp_output_fill_options+0x74>)
 800ec28:	4813      	ldr	r0, [pc, #76]	; (800ec78 <tcp_output_fill_options+0x78>)
 800ec2a:	f001 f871 	bl	800fd10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	3314      	adds	r3, #20
 800ec38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	f103 0214 	add.w	r2, r3, #20
 800ec40:	8bfb      	ldrh	r3, [r7, #30]
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4619      	mov	r1, r3
 800ec46:	79fb      	ldrb	r3, [r7, #7]
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	f003 0304 	and.w	r3, r3, #4
 800ec4e:	440b      	add	r3, r1
 800ec50:	4413      	add	r3, r2
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d006      	beq.n	800ec66 <tcp_output_fill_options+0x66>
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <tcp_output_fill_options+0x70>)
 800ec5a:	f240 7275 	movw	r2, #1909	; 0x775
 800ec5e:	4907      	ldr	r1, [pc, #28]	; (800ec7c <tcp_output_fill_options+0x7c>)
 800ec60:	4805      	ldr	r0, [pc, #20]	; (800ec78 <tcp_output_fill_options+0x78>)
 800ec62:	f001 f855 	bl	800fd10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ec66:	bf00      	nop
 800ec68:	3720      	adds	r7, #32
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	08012dbc 	.word	0x08012dbc
 800ec74:	0801351c 	.word	0x0801351c
 800ec78:	08012e40 	.word	0x08012e40
 800ec7c:	08013414 	.word	0x08013414

0800ec80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08a      	sub	sp, #40	; 0x28
 800ec84:	af04      	add	r7, sp, #16
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <tcp_output_control_segment+0x22>
 800ec94:	4b1c      	ldr	r3, [pc, #112]	; (800ed08 <tcp_output_control_segment+0x88>)
 800ec96:	f240 7287 	movw	r2, #1927	; 0x787
 800ec9a:	491c      	ldr	r1, [pc, #112]	; (800ed0c <tcp_output_control_segment+0x8c>)
 800ec9c:	481c      	ldr	r0, [pc, #112]	; (800ed10 <tcp_output_control_segment+0x90>)
 800ec9e:	f001 f837 	bl	800fd10 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800eca2:	683a      	ldr	r2, [r7, #0]
 800eca4:	6879      	ldr	r1, [r7, #4]
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f7fe ff40 	bl	800db2c <tcp_route>
 800ecac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ecb4:	23fc      	movs	r3, #252	; 0xfc
 800ecb6:	75fb      	strb	r3, [r7, #23]
 800ecb8:	e01c      	b.n	800ecf4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	7adb      	ldrb	r3, [r3, #11]
 800ecc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	7a9b      	ldrb	r3, [r3, #10]
 800ecca:	757b      	strb	r3, [r7, #21]
 800eccc:	e003      	b.n	800ecd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ecce:	23ff      	movs	r3, #255	; 0xff
 800ecd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ecd6:	7dba      	ldrb	r2, [r7, #22]
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	9302      	str	r3, [sp, #8]
 800ecdc:	2306      	movs	r3, #6
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	7d7b      	ldrb	r3, [r7, #21]
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	4613      	mov	r3, r2
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	68b8      	ldr	r0, [r7, #8]
 800ecec:	f7f8 fba0 	bl	8007430 <ip4_output_if>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ecf4:	68b8      	ldr	r0, [r7, #8]
 800ecf6:	f7fa fdd5 	bl	80098a4 <pbuf_free>
  return err;
 800ecfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	08012dbc 	.word	0x08012dbc
 800ed0c:	08013544 	.word	0x08013544
 800ed10:	08012e40 	.word	0x08012e40

0800ed14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ed14:	b590      	push	{r4, r7, lr}
 800ed16:	b08b      	sub	sp, #44	; 0x2c
 800ed18:	af04      	add	r7, sp, #16
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d106      	bne.n	800ed36 <tcp_rst+0x22>
 800ed28:	4b1f      	ldr	r3, [pc, #124]	; (800eda8 <tcp_rst+0x94>)
 800ed2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ed2e:	491f      	ldr	r1, [pc, #124]	; (800edac <tcp_rst+0x98>)
 800ed30:	481f      	ldr	r0, [pc, #124]	; (800edb0 <tcp_rst+0x9c>)
 800ed32:	f000 ffed 	bl	800fd10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d106      	bne.n	800ed4a <tcp_rst+0x36>
 800ed3c:	4b1a      	ldr	r3, [pc, #104]	; (800eda8 <tcp_rst+0x94>)
 800ed3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ed42:	491c      	ldr	r1, [pc, #112]	; (800edb4 <tcp_rst+0xa0>)
 800ed44:	481a      	ldr	r0, [pc, #104]	; (800edb0 <tcp_rst+0x9c>)
 800ed46:	f000 ffe3 	bl	800fd10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ed4e:	f246 0308 	movw	r3, #24584	; 0x6008
 800ed52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ed54:	7dfb      	ldrb	r3, [r7, #23]
 800ed56:	b29c      	uxth	r4, r3
 800ed58:	68b8      	ldr	r0, [r7, #8]
 800ed5a:	f7f6 feea 	bl	8005b32 <lwip_htonl>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	8abb      	ldrh	r3, [r7, #20]
 800ed62:	9303      	str	r3, [sp, #12]
 800ed64:	2314      	movs	r3, #20
 800ed66:	9302      	str	r3, [sp, #8]
 800ed68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	4613      	mov	r3, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	4621      	mov	r1, r4
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7ff fe92 	bl	800eaa0 <tcp_output_alloc_header_common>
 800ed7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00c      	beq.n	800ed9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2200      	movs	r2, #0
 800ed88:	6939      	ldr	r1, [r7, #16]
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f7ff ff38 	bl	800ec00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	6939      	ldr	r1, [r7, #16]
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff ff72 	bl	800ec80 <tcp_output_control_segment>
 800ed9c:	e000      	b.n	800eda0 <tcp_rst+0x8c>
    return;
 800ed9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eda0:	371c      	adds	r7, #28
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd90      	pop	{r4, r7, pc}
 800eda6:	bf00      	nop
 800eda8:	08012dbc 	.word	0x08012dbc
 800edac:	08013570 	.word	0x08013570
 800edb0:	08012e40 	.word	0x08012e40
 800edb4:	0801358c 	.word	0x0801358c

0800edb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800edb8:	b590      	push	{r4, r7, lr}
 800edba:	b087      	sub	sp, #28
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <tcp_send_empty_ack+0x24>
 800edce:	4b28      	ldr	r3, [pc, #160]	; (800ee70 <tcp_send_empty_ack+0xb8>)
 800edd0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800edd4:	4927      	ldr	r1, [pc, #156]	; (800ee74 <tcp_send_empty_ack+0xbc>)
 800edd6:	4828      	ldr	r0, [pc, #160]	; (800ee78 <tcp_send_empty_ack+0xc0>)
 800edd8:	f000 ff9a 	bl	800fd10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	f003 0304 	and.w	r3, r3, #4
 800ede6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ede8:	7d7b      	ldrb	r3, [r7, #21]
 800edea:	b29c      	uxth	r4, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f6 fe9e 	bl	8005b32 <lwip_htonl>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2200      	movs	r2, #0
 800edfa:	4621      	mov	r1, r4
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff fec1 	bl	800eb84 <tcp_output_alloc_header>
 800ee02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d109      	bne.n	800ee1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	8b5b      	ldrh	r3, [r3, #26]
 800ee0e:	f043 0303 	orr.w	r3, r3, #3
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ee18:	f06f 0301 	mvn.w	r3, #1
 800ee1c:	e023      	b.n	800ee66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ee1e:	7dbb      	ldrb	r3, [r7, #22]
 800ee20:	7dfa      	ldrb	r2, [r7, #23]
 800ee22:	6939      	ldr	r1, [r7, #16]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff feeb 	bl	800ec00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3304      	adds	r3, #4
 800ee30:	6939      	ldr	r1, [r7, #16]
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff ff24 	bl	800ec80 <tcp_output_control_segment>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ee3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d007      	beq.n	800ee54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8b5b      	ldrh	r3, [r3, #26]
 800ee48:	f043 0303 	orr.w	r3, r3, #3
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	835a      	strh	r2, [r3, #26]
 800ee52:	e006      	b.n	800ee62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	8b5b      	ldrh	r3, [r3, #26]
 800ee58:	f023 0303 	bic.w	r3, r3, #3
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ee62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	371c      	adds	r7, #28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd90      	pop	{r4, r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	08012dbc 	.word	0x08012dbc
 800ee74:	080135a8 	.word	0x080135a8
 800ee78:	08012e40 	.word	0x08012e40

0800ee7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ee7c:	b590      	push	{r4, r7, lr}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ee84:	2300      	movs	r3, #0
 800ee86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_keepalive+0x20>
 800ee8e:	4b18      	ldr	r3, [pc, #96]	; (800eef0 <tcp_keepalive+0x74>)
 800ee90:	f640 0224 	movw	r2, #2084	; 0x824
 800ee94:	4917      	ldr	r1, [pc, #92]	; (800eef4 <tcp_keepalive+0x78>)
 800ee96:	4818      	ldr	r0, [pc, #96]	; (800eef8 <tcp_keepalive+0x7c>)
 800ee98:	f000 ff3a 	bl	800fd10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ee9c:	7dfb      	ldrb	r3, [r7, #23]
 800ee9e:	b29c      	uxth	r4, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eea4:	3b01      	subs	r3, #1
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7f6 fe43 	bl	8005b32 <lwip_htonl>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2200      	movs	r2, #0
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7ff fe66 	bl	800eb84 <tcp_output_alloc_header>
 800eeb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d102      	bne.n	800eec6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eec0:	f04f 33ff 	mov.w	r3, #4294967295
 800eec4:	e010      	b.n	800eee8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	2200      	movs	r2, #0
 800eeca:	6939      	ldr	r1, [r7, #16]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7ff fe97 	bl	800ec00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	3304      	adds	r3, #4
 800eed8:	6939      	ldr	r1, [r7, #16]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7ff fed0 	bl	800ec80 <tcp_output_control_segment>
 800eee0:	4603      	mov	r3, r0
 800eee2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	371c      	adds	r7, #28
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}
 800eef0:	08012dbc 	.word	0x08012dbc
 800eef4:	080135c8 	.word	0x080135c8
 800eef8:	08012e40 	.word	0x08012e40

0800eefc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eefc:	b590      	push	{r4, r7, lr}
 800eefe:	b08b      	sub	sp, #44	; 0x2c
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ef04:	2300      	movs	r3, #0
 800ef06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d106      	bne.n	800ef1e <tcp_zero_window_probe+0x22>
 800ef10:	4b4c      	ldr	r3, [pc, #304]	; (800f044 <tcp_zero_window_probe+0x148>)
 800ef12:	f640 024f 	movw	r2, #2127	; 0x84f
 800ef16:	494c      	ldr	r1, [pc, #304]	; (800f048 <tcp_zero_window_probe+0x14c>)
 800ef18:	484c      	ldr	r0, [pc, #304]	; (800f04c <tcp_zero_window_probe+0x150>)
 800ef1a:	f000 fef9 	bl	800fd10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e086      	b.n	800f03c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef34:	2bff      	cmp	r3, #255	; 0xff
 800ef36:	d007      	beq.n	800ef48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef3e:	3301      	adds	r3, #1
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	899b      	ldrh	r3, [r3, #12]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f6 fdd9 	bl	8005b08 <lwip_htons>
 800ef56:	4603      	mov	r3, r0
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d005      	beq.n	800ef6e <tcp_zero_window_probe+0x72>
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	891b      	ldrh	r3, [r3, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <tcp_zero_window_probe+0x72>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e000      	b.n	800ef70 <tcp_zero_window_probe+0x74>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ef72:	7ffb      	ldrb	r3, [r7, #31]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bf0c      	ite	eq
 800ef78:	2301      	moveq	r3, #1
 800ef7a:	2300      	movne	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ef80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef84:	b299      	uxth	r1, r3
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	8bba      	ldrh	r2, [r7, #28]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff fdf8 	bl	800eb84 <tcp_output_alloc_header>
 800ef94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d102      	bne.n	800efa2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ef9c:	f04f 33ff 	mov.w	r3, #4294967295
 800efa0:	e04c      	b.n	800f03c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800efa8:	7ffb      	ldrb	r3, [r7, #31]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d011      	beq.n	800efd2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	899b      	ldrh	r3, [r3, #12]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	b21b      	sxth	r3, r3
 800efb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800efba:	b21c      	sxth	r4, r3
 800efbc:	2011      	movs	r0, #17
 800efbe:	f7f6 fda3 	bl	8005b08 <lwip_htons>
 800efc2:	4603      	mov	r3, r0
 800efc4:	b21b      	sxth	r3, r3
 800efc6:	4323      	orrs	r3, r4
 800efc8:	b21b      	sxth	r3, r3
 800efca:	b29a      	uxth	r2, r3
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	819a      	strh	r2, [r3, #12]
 800efd0:	e010      	b.n	800eff4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	3314      	adds	r3, #20
 800efd8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	6858      	ldr	r0, [r3, #4]
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	891a      	ldrh	r2, [r3, #8]
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	891b      	ldrh	r3, [r3, #8]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	b29b      	uxth	r3, r3
 800efec:	2201      	movs	r2, #1
 800efee:	6939      	ldr	r1, [r7, #16]
 800eff0:	f7fa fe52 	bl	8009c98 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	4618      	mov	r0, r3
 800effc:	f7f6 fd99 	bl	8005b32 <lwip_htonl>
 800f000:	4603      	mov	r3, r0
 800f002:	3301      	adds	r3, #1
 800f004:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	da02      	bge.n	800f018 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f01c:	2200      	movs	r2, #0
 800f01e:	69b9      	ldr	r1, [r7, #24]
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7ff fded 	bl	800ec00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3304      	adds	r3, #4
 800f02c:	69b9      	ldr	r1, [r7, #24]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7ff fe26 	bl	800ec80 <tcp_output_control_segment>
 800f034:	4603      	mov	r3, r0
 800f036:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f038:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	372c      	adds	r7, #44	; 0x2c
 800f040:	46bd      	mov	sp, r7
 800f042:	bd90      	pop	{r4, r7, pc}
 800f044:	08012dbc 	.word	0x08012dbc
 800f048:	080135e4 	.word	0x080135e4
 800f04c:	08012e40 	.word	0x08012e40

0800f050 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f058:	f7fa ff0c 	bl	8009e74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <tcpip_tcp_timer+0x38>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d103      	bne.n	800f06c <tcpip_tcp_timer+0x1c>
 800f064:	4b09      	ldr	r3, [pc, #36]	; (800f08c <tcpip_tcp_timer+0x3c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d005      	beq.n	800f078 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f06c:	2200      	movs	r2, #0
 800f06e:	4908      	ldr	r1, [pc, #32]	; (800f090 <tcpip_tcp_timer+0x40>)
 800f070:	20fa      	movs	r0, #250	; 0xfa
 800f072:	f000 f8f3 	bl	800f25c <sys_timeout>
 800f076:	e003      	b.n	800f080 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f078:	4b06      	ldr	r3, [pc, #24]	; (800f094 <tcpip_tcp_timer+0x44>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]
  }
}
 800f07e:	bf00      	nop
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	2400bc30 	.word	0x2400bc30
 800f08c:	2400bc34 	.word	0x2400bc34
 800f090:	0800f051 	.word	0x0800f051
 800f094:	2400bc7c 	.word	0x2400bc7c

0800f098 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f09c:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <tcp_timer_needed+0x30>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10f      	bne.n	800f0c4 <tcp_timer_needed+0x2c>
 800f0a4:	4b09      	ldr	r3, [pc, #36]	; (800f0cc <tcp_timer_needed+0x34>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d103      	bne.n	800f0b4 <tcp_timer_needed+0x1c>
 800f0ac:	4b08      	ldr	r3, [pc, #32]	; (800f0d0 <tcp_timer_needed+0x38>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d007      	beq.n	800f0c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f0b4:	4b04      	ldr	r3, [pc, #16]	; (800f0c8 <tcp_timer_needed+0x30>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	4905      	ldr	r1, [pc, #20]	; (800f0d4 <tcp_timer_needed+0x3c>)
 800f0be:	20fa      	movs	r0, #250	; 0xfa
 800f0c0:	f000 f8cc 	bl	800f25c <sys_timeout>
  }
}
 800f0c4:	bf00      	nop
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	2400bc7c 	.word	0x2400bc7c
 800f0cc:	2400bc30 	.word	0x2400bc30
 800f0d0:	2400bc34 	.word	0x2400bc34
 800f0d4:	0800f051 	.word	0x0800f051

0800f0d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f0e4:	2006      	movs	r0, #6
 800f0e6:	f7f9 fd19 	bl	8008b1c <memp_malloc>
 800f0ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d109      	bne.n	800f106 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d151      	bne.n	800f19c <sys_timeout_abs+0xc4>
 800f0f8:	4b2a      	ldr	r3, [pc, #168]	; (800f1a4 <sys_timeout_abs+0xcc>)
 800f0fa:	22be      	movs	r2, #190	; 0xbe
 800f0fc:	492a      	ldr	r1, [pc, #168]	; (800f1a8 <sys_timeout_abs+0xd0>)
 800f0fe:	482b      	ldr	r0, [pc, #172]	; (800f1ac <sys_timeout_abs+0xd4>)
 800f100:	f000 fe06 	bl	800fd10 <iprintf>
    return;
 800f104:	e04a      	b.n	800f19c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f11e:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d103      	bne.n	800f12e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f126:	4a22      	ldr	r2, [pc, #136]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	6013      	str	r3, [r2, #0]
    return;
 800f12c:	e037      	b.n	800f19e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	4b1f      	ldr	r3, [pc, #124]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	0fdb      	lsrs	r3, r3, #31
 800f13c:	f003 0301 	and.w	r3, r3, #1
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f146:	4b1a      	ldr	r3, [pc, #104]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f14e:	4a18      	ldr	r2, [pc, #96]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	e023      	b.n	800f19e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f156:	4b16      	ldr	r3, [pc, #88]	; (800f1b0 <sys_timeout_abs+0xd8>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	e01a      	b.n	800f194 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00b      	beq.n	800f17e <sys_timeout_abs+0xa6>
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	685a      	ldr	r2, [r3, #4]
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	0fdb      	lsrs	r3, r3, #31
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d007      	beq.n	800f18e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	693a      	ldr	r2, [r7, #16]
 800f18a:	601a      	str	r2, [r3, #0]
        break;
 800f18c:	e007      	b.n	800f19e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1e1      	bne.n	800f15e <sys_timeout_abs+0x86>
 800f19a:	e000      	b.n	800f19e <sys_timeout_abs+0xc6>
    return;
 800f19c:	bf00      	nop
      }
    }
  }
}
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	08013608 	.word	0x08013608
 800f1a8:	0801366c 	.word	0x0801366c
 800f1ac:	080136ac 	.word	0x080136ac
 800f1b0:	2400bc74 	.word	0x2400bc74

0800f1b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	4798      	blx	r3

  now = sys_now();
 800f1c6:	f7f1 ff17 	bl	8000ff8 <sys_now>
 800f1ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	4b0f      	ldr	r3, [pc, #60]	; (800f210 <lwip_cyclic_timer+0x5c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	0fdb      	lsrs	r3, r3, #31
 800f1e0:	f003 0301 	and.w	r3, r3, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	4907      	ldr	r1, [pc, #28]	; (800f214 <lwip_cyclic_timer+0x60>)
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff ff6e 	bl	800f0d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f1fc:	e004      	b.n	800f208 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	4904      	ldr	r1, [pc, #16]	; (800f214 <lwip_cyclic_timer+0x60>)
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff ff68 	bl	800f0d8 <sys_timeout_abs>
}
 800f208:	bf00      	nop
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	2400bc78 	.word	0x2400bc78
 800f214:	0800f1b5 	.word	0x0800f1b5

0800f218 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f21e:	2301      	movs	r3, #1
 800f220:	607b      	str	r3, [r7, #4]
 800f222:	e00e      	b.n	800f242 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f224:	4a0b      	ldr	r2, [pc, #44]	; (800f254 <sys_timeouts_init+0x3c>)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	4a08      	ldr	r2, [pc, #32]	; (800f254 <sys_timeouts_init+0x3c>)
 800f232:	4413      	add	r3, r2
 800f234:	461a      	mov	r2, r3
 800f236:	4908      	ldr	r1, [pc, #32]	; (800f258 <sys_timeouts_init+0x40>)
 800f238:	f000 f810 	bl	800f25c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3301      	adds	r3, #1
 800f240:	607b      	str	r3, [r7, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b02      	cmp	r3, #2
 800f246:	d9ed      	bls.n	800f224 <sys_timeouts_init+0xc>
  }
}
 800f248:	bf00      	nop
 800f24a:	bf00      	nop
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	08013b9c 	.word	0x08013b9c
 800f258:	0800f1b5 	.word	0x0800f1b5

0800f25c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f26e:	d306      	bcc.n	800f27e <sys_timeout+0x22>
 800f270:	4b0a      	ldr	r3, [pc, #40]	; (800f29c <sys_timeout+0x40>)
 800f272:	f240 1229 	movw	r2, #297	; 0x129
 800f276:	490a      	ldr	r1, [pc, #40]	; (800f2a0 <sys_timeout+0x44>)
 800f278:	480a      	ldr	r0, [pc, #40]	; (800f2a4 <sys_timeout+0x48>)
 800f27a:	f000 fd49 	bl	800fd10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f27e:	f7f1 febb 	bl	8000ff8 <sys_now>
 800f282:	4602      	mov	r2, r0
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4413      	add	r3, r2
 800f288:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	68b9      	ldr	r1, [r7, #8]
 800f28e:	6978      	ldr	r0, [r7, #20]
 800f290:	f7ff ff22 	bl	800f0d8 <sys_timeout_abs>
#endif
}
 800f294:	bf00      	nop
 800f296:	3718      	adds	r7, #24
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	08013608 	.word	0x08013608
 800f2a0:	080136d4 	.word	0x080136d4
 800f2a4:	080136ac 	.word	0x080136ac

0800f2a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f2ac:	f000 fd48 	bl	800fd40 <rand>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	4b01      	ldr	r3, [pc, #4]	; (800f2c8 <udp_init+0x20>)
 800f2c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f2c4:	bf00      	nop
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	24000030 	.word	0x24000030

0800f2cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f2d6:	4b17      	ldr	r3, [pc, #92]	; (800f334 <udp_new_port+0x68>)
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	b291      	uxth	r1, r2
 800f2de:	4a15      	ldr	r2, [pc, #84]	; (800f334 <udp_new_port+0x68>)
 800f2e0:	8011      	strh	r1, [r2, #0]
 800f2e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d103      	bne.n	800f2f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f2ea:	4b12      	ldr	r3, [pc, #72]	; (800f334 <udp_new_port+0x68>)
 800f2ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f2f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2f2:	4b11      	ldr	r3, [pc, #68]	; (800f338 <udp_new_port+0x6c>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	603b      	str	r3, [r7, #0]
 800f2f8:	e011      	b.n	800f31e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	8a5a      	ldrh	r2, [r3, #18]
 800f2fe:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <udp_new_port+0x68>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	429a      	cmp	r2, r3
 800f304:	d108      	bne.n	800f318 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f306:	88fb      	ldrh	r3, [r7, #6]
 800f308:	3301      	adds	r3, #1
 800f30a:	80fb      	strh	r3, [r7, #6]
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f312:	d3e0      	bcc.n	800f2d6 <udp_new_port+0xa>
        return 0;
 800f314:	2300      	movs	r3, #0
 800f316:	e007      	b.n	800f328 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	603b      	str	r3, [r7, #0]
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1ea      	bne.n	800f2fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f324:	4b03      	ldr	r3, [pc, #12]	; (800f334 <udp_new_port+0x68>)
 800f326:	881b      	ldrh	r3, [r3, #0]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr
 800f334:	24000030 	.word	0x24000030
 800f338:	2400bc80 	.word	0x2400bc80

0800f33c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4613      	mov	r3, r2
 800f348:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d105      	bne.n	800f35c <udp_input_local_match+0x20>
 800f350:	4b27      	ldr	r3, [pc, #156]	; (800f3f0 <udp_input_local_match+0xb4>)
 800f352:	2287      	movs	r2, #135	; 0x87
 800f354:	4927      	ldr	r1, [pc, #156]	; (800f3f4 <udp_input_local_match+0xb8>)
 800f356:	4828      	ldr	r0, [pc, #160]	; (800f3f8 <udp_input_local_match+0xbc>)
 800f358:	f000 fcda 	bl	800fd10 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d105      	bne.n	800f36e <udp_input_local_match+0x32>
 800f362:	4b23      	ldr	r3, [pc, #140]	; (800f3f0 <udp_input_local_match+0xb4>)
 800f364:	2288      	movs	r2, #136	; 0x88
 800f366:	4925      	ldr	r1, [pc, #148]	; (800f3fc <udp_input_local_match+0xc0>)
 800f368:	4823      	ldr	r0, [pc, #140]	; (800f3f8 <udp_input_local_match+0xbc>)
 800f36a:	f000 fcd1 	bl	800fd10 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	7a1b      	ldrb	r3, [r3, #8]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	7a1a      	ldrb	r2, [r3, #8]
 800f37a:	4b21      	ldr	r3, [pc, #132]	; (800f400 <udp_input_local_match+0xc4>)
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f382:	3301      	adds	r3, #1
 800f384:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f386:	429a      	cmp	r2, r3
 800f388:	d001      	beq.n	800f38e <udp_input_local_match+0x52>
    return 0;
 800f38a:	2300      	movs	r3, #0
 800f38c:	e02b      	b.n	800f3e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d018      	beq.n	800f3c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d013      	beq.n	800f3c2 <udp_input_local_match+0x86>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00f      	beq.n	800f3c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f3a2:	4b17      	ldr	r3, [pc, #92]	; (800f400 <udp_input_local_match+0xc4>)
 800f3a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3aa:	d00a      	beq.n	800f3c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	4b13      	ldr	r3, [pc, #76]	; (800f400 <udp_input_local_match+0xc4>)
 800f3b2:	695b      	ldr	r3, [r3, #20]
 800f3b4:	405a      	eors	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d110      	bne.n	800f3e4 <udp_input_local_match+0xa8>
          return 1;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e00f      	b.n	800f3e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d009      	beq.n	800f3e0 <udp_input_local_match+0xa4>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <udp_input_local_match+0xa4>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	4b09      	ldr	r3, [pc, #36]	; (800f400 <udp_input_local_match+0xc4>)
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d101      	bne.n	800f3e4 <udp_input_local_match+0xa8>
        return 1;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e000      	b.n	800f3e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08013720 	.word	0x08013720
 800f3f4:	08013780 	.word	0x08013780
 800f3f8:	080137a4 	.word	0x080137a4
 800f3fc:	080137cc 	.word	0x080137cc
 800f400:	24008cfc 	.word	0x24008cfc

0800f404 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f404:	b590      	push	{r4, r7, lr}
 800f406:	b08d      	sub	sp, #52	; 0x34
 800f408:	af02      	add	r7, sp, #8
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d105      	bne.n	800f424 <udp_input+0x20>
 800f418:	4b7c      	ldr	r3, [pc, #496]	; (800f60c <udp_input+0x208>)
 800f41a:	22cf      	movs	r2, #207	; 0xcf
 800f41c:	497c      	ldr	r1, [pc, #496]	; (800f610 <udp_input+0x20c>)
 800f41e:	487d      	ldr	r0, [pc, #500]	; (800f614 <udp_input+0x210>)
 800f420:	f000 fc76 	bl	800fd10 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d105      	bne.n	800f436 <udp_input+0x32>
 800f42a:	4b78      	ldr	r3, [pc, #480]	; (800f60c <udp_input+0x208>)
 800f42c:	22d0      	movs	r2, #208	; 0xd0
 800f42e:	497a      	ldr	r1, [pc, #488]	; (800f618 <udp_input+0x214>)
 800f430:	4878      	ldr	r0, [pc, #480]	; (800f614 <udp_input+0x210>)
 800f432:	f000 fc6d 	bl	800fd10 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	895b      	ldrh	r3, [r3, #10]
 800f43a:	2b07      	cmp	r3, #7
 800f43c:	d803      	bhi.n	800f446 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7fa fa30 	bl	80098a4 <pbuf_free>
    goto end;
 800f444:	e0de      	b.n	800f604 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f44c:	4b73      	ldr	r3, [pc, #460]	; (800f61c <udp_input+0x218>)
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	4a72      	ldr	r2, [pc, #456]	; (800f61c <udp_input+0x218>)
 800f452:	6812      	ldr	r2, [r2, #0]
 800f454:	4611      	mov	r1, r2
 800f456:	4618      	mov	r0, r3
 800f458:	f7f8 f8c2 	bl	80075e0 <ip4_addr_isbroadcast_u32>
 800f45c:	4603      	mov	r3, r0
 800f45e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	b29b      	uxth	r3, r3
 800f466:	4618      	mov	r0, r3
 800f468:	f7f6 fb4e 	bl	8005b08 <lwip_htons>
 800f46c:	4603      	mov	r3, r0
 800f46e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	885b      	ldrh	r3, [r3, #2]
 800f474:	b29b      	uxth	r3, r3
 800f476:	4618      	mov	r0, r3
 800f478:	f7f6 fb46 	bl	8005b08 <lwip_htons>
 800f47c:	4603      	mov	r3, r0
 800f47e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f480:	2300      	movs	r3, #0
 800f482:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f48c:	4b64      	ldr	r3, [pc, #400]	; (800f620 <udp_input+0x21c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	627b      	str	r3, [r7, #36]	; 0x24
 800f492:	e054      	b.n	800f53e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f496:	8a5b      	ldrh	r3, [r3, #18]
 800f498:	89fa      	ldrh	r2, [r7, #14]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d14a      	bne.n	800f534 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f49e:	7cfb      	ldrb	r3, [r7, #19]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4a6:	f7ff ff49 	bl	800f33c <udp_input_local_match>
 800f4aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d041      	beq.n	800f534 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	7c1b      	ldrb	r3, [r3, #16]
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d11d      	bne.n	800f4f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d102      	bne.n	800f4c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c4:	61fb      	str	r3, [r7, #28]
 800f4c6:	e017      	b.n	800f4f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f4c8:	7cfb      	ldrb	r3, [r7, #19]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d014      	beq.n	800f4f8 <udp_input+0xf4>
 800f4ce:	4b53      	ldr	r3, [pc, #332]	; (800f61c <udp_input+0x218>)
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d6:	d10f      	bne.n	800f4f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	3304      	adds	r3, #4
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d008      	beq.n	800f4f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d101      	bne.n	800f4f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	8a9b      	ldrh	r3, [r3, #20]
 800f4fc:	8a3a      	ldrh	r2, [r7, #16]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d118      	bne.n	800f534 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f504:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f506:	2b00      	cmp	r3, #0
 800f508:	d005      	beq.n	800f516 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	4b43      	ldr	r3, [pc, #268]	; (800f61c <udp_input+0x218>)
 800f510:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f512:	429a      	cmp	r2, r3
 800f514:	d10e      	bne.n	800f534 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d014      	beq.n	800f546 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	68da      	ldr	r2, [r3, #12]
 800f520:	6a3b      	ldr	r3, [r7, #32]
 800f522:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f524:	4b3e      	ldr	r3, [pc, #248]	; (800f620 <udp_input+0x21c>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f52c:	4a3c      	ldr	r2, [pc, #240]	; (800f620 <udp_input+0x21c>)
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f532:	e008      	b.n	800f546 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	627b      	str	r3, [r7, #36]	; 0x24
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1a7      	bne.n	800f494 <udp_input+0x90>
 800f544:	e000      	b.n	800f548 <udp_input+0x144>
        break;
 800f546:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <udp_input+0x15a>
    for_us = 1;
 800f558:	2301      	movs	r3, #1
 800f55a:	76fb      	strb	r3, [r7, #27]
 800f55c:	e00a      	b.n	800f574 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	3304      	adds	r3, #4
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	4b2d      	ldr	r3, [pc, #180]	; (800f61c <udp_input+0x218>)
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	429a      	cmp	r2, r3
 800f56a:	bf0c      	ite	eq
 800f56c:	2301      	moveq	r3, #1
 800f56e:	2300      	movne	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f574:	7efb      	ldrb	r3, [r7, #27]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d041      	beq.n	800f5fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f57a:	2108      	movs	r1, #8
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7fa f90b 	bl	8009798 <pbuf_remove_header>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f588:	4b20      	ldr	r3, [pc, #128]	; (800f60c <udp_input+0x208>)
 800f58a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f58e:	4925      	ldr	r1, [pc, #148]	; (800f624 <udp_input+0x220>)
 800f590:	4820      	ldr	r0, [pc, #128]	; (800f614 <udp_input+0x210>)
 800f592:	f000 fbbd 	bl	800fd10 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7fa f984 	bl	80098a4 <pbuf_free>
      goto end;
 800f59c:	e032      	b.n	800f604 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d012      	beq.n	800f5ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00a      	beq.n	800f5c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	699c      	ldr	r4, [r3, #24]
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	69d8      	ldr	r0, [r3, #28]
 800f5b4:	8a3b      	ldrh	r3, [r7, #16]
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <udp_input+0x224>)
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f5c0:	e021      	b.n	800f606 <udp_input+0x202>
        pbuf_free(p);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7fa f96e 	bl	80098a4 <pbuf_free>
        goto end;
 800f5c8:	e01c      	b.n	800f604 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f5ca:	7cfb      	ldrb	r3, [r7, #19]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d112      	bne.n	800f5f6 <udp_input+0x1f2>
 800f5d0:	4b12      	ldr	r3, [pc, #72]	; (800f61c <udp_input+0x218>)
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5d8:	2be0      	cmp	r3, #224	; 0xe0
 800f5da:	d00c      	beq.n	800f5f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f5dc:	4b0f      	ldr	r3, [pc, #60]	; (800f61c <udp_input+0x218>)
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	b21b      	sxth	r3, r3
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fa f948 	bl	800987e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f5ee:	2103      	movs	r1, #3
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7f7 fbf9 	bl	8006de8 <icmp_dest_unreach>
      pbuf_free(p);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7fa f954 	bl	80098a4 <pbuf_free>
  return;
 800f5fc:	e003      	b.n	800f606 <udp_input+0x202>
    pbuf_free(p);
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7fa f950 	bl	80098a4 <pbuf_free>
  return;
 800f604:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f606:	372c      	adds	r7, #44	; 0x2c
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd90      	pop	{r4, r7, pc}
 800f60c:	08013720 	.word	0x08013720
 800f610:	080137f4 	.word	0x080137f4
 800f614:	080137a4 	.word	0x080137a4
 800f618:	0801380c 	.word	0x0801380c
 800f61c:	24008cfc 	.word	0x24008cfc
 800f620:	2400bc80 	.word	0x2400bc80
 800f624:	08013828 	.word	0x08013828
 800f628:	24008d0c 	.word	0x24008d0c

0800f62c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d109      	bne.n	800f650 <udp_send+0x24>
 800f63c:	4b11      	ldr	r3, [pc, #68]	; (800f684 <udp_send+0x58>)
 800f63e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f642:	4911      	ldr	r1, [pc, #68]	; (800f688 <udp_send+0x5c>)
 800f644:	4811      	ldr	r0, [pc, #68]	; (800f68c <udp_send+0x60>)
 800f646:	f000 fb63 	bl	800fd10 <iprintf>
 800f64a:	f06f 030f 	mvn.w	r3, #15
 800f64e:	e015      	b.n	800f67c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d109      	bne.n	800f66a <udp_send+0x3e>
 800f656:	4b0b      	ldr	r3, [pc, #44]	; (800f684 <udp_send+0x58>)
 800f658:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f65c:	490c      	ldr	r1, [pc, #48]	; (800f690 <udp_send+0x64>)
 800f65e:	480b      	ldr	r0, [pc, #44]	; (800f68c <udp_send+0x60>)
 800f660:	f000 fb56 	bl	800fd10 <iprintf>
 800f664:	f06f 030f 	mvn.w	r3, #15
 800f668:	e008      	b.n	800f67c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	1d1a      	adds	r2, r3, #4
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8a9b      	ldrh	r3, [r3, #20]
 800f672:	6839      	ldr	r1, [r7, #0]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f80d 	bl	800f694 <udp_sendto>
 800f67a:	4603      	mov	r3, r0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	08013720 	.word	0x08013720
 800f688:	08013844 	.word	0x08013844
 800f68c:	080137a4 	.word	0x080137a4
 800f690:	0801385c 	.word	0x0801385c

0800f694 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b088      	sub	sp, #32
 800f698:	af02      	add	r7, sp, #8
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d109      	bne.n	800f6bc <udp_sendto+0x28>
 800f6a8:	4b23      	ldr	r3, [pc, #140]	; (800f738 <udp_sendto+0xa4>)
 800f6aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f6ae:	4923      	ldr	r1, [pc, #140]	; (800f73c <udp_sendto+0xa8>)
 800f6b0:	4823      	ldr	r0, [pc, #140]	; (800f740 <udp_sendto+0xac>)
 800f6b2:	f000 fb2d 	bl	800fd10 <iprintf>
 800f6b6:	f06f 030f 	mvn.w	r3, #15
 800f6ba:	e038      	b.n	800f72e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d109      	bne.n	800f6d6 <udp_sendto+0x42>
 800f6c2:	4b1d      	ldr	r3, [pc, #116]	; (800f738 <udp_sendto+0xa4>)
 800f6c4:	f240 2219 	movw	r2, #537	; 0x219
 800f6c8:	491e      	ldr	r1, [pc, #120]	; (800f744 <udp_sendto+0xb0>)
 800f6ca:	481d      	ldr	r0, [pc, #116]	; (800f740 <udp_sendto+0xac>)
 800f6cc:	f000 fb20 	bl	800fd10 <iprintf>
 800f6d0:	f06f 030f 	mvn.w	r3, #15
 800f6d4:	e02b      	b.n	800f72e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d109      	bne.n	800f6f0 <udp_sendto+0x5c>
 800f6dc:	4b16      	ldr	r3, [pc, #88]	; (800f738 <udp_sendto+0xa4>)
 800f6de:	f240 221a 	movw	r2, #538	; 0x21a
 800f6e2:	4919      	ldr	r1, [pc, #100]	; (800f748 <udp_sendto+0xb4>)
 800f6e4:	4816      	ldr	r0, [pc, #88]	; (800f740 <udp_sendto+0xac>)
 800f6e6:	f000 fb13 	bl	800fd10 <iprintf>
 800f6ea:	f06f 030f 	mvn.w	r3, #15
 800f6ee:	e01e      	b.n	800f72e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	7a1b      	ldrb	r3, [r3, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d006      	beq.n	800f706 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	7a1b      	ldrb	r3, [r3, #8]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7f9 fd93 	bl	8009228 <netif_get_by_index>
 800f702:	6178      	str	r0, [r7, #20]
 800f704:	e003      	b.n	800f70e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7f7 fcd4 	bl	80070b4 <ip4_route>
 800f70c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d102      	bne.n	800f71a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f714:	f06f 0303 	mvn.w	r3, #3
 800f718:	e009      	b.n	800f72e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f71a:	887a      	ldrh	r2, [r7, #2]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	4613      	mov	r3, r2
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	68b9      	ldr	r1, [r7, #8]
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f000 f810 	bl	800f74c <udp_sendto_if>
 800f72c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	08013720 	.word	0x08013720
 800f73c:	08013874 	.word	0x08013874
 800f740:	080137a4 	.word	0x080137a4
 800f744:	0801388c 	.word	0x0801388c
 800f748:	080138a8 	.word	0x080138a8

0800f74c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b088      	sub	sp, #32
 800f750:	af02      	add	r7, sp, #8
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d109      	bne.n	800f774 <udp_sendto_if+0x28>
 800f760:	4b2e      	ldr	r3, [pc, #184]	; (800f81c <udp_sendto_if+0xd0>)
 800f762:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f766:	492e      	ldr	r1, [pc, #184]	; (800f820 <udp_sendto_if+0xd4>)
 800f768:	482e      	ldr	r0, [pc, #184]	; (800f824 <udp_sendto_if+0xd8>)
 800f76a:	f000 fad1 	bl	800fd10 <iprintf>
 800f76e:	f06f 030f 	mvn.w	r3, #15
 800f772:	e04f      	b.n	800f814 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d109      	bne.n	800f78e <udp_sendto_if+0x42>
 800f77a:	4b28      	ldr	r3, [pc, #160]	; (800f81c <udp_sendto_if+0xd0>)
 800f77c:	f240 2281 	movw	r2, #641	; 0x281
 800f780:	4929      	ldr	r1, [pc, #164]	; (800f828 <udp_sendto_if+0xdc>)
 800f782:	4828      	ldr	r0, [pc, #160]	; (800f824 <udp_sendto_if+0xd8>)
 800f784:	f000 fac4 	bl	800fd10 <iprintf>
 800f788:	f06f 030f 	mvn.w	r3, #15
 800f78c:	e042      	b.n	800f814 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <udp_sendto_if+0x5c>
 800f794:	4b21      	ldr	r3, [pc, #132]	; (800f81c <udp_sendto_if+0xd0>)
 800f796:	f240 2282 	movw	r2, #642	; 0x282
 800f79a:	4924      	ldr	r1, [pc, #144]	; (800f82c <udp_sendto_if+0xe0>)
 800f79c:	4821      	ldr	r0, [pc, #132]	; (800f824 <udp_sendto_if+0xd8>)
 800f79e:	f000 fab7 	bl	800fd10 <iprintf>
 800f7a2:	f06f 030f 	mvn.w	r3, #15
 800f7a6:	e035      	b.n	800f814 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f7a8:	6a3b      	ldr	r3, [r7, #32]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d109      	bne.n	800f7c2 <udp_sendto_if+0x76>
 800f7ae:	4b1b      	ldr	r3, [pc, #108]	; (800f81c <udp_sendto_if+0xd0>)
 800f7b0:	f240 2283 	movw	r2, #643	; 0x283
 800f7b4:	491e      	ldr	r1, [pc, #120]	; (800f830 <udp_sendto_if+0xe4>)
 800f7b6:	481b      	ldr	r0, [pc, #108]	; (800f824 <udp_sendto_if+0xd8>)
 800f7b8:	f000 faaa 	bl	800fd10 <iprintf>
 800f7bc:	f06f 030f 	mvn.w	r3, #15
 800f7c0:	e028      	b.n	800f814 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d009      	beq.n	800f7dc <udp_sendto_if+0x90>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d005      	beq.n	800f7dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7d8:	2be0      	cmp	r3, #224	; 0xe0
 800f7da:	d103      	bne.n	800f7e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f7dc:	6a3b      	ldr	r3, [r7, #32]
 800f7de:	3304      	adds	r3, #4
 800f7e0:	617b      	str	r3, [r7, #20]
 800f7e2:	e00b      	b.n	800f7fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	6a3b      	ldr	r3, [r7, #32]
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d002      	beq.n	800f7f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f7f2:	f06f 0303 	mvn.w	r3, #3
 800f7f6:	e00d      	b.n	800f814 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f7fc:	887a      	ldrh	r2, [r7, #2]
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	9301      	str	r3, [sp, #4]
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4613      	mov	r3, r2
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 f811 	bl	800f834 <udp_sendto_if_src>
 800f812:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f814:	4618      	mov	r0, r3
 800f816:	3718      	adds	r7, #24
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	08013720 	.word	0x08013720
 800f820:	080138c4 	.word	0x080138c4
 800f824:	080137a4 	.word	0x080137a4
 800f828:	080138e0 	.word	0x080138e0
 800f82c:	080138fc 	.word	0x080138fc
 800f830:	0801391c 	.word	0x0801391c

0800f834 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b08c      	sub	sp, #48	; 0x30
 800f838:	af04      	add	r7, sp, #16
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d109      	bne.n	800f85c <udp_sendto_if_src+0x28>
 800f848:	4b65      	ldr	r3, [pc, #404]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f84a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f84e:	4965      	ldr	r1, [pc, #404]	; (800f9e4 <udp_sendto_if_src+0x1b0>)
 800f850:	4865      	ldr	r0, [pc, #404]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f852:	f000 fa5d 	bl	800fd10 <iprintf>
 800f856:	f06f 030f 	mvn.w	r3, #15
 800f85a:	e0bc      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d109      	bne.n	800f876 <udp_sendto_if_src+0x42>
 800f862:	4b5f      	ldr	r3, [pc, #380]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f864:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f868:	4960      	ldr	r1, [pc, #384]	; (800f9ec <udp_sendto_if_src+0x1b8>)
 800f86a:	485f      	ldr	r0, [pc, #380]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f86c:	f000 fa50 	bl	800fd10 <iprintf>
 800f870:	f06f 030f 	mvn.w	r3, #15
 800f874:	e0af      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d109      	bne.n	800f890 <udp_sendto_if_src+0x5c>
 800f87c:	4b58      	ldr	r3, [pc, #352]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f87e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f882:	495b      	ldr	r1, [pc, #364]	; (800f9f0 <udp_sendto_if_src+0x1bc>)
 800f884:	4858      	ldr	r0, [pc, #352]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f886:	f000 fa43 	bl	800fd10 <iprintf>
 800f88a:	f06f 030f 	mvn.w	r3, #15
 800f88e:	e0a2      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f892:	2b00      	cmp	r3, #0
 800f894:	d109      	bne.n	800f8aa <udp_sendto_if_src+0x76>
 800f896:	4b52      	ldr	r3, [pc, #328]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f898:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f89c:	4955      	ldr	r1, [pc, #340]	; (800f9f4 <udp_sendto_if_src+0x1c0>)
 800f89e:	4852      	ldr	r0, [pc, #328]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f8a0:	f000 fa36 	bl	800fd10 <iprintf>
 800f8a4:	f06f 030f 	mvn.w	r3, #15
 800f8a8:	e095      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d109      	bne.n	800f8c4 <udp_sendto_if_src+0x90>
 800f8b0:	4b4b      	ldr	r3, [pc, #300]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f8b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f8b6:	4950      	ldr	r1, [pc, #320]	; (800f9f8 <udp_sendto_if_src+0x1c4>)
 800f8b8:	484b      	ldr	r0, [pc, #300]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f8ba:	f000 fa29 	bl	800fd10 <iprintf>
 800f8be:	f06f 030f 	mvn.w	r3, #15
 800f8c2:	e088      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	8a5b      	ldrh	r3, [r3, #18]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10f      	bne.n	800f8ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f8cc:	68f9      	ldr	r1, [r7, #12]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8a5b      	ldrh	r3, [r3, #18]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f000 f893 	bl	800fa00 <udp_bind>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f8de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f8e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8ea:	e074      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	891b      	ldrh	r3, [r3, #8]
 800f8f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d902      	bls.n	800f8fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8fc:	e06b      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f8fe:	2108      	movs	r1, #8
 800f900:	68b8      	ldr	r0, [r7, #8]
 800f902:	f7f9 ff39 	bl	8009778 <pbuf_add_header>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d015      	beq.n	800f938 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f90c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f910:	2108      	movs	r1, #8
 800f912:	2022      	movs	r0, #34	; 0x22
 800f914:	f7f9 fce4 	bl	80092e0 <pbuf_alloc>
 800f918:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f920:	f04f 33ff 	mov.w	r3, #4294967295
 800f924:	e057      	b.n	800f9d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	891b      	ldrh	r3, [r3, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d006      	beq.n	800f93c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f92e:	68b9      	ldr	r1, [r7, #8]
 800f930:	69f8      	ldr	r0, [r7, #28]
 800f932:	f7fa f8cf 	bl	8009ad4 <pbuf_chain>
 800f936:	e001      	b.n	800f93c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	895b      	ldrh	r3, [r3, #10]
 800f940:	2b07      	cmp	r3, #7
 800f942:	d806      	bhi.n	800f952 <udp_sendto_if_src+0x11e>
 800f944:	4b26      	ldr	r3, [pc, #152]	; (800f9e0 <udp_sendto_if_src+0x1ac>)
 800f946:	f240 320d 	movw	r2, #781	; 0x30d
 800f94a:	492c      	ldr	r1, [pc, #176]	; (800f9fc <udp_sendto_if_src+0x1c8>)
 800f94c:	4826      	ldr	r0, [pc, #152]	; (800f9e8 <udp_sendto_if_src+0x1b4>)
 800f94e:	f000 f9df 	bl	800fd10 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	8a5b      	ldrh	r3, [r3, #18]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7f6 f8d3 	bl	8005b08 <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	461a      	mov	r2, r3
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f96a:	887b      	ldrh	r3, [r7, #2]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f6 f8cb 	bl	8005b08 <lwip_htons>
 800f972:	4603      	mov	r3, r0
 800f974:	461a      	mov	r2, r3
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	2200      	movs	r2, #0
 800f97e:	719a      	strb	r2, [r3, #6]
 800f980:	2200      	movs	r2, #0
 800f982:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	891b      	ldrh	r3, [r3, #8]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7f6 f8bd 	bl	8005b08 <lwip_htons>
 800f98e:	4603      	mov	r3, r0
 800f990:	461a      	mov	r2, r3
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f996:	2311      	movs	r3, #17
 800f998:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	7adb      	ldrb	r3, [r3, #11]
 800f99e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	7a9b      	ldrb	r3, [r3, #10]
 800f9a4:	7cb9      	ldrb	r1, [r7, #18]
 800f9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9a8:	9202      	str	r2, [sp, #8]
 800f9aa:	7cfa      	ldrb	r2, [r7, #19]
 800f9ac:	9201      	str	r2, [sp, #4]
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9b6:	69f8      	ldr	r0, [r7, #28]
 800f9b8:	f7f7 fd64 	bl	8007484 <ip4_output_if_src>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d004      	beq.n	800f9d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f9c8:	69f8      	ldr	r0, [r7, #28]
 800f9ca:	f7f9 ff6b 	bl	80098a4 <pbuf_free>
    q = NULL;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f9d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	08013720 	.word	0x08013720
 800f9e4:	0801393c 	.word	0x0801393c
 800f9e8:	080137a4 	.word	0x080137a4
 800f9ec:	0801395c 	.word	0x0801395c
 800f9f0:	0801397c 	.word	0x0801397c
 800f9f4:	080139a0 	.word	0x080139a0
 800f9f8:	080139c4 	.word	0x080139c4
 800f9fc:	080139e8 	.word	0x080139e8

0800fa00 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d101      	bne.n	800fa18 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fa14:	4b39      	ldr	r3, [pc, #228]	; (800fafc <udp_bind+0xfc>)
 800fa16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d109      	bne.n	800fa32 <udp_bind+0x32>
 800fa1e:	4b38      	ldr	r3, [pc, #224]	; (800fb00 <udp_bind+0x100>)
 800fa20:	f240 32b7 	movw	r2, #951	; 0x3b7
 800fa24:	4937      	ldr	r1, [pc, #220]	; (800fb04 <udp_bind+0x104>)
 800fa26:	4838      	ldr	r0, [pc, #224]	; (800fb08 <udp_bind+0x108>)
 800fa28:	f000 f972 	bl	800fd10 <iprintf>
 800fa2c:	f06f 030f 	mvn.w	r3, #15
 800fa30:	e060      	b.n	800faf4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa36:	4b35      	ldr	r3, [pc, #212]	; (800fb0c <udp_bind+0x10c>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	e009      	b.n	800fa52 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d102      	bne.n	800fa4c <udp_bind+0x4c>
      rebind = 1;
 800fa46:	2301      	movs	r3, #1
 800fa48:	74fb      	strb	r3, [r7, #19]
      break;
 800fa4a:	e005      	b.n	800fa58 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	617b      	str	r3, [r7, #20]
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1f2      	bne.n	800fa3e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fa58:	88fb      	ldrh	r3, [r7, #6]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d109      	bne.n	800fa72 <udp_bind+0x72>
    port = udp_new_port();
 800fa5e:	f7ff fc35 	bl	800f2cc <udp_new_port>
 800fa62:	4603      	mov	r3, r0
 800fa64:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fa66:	88fb      	ldrh	r3, [r7, #6]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d12c      	bne.n	800fac6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fa6c:	f06f 0307 	mvn.w	r3, #7
 800fa70:	e040      	b.n	800faf4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa72:	4b26      	ldr	r3, [pc, #152]	; (800fb0c <udp_bind+0x10c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	e022      	b.n	800fac0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d01b      	beq.n	800faba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	8a5b      	ldrh	r3, [r3, #18]
 800fa86:	88fa      	ldrh	r2, [r7, #6]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d116      	bne.n	800faba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d00d      	beq.n	800fab4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00a      	beq.n	800fab4 <udp_bind+0xb4>
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d006      	beq.n	800fab4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800faa6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d003      	beq.n	800fab4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d102      	bne.n	800faba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fab4:	f06f 0307 	mvn.w	r3, #7
 800fab8:	e01c      	b.n	800faf4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1d9      	bne.n	800fa7a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <udp_bind+0xd2>
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	e000      	b.n	800fad4 <udp_bind+0xd4>
 800fad2:	2300      	movs	r3, #0
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	88fa      	ldrh	r2, [r7, #6]
 800fadc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800fade:	7cfb      	ldrb	r3, [r7, #19]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d106      	bne.n	800faf2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800fae4:	4b09      	ldr	r3, [pc, #36]	; (800fb0c <udp_bind+0x10c>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800faec:	4a07      	ldr	r2, [pc, #28]	; (800fb0c <udp_bind+0x10c>)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3718      	adds	r7, #24
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	08013ae0 	.word	0x08013ae0
 800fb00:	08013720 	.word	0x08013720
 800fb04:	08013a18 	.word	0x08013a18
 800fb08:	080137a4 	.word	0x080137a4
 800fb0c:	2400bc80 	.word	0x2400bc80

0800fb10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d109      	bne.n	800fb38 <udp_connect+0x28>
 800fb24:	4b2c      	ldr	r3, [pc, #176]	; (800fbd8 <udp_connect+0xc8>)
 800fb26:	f240 4235 	movw	r2, #1077	; 0x435
 800fb2a:	492c      	ldr	r1, [pc, #176]	; (800fbdc <udp_connect+0xcc>)
 800fb2c:	482c      	ldr	r0, [pc, #176]	; (800fbe0 <udp_connect+0xd0>)
 800fb2e:	f000 f8ef 	bl	800fd10 <iprintf>
 800fb32:	f06f 030f 	mvn.w	r3, #15
 800fb36:	e04b      	b.n	800fbd0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d109      	bne.n	800fb52 <udp_connect+0x42>
 800fb3e:	4b26      	ldr	r3, [pc, #152]	; (800fbd8 <udp_connect+0xc8>)
 800fb40:	f240 4236 	movw	r2, #1078	; 0x436
 800fb44:	4927      	ldr	r1, [pc, #156]	; (800fbe4 <udp_connect+0xd4>)
 800fb46:	4826      	ldr	r0, [pc, #152]	; (800fbe0 <udp_connect+0xd0>)
 800fb48:	f000 f8e2 	bl	800fd10 <iprintf>
 800fb4c:	f06f 030f 	mvn.w	r3, #15
 800fb50:	e03e      	b.n	800fbd0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	8a5b      	ldrh	r3, [r3, #18]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10f      	bne.n	800fb7a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fb5a:	68f9      	ldr	r1, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	8a5b      	ldrh	r3, [r3, #18]
 800fb60:	461a      	mov	r2, r3
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f7ff ff4c 	bl	800fa00 <udp_bind>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fb6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <udp_connect+0x6a>
      return err;
 800fb74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb78:	e02a      	b.n	800fbd0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d002      	beq.n	800fb86 <udp_connect+0x76>
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	e000      	b.n	800fb88 <udp_connect+0x78>
 800fb86:	2300      	movs	r3, #0
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	88fa      	ldrh	r2, [r7, #6]
 800fb90:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	7c1b      	ldrb	r3, [r3, #16]
 800fb96:	f043 0304 	orr.w	r3, r3, #4
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fba0:	4b11      	ldr	r3, [pc, #68]	; (800fbe8 <udp_connect+0xd8>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	617b      	str	r3, [r7, #20]
 800fba6:	e008      	b.n	800fbba <udp_connect+0xaa>
    if (pcb == ipcb) {
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d101      	bne.n	800fbb4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e00d      	b.n	800fbd0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	617b      	str	r3, [r7, #20]
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1f3      	bne.n	800fba8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800fbc0:	4b09      	ldr	r3, [pc, #36]	; (800fbe8 <udp_connect+0xd8>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800fbc8:	4a07      	ldr	r2, [pc, #28]	; (800fbe8 <udp_connect+0xd8>)
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3718      	adds	r7, #24
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	08013720 	.word	0x08013720
 800fbdc:	08013a30 	.word	0x08013a30
 800fbe0:	080137a4 	.word	0x080137a4
 800fbe4:	08013a4c 	.word	0x08013a4c
 800fbe8:	2400bc80 	.word	0x2400bc80

0800fbec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	f7f8 ff92 	bl	8008b1c <memp_malloc>
 800fbf8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d007      	beq.n	800fc10 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fc00:	2220      	movs	r2, #32
 800fc02:	2100      	movs	r1, #0
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 f87b 	bl	800fd00 <memset>
    pcb->ttl = UDP_TTL;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	22ff      	movs	r2, #255	; 0xff
 800fc0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fc10:	687b      	ldr	r3, [r7, #4]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
	...

0800fc1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d01e      	beq.n	800fc6a <udp_netif_ip_addr_changed+0x4e>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01a      	beq.n	800fc6a <udp_netif_ip_addr_changed+0x4e>
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d017      	beq.n	800fc6a <udp_netif_ip_addr_changed+0x4e>
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d013      	beq.n	800fc6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fc42:	4b0d      	ldr	r3, [pc, #52]	; (800fc78 <udp_netif_ip_addr_changed+0x5c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	60fb      	str	r3, [r7, #12]
 800fc48:	e00c      	b.n	800fc64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d103      	bne.n	800fc5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	60fb      	str	r3, [r7, #12]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1ef      	bne.n	800fc4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fc6a:	bf00      	nop
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	2400bc80 	.word	0x2400bc80

0800fc7c <__libc_init_array>:
 800fc7c:	b570      	push	{r4, r5, r6, lr}
 800fc7e:	4d0d      	ldr	r5, [pc, #52]	; (800fcb4 <__libc_init_array+0x38>)
 800fc80:	4c0d      	ldr	r4, [pc, #52]	; (800fcb8 <__libc_init_array+0x3c>)
 800fc82:	1b64      	subs	r4, r4, r5
 800fc84:	10a4      	asrs	r4, r4, #2
 800fc86:	2600      	movs	r6, #0
 800fc88:	42a6      	cmp	r6, r4
 800fc8a:	d109      	bne.n	800fca0 <__libc_init_array+0x24>
 800fc8c:	4d0b      	ldr	r5, [pc, #44]	; (800fcbc <__libc_init_array+0x40>)
 800fc8e:	4c0c      	ldr	r4, [pc, #48]	; (800fcc0 <__libc_init_array+0x44>)
 800fc90:	f001 f88e 	bl	8010db0 <_init>
 800fc94:	1b64      	subs	r4, r4, r5
 800fc96:	10a4      	asrs	r4, r4, #2
 800fc98:	2600      	movs	r6, #0
 800fc9a:	42a6      	cmp	r6, r4
 800fc9c:	d105      	bne.n	800fcaa <__libc_init_array+0x2e>
 800fc9e:	bd70      	pop	{r4, r5, r6, pc}
 800fca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fca4:	4798      	blx	r3
 800fca6:	3601      	adds	r6, #1
 800fca8:	e7ee      	b.n	800fc88 <__libc_init_array+0xc>
 800fcaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcae:	4798      	blx	r3
 800fcb0:	3601      	adds	r6, #1
 800fcb2:	e7f2      	b.n	800fc9a <__libc_init_array+0x1e>
 800fcb4:	08013cfc 	.word	0x08013cfc
 800fcb8:	08013cfc 	.word	0x08013cfc
 800fcbc:	08013cfc 	.word	0x08013cfc
 800fcc0:	08013d00 	.word	0x08013d00

0800fcc4 <memcmp>:
 800fcc4:	b510      	push	{r4, lr}
 800fcc6:	3901      	subs	r1, #1
 800fcc8:	4402      	add	r2, r0
 800fcca:	4290      	cmp	r0, r2
 800fccc:	d101      	bne.n	800fcd2 <memcmp+0xe>
 800fcce:	2000      	movs	r0, #0
 800fcd0:	e005      	b.n	800fcde <memcmp+0x1a>
 800fcd2:	7803      	ldrb	r3, [r0, #0]
 800fcd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fcd8:	42a3      	cmp	r3, r4
 800fcda:	d001      	beq.n	800fce0 <memcmp+0x1c>
 800fcdc:	1b18      	subs	r0, r3, r4
 800fcde:	bd10      	pop	{r4, pc}
 800fce0:	3001      	adds	r0, #1
 800fce2:	e7f2      	b.n	800fcca <memcmp+0x6>

0800fce4 <memcpy>:
 800fce4:	440a      	add	r2, r1
 800fce6:	4291      	cmp	r1, r2
 800fce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcec:	d100      	bne.n	800fcf0 <memcpy+0xc>
 800fcee:	4770      	bx	lr
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcfa:	4291      	cmp	r1, r2
 800fcfc:	d1f9      	bne.n	800fcf2 <memcpy+0xe>
 800fcfe:	bd10      	pop	{r4, pc}

0800fd00 <memset>:
 800fd00:	4402      	add	r2, r0
 800fd02:	4603      	mov	r3, r0
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d100      	bne.n	800fd0a <memset+0xa>
 800fd08:	4770      	bx	lr
 800fd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd0e:	e7f9      	b.n	800fd04 <memset+0x4>

0800fd10 <iprintf>:
 800fd10:	b40f      	push	{r0, r1, r2, r3}
 800fd12:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <iprintf+0x2c>)
 800fd14:	b513      	push	{r0, r1, r4, lr}
 800fd16:	681c      	ldr	r4, [r3, #0]
 800fd18:	b124      	cbz	r4, 800fd24 <iprintf+0x14>
 800fd1a:	69a3      	ldr	r3, [r4, #24]
 800fd1c:	b913      	cbnz	r3, 800fd24 <iprintf+0x14>
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f000 f8c2 	bl	800fea8 <__sinit>
 800fd24:	ab05      	add	r3, sp, #20
 800fd26:	9a04      	ldr	r2, [sp, #16]
 800fd28:	68a1      	ldr	r1, [r4, #8]
 800fd2a:	9301      	str	r3, [sp, #4]
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f000 fa7f 	bl	8010230 <_vfiprintf_r>
 800fd32:	b002      	add	sp, #8
 800fd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd38:	b004      	add	sp, #16
 800fd3a:	4770      	bx	lr
 800fd3c:	24000034 	.word	0x24000034

0800fd40 <rand>:
 800fd40:	4b16      	ldr	r3, [pc, #88]	; (800fd9c <rand+0x5c>)
 800fd42:	b510      	push	{r4, lr}
 800fd44:	681c      	ldr	r4, [r3, #0]
 800fd46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd48:	b9b3      	cbnz	r3, 800fd78 <rand+0x38>
 800fd4a:	2018      	movs	r0, #24
 800fd4c:	f000 f95e 	bl	801000c <malloc>
 800fd50:	63a0      	str	r0, [r4, #56]	; 0x38
 800fd52:	b928      	cbnz	r0, 800fd60 <rand+0x20>
 800fd54:	4602      	mov	r2, r0
 800fd56:	4b12      	ldr	r3, [pc, #72]	; (800fda0 <rand+0x60>)
 800fd58:	4812      	ldr	r0, [pc, #72]	; (800fda4 <rand+0x64>)
 800fd5a:	214e      	movs	r1, #78	; 0x4e
 800fd5c:	f000 f82e 	bl	800fdbc <__assert_func>
 800fd60:	4a11      	ldr	r2, [pc, #68]	; (800fda8 <rand+0x68>)
 800fd62:	4b12      	ldr	r3, [pc, #72]	; (800fdac <rand+0x6c>)
 800fd64:	e9c0 2300 	strd	r2, r3, [r0]
 800fd68:	4b11      	ldr	r3, [pc, #68]	; (800fdb0 <rand+0x70>)
 800fd6a:	6083      	str	r3, [r0, #8]
 800fd6c:	230b      	movs	r3, #11
 800fd6e:	8183      	strh	r3, [r0, #12]
 800fd70:	2201      	movs	r2, #1
 800fd72:	2300      	movs	r3, #0
 800fd74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fd78:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fd7a:	4a0e      	ldr	r2, [pc, #56]	; (800fdb4 <rand+0x74>)
 800fd7c:	6920      	ldr	r0, [r4, #16]
 800fd7e:	6963      	ldr	r3, [r4, #20]
 800fd80:	490d      	ldr	r1, [pc, #52]	; (800fdb8 <rand+0x78>)
 800fd82:	4342      	muls	r2, r0
 800fd84:	fb01 2203 	mla	r2, r1, r3, r2
 800fd88:	fba0 0101 	umull	r0, r1, r0, r1
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	eb42 0001 	adc.w	r0, r2, r1
 800fd92:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fd96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fd9a:	bd10      	pop	{r4, pc}
 800fd9c:	24000034 	.word	0x24000034
 800fda0:	08013bb8 	.word	0x08013bb8
 800fda4:	08013bcf 	.word	0x08013bcf
 800fda8:	abcd330e 	.word	0xabcd330e
 800fdac:	e66d1234 	.word	0xe66d1234
 800fdb0:	0005deec 	.word	0x0005deec
 800fdb4:	5851f42d 	.word	0x5851f42d
 800fdb8:	4c957f2d 	.word	0x4c957f2d

0800fdbc <__assert_func>:
 800fdbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdbe:	4614      	mov	r4, r2
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <__assert_func+0x2c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	68d8      	ldr	r0, [r3, #12]
 800fdca:	b14c      	cbz	r4, 800fde0 <__assert_func+0x24>
 800fdcc:	4b07      	ldr	r3, [pc, #28]	; (800fdec <__assert_func+0x30>)
 800fdce:	9100      	str	r1, [sp, #0]
 800fdd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdd4:	4906      	ldr	r1, [pc, #24]	; (800fdf0 <__assert_func+0x34>)
 800fdd6:	462b      	mov	r3, r5
 800fdd8:	f000 f8e4 	bl	800ffa4 <fiprintf>
 800fddc:	f000 fe12 	bl	8010a04 <abort>
 800fde0:	4b04      	ldr	r3, [pc, #16]	; (800fdf4 <__assert_func+0x38>)
 800fde2:	461c      	mov	r4, r3
 800fde4:	e7f3      	b.n	800fdce <__assert_func+0x12>
 800fde6:	bf00      	nop
 800fde8:	24000034 	.word	0x24000034
 800fdec:	08013c2a 	.word	0x08013c2a
 800fdf0:	08013c37 	.word	0x08013c37
 800fdf4:	08013c65 	.word	0x08013c65

0800fdf8 <std>:
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	b510      	push	{r4, lr}
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	e9c0 3300 	strd	r3, r3, [r0]
 800fe02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe06:	6083      	str	r3, [r0, #8]
 800fe08:	8181      	strh	r1, [r0, #12]
 800fe0a:	6643      	str	r3, [r0, #100]	; 0x64
 800fe0c:	81c2      	strh	r2, [r0, #14]
 800fe0e:	6183      	str	r3, [r0, #24]
 800fe10:	4619      	mov	r1, r3
 800fe12:	2208      	movs	r2, #8
 800fe14:	305c      	adds	r0, #92	; 0x5c
 800fe16:	f7ff ff73 	bl	800fd00 <memset>
 800fe1a:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <std+0x38>)
 800fe1c:	6263      	str	r3, [r4, #36]	; 0x24
 800fe1e:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <std+0x3c>)
 800fe20:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe22:	4b05      	ldr	r3, [pc, #20]	; (800fe38 <std+0x40>)
 800fe24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe26:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <std+0x44>)
 800fe28:	6224      	str	r4, [r4, #32]
 800fe2a:	6323      	str	r3, [r4, #48]	; 0x30
 800fe2c:	bd10      	pop	{r4, pc}
 800fe2e:	bf00      	nop
 800fe30:	080107d9 	.word	0x080107d9
 800fe34:	080107fb 	.word	0x080107fb
 800fe38:	08010833 	.word	0x08010833
 800fe3c:	08010857 	.word	0x08010857

0800fe40 <_cleanup_r>:
 800fe40:	4901      	ldr	r1, [pc, #4]	; (800fe48 <_cleanup_r+0x8>)
 800fe42:	f000 b8c1 	b.w	800ffc8 <_fwalk_reent>
 800fe46:	bf00      	nop
 800fe48:	08010b41 	.word	0x08010b41

0800fe4c <__sfmoreglue>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	2268      	movs	r2, #104	; 0x68
 800fe50:	1e4d      	subs	r5, r1, #1
 800fe52:	4355      	muls	r5, r2
 800fe54:	460e      	mov	r6, r1
 800fe56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe5a:	f000 f94b 	bl	80100f4 <_malloc_r>
 800fe5e:	4604      	mov	r4, r0
 800fe60:	b140      	cbz	r0, 800fe74 <__sfmoreglue+0x28>
 800fe62:	2100      	movs	r1, #0
 800fe64:	e9c0 1600 	strd	r1, r6, [r0]
 800fe68:	300c      	adds	r0, #12
 800fe6a:	60a0      	str	r0, [r4, #8]
 800fe6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe70:	f7ff ff46 	bl	800fd00 <memset>
 800fe74:	4620      	mov	r0, r4
 800fe76:	bd70      	pop	{r4, r5, r6, pc}

0800fe78 <__sfp_lock_acquire>:
 800fe78:	4801      	ldr	r0, [pc, #4]	; (800fe80 <__sfp_lock_acquire+0x8>)
 800fe7a:	f000 b8c5 	b.w	8010008 <__retarget_lock_acquire_recursive>
 800fe7e:	bf00      	nop
 800fe80:	2400bc89 	.word	0x2400bc89

0800fe84 <__sfp_lock_release>:
 800fe84:	4801      	ldr	r0, [pc, #4]	; (800fe8c <__sfp_lock_release+0x8>)
 800fe86:	f000 b8c0 	b.w	801000a <__retarget_lock_release_recursive>
 800fe8a:	bf00      	nop
 800fe8c:	2400bc89 	.word	0x2400bc89

0800fe90 <__sinit_lock_acquire>:
 800fe90:	4801      	ldr	r0, [pc, #4]	; (800fe98 <__sinit_lock_acquire+0x8>)
 800fe92:	f000 b8b9 	b.w	8010008 <__retarget_lock_acquire_recursive>
 800fe96:	bf00      	nop
 800fe98:	2400bc8a 	.word	0x2400bc8a

0800fe9c <__sinit_lock_release>:
 800fe9c:	4801      	ldr	r0, [pc, #4]	; (800fea4 <__sinit_lock_release+0x8>)
 800fe9e:	f000 b8b4 	b.w	801000a <__retarget_lock_release_recursive>
 800fea2:	bf00      	nop
 800fea4:	2400bc8a 	.word	0x2400bc8a

0800fea8 <__sinit>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	4604      	mov	r4, r0
 800feac:	f7ff fff0 	bl	800fe90 <__sinit_lock_acquire>
 800feb0:	69a3      	ldr	r3, [r4, #24]
 800feb2:	b11b      	cbz	r3, 800febc <__sinit+0x14>
 800feb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb8:	f7ff bff0 	b.w	800fe9c <__sinit_lock_release>
 800febc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fec0:	6523      	str	r3, [r4, #80]	; 0x50
 800fec2:	4b13      	ldr	r3, [pc, #76]	; (800ff10 <__sinit+0x68>)
 800fec4:	4a13      	ldr	r2, [pc, #76]	; (800ff14 <__sinit+0x6c>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	62a2      	str	r2, [r4, #40]	; 0x28
 800feca:	42a3      	cmp	r3, r4
 800fecc:	bf04      	itt	eq
 800fece:	2301      	moveq	r3, #1
 800fed0:	61a3      	streq	r3, [r4, #24]
 800fed2:	4620      	mov	r0, r4
 800fed4:	f000 f820 	bl	800ff18 <__sfp>
 800fed8:	6060      	str	r0, [r4, #4]
 800feda:	4620      	mov	r0, r4
 800fedc:	f000 f81c 	bl	800ff18 <__sfp>
 800fee0:	60a0      	str	r0, [r4, #8]
 800fee2:	4620      	mov	r0, r4
 800fee4:	f000 f818 	bl	800ff18 <__sfp>
 800fee8:	2200      	movs	r2, #0
 800feea:	60e0      	str	r0, [r4, #12]
 800feec:	2104      	movs	r1, #4
 800feee:	6860      	ldr	r0, [r4, #4]
 800fef0:	f7ff ff82 	bl	800fdf8 <std>
 800fef4:	68a0      	ldr	r0, [r4, #8]
 800fef6:	2201      	movs	r2, #1
 800fef8:	2109      	movs	r1, #9
 800fefa:	f7ff ff7d 	bl	800fdf8 <std>
 800fefe:	68e0      	ldr	r0, [r4, #12]
 800ff00:	2202      	movs	r2, #2
 800ff02:	2112      	movs	r1, #18
 800ff04:	f7ff ff78 	bl	800fdf8 <std>
 800ff08:	2301      	movs	r3, #1
 800ff0a:	61a3      	str	r3, [r4, #24]
 800ff0c:	e7d2      	b.n	800feb4 <__sinit+0xc>
 800ff0e:	bf00      	nop
 800ff10:	08013bb4 	.word	0x08013bb4
 800ff14:	0800fe41 	.word	0x0800fe41

0800ff18 <__sfp>:
 800ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1a:	4607      	mov	r7, r0
 800ff1c:	f7ff ffac 	bl	800fe78 <__sfp_lock_acquire>
 800ff20:	4b1e      	ldr	r3, [pc, #120]	; (800ff9c <__sfp+0x84>)
 800ff22:	681e      	ldr	r6, [r3, #0]
 800ff24:	69b3      	ldr	r3, [r6, #24]
 800ff26:	b913      	cbnz	r3, 800ff2e <__sfp+0x16>
 800ff28:	4630      	mov	r0, r6
 800ff2a:	f7ff ffbd 	bl	800fea8 <__sinit>
 800ff2e:	3648      	adds	r6, #72	; 0x48
 800ff30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff34:	3b01      	subs	r3, #1
 800ff36:	d503      	bpl.n	800ff40 <__sfp+0x28>
 800ff38:	6833      	ldr	r3, [r6, #0]
 800ff3a:	b30b      	cbz	r3, 800ff80 <__sfp+0x68>
 800ff3c:	6836      	ldr	r6, [r6, #0]
 800ff3e:	e7f7      	b.n	800ff30 <__sfp+0x18>
 800ff40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff44:	b9d5      	cbnz	r5, 800ff7c <__sfp+0x64>
 800ff46:	4b16      	ldr	r3, [pc, #88]	; (800ffa0 <__sfp+0x88>)
 800ff48:	60e3      	str	r3, [r4, #12]
 800ff4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ff50:	f000 f859 	bl	8010006 <__retarget_lock_init_recursive>
 800ff54:	f7ff ff96 	bl	800fe84 <__sfp_lock_release>
 800ff58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff60:	6025      	str	r5, [r4, #0]
 800ff62:	61a5      	str	r5, [r4, #24]
 800ff64:	2208      	movs	r2, #8
 800ff66:	4629      	mov	r1, r5
 800ff68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff6c:	f7ff fec8 	bl	800fd00 <memset>
 800ff70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff78:	4620      	mov	r0, r4
 800ff7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7c:	3468      	adds	r4, #104	; 0x68
 800ff7e:	e7d9      	b.n	800ff34 <__sfp+0x1c>
 800ff80:	2104      	movs	r1, #4
 800ff82:	4638      	mov	r0, r7
 800ff84:	f7ff ff62 	bl	800fe4c <__sfmoreglue>
 800ff88:	4604      	mov	r4, r0
 800ff8a:	6030      	str	r0, [r6, #0]
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d1d5      	bne.n	800ff3c <__sfp+0x24>
 800ff90:	f7ff ff78 	bl	800fe84 <__sfp_lock_release>
 800ff94:	230c      	movs	r3, #12
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	e7ee      	b.n	800ff78 <__sfp+0x60>
 800ff9a:	bf00      	nop
 800ff9c:	08013bb4 	.word	0x08013bb4
 800ffa0:	ffff0001 	.word	0xffff0001

0800ffa4 <fiprintf>:
 800ffa4:	b40e      	push	{r1, r2, r3}
 800ffa6:	b503      	push	{r0, r1, lr}
 800ffa8:	4601      	mov	r1, r0
 800ffaa:	ab03      	add	r3, sp, #12
 800ffac:	4805      	ldr	r0, [pc, #20]	; (800ffc4 <fiprintf+0x20>)
 800ffae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffb2:	6800      	ldr	r0, [r0, #0]
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	f000 f93b 	bl	8010230 <_vfiprintf_r>
 800ffba:	b002      	add	sp, #8
 800ffbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffc0:	b003      	add	sp, #12
 800ffc2:	4770      	bx	lr
 800ffc4:	24000034 	.word	0x24000034

0800ffc8 <_fwalk_reent>:
 800ffc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffcc:	4606      	mov	r6, r0
 800ffce:	4688      	mov	r8, r1
 800ffd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffd4:	2700      	movs	r7, #0
 800ffd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffda:	f1b9 0901 	subs.w	r9, r9, #1
 800ffde:	d505      	bpl.n	800ffec <_fwalk_reent+0x24>
 800ffe0:	6824      	ldr	r4, [r4, #0]
 800ffe2:	2c00      	cmp	r4, #0
 800ffe4:	d1f7      	bne.n	800ffd6 <_fwalk_reent+0xe>
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffec:	89ab      	ldrh	r3, [r5, #12]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d907      	bls.n	8010002 <_fwalk_reent+0x3a>
 800fff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fff6:	3301      	adds	r3, #1
 800fff8:	d003      	beq.n	8010002 <_fwalk_reent+0x3a>
 800fffa:	4629      	mov	r1, r5
 800fffc:	4630      	mov	r0, r6
 800fffe:	47c0      	blx	r8
 8010000:	4307      	orrs	r7, r0
 8010002:	3568      	adds	r5, #104	; 0x68
 8010004:	e7e9      	b.n	800ffda <_fwalk_reent+0x12>

08010006 <__retarget_lock_init_recursive>:
 8010006:	4770      	bx	lr

08010008 <__retarget_lock_acquire_recursive>:
 8010008:	4770      	bx	lr

0801000a <__retarget_lock_release_recursive>:
 801000a:	4770      	bx	lr

0801000c <malloc>:
 801000c:	4b02      	ldr	r3, [pc, #8]	; (8010018 <malloc+0xc>)
 801000e:	4601      	mov	r1, r0
 8010010:	6818      	ldr	r0, [r3, #0]
 8010012:	f000 b86f 	b.w	80100f4 <_malloc_r>
 8010016:	bf00      	nop
 8010018:	24000034 	.word	0x24000034

0801001c <_free_r>:
 801001c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801001e:	2900      	cmp	r1, #0
 8010020:	d044      	beq.n	80100ac <_free_r+0x90>
 8010022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010026:	9001      	str	r0, [sp, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f1a1 0404 	sub.w	r4, r1, #4
 801002e:	bfb8      	it	lt
 8010030:	18e4      	addlt	r4, r4, r3
 8010032:	f000 fe39 	bl	8010ca8 <__malloc_lock>
 8010036:	4a1e      	ldr	r2, [pc, #120]	; (80100b0 <_free_r+0x94>)
 8010038:	9801      	ldr	r0, [sp, #4]
 801003a:	6813      	ldr	r3, [r2, #0]
 801003c:	b933      	cbnz	r3, 801004c <_free_r+0x30>
 801003e:	6063      	str	r3, [r4, #4]
 8010040:	6014      	str	r4, [r2, #0]
 8010042:	b003      	add	sp, #12
 8010044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010048:	f000 be34 	b.w	8010cb4 <__malloc_unlock>
 801004c:	42a3      	cmp	r3, r4
 801004e:	d908      	bls.n	8010062 <_free_r+0x46>
 8010050:	6825      	ldr	r5, [r4, #0]
 8010052:	1961      	adds	r1, r4, r5
 8010054:	428b      	cmp	r3, r1
 8010056:	bf01      	itttt	eq
 8010058:	6819      	ldreq	r1, [r3, #0]
 801005a:	685b      	ldreq	r3, [r3, #4]
 801005c:	1949      	addeq	r1, r1, r5
 801005e:	6021      	streq	r1, [r4, #0]
 8010060:	e7ed      	b.n	801003e <_free_r+0x22>
 8010062:	461a      	mov	r2, r3
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	b10b      	cbz	r3, 801006c <_free_r+0x50>
 8010068:	42a3      	cmp	r3, r4
 801006a:	d9fa      	bls.n	8010062 <_free_r+0x46>
 801006c:	6811      	ldr	r1, [r2, #0]
 801006e:	1855      	adds	r5, r2, r1
 8010070:	42a5      	cmp	r5, r4
 8010072:	d10b      	bne.n	801008c <_free_r+0x70>
 8010074:	6824      	ldr	r4, [r4, #0]
 8010076:	4421      	add	r1, r4
 8010078:	1854      	adds	r4, r2, r1
 801007a:	42a3      	cmp	r3, r4
 801007c:	6011      	str	r1, [r2, #0]
 801007e:	d1e0      	bne.n	8010042 <_free_r+0x26>
 8010080:	681c      	ldr	r4, [r3, #0]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	6053      	str	r3, [r2, #4]
 8010086:	4421      	add	r1, r4
 8010088:	6011      	str	r1, [r2, #0]
 801008a:	e7da      	b.n	8010042 <_free_r+0x26>
 801008c:	d902      	bls.n	8010094 <_free_r+0x78>
 801008e:	230c      	movs	r3, #12
 8010090:	6003      	str	r3, [r0, #0]
 8010092:	e7d6      	b.n	8010042 <_free_r+0x26>
 8010094:	6825      	ldr	r5, [r4, #0]
 8010096:	1961      	adds	r1, r4, r5
 8010098:	428b      	cmp	r3, r1
 801009a:	bf04      	itt	eq
 801009c:	6819      	ldreq	r1, [r3, #0]
 801009e:	685b      	ldreq	r3, [r3, #4]
 80100a0:	6063      	str	r3, [r4, #4]
 80100a2:	bf04      	itt	eq
 80100a4:	1949      	addeq	r1, r1, r5
 80100a6:	6021      	streq	r1, [r4, #0]
 80100a8:	6054      	str	r4, [r2, #4]
 80100aa:	e7ca      	b.n	8010042 <_free_r+0x26>
 80100ac:	b003      	add	sp, #12
 80100ae:	bd30      	pop	{r4, r5, pc}
 80100b0:	2400bc8c 	.word	0x2400bc8c

080100b4 <sbrk_aligned>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	4e0e      	ldr	r6, [pc, #56]	; (80100f0 <sbrk_aligned+0x3c>)
 80100b8:	460c      	mov	r4, r1
 80100ba:	6831      	ldr	r1, [r6, #0]
 80100bc:	4605      	mov	r5, r0
 80100be:	b911      	cbnz	r1, 80100c6 <sbrk_aligned+0x12>
 80100c0:	f000 fb7a 	bl	80107b8 <_sbrk_r>
 80100c4:	6030      	str	r0, [r6, #0]
 80100c6:	4621      	mov	r1, r4
 80100c8:	4628      	mov	r0, r5
 80100ca:	f000 fb75 	bl	80107b8 <_sbrk_r>
 80100ce:	1c43      	adds	r3, r0, #1
 80100d0:	d00a      	beq.n	80100e8 <sbrk_aligned+0x34>
 80100d2:	1cc4      	adds	r4, r0, #3
 80100d4:	f024 0403 	bic.w	r4, r4, #3
 80100d8:	42a0      	cmp	r0, r4
 80100da:	d007      	beq.n	80100ec <sbrk_aligned+0x38>
 80100dc:	1a21      	subs	r1, r4, r0
 80100de:	4628      	mov	r0, r5
 80100e0:	f000 fb6a 	bl	80107b8 <_sbrk_r>
 80100e4:	3001      	adds	r0, #1
 80100e6:	d101      	bne.n	80100ec <sbrk_aligned+0x38>
 80100e8:	f04f 34ff 	mov.w	r4, #4294967295
 80100ec:	4620      	mov	r0, r4
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	2400bc90 	.word	0x2400bc90

080100f4 <_malloc_r>:
 80100f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f8:	1ccd      	adds	r5, r1, #3
 80100fa:	f025 0503 	bic.w	r5, r5, #3
 80100fe:	3508      	adds	r5, #8
 8010100:	2d0c      	cmp	r5, #12
 8010102:	bf38      	it	cc
 8010104:	250c      	movcc	r5, #12
 8010106:	2d00      	cmp	r5, #0
 8010108:	4607      	mov	r7, r0
 801010a:	db01      	blt.n	8010110 <_malloc_r+0x1c>
 801010c:	42a9      	cmp	r1, r5
 801010e:	d905      	bls.n	801011c <_malloc_r+0x28>
 8010110:	230c      	movs	r3, #12
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	2600      	movs	r6, #0
 8010116:	4630      	mov	r0, r6
 8010118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011c:	4e2e      	ldr	r6, [pc, #184]	; (80101d8 <_malloc_r+0xe4>)
 801011e:	f000 fdc3 	bl	8010ca8 <__malloc_lock>
 8010122:	6833      	ldr	r3, [r6, #0]
 8010124:	461c      	mov	r4, r3
 8010126:	bb34      	cbnz	r4, 8010176 <_malloc_r+0x82>
 8010128:	4629      	mov	r1, r5
 801012a:	4638      	mov	r0, r7
 801012c:	f7ff ffc2 	bl	80100b4 <sbrk_aligned>
 8010130:	1c43      	adds	r3, r0, #1
 8010132:	4604      	mov	r4, r0
 8010134:	d14d      	bne.n	80101d2 <_malloc_r+0xde>
 8010136:	6834      	ldr	r4, [r6, #0]
 8010138:	4626      	mov	r6, r4
 801013a:	2e00      	cmp	r6, #0
 801013c:	d140      	bne.n	80101c0 <_malloc_r+0xcc>
 801013e:	6823      	ldr	r3, [r4, #0]
 8010140:	4631      	mov	r1, r6
 8010142:	4638      	mov	r0, r7
 8010144:	eb04 0803 	add.w	r8, r4, r3
 8010148:	f000 fb36 	bl	80107b8 <_sbrk_r>
 801014c:	4580      	cmp	r8, r0
 801014e:	d13a      	bne.n	80101c6 <_malloc_r+0xd2>
 8010150:	6821      	ldr	r1, [r4, #0]
 8010152:	3503      	adds	r5, #3
 8010154:	1a6d      	subs	r5, r5, r1
 8010156:	f025 0503 	bic.w	r5, r5, #3
 801015a:	3508      	adds	r5, #8
 801015c:	2d0c      	cmp	r5, #12
 801015e:	bf38      	it	cc
 8010160:	250c      	movcc	r5, #12
 8010162:	4629      	mov	r1, r5
 8010164:	4638      	mov	r0, r7
 8010166:	f7ff ffa5 	bl	80100b4 <sbrk_aligned>
 801016a:	3001      	adds	r0, #1
 801016c:	d02b      	beq.n	80101c6 <_malloc_r+0xd2>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	442b      	add	r3, r5
 8010172:	6023      	str	r3, [r4, #0]
 8010174:	e00e      	b.n	8010194 <_malloc_r+0xa0>
 8010176:	6822      	ldr	r2, [r4, #0]
 8010178:	1b52      	subs	r2, r2, r5
 801017a:	d41e      	bmi.n	80101ba <_malloc_r+0xc6>
 801017c:	2a0b      	cmp	r2, #11
 801017e:	d916      	bls.n	80101ae <_malloc_r+0xba>
 8010180:	1961      	adds	r1, r4, r5
 8010182:	42a3      	cmp	r3, r4
 8010184:	6025      	str	r5, [r4, #0]
 8010186:	bf18      	it	ne
 8010188:	6059      	strne	r1, [r3, #4]
 801018a:	6863      	ldr	r3, [r4, #4]
 801018c:	bf08      	it	eq
 801018e:	6031      	streq	r1, [r6, #0]
 8010190:	5162      	str	r2, [r4, r5]
 8010192:	604b      	str	r3, [r1, #4]
 8010194:	4638      	mov	r0, r7
 8010196:	f104 060b 	add.w	r6, r4, #11
 801019a:	f000 fd8b 	bl	8010cb4 <__malloc_unlock>
 801019e:	f026 0607 	bic.w	r6, r6, #7
 80101a2:	1d23      	adds	r3, r4, #4
 80101a4:	1af2      	subs	r2, r6, r3
 80101a6:	d0b6      	beq.n	8010116 <_malloc_r+0x22>
 80101a8:	1b9b      	subs	r3, r3, r6
 80101aa:	50a3      	str	r3, [r4, r2]
 80101ac:	e7b3      	b.n	8010116 <_malloc_r+0x22>
 80101ae:	6862      	ldr	r2, [r4, #4]
 80101b0:	42a3      	cmp	r3, r4
 80101b2:	bf0c      	ite	eq
 80101b4:	6032      	streq	r2, [r6, #0]
 80101b6:	605a      	strne	r2, [r3, #4]
 80101b8:	e7ec      	b.n	8010194 <_malloc_r+0xa0>
 80101ba:	4623      	mov	r3, r4
 80101bc:	6864      	ldr	r4, [r4, #4]
 80101be:	e7b2      	b.n	8010126 <_malloc_r+0x32>
 80101c0:	4634      	mov	r4, r6
 80101c2:	6876      	ldr	r6, [r6, #4]
 80101c4:	e7b9      	b.n	801013a <_malloc_r+0x46>
 80101c6:	230c      	movs	r3, #12
 80101c8:	603b      	str	r3, [r7, #0]
 80101ca:	4638      	mov	r0, r7
 80101cc:	f000 fd72 	bl	8010cb4 <__malloc_unlock>
 80101d0:	e7a1      	b.n	8010116 <_malloc_r+0x22>
 80101d2:	6025      	str	r5, [r4, #0]
 80101d4:	e7de      	b.n	8010194 <_malloc_r+0xa0>
 80101d6:	bf00      	nop
 80101d8:	2400bc8c 	.word	0x2400bc8c

080101dc <__sfputc_r>:
 80101dc:	6893      	ldr	r3, [r2, #8]
 80101de:	3b01      	subs	r3, #1
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	b410      	push	{r4}
 80101e4:	6093      	str	r3, [r2, #8]
 80101e6:	da08      	bge.n	80101fa <__sfputc_r+0x1e>
 80101e8:	6994      	ldr	r4, [r2, #24]
 80101ea:	42a3      	cmp	r3, r4
 80101ec:	db01      	blt.n	80101f2 <__sfputc_r+0x16>
 80101ee:	290a      	cmp	r1, #10
 80101f0:	d103      	bne.n	80101fa <__sfputc_r+0x1e>
 80101f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f6:	f000 bb33 	b.w	8010860 <__swbuf_r>
 80101fa:	6813      	ldr	r3, [r2, #0]
 80101fc:	1c58      	adds	r0, r3, #1
 80101fe:	6010      	str	r0, [r2, #0]
 8010200:	7019      	strb	r1, [r3, #0]
 8010202:	4608      	mov	r0, r1
 8010204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010208:	4770      	bx	lr

0801020a <__sfputs_r>:
 801020a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020c:	4606      	mov	r6, r0
 801020e:	460f      	mov	r7, r1
 8010210:	4614      	mov	r4, r2
 8010212:	18d5      	adds	r5, r2, r3
 8010214:	42ac      	cmp	r4, r5
 8010216:	d101      	bne.n	801021c <__sfputs_r+0x12>
 8010218:	2000      	movs	r0, #0
 801021a:	e007      	b.n	801022c <__sfputs_r+0x22>
 801021c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010220:	463a      	mov	r2, r7
 8010222:	4630      	mov	r0, r6
 8010224:	f7ff ffda 	bl	80101dc <__sfputc_r>
 8010228:	1c43      	adds	r3, r0, #1
 801022a:	d1f3      	bne.n	8010214 <__sfputs_r+0xa>
 801022c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010230 <_vfiprintf_r>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	460d      	mov	r5, r1
 8010236:	b09d      	sub	sp, #116	; 0x74
 8010238:	4614      	mov	r4, r2
 801023a:	4698      	mov	r8, r3
 801023c:	4606      	mov	r6, r0
 801023e:	b118      	cbz	r0, 8010248 <_vfiprintf_r+0x18>
 8010240:	6983      	ldr	r3, [r0, #24]
 8010242:	b90b      	cbnz	r3, 8010248 <_vfiprintf_r+0x18>
 8010244:	f7ff fe30 	bl	800fea8 <__sinit>
 8010248:	4b89      	ldr	r3, [pc, #548]	; (8010470 <_vfiprintf_r+0x240>)
 801024a:	429d      	cmp	r5, r3
 801024c:	d11b      	bne.n	8010286 <_vfiprintf_r+0x56>
 801024e:	6875      	ldr	r5, [r6, #4]
 8010250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010252:	07d9      	lsls	r1, r3, #31
 8010254:	d405      	bmi.n	8010262 <_vfiprintf_r+0x32>
 8010256:	89ab      	ldrh	r3, [r5, #12]
 8010258:	059a      	lsls	r2, r3, #22
 801025a:	d402      	bmi.n	8010262 <_vfiprintf_r+0x32>
 801025c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801025e:	f7ff fed3 	bl	8010008 <__retarget_lock_acquire_recursive>
 8010262:	89ab      	ldrh	r3, [r5, #12]
 8010264:	071b      	lsls	r3, r3, #28
 8010266:	d501      	bpl.n	801026c <_vfiprintf_r+0x3c>
 8010268:	692b      	ldr	r3, [r5, #16]
 801026a:	b9eb      	cbnz	r3, 80102a8 <_vfiprintf_r+0x78>
 801026c:	4629      	mov	r1, r5
 801026e:	4630      	mov	r0, r6
 8010270:	f000 fb5a 	bl	8010928 <__swsetup_r>
 8010274:	b1c0      	cbz	r0, 80102a8 <_vfiprintf_r+0x78>
 8010276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010278:	07dc      	lsls	r4, r3, #31
 801027a:	d50e      	bpl.n	801029a <_vfiprintf_r+0x6a>
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	b01d      	add	sp, #116	; 0x74
 8010282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010286:	4b7b      	ldr	r3, [pc, #492]	; (8010474 <_vfiprintf_r+0x244>)
 8010288:	429d      	cmp	r5, r3
 801028a:	d101      	bne.n	8010290 <_vfiprintf_r+0x60>
 801028c:	68b5      	ldr	r5, [r6, #8]
 801028e:	e7df      	b.n	8010250 <_vfiprintf_r+0x20>
 8010290:	4b79      	ldr	r3, [pc, #484]	; (8010478 <_vfiprintf_r+0x248>)
 8010292:	429d      	cmp	r5, r3
 8010294:	bf08      	it	eq
 8010296:	68f5      	ldreq	r5, [r6, #12]
 8010298:	e7da      	b.n	8010250 <_vfiprintf_r+0x20>
 801029a:	89ab      	ldrh	r3, [r5, #12]
 801029c:	0598      	lsls	r0, r3, #22
 801029e:	d4ed      	bmi.n	801027c <_vfiprintf_r+0x4c>
 80102a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102a2:	f7ff feb2 	bl	801000a <__retarget_lock_release_recursive>
 80102a6:	e7e9      	b.n	801027c <_vfiprintf_r+0x4c>
 80102a8:	2300      	movs	r3, #0
 80102aa:	9309      	str	r3, [sp, #36]	; 0x24
 80102ac:	2320      	movs	r3, #32
 80102ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80102b6:	2330      	movs	r3, #48	; 0x30
 80102b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801047c <_vfiprintf_r+0x24c>
 80102bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102c0:	f04f 0901 	mov.w	r9, #1
 80102c4:	4623      	mov	r3, r4
 80102c6:	469a      	mov	sl, r3
 80102c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102cc:	b10a      	cbz	r2, 80102d2 <_vfiprintf_r+0xa2>
 80102ce:	2a25      	cmp	r2, #37	; 0x25
 80102d0:	d1f9      	bne.n	80102c6 <_vfiprintf_r+0x96>
 80102d2:	ebba 0b04 	subs.w	fp, sl, r4
 80102d6:	d00b      	beq.n	80102f0 <_vfiprintf_r+0xc0>
 80102d8:	465b      	mov	r3, fp
 80102da:	4622      	mov	r2, r4
 80102dc:	4629      	mov	r1, r5
 80102de:	4630      	mov	r0, r6
 80102e0:	f7ff ff93 	bl	801020a <__sfputs_r>
 80102e4:	3001      	adds	r0, #1
 80102e6:	f000 80aa 	beq.w	801043e <_vfiprintf_r+0x20e>
 80102ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102ec:	445a      	add	r2, fp
 80102ee:	9209      	str	r2, [sp, #36]	; 0x24
 80102f0:	f89a 3000 	ldrb.w	r3, [sl]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 80a2 	beq.w	801043e <_vfiprintf_r+0x20e>
 80102fa:	2300      	movs	r3, #0
 80102fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010304:	f10a 0a01 	add.w	sl, sl, #1
 8010308:	9304      	str	r3, [sp, #16]
 801030a:	9307      	str	r3, [sp, #28]
 801030c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010310:	931a      	str	r3, [sp, #104]	; 0x68
 8010312:	4654      	mov	r4, sl
 8010314:	2205      	movs	r2, #5
 8010316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031a:	4858      	ldr	r0, [pc, #352]	; (801047c <_vfiprintf_r+0x24c>)
 801031c:	f7ef ffe8 	bl	80002f0 <memchr>
 8010320:	9a04      	ldr	r2, [sp, #16]
 8010322:	b9d8      	cbnz	r0, 801035c <_vfiprintf_r+0x12c>
 8010324:	06d1      	lsls	r1, r2, #27
 8010326:	bf44      	itt	mi
 8010328:	2320      	movmi	r3, #32
 801032a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801032e:	0713      	lsls	r3, r2, #28
 8010330:	bf44      	itt	mi
 8010332:	232b      	movmi	r3, #43	; 0x2b
 8010334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010338:	f89a 3000 	ldrb.w	r3, [sl]
 801033c:	2b2a      	cmp	r3, #42	; 0x2a
 801033e:	d015      	beq.n	801036c <_vfiprintf_r+0x13c>
 8010340:	9a07      	ldr	r2, [sp, #28]
 8010342:	4654      	mov	r4, sl
 8010344:	2000      	movs	r0, #0
 8010346:	f04f 0c0a 	mov.w	ip, #10
 801034a:	4621      	mov	r1, r4
 801034c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010350:	3b30      	subs	r3, #48	; 0x30
 8010352:	2b09      	cmp	r3, #9
 8010354:	d94e      	bls.n	80103f4 <_vfiprintf_r+0x1c4>
 8010356:	b1b0      	cbz	r0, 8010386 <_vfiprintf_r+0x156>
 8010358:	9207      	str	r2, [sp, #28]
 801035a:	e014      	b.n	8010386 <_vfiprintf_r+0x156>
 801035c:	eba0 0308 	sub.w	r3, r0, r8
 8010360:	fa09 f303 	lsl.w	r3, r9, r3
 8010364:	4313      	orrs	r3, r2
 8010366:	9304      	str	r3, [sp, #16]
 8010368:	46a2      	mov	sl, r4
 801036a:	e7d2      	b.n	8010312 <_vfiprintf_r+0xe2>
 801036c:	9b03      	ldr	r3, [sp, #12]
 801036e:	1d19      	adds	r1, r3, #4
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	9103      	str	r1, [sp, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	bfbb      	ittet	lt
 8010378:	425b      	neglt	r3, r3
 801037a:	f042 0202 	orrlt.w	r2, r2, #2
 801037e:	9307      	strge	r3, [sp, #28]
 8010380:	9307      	strlt	r3, [sp, #28]
 8010382:	bfb8      	it	lt
 8010384:	9204      	strlt	r2, [sp, #16]
 8010386:	7823      	ldrb	r3, [r4, #0]
 8010388:	2b2e      	cmp	r3, #46	; 0x2e
 801038a:	d10c      	bne.n	80103a6 <_vfiprintf_r+0x176>
 801038c:	7863      	ldrb	r3, [r4, #1]
 801038e:	2b2a      	cmp	r3, #42	; 0x2a
 8010390:	d135      	bne.n	80103fe <_vfiprintf_r+0x1ce>
 8010392:	9b03      	ldr	r3, [sp, #12]
 8010394:	1d1a      	adds	r2, r3, #4
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	9203      	str	r2, [sp, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	bfb8      	it	lt
 801039e:	f04f 33ff 	movlt.w	r3, #4294967295
 80103a2:	3402      	adds	r4, #2
 80103a4:	9305      	str	r3, [sp, #20]
 80103a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801048c <_vfiprintf_r+0x25c>
 80103aa:	7821      	ldrb	r1, [r4, #0]
 80103ac:	2203      	movs	r2, #3
 80103ae:	4650      	mov	r0, sl
 80103b0:	f7ef ff9e 	bl	80002f0 <memchr>
 80103b4:	b140      	cbz	r0, 80103c8 <_vfiprintf_r+0x198>
 80103b6:	2340      	movs	r3, #64	; 0x40
 80103b8:	eba0 000a 	sub.w	r0, r0, sl
 80103bc:	fa03 f000 	lsl.w	r0, r3, r0
 80103c0:	9b04      	ldr	r3, [sp, #16]
 80103c2:	4303      	orrs	r3, r0
 80103c4:	3401      	adds	r4, #1
 80103c6:	9304      	str	r3, [sp, #16]
 80103c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103cc:	482c      	ldr	r0, [pc, #176]	; (8010480 <_vfiprintf_r+0x250>)
 80103ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103d2:	2206      	movs	r2, #6
 80103d4:	f7ef ff8c 	bl	80002f0 <memchr>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d03f      	beq.n	801045c <_vfiprintf_r+0x22c>
 80103dc:	4b29      	ldr	r3, [pc, #164]	; (8010484 <_vfiprintf_r+0x254>)
 80103de:	bb1b      	cbnz	r3, 8010428 <_vfiprintf_r+0x1f8>
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	3307      	adds	r3, #7
 80103e4:	f023 0307 	bic.w	r3, r3, #7
 80103e8:	3308      	adds	r3, #8
 80103ea:	9303      	str	r3, [sp, #12]
 80103ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ee:	443b      	add	r3, r7
 80103f0:	9309      	str	r3, [sp, #36]	; 0x24
 80103f2:	e767      	b.n	80102c4 <_vfiprintf_r+0x94>
 80103f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80103f8:	460c      	mov	r4, r1
 80103fa:	2001      	movs	r0, #1
 80103fc:	e7a5      	b.n	801034a <_vfiprintf_r+0x11a>
 80103fe:	2300      	movs	r3, #0
 8010400:	3401      	adds	r4, #1
 8010402:	9305      	str	r3, [sp, #20]
 8010404:	4619      	mov	r1, r3
 8010406:	f04f 0c0a 	mov.w	ip, #10
 801040a:	4620      	mov	r0, r4
 801040c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010410:	3a30      	subs	r2, #48	; 0x30
 8010412:	2a09      	cmp	r2, #9
 8010414:	d903      	bls.n	801041e <_vfiprintf_r+0x1ee>
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0c5      	beq.n	80103a6 <_vfiprintf_r+0x176>
 801041a:	9105      	str	r1, [sp, #20]
 801041c:	e7c3      	b.n	80103a6 <_vfiprintf_r+0x176>
 801041e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010422:	4604      	mov	r4, r0
 8010424:	2301      	movs	r3, #1
 8010426:	e7f0      	b.n	801040a <_vfiprintf_r+0x1da>
 8010428:	ab03      	add	r3, sp, #12
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	462a      	mov	r2, r5
 801042e:	4b16      	ldr	r3, [pc, #88]	; (8010488 <_vfiprintf_r+0x258>)
 8010430:	a904      	add	r1, sp, #16
 8010432:	4630      	mov	r0, r6
 8010434:	f3af 8000 	nop.w
 8010438:	4607      	mov	r7, r0
 801043a:	1c78      	adds	r0, r7, #1
 801043c:	d1d6      	bne.n	80103ec <_vfiprintf_r+0x1bc>
 801043e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010440:	07d9      	lsls	r1, r3, #31
 8010442:	d405      	bmi.n	8010450 <_vfiprintf_r+0x220>
 8010444:	89ab      	ldrh	r3, [r5, #12]
 8010446:	059a      	lsls	r2, r3, #22
 8010448:	d402      	bmi.n	8010450 <_vfiprintf_r+0x220>
 801044a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801044c:	f7ff fddd 	bl	801000a <__retarget_lock_release_recursive>
 8010450:	89ab      	ldrh	r3, [r5, #12]
 8010452:	065b      	lsls	r3, r3, #25
 8010454:	f53f af12 	bmi.w	801027c <_vfiprintf_r+0x4c>
 8010458:	9809      	ldr	r0, [sp, #36]	; 0x24
 801045a:	e711      	b.n	8010280 <_vfiprintf_r+0x50>
 801045c:	ab03      	add	r3, sp, #12
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	462a      	mov	r2, r5
 8010462:	4b09      	ldr	r3, [pc, #36]	; (8010488 <_vfiprintf_r+0x258>)
 8010464:	a904      	add	r1, sp, #16
 8010466:	4630      	mov	r0, r6
 8010468:	f000 f880 	bl	801056c <_printf_i>
 801046c:	e7e4      	b.n	8010438 <_vfiprintf_r+0x208>
 801046e:	bf00      	nop
 8010470:	08013c88 	.word	0x08013c88
 8010474:	08013ca8 	.word	0x08013ca8
 8010478:	08013c68 	.word	0x08013c68
 801047c:	08013cc8 	.word	0x08013cc8
 8010480:	08013cd2 	.word	0x08013cd2
 8010484:	00000000 	.word	0x00000000
 8010488:	0801020b 	.word	0x0801020b
 801048c:	08013cce 	.word	0x08013cce

08010490 <_printf_common>:
 8010490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010494:	4616      	mov	r6, r2
 8010496:	4699      	mov	r9, r3
 8010498:	688a      	ldr	r2, [r1, #8]
 801049a:	690b      	ldr	r3, [r1, #16]
 801049c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104a0:	4293      	cmp	r3, r2
 80104a2:	bfb8      	it	lt
 80104a4:	4613      	movlt	r3, r2
 80104a6:	6033      	str	r3, [r6, #0]
 80104a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104ac:	4607      	mov	r7, r0
 80104ae:	460c      	mov	r4, r1
 80104b0:	b10a      	cbz	r2, 80104b6 <_printf_common+0x26>
 80104b2:	3301      	adds	r3, #1
 80104b4:	6033      	str	r3, [r6, #0]
 80104b6:	6823      	ldr	r3, [r4, #0]
 80104b8:	0699      	lsls	r1, r3, #26
 80104ba:	bf42      	ittt	mi
 80104bc:	6833      	ldrmi	r3, [r6, #0]
 80104be:	3302      	addmi	r3, #2
 80104c0:	6033      	strmi	r3, [r6, #0]
 80104c2:	6825      	ldr	r5, [r4, #0]
 80104c4:	f015 0506 	ands.w	r5, r5, #6
 80104c8:	d106      	bne.n	80104d8 <_printf_common+0x48>
 80104ca:	f104 0a19 	add.w	sl, r4, #25
 80104ce:	68e3      	ldr	r3, [r4, #12]
 80104d0:	6832      	ldr	r2, [r6, #0]
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	42ab      	cmp	r3, r5
 80104d6:	dc26      	bgt.n	8010526 <_printf_common+0x96>
 80104d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104dc:	1e13      	subs	r3, r2, #0
 80104de:	6822      	ldr	r2, [r4, #0]
 80104e0:	bf18      	it	ne
 80104e2:	2301      	movne	r3, #1
 80104e4:	0692      	lsls	r2, r2, #26
 80104e6:	d42b      	bmi.n	8010540 <_printf_common+0xb0>
 80104e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104ec:	4649      	mov	r1, r9
 80104ee:	4638      	mov	r0, r7
 80104f0:	47c0      	blx	r8
 80104f2:	3001      	adds	r0, #1
 80104f4:	d01e      	beq.n	8010534 <_printf_common+0xa4>
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	68e5      	ldr	r5, [r4, #12]
 80104fa:	6832      	ldr	r2, [r6, #0]
 80104fc:	f003 0306 	and.w	r3, r3, #6
 8010500:	2b04      	cmp	r3, #4
 8010502:	bf08      	it	eq
 8010504:	1aad      	subeq	r5, r5, r2
 8010506:	68a3      	ldr	r3, [r4, #8]
 8010508:	6922      	ldr	r2, [r4, #16]
 801050a:	bf0c      	ite	eq
 801050c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010510:	2500      	movne	r5, #0
 8010512:	4293      	cmp	r3, r2
 8010514:	bfc4      	itt	gt
 8010516:	1a9b      	subgt	r3, r3, r2
 8010518:	18ed      	addgt	r5, r5, r3
 801051a:	2600      	movs	r6, #0
 801051c:	341a      	adds	r4, #26
 801051e:	42b5      	cmp	r5, r6
 8010520:	d11a      	bne.n	8010558 <_printf_common+0xc8>
 8010522:	2000      	movs	r0, #0
 8010524:	e008      	b.n	8010538 <_printf_common+0xa8>
 8010526:	2301      	movs	r3, #1
 8010528:	4652      	mov	r2, sl
 801052a:	4649      	mov	r1, r9
 801052c:	4638      	mov	r0, r7
 801052e:	47c0      	blx	r8
 8010530:	3001      	adds	r0, #1
 8010532:	d103      	bne.n	801053c <_printf_common+0xac>
 8010534:	f04f 30ff 	mov.w	r0, #4294967295
 8010538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053c:	3501      	adds	r5, #1
 801053e:	e7c6      	b.n	80104ce <_printf_common+0x3e>
 8010540:	18e1      	adds	r1, r4, r3
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	2030      	movs	r0, #48	; 0x30
 8010546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801054a:	4422      	add	r2, r4
 801054c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010554:	3302      	adds	r3, #2
 8010556:	e7c7      	b.n	80104e8 <_printf_common+0x58>
 8010558:	2301      	movs	r3, #1
 801055a:	4622      	mov	r2, r4
 801055c:	4649      	mov	r1, r9
 801055e:	4638      	mov	r0, r7
 8010560:	47c0      	blx	r8
 8010562:	3001      	adds	r0, #1
 8010564:	d0e6      	beq.n	8010534 <_printf_common+0xa4>
 8010566:	3601      	adds	r6, #1
 8010568:	e7d9      	b.n	801051e <_printf_common+0x8e>
	...

0801056c <_printf_i>:
 801056c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010570:	7e0f      	ldrb	r7, [r1, #24]
 8010572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010574:	2f78      	cmp	r7, #120	; 0x78
 8010576:	4691      	mov	r9, r2
 8010578:	4680      	mov	r8, r0
 801057a:	460c      	mov	r4, r1
 801057c:	469a      	mov	sl, r3
 801057e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010582:	d807      	bhi.n	8010594 <_printf_i+0x28>
 8010584:	2f62      	cmp	r7, #98	; 0x62
 8010586:	d80a      	bhi.n	801059e <_printf_i+0x32>
 8010588:	2f00      	cmp	r7, #0
 801058a:	f000 80d8 	beq.w	801073e <_printf_i+0x1d2>
 801058e:	2f58      	cmp	r7, #88	; 0x58
 8010590:	f000 80a3 	beq.w	80106da <_printf_i+0x16e>
 8010594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801059c:	e03a      	b.n	8010614 <_printf_i+0xa8>
 801059e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105a2:	2b15      	cmp	r3, #21
 80105a4:	d8f6      	bhi.n	8010594 <_printf_i+0x28>
 80105a6:	a101      	add	r1, pc, #4	; (adr r1, 80105ac <_printf_i+0x40>)
 80105a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105ac:	08010605 	.word	0x08010605
 80105b0:	08010619 	.word	0x08010619
 80105b4:	08010595 	.word	0x08010595
 80105b8:	08010595 	.word	0x08010595
 80105bc:	08010595 	.word	0x08010595
 80105c0:	08010595 	.word	0x08010595
 80105c4:	08010619 	.word	0x08010619
 80105c8:	08010595 	.word	0x08010595
 80105cc:	08010595 	.word	0x08010595
 80105d0:	08010595 	.word	0x08010595
 80105d4:	08010595 	.word	0x08010595
 80105d8:	08010725 	.word	0x08010725
 80105dc:	08010649 	.word	0x08010649
 80105e0:	08010707 	.word	0x08010707
 80105e4:	08010595 	.word	0x08010595
 80105e8:	08010595 	.word	0x08010595
 80105ec:	08010747 	.word	0x08010747
 80105f0:	08010595 	.word	0x08010595
 80105f4:	08010649 	.word	0x08010649
 80105f8:	08010595 	.word	0x08010595
 80105fc:	08010595 	.word	0x08010595
 8010600:	0801070f 	.word	0x0801070f
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	1d1a      	adds	r2, r3, #4
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	602a      	str	r2, [r5, #0]
 801060c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010614:	2301      	movs	r3, #1
 8010616:	e0a3      	b.n	8010760 <_printf_i+0x1f4>
 8010618:	6820      	ldr	r0, [r4, #0]
 801061a:	6829      	ldr	r1, [r5, #0]
 801061c:	0606      	lsls	r6, r0, #24
 801061e:	f101 0304 	add.w	r3, r1, #4
 8010622:	d50a      	bpl.n	801063a <_printf_i+0xce>
 8010624:	680e      	ldr	r6, [r1, #0]
 8010626:	602b      	str	r3, [r5, #0]
 8010628:	2e00      	cmp	r6, #0
 801062a:	da03      	bge.n	8010634 <_printf_i+0xc8>
 801062c:	232d      	movs	r3, #45	; 0x2d
 801062e:	4276      	negs	r6, r6
 8010630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010634:	485e      	ldr	r0, [pc, #376]	; (80107b0 <_printf_i+0x244>)
 8010636:	230a      	movs	r3, #10
 8010638:	e019      	b.n	801066e <_printf_i+0x102>
 801063a:	680e      	ldr	r6, [r1, #0]
 801063c:	602b      	str	r3, [r5, #0]
 801063e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010642:	bf18      	it	ne
 8010644:	b236      	sxthne	r6, r6
 8010646:	e7ef      	b.n	8010628 <_printf_i+0xbc>
 8010648:	682b      	ldr	r3, [r5, #0]
 801064a:	6820      	ldr	r0, [r4, #0]
 801064c:	1d19      	adds	r1, r3, #4
 801064e:	6029      	str	r1, [r5, #0]
 8010650:	0601      	lsls	r1, r0, #24
 8010652:	d501      	bpl.n	8010658 <_printf_i+0xec>
 8010654:	681e      	ldr	r6, [r3, #0]
 8010656:	e002      	b.n	801065e <_printf_i+0xf2>
 8010658:	0646      	lsls	r6, r0, #25
 801065a:	d5fb      	bpl.n	8010654 <_printf_i+0xe8>
 801065c:	881e      	ldrh	r6, [r3, #0]
 801065e:	4854      	ldr	r0, [pc, #336]	; (80107b0 <_printf_i+0x244>)
 8010660:	2f6f      	cmp	r7, #111	; 0x6f
 8010662:	bf0c      	ite	eq
 8010664:	2308      	moveq	r3, #8
 8010666:	230a      	movne	r3, #10
 8010668:	2100      	movs	r1, #0
 801066a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801066e:	6865      	ldr	r5, [r4, #4]
 8010670:	60a5      	str	r5, [r4, #8]
 8010672:	2d00      	cmp	r5, #0
 8010674:	bfa2      	ittt	ge
 8010676:	6821      	ldrge	r1, [r4, #0]
 8010678:	f021 0104 	bicge.w	r1, r1, #4
 801067c:	6021      	strge	r1, [r4, #0]
 801067e:	b90e      	cbnz	r6, 8010684 <_printf_i+0x118>
 8010680:	2d00      	cmp	r5, #0
 8010682:	d04d      	beq.n	8010720 <_printf_i+0x1b4>
 8010684:	4615      	mov	r5, r2
 8010686:	fbb6 f1f3 	udiv	r1, r6, r3
 801068a:	fb03 6711 	mls	r7, r3, r1, r6
 801068e:	5dc7      	ldrb	r7, [r0, r7]
 8010690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010694:	4637      	mov	r7, r6
 8010696:	42bb      	cmp	r3, r7
 8010698:	460e      	mov	r6, r1
 801069a:	d9f4      	bls.n	8010686 <_printf_i+0x11a>
 801069c:	2b08      	cmp	r3, #8
 801069e:	d10b      	bne.n	80106b8 <_printf_i+0x14c>
 80106a0:	6823      	ldr	r3, [r4, #0]
 80106a2:	07de      	lsls	r6, r3, #31
 80106a4:	d508      	bpl.n	80106b8 <_printf_i+0x14c>
 80106a6:	6923      	ldr	r3, [r4, #16]
 80106a8:	6861      	ldr	r1, [r4, #4]
 80106aa:	4299      	cmp	r1, r3
 80106ac:	bfde      	ittt	le
 80106ae:	2330      	movle	r3, #48	; 0x30
 80106b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106b8:	1b52      	subs	r2, r2, r5
 80106ba:	6122      	str	r2, [r4, #16]
 80106bc:	f8cd a000 	str.w	sl, [sp]
 80106c0:	464b      	mov	r3, r9
 80106c2:	aa03      	add	r2, sp, #12
 80106c4:	4621      	mov	r1, r4
 80106c6:	4640      	mov	r0, r8
 80106c8:	f7ff fee2 	bl	8010490 <_printf_common>
 80106cc:	3001      	adds	r0, #1
 80106ce:	d14c      	bne.n	801076a <_printf_i+0x1fe>
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	b004      	add	sp, #16
 80106d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106da:	4835      	ldr	r0, [pc, #212]	; (80107b0 <_printf_i+0x244>)
 80106dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106e0:	6829      	ldr	r1, [r5, #0]
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80106e8:	6029      	str	r1, [r5, #0]
 80106ea:	061d      	lsls	r5, r3, #24
 80106ec:	d514      	bpl.n	8010718 <_printf_i+0x1ac>
 80106ee:	07df      	lsls	r7, r3, #31
 80106f0:	bf44      	itt	mi
 80106f2:	f043 0320 	orrmi.w	r3, r3, #32
 80106f6:	6023      	strmi	r3, [r4, #0]
 80106f8:	b91e      	cbnz	r6, 8010702 <_printf_i+0x196>
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	f023 0320 	bic.w	r3, r3, #32
 8010700:	6023      	str	r3, [r4, #0]
 8010702:	2310      	movs	r3, #16
 8010704:	e7b0      	b.n	8010668 <_printf_i+0xfc>
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	f043 0320 	orr.w	r3, r3, #32
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	2378      	movs	r3, #120	; 0x78
 8010710:	4828      	ldr	r0, [pc, #160]	; (80107b4 <_printf_i+0x248>)
 8010712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010716:	e7e3      	b.n	80106e0 <_printf_i+0x174>
 8010718:	0659      	lsls	r1, r3, #25
 801071a:	bf48      	it	mi
 801071c:	b2b6      	uxthmi	r6, r6
 801071e:	e7e6      	b.n	80106ee <_printf_i+0x182>
 8010720:	4615      	mov	r5, r2
 8010722:	e7bb      	b.n	801069c <_printf_i+0x130>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	6826      	ldr	r6, [r4, #0]
 8010728:	6961      	ldr	r1, [r4, #20]
 801072a:	1d18      	adds	r0, r3, #4
 801072c:	6028      	str	r0, [r5, #0]
 801072e:	0635      	lsls	r5, r6, #24
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	d501      	bpl.n	8010738 <_printf_i+0x1cc>
 8010734:	6019      	str	r1, [r3, #0]
 8010736:	e002      	b.n	801073e <_printf_i+0x1d2>
 8010738:	0670      	lsls	r0, r6, #25
 801073a:	d5fb      	bpl.n	8010734 <_printf_i+0x1c8>
 801073c:	8019      	strh	r1, [r3, #0]
 801073e:	2300      	movs	r3, #0
 8010740:	6123      	str	r3, [r4, #16]
 8010742:	4615      	mov	r5, r2
 8010744:	e7ba      	b.n	80106bc <_printf_i+0x150>
 8010746:	682b      	ldr	r3, [r5, #0]
 8010748:	1d1a      	adds	r2, r3, #4
 801074a:	602a      	str	r2, [r5, #0]
 801074c:	681d      	ldr	r5, [r3, #0]
 801074e:	6862      	ldr	r2, [r4, #4]
 8010750:	2100      	movs	r1, #0
 8010752:	4628      	mov	r0, r5
 8010754:	f7ef fdcc 	bl	80002f0 <memchr>
 8010758:	b108      	cbz	r0, 801075e <_printf_i+0x1f2>
 801075a:	1b40      	subs	r0, r0, r5
 801075c:	6060      	str	r0, [r4, #4]
 801075e:	6863      	ldr	r3, [r4, #4]
 8010760:	6123      	str	r3, [r4, #16]
 8010762:	2300      	movs	r3, #0
 8010764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010768:	e7a8      	b.n	80106bc <_printf_i+0x150>
 801076a:	6923      	ldr	r3, [r4, #16]
 801076c:	462a      	mov	r2, r5
 801076e:	4649      	mov	r1, r9
 8010770:	4640      	mov	r0, r8
 8010772:	47d0      	blx	sl
 8010774:	3001      	adds	r0, #1
 8010776:	d0ab      	beq.n	80106d0 <_printf_i+0x164>
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	079b      	lsls	r3, r3, #30
 801077c:	d413      	bmi.n	80107a6 <_printf_i+0x23a>
 801077e:	68e0      	ldr	r0, [r4, #12]
 8010780:	9b03      	ldr	r3, [sp, #12]
 8010782:	4298      	cmp	r0, r3
 8010784:	bfb8      	it	lt
 8010786:	4618      	movlt	r0, r3
 8010788:	e7a4      	b.n	80106d4 <_printf_i+0x168>
 801078a:	2301      	movs	r3, #1
 801078c:	4632      	mov	r2, r6
 801078e:	4649      	mov	r1, r9
 8010790:	4640      	mov	r0, r8
 8010792:	47d0      	blx	sl
 8010794:	3001      	adds	r0, #1
 8010796:	d09b      	beq.n	80106d0 <_printf_i+0x164>
 8010798:	3501      	adds	r5, #1
 801079a:	68e3      	ldr	r3, [r4, #12]
 801079c:	9903      	ldr	r1, [sp, #12]
 801079e:	1a5b      	subs	r3, r3, r1
 80107a0:	42ab      	cmp	r3, r5
 80107a2:	dcf2      	bgt.n	801078a <_printf_i+0x21e>
 80107a4:	e7eb      	b.n	801077e <_printf_i+0x212>
 80107a6:	2500      	movs	r5, #0
 80107a8:	f104 0619 	add.w	r6, r4, #25
 80107ac:	e7f5      	b.n	801079a <_printf_i+0x22e>
 80107ae:	bf00      	nop
 80107b0:	08013cd9 	.word	0x08013cd9
 80107b4:	08013cea 	.word	0x08013cea

080107b8 <_sbrk_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4d06      	ldr	r5, [pc, #24]	; (80107d4 <_sbrk_r+0x1c>)
 80107bc:	2300      	movs	r3, #0
 80107be:	4604      	mov	r4, r0
 80107c0:	4608      	mov	r0, r1
 80107c2:	602b      	str	r3, [r5, #0]
 80107c4:	f7f0 f946 	bl	8000a54 <_sbrk>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	d102      	bne.n	80107d2 <_sbrk_r+0x1a>
 80107cc:	682b      	ldr	r3, [r5, #0]
 80107ce:	b103      	cbz	r3, 80107d2 <_sbrk_r+0x1a>
 80107d0:	6023      	str	r3, [r4, #0]
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	2400bc84 	.word	0x2400bc84

080107d8 <__sread>:
 80107d8:	b510      	push	{r4, lr}
 80107da:	460c      	mov	r4, r1
 80107dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e0:	f000 fa6e 	bl	8010cc0 <_read_r>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	bfab      	itete	ge
 80107e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107ea:	89a3      	ldrhlt	r3, [r4, #12]
 80107ec:	181b      	addge	r3, r3, r0
 80107ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107f2:	bfac      	ite	ge
 80107f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80107f6:	81a3      	strhlt	r3, [r4, #12]
 80107f8:	bd10      	pop	{r4, pc}

080107fa <__swrite>:
 80107fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fe:	461f      	mov	r7, r3
 8010800:	898b      	ldrh	r3, [r1, #12]
 8010802:	05db      	lsls	r3, r3, #23
 8010804:	4605      	mov	r5, r0
 8010806:	460c      	mov	r4, r1
 8010808:	4616      	mov	r6, r2
 801080a:	d505      	bpl.n	8010818 <__swrite+0x1e>
 801080c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010810:	2302      	movs	r3, #2
 8010812:	2200      	movs	r2, #0
 8010814:	f000 f9d0 	bl	8010bb8 <_lseek_r>
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801081e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010822:	81a3      	strh	r3, [r4, #12]
 8010824:	4632      	mov	r2, r6
 8010826:	463b      	mov	r3, r7
 8010828:	4628      	mov	r0, r5
 801082a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801082e:	f000 b869 	b.w	8010904 <_write_r>

08010832 <__sseek>:
 8010832:	b510      	push	{r4, lr}
 8010834:	460c      	mov	r4, r1
 8010836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801083a:	f000 f9bd 	bl	8010bb8 <_lseek_r>
 801083e:	1c43      	adds	r3, r0, #1
 8010840:	89a3      	ldrh	r3, [r4, #12]
 8010842:	bf15      	itete	ne
 8010844:	6560      	strne	r0, [r4, #84]	; 0x54
 8010846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801084a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801084e:	81a3      	strheq	r3, [r4, #12]
 8010850:	bf18      	it	ne
 8010852:	81a3      	strhne	r3, [r4, #12]
 8010854:	bd10      	pop	{r4, pc}

08010856 <__sclose>:
 8010856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801085a:	f000 b8db 	b.w	8010a14 <_close_r>
	...

08010860 <__swbuf_r>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	460e      	mov	r6, r1
 8010864:	4614      	mov	r4, r2
 8010866:	4605      	mov	r5, r0
 8010868:	b118      	cbz	r0, 8010872 <__swbuf_r+0x12>
 801086a:	6983      	ldr	r3, [r0, #24]
 801086c:	b90b      	cbnz	r3, 8010872 <__swbuf_r+0x12>
 801086e:	f7ff fb1b 	bl	800fea8 <__sinit>
 8010872:	4b21      	ldr	r3, [pc, #132]	; (80108f8 <__swbuf_r+0x98>)
 8010874:	429c      	cmp	r4, r3
 8010876:	d12b      	bne.n	80108d0 <__swbuf_r+0x70>
 8010878:	686c      	ldr	r4, [r5, #4]
 801087a:	69a3      	ldr	r3, [r4, #24]
 801087c:	60a3      	str	r3, [r4, #8]
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	071a      	lsls	r2, r3, #28
 8010882:	d52f      	bpl.n	80108e4 <__swbuf_r+0x84>
 8010884:	6923      	ldr	r3, [r4, #16]
 8010886:	b36b      	cbz	r3, 80108e4 <__swbuf_r+0x84>
 8010888:	6923      	ldr	r3, [r4, #16]
 801088a:	6820      	ldr	r0, [r4, #0]
 801088c:	1ac0      	subs	r0, r0, r3
 801088e:	6963      	ldr	r3, [r4, #20]
 8010890:	b2f6      	uxtb	r6, r6
 8010892:	4283      	cmp	r3, r0
 8010894:	4637      	mov	r7, r6
 8010896:	dc04      	bgt.n	80108a2 <__swbuf_r+0x42>
 8010898:	4621      	mov	r1, r4
 801089a:	4628      	mov	r0, r5
 801089c:	f000 f950 	bl	8010b40 <_fflush_r>
 80108a0:	bb30      	cbnz	r0, 80108f0 <__swbuf_r+0x90>
 80108a2:	68a3      	ldr	r3, [r4, #8]
 80108a4:	3b01      	subs	r3, #1
 80108a6:	60a3      	str	r3, [r4, #8]
 80108a8:	6823      	ldr	r3, [r4, #0]
 80108aa:	1c5a      	adds	r2, r3, #1
 80108ac:	6022      	str	r2, [r4, #0]
 80108ae:	701e      	strb	r6, [r3, #0]
 80108b0:	6963      	ldr	r3, [r4, #20]
 80108b2:	3001      	adds	r0, #1
 80108b4:	4283      	cmp	r3, r0
 80108b6:	d004      	beq.n	80108c2 <__swbuf_r+0x62>
 80108b8:	89a3      	ldrh	r3, [r4, #12]
 80108ba:	07db      	lsls	r3, r3, #31
 80108bc:	d506      	bpl.n	80108cc <__swbuf_r+0x6c>
 80108be:	2e0a      	cmp	r6, #10
 80108c0:	d104      	bne.n	80108cc <__swbuf_r+0x6c>
 80108c2:	4621      	mov	r1, r4
 80108c4:	4628      	mov	r0, r5
 80108c6:	f000 f93b 	bl	8010b40 <_fflush_r>
 80108ca:	b988      	cbnz	r0, 80108f0 <__swbuf_r+0x90>
 80108cc:	4638      	mov	r0, r7
 80108ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d0:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <__swbuf_r+0x9c>)
 80108d2:	429c      	cmp	r4, r3
 80108d4:	d101      	bne.n	80108da <__swbuf_r+0x7a>
 80108d6:	68ac      	ldr	r4, [r5, #8]
 80108d8:	e7cf      	b.n	801087a <__swbuf_r+0x1a>
 80108da:	4b09      	ldr	r3, [pc, #36]	; (8010900 <__swbuf_r+0xa0>)
 80108dc:	429c      	cmp	r4, r3
 80108de:	bf08      	it	eq
 80108e0:	68ec      	ldreq	r4, [r5, #12]
 80108e2:	e7ca      	b.n	801087a <__swbuf_r+0x1a>
 80108e4:	4621      	mov	r1, r4
 80108e6:	4628      	mov	r0, r5
 80108e8:	f000 f81e 	bl	8010928 <__swsetup_r>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	d0cb      	beq.n	8010888 <__swbuf_r+0x28>
 80108f0:	f04f 37ff 	mov.w	r7, #4294967295
 80108f4:	e7ea      	b.n	80108cc <__swbuf_r+0x6c>
 80108f6:	bf00      	nop
 80108f8:	08013c88 	.word	0x08013c88
 80108fc:	08013ca8 	.word	0x08013ca8
 8010900:	08013c68 	.word	0x08013c68

08010904 <_write_r>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	4d07      	ldr	r5, [pc, #28]	; (8010924 <_write_r+0x20>)
 8010908:	4604      	mov	r4, r0
 801090a:	4608      	mov	r0, r1
 801090c:	4611      	mov	r1, r2
 801090e:	2200      	movs	r2, #0
 8010910:	602a      	str	r2, [r5, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	f7f0 f84d 	bl	80009b2 <_write>
 8010918:	1c43      	adds	r3, r0, #1
 801091a:	d102      	bne.n	8010922 <_write_r+0x1e>
 801091c:	682b      	ldr	r3, [r5, #0]
 801091e:	b103      	cbz	r3, 8010922 <_write_r+0x1e>
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	bd38      	pop	{r3, r4, r5, pc}
 8010924:	2400bc84 	.word	0x2400bc84

08010928 <__swsetup_r>:
 8010928:	4b32      	ldr	r3, [pc, #200]	; (80109f4 <__swsetup_r+0xcc>)
 801092a:	b570      	push	{r4, r5, r6, lr}
 801092c:	681d      	ldr	r5, [r3, #0]
 801092e:	4606      	mov	r6, r0
 8010930:	460c      	mov	r4, r1
 8010932:	b125      	cbz	r5, 801093e <__swsetup_r+0x16>
 8010934:	69ab      	ldr	r3, [r5, #24]
 8010936:	b913      	cbnz	r3, 801093e <__swsetup_r+0x16>
 8010938:	4628      	mov	r0, r5
 801093a:	f7ff fab5 	bl	800fea8 <__sinit>
 801093e:	4b2e      	ldr	r3, [pc, #184]	; (80109f8 <__swsetup_r+0xd0>)
 8010940:	429c      	cmp	r4, r3
 8010942:	d10f      	bne.n	8010964 <__swsetup_r+0x3c>
 8010944:	686c      	ldr	r4, [r5, #4]
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801094c:	0719      	lsls	r1, r3, #28
 801094e:	d42c      	bmi.n	80109aa <__swsetup_r+0x82>
 8010950:	06dd      	lsls	r5, r3, #27
 8010952:	d411      	bmi.n	8010978 <__swsetup_r+0x50>
 8010954:	2309      	movs	r3, #9
 8010956:	6033      	str	r3, [r6, #0]
 8010958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801095c:	81a3      	strh	r3, [r4, #12]
 801095e:	f04f 30ff 	mov.w	r0, #4294967295
 8010962:	e03e      	b.n	80109e2 <__swsetup_r+0xba>
 8010964:	4b25      	ldr	r3, [pc, #148]	; (80109fc <__swsetup_r+0xd4>)
 8010966:	429c      	cmp	r4, r3
 8010968:	d101      	bne.n	801096e <__swsetup_r+0x46>
 801096a:	68ac      	ldr	r4, [r5, #8]
 801096c:	e7eb      	b.n	8010946 <__swsetup_r+0x1e>
 801096e:	4b24      	ldr	r3, [pc, #144]	; (8010a00 <__swsetup_r+0xd8>)
 8010970:	429c      	cmp	r4, r3
 8010972:	bf08      	it	eq
 8010974:	68ec      	ldreq	r4, [r5, #12]
 8010976:	e7e6      	b.n	8010946 <__swsetup_r+0x1e>
 8010978:	0758      	lsls	r0, r3, #29
 801097a:	d512      	bpl.n	80109a2 <__swsetup_r+0x7a>
 801097c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801097e:	b141      	cbz	r1, 8010992 <__swsetup_r+0x6a>
 8010980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010984:	4299      	cmp	r1, r3
 8010986:	d002      	beq.n	801098e <__swsetup_r+0x66>
 8010988:	4630      	mov	r0, r6
 801098a:	f7ff fb47 	bl	801001c <_free_r>
 801098e:	2300      	movs	r3, #0
 8010990:	6363      	str	r3, [r4, #52]	; 0x34
 8010992:	89a3      	ldrh	r3, [r4, #12]
 8010994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010998:	81a3      	strh	r3, [r4, #12]
 801099a:	2300      	movs	r3, #0
 801099c:	6063      	str	r3, [r4, #4]
 801099e:	6923      	ldr	r3, [r4, #16]
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	89a3      	ldrh	r3, [r4, #12]
 80109a4:	f043 0308 	orr.w	r3, r3, #8
 80109a8:	81a3      	strh	r3, [r4, #12]
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	b94b      	cbnz	r3, 80109c2 <__swsetup_r+0x9a>
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109b8:	d003      	beq.n	80109c2 <__swsetup_r+0x9a>
 80109ba:	4621      	mov	r1, r4
 80109bc:	4630      	mov	r0, r6
 80109be:	f000 f933 	bl	8010c28 <__smakebuf_r>
 80109c2:	89a0      	ldrh	r0, [r4, #12]
 80109c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109c8:	f010 0301 	ands.w	r3, r0, #1
 80109cc:	d00a      	beq.n	80109e4 <__swsetup_r+0xbc>
 80109ce:	2300      	movs	r3, #0
 80109d0:	60a3      	str	r3, [r4, #8]
 80109d2:	6963      	ldr	r3, [r4, #20]
 80109d4:	425b      	negs	r3, r3
 80109d6:	61a3      	str	r3, [r4, #24]
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	b943      	cbnz	r3, 80109ee <__swsetup_r+0xc6>
 80109dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109e0:	d1ba      	bne.n	8010958 <__swsetup_r+0x30>
 80109e2:	bd70      	pop	{r4, r5, r6, pc}
 80109e4:	0781      	lsls	r1, r0, #30
 80109e6:	bf58      	it	pl
 80109e8:	6963      	ldrpl	r3, [r4, #20]
 80109ea:	60a3      	str	r3, [r4, #8]
 80109ec:	e7f4      	b.n	80109d8 <__swsetup_r+0xb0>
 80109ee:	2000      	movs	r0, #0
 80109f0:	e7f7      	b.n	80109e2 <__swsetup_r+0xba>
 80109f2:	bf00      	nop
 80109f4:	24000034 	.word	0x24000034
 80109f8:	08013c88 	.word	0x08013c88
 80109fc:	08013ca8 	.word	0x08013ca8
 8010a00:	08013c68 	.word	0x08013c68

08010a04 <abort>:
 8010a04:	b508      	push	{r3, lr}
 8010a06:	2006      	movs	r0, #6
 8010a08:	f000 f994 	bl	8010d34 <raise>
 8010a0c:	2001      	movs	r0, #1
 8010a0e:	f7ef ffa9 	bl	8000964 <_exit>
	...

08010a14 <_close_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d06      	ldr	r5, [pc, #24]	; (8010a30 <_close_r+0x1c>)
 8010a18:	2300      	movs	r3, #0
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	602b      	str	r3, [r5, #0]
 8010a20:	f7ef ffe3 	bl	80009ea <_close>
 8010a24:	1c43      	adds	r3, r0, #1
 8010a26:	d102      	bne.n	8010a2e <_close_r+0x1a>
 8010a28:	682b      	ldr	r3, [r5, #0]
 8010a2a:	b103      	cbz	r3, 8010a2e <_close_r+0x1a>
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	2400bc84 	.word	0x2400bc84

08010a34 <__sflush_r>:
 8010a34:	898a      	ldrh	r2, [r1, #12]
 8010a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	0710      	lsls	r0, r2, #28
 8010a3e:	460c      	mov	r4, r1
 8010a40:	d458      	bmi.n	8010af4 <__sflush_r+0xc0>
 8010a42:	684b      	ldr	r3, [r1, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	dc05      	bgt.n	8010a54 <__sflush_r+0x20>
 8010a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	dc02      	bgt.n	8010a54 <__sflush_r+0x20>
 8010a4e:	2000      	movs	r0, #0
 8010a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a56:	2e00      	cmp	r6, #0
 8010a58:	d0f9      	beq.n	8010a4e <__sflush_r+0x1a>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a60:	682f      	ldr	r7, [r5, #0]
 8010a62:	602b      	str	r3, [r5, #0]
 8010a64:	d032      	beq.n	8010acc <__sflush_r+0x98>
 8010a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	075a      	lsls	r2, r3, #29
 8010a6c:	d505      	bpl.n	8010a7a <__sflush_r+0x46>
 8010a6e:	6863      	ldr	r3, [r4, #4]
 8010a70:	1ac0      	subs	r0, r0, r3
 8010a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a74:	b10b      	cbz	r3, 8010a7a <__sflush_r+0x46>
 8010a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a78:	1ac0      	subs	r0, r0, r3
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a80:	6a21      	ldr	r1, [r4, #32]
 8010a82:	4628      	mov	r0, r5
 8010a84:	47b0      	blx	r6
 8010a86:	1c43      	adds	r3, r0, #1
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	d106      	bne.n	8010a9a <__sflush_r+0x66>
 8010a8c:	6829      	ldr	r1, [r5, #0]
 8010a8e:	291d      	cmp	r1, #29
 8010a90:	d82c      	bhi.n	8010aec <__sflush_r+0xb8>
 8010a92:	4a2a      	ldr	r2, [pc, #168]	; (8010b3c <__sflush_r+0x108>)
 8010a94:	40ca      	lsrs	r2, r1
 8010a96:	07d6      	lsls	r6, r2, #31
 8010a98:	d528      	bpl.n	8010aec <__sflush_r+0xb8>
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	6062      	str	r2, [r4, #4]
 8010a9e:	04d9      	lsls	r1, r3, #19
 8010aa0:	6922      	ldr	r2, [r4, #16]
 8010aa2:	6022      	str	r2, [r4, #0]
 8010aa4:	d504      	bpl.n	8010ab0 <__sflush_r+0x7c>
 8010aa6:	1c42      	adds	r2, r0, #1
 8010aa8:	d101      	bne.n	8010aae <__sflush_r+0x7a>
 8010aaa:	682b      	ldr	r3, [r5, #0]
 8010aac:	b903      	cbnz	r3, 8010ab0 <__sflush_r+0x7c>
 8010aae:	6560      	str	r0, [r4, #84]	; 0x54
 8010ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ab2:	602f      	str	r7, [r5, #0]
 8010ab4:	2900      	cmp	r1, #0
 8010ab6:	d0ca      	beq.n	8010a4e <__sflush_r+0x1a>
 8010ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010abc:	4299      	cmp	r1, r3
 8010abe:	d002      	beq.n	8010ac6 <__sflush_r+0x92>
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	f7ff faab 	bl	801001c <_free_r>
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8010aca:	e7c1      	b.n	8010a50 <__sflush_r+0x1c>
 8010acc:	6a21      	ldr	r1, [r4, #32]
 8010ace:	2301      	movs	r3, #1
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	47b0      	blx	r6
 8010ad4:	1c41      	adds	r1, r0, #1
 8010ad6:	d1c7      	bne.n	8010a68 <__sflush_r+0x34>
 8010ad8:	682b      	ldr	r3, [r5, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d0c4      	beq.n	8010a68 <__sflush_r+0x34>
 8010ade:	2b1d      	cmp	r3, #29
 8010ae0:	d001      	beq.n	8010ae6 <__sflush_r+0xb2>
 8010ae2:	2b16      	cmp	r3, #22
 8010ae4:	d101      	bne.n	8010aea <__sflush_r+0xb6>
 8010ae6:	602f      	str	r7, [r5, #0]
 8010ae8:	e7b1      	b.n	8010a4e <__sflush_r+0x1a>
 8010aea:	89a3      	ldrh	r3, [r4, #12]
 8010aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010af0:	81a3      	strh	r3, [r4, #12]
 8010af2:	e7ad      	b.n	8010a50 <__sflush_r+0x1c>
 8010af4:	690f      	ldr	r7, [r1, #16]
 8010af6:	2f00      	cmp	r7, #0
 8010af8:	d0a9      	beq.n	8010a4e <__sflush_r+0x1a>
 8010afa:	0793      	lsls	r3, r2, #30
 8010afc:	680e      	ldr	r6, [r1, #0]
 8010afe:	bf08      	it	eq
 8010b00:	694b      	ldreq	r3, [r1, #20]
 8010b02:	600f      	str	r7, [r1, #0]
 8010b04:	bf18      	it	ne
 8010b06:	2300      	movne	r3, #0
 8010b08:	eba6 0807 	sub.w	r8, r6, r7
 8010b0c:	608b      	str	r3, [r1, #8]
 8010b0e:	f1b8 0f00 	cmp.w	r8, #0
 8010b12:	dd9c      	ble.n	8010a4e <__sflush_r+0x1a>
 8010b14:	6a21      	ldr	r1, [r4, #32]
 8010b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b18:	4643      	mov	r3, r8
 8010b1a:	463a      	mov	r2, r7
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	47b0      	blx	r6
 8010b20:	2800      	cmp	r0, #0
 8010b22:	dc06      	bgt.n	8010b32 <__sflush_r+0xfe>
 8010b24:	89a3      	ldrh	r3, [r4, #12]
 8010b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b2a:	81a3      	strh	r3, [r4, #12]
 8010b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b30:	e78e      	b.n	8010a50 <__sflush_r+0x1c>
 8010b32:	4407      	add	r7, r0
 8010b34:	eba8 0800 	sub.w	r8, r8, r0
 8010b38:	e7e9      	b.n	8010b0e <__sflush_r+0xda>
 8010b3a:	bf00      	nop
 8010b3c:	20400001 	.word	0x20400001

08010b40 <_fflush_r>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	690b      	ldr	r3, [r1, #16]
 8010b44:	4605      	mov	r5, r0
 8010b46:	460c      	mov	r4, r1
 8010b48:	b913      	cbnz	r3, 8010b50 <_fflush_r+0x10>
 8010b4a:	2500      	movs	r5, #0
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	bd38      	pop	{r3, r4, r5, pc}
 8010b50:	b118      	cbz	r0, 8010b5a <_fflush_r+0x1a>
 8010b52:	6983      	ldr	r3, [r0, #24]
 8010b54:	b90b      	cbnz	r3, 8010b5a <_fflush_r+0x1a>
 8010b56:	f7ff f9a7 	bl	800fea8 <__sinit>
 8010b5a:	4b14      	ldr	r3, [pc, #80]	; (8010bac <_fflush_r+0x6c>)
 8010b5c:	429c      	cmp	r4, r3
 8010b5e:	d11b      	bne.n	8010b98 <_fflush_r+0x58>
 8010b60:	686c      	ldr	r4, [r5, #4]
 8010b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d0ef      	beq.n	8010b4a <_fflush_r+0xa>
 8010b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b6c:	07d0      	lsls	r0, r2, #31
 8010b6e:	d404      	bmi.n	8010b7a <_fflush_r+0x3a>
 8010b70:	0599      	lsls	r1, r3, #22
 8010b72:	d402      	bmi.n	8010b7a <_fflush_r+0x3a>
 8010b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b76:	f7ff fa47 	bl	8010008 <__retarget_lock_acquire_recursive>
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	4621      	mov	r1, r4
 8010b7e:	f7ff ff59 	bl	8010a34 <__sflush_r>
 8010b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b84:	07da      	lsls	r2, r3, #31
 8010b86:	4605      	mov	r5, r0
 8010b88:	d4e0      	bmi.n	8010b4c <_fflush_r+0xc>
 8010b8a:	89a3      	ldrh	r3, [r4, #12]
 8010b8c:	059b      	lsls	r3, r3, #22
 8010b8e:	d4dd      	bmi.n	8010b4c <_fflush_r+0xc>
 8010b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b92:	f7ff fa3a 	bl	801000a <__retarget_lock_release_recursive>
 8010b96:	e7d9      	b.n	8010b4c <_fflush_r+0xc>
 8010b98:	4b05      	ldr	r3, [pc, #20]	; (8010bb0 <_fflush_r+0x70>)
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	d101      	bne.n	8010ba2 <_fflush_r+0x62>
 8010b9e:	68ac      	ldr	r4, [r5, #8]
 8010ba0:	e7df      	b.n	8010b62 <_fflush_r+0x22>
 8010ba2:	4b04      	ldr	r3, [pc, #16]	; (8010bb4 <_fflush_r+0x74>)
 8010ba4:	429c      	cmp	r4, r3
 8010ba6:	bf08      	it	eq
 8010ba8:	68ec      	ldreq	r4, [r5, #12]
 8010baa:	e7da      	b.n	8010b62 <_fflush_r+0x22>
 8010bac:	08013c88 	.word	0x08013c88
 8010bb0:	08013ca8 	.word	0x08013ca8
 8010bb4:	08013c68 	.word	0x08013c68

08010bb8 <_lseek_r>:
 8010bb8:	b538      	push	{r3, r4, r5, lr}
 8010bba:	4d07      	ldr	r5, [pc, #28]	; (8010bd8 <_lseek_r+0x20>)
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	4608      	mov	r0, r1
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	602a      	str	r2, [r5, #0]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	f7ef ff36 	bl	8000a38 <_lseek>
 8010bcc:	1c43      	adds	r3, r0, #1
 8010bce:	d102      	bne.n	8010bd6 <_lseek_r+0x1e>
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	b103      	cbz	r3, 8010bd6 <_lseek_r+0x1e>
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	bd38      	pop	{r3, r4, r5, pc}
 8010bd8:	2400bc84 	.word	0x2400bc84

08010bdc <__swhatbuf_r>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	460e      	mov	r6, r1
 8010be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010be4:	2900      	cmp	r1, #0
 8010be6:	b096      	sub	sp, #88	; 0x58
 8010be8:	4614      	mov	r4, r2
 8010bea:	461d      	mov	r5, r3
 8010bec:	da08      	bge.n	8010c00 <__swhatbuf_r+0x24>
 8010bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	602a      	str	r2, [r5, #0]
 8010bf6:	061a      	lsls	r2, r3, #24
 8010bf8:	d410      	bmi.n	8010c1c <__swhatbuf_r+0x40>
 8010bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfe:	e00e      	b.n	8010c1e <__swhatbuf_r+0x42>
 8010c00:	466a      	mov	r2, sp
 8010c02:	f000 f8b3 	bl	8010d6c <_fstat_r>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	dbf1      	blt.n	8010bee <__swhatbuf_r+0x12>
 8010c0a:	9a01      	ldr	r2, [sp, #4]
 8010c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c14:	425a      	negs	r2, r3
 8010c16:	415a      	adcs	r2, r3
 8010c18:	602a      	str	r2, [r5, #0]
 8010c1a:	e7ee      	b.n	8010bfa <__swhatbuf_r+0x1e>
 8010c1c:	2340      	movs	r3, #64	; 0x40
 8010c1e:	2000      	movs	r0, #0
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	b016      	add	sp, #88	; 0x58
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c28 <__smakebuf_r>:
 8010c28:	898b      	ldrh	r3, [r1, #12]
 8010c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c2c:	079d      	lsls	r5, r3, #30
 8010c2e:	4606      	mov	r6, r0
 8010c30:	460c      	mov	r4, r1
 8010c32:	d507      	bpl.n	8010c44 <__smakebuf_r+0x1c>
 8010c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	6123      	str	r3, [r4, #16]
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	6163      	str	r3, [r4, #20]
 8010c40:	b002      	add	sp, #8
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	ab01      	add	r3, sp, #4
 8010c46:	466a      	mov	r2, sp
 8010c48:	f7ff ffc8 	bl	8010bdc <__swhatbuf_r>
 8010c4c:	9900      	ldr	r1, [sp, #0]
 8010c4e:	4605      	mov	r5, r0
 8010c50:	4630      	mov	r0, r6
 8010c52:	f7ff fa4f 	bl	80100f4 <_malloc_r>
 8010c56:	b948      	cbnz	r0, 8010c6c <__smakebuf_r+0x44>
 8010c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5c:	059a      	lsls	r2, r3, #22
 8010c5e:	d4ef      	bmi.n	8010c40 <__smakebuf_r+0x18>
 8010c60:	f023 0303 	bic.w	r3, r3, #3
 8010c64:	f043 0302 	orr.w	r3, r3, #2
 8010c68:	81a3      	strh	r3, [r4, #12]
 8010c6a:	e7e3      	b.n	8010c34 <__smakebuf_r+0xc>
 8010c6c:	4b0d      	ldr	r3, [pc, #52]	; (8010ca4 <__smakebuf_r+0x7c>)
 8010c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	6020      	str	r0, [r4, #0]
 8010c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c78:	81a3      	strh	r3, [r4, #12]
 8010c7a:	9b00      	ldr	r3, [sp, #0]
 8010c7c:	6163      	str	r3, [r4, #20]
 8010c7e:	9b01      	ldr	r3, [sp, #4]
 8010c80:	6120      	str	r0, [r4, #16]
 8010c82:	b15b      	cbz	r3, 8010c9c <__smakebuf_r+0x74>
 8010c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f000 f881 	bl	8010d90 <_isatty_r>
 8010c8e:	b128      	cbz	r0, 8010c9c <__smakebuf_r+0x74>
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	f023 0303 	bic.w	r3, r3, #3
 8010c96:	f043 0301 	orr.w	r3, r3, #1
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	89a0      	ldrh	r0, [r4, #12]
 8010c9e:	4305      	orrs	r5, r0
 8010ca0:	81a5      	strh	r5, [r4, #12]
 8010ca2:	e7cd      	b.n	8010c40 <__smakebuf_r+0x18>
 8010ca4:	0800fe41 	.word	0x0800fe41

08010ca8 <__malloc_lock>:
 8010ca8:	4801      	ldr	r0, [pc, #4]	; (8010cb0 <__malloc_lock+0x8>)
 8010caa:	f7ff b9ad 	b.w	8010008 <__retarget_lock_acquire_recursive>
 8010cae:	bf00      	nop
 8010cb0:	2400bc88 	.word	0x2400bc88

08010cb4 <__malloc_unlock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	; (8010cbc <__malloc_unlock+0x8>)
 8010cb6:	f7ff b9a8 	b.w	801000a <__retarget_lock_release_recursive>
 8010cba:	bf00      	nop
 8010cbc:	2400bc88 	.word	0x2400bc88

08010cc0 <_read_r>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	4d07      	ldr	r5, [pc, #28]	; (8010ce0 <_read_r+0x20>)
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	4608      	mov	r0, r1
 8010cc8:	4611      	mov	r1, r2
 8010cca:	2200      	movs	r2, #0
 8010ccc:	602a      	str	r2, [r5, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	f7ef fe52 	bl	8000978 <_read>
 8010cd4:	1c43      	adds	r3, r0, #1
 8010cd6:	d102      	bne.n	8010cde <_read_r+0x1e>
 8010cd8:	682b      	ldr	r3, [r5, #0]
 8010cda:	b103      	cbz	r3, 8010cde <_read_r+0x1e>
 8010cdc:	6023      	str	r3, [r4, #0]
 8010cde:	bd38      	pop	{r3, r4, r5, pc}
 8010ce0:	2400bc84 	.word	0x2400bc84

08010ce4 <_raise_r>:
 8010ce4:	291f      	cmp	r1, #31
 8010ce6:	b538      	push	{r3, r4, r5, lr}
 8010ce8:	4604      	mov	r4, r0
 8010cea:	460d      	mov	r5, r1
 8010cec:	d904      	bls.n	8010cf8 <_raise_r+0x14>
 8010cee:	2316      	movs	r3, #22
 8010cf0:	6003      	str	r3, [r0, #0]
 8010cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf6:	bd38      	pop	{r3, r4, r5, pc}
 8010cf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cfa:	b112      	cbz	r2, 8010d02 <_raise_r+0x1e>
 8010cfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d00:	b94b      	cbnz	r3, 8010d16 <_raise_r+0x32>
 8010d02:	4620      	mov	r0, r4
 8010d04:	f000 f830 	bl	8010d68 <_getpid_r>
 8010d08:	462a      	mov	r2, r5
 8010d0a:	4601      	mov	r1, r0
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d12:	f000 b817 	b.w	8010d44 <_kill_r>
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d00a      	beq.n	8010d30 <_raise_r+0x4c>
 8010d1a:	1c59      	adds	r1, r3, #1
 8010d1c:	d103      	bne.n	8010d26 <_raise_r+0x42>
 8010d1e:	2316      	movs	r3, #22
 8010d20:	6003      	str	r3, [r0, #0]
 8010d22:	2001      	movs	r0, #1
 8010d24:	e7e7      	b.n	8010cf6 <_raise_r+0x12>
 8010d26:	2400      	movs	r4, #0
 8010d28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	4798      	blx	r3
 8010d30:	2000      	movs	r0, #0
 8010d32:	e7e0      	b.n	8010cf6 <_raise_r+0x12>

08010d34 <raise>:
 8010d34:	4b02      	ldr	r3, [pc, #8]	; (8010d40 <raise+0xc>)
 8010d36:	4601      	mov	r1, r0
 8010d38:	6818      	ldr	r0, [r3, #0]
 8010d3a:	f7ff bfd3 	b.w	8010ce4 <_raise_r>
 8010d3e:	bf00      	nop
 8010d40:	24000034 	.word	0x24000034

08010d44 <_kill_r>:
 8010d44:	b538      	push	{r3, r4, r5, lr}
 8010d46:	4d07      	ldr	r5, [pc, #28]	; (8010d64 <_kill_r+0x20>)
 8010d48:	2300      	movs	r3, #0
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	4608      	mov	r0, r1
 8010d4e:	4611      	mov	r1, r2
 8010d50:	602b      	str	r3, [r5, #0]
 8010d52:	f7ef fdf5 	bl	8000940 <_kill>
 8010d56:	1c43      	adds	r3, r0, #1
 8010d58:	d102      	bne.n	8010d60 <_kill_r+0x1c>
 8010d5a:	682b      	ldr	r3, [r5, #0]
 8010d5c:	b103      	cbz	r3, 8010d60 <_kill_r+0x1c>
 8010d5e:	6023      	str	r3, [r4, #0]
 8010d60:	bd38      	pop	{r3, r4, r5, pc}
 8010d62:	bf00      	nop
 8010d64:	2400bc84 	.word	0x2400bc84

08010d68 <_getpid_r>:
 8010d68:	f7ef bde1 	b.w	800092e <_getpid>

08010d6c <_fstat_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4d07      	ldr	r5, [pc, #28]	; (8010d8c <_fstat_r+0x20>)
 8010d70:	2300      	movs	r3, #0
 8010d72:	4604      	mov	r4, r0
 8010d74:	4608      	mov	r0, r1
 8010d76:	4611      	mov	r1, r2
 8010d78:	602b      	str	r3, [r5, #0]
 8010d7a:	f7ef fe42 	bl	8000a02 <_fstat>
 8010d7e:	1c43      	adds	r3, r0, #1
 8010d80:	d102      	bne.n	8010d88 <_fstat_r+0x1c>
 8010d82:	682b      	ldr	r3, [r5, #0]
 8010d84:	b103      	cbz	r3, 8010d88 <_fstat_r+0x1c>
 8010d86:	6023      	str	r3, [r4, #0]
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	bf00      	nop
 8010d8c:	2400bc84 	.word	0x2400bc84

08010d90 <_isatty_r>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4d06      	ldr	r5, [pc, #24]	; (8010dac <_isatty_r+0x1c>)
 8010d94:	2300      	movs	r3, #0
 8010d96:	4604      	mov	r4, r0
 8010d98:	4608      	mov	r0, r1
 8010d9a:	602b      	str	r3, [r5, #0]
 8010d9c:	f7ef fe41 	bl	8000a22 <_isatty>
 8010da0:	1c43      	adds	r3, r0, #1
 8010da2:	d102      	bne.n	8010daa <_isatty_r+0x1a>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	b103      	cbz	r3, 8010daa <_isatty_r+0x1a>
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	2400bc84 	.word	0x2400bc84

08010db0 <_init>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	bf00      	nop
 8010db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db6:	bc08      	pop	{r3}
 8010db8:	469e      	mov	lr, r3
 8010dba:	4770      	bx	lr

08010dbc <_fini>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	bf00      	nop
 8010dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc2:	bc08      	pop	{r3}
 8010dc4:	469e      	mov	lr, r3
 8010dc6:	4770      	bx	lr
