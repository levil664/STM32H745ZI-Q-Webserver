
STM32H745_Nucleo_M7_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b0  08016684  08016684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f34  08019f34  0001b090  2**0
                  CONTENTS
  4 .ARM          00000008  08019f34  08019f34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f3c  08019f3c  0001b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f3c  08019f3c  0001af3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f40  08019f40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  08019f44  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010770  24000090  08019fd4  0001b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24010800  08019fd4  0001b800  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  0001c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000333f5  00000000  00000000  0001b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a13  00000000  00000000  0004e4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  00055ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ced  00000000  00000000  000583a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004a55b  00000000  00000000  0005a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039ba5  00000000  00000000  000a45e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a4ad0  00000000  00000000  000de18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00282c5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a07c  00000000  00000000  00282ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0028cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801666c 	.word	0x0801666c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0801666c 	.word	0x0801666c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	@ (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	@ (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	@ (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	@ (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	@ (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	@ (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	@ (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	@ (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	@ (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	@ (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	@ (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	@ (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	@ (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	@ (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80004b6:	be00      	bkpt	0x0000
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <lwiperf_list_add+0x24>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 80004d4:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <lwiperf_list_add+0x24>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	240000ac 	.word	0x240000ac

080004ec <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80004f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <lwiperf_list_remove+0x78>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	e029      	b.n	8000554 <lwiperf_list_remove+0x68>
    if (iter == item) {
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	d120      	bne.n	800054a <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <lwiperf_list_remove+0x78>)
 8000514:	6013      	str	r3, [r2, #0]
 8000516:	e003      	b.n	8000520 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	e00c      	b.n	8000542 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	d105      	bne.n	800053c <lwiperf_list_remove+0x50>
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <lwiperf_list_remove+0x7c>)
 8000532:	22d0      	movs	r2, #208	@ 0xd0
 8000534:	490d      	ldr	r1, [pc, #52]	@ (800056c <lwiperf_list_remove+0x80>)
 8000536:	480e      	ldr	r0, [pc, #56]	@ (8000570 <lwiperf_list_remove+0x84>)
 8000538:	f015 f938 	bl	80157ac <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1ef      	bne.n	8000528 <lwiperf_list_remove+0x3c>
      }
      break;
 8000548:	e008      	b.n	800055c <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d1d2      	bne.n	8000500 <lwiperf_list_remove+0x14>
    }
  }
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000ac 	.word	0x240000ac
 8000568:	08016684 	.word	0x08016684
 800056c:	0801669c 	.word	0x0801669c
 8000570:	080166ac 	.word	0x080166ac

08000574 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800057c:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <lwiperf_list_find+0x38>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e008      	b.n	8000596 <lwiperf_list_find+0x22>
    if (iter == item) {
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d101      	bne.n	8000590 <lwiperf_list_find+0x1c>
      return item;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	e006      	b.n	800059e <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f3      	bne.n	8000584 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	240000ac 	.word	0x240000ac

080005b0 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b08d      	sub	sp, #52	@ 0x34
 80005b4:	af06      	add	r7, sp, #24
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d038      	beq.n	8000634 <lwip_tcp_conn_report+0x84>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d034      	beq.n	8000634 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 80005ca:	f005 fc65 	bl	8005e98 <sys_now>
 80005ce:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	693a      	ldr	r2, [r7, #16]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e006      	b.n	80005f4 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	699c      	ldr	r4, [r3, #24]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	469e      	mov	lr, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000606:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	3304      	adds	r3, #4
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000614:	8b12      	ldrh	r2, [r2, #24]
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800061a:	78fe      	ldrb	r6, [r7, #3]
 800061c:	6978      	ldr	r0, [r7, #20]
 800061e:	9004      	str	r0, [sp, #16]
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	9003      	str	r0, [sp, #12]
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4663      	mov	r3, ip
 800062c:	4672      	mov	r2, lr
 800062e:	4631      	mov	r1, r6
 8000630:	4628      	mov	r0, r5
 8000632:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8000634:	bf00      	nop
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800063c <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff4e 	bl	80004ec <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffab 	bl	80005b0 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d02f      	beq.n	80006c2 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00f fe17 	bl	801029c <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00f fea6 	bl	80103c8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f00f fe40 	bl	8010308 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00f fe16 	bl	80102c0 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fe58 	bl	8010350 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00e fb41 	bl	800ed2c <tcp_close>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d017      	beq.n	80006e6 <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00e fc24 	bl	800ef08 <tcp_abort>
 80006c0:	e011      	b.n	80006e6 <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00e fb30 	bl	800ed2c <tcp_close>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 80006d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <lwiperf_tcp_close+0xaa>
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <lwiperf_tcp_close+0xb8>)
 80006da:	f240 120d 	movw	r2, #269	@ 0x10d
 80006de:	4906      	ldr	r1, [pc, #24]	@ (80006f8 <lwiperf_tcp_close+0xbc>)
 80006e0:	4806      	ldr	r0, [pc, #24]	@ (80006fc <lwiperf_tcp_close+0xc0>)
 80006e2:	f015 f863 	bl	80157ac <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f00c fa78 	bl	800cbdc <mem_free>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08016684 	.word	0x08016684
 80006f8:	080166d4 	.word	0x080166d4
 80006fc:	080166ac 	.word	0x080166ac

08000700 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	@ 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d007      	beq.n	800071e <lwiperf_tcp_client_send_more+0x1e>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <lwiperf_tcp_client_send_more+0x1e>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <lwiperf_tcp_client_send_more+0x2c>
 800071e:	4b61      	ldr	r3, [pc, #388]	@ (80008a4 <lwiperf_tcp_client_send_more+0x1a4>)
 8000720:	f240 121d 	movw	r2, #285	@ 0x11d
 8000724:	4960      	ldr	r1, [pc, #384]	@ (80008a8 <lwiperf_tcp_client_send_more+0x1a8>)
 8000726:	4861      	ldr	r0, [pc, #388]	@ (80008ac <lwiperf_tcp_client_send_more+0x1ac>)
 8000728:	f015 f840 	bl	80157ac <iprintf>

  do {
    send_more = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01f      	beq.n	800077c <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 800073c:	f005 fbac 	bl	8005e98 <sys_now>
 8000740:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000750:	4618      	mov	r0, r3
 8000752:	f009 fd10 	bl	800a176 <lwip_htonl>
 8000756:	4603      	mov	r3, r0
 8000758:	425b      	negs	r3, r3
 800075a:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d316      	bcc.n	800079e <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000770:	2101      	movs	r1, #1
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff62 	bl	800063c <lwiperf_tcp_close>
        return ERR_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	e08f      	b.n	800089c <lwiperf_tcp_client_send_more+0x19c>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000780:	4618      	mov	r0, r3
 8000782:	f009 fcf8 	bl	800a176 <lwip_htonl>
 8000786:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078c:	69fa      	ldr	r2, [r7, #28]
 800078e:	429a      	cmp	r2, r3
 8000790:	d305      	bcc.n	800079e <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000792:	2101      	movs	r1, #1
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff51 	bl	800063c <lwiperf_tcp_close>
        return ERR_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e07e      	b.n	800089c <lwiperf_tcp_client_send_more+0x19c>
      }
    }

    if (conn->bytes_transferred < 24) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a2:	2b17      	cmp	r3, #23
 80007a4:	d810      	bhi.n	80007c8 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b0:	4413      	add	r3, r2
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f1c3 0318 	rsb	r3, r3, #24
 80007be:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80007c6:	e034      	b.n	8000832 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80007ce:	d813      	bhi.n	80007f8 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007da:	3b18      	subs	r3, #24
 80007dc:	4413      	add	r3, r2
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 80007ea:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80007ec:	2303      	movs	r3, #3
 80007ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f6:	e01c      	b.n	8000832 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007fc:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <lwiperf_tcp_client_send_more+0x1b0>)
 80007fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000802:	08da      	lsrs	r2, r3, #3
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	1aca      	subs	r2, r1, r3
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <lwiperf_tcp_client_send_more+0x1b4>)
 8000810:	4413      	add	r3, r2
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = TCP_MSS;
 8000814:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000818:	853b      	strh	r3, [r7, #40]	@ 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081e:	2b30      	cmp	r3, #48	@ 0x30
 8000820:	d102      	bne.n	8000828 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8000822:	f240 539c 	movw	r3, #1436	@ 0x59c
 8000826:	853b      	strh	r3, [r7, #40]	@ 0x28
      }
      apiflags = 0; /* no copying needed */
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    txlen = txlen_max;
 8000832:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000834:	857b      	strh	r3, [r7, #42]	@ 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6918      	ldr	r0, [r3, #16]
 800083a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800083e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000842:	f012 fc73 	bl	801312c <tcp_write>
 8000846:	4603      	mov	r3, r0
 8000848:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 800084a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000852:	d102      	bne.n	800085a <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8000854:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000856:	085b      	lsrs	r3, r3, #1
 8000858:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800085a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000862:	d104      	bne.n	800086e <lwiperf_tcp_client_send_more+0x16e>
 8000864:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000866:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800086a:	4293      	cmp	r3, r2
 800086c:	d8e3      	bhi.n	8000836 <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 800086e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d106      	bne.n	8000884 <lwiperf_tcp_client_send_more+0x184>
      conn->bytes_transferred += txlen;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800087a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800087c:	441a      	add	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
 8000882:	e001      	b.n	8000888 <lwiperf_tcp_client_send_more+0x188>
    } else {
      send_more = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  } while (send_more);
 8000888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088a:	2b00      	cmp	r3, #0
 800088c:	f47f af4e 	bne.w	800072c <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	4618      	mov	r0, r3
 8000896:	f013 fa35 	bl	8013d04 <tcp_output>
  return ERR_OK;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3730      	adds	r7, #48	@ 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08016684 	.word	0x08016684
 80008a8:	080166dc 	.word	0x080166dc
 80008ac:	080166ac 	.word	0x080166ac
 80008b0:	cccccccd 	.word	0xcccccccd
 80008b4:	080196c0 	.word	0x080196c0

080008b8 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	4613      	mov	r3, r2
 80008c4:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d006      	beq.n	80008e2 <lwiperf_tcp_client_sent+0x2a>
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <lwiperf_tcp_client_sent+0x44>)
 80008d6:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 80008da:	4909      	ldr	r1, [pc, #36]	@ (8000900 <lwiperf_tcp_client_sent+0x48>)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <lwiperf_tcp_client_sent+0x4c>)
 80008de:	f014 ff65 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff08 	bl	8000700 <lwiperf_tcp_client_send_more>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	08016684 	.word	0x08016684
 8000900:	080166ec 	.word	0x080166ec
 8000904:	080166ac 	.word	0x080166ac

08000908 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	4613      	mov	r3, r2
 8000914:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	429a      	cmp	r2, r3
 8000922:	d006      	beq.n	8000932 <lwiperf_tcp_client_connected+0x2a>
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <lwiperf_tcp_client_connected+0x60>)
 8000926:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800092a:	4910      	ldr	r1, [pc, #64]	@ (800096c <lwiperf_tcp_client_connected+0x64>)
 800092c:	4810      	ldr	r0, [pc, #64]	@ (8000970 <lwiperf_tcp_client_connected+0x68>)
 800092e:	f014 ff3d 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800093a:	2105      	movs	r1, #5
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f7ff fe7d 	bl	800063c <lwiperf_tcp_close>
    return ERR_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e00c      	b.n	8000960 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 800094e:	f005 faa3 	bl	8005e98 <sys_now>
 8000952:	4602      	mov	r2, r0
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8000958:	6978      	ldr	r0, [r7, #20]
 800095a:	f7ff fed1 	bl	8000700 <lwiperf_tcp_client_send_more>
 800095e:	4603      	mov	r3, r0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	08016684 	.word	0x08016684
 800096c:	080166ec 	.word	0x080166ec
 8000970:	080166ac 	.word	0x080166ac

08000974 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	460b      	mov	r3, r1
 8000982:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d106      	bne.n	8000998 <lwiperf_tx_start_impl+0x24>
 800098a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <lwiperf_tx_start_impl+0x140>)
 800098c:	f240 128b 	movw	r2, #395	@ 0x18b
 8000990:	4949      	ldr	r1, [pc, #292]	@ (8000ab8 <lwiperf_tx_start_impl+0x144>)
 8000992:	484a      	ldr	r0, [pc, #296]	@ (8000abc <lwiperf_tx_start_impl+0x148>)
 8000994:	f014 ff0a 	bl	80157ac <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <lwiperf_tx_start_impl+0x38>
 800099e:	4b45      	ldr	r3, [pc, #276]	@ (8000ab4 <lwiperf_tx_start_impl+0x140>)
 80009a0:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80009a4:	4944      	ldr	r1, [pc, #272]	@ (8000ab8 <lwiperf_tx_start_impl+0x144>)
 80009a6:	4845      	ldr	r0, [pc, #276]	@ (8000abc <lwiperf_tx_start_impl+0x148>)
 80009a8:	f014 ff00 	bl	80157ac <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d106      	bne.n	80009c0 <lwiperf_tx_start_impl+0x4c>
 80009b2:	4b40      	ldr	r3, [pc, #256]	@ (8000ab4 <lwiperf_tx_start_impl+0x140>)
 80009b4:	f240 128d 	movw	r2, #397	@ 0x18d
 80009b8:	4941      	ldr	r1, [pc, #260]	@ (8000ac0 <lwiperf_tx_start_impl+0x14c>)
 80009ba:	4840      	ldr	r0, [pc, #256]	@ (8000abc <lwiperf_tx_start_impl+0x148>)
 80009bc:	f014 fef6 	bl	80157ac <iprintf>
  *new_conn = NULL;
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80009c6:	2048      	movs	r0, #72	@ 0x48
 80009c8:	f00c fa9a 	bl	800cf00 <mem_malloc>
 80009cc:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	e067      	b.n	8000aaa <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80009da:	2000      	movs	r0, #0
 80009dc:	f00f fc50 	bl	8010280 <tcp_new_ip_type>
 80009e0:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d105      	bne.n	80009f4 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80009e8:	69f8      	ldr	r0, [r7, #28]
 80009ea:	f00c f8f7 	bl	800cbdc <mem_free>
    return ERR_MEM;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e05a      	b.n	8000aaa <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80009f4:	2248      	movs	r2, #72	@ 0x48
 80009f6:	2100      	movs	r1, #0
 80009f8:	69f8      	ldr	r0, [r7, #28]
 80009fa:	f014 ff3c 	bl	8015876 <memset>
  client_conn->base.tcp = 1;
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a08:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000a10:	f005 fa42 	bl	8005e98 <sys_now>
 8000a14:	4602      	mov	r2, r0
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a24:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  client_conn->bytes_transferred = 0;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	3328      	adds	r3, #40	@ 0x28
 8000a38:	2218      	movs	r2, #24
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f014 ffe6 	bl	8015a0e <memcpy>
  client_conn->have_settings_buf = 1;
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  tcp_arg(newpcb, client_conn);
 8000a4a:	69f9      	ldr	r1, [r7, #28]
 8000a4c:	69b8      	ldr	r0, [r7, #24]
 8000a4e:	f00f fc25 	bl	801029c <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000a52:	491c      	ldr	r1, [pc, #112]	@ (8000ac4 <lwiperf_tx_start_impl+0x150>)
 8000a54:	69b8      	ldr	r0, [r7, #24]
 8000a56:	f00f fc57 	bl	8010308 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	491a      	ldr	r1, [pc, #104]	@ (8000ac8 <lwiperf_tx_start_impl+0x154>)
 8000a5e:	69b8      	ldr	r0, [r7, #24]
 8000a60:	f00f fcb2 	bl	80103c8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000a64:	4919      	ldr	r1, [pc, #100]	@ (8000acc <lwiperf_tx_start_impl+0x158>)
 8000a66:	69b8      	ldr	r0, [r7, #24]
 8000a68:	f00f fc72 	bl	8010350 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000a72:	897a      	ldrh	r2, [r7, #10]
 8000a74:	f107 0110 	add.w	r1, r7, #16
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <lwiperf_tx_start_impl+0x15c>)
 8000a7a:	69b8      	ldr	r0, [r7, #24]
 8000a7c:	f00e fcbe 	bl	800f3fc <tcp_connect>
 8000a80:	4603      	mov	r3, r0
 8000a82:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8000a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	69f8      	ldr	r0, [r7, #28]
 8000a90:	f7ff fdd4 	bl	800063c <lwiperf_tcp_close>
    return err;
 8000a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a98:	e007      	b.n	8000aaa <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd11 	bl	80004c4 <lwiperf_list_add>
  *new_conn = client_conn;
 8000aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08016684 	.word	0x08016684
 8000ab8:	080166fc 	.word	0x080166fc
 8000abc:	080166ac 	.word	0x080166ac
 8000ac0:	08016710 	.word	0x08016710
 8000ac4:	080008b9 	.word	0x080008b9
 8000ac8:	08000e19 	.word	0x08000e19
 8000acc:	08000df9 	.word	0x08000df9
 8000ad0:	08000909 	.word	0x08000909

08000ad4 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f009 fb46 	bl	800a176 <lwip_htonl>
 8000aea:	4603      	mov	r3, r0
 8000aec:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	1d18      	adds	r0, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	699e      	ldr	r6, [r3, #24]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6892      	ldr	r2, [r2, #8]
 8000b06:	89fc      	ldrh	r4, [r7, #14]
 8000b08:	f107 0108 	add.w	r1, r7, #8
 8000b0c:	9102      	str	r1, [sp, #8]
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	4633      	mov	r3, r6
 8000b14:	462a      	mov	r2, r5
 8000b16:	4621      	mov	r1, r4
 8000b18:	f7ff ff2c 	bl	8000974 <lwiperf_tx_start_impl>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8000b20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d106      	bne.n	8000b3c <lwiperf_tx_start_passive+0x68>
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <lwiperf_tx_start_passive+0x7c>)
 8000b30:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000b34:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <lwiperf_tx_start_passive+0x80>)
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <lwiperf_tx_start_passive+0x84>)
 8000b38:	f014 fe38 	bl	80157ac <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  return ret;
 8000b42:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08016684 	.word	0x08016684
 8000b54:	08016710 	.word	0x08016710
 8000b58:	080166ac 	.word	0x080166ac

08000b5c <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d006      	beq.n	8000b86 <lwiperf_tcp_recv+0x2a>
 8000b78:	4b9a      	ldr	r3, [pc, #616]	@ (8000de4 <lwiperf_tcp_recv+0x288>)
 8000b7a:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000b7e:	499a      	ldr	r1, [pc, #616]	@ (8000de8 <lwiperf_tcp_recv+0x28c>)
 8000b80:	489a      	ldr	r0, [pc, #616]	@ (8000dec <lwiperf_tcp_recv+0x290>)
 8000b82:	f014 fe13 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8000b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b8e:	2105      	movs	r1, #5
 8000b90:	6a38      	ldr	r0, [r7, #32]
 8000b92:	f7ff fd53 	bl	800063c <lwiperf_tcp_close>
    return ERR_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e11f      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
  }
  if (p == NULL) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d114      	bne.n	8000bca <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8000bb8:	6a38      	ldr	r0, [r7, #32]
 8000bba:	f7ff ff8b 	bl	8000ad4 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	6a38      	ldr	r0, [r7, #32]
 8000bc2:	f7ff fd3b 	bl	800063c <lwiperf_tcp_close>
    return ERR_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e107      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
  }
  tot_len = p->tot_len;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	891b      	ldrh	r3, [r3, #8]
 8000bce:	83fb      	strh	r3, [r7, #30]

  conn->poll_count = 0;
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <lwiperf_tcp_recv+0x96>
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	3b18      	subs	r3, #24
 8000be8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f040 8090 	bne.w	8000d12 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	891b      	ldrh	r3, [r3, #8]
 8000bf6:	2b17      	cmp	r3, #23
 8000bf8:	d808      	bhi.n	8000c0c <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	6a38      	ldr	r0, [r7, #32]
 8000bfe:	f7ff fd1d 	bl	800063c <lwiperf_tcp_close>
      pbuf_free(p);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f00d fa3e 	bl	800e084 <pbuf_free>
      return ERR_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e0e6      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
    }
    if (!conn->have_settings_buf) {
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d135      	bne.n	8000c82 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2218      	movs	r2, #24
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f00d fc25 	bl	800e470 <pbuf_copy_partial>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b18      	cmp	r3, #24
 8000c2a:	d008      	beq.n	8000c3e <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	6a38      	ldr	r0, [r7, #32]
 8000c30:	f7ff fd04 	bl	800063c <lwiperf_tcp_close>
        pbuf_free(p);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f00d fa25 	bl	800e084 <pbuf_free>
        return ERR_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e0cd      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
      }
      conn->have_settings_buf = 1;
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d031      	beq.n	8000cb6 <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d02b      	beq.n	8000cb6 <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000c5e:	6a38      	ldr	r0, [r7, #32]
 8000c60:	f7ff ff38 	bl	8000ad4 <lwiperf_tx_start_passive>
 8000c64:	4603      	mov	r3, r0
 8000c66:	777b      	strb	r3, [r7, #29]
          if (err2 != ERR_OK) {
 8000c68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d022      	beq.n	8000cb6 <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000c70:	2104      	movs	r1, #4
 8000c72:	6a38      	ldr	r0, [r7, #32]
 8000c74:	f7ff fce2 	bl	800063c <lwiperf_tcp_close>
            pbuf_free(p);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f00d fa03 	bl	800e084 <pbuf_free>
            return ERR_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e0ab      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d013      	beq.n	8000cb6 <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000c94:	2318      	movs	r3, #24
 8000c96:	2100      	movs	r1, #0
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f00d fcf0 	bl	800e67e <pbuf_memcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	6a38      	ldr	r0, [r7, #32]
 8000ca8:	f7ff fcc8 	bl	800063c <lwiperf_tcp_close>
          pbuf_free(p);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f00d f9e9 	bl	800e084 <pbuf_free>
          return ERR_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e091      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	f103 0218 	add.w	r2, r3, #24
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	2b18      	cmp	r3, #24
 8000cc8:	d80f      	bhi.n	8000cea <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8000cca:	f005 f8e5 	bl	8005e98 <sys_now>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	891b      	ldrh	r3, [r3, #8]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68b8      	ldr	r0, [r7, #8]
 8000cdc:	f00e faf4 	bl	800f2c8 <tcp_recved>
      pbuf_free(p);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f00d f9cf 	bl	800e084 <pbuf_free>
      return ERR_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e077      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	2204      	movs	r2, #4
 8000cee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8000cf2:	2118      	movs	r1, #24
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f00d f93f 	bl	800df78 <pbuf_remove_header>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	773b      	strb	r3, [r7, #28]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000cfe:	7f3b      	ldrb	r3, [r7, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <lwiperf_tcp_recv+0x1b6>
 8000d04:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <lwiperf_tcp_recv+0x288>)
 8000d06:	f240 2211 	movw	r2, #529	@ 0x211
 8000d0a:	4939      	ldr	r1, [pc, #228]	@ (8000df0 <lwiperf_tcp_recv+0x294>)
 8000d0c:	4837      	ldr	r0, [pc, #220]	@ (8000dec <lwiperf_tcp_recv+0x290>)
 8000d0e:	f014 fd4d 	bl	80157ac <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d1a:	e03f      	b.n	8000d9c <lwiperf_tcp_recv+0x240>
#if LWIPERF_CHECK_RX_DATA
    const u8_t *payload = (const u8_t *)q->payload;
 8000d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	61bb      	str	r3, [r7, #24]
    u16_t i;
    for (i = 0; i < q->len; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d26:	e02b      	b.n	8000d80 <lwiperf_tcp_recv+0x224>
      u8_t val = payload[i];
 8000d28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	75fb      	strb	r3, [r7, #23]
      u8_t num = val - '0';
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	3b30      	subs	r3, #48	@ 0x30
 8000d36:	75bb      	strb	r3, [r7, #22]
      if (num == conn->next_num) {
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d3e:	7dba      	ldrb	r2, [r7, #22]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d111      	bne.n	8000d68 <lwiperf_tcp_recv+0x20c>
        conn->next_num++;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        if (conn->next_num == 10) {
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d10d      	bne.n	8000d7a <lwiperf_tcp_recv+0x21e>
          conn->next_num = 0;
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8000d66:	e008      	b.n	8000d7a <lwiperf_tcp_recv+0x21e>
        }
      } else {
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000d68:	2103      	movs	r1, #3
 8000d6a:	6a38      	ldr	r0, [r7, #32]
 8000d6c:	f7ff fc66 	bl	800063c <lwiperf_tcp_close>
        pbuf_free(p);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f00d f987 	bl	800e084 <pbuf_free>
        return ERR_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e02f      	b.n	8000dda <lwiperf_tcp_recv+0x27e>
    for (i = 0; i < q->len; i++) {
 8000d7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	895b      	ldrh	r3, [r3, #10]
 8000d84:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ce      	bcc.n	8000d28 <lwiperf_tcp_recv+0x1cc>
      }
    }
#endif
    packet_idx += q->len;
 8000d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d8c:	895b      	ldrh	r3, [r3, #10]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d92:	4413      	add	r3, r2
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1bc      	bne.n	8000d1c <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	461a      	mov	r2, r3
 8000da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d006      	beq.n	8000dbc <lwiperf_tcp_recv+0x260>
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <lwiperf_tcp_recv+0x288>)
 8000db0:	f240 222b 	movw	r2, #555	@ 0x22b
 8000db4:	490f      	ldr	r1, [pc, #60]	@ (8000df4 <lwiperf_tcp_recv+0x298>)
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <lwiperf_tcp_recv+0x290>)
 8000db8:	f014 fcf8 	bl	80157ac <iprintf>
  conn->bytes_transferred += packet_idx;
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc2:	441a      	add	r2, r3
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	625a      	str	r2, [r3, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000dc8:	8bfb      	ldrh	r3, [r7, #30]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	68b8      	ldr	r0, [r7, #8]
 8000dce:	f00e fa7b 	bl	800f2c8 <tcp_recved>
  pbuf_free(p);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f00d f956 	bl	800e084 <pbuf_free>
  return ERR_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3730      	adds	r7, #48	@ 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08016684 	.word	0x08016684
 8000de8:	08016724 	.word	0x08016724
 8000dec:	080166ac 	.word	0x080166ac
 8000df0:	08016734 	.word	0x08016734
 8000df4:	08016750 	.word	0x08016750

08000df8 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000e08:	2105      	movs	r1, #5
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff fc16 	bl	800063c <lwiperf_tcp_close>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d006      	beq.n	8000e3e <lwiperf_tcp_poll+0x26>
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <lwiperf_tcp_poll+0x64>)
 8000e32:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000e36:	4912      	ldr	r1, [pc, #72]	@ (8000e80 <lwiperf_tcp_poll+0x68>)
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <lwiperf_tcp_poll+0x6c>)
 8000e3a:	f014 fcb7 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d905      	bls.n	8000e64 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000e58:	2102      	movs	r1, #2
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fbee 	bl	800063c <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8000e60:	2300      	movs	r3, #0
 8000e62:	e007      	b.n	8000e74 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f7ff fc47 	bl	8000700 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	08016684 	.word	0x08016684
 8000e80:	08016724 	.word	0x08016724
 8000e84:	080166ac 	.word	0x080166ac

08000e88 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d105      	bne.n	8000eaa <lwiperf_tcp_accept+0x22>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <lwiperf_tcp_accept+0x22>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 8000eaa:	f06f 0305 	mvn.w	r3, #5
 8000eae:	e0a3      	b.n	8000ff8 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	795b      	ldrb	r3, [r3, #5]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d106      	bne.n	8000eca <lwiperf_tcp_accept+0x42>
 8000ebc:	4b50      	ldr	r3, [pc, #320]	@ (8001000 <lwiperf_tcp_accept+0x178>)
 8000ebe:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000ec2:	4950      	ldr	r1, [pc, #320]	@ (8001004 <lwiperf_tcp_accept+0x17c>)
 8000ec4:	4850      	ldr	r0, [pc, #320]	@ (8001008 <lwiperf_tcp_accept+0x180>)
 8000ec6:	f014 fc71 	bl	80157ac <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <lwiperf_tcp_accept+0x58>
 8000ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8001000 <lwiperf_tcp_accept+0x178>)
 8000ed4:	f240 2259 	movw	r2, #601	@ 0x259
 8000ed8:	494c      	ldr	r1, [pc, #304]	@ (800100c <lwiperf_tcp_accept+0x184>)
 8000eda:	484b      	ldr	r0, [pc, #300]	@ (8001008 <lwiperf_tcp_accept+0x180>)
 8000edc:	f014 fc66 	bl	80157ac <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <lwiperf_tcp_accept+0x6e>
 8000ee8:	4b45      	ldr	r3, [pc, #276]	@ (8001000 <lwiperf_tcp_accept+0x178>)
 8000eea:	f240 225a 	movw	r2, #602	@ 0x25a
 8000eee:	4948      	ldr	r1, [pc, #288]	@ (8001010 <lwiperf_tcp_accept+0x188>)
 8000ef0:	4845      	ldr	r0, [pc, #276]	@ (8001008 <lwiperf_tcp_accept+0x180>)
 8000ef2:	f014 fc5b 	bl	80157ac <iprintf>
  if (s->specific_remote) {
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <lwiperf_tcp_accept+0x8e>
 8000f08:	4b3d      	ldr	r3, [pc, #244]	@ (8001000 <lwiperf_tcp_accept+0x178>)
 8000f0a:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 8000f0e:	4941      	ldr	r1, [pc, #260]	@ (8001014 <lwiperf_tcp_accept+0x18c>)
 8000f10:	483d      	ldr	r0, [pc, #244]	@ (8001008 <lwiperf_tcp_accept+0x180>)
 8000f12:	f014 fc4b 	bl	80157ac <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d00d      	beq.n	8000f3e <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 8000f22:	f06f 0305 	mvn.w	r3, #5
 8000f26:	e067      	b.n	8000ff8 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <lwiperf_tcp_accept+0xb6>
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <lwiperf_tcp_accept+0x178>)
 8000f32:	f240 2262 	movw	r2, #610	@ 0x262
 8000f36:	4938      	ldr	r1, [pc, #224]	@ (8001018 <lwiperf_tcp_accept+0x190>)
 8000f38:	4833      	ldr	r0, [pc, #204]	@ (8001008 <lwiperf_tcp_accept+0x180>)
 8000f3a:	f014 fc37 	bl	80157ac <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000f3e:	2048      	movs	r0, #72	@ 0x48
 8000f40:	f00b ffde 	bl	800cf00 <mem_malloc>
 8000f44:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e052      	b.n	8000ff8 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8000f52:	2248      	movs	r2, #72	@ 0x48
 8000f54:	2100      	movs	r1, #0
 8000f56:	6938      	ldr	r0, [r7, #16]
 8000f58:	f014 fc8d 	bl	8015876 <memset>
  conn->base.tcp = 1;
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2201      	movs	r2, #1
 8000f66:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8000f74:	f004 ff90 	bl	8005e98 <sys_now>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8000f8e:	6939      	ldr	r1, [r7, #16]
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f00f f983 	bl	801029c <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8000f96:	4921      	ldr	r1, [pc, #132]	@ (800101c <lwiperf_tcp_accept+0x194>)
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f00f f991 	bl	80102c0 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	491f      	ldr	r1, [pc, #124]	@ (8001020 <lwiperf_tcp_accept+0x198>)
 8000fa2:	68b8      	ldr	r0, [r7, #8]
 8000fa4:	f00f fa10 	bl	80103c8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	491d      	ldr	r1, [pc, #116]	@ (8001024 <lwiperf_tcp_accept+0x19c>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00f f9ce 	bl	8010350 <tcp_err>

  if (s->specific_remote) {
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d017      	beq.n	8000fee <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <lwiperf_tcp_accept+0x158>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff facd 	bl	8000574 <lwiperf_list_find>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff fb27 	bl	800063c <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa67 	bl	80004c4 <lwiperf_list_add>
  return ERR_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	08016684 	.word	0x08016684
 8001004:	08016760 	.word	0x08016760
 8001008:	080166ac 	.word	0x080166ac
 800100c:	08016770 	.word	0x08016770
 8001010:	08016784 	.word	0x08016784
 8001014:	08016798 	.word	0x08016798
 8001018:	080167c0 	.word	0x080167c0
 800101c:	08000b5d 	.word	0x08000b5d
 8001020:	08000e19 	.word	0x08000e19
 8001024:	08000df9 	.word	0x08000df9

08001028 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	f241 3189 	movw	r1, #5001	@ 0x1389
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <lwiperf_start_tcp_server_default+0x24>)
 800103c:	f000 f808 	bl	8001050 <lwiperf_start_tcp_server>
 8001040:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08019d40 	.word	0x08019d40

08001050 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	460b      	mov	r3, r1
 800105e:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8001064:	8979      	ldrh	r1, [r7, #10]
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2300      	movs	r3, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 f80d 	bl	8001094 <lwiperf_start_tcp_server_impl>
 800107a:	4603      	mov	r3, r0
 800107c:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 800107e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <lwiperf_start_tcp_server+0x3a>
    return state;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	e000      	b.n	800108c <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	460b      	mov	r3, r1
 80010a2:	817b      	strh	r3, [r7, #10]
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 80010a4:	f005 f97a 	bl	800639c <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);
 80010a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <lwiperf_start_tcp_server_impl+0x28>
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <lwiperf_start_tcp_server_impl+0x104>)
 80010b0:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80010b4:	4939      	ldr	r1, [pc, #228]	@ (800119c <lwiperf_start_tcp_server_impl+0x108>)
 80010b6:	483a      	ldr	r0, [pc, #232]	@ (80011a0 <lwiperf_start_tcp_server_impl+0x10c>)
 80010b8:	f014 fb78 	bl	80157ac <iprintf>

  if (local_addr == NULL) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <lwiperf_start_tcp_server_impl+0x34>
    return ERR_ARG;
 80010c2:	f06f 030f 	mvn.w	r3, #15
 80010c6:	e063      	b.n	8001190 <lwiperf_start_tcp_server_impl+0xfc>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80010c8:	2048      	movs	r0, #72	@ 0x48
 80010ca:	f00b ff19 	bl	800cf00 <mem_malloc>
 80010ce:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <lwiperf_start_tcp_server_impl+0x48>
    return ERR_MEM;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e059      	b.n	8001190 <lwiperf_start_tcp_server_impl+0xfc>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 80010dc:	2248      	movs	r2, #72	@ 0x48
 80010de:	2100      	movs	r1, #0
 80010e0:	69f8      	ldr	r0, [r7, #28]
 80010e2:	f014 fbc8 	bl	8015876 <memset>
  s->base.tcp = 1;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	2201      	movs	r2, #1
 80010ea:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2201      	movs	r2, #1
 80010f0:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010f6:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8001104:	202e      	movs	r0, #46	@ 0x2e
 8001106:	f00f f8bb 	bl	8010280 <tcp_new_ip_type>
 800110a:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <lwiperf_start_tcp_server_impl+0x84>
    return ERR_MEM;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e03b      	b.n	8001190 <lwiperf_start_tcp_server_impl+0xfc>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	461a      	mov	r2, r3
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	69b8      	ldr	r0, [r7, #24]
 8001120:	f00d fefe 	bl	800ef20 <tcp_bind>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <lwiperf_start_tcp_server_impl+0xa2>
    return err;
 8001130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001134:	e02c      	b.n	8001190 <lwiperf_start_tcp_server_impl+0xfc>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8001136:	2101      	movs	r1, #1
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f00d ffab 	bl	800f094 <tcp_listen_with_backlog>
 800113e:	4602      	mov	r2, r0
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <lwiperf_start_tcp_server_impl+0xd0>
    if (pcb != NULL) {
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <lwiperf_start_tcp_server_impl+0xc4>
      tcp_close(pcb);
 8001152:	69b8      	ldr	r0, [r7, #24]
 8001154:	f00d fdea 	bl	800ed2c <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8001158:	69f8      	ldr	r0, [r7, #28]
 800115a:	f00b fd3f 	bl	800cbdc <mem_free>
    return ERR_MEM;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e015      	b.n	8001190 <lwiperf_start_tcp_server_impl+0xfc>
  }
  pcb = NULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	69f9      	ldr	r1, [r7, #28]
 800116e:	4618      	mov	r0, r3
 8001170:	f00f f894 	bl	801029c <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	490a      	ldr	r1, [pc, #40]	@ (80011a4 <lwiperf_start_tcp_server_impl+0x110>)
 800117a:	4618      	mov	r0, r3
 800117c:	f00f f90c 	bl	8010398 <tcp_accept>

  lwiperf_list_add(&s->base);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f99e 	bl	80004c4 <lwiperf_list_add>
  *state = s;
 8001188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	08016684 	.word	0x08016684
 800119c:	080167e8 	.word	0x080167e8
 80011a0:	080166ac 	.word	0x080166ac
 80011a4:	08000e89 	.word	0x08000e89

080011a8 <lwiperf_start_tcp_client_default>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client_default(const ip_addr_t* remote_addr,
                               lwiperf_report_fn report_fn, void* report_arg)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f241 3189 	movw	r1, #5001	@ 0x1389
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f000 f805 	bl	80011d0 <lwiperf_start_tcp_client>
 80011c6:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b092      	sub	sp, #72	@ 0x48
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	817b      	strh	r3, [r7, #10]
 80011de:	4613      	mov	r3, r2
 80011e0:	727b      	strb	r3, [r7, #9]
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]

  memset(&settings, 0, sizeof(settings));
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2218      	movs	r2, #24
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f014 fb41 	bl	8015876 <memset>
  switch (type) {
 80011f4:	7a7b      	ldrb	r3, [r7, #9]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d00f      	beq.n	800121a <lwiperf_start_tcp_client+0x4a>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	dc14      	bgt.n	8001228 <lwiperf_start_tcp_client+0x58>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <lwiperf_start_tcp_client+0x38>
 8001202:	2b01      	cmp	r3, #1
 8001204:	d003      	beq.n	800120e <lwiperf_start_tcp_client+0x3e>
 8001206:	e00f      	b.n	8001228 <lwiperf_start_tcp_client+0x58>
  case LWIPERF_CLIENT:
    /* Unidirectional tx only test */
    settings.flags = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    break;
 800120c:	e00e      	b.n	800122c <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_DUAL:
    /* Do a bidirectional test simultaneously */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 800120e:	483a      	ldr	r0, [pc, #232]	@ (80012f8 <lwiperf_start_tcp_client+0x128>)
 8001210:	f008 ffb1 	bl	800a176 <lwip_htonl>
 8001214:	4603      	mov	r3, r0
 8001216:	61fb      	str	r3, [r7, #28]
    break;
 8001218:	e008      	b.n	800122c <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_TRADEOFF:
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 800121a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800121e:	f008 ffaa 	bl	800a176 <lwip_htonl>
 8001222:	4603      	mov	r3, r0
 8001224:	61fb      	str	r3, [r7, #28]
    break;
 8001226:	e001      	b.n	800122c <lwiperf_start_tcp_client+0x5c>
  default:
    /* invalid argument */
    return NULL;
 8001228:	2300      	movs	r3, #0
 800122a:	e061      	b.n	80012f0 <lwiperf_start_tcp_client+0x120>
  }
  settings.num_threads = htonl(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f008 ffa2 	bl	800a176 <lwip_htonl>
 8001232:	4603      	mov	r3, r0
 8001234:	623b      	str	r3, [r7, #32]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8001236:	f241 3089 	movw	r0, #5001	@ 0x1389
 800123a:	f008 ff9c 	bl	800a176 <lwip_htonl>
 800123e:	4603      	mov	r3, r0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  /* TODO: implement passing duration/amount of bytes to transfer */
  settings.amount = htonl((u32_t)-1000);
 8001242:	482e      	ldr	r0, [pc, #184]	@ (80012fc <lwiperf_start_tcp_client+0x12c>)
 8001244:	f008 ff97 	bl	800a176 <lwip_htonl>
 8001248:	4603      	mov	r3, r0
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30

  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 800124c:	f107 021c 	add.w	r2, r7, #28
 8001250:	8979      	ldrh	r1, [r7, #10]
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2300      	movs	r3, #0
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fb86 	bl	8000974 <lwiperf_tx_start_impl>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret == ERR_OK) {
 800126e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001272:	2b00      	cmp	r3, #0
 8001274:	d13b      	bne.n	80012ee <lwiperf_start_tcp_client+0x11e>
    LWIP_ASSERT("state != NULL", state != NULL);
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <lwiperf_start_tcp_client+0xba>
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <lwiperf_start_tcp_client+0x130>)
 800127e:	f240 3216 	movw	r2, #790	@ 0x316
 8001282:	4920      	ldr	r1, [pc, #128]	@ (8001304 <lwiperf_start_tcp_client+0x134>)
 8001284:	4820      	ldr	r0, [pc, #128]	@ (8001308 <lwiperf_start_tcp_client+0x138>)
 8001286:	f014 fa91 	bl	80157ac <iprintf>
    if (type != LWIPERF_CLIENT) {
 800128a:	7a7b      	ldrb	r3, [r7, #9]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d02c      	beq.n	80012ea <lwiperf_start_tcp_client+0x11a>
      /* start corresponding server now */
      lwiperf_state_tcp_t *server = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4618      	mov	r0, r3
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f107 0214 	add.w	r2, r7, #20
 80012a0:	9201      	str	r2, [sp, #4]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	f241 3189 	movw	r1, #5001	@ 0x1389
 80012ac:	f7ff fef2 	bl	8001094 <lwiperf_start_tcp_server_impl>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        report_fn, report_arg, (lwiperf_state_base_t *)state, &server);
      if (ret != ERR_OK) {
 80012b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <lwiperf_start_tcp_client+0xfa>
        /* starting server failed, abort client */
        lwiperf_abort(state);
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f823 	bl	800130c <lwiperf_abort>
        return NULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e012      	b.n	80012f0 <lwiperf_start_tcp_client+0x120>
      }
      /* make this server accept one connection only */
      server->specific_remote = 1;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6852      	ldr	r2, [r2, #4]
 80012da:	645a      	str	r2, [r3, #68]	@ 0x44
      if (type == LWIPERF_TRADEOFF) {
 80012dc:	7a7b      	ldrb	r3, [r7, #9]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d103      	bne.n	80012ea <lwiperf_start_tcp_client+0x11a>
        /* tradeoff means that the remote host connects only after the client is done,
           so keep the listen pcb open until the client is done */
        server->client_tradeoff_mode = 1;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      }
    }
    return state;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	e000      	b.n	80012f0 <lwiperf_start_tcp_client+0x120>
  }
  return NULL;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3738      	adds	r7, #56	@ 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	80000001 	.word	0x80000001
 80012fc:	fffffc18 	.word	0xfffffc18
 8001300:	08016684 	.word	0x08016684
 8001304:	080167e8 	.word	0x080167e8
 8001308:	080166ac 	.word	0x080166ac

0800130c <lwiperf_abort>:
 * @ingroup iperf
 * Abort an iperf session (handle returned by lwiperf_start_tcp_server*())
 */
void
lwiperf_abort(void *lwiperf_session)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]

  LWIP_ASSERT_CORE_LOCKED();
 8001318:	f005 f840 	bl	800639c <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <lwiperf_abort+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e01c      	b.n	800135e <lwiperf_abort+0x52>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d004      	beq.n	8001336 <lwiperf_abort+0x2a>
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d10e      	bne.n	8001354 <lwiperf_abort+0x48>
      dealloc = i;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	60fb      	str	r3, [r7, #12]
      i = i->next;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	617b      	str	r3, [r7, #20]
      if (last != NULL) {
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <lwiperf_abort+0x40>
        last->next = i;
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f00b fc45 	bl	800cbdc <mem_free>
 8001352:	e004      	b.n	800135e <lwiperf_abort+0x52>
    } else {
      last = i;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
      i = i->next;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	617b      	str	r3, [r7, #20]
  for (i = lwiperf_all_connections; i != NULL; ) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1df      	bne.n	8001324 <lwiperf_abort+0x18>
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	240000ac 	.word	0x240000ac

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800137a:	f000 f9c3 	bl	8001704 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800137e:	4b46      	ldr	r3, [pc, #280]	@ (8001498 <main+0x124>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d11b      	bne.n	80013c2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800138a:	f3bf 8f4f 	dsb	sy
}
 800138e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001390:	f3bf 8f6f 	isb	sy
}
 8001394:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001396:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <main+0x124>)
 8001398:	2200      	movs	r2, #0
 800139a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a4:	f3bf 8f6f 	isb	sy
}
 80013a8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <main+0x124>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001498 <main+0x124>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b6:	f3bf 8f4f 	dsb	sy
}
 80013ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013bc:	f3bf 8f6f 	isb	sy
}
 80013c0:	e000      	b.n	80013c4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013c2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013c4:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <main+0x124>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d138      	bne.n	8001442 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80013d0:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <main+0x124>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013d8:	f3bf 8f4f 	dsb	sy
}
 80013dc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013de:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <main+0x124>)
 80013e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	0b5b      	lsrs	r3, r3, #13
 80013ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013ee:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001402:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001408:	4923      	ldr	r1, [pc, #140]	@ (8001498 <main+0x124>)
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ef      	bne.n	80013fa <main+0x86>
    } while(sets-- != 0U);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e5      	bne.n	80013f0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001424:	f3bf 8f4f 	dsb	sy
}
 8001428:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <main+0x124>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <main+0x124>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001436:	f3bf 8f4f 	dsb	sy
}
 800143a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800143c:	f3bf 8f6f 	isb	sy
}
 8001440:	e000      	b.n	8001444 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001442:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fcd6 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f830 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f8aa 	bl	80015a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* ETH_CODE: fixed core synchronization
   * Release M4 core after GPIO and peripherals init
   * to avoid conflict.
   */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <main+0x128>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a11      	ldr	r2, [pc, #68]	@ (800149c <main+0x128>)
 8001458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <main+0x128>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  HAL_HSEM_FastTake(HSEM_ID_0);
 800146e:	2000      	movs	r0, #0
 8001470:	f002 fdd2 	bl	8004018 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8001474:	2100      	movs	r1, #0
 8001476:	2000      	movs	r0, #0
 8001478:	f002 fde8 	bl	800404c <HAL_HSEM_Release>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800147c:	f005 f81a 	bl	80064b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <main+0x12c>)
 8001482:	2100      	movs	r1, #0
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <main+0x130>)
 8001486:	f005 f874 	bl	8006572 <osThreadNew>
 800148a:	4603      	mov	r3, r0
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <main+0x134>)
 800148e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001490:	f005 f834 	bl	80064fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <main+0x120>
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	58024400 	.word	0x58024400
 80014a0:	08019d00 	.word	0x08019d00
 80014a4:	080016c9 	.word	0x080016c9
 80014a8:	240000b0 	.word	0x240000b0

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b09c      	sub	sp, #112	@ 0x70
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b6:	224c      	movs	r2, #76	@ 0x4c
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f014 f9db 	bl	8015876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2220      	movs	r2, #32
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f014 f9d5 	bl	8015876 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f002 fdd1 	bl	8004074 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <SystemClock_Config+0xf0>)
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	4a30      	ldr	r2, [pc, #192]	@ (800159c <SystemClock_Config+0xf0>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014e2:	4b2e      	ldr	r3, [pc, #184]	@ (800159c <SystemClock_Config+0xf0>)
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <SystemClock_Config+0xf4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a2b      	ldr	r2, [pc, #172]	@ (80015a0 <SystemClock_Config+0xf4>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <SystemClock_Config+0xf4>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001504:	bf00      	nop
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <SystemClock_Config+0xf4>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001512:	d1f8      	bne.n	8001506 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001514:	2302      	movs	r3, #2
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001518:	2301      	movs	r3, #1
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151c:	2340      	movs	r3, #64	@ 0x40
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001524:	2300      	movs	r3, #0
 8001526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8001528:	2320      	movs	r3, #32
 800152a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 800152c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001530:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001532:	2302      	movs	r3, #2
 8001534:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001536:	2302      	movs	r3, #2
 8001538:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800153a:	2302      	movs	r3, #2
 800153c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800153e:	2304      	movs	r3, #4
 8001540:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001542:	2300      	movs	r3, #0
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fdea 	bl	8004128 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800155a:	f000 f937 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	233f      	movs	r3, #63	@ 0x3f
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800156a:	2308      	movs	r3, #8
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800156e:	2340      	movs	r3, #64	@ 0x40
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001572:	2340      	movs	r3, #64	@ 0x40
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800157c:	2340      	movs	r3, #64	@ 0x40
 800157e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 f9fd 	bl	8004984 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001590:	f000 f91c 	bl	80017cc <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3770      	adds	r7, #112	@ 0x70
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58000400 	.word	0x58000400
 80015a0:	58024800 	.word	0x58024800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b40      	ldr	r3, [pc, #256]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c0:	4a3e      	ldr	r2, [pc, #248]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ca:	4b3c      	ldr	r3, [pc, #240]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d8:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	4a37      	ldr	r2, [pc, #220]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a2f      	ldr	r2, [pc, #188]	@ (80016bc <MX_GPIO_Init+0x118>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b29      	ldr	r3, [pc, #164]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	4a28      	ldr	r2, [pc, #160]	@ (80016bc <MX_GPIO_Init+0x118>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001624:	4b25      	ldr	r3, [pc, #148]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a20      	ldr	r2, [pc, #128]	@ (80016bc <MX_GPIO_Init+0x118>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_GPIO_Init+0x118>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800166e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001680:	2307      	movs	r3, #7
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_GPIO_Init+0x11c>)
 800168c:	f002 fb14 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001690:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016a2:	230a      	movs	r3, #10
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_GPIO_Init+0x120>)
 80016ae:	f002 fb03 	bl	8003cb8 <HAL_GPIO_Init>

}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020c00 	.word	0x58020c00
 80016c4:	58020000 	.word	0x58020000

080016c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80016d0:	f003 fffa 	bl	80056c8 <MX_LWIP_Init>
     * iperf3 is not compatible at all.
     * Adding lwiperf.c file to the project is necessary.
     * The default include path should already contain
     * 'lwip/apps/lwiperf.h'
     */
    LOCK_TCPIP_CORE();
 80016d4:	f004 fe44 	bl	8006360 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fca4 	bl	8001028 <lwiperf_start_tcp_server_default>

    ip4_addr_t remote_addr;
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <StartDefaultTask+0x38>)
 80016e2:	60fb      	str	r3, [r7, #12]
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd5b 	bl	80011a8 <lwiperf_start_tcp_client_default>
    UNLOCK_TCPIP_CORE();
 80016f2:	f004 fe45 	bl	8006380 <sys_unlock_tcpip_core>
    /* Infinite loop */
    for(;;)
    {
      osDelay(1000);
 80016f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fa:	f004 ffd8 	bl	80066ae <osDelay>
 80016fe:	e7fa      	b.n	80016f6 <StartDefaultTask+0x2e>
 8001700:	0101a8c0 	.word	0x0101a8c0

08001704 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001716:	f000 fcc9 	bl	80020ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800171e:	2300      	movs	r3, #0
 8001720:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001726:	231f      	movs	r3, #31
 8001728:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800172a:	2387      	movs	r3, #135	@ 0x87
 800172c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800172e:	2300      	movs	r3, #0
 8001730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001732:	2300      	movs	r3, #0
 8001734:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fce7 	bl	800211c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800174e:	2301      	movs	r3, #1
 8001750:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MPU_Config+0x9c>)
 8001754:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001756:	2310      	movs	r3, #16
 8001758:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800175a:	2300      	movs	r3, #0
 800175c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800175e:	2301      	movs	r3, #1
 8001760:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001762:	2303      	movs	r3, #3
 8001764:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800176a:	463b      	mov	r3, r7
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fcd5 	bl	800211c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001772:	2302      	movs	r3, #2
 8001774:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MPU_Config+0xa0>)
 8001778:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800177a:	2308      	movs	r3, #8
 800177c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800177e:	2300      	movs	r3, #0
 8001780:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800178a:	463b      	mov	r3, r7
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fcc5 	bl	800211c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001792:	2004      	movs	r0, #4
 8001794:	f000 fca2 	bl	80020dc <HAL_MPU_Enable>

}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	30020000 	.word	0x30020000
 80017a4:	30040000 	.word	0x30040000

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f000 fb57 	bl	8001e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40001000 	.word	0x40001000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <Error_Handler+0x8>

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_MspInit+0x38>)
 80017e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_MspInit+0x38>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_MspInit+0x38>)
 80017f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	210f      	movs	r1, #15
 8001800:	f06f 0001 	mvn.w	r0, #1
 8001804:	f000 fc2a 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	58024400 	.word	0x58024400

08001814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b090      	sub	sp, #64	@ 0x40
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	d827      	bhi.n	8001872 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001822:	2200      	movs	r2, #0
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	2036      	movs	r0, #54	@ 0x36
 8001828:	f000 fc18 	bl	800205c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182c:	2036      	movs	r0, #54	@ 0x36
 800182e:	f000 fc2f 	bl	8002090 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001832:	4a29      	ldr	r2, [pc, #164]	@ (80018d8 <HAL_InitTick+0xc4>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <HAL_InitTick+0xc8>)
 800183a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800183e:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <HAL_InitTick+0xc8>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001848:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_InitTick+0xc8>)
 800184a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001856:	f107 0210 	add.w	r2, r7, #16
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f003 fc05 	bl	8005070 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <HAL_InitTick+0x6a>
 8001870:	e001      	b.n	8001876 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e02b      	b.n	80018ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001876:	f003 fbe5 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 800187a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800187c:	e004      	b.n	8001888 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800187e:	f003 fbe1 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8001882:	4603      	mov	r3, r0
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <HAL_InitTick+0xcc>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3b01      	subs	r3, #1
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_InitTick+0xd0>)
 8001898:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_InitTick+0xd4>)
 800189a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_InitTick+0xd0>)
 800189e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018a4:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_InitTick+0xd0>)
 80018a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_InitTick+0xd0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <HAL_InitTick+0xd0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018b6:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <HAL_InitTick+0xd0>)
 80018b8:	f003 fc1c 	bl	80050f4 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <HAL_InitTick+0xd0>)
 80018c4:	f003 fc78 	bl	80051b8 <HAL_TIM_Base_Start_IT>
 80018c8:	4603      	mov	r3, r0
 80018ca:	e000      	b.n	80018ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3740      	adds	r7, #64	@ 0x40
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000008 	.word	0x24000008
 80018dc:	58024400 	.word	0x58024400
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	240000b4 	.word	0x240000b4
 80018e8:	40001000 	.word	0x40001000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <MemManage_Handler+0x4>

08001904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <UsageFault_Handler+0x4>

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM6_DAC_IRQHandler+0x10>)
 800192a:	f003 fcbd 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	240000b4 	.word	0x240000b4

08001938 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <ETH_IRQHandler+0x10>)
 800193e:	f001 f809 	bl	8002954 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	24000188 	.word	0x24000188

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <_kill+0x20>)
 8001968:	2216      	movs	r2, #22
 800196a:	601a      	str	r2, [r3, #0]
	return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	240107f0 	.word	0x240107f0

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe5 	bl	800195c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <_exit+0x12>

08001996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e00a      	b.n	80019be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a8:	f3af 8000 	nop.w
 80019ac:	4601      	mov	r1, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf0      	blt.n	80019a8 <_read+0x12>
	}

return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e009      	b.n	80019f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbf1      	blt.n	80019e2 <_write+0x12>
	}
	return len;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_close>:

int _close(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a30:	605a      	str	r2, [r3, #4]
	return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d205      	bcs.n	8001aac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <_sbrk+0x6c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	24080000 	.word	0x24080000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	24000100 	.word	0x24000100
 8001ad8:	24010800 	.word	0x24010800
 8001adc:	240107f0 	.word	0x240107f0

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae4:	f7fe fc4c 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f013 ff57 	bl	80159c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fc2f 	bl	8001374 <main>
  bx  lr
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b20:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001b24:	08019f44 	.word	0x08019f44
  ldr r2, =_sbss
 8001b28:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001b2c:	24010800 	.word	0x24010800

08001b30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC3_IRQHandler>

08001b32 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <LAN8742_RegisterBusIO+0x28>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <LAN8742_RegisterBusIO+0x28>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <LAN8742_RegisterBusIO+0x28>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e014      	b.n	8001b8a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d17c      	bne.n	8001cb0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e01c      	b.n	8001c0a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f107 0208 	add.w	r2, r7, #8
 8001bd8:	2112      	movs	r1, #18
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	4798      	blx	r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da03      	bge.n	8001bec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001be4:	f06f 0304 	mvn.w	r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001bea:	e00b      	b.n	8001c04 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d105      	bne.n	8001c04 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
         break;
 8001c02:	e005      	b.n	8001c10 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b1f      	cmp	r3, #31
 8001c0e:	d9df      	bls.n	8001bd0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b1f      	cmp	r3, #31
 8001c16:	d902      	bls.n	8001c1e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c18:	f06f 0302 	mvn.w	r3, #2
 8001c1c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d145      	bne.n	8001cb0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6810      	ldr	r0, [r2, #0]
 8001c2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c30:	2100      	movs	r1, #0
 8001c32:	4798      	blx	r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db37      	blt.n	8001caa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6810      	ldr	r0, [r2, #0]
 8001c42:	f107 0208 	add.w	r2, r7, #8
 8001c46:	2100      	movs	r1, #0
 8001c48:	4798      	blx	r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db28      	blt.n	8001ca2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4798      	blx	r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001c5a:	e01c      	b.n	8001c96 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4798      	blx	r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c6e:	d80e      	bhi.n	8001c8e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	f107 0208 	add.w	r2, r7, #8
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4798      	blx	r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da07      	bge.n	8001c96 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001c86:	f06f 0304 	mvn.w	r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
                 break;
 8001c8c:	e010      	b.n	8001cb0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001c8e:	f06f 0301 	mvn.w	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
               break;
 8001c94:	e00c      	b.n	8001cb0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1dd      	bne.n	8001c5c <LAN8742_Init+0xc6>
 8001ca0:	e006      	b.n	8001cb0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001ca2:	f06f 0304 	mvn.w	r3, #4
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	e002      	b.n	8001cb0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001caa:	f06f 0303 	mvn.w	r3, #3
 8001cae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d112      	bne.n	8001cdc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	4798      	blx	r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001cc0:	bf00      	nop
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4798      	blx	r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cd4:	d9f5      	bls.n	8001cc2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 }
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6810      	ldr	r0, [r2, #0]
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4798      	blx	r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da02      	bge.n	8001d0e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d08:	f06f 0304 	mvn.w	r3, #4
 8001d0c:	e06e      	b.n	8001dec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6810      	ldr	r0, [r2, #0]
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4798      	blx	r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da02      	bge.n	8001d2a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d24:	f06f 0304 	mvn.w	r3, #4
 8001d28:	e060      	b.n	8001dec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001d34:	2301      	movs	r3, #1
 8001d36:	e059      	b.n	8001dec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6810      	ldr	r0, [r2, #0]
 8001d40:	f107 020c 	add.w	r2, r7, #12
 8001d44:	2100      	movs	r1, #0
 8001d46:	4798      	blx	r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da02      	bge.n	8001d54 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d4e:	f06f 0304 	mvn.w	r3, #4
 8001d52:	e04b      	b.n	8001dec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11b      	bne.n	8001d96 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <LAN8742_GetLinkState+0x90>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d72:	2302      	movs	r3, #2
 8001d74:	e03a      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e033      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e02c      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d92:	2305      	movs	r3, #5
 8001d94:	e02a      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6810      	ldr	r0, [r2, #0]
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	211f      	movs	r1, #31
 8001da4:	4798      	blx	r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da02      	bge.n	8001db2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001dac:	f06f 0304 	mvn.w	r3, #4
 8001db0:	e01c      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	e015      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 031c 	and.w	r3, r3, #28
 8001dc6:	2b18      	cmp	r3, #24
 8001dc8:	d101      	bne.n	8001dce <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 031c 	and.w	r3, r3, #28
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d101      	bne.n	8001ddc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e007      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 031c 	and.w	r3, r3, #28
 8001de2:	2b14      	cmp	r3, #20
 8001de4:	d101      	bne.n	8001dea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001de6:	2304      	movs	r3, #4
 8001de8:	e000      	b.n	8001dec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001dea:	2305      	movs	r3, #5
    }				
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	f000 f923 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e00:	f002 ff76 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_Init+0x68>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	4913      	ldr	r1, [pc, #76]	@ (8001e60 <HAL_Init+0x6c>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_Init+0x68>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	4a0e      	ldr	r2, [pc, #56]	@ (8001e60 <HAL_Init+0x6c>)
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <HAL_Init+0x70>)
 8001e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e38:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <HAL_Init+0x74>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f7ff fce8 	bl	8001814 <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e002      	b.n	8001e54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4e:	f7ff fcc3 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	080196b0 	.word	0x080196b0
 8001e64:	24000004 	.word	0x24000004
 8001e68:	24000000 	.word	0x24000000

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2400000c 	.word	0x2400000c
 8001e90:	24000104 	.word	0x24000104

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	24000104 	.word	0x24000104

08001eac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_GetREVID+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	5c001000 	.word	0x5c001000

08001ec4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	58000400 	.word	0x58000400

08001eec <__NVIC_SetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x40>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x40>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00
 8001f30:	05fa0000 	.word	0x05fa0000

08001f34 <__NVIC_GetPriorityGrouping>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800206a:	f7ff ff63 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800206e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ffb3 	bl	8001fe0 <NVIC_EncodePriority>
 800207a:	4602      	mov	r2, r0
 800207c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff82 	bl	8001f8c <__NVIC_SetPriority>
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff56 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020b0:	f3bf 8f5f 	dmb	sy
}
 80020b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_MPU_Disable+0x28>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	4a06      	ldr	r2, [pc, #24]	@ (80020d4 <HAL_MPU_Disable+0x28>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020c2:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_MPU_Disable+0x2c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	e000ed90 	.word	0xe000ed90

080020dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <HAL_MPU_Enable+0x38>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_MPU_Enable+0x3c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_MPU_Enable+0x3c>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020fa:	f3bf 8f4f 	dsb	sy
}
 80020fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002100:	f3bf 8f6f 	isb	sy
}
 8002104:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed90 	.word	0xe000ed90
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	785a      	ldrb	r2, [r3, #1]
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_MPU_ConfigRegion+0x84>)
 800212a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d029      	beq.n	8002188 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002134:	4a1a      	ldr	r2, [pc, #104]	@ (80021a0 <HAL_MPU_ConfigRegion+0x84>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7b1b      	ldrb	r3, [r3, #12]
 8002140:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7adb      	ldrb	r3, [r3, #11]
 8002146:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002148:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7a9b      	ldrb	r3, [r3, #10]
 800214e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b5b      	ldrb	r3, [r3, #13]
 8002156:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b9b      	ldrb	r3, [r3, #14]
 800215e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002160:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7bdb      	ldrb	r3, [r3, #15]
 8002166:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002168:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7a5b      	ldrb	r3, [r3, #9]
 800216e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002170:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7a1b      	ldrb	r3, [r3, #8]
 8002176:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002178:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002182:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002184:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002186:	e005      	b.n	8002194 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_MPU_ConfigRegion+0x84>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800218e:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <HAL_MPU_ConfigRegion+0x84>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed90 	.word	0xe000ed90

080021a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_GetCurrentCPUID+0x24>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	2b07      	cmp	r3, #7
 80021b4:	d101      	bne.n	80021ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e000      	b.n	80021bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80021ba:	2301      	movs	r3, #1
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0cf      	b.n	800237e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2223      	movs	r2, #35	@ 0x23
 80021ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f003 fe59 	bl	8005ea8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b64      	ldr	r3, [pc, #400]	@ (8002388 <HAL_ETH_Init+0x1bc>)
 80021f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fc:	4a62      	ldr	r2, [pc, #392]	@ (8002388 <HAL_ETH_Init+0x1bc>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002206:	4b60      	ldr	r3, [pc, #384]	@ (8002388 <HAL_ETH_Init+0x1bc>)
 8002208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7a1b      	ldrb	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fe51 	bl	8001ec4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002222:	e003      	b.n	800222c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002224:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002228:	f7ff fe4c 	bl	8001ec4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800222c:	4b57      	ldr	r3, [pc, #348]	@ (800238c <HAL_ETH_Init+0x1c0>)
 800222e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002248:	f7ff fe24 	bl	8001e94 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800224e:	e011      	b.n	8002274 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002250:	f7ff fe20 	bl	8001e94 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800225e:	d909      	bls.n	8002274 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2204      	movs	r2, #4
 8002264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	22e0      	movs	r2, #224	@ 0xe0
 800226c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e084      	b.n	800237e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e4      	bne.n	8002250 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff3c 	bl	8003104 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800228c:	f002 feaa 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8002290:	4603      	mov	r3, r0
 8002292:	4a3f      	ldr	r2, [pc, #252]	@ (8002390 <HAL_ETH_Init+0x1c4>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	0c9a      	lsrs	r2, r3, #18
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3a01      	subs	r2, #1
 80022a0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f001 f935 	bl	8003514 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80022b6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022c6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	22e0      	movs	r2, #224	@ 0xe0
 80022e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e049      	b.n	800237e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_ETH_Init+0x1c8>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6952      	ldr	r2, [r2, #20]
 80022fe:	0051      	lsls	r1, r2, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800230a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f001 f99d 	bl	800364e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 f9e3 	bl	80036e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	3305      	adds	r3, #5
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	3303      	adds	r3, #3
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	061a      	lsls	r2, r3, #24
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	3302      	adds	r3, #2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	3301      	adds	r3, #1
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002358:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002366:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002368:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2210      	movs	r2, #16
 8002378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	58024400 	.word	0x58024400
 800238c:	58000400 	.word	0x58000400
 8002390:	431bde83 	.word	0x431bde83
 8002394:	ffff8001 	.word	0xffff8001

08002398 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d179      	bne.n	800249e <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2223      	movs	r2, #35	@ 0x23
 80023ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <HAL_ETH_Start_IT+0x110>)
 80023c6:	430b      	orrs	r3, r1
 80023c8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_ETH_Start_IT+0x114>)
 80023da:	430b      	orrs	r3, r1
 80023dc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9eb 	bl	80027c2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0202 	orr.w	r2, r2, #2
 80023fa:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002428:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002438:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002444:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002454:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002460:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800246c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002470:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002488:	430b      	orrs	r3, r1
 800248a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800248e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2223      	movs	r2, #35	@ 0x23
 8002496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0c020060 	.word	0x0c020060
 80024ac:	0c20c000 	.word	0x0c20c000

080024b0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024be:	2b23      	cmp	r3, #35	@ 0x23
 80024c0:	d165      	bne.n	800258e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2223      	movs	r2, #35	@ 0x23
 80024c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b30      	ldr	r3, [pc, #192]	@ (800259c <HAL_ETH_Stop_IT+0xec>)
 80024dc:	400b      	ands	r3, r1
 80024de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024e2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800251a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0202 	bic.w	r2, r2, #2
 8002550:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e00e      	b.n	8002576 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	3212      	adds	r2, #18
 800255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002562:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d9ed      	bls.n	8002558 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2210      	movs	r2, #16
 8002586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	ffff2f3e 	.word	0xffff2f3e

080025a0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e03a      	b.n	800263a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ca:	2b23      	cmp	r3, #35	@ 0x23
 80025cc:	d134      	bne.n	8002638 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80025d6:	2201      	movs	r2, #1
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f001 f8de 	bl	800379c <ETH_Prepare_Tx_Descriptors>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01f      	b.n	800263a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80025fa:	f3bf 8f4f 	dsb	sy
}
 80025fe:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	2b03      	cmp	r3, #3
 8002610:	d904      	bls.n	800261c <HAL_ETH_Transmit_IT+0x7c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	1f1a      	subs	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3106      	adds	r1, #6
 8002628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800262c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002630:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b088      	sub	sp, #32
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0a5      	b.n	80027ba <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002674:	2b23      	cmp	r3, #35	@ 0x23
 8002676:	d001      	beq.n	800267c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e09e      	b.n	80027ba <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	3212      	adds	r2, #18
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002692:	f1c3 0304 	rsb	r3, r3, #4
 8002696:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002698:	e067      	b.n	800276a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_ETH_ReadData+0x88>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03d      	beq.n	8002746 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002720:	461a      	mov	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f003 fda7 	bl	8006278 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	441a      	add	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d902      	bls.n	8002758 <HAL_ETH_ReadData+0x116>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b04      	subs	r3, #4
 8002756:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	3212      	adds	r2, #18
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800276e:	2b00      	cmp	r3, #0
 8002770:	db06      	blt.n	8002780 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d202      	bcs.n	8002780 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d08c      	beq.n	800269a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	441a      	add	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f814 	bl	80027c2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80027ce:	2301      	movs	r3, #1
 80027d0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027d6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	3212      	adds	r2, #18
 80027de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80027ea:	e03b      	b.n	8002864 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d112      	bne.n	800281a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fd0d 	bl	8006218 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	74fb      	strb	r3, [r7, #19]
 8002808:	e007      	b.n	800281a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	461a      	mov	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002820:	f3bf 8f5f 	dmb	sy
}
 8002824:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e003      	b.n	8002840 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800283e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3301      	adds	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d902      	bls.n	8002852 <ETH_UpdateDescriptor+0x90>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3b04      	subs	r3, #4
 8002850:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	3212      	adds	r2, #18
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	617b      	str	r3, [r7, #20]
      desccount--;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	3b01      	subs	r3, #1
 8002862:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <ETH_UpdateDescriptor+0xae>
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1bd      	bne.n	80027ec <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	429a      	cmp	r2, r3
 8002878:	d00d      	beq.n	8002896 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002882:	461a      	mov	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3318      	adds	r3, #24
 80028aa:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028bc:	e03f      	b.n	800293e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80028be:	2301      	movs	r3, #1
 80028c0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	3304      	adds	r3, #4
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d028      	beq.n	800293e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68d9      	ldr	r1, [r3, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db1b      	blt.n	800293a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3304      	adds	r3, #4
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fd1a 	bl	8006348 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	3304      	adds	r3, #4
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3301      	adds	r3, #1
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002938:	e001      	b.n	800293e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_ETH_ReleaseTxPacket+0xac>
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1b9      	bne.n	80028be <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d115      	bne.n	800299c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002978:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d10b      	bne.n	800299c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298c:	461a      	mov	r2, r3
 800298e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002992:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f002 fff0 	bl	800597c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d115      	bne.n	80029dc <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10b      	bne.n	80029dc <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029cc:	461a      	mov	r2, r3
 80029ce:	f248 0301 	movw	r3, #32769	@ 0x8001
 80029d2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f002 ffe0 	bl	800599c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80029e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029f0:	d153      	bne.n	8002a9a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80029fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a06:	d148      	bne.n	8002a9a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f043 0208 	orr.w	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a20:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2c:	d11e      	bne.n	8002a6c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a36:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002a3a:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002a3e:	4013      	ands	r3, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	22e0      	movs	r2, #224	@ 0xe0
 8002a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002a6a:	e013      	b.n	8002a94 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a74:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002a78:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002a90:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f002 ff91 	bl	80059bc <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002aa2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	22e0      	movs	r2, #224	@ 0xe0
 8002ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f002 ff6c 	bl	80059bc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d10f      	bne.n	8002b1c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b04:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f844 	bl	8002b9c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d10f      	bne.n	8002b4c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f836 	bl	8002bb0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002b4c:	f7ff fb2a 	bl	80021a4 <HAL_GetCurrentCPUID>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d10d      	bne.n	8002b72 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b56:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <HAL_ETH_IRQHandler+0x240>)
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <HAL_ETH_IRQHandler+0x240>)
 8002b64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f82a 	bl	8002bc4 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8002b70:	e00c      	b.n	8002b8c <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_ETH_IRQHandler+0x244>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_ETH_IRQHandler+0x244>)
 8002b80:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f81c 	bl	8002bc4 <HAL_ETH_WakeUpCallback>
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	58000080 	.word	0x58000080
 8002b98:	580000c0 	.word	0x580000c0

08002b9c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03e      	b.n	8002c78 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c02:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	055b      	lsls	r3, r3, #21
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f043 030c 	orr.w	r3, r3, #12
 8002c26:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002c3a:	f7ff f92b 	bl	8001e94 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c40:	e009      	b.n	8002c56 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002c42:	f7ff f927 	bl	8001e94 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c50:	d901      	bls.n	8002c56 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e010      	b.n	8002c78 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e03c      	b.n	8002d1c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002caa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	055b      	lsls	r3, r3, #21
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 030c 	bic.w	r3, r3, #12
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_ETH_WritePHYRegister+0xa4>)
 8002ce2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <HAL_ETH_WritePHYRegister+0xa4>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002cee:	f7ff f8d1 	bl	8001e94 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002cf4:	e009      	b.n	8002d0a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002cf6:	f7ff f8cd 	bl	8001e94 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d04:	d901      	bls.n	8002d0a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e008      	b.n	8002d1c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ed      	bne.n	8002cf6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40028000 	.word	0x40028000

08002d28 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e1c3      	b.n	80030c4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf0c      	ite	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	2300      	movne	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0e5b      	lsrs	r3, r3, #25
 8002f86:	f003 021f 	and.w	r2, r3, #31
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	63da      	str	r2, [r3, #60]	@ 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b29a      	uxth	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	649a      	str	r2, [r3, #72]	@ 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003050:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003060:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e00b      	b.n	80030fc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d105      	bne.n	80030fa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f86d 	bl	80031d0 <ETH_SetMACConfig>

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003114:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800311c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800311e:	f001 ff61 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8003122:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d908      	bls.n	800313e <HAL_ETH_SetMDIOClockRange+0x3a>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d804      	bhi.n	800313e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e027      	b.n	800318e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d908      	bls.n	8003158 <HAL_ETH_SetMDIOClockRange+0x54>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d204      	bcs.n	8003158 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e01a      	b.n	800318e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d303      	bcc.n	8003168 <HAL_ETH_SetMDIOClockRange+0x64>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d911      	bls.n	800318c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4a10      	ldr	r2, [pc, #64]	@ (80031ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d908      	bls.n	8003182 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4a0f      	ldr	r2, [pc, #60]	@ (80031b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d804      	bhi.n	8003182 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e005      	b.n	800318e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e000      	b.n	800318e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800318c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	01312cff 	.word	0x01312cff
 80031a4:	02160ebf 	.word	0x02160ebf
 80031a8:	03938700 	.word	0x03938700
 80031ac:	05f5e0ff 	.word	0x05f5e0ff
 80031b0:	08f0d17f 	.word	0x08f0d17f

080031b4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80031e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	791b      	ldrb	r3, [r3, #4]
 80031e8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80031ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
 80031f0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80031f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	7b5b      	ldrb	r3, [r3, #13]
 80031f8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	7b9b      	ldrb	r3, [r3, #14]
 8003200:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	7bdb      	ldrb	r3, [r3, #15]
 8003208:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800320a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	7c12      	ldrb	r2, [r2, #16]
 8003210:	2a00      	cmp	r2, #0
 8003212:	d102      	bne.n	800321a <ETH_SetMACConfig+0x4a>
 8003214:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003218:	e000      	b.n	800321c <ETH_SetMACConfig+0x4c>
 800321a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800321c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	7c52      	ldrb	r2, [r2, #17]
 8003222:	2a00      	cmp	r2, #0
 8003224:	d102      	bne.n	800322c <ETH_SetMACConfig+0x5c>
 8003226:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800322a:	e000      	b.n	800322e <ETH_SetMACConfig+0x5e>
 800322c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800322e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7c9b      	ldrb	r3, [r3, #18]
 8003234:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003236:	431a      	orrs	r2, r3
               macconf->Speed |
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800323c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	7f1b      	ldrb	r3, [r3, #28]
 8003248:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800324a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	7f5b      	ldrb	r3, [r3, #29]
 8003250:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003252:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	7f92      	ldrb	r2, [r2, #30]
 8003258:	2a00      	cmp	r2, #0
 800325a:	d102      	bne.n	8003262 <ETH_SetMACConfig+0x92>
 800325c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003260:	e000      	b.n	8003264 <ETH_SetMACConfig+0x94>
 8003262:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003264:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	7fdb      	ldrb	r3, [r3, #31]
 800326a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800326c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d102      	bne.n	800327e <ETH_SetMACConfig+0xae>
 8003278:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800327c:	e000      	b.n	8003280 <ETH_SetMACConfig+0xb0>
 800327e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003280:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003286:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800328e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003290:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b56      	ldr	r3, [pc, #344]	@ (80033fc <ETH_SetMACConfig+0x22c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80032bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80032c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80032ce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80032d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d102      	bne.n	80032e2 <ETH_SetMACConfig+0x112>
 80032dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032e0:	e000      	b.n	80032e4 <ETH_SetMACConfig+0x114>
 80032e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80032e4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <ETH_SetMACConfig+0x230>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	430b      	orrs	r3, r1
 8003300:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003308:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <ETH_SetMACConfig+0x234>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	430b      	orrs	r3, r1
 8003324:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800332c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003332:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800333a:	2a00      	cmp	r2, #0
 800333c:	d101      	bne.n	8003342 <ETH_SetMACConfig+0x172>
 800333e:	2280      	movs	r2, #128	@ 0x80
 8003340:	e000      	b.n	8003344 <ETH_SetMACConfig+0x174>
 8003342:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003344:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003356:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	68f9      	ldr	r1, [r7, #12]
 8003362:	430b      	orrs	r3, r1
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800336c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003374:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f023 0103 	bic.w	r1, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	430a      	orrs	r2, r1
 800338e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800339a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80033b6:	2a00      	cmp	r2, #0
 80033b8:	d101      	bne.n	80033be <ETH_SetMACConfig+0x1ee>
 80033ba:	2240      	movs	r2, #64	@ 0x40
 80033bc:	e000      	b.n	80033c0 <ETH_SetMACConfig+0x1f0>
 80033be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80033c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80033c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80033d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80033e0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	00048083 	.word	0x00048083
 8003400:	c0f88000 	.word	0xc0f88000
 8003404:	fffffef0 	.word	0xfffffef0

08003408 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b38      	ldr	r3, [pc, #224]	@ (8003500 <ETH_SetDMAConfig+0xf8>)
 800341e:	4013      	ands	r3, r2
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	6811      	ldr	r1, [r2, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800342e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800343a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	7b1b      	ldrb	r3, [r3, #12]
 8003440:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <ETH_SetDMAConfig+0xfc>)
 8003452:	4013      	ands	r3, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	430b      	orrs	r3, r1
 800345c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003460:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7b5b      	ldrb	r3, [r3, #13]
 8003466:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003478:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <ETH_SetDMAConfig+0x100>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	430b      	orrs	r3, r1
 8003488:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800348c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	7d1b      	ldrb	r3, [r3, #20]
 8003498:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800349a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	7f5b      	ldrb	r3, [r3, #29]
 80034a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80034b2:	4b16      	ldr	r3, [pc, #88]	@ (800350c <ETH_SetDMAConfig+0x104>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	430b      	orrs	r3, r1
 80034be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034c2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	7f1b      	ldrb	r3, [r3, #28]
 80034ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <ETH_SetDMAConfig+0x108>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	ffff87fd 	.word	0xffff87fd
 8003504:	ffff2ffe 	.word	0xffff2ffe
 8003508:	fffec000 	.word	0xfffec000
 800350c:	ffc0efef 	.word	0xffc0efef
 8003510:	7fc0ffff 	.word	0x7fc0ffff

08003514 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0a4      	sub	sp, #144	@ 0x90
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003522:	2300      	movs	r3, #0
 8003524:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003554:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800355c:	2300      	movs	r3, #0
 800355e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800356c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003570:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800358e:	2300      	movs	r3, #0
 8003590:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003592:	2300      	movs	r3, #0
 8003594:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003596:	2300      	movs	r3, #0
 8003598:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80035ac:	2320      	movs	r3, #32
 80035ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80035be:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80035d0:	2302      	movs	r3, #2
 80035d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80035ee:	2300      	movs	r3, #0
 80035f0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fde6 	bl	80031d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003604:	2301      	movs	r3, #1
 8003606:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003608:	2301      	movs	r3, #1
 800360a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800361e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003622:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003628:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800362c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003634:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fee1 	bl	8003408 <ETH_SetDMAConfig>
}
 8003646:	bf00      	nop
 8003648:	3790      	adds	r7, #144	@ 0x90
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e01d      	b.n	8003698 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	440b      	add	r3, r1
 800366c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	3206      	adds	r2, #6
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3301      	adds	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d9de      	bls.n	800365c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ac:	461a      	mov	r2, r3
 80036ae:	2303      	movs	r3, #3
 80036b0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036c0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036d0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e023      	b.n	8003736 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6919      	ldr	r1, [r3, #16]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	3212      	adds	r2, #18
 800372c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d9d8      	bls.n	80036ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003762:	461a      	mov	r2, r3
 8003764:	2303      	movs	r3, #3
 8003766:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003776:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800379c:	b480      	push	{r7}
 800379e:	b08d      	sub	sp, #52	@ 0x34
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3318      	adds	r3, #24
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037de:	d007      	beq.n	80037f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	3304      	adds	r3, #4
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80037f0:	2302      	movs	r3, #2
 80037f2:	e259      	b.n	8003ca8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d044      	beq.n	800388a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b75      	ldr	r3, [pc, #468]	@ (80039dc <ETH_Prepare_Tx_Descriptors+0x240>)
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380c:	431a      	orrs	r2, r3
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d027      	beq.n	800388a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	b29a      	uxth	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	431a      	orrs	r2, r3
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003878:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003888:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4b51      	ldr	r3, [pc, #324]	@ (80039e0 <ETH_Prepare_Tx_Descriptors+0x244>)
 800389c:	4013      	ands	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	6992      	ldr	r2, [r2, #24]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d036      	beq.n	800393a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80038d8:	f3bf 8f5f 	dmb	sy
}
 80038dc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80038ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ec:	3301      	adds	r3, #1
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d902      	bls.n	80038fc <ETH_Prepare_Tx_Descriptors+0x160>
 80038f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f8:	3b04      	subs	r3, #4
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003904:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003918:	d10f      	bne.n	800393a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003924:	f3bf 8f5f 	dmb	sy
}
 8003928:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	e1b6      	b.n	8003ca8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003950:	4013      	ands	r3, r2
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	431a      	orrs	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <ETH_Prepare_Tx_Descriptors+0x248>)
 800397a:	4013      	ands	r3, r2
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	6852      	ldr	r2, [r2, #4]
 8003980:	0412      	lsls	r2, r2, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	e008      	b.n	800399c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	2200      	movs	r2, #0
 800398e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003996:	4013      	ands	r3, r2
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d021      	beq.n	80039ec <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	04db      	lsls	r3, r3, #19
 80039b6:	431a      	orrs	r2, r3
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69d2      	ldr	r2, [r2, #28]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e02e      	b.n	8003a3a <ETH_Prepare_Tx_Descriptors+0x29e>
 80039dc:	ffff0000 	.word	0xffff0000
 80039e0:	ffffc000 	.word	0xffffc000
 80039e4:	c000ffff 	.word	0xc000ffff
 80039e8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4b7b      	ldr	r3, [pc, #492]	@ (8003be0 <ETH_Prepare_Tx_Descriptors+0x444>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	6852      	ldr	r2, [r2, #4]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003a70:	f3bf 8f5f 	dmb	sy
}
 8003a74:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80da 	beq.w	8003c44 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003aa2:	e0cf      	b.n	8003c44 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d902      	bls.n	8003ac2 <ETH_Prepare_Tx_Descriptors+0x326>
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aca:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ae4:	d007      	beq.n	8003af6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aea:	3304      	adds	r3, #4
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d029      	beq.n	8003b4a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b02:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b08:	e019      	b.n	8003b3e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003b0a:	f3bf 8f5f 	dmb	sy
}
 8003b0e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	3301      	adds	r3, #1
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d902      	bls.n	8003b2e <ETH_Prepare_Tx_Descriptors+0x392>
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b36:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3e1      	bcc.n	8003b0a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0ae      	b.n	8003ca8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	6852      	ldr	r2, [r2, #4]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	6852      	ldr	r2, [r2, #4]
 8003b96:	0412      	lsls	r2, r2, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e008      	b.n	8003bb2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	6a3a      	ldr	r2, [r7, #32]
 8003bb0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <ETH_Prepare_Tx_Descriptors+0x450>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	69d2      	ldr	r2, [r2, #28]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e020      	b.n	8003c20 <ETH_Prepare_Tx_Descriptors+0x484>
 8003bde:	bf00      	nop
 8003be0:	ffff8000 	.word	0xffff8000
 8003be4:	ffffc000 	.word	0xffffc000
 8003be8:	c000ffff 	.word	0xc000ffff
 8003bec:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c26:	f3bf 8f5f 	dmb	sy
}
 8003c2a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f47f af2b 	bne.w	8003aa4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e005      	b.n	8003c6e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c82:	3304      	adds	r3, #4
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c90:	b672      	cpsid	i
}
 8003c92:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca2:	b662      	cpsie	i
}
 8003ca4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3734      	adds	r7, #52	@ 0x34
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	ffff8000 	.word	0xffff8000

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cc6:	4b89      	ldr	r3, [pc, #548]	@ (8003eec <HAL_GPIO_Init+0x234>)
 8003cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cca:	e194      	b.n	8003ff6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8186 	beq.w	8003ff0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d005      	beq.n	8003cfc <HAL_GPIO_Init+0x44>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d130      	bne.n	8003d5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d32:	2201      	movs	r2, #1
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0201 	and.w	r2, r3, #1
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d123      	bne.n	8003dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80e0 	beq.w	8003ff0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e30:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <HAL_GPIO_Init+0x238>)
 8003e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e36:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef0 <HAL_GPIO_Init+0x238>)
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef0 <HAL_GPIO_Init+0x238>)
 8003e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e4e:	4a29      	ldr	r2, [pc, #164]	@ (8003ef4 <HAL_GPIO_Init+0x23c>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <HAL_GPIO_Init+0x240>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d052      	beq.n	8003f20 <HAL_GPIO_Init+0x268>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003efc <HAL_GPIO_Init+0x244>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_GPIO_Init+0x22e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <HAL_GPIO_Init+0x248>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02b      	beq.n	8003ee2 <HAL_GPIO_Init+0x22a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <HAL_GPIO_Init+0x24c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d025      	beq.n	8003ede <HAL_GPIO_Init+0x226>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <HAL_GPIO_Init+0x250>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <HAL_GPIO_Init+0x222>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f0c <HAL_GPIO_Init+0x254>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d019      	beq.n	8003ed6 <HAL_GPIO_Init+0x21e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f10 <HAL_GPIO_Init+0x258>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_GPIO_Init+0x21a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a19      	ldr	r2, [pc, #100]	@ (8003f14 <HAL_GPIO_Init+0x25c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00d      	beq.n	8003ece <HAL_GPIO_Init+0x216>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	@ (8003f18 <HAL_GPIO_Init+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <HAL_GPIO_Init+0x212>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <HAL_GPIO_Init+0x264>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_GPIO_Init+0x20e>
 8003ec2:	2309      	movs	r3, #9
 8003ec4:	e02d      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e02b      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	e029      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e027      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e025      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e023      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e021      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e01f      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e01d      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e01b      	b.n	8003f22 <HAL_GPIO_Init+0x26a>
 8003eea:	bf00      	nop
 8003eec:	58000080 	.word	0x58000080
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	58000400 	.word	0x58000400
 8003ef8:	58020000 	.word	0x58020000
 8003efc:	58020400 	.word	0x58020400
 8003f00:	58020800 	.word	0x58020800
 8003f04:	58020c00 	.word	0x58020c00
 8003f08:	58021000 	.word	0x58021000
 8003f0c:	58021400 	.word	0x58021400
 8003f10:	58021800 	.word	0x58021800
 8003f14:	58021c00 	.word	0x58021c00
 8003f18:	58022000 	.word	0x58022000
 8003f1c:	58022400 	.word	0x58022400
 8003f20:	2300      	movs	r3, #0
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	f002 0203 	and.w	r2, r2, #3
 8003f28:	0092      	lsls	r2, r2, #2
 8003f2a:	4093      	lsls	r3, r2
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f32:	4938      	ldr	r1, [pc, #224]	@ (8004014 <HAL_GPIO_Init+0x35c>)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f ae63 	bne.w	8003ccc <HAL_GPIO_Init+0x14>
  }
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3724      	adds	r7, #36	@ 0x24
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	58000400 	.word	0x58000400

08004018 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004020:	4a08      	ldr	r2, [pc, #32]	@ (8004044 <HAL_HSEM_FastTake+0x2c>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3320      	adds	r3, #32
 8004026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402a:	4a07      	ldr	r2, [pc, #28]	@ (8004048 <HAL_HSEM_FastTake+0x30>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	58026400 	.word	0x58026400
 8004048:	80000300 	.word	0x80000300

0800404c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004056:	4906      	ldr	r1, [pc, #24]	@ (8004070 <HAL_HSEM_Release+0x24>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	58026400 	.word	0x58026400

08004074 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800407c:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	2b06      	cmp	r3, #6
 8004086:	d00a      	beq.n	800409e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004088:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e040      	b.n	800411c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e03e      	b.n	800411c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800409e:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80040a6:	491f      	ldr	r1, [pc, #124]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040ae:	f7fd fef1 	bl	8001e94 <HAL_GetTick>
 80040b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040b4:	e009      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040b6:	f7fd feed 	bl	8001e94 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c4:	d901      	bls.n	80040ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e028      	b.n	800411c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ca:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	d1ee      	bne.n	80040b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b1e      	cmp	r3, #30
 80040dc:	d008      	beq.n	80040f0 <HAL_PWREx_ConfigSupply+0x7c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e2:	d005      	beq.n	80040f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b1d      	cmp	r3, #29
 80040e8:	d002      	beq.n	80040f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b2d      	cmp	r3, #45	@ 0x2d
 80040ee:	d114      	bne.n	800411a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80040f0:	f7fd fed0 	bl	8001e94 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040f6:	e009      	b.n	800410c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040f8:	f7fd fecc 	bl	8001e94 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004106:	d901      	bls.n	800410c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_PWREx_ConfigSupply+0xb0>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d1ee      	bne.n	80040f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	58024800 	.word	0x58024800

08004128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	@ 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f000 bc1d 	b.w	8004976 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8087 	beq.w	8004258 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414a:	4b99      	ldr	r3, [pc, #612]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004154:	4b96      	ldr	r3, [pc, #600]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415c:	2b10      	cmp	r3, #16
 800415e:	d007      	beq.n	8004170 <HAL_RCC_OscConfig+0x48>
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	2b18      	cmp	r3, #24
 8004164:	d110      	bne.n	8004188 <HAL_RCC_OscConfig+0x60>
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d10b      	bne.n	8004188 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	4b8f      	ldr	r3, [pc, #572]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d06c      	beq.n	8004256 <HAL_RCC_OscConfig+0x12e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d168      	bne.n	8004256 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e3f6      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004190:	d106      	bne.n	80041a0 <HAL_RCC_OscConfig+0x78>
 8004192:	4b87      	ldr	r3, [pc, #540]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a86      	ldr	r2, [pc, #536]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e02e      	b.n	80041fe <HAL_RCC_OscConfig+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x9a>
 80041a8:	4b81      	ldr	r3, [pc, #516]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a80      	ldr	r2, [pc, #512]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b7e      	ldr	r3, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7d      	ldr	r2, [pc, #500]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e01d      	b.n	80041fe <HAL_RCC_OscConfig+0xd6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041ca:	d10c      	bne.n	80041e6 <HAL_RCC_OscConfig+0xbe>
 80041cc:	4b78      	ldr	r3, [pc, #480]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a77      	ldr	r2, [pc, #476]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b75      	ldr	r3, [pc, #468]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a74      	ldr	r2, [pc, #464]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e00b      	b.n	80041fe <HAL_RCC_OscConfig+0xd6>
 80041e6:	4b72      	ldr	r3, [pc, #456]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a71      	ldr	r2, [pc, #452]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6e      	ldr	r2, [pc, #440]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d013      	beq.n	800422e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd fe45 	bl	8001e94 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420e:	f7fd fe41 	bl	8001e94 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	@ 0x64
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e3aa      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004220:	4b63      	ldr	r3, [pc, #396]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0xe6>
 800422c:	e014      	b.n	8004258 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd fe31 	bl	8001e94 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004236:	f7fd fe2d 	bl	8001e94 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b64      	cmp	r3, #100	@ 0x64
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e396      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x10e>
 8004254:	e000      	b.n	8004258 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004256:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80cb 	beq.w	80043fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4b52      	ldr	r3, [pc, #328]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004270:	4b4f      	ldr	r3, [pc, #316]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_RCC_OscConfig+0x164>
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2b18      	cmp	r3, #24
 8004280:	d156      	bne.n	8004330 <HAL_RCC_OscConfig+0x208>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d151      	bne.n	8004330 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428c:	4b48      	ldr	r3, [pc, #288]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_OscConfig+0x17c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e368      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042a4:	4b42      	ldr	r3, [pc, #264]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 0219 	bic.w	r2, r3, #25
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	493f      	ldr	r1, [pc, #252]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042b6:	f7fd fded 	bl	8001e94 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd fde9 	bl	8001e94 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e352      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d0:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	f7fd fde6 	bl	8001eac <HAL_GetREVID>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d817      	bhi.n	800431a <HAL_RCC_OscConfig+0x1f2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b40      	cmp	r3, #64	@ 0x40
 80042f0:	d108      	bne.n	8004304 <HAL_RCC_OscConfig+0x1dc>
 80042f2:	4b2f      	ldr	r3, [pc, #188]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042fa:	4a2d      	ldr	r2, [pc, #180]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004300:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004302:	e07b      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b2a      	ldr	r3, [pc, #168]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	031b      	lsls	r3, r3, #12
 8004312:	4927      	ldr	r1, [pc, #156]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004318:	e070      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	4921      	ldr	r1, [pc, #132]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432e:	e065      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d048      	beq.n	80043ca <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004338:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 0219 	bic.w	r2, r3, #25
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	491a      	ldr	r1, [pc, #104]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd fda3 	bl	8001e94 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd fd9f 	bl	8001e94 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e308      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	f7fd fd9c 	bl	8001eac <HAL_GetREVID>
 8004374:	4603      	mov	r3, r0
 8004376:	f241 0203 	movw	r2, #4099	@ 0x1003
 800437a:	4293      	cmp	r3, r2
 800437c:	d81a      	bhi.n	80043b4 <HAL_RCC_OscConfig+0x28c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d108      	bne.n	8004398 <HAL_RCC_OscConfig+0x270>
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800438e:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	e031      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	4902      	ldr	r1, [pc, #8]	@ (80043b0 <HAL_RCC_OscConfig+0x288>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	e026      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
 80043ae:	bf00      	nop
 80043b0:	58024400 	.word	0x58024400
 80043b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	4997      	ldr	r1, [pc, #604]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	e018      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b95      	ldr	r3, [pc, #596]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a94      	ldr	r2, [pc, #592]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd fd5d 	bl	8001e94 <HAL_GetTick>
 80043da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7fd fd59 	bl	8001e94 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e2c2      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f0:	4b8b      	ldr	r3, [pc, #556]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a9 	beq.w	800455c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b85      	ldr	r3, [pc, #532]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004412:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004414:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004418:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d007      	beq.n	8004430 <HAL_RCC_OscConfig+0x308>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b18      	cmp	r3, #24
 8004424:	d13a      	bne.n	800449c <HAL_RCC_OscConfig+0x374>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d135      	bne.n	800449c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004430:	4b7b      	ldr	r3, [pc, #492]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_OscConfig+0x320>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b80      	cmp	r3, #128	@ 0x80
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e296      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004448:	f7fd fd30 	bl	8001eac <HAL_GetREVID>
 800444c:	4603      	mov	r3, r0
 800444e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004452:	4293      	cmp	r3, r2
 8004454:	d817      	bhi.n	8004486 <HAL_RCC_OscConfig+0x35e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b20      	cmp	r3, #32
 800445c:	d108      	bne.n	8004470 <HAL_RCC_OscConfig+0x348>
 800445e:	4b70      	ldr	r3, [pc, #448]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004466:	4a6e      	ldr	r2, [pc, #440]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800446c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800446e:	e075      	b.n	800455c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004470:	4b6b      	ldr	r3, [pc, #428]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	069b      	lsls	r3, r3, #26
 800447e:	4968      	ldr	r1, [pc, #416]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004484:	e06a      	b.n	800455c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004486:	4b66      	ldr	r3, [pc, #408]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	4962      	ldr	r1, [pc, #392]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800449a:	e05f      	b.n	800455c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d042      	beq.n	800452a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd fcf0 	bl	8001e94 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044b8:	f7fd fcec 	bl	8001e94 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e255      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ca:	4b55      	ldr	r3, [pc, #340]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d6:	f7fd fce9 	bl	8001eac <HAL_GetREVID>
 80044da:	4603      	mov	r3, r0
 80044dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d817      	bhi.n	8004514 <HAL_RCC_OscConfig+0x3ec>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d108      	bne.n	80044fe <HAL_RCC_OscConfig+0x3d6>
 80044ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80044f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044fa:	6053      	str	r3, [r2, #4]
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0x434>
 80044fe:	4b48      	ldr	r3, [pc, #288]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	069b      	lsls	r3, r3, #26
 800450c:	4944      	ldr	r1, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e023      	b.n	800455c <HAL_RCC_OscConfig+0x434>
 8004514:	4b42      	ldr	r3, [pc, #264]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	493f      	ldr	r1, [pc, #252]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
 8004528:	e018      	b.n	800455c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800452a:	4b3d      	ldr	r3, [pc, #244]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3c      	ldr	r2, [pc, #240]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fcad 	bl	8001e94 <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800453e:	f7fd fca9 	bl	8001e94 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e212      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004550:	4b33      	ldr	r3, [pc, #204]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d036      	beq.n	80045d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d019      	beq.n	80045a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004574:	4a2a      	ldr	r2, [pc, #168]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fc8a 	bl	8001e94 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd fc86 	bl	8001e94 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1ef      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004596:	4b22      	ldr	r3, [pc, #136]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x45c>
 80045a2:	e018      	b.n	80045d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fd fc70 	bl	8001e94 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fd fc6c 	bl	8001e94 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e1d5      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ca:	4b15      	ldr	r3, [pc, #84]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d039      	beq.n	8004656 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01c      	beq.n	8004624 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045f6:	f7fd fc4d 	bl	8001e94 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd fc49 	bl	8001e94 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1b2      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x4d6>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004624:	4b9b      	ldr	r3, [pc, #620]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a9a      	ldr	r2, [pc, #616]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800462a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004630:	f7fd fc30 	bl	8001e94 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004638:	f7fd fc2c 	bl	8001e94 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e195      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800464a:	4b92      	ldr	r3, [pc, #584]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8081 	beq.w	8004766 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004664:	4b8c      	ldr	r3, [pc, #560]	@ (8004898 <HAL_RCC_OscConfig+0x770>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a8b      	ldr	r2, [pc, #556]	@ (8004898 <HAL_RCC_OscConfig+0x770>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004670:	f7fd fc10 	bl	8001e94 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fd fc0c 	bl	8001e94 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	@ 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e175      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468a:	4b83      	ldr	r3, [pc, #524]	@ (8004898 <HAL_RCC_OscConfig+0x770>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x584>
 800469e:	4b7d      	ldr	r3, [pc, #500]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046aa:	e02d      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x5a6>
 80046b4:	4b77      	ldr	r3, [pc, #476]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	4a76      	ldr	r2, [pc, #472]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c0:	4b74      	ldr	r3, [pc, #464]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a73      	ldr	r2, [pc, #460]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c8>
 80046d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	4a6e      	ldr	r2, [pc, #440]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046f0:	4b68      	ldr	r3, [pc, #416]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	4a67      	ldr	r2, [pc, #412]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fc:	4b65      	ldr	r3, [pc, #404]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	4a64      	ldr	r2, [pc, #400]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd fbc0 	bl	8001e94 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd fbbc 	bl	8001e94 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e123      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472e:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x5f0>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fd fbaa 	bl	8001e94 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fd fba6 	bl	8001e94 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e10d      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800475a:	4b4e      	ldr	r3, [pc, #312]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8102 	beq.w	8004974 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004770:	4b48      	ldr	r3, [pc, #288]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004778:	2b18      	cmp	r3, #24
 800477a:	f000 80bd 	beq.w	80048f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	2b02      	cmp	r3, #2
 8004784:	f040 809e 	bne.w	80048c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b42      	ldr	r3, [pc, #264]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a41      	ldr	r2, [pc, #260]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fb7e 	bl	8001e94 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fb7a 	bl	8001e94 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0e3      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ae:	4b39      	ldr	r3, [pc, #228]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ba:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047be:	4b37      	ldr	r3, [pc, #220]	@ (800489c <HAL_RCC_OscConfig+0x774>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4931      	ldr	r1, [pc, #196]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	3b01      	subs	r3, #1
 80047da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e2:	3b01      	subs	r3, #1
 80047e4:	025b      	lsls	r3, r3, #9
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	3b01      	subs	r3, #1
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004804:	4923      	ldr	r1, [pc, #140]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800480a:	4b22      	ldr	r3, [pc, #136]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	4a21      	ldr	r2, [pc, #132]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004816:	4b1f      	ldr	r3, [pc, #124]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800481a:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <HAL_RCC_OscConfig+0x778>)
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004822:	00d2      	lsls	r2, r2, #3
 8004824:	491b      	ldr	r1, [pc, #108]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800482a:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	f023 020c 	bic.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	4917      	ldr	r1, [pc, #92]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800483c:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f023 0202 	bic.w	r2, r3, #2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004848:	4912      	ldr	r1, [pc, #72]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800484e:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	4a10      	ldr	r2, [pc, #64]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485a:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	4a0d      	ldr	r2, [pc, #52]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	4a07      	ldr	r2, [pc, #28]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a04      	ldr	r2, [pc, #16]	@ (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd fb03 	bl	8001e94 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004890:	e011      	b.n	80048b6 <HAL_RCC_OscConfig+0x78e>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
 8004898:	58024800 	.word	0x58024800
 800489c:	fffffc0c 	.word	0xfffffc0c
 80048a0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fd faf6 	bl	8001e94 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e05f      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b6:	4b32      	ldr	r3, [pc, #200]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x77c>
 80048c2:	e057      	b.n	8004974 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 80048ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fae0 	bl	8001e94 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fadc 	bl	8001e94 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e045      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ea:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x7b0>
 80048f6:	e03d      	b.n	8004974 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048f8:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <HAL_RCC_OscConfig+0x858>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	2b01      	cmp	r3, #1
 800490a:	d031      	beq.n	8004970 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d12a      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d122      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d11a      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004946:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d111      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3730      	adds	r7, #48	@ 0x30
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400

08004984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e19c      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b8a      	ldr	r3, [pc, #552]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d910      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b87      	ldr	r3, [pc, #540]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	4985      	ldr	r1, [pc, #532]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b83      	ldr	r3, [pc, #524]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e184      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d908      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e4:	4b78      	ldr	r3, [pc, #480]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	4975      	ldr	r1, [pc, #468]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d010      	beq.n	8004a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	4b70      	ldr	r3, [pc, #448]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d908      	bls.n	8004a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a12:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	496a      	ldr	r1, [pc, #424]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d010      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	4b64      	ldr	r3, [pc, #400]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d908      	bls.n	8004a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a40:	4b61      	ldr	r3, [pc, #388]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	495e      	ldr	r1, [pc, #376]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d010      	beq.n	8004a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	4b59      	ldr	r3, [pc, #356]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d908      	bls.n	8004a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a6e:	4b56      	ldr	r3, [pc, #344]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4953      	ldr	r1, [pc, #332]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f023 020f 	bic.w	r2, r3, #15
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4947      	ldr	r1, [pc, #284]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d055      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004aba:	4b43      	ldr	r3, [pc, #268]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	4940      	ldr	r1, [pc, #256]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d121      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0f6      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aec:	4b36      	ldr	r3, [pc, #216]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d115      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0ea      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b04:	4b30      	ldr	r3, [pc, #192]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0de      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b14:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0d6      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b24:	4b28      	ldr	r3, [pc, #160]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f023 0207 	bic.w	r2, r3, #7
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4925      	ldr	r1, [pc, #148]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd f9ad 	bl	8001e94 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3e:	f7fd f9a9 	bl	8001e94 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0be      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b54:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d1eb      	bne.n	8004b3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d208      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f023 020f 	bic.w	r2, r3, #15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	490e      	ldr	r1, [pc, #56]	@ (8004bc8 <HAL_RCC_ClockConfig+0x244>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d214      	bcs.n	8004bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 020f 	bic.w	r2, r3, #15
 8004baa:	4906      	ldr	r1, [pc, #24]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <HAL_RCC_ClockConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e086      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x34e>
 8004bc4:	52002000 	.word	0x52002000
 8004bc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d208      	bcs.n	8004bfa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004be8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	4939      	ldr	r1, [pc, #228]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d010      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	4b34      	ldr	r3, [pc, #208]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d208      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c16:	4b31      	ldr	r3, [pc, #196]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	492e      	ldr	r1, [pc, #184]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d208      	bcs.n	8004c56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c44:	4b25      	ldr	r3, [pc, #148]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	4922      	ldr	r1, [pc, #136]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d208      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c72:	4b1a      	ldr	r3, [pc, #104]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4917      	ldr	r1, [pc, #92]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c84:	f000 f834 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	4912      	ldr	r1, [pc, #72]	@ (8004ce0 <HAL_RCC_ClockConfig+0x35c>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <HAL_RCC_ClockConfig+0x358>)
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce0 <HAL_RCC_ClockConfig+0x35c>)
 8004cac:	5cd3      	ldrb	r3, [r2, r3]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce4 <HAL_RCC_ClockConfig+0x360>)
 8004cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <HAL_RCC_ClockConfig+0x364>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cec <HAL_RCC_ClockConfig+0x368>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc fda4 	bl	8001814 <HAL_InitTick>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	080196b0 	.word	0x080196b0
 8004ce4:	24000004 	.word	0x24000004
 8004ce8:	24000000 	.word	0x24000000
 8004cec:	24000008 	.word	0x24000008

08004cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	@ 0x24
 8004cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf6:	4bb3      	ldr	r3, [pc, #716]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cfe:	2b18      	cmp	r3, #24
 8004d00:	f200 8155 	bhi.w	8004fae <HAL_RCC_GetSysClockFreq+0x2be>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004faf 	.word	0x08004faf
 8004d14:	08004faf 	.word	0x08004faf
 8004d18:	08004faf 	.word	0x08004faf
 8004d1c:	08004faf 	.word	0x08004faf
 8004d20:	08004faf 	.word	0x08004faf
 8004d24:	08004faf 	.word	0x08004faf
 8004d28:	08004faf 	.word	0x08004faf
 8004d2c:	08004d97 	.word	0x08004d97
 8004d30:	08004faf 	.word	0x08004faf
 8004d34:	08004faf 	.word	0x08004faf
 8004d38:	08004faf 	.word	0x08004faf
 8004d3c:	08004faf 	.word	0x08004faf
 8004d40:	08004faf 	.word	0x08004faf
 8004d44:	08004faf 	.word	0x08004faf
 8004d48:	08004faf 	.word	0x08004faf
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004faf 	.word	0x08004faf
 8004d54:	08004faf 	.word	0x08004faf
 8004d58:	08004faf 	.word	0x08004faf
 8004d5c:	08004faf 	.word	0x08004faf
 8004d60:	08004faf 	.word	0x08004faf
 8004d64:	08004faf 	.word	0x08004faf
 8004d68:	08004faf 	.word	0x08004faf
 8004d6c:	08004da3 	.word	0x08004da3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d70:	4b94      	ldr	r3, [pc, #592]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d7c:	4b91      	ldr	r3, [pc, #580]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	4a90      	ldr	r2, [pc, #576]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d8e:	e111      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d90:	4b8d      	ldr	r3, [pc, #564]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d92:	61bb      	str	r3, [r7, #24]
    break;
 8004d94:	e10e      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d96:	4b8d      	ldr	r3, [pc, #564]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d98:	61bb      	str	r3, [r7, #24]
    break;
 8004d9a:	e10b      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d9e:	61bb      	str	r3, [r7, #24]
    break;
 8004da0:	e108      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da2:	4b88      	ldr	r3, [pc, #544]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004dac:	4b85      	ldr	r3, [pc, #532]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004db6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004db8:	4b82      	ldr	r3, [pc, #520]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dc2:	4b80      	ldr	r3, [pc, #512]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc6:	08db      	lsrs	r3, r3, #3
 8004dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80e1 	beq.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	f000 8083 	beq.w	8004ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f200 80a1 	bhi.w	8004f38 <HAL_RCC_GetSysClockFreq+0x248>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x114>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d056      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e02:	e099      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e04:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02d      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e10:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	08db      	lsrs	r3, r3, #3
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	4b62      	ldr	r3, [pc, #392]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e6a:	e087      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b51      	ldr	r3, [pc, #324]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eae:	e065      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b40      	ldr	r3, [pc, #256]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef2:	e043      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f36:	e021      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	0a5b      	lsrs	r3, r3, #9
 8004f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f86:	3301      	adds	r3, #1
 8004f88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa0:	ee17 3a90 	vmov	r3, s15
 8004fa4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
    break;
 8004fac:	e002      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fb0:	61bb      	str	r3, [r7, #24]
    break;
 8004fb2:	bf00      	nop
  }

  return sysclockfreq;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3724      	adds	r7, #36	@ 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	03d09000 	.word	0x03d09000
 8004fcc:	003d0900 	.word	0x003d0900
 8004fd0:	017d7840 	.word	0x017d7840
 8004fd4:	46000000 	.word	0x46000000
 8004fd8:	4c742400 	.word	0x4c742400
 8004fdc:	4a742400 	.word	0x4a742400
 8004fe0:	4bbebc20 	.word	0x4bbebc20

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fea:	f7ff fe81 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490f      	ldr	r1, [pc, #60]	@ (8005038 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_RCC_GetHCLKFreq+0x50>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <HAL_RCC_GetHCLKFreq+0x54>)
 8005012:	5cd3      	ldrb	r3, [r2, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a07      	ldr	r2, [pc, #28]	@ (800503c <HAL_RCC_GetHCLKFreq+0x58>)
 8005020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005022:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005028:	4b04      	ldr	r3, [pc, #16]	@ (800503c <HAL_RCC_GetHCLKFreq+0x58>)
 800502a:	681b      	ldr	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	58024400 	.word	0x58024400
 8005038:	080196b0 	.word	0x080196b0
 800503c:	24000004 	.word	0x24000004
 8005040:	24000000 	.word	0x24000000

08005044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005048:	f7ff ffcc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4904      	ldr	r1, [pc, #16]	@ (800506c <HAL_RCC_GetPCLK1Freq+0x28>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	58024400 	.word	0x58024400
 800506c:	080196b0 	.word	0x080196b0

08005070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	223f      	movs	r2, #63	@ 0x3f
 800507e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005080:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0207 	and.w	r2, r3, #7
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050a4:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80050b0:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80050c8:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_RCC_GetClockConfig+0x7c>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050d4:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <HAL_RCC_GetClockConfig+0x80>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58024400 	.word	0x58024400
 80050f0:	52002000 	.word	0x52002000

080050f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e049      	b.n	800519a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f841 	bl	80051a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fa00 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e054      	b.n	800527a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a26      	ldr	r2, [pc, #152]	@ (8005288 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fa:	d01d      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a22      	ldr	r2, [pc, #136]	@ (800528c <HAL_TIM_Base_Start_IT+0xd4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <HAL_TIM_Base_Start_IT+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1f      	ldr	r2, [pc, #124]	@ (8005294 <HAL_TIM_Base_Start_IT+0xdc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <HAL_TIM_Base_Start_IT+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1c      	ldr	r2, [pc, #112]	@ (800529c <HAL_TIM_Base_Start_IT+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1b      	ldr	r2, [pc, #108]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d115      	bne.n	8005264 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xec>)
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b06      	cmp	r3, #6
 8005248:	d015      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0xbe>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d011      	beq.n	8005276 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005262:	e008      	b.n	8005276 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e000      	b.n	8005278 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40010400 	.word	0x40010400
 800529c:	40001800 	.word	0x40001800
 80052a0:	40014000 	.word	0x40014000
 80052a4:	00010007 	.word	0x00010007

080052a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0202 	mvn.w	r2, #2
 80052d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f905 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8f7 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f908 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b04      	cmp	r3, #4
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b04      	cmp	r3, #4
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0204 	mvn.w	r2, #4
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8db 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8cd 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8de 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b08      	cmp	r3, #8
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8b1 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8a3 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8b4 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0210 	mvn.w	r2, #16
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2208      	movs	r2, #8
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f887 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f879 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f88a 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc f9be 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b80      	cmp	r3, #128	@ 0x80
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f914 	bl	8005680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b80      	cmp	r3, #128	@ 0x80
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f907 	bl	8005694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005490:	2b40      	cmp	r3, #64	@ 0x40
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f838 	bl	8005522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0220 	mvn.w	r2, #32
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8c7 	bl	800566c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a40      	ldr	r2, [pc, #256]	@ (800564c <TIM_Base_SetConfig+0x114>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005556:	d00f      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3d      	ldr	r2, [pc, #244]	@ (8005650 <TIM_Base_SetConfig+0x118>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3c      	ldr	r2, [pc, #240]	@ (8005654 <TIM_Base_SetConfig+0x11c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3b      	ldr	r2, [pc, #236]	@ (8005658 <TIM_Base_SetConfig+0x120>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3a      	ldr	r2, [pc, #232]	@ (800565c <TIM_Base_SetConfig+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <TIM_Base_SetConfig+0x114>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2c      	ldr	r2, [pc, #176]	@ (8005650 <TIM_Base_SetConfig+0x118>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005654 <TIM_Base_SetConfig+0x11c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005658 <TIM_Base_SetConfig+0x120>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a29      	ldr	r2, [pc, #164]	@ (800565c <TIM_Base_SetConfig+0x124>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a28      	ldr	r2, [pc, #160]	@ (8005660 <TIM_Base_SetConfig+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a26      	ldr	r2, [pc, #152]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a10      	ldr	r2, [pc, #64]	@ (800564c <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00f      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a11      	ldr	r2, [pc, #68]	@ (8005660 <TIM_Base_SetConfig+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a10      	ldr	r2, [pc, #64]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0f      	ldr	r2, [pc, #60]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40010400 	.word	0x40010400
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800

0800566c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f00f fbcd 	bl	8014e54 <tcpip_init>
	LOCK_TCPIP_CORE();
 80056ba:	f000 fe51 	bl	8006360 <sys_lock_tcpip_core>
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80056ce:	4b99      	ldr	r3, [pc, #612]	@ (8005934 <MX_LWIP_Init+0x26c>)
 80056d0:	22c0      	movs	r2, #192	@ 0xc0
 80056d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80056d4:	4b97      	ldr	r3, [pc, #604]	@ (8005934 <MX_LWIP_Init+0x26c>)
 80056d6:	22a8      	movs	r2, #168	@ 0xa8
 80056d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80056da:	4b96      	ldr	r3, [pc, #600]	@ (8005934 <MX_LWIP_Init+0x26c>)
 80056dc:	2201      	movs	r2, #1
 80056de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80056e0:	4b94      	ldr	r3, [pc, #592]	@ (8005934 <MX_LWIP_Init+0x26c>)
 80056e2:	220a      	movs	r2, #10
 80056e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80056e6:	4b94      	ldr	r3, [pc, #592]	@ (8005938 <MX_LWIP_Init+0x270>)
 80056e8:	22ff      	movs	r2, #255	@ 0xff
 80056ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80056ec:	4b92      	ldr	r3, [pc, #584]	@ (8005938 <MX_LWIP_Init+0x270>)
 80056ee:	22ff      	movs	r2, #255	@ 0xff
 80056f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80056f2:	4b91      	ldr	r3, [pc, #580]	@ (8005938 <MX_LWIP_Init+0x270>)
 80056f4:	22ff      	movs	r2, #255	@ 0xff
 80056f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80056f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005938 <MX_LWIP_Init+0x270>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80056fe:	4b8f      	ldr	r3, [pc, #572]	@ (800593c <MX_LWIP_Init+0x274>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005704:	4b8d      	ldr	r3, [pc, #564]	@ (800593c <MX_LWIP_Init+0x274>)
 8005706:	2200      	movs	r2, #0
 8005708:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800570a:	4b8c      	ldr	r3, [pc, #560]	@ (800593c <MX_LWIP_Init+0x274>)
 800570c:	2200      	movs	r2, #0
 800570e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005710:	4b8a      	ldr	r3, [pc, #552]	@ (800593c <MX_LWIP_Init+0x274>)
 8005712:	2200      	movs	r2, #0
 8005714:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005716:	2100      	movs	r1, #0
 8005718:	2000      	movs	r0, #0
 800571a:	f7ff ffc5 	bl	80056a8 <tcpip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800571e:	4b85      	ldr	r3, [pc, #532]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	061a      	lsls	r2, r3, #24
 8005724:	4b83      	ldr	r3, [pc, #524]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	431a      	orrs	r2, r3
 800572c:	4b81      	ldr	r3, [pc, #516]	@ (8005934 <MX_LWIP_Init+0x26c>)
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	4313      	orrs	r3, r2
 8005734:	4a7f      	ldr	r2, [pc, #508]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005736:	78d2      	ldrb	r2, [r2, #3]
 8005738:	4313      	orrs	r3, r2
 800573a:	061a      	lsls	r2, r3, #24
 800573c:	4b7d      	ldr	r3, [pc, #500]	@ (8005934 <MX_LWIP_Init+0x26c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	0619      	lsls	r1, r3, #24
 8005742:	4b7c      	ldr	r3, [pc, #496]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	4319      	orrs	r1, r3
 800574a:	4b7a      	ldr	r3, [pc, #488]	@ (8005934 <MX_LWIP_Init+0x26c>)
 800574c:	789b      	ldrb	r3, [r3, #2]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	430b      	orrs	r3, r1
 8005752:	4978      	ldr	r1, [pc, #480]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005754:	78c9      	ldrb	r1, [r1, #3]
 8005756:	430b      	orrs	r3, r1
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800575e:	431a      	orrs	r2, r3
 8005760:	4b74      	ldr	r3, [pc, #464]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	0619      	lsls	r1, r3, #24
 8005766:	4b73      	ldr	r3, [pc, #460]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	4319      	orrs	r1, r3
 800576e:	4b71      	ldr	r3, [pc, #452]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	430b      	orrs	r3, r1
 8005776:	496f      	ldr	r1, [pc, #444]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005778:	78c9      	ldrb	r1, [r1, #3]
 800577a:	430b      	orrs	r3, r1
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005782:	431a      	orrs	r2, r3
 8005784:	4b6b      	ldr	r3, [pc, #428]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	0619      	lsls	r1, r3, #24
 800578a:	4b6a      	ldr	r3, [pc, #424]	@ (8005934 <MX_LWIP_Init+0x26c>)
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	4319      	orrs	r1, r3
 8005792:	4b68      	ldr	r3, [pc, #416]	@ (8005934 <MX_LWIP_Init+0x26c>)
 8005794:	789b      	ldrb	r3, [r3, #2]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	430b      	orrs	r3, r1
 800579a:	4966      	ldr	r1, [pc, #408]	@ (8005934 <MX_LWIP_Init+0x26c>)
 800579c:	78c9      	ldrb	r1, [r1, #3]
 800579e:	430b      	orrs	r3, r1
 80057a0:	0e1b      	lsrs	r3, r3, #24
 80057a2:	4313      	orrs	r3, r2
 80057a4:	4a66      	ldr	r2, [pc, #408]	@ (8005940 <MX_LWIP_Init+0x278>)
 80057a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80057a8:	4b63      	ldr	r3, [pc, #396]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	061a      	lsls	r2, r3, #24
 80057ae:	4b62      	ldr	r3, [pc, #392]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
 80057b6:	4b60      	ldr	r3, [pc, #384]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057b8:	789b      	ldrb	r3, [r3, #2]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	4a5e      	ldr	r2, [pc, #376]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057c0:	78d2      	ldrb	r2, [r2, #3]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	061a      	lsls	r2, r3, #24
 80057c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	0619      	lsls	r1, r3, #24
 80057cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	4319      	orrs	r1, r3
 80057d4:	4b58      	ldr	r3, [pc, #352]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057d6:	789b      	ldrb	r3, [r3, #2]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	430b      	orrs	r3, r1
 80057dc:	4956      	ldr	r1, [pc, #344]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057de:	78c9      	ldrb	r1, [r1, #3]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057e8:	431a      	orrs	r2, r3
 80057ea:	4b53      	ldr	r3, [pc, #332]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	0619      	lsls	r1, r3, #24
 80057f0:	4b51      	ldr	r3, [pc, #324]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	4319      	orrs	r1, r3
 80057f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005938 <MX_LWIP_Init+0x270>)
 80057fa:	789b      	ldrb	r3, [r3, #2]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	430b      	orrs	r3, r1
 8005800:	494d      	ldr	r1, [pc, #308]	@ (8005938 <MX_LWIP_Init+0x270>)
 8005802:	78c9      	ldrb	r1, [r1, #3]
 8005804:	430b      	orrs	r3, r1
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800580c:	431a      	orrs	r2, r3
 800580e:	4b4a      	ldr	r3, [pc, #296]	@ (8005938 <MX_LWIP_Init+0x270>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	0619      	lsls	r1, r3, #24
 8005814:	4b48      	ldr	r3, [pc, #288]	@ (8005938 <MX_LWIP_Init+0x270>)
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	4319      	orrs	r1, r3
 800581c:	4b46      	ldr	r3, [pc, #280]	@ (8005938 <MX_LWIP_Init+0x270>)
 800581e:	789b      	ldrb	r3, [r3, #2]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	430b      	orrs	r3, r1
 8005824:	4944      	ldr	r1, [pc, #272]	@ (8005938 <MX_LWIP_Init+0x270>)
 8005826:	78c9      	ldrb	r1, [r1, #3]
 8005828:	430b      	orrs	r3, r1
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	4313      	orrs	r3, r2
 800582e:	4a45      	ldr	r2, [pc, #276]	@ (8005944 <MX_LWIP_Init+0x27c>)
 8005830:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005832:	4b42      	ldr	r3, [pc, #264]	@ (800593c <MX_LWIP_Init+0x274>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	061a      	lsls	r2, r3, #24
 8005838:	4b40      	ldr	r3, [pc, #256]	@ (800593c <MX_LWIP_Init+0x274>)
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	431a      	orrs	r2, r3
 8005840:	4b3e      	ldr	r3, [pc, #248]	@ (800593c <MX_LWIP_Init+0x274>)
 8005842:	789b      	ldrb	r3, [r3, #2]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	4313      	orrs	r3, r2
 8005848:	4a3c      	ldr	r2, [pc, #240]	@ (800593c <MX_LWIP_Init+0x274>)
 800584a:	78d2      	ldrb	r2, [r2, #3]
 800584c:	4313      	orrs	r3, r2
 800584e:	061a      	lsls	r2, r3, #24
 8005850:	4b3a      	ldr	r3, [pc, #232]	@ (800593c <MX_LWIP_Init+0x274>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	0619      	lsls	r1, r3, #24
 8005856:	4b39      	ldr	r3, [pc, #228]	@ (800593c <MX_LWIP_Init+0x274>)
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	4319      	orrs	r1, r3
 800585e:	4b37      	ldr	r3, [pc, #220]	@ (800593c <MX_LWIP_Init+0x274>)
 8005860:	789b      	ldrb	r3, [r3, #2]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	430b      	orrs	r3, r1
 8005866:	4935      	ldr	r1, [pc, #212]	@ (800593c <MX_LWIP_Init+0x274>)
 8005868:	78c9      	ldrb	r1, [r1, #3]
 800586a:	430b      	orrs	r3, r1
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005872:	431a      	orrs	r2, r3
 8005874:	4b31      	ldr	r3, [pc, #196]	@ (800593c <MX_LWIP_Init+0x274>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	0619      	lsls	r1, r3, #24
 800587a:	4b30      	ldr	r3, [pc, #192]	@ (800593c <MX_LWIP_Init+0x274>)
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	4319      	orrs	r1, r3
 8005882:	4b2e      	ldr	r3, [pc, #184]	@ (800593c <MX_LWIP_Init+0x274>)
 8005884:	789b      	ldrb	r3, [r3, #2]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	430b      	orrs	r3, r1
 800588a:	492c      	ldr	r1, [pc, #176]	@ (800593c <MX_LWIP_Init+0x274>)
 800588c:	78c9      	ldrb	r1, [r1, #3]
 800588e:	430b      	orrs	r3, r1
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005896:	431a      	orrs	r2, r3
 8005898:	4b28      	ldr	r3, [pc, #160]	@ (800593c <MX_LWIP_Init+0x274>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	0619      	lsls	r1, r3, #24
 800589e:	4b27      	ldr	r3, [pc, #156]	@ (800593c <MX_LWIP_Init+0x274>)
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	4319      	orrs	r1, r3
 80058a6:	4b25      	ldr	r3, [pc, #148]	@ (800593c <MX_LWIP_Init+0x274>)
 80058a8:	789b      	ldrb	r3, [r3, #2]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	430b      	orrs	r3, r1
 80058ae:	4923      	ldr	r1, [pc, #140]	@ (800593c <MX_LWIP_Init+0x274>)
 80058b0:	78c9      	ldrb	r1, [r1, #3]
 80058b2:	430b      	orrs	r3, r1
 80058b4:	0e1b      	lsrs	r3, r3, #24
 80058b6:	4313      	orrs	r3, r2
 80058b8:	4a23      	ldr	r2, [pc, #140]	@ (8005948 <MX_LWIP_Init+0x280>)
 80058ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80058bc:	4b23      	ldr	r3, [pc, #140]	@ (800594c <MX_LWIP_Init+0x284>)
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <MX_LWIP_Init+0x288>)
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005948 <MX_LWIP_Init+0x280>)
 80058ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005944 <MX_LWIP_Init+0x27c>)
 80058cc:	491c      	ldr	r1, [pc, #112]	@ (8005940 <MX_LWIP_Init+0x278>)
 80058ce:	4821      	ldr	r0, [pc, #132]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058d0:	f007 fd5a 	bl	800d388 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80058d4:	481f      	ldr	r0, [pc, #124]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058d6:	f007 ff0d 	bl	800d6f4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80058da:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80058ec:	4819      	ldr	r0, [pc, #100]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058ee:	f007 ff11 	bl	800d714 <netif_set_up>
 80058f2:	e002      	b.n	80058fa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80058f4:	4817      	ldr	r0, [pc, #92]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058f6:	f007 ff7b 	bl	800d7f0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80058fa:	4917      	ldr	r1, [pc, #92]	@ (8005958 <MX_LWIP_Init+0x290>)
 80058fc:	4815      	ldr	r0, [pc, #84]	@ (8005954 <MX_LWIP_Init+0x28c>)
 80058fe:	f008 f813 	bl	800d928 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005902:	2224      	movs	r2, #36	@ 0x24
 8005904:	2100      	movs	r1, #0
 8005906:	4815      	ldr	r0, [pc, #84]	@ (800595c <MX_LWIP_Init+0x294>)
 8005908:	f00f ffb5 	bl	8015876 <memset>
  attributes.name = "EthLink";
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <MX_LWIP_Init+0x294>)
 800590e:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <MX_LWIP_Init+0x298>)
 8005910:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005912:	4b12      	ldr	r3, [pc, #72]	@ (800595c <MX_LWIP_Init+0x294>)
 8005914:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005918:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800591a:	4b10      	ldr	r3, [pc, #64]	@ (800595c <MX_LWIP_Init+0x294>)
 800591c:	2210      	movs	r2, #16
 800591e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005920:	4a0e      	ldr	r2, [pc, #56]	@ (800595c <MX_LWIP_Init+0x294>)
 8005922:	490c      	ldr	r1, [pc, #48]	@ (8005954 <MX_LWIP_Init+0x28c>)
 8005924:	480f      	ldr	r0, [pc, #60]	@ (8005964 <MX_LWIP_Init+0x29c>)
 8005926:	f000 fe24 	bl	8006572 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 800592a:	f000 fd29 	bl	8006380 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	24000148 	.word	0x24000148
 8005938:	2400014c 	.word	0x2400014c
 800593c:	24000150 	.word	0x24000150
 8005940:	2400013c 	.word	0x2400013c
 8005944:	24000140 	.word	0x24000140
 8005948:	24000144 	.word	0x24000144
 800594c:	08014d91 	.word	0x08014d91
 8005950:	08005dfd 	.word	0x08005dfd
 8005954:	24000108 	.word	0x24000108
 8005958:	08005969 	.word	0x08005969
 800595c:	24000154 	.word	0x24000154
 8005960:	08016804 	.word	0x08016804
 8005964:	080060f1 	.word	0x080060f1

08005968 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005984:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <HAL_ETH_RxCpltCallback+0x1c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f895 	bl	8006ab8 <osSemaphoreRelease>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	24000180 	.word	0x24000180

0800599c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <HAL_ETH_TxCpltCallback+0x1c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f885 	bl	8006ab8 <osSemaphoreRelease>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	24000184 	.word	0x24000184

080059bc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fd fbf5 	bl	80031b4 <HAL_ETH_GetDMAError>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	2b80      	cmp	r3, #128	@ 0x80
 80059d2:	d104      	bne.n	80059de <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80059d4:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <HAL_ETH_ErrorCallback+0x2c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f86d 	bl	8006ab8 <osSemaphoreRelease>
  }
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	24000180 	.word	0x24000180

080059ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b0aa      	sub	sp, #168	@ 0xa8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	2264      	movs	r2, #100	@ 0x64
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f00f ff31 	bl	8015876 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a14:	4b85      	ldr	r3, [pc, #532]	@ (8005c2c <low_level_init+0x240>)
 8005a16:	4a86      	ldr	r2, [pc, #536]	@ (8005c30 <low_level_init+0x244>)
 8005a18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a22:	23e1      	movs	r3, #225	@ 0xe1
 8005a24:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a26:	2300      	movs	r3, #0
 8005a28:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a32:	4a7e      	ldr	r2, [pc, #504]	@ (8005c2c <low_level_init+0x240>)
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c2c <low_level_init+0x240>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a40:	4b7a      	ldr	r3, [pc, #488]	@ (8005c2c <low_level_init+0x240>)
 8005a42:	4a7c      	ldr	r2, [pc, #496]	@ (8005c34 <low_level_init+0x248>)
 8005a44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a46:	4b79      	ldr	r3, [pc, #484]	@ (8005c2c <low_level_init+0x240>)
 8005a48:	4a7b      	ldr	r2, [pc, #492]	@ (8005c38 <low_level_init+0x24c>)
 8005a4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a4c:	4b77      	ldr	r3, [pc, #476]	@ (8005c2c <low_level_init+0x240>)
 8005a4e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a54:	4875      	ldr	r0, [pc, #468]	@ (8005c2c <low_level_init+0x240>)
 8005a56:	f7fc fbb9 	bl	80021cc <HAL_ETH_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a60:	2238      	movs	r2, #56	@ 0x38
 8005a62:	2100      	movs	r1, #0
 8005a64:	4875      	ldr	r0, [pc, #468]	@ (8005c3c <low_level_init+0x250>)
 8005a66:	f00f ff06 	bl	8015876 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a6a:	4b74      	ldr	r3, [pc, #464]	@ (8005c3c <low_level_init+0x250>)
 8005a6c:	2221      	movs	r2, #33	@ 0x21
 8005a6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005a70:	4b72      	ldr	r3, [pc, #456]	@ (8005c3c <low_level_init+0x250>)
 8005a72:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005a76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005a78:	4b70      	ldr	r3, [pc, #448]	@ (8005c3c <low_level_init+0x250>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005a7e:	4870      	ldr	r0, [pc, #448]	@ (8005c40 <low_level_init+0x254>)
 8005a80:	f007 fb3c 	bl	800d0fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2206      	movs	r2, #6
 8005a88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005a8c:	4b67      	ldr	r3, [pc, #412]	@ (8005c2c <low_level_init+0x240>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005a98:	4b64      	ldr	r3, [pc, #400]	@ (8005c2c <low_level_init+0x240>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	785a      	ldrb	r2, [r3, #1]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005aa4:	4b61      	ldr	r3, [pc, #388]	@ (8005c2c <low_level_init+0x240>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	789a      	ldrb	r2, [r3, #2]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8005c2c <low_level_init+0x240>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	78da      	ldrb	r2, [r3, #3]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005abc:	4b5b      	ldr	r3, [pc, #364]	@ (8005c2c <low_level_init+0x240>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	791a      	ldrb	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ac8:	4b58      	ldr	r3, [pc, #352]	@ (8005c2c <low_level_init+0x240>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	795a      	ldrb	r2, [r3, #5]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005ada:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ae2:	f043 030a 	orr.w	r3, r3, #10
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005aee:	2200      	movs	r2, #0
 8005af0:	2101      	movs	r1, #1
 8005af2:	2001      	movs	r0, #1
 8005af4:	f000 ff04 	bl	8006900 <osSemaphoreNew>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4a52      	ldr	r2, [pc, #328]	@ (8005c44 <low_level_init+0x258>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005afe:	2200      	movs	r2, #0
 8005b00:	2101      	movs	r1, #1
 8005b02:	2001      	movs	r0, #1
 8005b04:	f000 fefc 	bl	8006900 <osSemaphoreNew>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4a4f      	ldr	r2, [pc, #316]	@ (8005c48 <low_level_init+0x25c>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b0e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f00f fead 	bl	8015876 <memset>
  attributes.name = "EthIf";
 8005b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c4c <low_level_init+0x260>)
 8005b1e:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8005b28:	2330      	movs	r3, #48	@ 0x30
 8005b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005b32:	461a      	mov	r2, r3
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4846      	ldr	r0, [pc, #280]	@ (8005c50 <low_level_init+0x264>)
 8005b38:	f000 fd1b 	bl	8006572 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b3c:	4945      	ldr	r1, [pc, #276]	@ (8005c54 <low_level_init+0x268>)
 8005b3e:	4846      	ldr	r0, [pc, #280]	@ (8005c58 <low_level_init+0x26c>)
 8005b40:	f7fb fff7 	bl	8001b32 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005b44:	4844      	ldr	r0, [pc, #272]	@ (8005c58 <low_level_init+0x26c>)
 8005b46:	f7fc f826 	bl	8001b96 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005b4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d165      	bne.n	8005c1e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b52:	4841      	ldr	r0, [pc, #260]	@ (8005c58 <low_level_init+0x26c>)
 8005b54:	f7fc f8c7 	bl	8001ce6 <LAN8742_GetLinkState>
 8005b58:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	dc06      	bgt.n	8005b72 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f007 fead 	bl	800d8c4 <netif_set_link_down>
      netif_set_down(netif);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f007 fe40 	bl	800d7f0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b70:	e057      	b.n	8005c22 <low_level_init+0x236>
      switch (PHYLinkState)
 8005b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b76:	3b02      	subs	r3, #2
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d82b      	bhi.n	8005bd4 <low_level_init+0x1e8>
 8005b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <low_level_init+0x198>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005ba7 	.word	0x08005ba7
 8005b8c:	08005bb7 	.word	0x08005bb7
 8005b90:	08005bc7 	.word	0x08005bc7
        duplex = ETH_FULLDUPLEX_MODE;
 8005b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005ba4:	e01f      	b.n	8005be6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005bac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005bb4:	e017      	b.n	8005be6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005bc4:	e00f      	b.n	8005be6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005bd2:	e008      	b.n	8005be6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005be4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	4619      	mov	r1, r3
 8005bec:	480f      	ldr	r0, [pc, #60]	@ (8005c2c <low_level_init+0x240>)
 8005bee:	f7fd f89b 	bl	8002d28 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8005bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005bfe:	f107 0310 	add.w	r3, r7, #16
 8005c02:	4619      	mov	r1, r3
 8005c04:	4809      	ldr	r0, [pc, #36]	@ (8005c2c <low_level_init+0x240>)
 8005c06:	f7fd fa63 	bl	80030d0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005c0a:	4808      	ldr	r0, [pc, #32]	@ (8005c2c <low_level_init+0x240>)
 8005c0c:	f7fc fbc4 	bl	8002398 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f007 fd7f 	bl	800d714 <netif_set_up>
    netif_set_link_up(netif);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f007 fe1e 	bl	800d858 <netif_set_link_up>
}
 8005c1c:	e001      	b.n	8005c22 <low_level_init+0x236>
    Error_Handler();
 8005c1e:	f7fb fdd5 	bl	80017cc <Error_Handler>
}
 8005c22:	bf00      	nop
 8005c24:	37a8      	adds	r7, #168	@ 0xa8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	24000188 	.word	0x24000188
 8005c30:	40028000 	.word	0x40028000
 8005c34:	30040060 	.word	0x30040060
 8005c38:	30040000 	.word	0x30040000
 8005c3c:	24000238 	.word	0x24000238
 8005c40:	08019d24 	.word	0x08019d24
 8005c44:	24000180 	.word	0x24000180
 8005c48:	24000184 	.word	0x24000184
 8005c4c:	0801680c 	.word	0x0801680c
 8005c50:	08005da9 	.word	0x08005da9
 8005c54:	24000010 	.word	0x24000010
 8005c58:	24000270 	.word	0x24000270

08005c5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b092      	sub	sp, #72	@ 0x48
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c74:	f107 030c 	add.w	r3, r7, #12
 8005c78:	2230      	movs	r2, #48	@ 0x30
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f00f fdfa 	bl	8015876 <memset>

  for(q = p; q != NULL; q = q->next)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c86:	e045      	b.n	8005d14 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d902      	bls.n	8005c94 <low_level_output+0x38>
      return ERR_IF;
 8005c8e:	f06f 030b 	mvn.w	r3, #11
 8005c92:	e065      	b.n	8005d60 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3348      	adds	r3, #72	@ 0x48
 8005ca4:	443b      	add	r3, r7
 8005ca6:	3b3c      	subs	r3, #60	@ 0x3c
 8005ca8:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	3348      	adds	r3, #72	@ 0x48
 8005cbc:	443b      	add	r3, r7
 8005cbe:	3b38      	subs	r3, #56	@ 0x38
 8005cc0:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d011      	beq.n	8005cec <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	f107 000c 	add.w	r0, r7, #12
 8005cd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	440b      	add	r3, r1
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	18c1      	adds	r1, r0, r3
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3348      	adds	r3, #72	@ 0x48
 8005ce6:	443b      	add	r3, r7
 8005ce8:	3b34      	subs	r3, #52	@ 0x34
 8005cea:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	3348      	adds	r3, #72	@ 0x48
 8005d00:	443b      	add	r3, r7
 8005d02:	3b34      	subs	r3, #52	@ 0x34
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1b6      	bne.n	8005c88 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	891b      	ldrh	r3, [r3, #8]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4b11      	ldr	r3, [pc, #68]	@ (8005d68 <low_level_output+0x10c>)
 8005d22:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d24:	4a10      	ldr	r2, [pc, #64]	@ (8005d68 <low_level_output+0x10c>)
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8005d68 <low_level_output+0x10c>)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005d32:	6838      	ldr	r0, [r7, #0]
 8005d34:	f008 fa4c 	bl	800e1d0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d38:	490b      	ldr	r1, [pc, #44]	@ (8005d68 <low_level_output+0x10c>)
 8005d3a:	480c      	ldr	r0, [pc, #48]	@ (8005d6c <low_level_output+0x110>)
 8005d3c:	f7fc fc30 	bl	80025a0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005d40:	bf00      	nop
 8005d42:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <low_level_output+0x114>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f04f 31ff 	mov.w	r1, #4294967295
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fe62 	bl	8006a14 <osSemaphoreAcquire>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f5      	bne.n	8005d42 <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005d56:	4805      	ldr	r0, [pc, #20]	@ (8005d6c <low_level_output+0x110>)
 8005d58:	f7fc fda1 	bl	800289e <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005d5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3748      	adds	r7, #72	@ 0x48
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	24000238 	.word	0x24000238
 8005d6c:	24000188 	.word	0x24000188
 8005d70:	24000184 	.word	0x24000184

08005d74 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <low_level_input+0x2c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d88:	f107 030c 	add.w	r3, r7, #12
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4805      	ldr	r0, [pc, #20]	@ (8005da4 <low_level_input+0x30>)
 8005d90:	f7fc fc57 	bl	8002642 <HAL_ETH_ReadData>
  }

  return p;
 8005d94:	68fb      	ldr	r3, [r7, #12]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	2400017c 	.word	0x2400017c
 8005da4:	24000188 	.word	0x24000188

08005da8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005db8:	4b0f      	ldr	r3, [pc, #60]	@ (8005df8 <ethernetif_input+0x50>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fe27 	bl	8006a14 <osSemaphoreAcquire>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f5      	bne.n	8005db8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005dcc:	68b8      	ldr	r0, [r7, #8]
 8005dce:	f7ff ffd1 	bl	8005d74 <low_level_input>
 8005dd2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	4798      	blx	r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f008 f94a 	bl	800e084 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ea      	bne.n	8005dcc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005df6:	e7df      	b.n	8005db8 <ethernetif_input+0x10>
 8005df8:	24000180 	.word	0x24000180

08005dfc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <ethernetif_init+0x1c>
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <ethernetif_init+0x48>)
 8005e0c:	f240 2217 	movw	r2, #535	@ 0x217
 8005e10:	490d      	ldr	r1, [pc, #52]	@ (8005e48 <ethernetif_init+0x4c>)
 8005e12:	480e      	ldr	r0, [pc, #56]	@ (8005e4c <ethernetif_init+0x50>)
 8005e14:	f00f fcca 	bl	80157ac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2273      	movs	r2, #115	@ 0x73
 8005e1c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2274      	movs	r2, #116	@ 0x74
 8005e24:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a09      	ldr	r2, [pc, #36]	@ (8005e50 <ethernetif_init+0x54>)
 8005e2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a08      	ldr	r2, [pc, #32]	@ (8005e54 <ethernetif_init+0x58>)
 8005e32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fdd9 	bl	80059ec <low_level_init>

  return ERR_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	08016814 	.word	0x08016814
 8005e48:	08016830 	.word	0x08016830
 8005e4c:	08016840 	.word	0x08016840
 8005e50:	0800aa45 	.word	0x0800aa45
 8005e54:	08005c5d 	.word	0x08005c5d

08005e58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	4809      	ldr	r0, [pc, #36]	@ (8005e8c <pbuf_free_custom+0x34>)
 8005e68:	f007 fa38 	bl	800d2dc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005e6c:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <pbuf_free_custom+0x38>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <pbuf_free_custom+0x38>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <pbuf_free_custom+0x3c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fe1a 	bl	8006ab8 <osSemaphoreRelease>
  }
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08019d24 	.word	0x08019d24
 8005e90:	2400017c 	.word	0x2400017c
 8005e94:	24000180 	.word	0x24000180

08005e98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e9c:	f7fb fffa 	bl	8001e94 <HAL_GetTick>
 8005ea0:	4603      	mov	r3, r0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08e      	sub	sp, #56	@ 0x38
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800603c <HAL_ETH_MspInit+0x194>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f040 80b3 	bne.w	8006032 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005edc:	4b58      	ldr	r3, [pc, #352]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005eea:	4b55      	ldr	r3, [pc, #340]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ef0:	4a53      	ldr	r2, [pc, #332]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005efa:	4b51      	ldr	r3, [pc, #324]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005f08:	4b4d      	ldr	r3, [pc, #308]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f18:	4b49      	ldr	r3, [pc, #292]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f26:	4b46      	ldr	r3, [pc, #280]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f2c:	4a44      	ldr	r2, [pc, #272]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f2e:	f043 0304 	orr.w	r3, r3, #4
 8005f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f36:	4b42      	ldr	r3, [pc, #264]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f44:	4b3e      	ldr	r3, [pc, #248]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f54:	4b3a      	ldr	r3, [pc, #232]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f62:	4b37      	ldr	r3, [pc, #220]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f68:	4a35      	ldr	r2, [pc, #212]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f72:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f80:	4b2f      	ldr	r3, [pc, #188]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f86:	4a2e      	ldr	r2, [pc, #184]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f90:	4b2b      	ldr	r3, [pc, #172]	@ (8006040 <HAL_ETH_MspInit+0x198>)
 8005f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	60bb      	str	r3, [r7, #8]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005f9e:	2332      	movs	r3, #50	@ 0x32
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005faa:	2303      	movs	r3, #3
 8005fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fae:	230b      	movs	r3, #11
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4822      	ldr	r0, [pc, #136]	@ (8006044 <HAL_ETH_MspInit+0x19c>)
 8005fba:	f7fd fe7d 	bl	8003cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005fbe:	2386      	movs	r3, #134	@ 0x86
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fce:	230b      	movs	r3, #11
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	481b      	ldr	r0, [pc, #108]	@ (8006048 <HAL_ETH_MspInit+0x1a0>)
 8005fda:	f7fd fe6d 	bl	8003cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fec:	2303      	movs	r3, #3
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ff0:	230b      	movs	r3, #11
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4814      	ldr	r0, [pc, #80]	@ (800604c <HAL_ETH_MspInit+0x1a4>)
 8005ffc:	f7fd fe5c 	bl	8003cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006000:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006006:	2302      	movs	r3, #2
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600a:	2300      	movs	r3, #0
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600e:	2303      	movs	r3, #3
 8006010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006012:	230b      	movs	r3, #11
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601a:	4619      	mov	r1, r3
 800601c:	480c      	ldr	r0, [pc, #48]	@ (8006050 <HAL_ETH_MspInit+0x1a8>)
 800601e:	f7fd fe4b 	bl	8003cb8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006022:	2200      	movs	r2, #0
 8006024:	2105      	movs	r1, #5
 8006026:	203d      	movs	r0, #61	@ 0x3d
 8006028:	f7fc f818 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800602c:	203d      	movs	r0, #61	@ 0x3d
 800602e:	f7fc f82f 	bl	8002090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006032:	bf00      	nop
 8006034:	3738      	adds	r7, #56	@ 0x38
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40028000 	.word	0x40028000
 8006040:	58024400 	.word	0x58024400
 8006044:	58020800 	.word	0x58020800
 8006048:	58020000 	.word	0x58020000
 800604c:	58020400 	.word	0x58020400
 8006050:	58021800 	.word	0x58021800

08006054 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006058:	4802      	ldr	r0, [pc, #8]	@ (8006064 <ETH_PHY_IO_Init+0x10>)
 800605a:	f7fd f853 	bl	8003104 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	24000188 	.word	0x24000188

08006068 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return 0;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	4807      	ldr	r0, [pc, #28]	@ (80060a8 <ETH_PHY_IO_ReadReg+0x30>)
 800608c:	f7fc fda4 	bl	8002bd8 <HAL_ETH_ReadPHYRegister>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	e000      	b.n	800609e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	24000188 	.word	0x24000188

080060ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	4807      	ldr	r0, [pc, #28]	@ (80060dc <ETH_PHY_IO_WriteReg+0x30>)
 80060c0:	f7fc fdde 	bl	8002c80 <HAL_ETH_WritePHYRegister>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	e000      	b.n	80060d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	24000188 	.word	0x24000188

080060e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060e4:	f7fb fed6 	bl	8001e94 <HAL_GetTick>
 80060e8:	4603      	mov	r3, r0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0a0      	sub	sp, #128	@ 0x80
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	2264      	movs	r2, #100	@ 0x64
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f00f fbb8 	bl	8015876 <memset>
  int32_t PHYLinkState = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800610e:	2300      	movs	r3, #0
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	2300      	movs	r3, #0
 8006114:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 800611a:	f000 f921 	bl	8006360 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800611e:	483c      	ldr	r0, [pc, #240]	@ (8006210 <ethernet_link_thread+0x120>)
 8006120:	f7fb fde1 	bl	8001ce6 <LAN8742_GetLinkState>
 8006124:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006128:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800612c:	089b      	lsrs	r3, r3, #2
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00c      	beq.n	8006152 <ethernet_link_thread+0x62>
 8006138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800613a:	2b01      	cmp	r3, #1
 800613c:	dc09      	bgt.n	8006152 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 800613e:	4835      	ldr	r0, [pc, #212]	@ (8006214 <ethernet_link_thread+0x124>)
 8006140:	f7fc f9b6 	bl	80024b0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006144:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006146:	f007 fb53 	bl	800d7f0 <netif_set_down>
    netif_set_link_down(netif);
 800614a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800614c:	f007 fbba 	bl	800d8c4 <netif_set_link_down>
 8006150:	e055      	b.n	80061fe <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006154:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d14e      	bne.n	80061fe <ethernet_link_thread+0x10e>
 8006160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006162:	2b01      	cmp	r3, #1
 8006164:	dd4b      	ble.n	80061fe <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 8006166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006168:	3b02      	subs	r3, #2
 800616a:	2b03      	cmp	r3, #3
 800616c:	d82a      	bhi.n	80061c4 <ethernet_link_thread+0xd4>
 800616e:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <ethernet_link_thread+0x84>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006185 	.word	0x08006185
 8006178:	08006197 	.word	0x08006197
 800617c:	080061a7 	.word	0x080061a7
 8006180:	080061b7 	.word	0x080061b7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006188:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800618a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800618e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006194:	e017      	b.n	80061c6 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006196:	2300      	movs	r3, #0
 8006198:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800619a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800619e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80061a0:	2301      	movs	r3, #1
 80061a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80061a4:	e00f      	b.n	80061c6 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80061a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061aa:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80061ac:	2300      	movs	r3, #0
 80061ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80061b0:	2301      	movs	r3, #1
 80061b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80061b4:	e007      	b.n	80061c6 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80061ba:	2300      	movs	r3, #0
 80061bc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80061c2:	e000      	b.n	80061c6 <ethernet_link_thread+0xd6>
    default:
      break;
 80061c4:	bf00      	nop
    }

    if(linkchanged)
 80061c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d018      	beq.n	80061fe <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	4619      	mov	r1, r3
 80061d2:	4810      	ldr	r0, [pc, #64]	@ (8006214 <ethernet_link_thread+0x124>)
 80061d4:	f7fc fda8 	bl	8002d28 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80061d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061da:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80061dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061de:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80061e0:	f107 0308 	add.w	r3, r7, #8
 80061e4:	4619      	mov	r1, r3
 80061e6:	480b      	ldr	r0, [pc, #44]	@ (8006214 <ethernet_link_thread+0x124>)
 80061e8:	f7fc ff72 	bl	80030d0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80061ec:	4809      	ldr	r0, [pc, #36]	@ (8006214 <ethernet_link_thread+0x124>)
 80061ee:	f7fc f8d3 	bl	8002398 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80061f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80061f4:	f007 fa8e 	bl	800d714 <netif_set_up>
      netif_set_link_up(netif);
 80061f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80061fa:	f007 fb2d 	bl	800d858 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 80061fe:	f000 f8bf 	bl	8006380 <sys_unlock_tcpip_core>
  osDelay(100);
 8006202:	2064      	movs	r0, #100	@ 0x64
 8006204:	f000 fa53 	bl	80066ae <osDelay>
  LOCK_TCPIP_CORE();
 8006208:	f000 f8aa 	bl	8006360 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 800620c:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800620e:	e786      	b.n	800611e <ethernet_link_thread+0x2e>
 8006210:	24000270 	.word	0x24000270
 8006214:	24000188 	.word	0x24000188

08006218 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006220:	4812      	ldr	r0, [pc, #72]	@ (800626c <HAL_ETH_RxAllocateCallback+0x54>)
 8006222:	f006 ffe7 	bl	800d1f4 <memp_malloc_pool>
 8006226:	60f8      	str	r0, [r7, #12]
  if (p)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d014      	beq.n	8006258 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f103 0220 	add.w	r2, r3, #32
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a0d      	ldr	r2, [pc, #52]	@ (8006270 <HAL_ETH_RxAllocateCallback+0x58>)
 800623c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006246:	9201      	str	r2, [sp, #4]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2241      	movs	r2, #65	@ 0x41
 800624e:	2100      	movs	r1, #0
 8006250:	2000      	movs	r0, #0
 8006252:	f007 fd5f 	bl	800dd14 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006256:	e005      	b.n	8006264 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <HAL_ETH_RxAllocateCallback+0x5c>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	08019d24 	.word	0x08019d24
 8006270:	08005e59 	.word	0x08005e59
 8006274:	2400017c 	.word	0x2400017c

08006278 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006278:	b480      	push	{r7}
 800627a:	b08d      	sub	sp, #52	@ 0x34
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3b20      	subs	r3, #32
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	2200      	movs	r2, #0
 80062a2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80062a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e003      	b.n	80062c2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ce:	e009      	b.n	80062e4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	891a      	ldrh	r2, [r3, #8]
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	4413      	add	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062dc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f2      	bne.n	80062d0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80062ea:	887b      	ldrh	r3, [r7, #2]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	623a      	str	r2, [r7, #32]
 80062f0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dd1d      	ble.n	8006334 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f003 021f 	and.w	r2, r3, #31
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006308:	f3bf 8f4f 	dsb	sy
}
 800630c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800630e:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <HAL_ETH_RxLinkCallback+0xcc>)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	3320      	adds	r3, #32
 800631a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	3b20      	subs	r3, #32
 8006320:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dcf2      	bgt.n	800630e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8006328:	f3bf 8f4f 	dsb	sy
}
 800632c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800632e:	f3bf 8f6f 	isb	sy
}
 8006332:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8006334:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006336:	bf00      	nop
 8006338:	3734      	adds	r7, #52	@ 0x34
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	e000ed00 	.word	0xe000ed00

08006348 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f007 fe97 	bl	800e084 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 8006364:	4804      	ldr	r0, [pc, #16]	@ (8006378 <sys_lock_tcpip_core+0x18>)
 8006366:	f008 fa77 	bl	800e858 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 800636a:	f000 f995 	bl	8006698 <osThreadGetId>
 800636e:	4603      	mov	r3, r0
 8006370:	4a02      	ldr	r2, [pc, #8]	@ (800637c <sys_lock_tcpip_core+0x1c>)
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	bd80      	pop	{r7, pc}
 8006378:	240106a0 	.word	0x240106a0
 800637c:	24000290 	.word	0x24000290

08006380 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 8006384:	4b03      	ldr	r3, [pc, #12]	@ (8006394 <sys_unlock_tcpip_core+0x14>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800638a:	4803      	ldr	r0, [pc, #12]	@ (8006398 <sys_unlock_tcpip_core+0x18>)
 800638c:	f008 fa73 	bl	800e876 <sys_mutex_unlock>
}
 8006390:	bf00      	nop
 8006392:	bd80      	pop	{r7, pc}
 8006394:	24000290 	.word	0x24000290
 8006398:	240106a0 	.word	0x240106a0

0800639c <sys_check_core_locking>:

void sys_check_core_locking(void){
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80063a2:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <sys_check_core_locking+0x5c>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d006      	beq.n	80063bc <sys_check_core_locking+0x20>
 80063ae:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <sys_check_core_locking+0x60>)
 80063b0:	f240 32cb 	movw	r2, #971	@ 0x3cb
 80063b4:	4912      	ldr	r1, [pc, #72]	@ (8006400 <sys_check_core_locking+0x64>)
 80063b6:	4813      	ldr	r0, [pc, #76]	@ (8006404 <sys_check_core_locking+0x68>)
 80063b8:	f00f f9f8 	bl	80157ac <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 80063bc:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <sys_check_core_locking+0x6c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d014      	beq.n	80063ee <sys_check_core_locking+0x52>
	  osThreadId_t current_thread_id = osThreadGetId();
 80063c4:	f000 f968 	bl	8006698 <osThreadGetId>
 80063c8:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 80063ca:	4b10      	ldr	r3, [pc, #64]	@ (800640c <sys_check_core_locking+0x70>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d006      	beq.n	80063e2 <sys_check_core_locking+0x46>
 80063d4:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <sys_check_core_locking+0x60>)
 80063d6:	f240 32d1 	movw	r2, #977	@ 0x3d1
 80063da:	490d      	ldr	r1, [pc, #52]	@ (8006410 <sys_check_core_locking+0x74>)
 80063dc:	4809      	ldr	r0, [pc, #36]	@ (8006404 <sys_check_core_locking+0x68>)
 80063de:	f00f f9e5 	bl	80157ac <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 80063e2:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <sys_check_core_locking+0x70>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d000      	beq.n	80063ee <sys_check_core_locking+0x52>
 80063ec:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	e000ed00 	.word	0xe000ed00
 80063fc:	08016814 	.word	0x08016814
 8006400:	08016868 	.word	0x08016868
 8006404:	08016840 	.word	0x08016840
 8006408:	24000294 	.word	0x24000294
 800640c:	24000290 	.word	0x24000290
 8006410:	08016890 	.word	0x08016890

08006414 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8006418:	f000 f93e 	bl	8006698 <osThreadGetId>
 800641c:	4603      	mov	r3, r0
 800641e:	4a02      	ldr	r2, [pc, #8]	@ (8006428 <sys_mark_tcpip_thread+0x14>)
 8006420:	6013      	str	r3, [r2, #0]
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	24000294 	.word	0x24000294

0800642c <__NVIC_SetPriority>:
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	db0a      	blt.n	8006456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	490c      	ldr	r1, [pc, #48]	@ (8006478 <__NVIC_SetPriority+0x4c>)
 8006446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	440b      	add	r3, r1
 8006450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006454:	e00a      	b.n	800646c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	4908      	ldr	r1, [pc, #32]	@ (800647c <__NVIC_SetPriority+0x50>)
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3b04      	subs	r3, #4
 8006464:	0112      	lsls	r2, r2, #4
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	440b      	add	r3, r1
 800646a:	761a      	strb	r2, [r3, #24]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000e100 	.word	0xe000e100
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006484:	4b05      	ldr	r3, [pc, #20]	@ (800649c <SysTick_Handler+0x1c>)
 8006486:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006488:	f003 f924 	bl	80096d4 <xTaskGetSchedulerState>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006492:	f001 f921 	bl	80076d8 <xPortSysTickHandler>
  }
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	e000e010 	.word	0xe000e010

080064a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064a4:	2100      	movs	r1, #0
 80064a6:	f06f 0004 	mvn.w	r0, #4
 80064aa:	f7ff ffbf 	bl	800642c <__NVIC_SetPriority>
#endif
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ba:	f3ef 8305 	mrs	r3, IPSR
 80064be:	603b      	str	r3, [r7, #0]
  return(result);
 80064c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064c6:	f06f 0305 	mvn.w	r3, #5
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	e00c      	b.n	80064e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064ce:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <osKernelInitialize+0x44>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064d6:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <osKernelInitialize+0x44>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064dc:	2300      	movs	r3, #0
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	e002      	b.n	80064e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064e8:	687b      	ldr	r3, [r7, #4]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	24000298 	.word	0x24000298

080064fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006502:	f3ef 8305 	mrs	r3, IPSR
 8006506:	603b      	str	r3, [r7, #0]
  return(result);
 8006508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <osKernelStart+0x1a>
    stat = osErrorISR;
 800650e:	f06f 0305 	mvn.w	r3, #5
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e010      	b.n	8006538 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006516:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <osKernelStart+0x48>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d109      	bne.n	8006532 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800651e:	f7ff ffbf 	bl	80064a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006522:	4b08      	ldr	r3, [pc, #32]	@ (8006544 <osKernelStart+0x48>)
 8006524:	2202      	movs	r2, #2
 8006526:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006528:	f002 fc40 	bl	8008dac <vTaskStartScheduler>
      stat = osOK;
 800652c:	2300      	movs	r3, #0
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	e002      	b.n	8006538 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006538:	687b      	ldr	r3, [r7, #4]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	24000298 	.word	0x24000298

08006548 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800654e:	f3ef 8305 	mrs	r3, IPSR
 8006552:	603b      	str	r3, [r7, #0]
  return(result);
 8006554:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800655a:	f002 fd53 	bl	8009004 <xTaskGetTickCountFromISR>
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	e002      	b.n	8006568 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006562:	f002 fd3f 	bl	8008fe4 <xTaskGetTickCount>
 8006566:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006568:	687b      	ldr	r3, [r7, #4]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006572:	b580      	push	{r7, lr}
 8006574:	b08e      	sub	sp, #56	@ 0x38
 8006576:	af04      	add	r7, sp, #16
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006582:	f3ef 8305 	mrs	r3, IPSR
 8006586:	617b      	str	r3, [r7, #20]
  return(result);
 8006588:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800658a:	2b00      	cmp	r3, #0
 800658c:	d17f      	bne.n	800668e <osThreadNew+0x11c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d07c      	beq.n	800668e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006598:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800659a:	2318      	movs	r3, #24
 800659c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d045      	beq.n	800663a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <osThreadNew+0x4a>
        name = attr->name;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <osThreadNew+0x70>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b38      	cmp	r3, #56	@ 0x38
 80065d4:	d805      	bhi.n	80065e2 <osThreadNew+0x70>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <osThreadNew+0x74>
        return (NULL);
 80065e2:	2300      	movs	r3, #0
 80065e4:	e054      	b.n	8006690 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <osThreadNew+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	2ba7      	cmp	r3, #167	@ 0xa7
 8006604:	d90a      	bls.n	800661c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <osThreadNew+0xaa>
        mem = 1;
 8006616:	2301      	movs	r3, #1
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e010      	b.n	800663e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <osThreadNew+0xcc>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <osThreadNew+0xcc>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <osThreadNew+0xcc>
          mem = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e001      	b.n	800663e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d110      	bne.n	8006666 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800664c:	9202      	str	r2, [sp, #8]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f002 f9b2 	bl	80089c4 <xTaskCreateStatic>
 8006660:	4603      	mov	r3, r0
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	e013      	b.n	800668e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d110      	bne.n	800668e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	b29a      	uxth	r2, r3
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f002 fa00 	bl	8008a84 <xTaskCreate>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d001      	beq.n	800668e <osThreadNew+0x11c>
            hTask = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800668e:	693b      	ldr	r3, [r7, #16]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3728      	adds	r7, #40	@ 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800669e:	f003 f809 	bl	80096b4 <xTaskGetCurrentTaskHandle>
 80066a2:	6078      	str	r0, [r7, #4]

  return (id);
 80066a4:	687b      	ldr	r3, [r7, #4]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b6:	f3ef 8305 	mrs	r3, IPSR
 80066ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80066bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <osDelay+0x1c>
    stat = osErrorISR;
 80066c2:	f06f 0305 	mvn.w	r3, #5
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e007      	b.n	80066da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <osDelay+0x2c>
      vTaskDelay(ticks);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f002 fb33 	bl	8008d40 <vTaskDelay>
    }
  }

  return (stat);
 80066da:	68fb      	ldr	r3, [r7, #12]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066f0:	f3ef 8305 	mrs	r3, IPSR
 80066f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066f6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d174      	bne.n	80067e6 <osMutexNew+0x102>
    if (attr != NULL) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <osMutexNew+0x26>
      type = attr->attr_bits;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	e001      	b.n	800670e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <osMutexNew+0x3a>
      rmtx = 1U;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e001      	b.n	8006722 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d15c      	bne.n	80067e6 <osMutexNew+0x102>
      mem = -1;
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d006      	beq.n	800674e <osMutexNew+0x6a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b4f      	cmp	r3, #79	@ 0x4f
 8006746:	d902      	bls.n	800674e <osMutexNew+0x6a>
          mem = 1;
 8006748:	2301      	movs	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e00c      	b.n	8006768 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <osMutexNew+0x84>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <osMutexNew+0x84>
            mem = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e001      	b.n	8006768 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d112      	bne.n	8006794 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4619      	mov	r1, r3
 800677a:	2004      	movs	r0, #4
 800677c:	f001 f9b5 	bl	8007aea <xQueueCreateMutexStatic>
 8006780:	61f8      	str	r0, [r7, #28]
 8006782:	e016      	b.n	80067b2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4619      	mov	r1, r3
 800678a:	2001      	movs	r0, #1
 800678c:	f001 f9ad 	bl	8007aea <xQueueCreateMutexStatic>
 8006790:	61f8      	str	r0, [r7, #28]
 8006792:	e00e      	b.n	80067b2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80067a0:	2004      	movs	r0, #4
 80067a2:	f001 f98a 	bl	8007aba <xQueueCreateMutex>
 80067a6:	61f8      	str	r0, [r7, #28]
 80067a8:	e003      	b.n	80067b2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80067aa:	2001      	movs	r0, #1
 80067ac:	f001 f985 	bl	8007aba <xQueueCreateMutex>
 80067b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <osMutexNew+0xee>
        if (attr != NULL) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <osMutexNew+0xe2>
          name = attr->name;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e001      	b.n	80067ca <osMutexNew+0xe6>
        } else {
          name = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	69f8      	ldr	r0, [r7, #28]
 80067ce:	f002 f871 	bl	80088b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <osMutexNew+0x102>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80067e6:	69fb      	ldr	r3, [r7, #28]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800680e:	f3ef 8305 	mrs	r3, IPSR
 8006812:	60bb      	str	r3, [r7, #8]
  return(result);
 8006814:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800681a:	f06f 0305 	mvn.w	r3, #5
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e02c      	b.n	800687c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d103      	bne.n	8006830 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006828:	f06f 0303 	mvn.w	r3, #3
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e025      	b.n	800687c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f001 f9a6 	bl	8007b8a <xQueueTakeMutexRecursive>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d01b      	beq.n	800687c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800684a:	f06f 0301 	mvn.w	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e014      	b.n	800687c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006852:	f06f 0302 	mvn.w	r3, #2
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e010      	b.n	800687c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6938      	ldr	r0, [r7, #16]
 800685e:	f001 fd4b 	bl	80082f8 <xQueueSemaphoreTake>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d009      	beq.n	800687c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800686e:	f06f 0301 	mvn.w	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e002      	b.n	800687c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006876:	f06f 0302 	mvn.w	r3, #2
 800687a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a2:	f3ef 8305 	mrs	r3, IPSR
 80068a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80068ae:	f06f 0305 	mvn.w	r3, #5
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e01f      	b.n	80068f6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80068bc:	f06f 0303 	mvn.w	r3, #3
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	e018      	b.n	80068f6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f001 f928 	bl	8007b20 <xQueueGiveMutexRecursive>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00f      	beq.n	80068f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80068d6:	f06f 0302 	mvn.w	r3, #2
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e00b      	b.n	80068f6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80068de:	2300      	movs	r3, #0
 80068e0:	2200      	movs	r2, #0
 80068e2:	2100      	movs	r1, #0
 80068e4:	6938      	ldr	r0, [r7, #16]
 80068e6:	f001 f9f5 	bl	8007cd4 <xQueueGenericSend>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d002      	beq.n	80068f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80068f0:	f06f 0302 	mvn.w	r3, #2
 80068f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006910:	f3ef 8305 	mrs	r3, IPSR
 8006914:	613b      	str	r3, [r7, #16]
  return(result);
 8006916:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006918:	2b00      	cmp	r3, #0
 800691a:	d175      	bne.n	8006a08 <osSemaphoreNew+0x108>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d072      	beq.n	8006a08 <osSemaphoreNew+0x108>
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d86e      	bhi.n	8006a08 <osSemaphoreNew+0x108>
    mem = -1;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d015      	beq.n	8006962 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <osSemaphoreNew+0x4c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b4f      	cmp	r3, #79	@ 0x4f
 8006944:	d902      	bls.n	800694c <osSemaphoreNew+0x4c>
        mem = 1;
 8006946:	2301      	movs	r3, #1
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e00c      	b.n	8006966 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d108      	bne.n	8006966 <osSemaphoreNew+0x66>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <osSemaphoreNew+0x66>
          mem = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e001      	b.n	8006966 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d04c      	beq.n	8006a08 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d128      	bne.n	80069c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10a      	bne.n	8006990 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2203      	movs	r2, #3
 8006980:	9200      	str	r2, [sp, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	2001      	movs	r0, #1
 8006988:	f000 ffa2 	bl	80078d0 <xQueueGenericCreateStatic>
 800698c:	61f8      	str	r0, [r7, #28]
 800698e:	e005      	b.n	800699c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006990:	2203      	movs	r2, #3
 8006992:	2100      	movs	r1, #0
 8006994:	2001      	movs	r0, #1
 8006996:	f001 f818 	bl	80079ca <xQueueGenericCreate>
 800699a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d022      	beq.n	80069e8 <osSemaphoreNew+0xe8>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01f      	beq.n	80069e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069a8:	2300      	movs	r3, #0
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	69f8      	ldr	r0, [r7, #28]
 80069b0:	f001 f990 	bl	8007cd4 <xQueueGenericSend>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d016      	beq.n	80069e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80069ba:	69f8      	ldr	r0, [r7, #28]
 80069bc:	f001 fe2e 	bl	800861c <vQueueDelete>
            hSemaphore = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e010      	b.n	80069e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d108      	bne.n	80069de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	461a      	mov	r2, r3
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 f90f 	bl	8007bf8 <xQueueCreateCountingSemaphoreStatic>
 80069da:	61f8      	str	r0, [r7, #28]
 80069dc:	e004      	b.n	80069e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f001 f942 	bl	8007c6a <xQueueCreateCountingSemaphore>
 80069e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <osSemaphoreNew+0xfc>
          name = attr->name;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e001      	b.n	8006a00 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a00:	6979      	ldr	r1, [r7, #20]
 8006a02:	69f8      	ldr	r0, [r7, #28]
 8006a04:	f001 ff56 	bl	80088b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a08:	69fb      	ldr	r3, [r7, #28]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006a2c:	f06f 0303 	mvn.w	r3, #3
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e039      	b.n	8006aa8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a34:	f3ef 8305 	mrs	r3, IPSR
 8006a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d022      	beq.n	8006a86 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006a46:	f06f 0303 	mvn.w	r3, #3
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e02c      	b.n	8006aa8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	461a      	mov	r2, r3
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f001 fd5c 	bl	8008518 <xQueueReceiveFromISR>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d003      	beq.n	8006a6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006a66:	f06f 0302 	mvn.w	r3, #2
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e01c      	b.n	8006aa8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d019      	beq.n	8006aa8 <osSemaphoreAcquire+0x94>
 8006a74:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab4 <osSemaphoreAcquire+0xa0>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	e010      	b.n	8006aa8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f001 fc35 	bl	80082f8 <xQueueSemaphoreTake>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d009      	beq.n	8006aa8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006a9a:	f06f 0301 	mvn.w	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e002      	b.n	8006aa8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006aa2:	f06f 0302 	mvn.w	r3, #2
 8006aa6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006aa8:	697b      	ldr	r3, [r7, #20]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006ace:	f06f 0303 	mvn.w	r3, #3
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e02c      	b.n	8006b30 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad6:	f3ef 8305 	mrs	r3, IPSR
 8006ada:	60fb      	str	r3, [r7, #12]
  return(result);
 8006adc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01a      	beq.n	8006b18 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	4619      	mov	r1, r3
 8006aec:	6938      	ldr	r0, [r7, #16]
 8006aee:	f001 fa91 	bl	8008014 <xQueueGiveFromISR>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d003      	beq.n	8006b00 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006af8:	f06f 0302 	mvn.w	r3, #2
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e017      	b.n	8006b30 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d014      	beq.n	8006b30 <osSemaphoreRelease+0x78>
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <osSemaphoreRelease+0x84>)
 8006b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	e00b      	b.n	8006b30 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	6938      	ldr	r0, [r7, #16]
 8006b20:	f001 f8d8 	bl	8007cd4 <xQueueGenericSend>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d002      	beq.n	8006b30 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006b2a:	f06f 0302 	mvn.w	r3, #2
 8006b2e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006b30:	697b      	ldr	r3, [r7, #20]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	@ 0x28
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b50:	f3ef 8305 	mrs	r3, IPSR
 8006b54:	613b      	str	r3, [r7, #16]
  return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d15f      	bne.n	8006c1c <osMessageQueueNew+0xdc>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d05c      	beq.n	8006c1c <osMessageQueueNew+0xdc>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d059      	beq.n	8006c1c <osMessageQueueNew+0xdc>
    mem = -1;
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d029      	beq.n	8006bc8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <osMessageQueueNew+0x62>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b82:	d90e      	bls.n	8006ba2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d302      	bcc.n	8006ba2 <osMessageQueueNew+0x62>
        mem = 1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e014      	b.n	8006bcc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <osMessageQueueNew+0x8c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10c      	bne.n	8006bcc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d108      	bne.n	8006bcc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <osMessageQueueNew+0x8c>
          mem = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e001      	b.n	8006bcc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d10b      	bne.n	8006bea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2100      	movs	r1, #0
 8006bdc:	9100      	str	r1, [sp, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fe75 	bl	80078d0 <xQueueGenericCreateStatic>
 8006be6:	61f8      	str	r0, [r7, #28]
 8006be8:	e008      	b.n	8006bfc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fee8 	bl	80079ca <xQueueGenericCreate>
 8006bfa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e001      	b.n	8006c14 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	69f8      	ldr	r0, [r7, #28]
 8006c18:	f001 fe4c 	bl	80088b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c40:	f3ef 8305 	mrs	r3, IPSR
 8006c44:	617b      	str	r3, [r7, #20]
  return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d028      	beq.n	8006c9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <osMessageQueuePut+0x36>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <osMessageQueuePut+0x36>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c5e:	f06f 0303 	mvn.w	r3, #3
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e038      	b.n	8006cd8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c6a:	f107 0210 	add.w	r2, r7, #16
 8006c6e:	2300      	movs	r3, #0
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	69b8      	ldr	r0, [r7, #24]
 8006c74:	f001 f930 	bl	8007ed8 <xQueueGenericSendFromISR>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006c7e:	f06f 0302 	mvn.w	r3, #2
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	e028      	b.n	8006cd8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d025      	beq.n	8006cd8 <osMessageQueuePut+0xb0>
 8006c8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <osMessageQueuePut+0xbc>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	e01c      	b.n	8006cd8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <osMessageQueuePut+0x82>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006caa:	f06f 0303 	mvn.w	r3, #3
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e012      	b.n	8006cd8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	69b8      	ldr	r0, [r7, #24]
 8006cba:	f001 f80b 	bl	8007cd4 <xQueueGenericSend>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d009      	beq.n	8006cd8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006cca:	f06f 0301 	mvn.w	r3, #1
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e002      	b.n	8006cd8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006cd2:	f06f 0302 	mvn.w	r3, #2
 8006cd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cfe:	f3ef 8305 	mrs	r3, IPSR
 8006d02:	617b      	str	r3, [r7, #20]
  return(result);
 8006d04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d028      	beq.n	8006d5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <osMessageQueueGet+0x34>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <osMessageQueueGet+0x34>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006d1c:	f06f 0303 	mvn.w	r3, #3
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e037      	b.n	8006d94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	69b8      	ldr	r0, [r7, #24]
 8006d32:	f001 fbf1 	bl	8008518 <xQueueReceiveFromISR>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d003      	beq.n	8006d44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006d3c:	f06f 0302 	mvn.w	r3, #2
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	e027      	b.n	8006d94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d024      	beq.n	8006d94 <osMessageQueueGet+0xac>
 8006d4a:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <osMessageQueueGet+0xb8>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	e01b      	b.n	8006d94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <osMessageQueueGet+0x80>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006d68:	f06f 0303 	mvn.w	r3, #3
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e011      	b.n	8006d94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	69b8      	ldr	r0, [r7, #24]
 8006d76:	f001 f9dd 	bl	8008134 <xQueueReceive>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d009      	beq.n	8006d94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006d86:	f06f 0301 	mvn.w	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e002      	b.n	8006d94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006d8e:	f06f 0302 	mvn.w	r3, #2
 8006d92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d94:	69fb      	ldr	r3, [r7, #28]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a07      	ldr	r2, [pc, #28]	@ (8006dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a06      	ldr	r2, [pc, #24]	@ (8006dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8006dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc2:	601a      	str	r2, [r3, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	2400029c 	.word	0x2400029c
 8006dd4:	24000344 	.word	0x24000344

08006dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a07      	ldr	r2, [pc, #28]	@ (8006e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a06      	ldr	r2, [pc, #24]	@ (8006e08 <vApplicationGetTimerTaskMemory+0x30>)
 8006dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	24000b44 	.word	0x24000b44
 8006e08:	24000bec 	.word	0x24000bec

08006e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	@ 0x28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e18:	f002 f838 	bl	8008e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006f90 <pvPortMalloc+0x184>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e24:	f000 f924 	bl	8007070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e28:	4b5a      	ldr	r3, [pc, #360]	@ (8006f94 <pvPortMalloc+0x188>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 8095 	bne.w	8006f60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01e      	beq.n	8006e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d015      	beq.n	8006e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	3308      	adds	r3, #8
 8006e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d06f      	beq.n	8006f60 <pvPortMalloc+0x154>
 8006e80:	4b45      	ldr	r3, [pc, #276]	@ (8006f98 <pvPortMalloc+0x18c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d86a      	bhi.n	8006f60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e8a:	4b44      	ldr	r3, [pc, #272]	@ (8006f9c <pvPortMalloc+0x190>)
 8006e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e8e:	4b43      	ldr	r3, [pc, #268]	@ (8006f9c <pvPortMalloc+0x190>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e94:	e004      	b.n	8006ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d903      	bls.n	8006eb2 <pvPortMalloc+0xa6>
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f1      	bne.n	8006e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eb2:	4b37      	ldr	r3, [pc, #220]	@ (8006f90 <pvPortMalloc+0x184>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d051      	beq.n	8006f60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	4413      	add	r3, r2
 8006ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	1ad2      	subs	r2, r2, r3
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d920      	bls.n	8006f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <pvPortMalloc+0xfc>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f1a:	69b8      	ldr	r0, [r7, #24]
 8006f1c:	f000 f90a 	bl	8007134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f20:	4b1d      	ldr	r3, [pc, #116]	@ (8006f98 <pvPortMalloc+0x18c>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <pvPortMalloc+0x18c>)
 8006f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <pvPortMalloc+0x18c>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa0 <pvPortMalloc+0x194>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d203      	bcs.n	8006f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f3a:	4b17      	ldr	r3, [pc, #92]	@ (8006f98 <pvPortMalloc+0x18c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a18      	ldr	r2, [pc, #96]	@ (8006fa0 <pvPortMalloc+0x194>)
 8006f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	4b13      	ldr	r3, [pc, #76]	@ (8006f94 <pvPortMalloc+0x188>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f56:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <pvPortMalloc+0x198>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	4a11      	ldr	r2, [pc, #68]	@ (8006fa4 <pvPortMalloc+0x198>)
 8006f5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f60:	f001 ffa2 	bl	8008ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <pvPortMalloc+0x17a>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	60fb      	str	r3, [r7, #12]
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	e7fd      	b.n	8006f82 <pvPortMalloc+0x176>
	return pvReturn;
 8006f86:	69fb      	ldr	r3, [r7, #28]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3728      	adds	r7, #40	@ 0x28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	240093f4 	.word	0x240093f4
 8006f94:	24009408 	.word	0x24009408
 8006f98:	240093f8 	.word	0x240093f8
 8006f9c:	240093ec 	.word	0x240093ec
 8006fa0:	240093fc 	.word	0x240093fc
 8006fa4:	24009400 	.word	0x24009400

08006fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d04f      	beq.n	800705a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fba:	2308      	movs	r3, #8
 8006fbc:	425b      	negs	r3, r3
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	4b25      	ldr	r3, [pc, #148]	@ (8007064 <vPortFree+0xbc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <vPortFree+0x46>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <vPortFree+0x66>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <vPortFree+0xbc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01e      	beq.n	800705a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11a      	bne.n	800705a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	4b0e      	ldr	r3, [pc, #56]	@ (8007064 <vPortFree+0xbc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	43db      	mvns	r3, r3
 800702e:	401a      	ands	r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007034:	f001 ff2a 	bl	8008e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	4b0a      	ldr	r3, [pc, #40]	@ (8007068 <vPortFree+0xc0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4413      	add	r3, r2
 8007042:	4a09      	ldr	r2, [pc, #36]	@ (8007068 <vPortFree+0xc0>)
 8007044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007046:	6938      	ldr	r0, [r7, #16]
 8007048:	f000 f874 	bl	8007134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800704c:	4b07      	ldr	r3, [pc, #28]	@ (800706c <vPortFree+0xc4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	4a06      	ldr	r2, [pc, #24]	@ (800706c <vPortFree+0xc4>)
 8007054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007056:	f001 ff27 	bl	8008ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800705a:	bf00      	nop
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	24009408 	.word	0x24009408
 8007068:	240093f8 	.word	0x240093f8
 800706c:	24009404 	.word	0x24009404

08007070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007076:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800707a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800707c:	4b27      	ldr	r3, [pc, #156]	@ (800711c <prvHeapInit+0xac>)
 800707e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00c      	beq.n	80070a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3307      	adds	r3, #7
 800708e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0307 	bic.w	r3, r3, #7
 8007096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	4a1f      	ldr	r2, [pc, #124]	@ (800711c <prvHeapInit+0xac>)
 80070a0:	4413      	add	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007120 <prvHeapInit+0xb0>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007120 <prvHeapInit+0xb0>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070bc:	2208      	movs	r2, #8
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a15      	ldr	r2, [pc, #84]	@ (8007124 <prvHeapInit+0xb4>)
 80070d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d2:	4b14      	ldr	r3, [pc, #80]	@ (8007124 <prvHeapInit+0xb4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070da:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <prvHeapInit+0xb4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	1ad2      	subs	r2, r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <prvHeapInit+0xb4>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007128 <prvHeapInit+0xb8>)
 80070fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4a09      	ldr	r2, [pc, #36]	@ (800712c <prvHeapInit+0xbc>)
 8007106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007108:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <prvHeapInit+0xc0>)
 800710a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800710e:	601a      	str	r2, [r3, #0]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	24001bec 	.word	0x24001bec
 8007120:	240093ec 	.word	0x240093ec
 8007124:	240093f4 	.word	0x240093f4
 8007128:	240093fc 	.word	0x240093fc
 800712c:	240093f8 	.word	0x240093f8
 8007130:	24009408 	.word	0x24009408

08007134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800713c:	4b28      	ldr	r3, [pc, #160]	@ (80071e0 <prvInsertBlockIntoFreeList+0xac>)
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e002      	b.n	8007148 <prvInsertBlockIntoFreeList+0x14>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	429a      	cmp	r2, r3
 8007150:	d8f7      	bhi.n	8007142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d108      	bne.n	8007176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	441a      	add	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	441a      	add	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d118      	bne.n	80071bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b15      	ldr	r3, [pc, #84]	@ (80071e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d00d      	beq.n	80071b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e008      	b.n	80071c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b2:	4b0c      	ldr	r3, [pc, #48]	@ (80071e4 <prvInsertBlockIntoFreeList+0xb0>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e003      	b.n	80071c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d002      	beq.n	80071d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	240093ec 	.word	0x240093ec
 80071e4:	240093f4 	.word	0x240093f4

080071e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f103 0208 	add.w	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f103 0208 	add.w	r2, r3, #8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f103 0208 	add.w	r2, r3, #8
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d103      	bne.n	80072aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e00c      	b.n	80072c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3308      	adds	r3, #8
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <vListInsert+0x2e>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d2f6      	bcs.n	80072b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
}
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6892      	ldr	r2, [r2, #8]
 8007312:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6852      	ldr	r2, [r2, #4]
 800731c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d103      	bne.n	8007330 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	1e5a      	subs	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3b04      	subs	r3, #4
 8007360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b04      	subs	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f023 0201 	bic.w	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007380:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <pxPortInitialiseStack+0x64>)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3b14      	subs	r3, #20
 800738a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3b04      	subs	r3, #4
 8007396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f06f 0202 	mvn.w	r2, #2
 800739e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3b20      	subs	r3, #32
 80073a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073a6:	68fb      	ldr	r3, [r7, #12]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	080073b9 	.word	0x080073b9

080073b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073c2:	4b13      	ldr	r3, [pc, #76]	@ (8007410 <prvTaskExitError+0x58>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ca:	d00b      	beq.n	80073e4 <prvTaskExitError+0x2c>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <prvTaskExitError+0x28>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60bb      	str	r3, [r7, #8]
}
 80073f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073f8:	bf00      	nop
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0fc      	beq.n	80073fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	24000024 	.word	0x24000024
	...

08007420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007420:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <pxCurrentTCBConst2>)
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	f380 8809 	msr	PSP, r0
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8811 	msr	BASEPRI, r0
 800743a:	4770      	bx	lr
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst2>:
 8007440:	24009454 	.word	0x24009454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007448:	4808      	ldr	r0, [pc, #32]	@ (800746c <prvPortStartFirstTask+0x24>)
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f380 8808 	msr	MSP, r0
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f380 8814 	msr	CONTROL, r0
 800745a:	b662      	cpsie	i
 800745c:	b661      	cpsie	f
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	df00      	svc	0
 8007468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800746a:	bf00      	nop
 800746c:	e000ed08 	.word	0xe000ed08

08007470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007476:	4b47      	ldr	r3, [pc, #284]	@ (8007594 <xPortStartScheduler+0x124>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a47      	ldr	r2, [pc, #284]	@ (8007598 <xPortStartScheduler+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10b      	bne.n	8007498 <xPortStartScheduler+0x28>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	613b      	str	r3, [r7, #16]
}
 8007492:	bf00      	nop
 8007494:	bf00      	nop
 8007496:	e7fd      	b.n	8007494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007498:	4b3e      	ldr	r3, [pc, #248]	@ (8007594 <xPortStartScheduler+0x124>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a3f      	ldr	r2, [pc, #252]	@ (800759c <xPortStartScheduler+0x12c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d10b      	bne.n	80074ba <xPortStartScheduler+0x4a>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ba:	4b39      	ldr	r3, [pc, #228]	@ (80075a0 <xPortStartScheduler+0x130>)
 80074bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	22ff      	movs	r2, #255	@ 0xff
 80074ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4b31      	ldr	r3, [pc, #196]	@ (80075a4 <xPortStartScheduler+0x134>)
 80074e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074e2:	4b31      	ldr	r3, [pc, #196]	@ (80075a8 <xPortStartScheduler+0x138>)
 80074e4:	2207      	movs	r2, #7
 80074e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074e8:	e009      	b.n	80074fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074ea:	4b2f      	ldr	r3, [pc, #188]	@ (80075a8 <xPortStartScheduler+0x138>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	4a2d      	ldr	r2, [pc, #180]	@ (80075a8 <xPortStartScheduler+0x138>)
 80074f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	2b80      	cmp	r3, #128	@ 0x80
 8007508:	d0ef      	beq.n	80074ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800750a:	4b27      	ldr	r3, [pc, #156]	@ (80075a8 <xPortStartScheduler+0x138>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f1c3 0307 	rsb	r3, r3, #7
 8007512:	2b04      	cmp	r3, #4
 8007514:	d00b      	beq.n	800752e <xPortStartScheduler+0xbe>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60bb      	str	r3, [r7, #8]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800752e:	4b1e      	ldr	r3, [pc, #120]	@ (80075a8 <xPortStartScheduler+0x138>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <xPortStartScheduler+0x138>)
 8007536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <xPortStartScheduler+0x138>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007540:	4a19      	ldr	r2, [pc, #100]	@ (80075a8 <xPortStartScheduler+0x138>)
 8007542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800754c:	4b17      	ldr	r3, [pc, #92]	@ (80075ac <xPortStartScheduler+0x13c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a16      	ldr	r2, [pc, #88]	@ (80075ac <xPortStartScheduler+0x13c>)
 8007552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007558:	4b14      	ldr	r3, [pc, #80]	@ (80075ac <xPortStartScheduler+0x13c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a13      	ldr	r2, [pc, #76]	@ (80075ac <xPortStartScheduler+0x13c>)
 800755e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007564:	f000 f8da 	bl	800771c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007568:	4b11      	ldr	r3, [pc, #68]	@ (80075b0 <xPortStartScheduler+0x140>)
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800756e:	f000 f8f9 	bl	8007764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007572:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <xPortStartScheduler+0x144>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a0f      	ldr	r2, [pc, #60]	@ (80075b4 <xPortStartScheduler+0x144>)
 8007578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800757c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800757e:	f7ff ff63 	bl	8007448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007582:	f001 fe0b 	bl	800919c <vTaskSwitchContext>
	prvTaskExitError();
 8007586:	f7ff ff17 	bl	80073b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	e000ed00 	.word	0xe000ed00
 8007598:	410fc271 	.word	0x410fc271
 800759c:	410fc270 	.word	0x410fc270
 80075a0:	e000e400 	.word	0xe000e400
 80075a4:	2400940c 	.word	0x2400940c
 80075a8:	24009410 	.word	0x24009410
 80075ac:	e000ed20 	.word	0xe000ed20
 80075b0:	24000024 	.word	0x24000024
 80075b4:	e000ef34 	.word	0xe000ef34

080075b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	607b      	str	r3, [r7, #4]
}
 80075d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <vPortEnterCritical+0x5c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007614 <vPortEnterCritical+0x5c>)
 80075da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007614 <vPortEnterCritical+0x5c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d110      	bne.n	8007606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007618 <vPortEnterCritical+0x60>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <vPortEnterCritical+0x4e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	603b      	str	r3, [r7, #0]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <vPortEnterCritical+0x4a>
	}
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	24000024 	.word	0x24000024
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007622:	4b12      	ldr	r3, [pc, #72]	@ (800766c <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <vPortExitCritical+0x26>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	607b      	str	r3, [r7, #4]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007642:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <vPortExitCritical+0x50>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3b01      	subs	r3, #1
 8007648:	4a08      	ldr	r2, [pc, #32]	@ (800766c <vPortExitCritical+0x50>)
 800764a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800764c:	4b07      	ldr	r3, [pc, #28]	@ (800766c <vPortExitCritical+0x50>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <vPortExitCritical+0x44>
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800765e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	24000024 	.word	0x24000024

08007670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007670:	f3ef 8009 	mrs	r0, PSP
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <pxCurrentTCBConst>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	f01e 0f10 	tst.w	lr, #16
 8007680:	bf08      	it	eq
 8007682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	6010      	str	r0, [r2, #0]
 800768c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007694:	f380 8811 	msr	BASEPRI, r0
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f001 fd7c 	bl	800919c <vTaskSwitchContext>
 80076a4:	f04f 0000 	mov.w	r0, #0
 80076a8:	f380 8811 	msr	BASEPRI, r0
 80076ac:	bc09      	pop	{r0, r3}
 80076ae:	6819      	ldr	r1, [r3, #0]
 80076b0:	6808      	ldr	r0, [r1, #0]
 80076b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b6:	f01e 0f10 	tst.w	lr, #16
 80076ba:	bf08      	it	eq
 80076bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076c0:	f380 8809 	msr	PSP, r0
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w

080076d0 <pxCurrentTCBConst>:
 80076d0:	24009454 	.word	0x24009454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076f2:	f001 fc99 	bl	8009028 <xTaskIncrementTick>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076fc:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <xPortSysTickHandler+0x40>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f383 8811 	msr	BASEPRI, r3
}
 800770e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007720:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007726:	4b0b      	ldr	r3, [pc, #44]	@ (8007754 <vPortSetupTimerInterrupt+0x38>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800772c:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <vPortSetupTimerInterrupt+0x3c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0a      	ldr	r2, [pc, #40]	@ (800775c <vPortSetupTimerInterrupt+0x40>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	4a09      	ldr	r2, [pc, #36]	@ (8007760 <vPortSetupTimerInterrupt+0x44>)
 800773a:	3b01      	subs	r3, #1
 800773c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800773e:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	e000e010 	.word	0xe000e010
 8007754:	e000e018 	.word	0xe000e018
 8007758:	24000000 	.word	0x24000000
 800775c:	10624dd3 	.word	0x10624dd3
 8007760:	e000e014 	.word	0xe000e014

08007764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007774 <vPortEnableVFP+0x10>
 8007768:	6801      	ldr	r1, [r0, #0]
 800776a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800776e:	6001      	str	r1, [r0, #0]
 8007770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007772:	bf00      	nop
 8007774:	e000ed88 	.word	0xe000ed88

08007778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800777e:	f3ef 8305 	mrs	r3, IPSR
 8007782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d915      	bls.n	80077b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800778a:	4a18      	ldr	r2, [pc, #96]	@ (80077ec <vPortValidateInterruptPriority+0x74>)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007794:	4b16      	ldr	r3, [pc, #88]	@ (80077f0 <vPortValidateInterruptPriority+0x78>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	7afa      	ldrb	r2, [r7, #11]
 800779a:	429a      	cmp	r2, r3
 800779c:	d20b      	bcs.n	80077b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	607b      	str	r3, [r7, #4]
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	e7fd      	b.n	80077b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077b6:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <vPortValidateInterruptPriority+0x7c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <vPortValidateInterruptPriority+0x80>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d90b      	bls.n	80077de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	603b      	str	r3, [r7, #0]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <vPortValidateInterruptPriority+0x62>
	}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	e000e3f0 	.word	0xe000e3f0
 80077f0:	2400940c 	.word	0x2400940c
 80077f4:	e000ed0c 	.word	0xe000ed0c
 80077f8:	24009410 	.word	0x24009410

080077fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <xQueueGenericReset+0x2c>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60bb      	str	r3, [r7, #8]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007828:	f7ff fec6 	bl	80075b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007858:	3b01      	subs	r3, #1
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	@ 0xff
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	@ 0xff
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d114      	bne.n	80078a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01a      	beq.n	80078bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3310      	adds	r3, #16
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fd4c 	bl	8009328 <xTaskRemoveFromEventList>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d012      	beq.n	80078bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <xQueueGenericReset+0xd0>)
 8007898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	e009      	b.n	80078bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3310      	adds	r3, #16
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fc9b 	bl	80071e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3324      	adds	r3, #36	@ 0x24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fc96 	bl	80071e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078bc:	f7ff feae 	bl	800761c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078c0:	2301      	movs	r3, #1
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08e      	sub	sp, #56	@ 0x38
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	e7fd      	b.n	80078f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10b      	bne.n	800791a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <xQueueGenericCreateStatic+0x56>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <xQueueGenericCreateStatic+0x5a>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <xQueueGenericCreateStatic+0x5c>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10b      	bne.n	8007948 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	623b      	str	r3, [r7, #32]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <xQueueGenericCreateStatic+0x84>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <xQueueGenericCreateStatic+0x88>
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <xQueueGenericCreateStatic+0x8a>
 8007958:	2300      	movs	r3, #0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	61fb      	str	r3, [r7, #28]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007976:	2350      	movs	r3, #80	@ 0x50
 8007978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b50      	cmp	r3, #80	@ 0x50
 800797e:	d00b      	beq.n	8007998 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	61bb      	str	r3, [r7, #24]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007998:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f840 	bl	8007a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3730      	adds	r7, #48	@ 0x30
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b08a      	sub	sp, #40	@ 0x28
 80079ce:	af02      	add	r7, sp, #8
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	613b      	str	r3, [r7, #16]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	3350      	adds	r3, #80	@ 0x50
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fa01 	bl	8006e0c <pvPortMalloc>
 8007a0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d011      	beq.n	8007a36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	3350      	adds	r3, #80	@ 0x50
 8007a1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a24:	79fa      	ldrb	r2, [r7, #7]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f805 	bl	8007a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a36:	69bb      	ldr	r3, [r7, #24]
	}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a6e:	2101      	movs	r1, #1
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f7ff fec3 	bl	80077fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f911 	bl	8007cd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6939      	ldr	r1, [r7, #16]
 8007ad2:	6978      	ldr	r0, [r7, #20]
 8007ad4:	f7ff ff79 	bl	80079ca <xQueueGenericCreate>
 8007ad8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ffd3 	bl	8007a86 <prvInitialiseMutex>

		return xNewQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
	}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b088      	sub	sp, #32
 8007aee:	af02      	add	r7, sp, #8
 8007af0:	4603      	mov	r3, r0
 8007af2:	6039      	str	r1, [r7, #0]
 8007af4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007af6:	2301      	movs	r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2200      	movs	r2, #0
 8007b06:	6939      	ldr	r1, [r7, #16]
 8007b08:	6978      	ldr	r0, [r7, #20]
 8007b0a:	f7ff fee1 	bl	80078d0 <xQueueGenericCreateStatic>
 8007b0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff ffb8 	bl	8007a86 <prvInitialiseMutex>

		return xNewQueue;
 8007b16:	68fb      	ldr	r3, [r7, #12]
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	689c      	ldr	r4, [r3, #8]
 8007b4e:	f001 fdb1 	bl	80096b4 <xTaskGetCurrentTaskHandle>
 8007b52:	4603      	mov	r3, r0
 8007b54:	429c      	cmp	r4, r3
 8007b56:	d111      	bne.n	8007b7c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f000 f8af 	bl	8007cd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e001      	b.n	8007b80 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007b80:	697b      	ldr	r3, [r7, #20]
	}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}

08007b8a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007b8a:	b590      	push	{r4, r7, lr}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	689c      	ldr	r4, [r3, #8]
 8007bba:	f001 fd7b 	bl	80096b4 <xTaskGetCurrentTaskHandle>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	d107      	bne.n	8007bd4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e00c      	b.n	8007bee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6938      	ldr	r0, [r7, #16]
 8007bd8:	f000 fb8e 	bl	80082f8 <xQueueSemaphoreTake>
 8007bdc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007bee:	697b      	ldr	r3, [r7, #20]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd90      	pop	{r4, r7, pc}

08007bf8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	@ 0x28
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	61bb      	str	r3, [r7, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d90b      	bls.n	8007c42 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	617b      	str	r3, [r7, #20]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c42:	2302      	movs	r3, #2
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fe3f 	bl	80078d0 <xQueueGenericCreateStatic>
 8007c52:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c60:	69fb      	ldr	r3, [r7, #28]
	}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	613b      	str	r3, [r7, #16]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d90b      	bls.n	8007cb2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	60fb      	str	r3, [r7, #12]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fe87 	bl	80079ca <xQueueGenericCreate>
 8007cbc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cca:	697b      	ldr	r3, [r7, #20]
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	@ 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <xQueueGenericSend+0x34>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <xQueueGenericSend+0x42>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <xQueueGenericSend+0x46>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <xQueueGenericSend+0x48>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGenericSend+0x64>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x72>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <xQueueGenericSend+0x76>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <xQueueGenericSend+0x78>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10b      	bne.n	8007d68 <xQueueGenericSend+0x94>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	623b      	str	r3, [r7, #32]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d68:	f001 fcb4 	bl	80096d4 <xTaskGetSchedulerState>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <xQueueGenericSend+0xa4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <xQueueGenericSend+0xa8>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <xQueueGenericSend+0xaa>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <xQueueGenericSend+0xc6>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	61fb      	str	r3, [r7, #28]
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9a:	f7ff fc0d 	bl	80075b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <xQueueGenericSend+0xdc>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d129      	bne.n	8007e04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007db6:	f000 fc6d 	bl	8008694 <prvCopyDataToQueue>
 8007dba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d010      	beq.n	8007de6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	3324      	adds	r3, #36	@ 0x24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 faad 	bl	8009328 <xTaskRemoveFromEventList>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d013      	beq.n	8007dfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	e00a      	b.n	8007dfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007dec:	4b39      	ldr	r3, [pc, #228]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dfc:	f7ff fc0e 	bl	800761c <vPortExitCritical>
				return pdPASS;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e063      	b.n	8007ecc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e0a:	f7ff fc07 	bl	800761c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e05c      	b.n	8007ecc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 fae7 	bl	80093f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e26:	f7ff fbf9 	bl	800761c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e2a:	f001 f82f 	bl	8008e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e2e:	f7ff fbc3 	bl	80075b8 <vPortEnterCritical>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d103      	bne.n	8007e48 <xQueueGenericSend+0x174>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d103      	bne.n	8007e5e <xQueueGenericSend+0x18a>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e5e:	f7ff fbdd 	bl	800761c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e62:	1d3a      	adds	r2, r7, #4
 8007e64:	f107 0314 	add.w	r3, r7, #20
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 fad6 	bl	800941c <xTaskCheckForTimeOut>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d124      	bne.n	8007ec0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e78:	f000 fd04 	bl	8008884 <prvIsQueueFull>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d018      	beq.n	8007eb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	3310      	adds	r3, #16
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f9fa 	bl	8009284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e92:	f000 fc8f 	bl	80087b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e96:	f001 f807 	bl	8008ea8 <xTaskResumeAll>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f47f af7c 	bne.w	8007d9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	e772      	b.n	8007d9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eb6:	f000 fc7d 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eba:	f000 fff5 	bl	8008ea8 <xTaskResumeAll>
 8007ebe:	e76c      	b.n	8007d9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec2:	f000 fc77 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ec6:	f000 ffef 	bl	8008ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3738      	adds	r7, #56	@ 0x38
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b090      	sub	sp, #64	@ 0x40
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <xQueueGenericSendFromISR+0x3e>
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericSendFromISR+0x42>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericSendFromISR+0x44>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <xQueueGenericSendFromISR+0x6e>
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSendFromISR+0x72>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSendFromISR+0x74>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	623b      	str	r3, [r7, #32]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f68:	f7ff fc06 	bl	8007778 <vPortValidateInterruptPriority>
	__asm volatile
 8007f6c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61fa      	str	r2, [r7, #28]
 8007f82:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007f84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <xQueueGenericSendFromISR+0xc2>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d12f      	bne.n	8007ffa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fb0:	f000 fb70 	bl	8008694 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d112      	bne.n	8007fe4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f9ac 	bl	8009328 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e007      	b.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	b25a      	sxtb	r2, r3
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007ff8:	e001      	b.n	8007ffe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008000:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f383 8811 	msr	BASEPRI, r3
}
 8008008:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800800c:	4618      	mov	r0, r3
 800800e:	3740      	adds	r7, #64	@ 0x40
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08e      	sub	sp, #56	@ 0x38
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61fb      	str	r3, [r7, #28]
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <xQueueGiveFromISR+0x5c>
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <xQueueGiveFromISR+0x60>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <xQueueGiveFromISR+0x62>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	61bb      	str	r3, [r7, #24]
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008092:	f7ff fb71 	bl	8007778 <vPortValidateInterruptPriority>
	__asm volatile
 8008096:	f3ef 8211 	mrs	r2, BASEPRI
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	617a      	str	r2, [r7, #20]
 80080ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080be:	429a      	cmp	r2, r3
 80080c0:	d22b      	bcs.n	800811a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d112      	bne.n	8008104 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	3324      	adds	r3, #36	@ 0x24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 f91c 	bl	8009328 <xTaskRemoveFromEventList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e007      	b.n	8008114 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008108:	3301      	adds	r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	b25a      	sxtb	r2, r3
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008114:	2301      	movs	r3, #1
 8008116:	637b      	str	r3, [r7, #52]	@ 0x34
 8008118:	e001      	b.n	800811e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800811a:	2300      	movs	r3, #0
 800811c:	637b      	str	r3, [r7, #52]	@ 0x34
 800811e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008120:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f383 8811 	msr	BASEPRI, r3
}
 8008128:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800812a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800812c:	4618      	mov	r0, r3
 800812e:	3738      	adds	r7, #56	@ 0x38
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	@ 0x30
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10b      	bne.n	8008166 <xQueueReceive+0x32>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	623b      	str	r3, [r7, #32]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <xQueueReceive+0x40>
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <xQueueReceive+0x44>
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <xQueueReceive+0x46>
 8008178:	2300      	movs	r3, #0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <xQueueReceive+0x62>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	61fb      	str	r3, [r7, #28]
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	e7fd      	b.n	8008192 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008196:	f001 fa9d 	bl	80096d4 <xTaskGetSchedulerState>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <xQueueReceive+0x72>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <xQueueReceive+0x76>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <xQueueReceive+0x78>
 80081aa:	2300      	movs	r3, #0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <xQueueReceive+0x94>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61bb      	str	r3, [r7, #24]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081c8:	f7ff f9f6 	bl	80075b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01f      	beq.n	8008218 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081dc:	f000 fac4 	bl	8008768 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e2:	1e5a      	subs	r2, r3, #1
 80081e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f2:	3310      	adds	r3, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f897 	bl	8009328 <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008200:	4b3c      	ldr	r3, [pc, #240]	@ (80082f4 <xQueueReceive+0x1c0>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008210:	f7ff fa04 	bl	800761c <vPortExitCritical>
				return pdPASS;
 8008214:	2301      	movs	r3, #1
 8008216:	e069      	b.n	80082ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800821e:	f7ff f9fd 	bl	800761c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008222:	2300      	movs	r3, #0
 8008224:	e062      	b.n	80082ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800822c:	f107 0310 	add.w	r3, r7, #16
 8008230:	4618      	mov	r0, r3
 8008232:	f001 f8dd 	bl	80093f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800823a:	f7ff f9ef 	bl	800761c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800823e:	f000 fe25 	bl	8008e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008242:	f7ff f9b9 	bl	80075b8 <vPortEnterCritical>
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800824c:	b25b      	sxtb	r3, r3
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d103      	bne.n	800825c <xQueueReceive+0x128>
 8008254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d103      	bne.n	8008272 <xQueueReceive+0x13e>
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008272:	f7ff f9d3 	bl	800761c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008276:	1d3a      	adds	r2, r7, #4
 8008278:	f107 0310 	add.w	r3, r7, #16
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f001 f8cc 	bl	800941c <xTaskCheckForTimeOut>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d123      	bne.n	80082d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800828a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800828c:	f000 fae4 	bl	8008858 <prvIsQueueEmpty>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d017      	beq.n	80082c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	3324      	adds	r3, #36	@ 0x24
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fff0 	bl	8009284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a6:	f000 fa85 	bl	80087b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082aa:	f000 fdfd 	bl	8008ea8 <xTaskResumeAll>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d189      	bne.n	80081c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80082b4:	4b0f      	ldr	r3, [pc, #60]	@ (80082f4 <xQueueReceive+0x1c0>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	e780      	b.n	80081c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c8:	f000 fa74 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082cc:	f000 fdec 	bl	8008ea8 <xTaskResumeAll>
 80082d0:	e77a      	b.n	80081c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082d4:	f000 fa6e 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d8:	f000 fde6 	bl	8008ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082de:	f000 fabb 	bl	8008858 <prvIsQueueEmpty>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f43f af6f 	beq.w	80081c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3730      	adds	r7, #48	@ 0x30
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	@ 0x38
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008302:	2300      	movs	r3, #0
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800830e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10b      	bne.n	800832c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	623b      	str	r3, [r7, #32]
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	61fb      	str	r3, [r7, #28]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834c:	f001 f9c2 	bl	80096d4 <xTaskGetSchedulerState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xQueueSemaphoreTake+0x64>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <xQueueSemaphoreTake+0x68>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <xQueueSemaphoreTake+0x6a>
 8008360:	2300      	movs	r3, #0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10b      	bne.n	800837e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	61bb      	str	r3, [r7, #24]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800837e:	f7ff f91b 	bl	80075b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008386:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d024      	beq.n	80083d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008394:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800839e:	f001 fb13 	bl	80099c8 <pvTaskIncrementMutexHeldCount>
 80083a2:	4602      	mov	r2, r0
 80083a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00f      	beq.n	80083d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	3310      	adds	r3, #16
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 ffb7 	bl	8009328 <xTaskRemoveFromEventList>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083c0:	4b54      	ldr	r3, [pc, #336]	@ (8008514 <xQueueSemaphoreTake+0x21c>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083d0:	f7ff f924 	bl	800761c <vPortExitCritical>
				return pdPASS;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e098      	b.n	800850a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d112      	bne.n	8008404 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	617b      	str	r3, [r7, #20]
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	e7fd      	b.n	80083f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083fc:	f7ff f90e 	bl	800761c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008400:	2300      	movs	r3, #0
 8008402:	e082      	b.n	800850a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	4618      	mov	r0, r3
 8008410:	f000 ffee 	bl	80093f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008418:	f7ff f900 	bl	800761c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800841c:	f000 fd36 	bl	8008e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008420:	f7ff f8ca 	bl	80075b8 <vPortEnterCritical>
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800842a:	b25b      	sxtb	r3, r3
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d103      	bne.n	800843a <xQueueSemaphoreTake+0x142>
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800843a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008440:	b25b      	sxtb	r3, r3
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008446:	d103      	bne.n	8008450 <xQueueSemaphoreTake+0x158>
 8008448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008450:	f7ff f8e4 	bl	800761c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008454:	463a      	mov	r2, r7
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f000 ffdd 	bl	800941c <xTaskCheckForTimeOut>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d132      	bne.n	80084ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800846a:	f000 f9f5 	bl	8008858 <prvIsQueueEmpty>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d026      	beq.n	80084c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800847c:	f7ff f89c 	bl	80075b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4618      	mov	r0, r3
 8008486:	f001 f943 	bl	8009710 <xTaskPriorityInherit>
 800848a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800848c:	f7ff f8c6 	bl	800761c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008492:	3324      	adds	r3, #36	@ 0x24
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fef3 	bl	8009284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800849e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084a0:	f000 f988 	bl	80087b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084a4:	f000 fd00 	bl	8008ea8 <xTaskResumeAll>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f47f af67 	bne.w	800837e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80084b0:	4b18      	ldr	r3, [pc, #96]	@ (8008514 <xQueueSemaphoreTake+0x21c>)
 80084b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	e75d      	b.n	800837e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084c4:	f000 f976 	bl	80087b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084c8:	f000 fcee 	bl	8008ea8 <xTaskResumeAll>
 80084cc:	e757      	b.n	800837e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084d0:	f000 f970 	bl	80087b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d4:	f000 fce8 	bl	8008ea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084da:	f000 f9bd 	bl	8008858 <prvIsQueueEmpty>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f43f af4c 	beq.w	800837e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00d      	beq.n	8008508 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80084ec:	f7ff f864 	bl	80075b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084f2:	f000 f8b7 	bl	8008664 <prvGetDisinheritPriorityAfterTimeout>
 80084f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 f9de 	bl	80098c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008504:	f7ff f88a 	bl	800761c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800850a:	4618      	mov	r0, r3
 800850c:	3738      	adds	r7, #56	@ 0x38
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	@ 0x38
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	623b      	str	r3, [r7, #32]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <xQueueReceiveFromISR+0x3c>
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <xQueueReceiveFromISR+0x40>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <xQueueReceiveFromISR+0x42>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fb      	str	r3, [r7, #28]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008576:	f7ff f8ff 	bl	8007778 <vPortValidateInterruptPriority>
	__asm volatile
 800857a:	f3ef 8211 	mrs	r2, BASEPRI
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	61ba      	str	r2, [r7, #24]
 8008590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008594:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d02f      	beq.n	8008602 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085b0:	f000 f8da 	bl	8008768 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	1e5a      	subs	r2, r3, #1
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80085bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d112      	bne.n	80085ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	3310      	adds	r3, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fea8 	bl	8009328 <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e007      	b.n	80085fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085f0:	3301      	adds	r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	b25a      	sxtb	r2, r3
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80085fc:	2301      	movs	r3, #1
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	e001      	b.n	8008606 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f383 8811 	msr	BASEPRI, r3
}
 8008610:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008614:	4618      	mov	r0, r3
 8008616:	3738      	adds	r7, #56	@ 0x38
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10b      	bne.n	8008646 <vQueueDelete+0x2a>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60bb      	str	r3, [r7, #8]
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f95e 	bl	8008908 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7fe fca6 	bl	8006fa8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e001      	b.n	8008686 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008686:	68fb      	ldr	r3, [r7, #12]
	}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10d      	bne.n	80086ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d14d      	bne.n	8008756 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f88e 	bl	80097e0 <xTaskPriorityDisinherit>
 80086c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	e043      	b.n	8008756 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d119      	bne.n	8008708 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6858      	ldr	r0, [r3, #4]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086dc:	461a      	mov	r2, r3
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	f00d f995 	bl	8015a0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ec:	441a      	add	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d32b      	bcc.n	8008756 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	e026      	b.n	8008756 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68d8      	ldr	r0, [r3, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008710:	461a      	mov	r2, r3
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	f00d f97b 	bl	8015a0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008720:	425b      	negs	r3, r3
 8008722:	441a      	add	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d207      	bcs.n	8008744 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873c:	425b      	negs	r3, r3
 800873e:	441a      	add	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d105      	bne.n	8008756 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3b01      	subs	r3, #1
 8008754:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800875e:	697b      	ldr	r3, [r7, #20]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d018      	beq.n	80087ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	441a      	add	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	429a      	cmp	r2, r3
 8008792:	d303      	bcc.n	800879c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68d9      	ldr	r1, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	461a      	mov	r2, r3
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f00d f931 	bl	8015a0e <memcpy>
	}
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087bc:	f7fe fefc 	bl	80075b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087c8:	e011      	b.n	80087ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d012      	beq.n	80087f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fda6 	bl	8009328 <xTaskRemoveFromEventList>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087e2:	f000 fe7f 	bl	80094e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dce9      	bgt.n	80087ca <prvUnlockQueue+0x16>
 80087f6:	e000      	b.n	80087fa <prvUnlockQueue+0x46>
					break;
 80087f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	22ff      	movs	r2, #255	@ 0xff
 80087fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008802:	f7fe ff0b 	bl	800761c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008806:	f7fe fed7 	bl	80075b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008810:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008812:	e011      	b.n	8008838 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d012      	beq.n	8008842 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3310      	adds	r3, #16
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fd81 	bl	8009328 <xTaskRemoveFromEventList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800882c:	f000 fe5a 	bl	80094e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	3b01      	subs	r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	dce9      	bgt.n	8008814 <prvUnlockQueue+0x60>
 8008840:	e000      	b.n	8008844 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008842:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	22ff      	movs	r2, #255	@ 0xff
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800884c:	f7fe fee6 	bl	800761c <vPortExitCritical>
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008860:	f7fe feaa 	bl	80075b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e001      	b.n	8008876 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008876:	f7fe fed1 	bl	800761c <vPortExitCritical>

	return xReturn;
 800887a:	68fb      	ldr	r3, [r7, #12]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800888c:	f7fe fe94 	bl	80075b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	429a      	cmp	r2, r3
 800889a:	d102      	bne.n	80088a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e001      	b.n	80088a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088a6:	f7fe feb9 	bl	800761c <vPortExitCritical>

	return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e014      	b.n	80088ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088d0:	490c      	ldr	r1, [pc, #48]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088da:	4a0a      	ldr	r2, [pc, #40]	@ (8008904 <vQueueAddToRegistry+0x50>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088e6:	e006      	b.n	80088f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b07      	cmp	r3, #7
 80088f2:	d9e7      	bls.n	80088c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	24009414 	.word	0x24009414

08008908 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e016      	b.n	8008944 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008916:	4a10      	ldr	r2, [pc, #64]	@ (8008958 <vQueueUnregisterQueue+0x50>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	4413      	add	r3, r2
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d10b      	bne.n	800893e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008926:	4a0c      	ldr	r2, [pc, #48]	@ (8008958 <vQueueUnregisterQueue+0x50>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2100      	movs	r1, #0
 800892c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008930:	4a09      	ldr	r2, [pc, #36]	@ (8008958 <vQueueUnregisterQueue+0x50>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4413      	add	r3, r2
 8008938:	2200      	movs	r2, #0
 800893a:	605a      	str	r2, [r3, #4]
				break;
 800893c:	e006      	b.n	800894c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b07      	cmp	r3, #7
 8008948:	d9e5      	bls.n	8008916 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	24009414 	.word	0x24009414

0800895c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800896c:	f7fe fe24 	bl	80075b8 <vPortEnterCritical>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008976:	b25b      	sxtb	r3, r3
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d103      	bne.n	8008986 <vQueueWaitForMessageRestricted+0x2a>
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800898c:	b25b      	sxtb	r3, r3
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d103      	bne.n	800899c <vQueueWaitForMessageRestricted+0x40>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800899c:	f7fe fe3e 	bl	800761c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	3324      	adds	r3, #36	@ 0x24
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fc8d 	bl	80092d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089b6:	6978      	ldr	r0, [r7, #20]
 80089b8:	f7ff fefc 	bl	80087b4 <prvUnlockQueue>
	}
 80089bc:	bf00      	nop
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	@ 0x38
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10b      	bne.n	80089f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	623b      	str	r3, [r7, #32]
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	e7fd      	b.n	80089ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10b      	bne.n	8008a0e <xTaskCreateStatic+0x4a>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	61fb      	str	r3, [r7, #28]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a0e:	23a8      	movs	r3, #168	@ 0xa8
 8008a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2ba8      	cmp	r3, #168	@ 0xa8
 8008a16:	d00b      	beq.n	8008a30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	61bb      	str	r3, [r7, #24]
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01e      	beq.n	8008a76 <xTaskCreateStatic+0xb2>
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01b      	beq.n	8008a76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a50:	2300      	movs	r3, #0
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	9302      	str	r3, [sp, #8]
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f851 	bl	8008b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a70:	f000 f8f6 	bl	8008c60 <prvAddNewTaskToReadyList>
 8008a74:	e001      	b.n	8008a7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a7a:	697b      	ldr	r3, [r7, #20]
	}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	@ 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08c      	sub	sp, #48	@ 0x30
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4613      	mov	r3, r2
 8008a92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe f9b7 	bl	8006e0c <pvPortMalloc>
 8008a9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008aa6:	20a8      	movs	r0, #168	@ 0xa8
 8008aa8:	f7fe f9b0 	bl	8006e0c <pvPortMalloc>
 8008aac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008aba:	e005      	b.n	8008ac8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008abc:	6978      	ldr	r0, [r7, #20]
 8008abe:	f7fe fa73 	bl	8006fa8 <vPortFree>
 8008ac2:	e001      	b.n	8008ac8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d017      	beq.n	8008afe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 f80f 	bl	8008b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008af2:	69f8      	ldr	r0, [r7, #28]
 8008af4:	f000 f8b4 	bl	8008c60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	e002      	b.n	8008b04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295
 8008b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b04:	69bb      	ldr	r3, [r7, #24]
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	461a      	mov	r2, r3
 8008b28:	21a5      	movs	r1, #165	@ 0xa5
 8008b2a:	f00c fea4 	bl	8015876 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008b38:	440b      	add	r3, r1
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	617b      	str	r3, [r7, #20]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01f      	beq.n	8008bb0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	e012      	b.n	8008b9c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	7819      	ldrb	r1, [r3, #0]
 8008b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	3334      	adds	r3, #52	@ 0x34
 8008b86:	460a      	mov	r2, r1
 8008b88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	4413      	add	r3, r2
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d006      	beq.n	8008ba4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	d9e9      	bls.n	8008b76 <prvInitialiseNewTask+0x66>
 8008ba2:	e000      	b.n	8008ba6 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ba4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008bae:	e003      	b.n	8008bb8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	2b37      	cmp	r3, #55	@ 0x37
 8008bbc:	d901      	bls.n	8008bc2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bbe:	2337      	movs	r3, #55	@ 0x37
 8008bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fb25 	bl	8007228 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	3318      	adds	r3, #24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fb20 	bl	8007228 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	3354      	adds	r3, #84	@ 0x54
 8008c12:	224c      	movs	r2, #76	@ 0x4c
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00c fe2d 	bl	8015876 <memset>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c54 <prvInitialiseNewTask+0x144>)
 8008c20:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	4a0c      	ldr	r2, [pc, #48]	@ (8008c58 <prvInitialiseNewTask+0x148>)
 8008c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008c5c <prvInitialiseNewTask+0x14c>)
 8008c2c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	68f9      	ldr	r1, [r7, #12]
 8008c32:	69b8      	ldr	r0, [r7, #24]
 8008c34:	f7fe fb8c 	bl	8007350 <pxPortInitialiseStack>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	240106b4 	.word	0x240106b4
 8008c58:	2401071c 	.word	0x2401071c
 8008c5c:	24010784 	.word	0x24010784

08008c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c68:	f7fe fca6 	bl	80075b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d24 <prvAddNewTaskToReadyList+0xc4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3301      	adds	r3, #1
 8008c72:	4a2c      	ldr	r2, [pc, #176]	@ (8008d24 <prvAddNewTaskToReadyList+0xc4>)
 8008c74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c76:	4b2c      	ldr	r3, [pc, #176]	@ (8008d28 <prvAddNewTaskToReadyList+0xc8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d28 <prvAddNewTaskToReadyList+0xc8>)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c84:	4b27      	ldr	r3, [pc, #156]	@ (8008d24 <prvAddNewTaskToReadyList+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d110      	bne.n	8008cae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c8c:	f000 fc4e 	bl	800952c <prvInitialiseTaskLists>
 8008c90:	e00d      	b.n	8008cae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c92:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <prvAddNewTaskToReadyList+0xcc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c9a:	4b23      	ldr	r3, [pc, #140]	@ (8008d28 <prvAddNewTaskToReadyList+0xc8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d802      	bhi.n	8008cae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d28 <prvAddNewTaskToReadyList+0xc8>)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cae:	4b20      	ldr	r3, [pc, #128]	@ (8008d30 <prvAddNewTaskToReadyList+0xd0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8008d30 <prvAddNewTaskToReadyList+0xd0>)
 8008cb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d30 <prvAddNewTaskToReadyList+0xd0>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d34 <prvAddNewTaskToReadyList+0xd4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d903      	bls.n	8008cd4 <prvAddNewTaskToReadyList+0x74>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <prvAddNewTaskToReadyList+0xd4>)
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <prvAddNewTaskToReadyList+0xd8>)
 8008ce2:	441a      	add	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7fe faa9 	bl	8007242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cf0:	f7fe fc94 	bl	800761c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8008d2c <prvAddNewTaskToReadyList+0xcc>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00e      	beq.n	8008d1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <prvAddNewTaskToReadyList+0xc8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d207      	bcs.n	8008d1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d3c <prvAddNewTaskToReadyList+0xdc>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	24009928 	.word	0x24009928
 8008d28:	24009454 	.word	0x24009454
 8008d2c:	24009934 	.word	0x24009934
 8008d30:	24009944 	.word	0x24009944
 8008d34:	24009930 	.word	0x24009930
 8008d38:	24009458 	.word	0x24009458
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d018      	beq.n	8008d84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d52:	4b14      	ldr	r3, [pc, #80]	@ (8008da4 <vTaskDelay+0x64>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <vTaskDelay+0x32>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	60bb      	str	r3, [r7, #8]
}
 8008d6c:	bf00      	nop
 8008d6e:	bf00      	nop
 8008d70:	e7fd      	b.n	8008d6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d72:	f000 f88b 	bl	8008e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d76:	2100      	movs	r1, #0
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fe39 	bl	80099f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d7e:	f000 f893 	bl	8008ea8 <xTaskResumeAll>
 8008d82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d107      	bne.n	8008d9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008d8a:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <vTaskDelay+0x68>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	24009950 	.word	0x24009950
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	@ 0x28
 8008db0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dba:	463a      	mov	r2, r7
 8008dbc:	1d39      	adds	r1, r7, #4
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fd ffee 	bl	8006da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	9202      	str	r2, [sp, #8]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	460a      	mov	r2, r1
 8008dda:	4924      	ldr	r1, [pc, #144]	@ (8008e6c <vTaskStartScheduler+0xc0>)
 8008ddc:	4824      	ldr	r0, [pc, #144]	@ (8008e70 <vTaskStartScheduler+0xc4>)
 8008dde:	f7ff fdf1 	bl	80089c4 <xTaskCreateStatic>
 8008de2:	4603      	mov	r3, r0
 8008de4:	4a23      	ldr	r2, [pc, #140]	@ (8008e74 <vTaskStartScheduler+0xc8>)
 8008de6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008de8:	4b22      	ldr	r3, [pc, #136]	@ (8008e74 <vTaskStartScheduler+0xc8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	e001      	b.n	8008dfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d102      	bne.n	8008e06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e00:	f000 fe4a 	bl	8009a98 <xTimerCreateTimerTask>
 8008e04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d11b      	bne.n	8008e44 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	613b      	str	r3, [r7, #16]
}
 8008e1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e20:	4b15      	ldr	r3, [pc, #84]	@ (8008e78 <vTaskStartScheduler+0xcc>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3354      	adds	r3, #84	@ 0x54
 8008e26:	4a15      	ldr	r2, [pc, #84]	@ (8008e7c <vTaskStartScheduler+0xd0>)
 8008e28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e2a:	4b15      	ldr	r3, [pc, #84]	@ (8008e80 <vTaskStartScheduler+0xd4>)
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e32:	4b14      	ldr	r3, [pc, #80]	@ (8008e84 <vTaskStartScheduler+0xd8>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e38:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <vTaskStartScheduler+0xdc>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e3e:	f7fe fb17 	bl	8007470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e42:	e00f      	b.n	8008e64 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d10b      	bne.n	8008e64 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	e7fd      	b.n	8008e60 <vTaskStartScheduler+0xb4>
}
 8008e64:	bf00      	nop
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	080168b4 	.word	0x080168b4
 8008e70:	080094fd 	.word	0x080094fd
 8008e74:	2400994c 	.word	0x2400994c
 8008e78:	24009454 	.word	0x24009454
 8008e7c:	24000040 	.word	0x24000040
 8008e80:	24009948 	.word	0x24009948
 8008e84:	24009934 	.word	0x24009934
 8008e88:	2400992c 	.word	0x2400992c

08008e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e90:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <vTaskSuspendAll+0x18>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	4a03      	ldr	r2, [pc, #12]	@ (8008ea4 <vTaskSuspendAll+0x18>)
 8008e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e9a:	bf00      	nop
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	24009950 	.word	0x24009950

08008ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eb6:	4b42      	ldr	r3, [pc, #264]	@ (8008fc0 <xTaskResumeAll+0x118>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	603b      	str	r3, [r7, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ed6:	f7fe fb6f 	bl	80075b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008eda:	4b39      	ldr	r3, [pc, #228]	@ (8008fc0 <xTaskResumeAll+0x118>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4a37      	ldr	r2, [pc, #220]	@ (8008fc0 <xTaskResumeAll+0x118>)
 8008ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee4:	4b36      	ldr	r3, [pc, #216]	@ (8008fc0 <xTaskResumeAll+0x118>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d162      	bne.n	8008fb2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eec:	4b35      	ldr	r3, [pc, #212]	@ (8008fc4 <xTaskResumeAll+0x11c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d05e      	beq.n	8008fb2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ef4:	e02f      	b.n	8008f56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef6:	4b34      	ldr	r3, [pc, #208]	@ (8008fc8 <xTaskResumeAll+0x120>)
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3318      	adds	r3, #24
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe f9fa 	bl	80072fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe f9f5 	bl	80072fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	4b2d      	ldr	r3, [pc, #180]	@ (8008fcc <xTaskResumeAll+0x124>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d903      	bls.n	8008f26 <xTaskResumeAll+0x7e>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f22:	4a2a      	ldr	r2, [pc, #168]	@ (8008fcc <xTaskResumeAll+0x124>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4a27      	ldr	r2, [pc, #156]	@ (8008fd0 <xTaskResumeAll+0x128>)
 8008f34:	441a      	add	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7fe f980 	bl	8007242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f46:	4b23      	ldr	r3, [pc, #140]	@ (8008fd4 <xTaskResumeAll+0x12c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d302      	bcc.n	8008f56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f50:	4b21      	ldr	r3, [pc, #132]	@ (8008fd8 <xTaskResumeAll+0x130>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f56:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc8 <xTaskResumeAll+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1cb      	bne.n	8008ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f64:	f000 fb86 	bl	8009674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f68:	4b1c      	ldr	r3, [pc, #112]	@ (8008fdc <xTaskResumeAll+0x134>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d010      	beq.n	8008f96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f74:	f000 f858 	bl	8009028 <xTaskIncrementTick>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008f7e:	4b16      	ldr	r3, [pc, #88]	@ (8008fd8 <xTaskResumeAll+0x130>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f1      	bne.n	8008f74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008f90:	4b12      	ldr	r3, [pc, #72]	@ (8008fdc <xTaskResumeAll+0x134>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f96:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <xTaskResumeAll+0x130>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <xTaskResumeAll+0x138>)
 8008fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fb2:	f7fe fb33 	bl	800761c <vPortExitCritical>

	return xAlreadyYielded;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	24009950 	.word	0x24009950
 8008fc4:	24009928 	.word	0x24009928
 8008fc8:	240098e8 	.word	0x240098e8
 8008fcc:	24009930 	.word	0x24009930
 8008fd0:	24009458 	.word	0x24009458
 8008fd4:	24009454 	.word	0x24009454
 8008fd8:	2400993c 	.word	0x2400993c
 8008fdc:	24009938 	.word	0x24009938
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fea:	4b05      	ldr	r3, [pc, #20]	@ (8009000 <xTaskGetTickCount+0x1c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ff0:	687b      	ldr	r3, [r7, #4]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	2400992c 	.word	0x2400992c

08009004 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800900a:	f7fe fbb5 	bl	8007778 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800900e:	2300      	movs	r3, #0
 8009010:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009012:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <xTaskGetTickCountFromISR+0x20>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009018:	683b      	ldr	r3, [r7, #0]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	2400992c 	.word	0x2400992c

08009028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009032:	4b4f      	ldr	r3, [pc, #316]	@ (8009170 <xTaskIncrementTick+0x148>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 8090 	bne.w	800915c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800903c:	4b4d      	ldr	r3, [pc, #308]	@ (8009174 <xTaskIncrementTick+0x14c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009044:	4a4b      	ldr	r2, [pc, #300]	@ (8009174 <xTaskIncrementTick+0x14c>)
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d121      	bne.n	8009094 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009050:	4b49      	ldr	r3, [pc, #292]	@ (8009178 <xTaskIncrementTick+0x150>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <xTaskIncrementTick+0x4a>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	603b      	str	r3, [r7, #0]
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	e7fd      	b.n	800906e <xTaskIncrementTick+0x46>
 8009072:	4b41      	ldr	r3, [pc, #260]	@ (8009178 <xTaskIncrementTick+0x150>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	4b40      	ldr	r3, [pc, #256]	@ (800917c <xTaskIncrementTick+0x154>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a3e      	ldr	r2, [pc, #248]	@ (8009178 <xTaskIncrementTick+0x150>)
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	4a3e      	ldr	r2, [pc, #248]	@ (800917c <xTaskIncrementTick+0x154>)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	4b3e      	ldr	r3, [pc, #248]	@ (8009180 <xTaskIncrementTick+0x158>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a3c      	ldr	r2, [pc, #240]	@ (8009180 <xTaskIncrementTick+0x158>)
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f000 faf0 	bl	8009674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009094:	4b3b      	ldr	r3, [pc, #236]	@ (8009184 <xTaskIncrementTick+0x15c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	429a      	cmp	r2, r3
 800909c:	d349      	bcc.n	8009132 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909e:	4b36      	ldr	r3, [pc, #216]	@ (8009178 <xTaskIncrementTick+0x150>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a8:	4b36      	ldr	r3, [pc, #216]	@ (8009184 <xTaskIncrementTick+0x15c>)
 80090aa:	f04f 32ff 	mov.w	r2, #4294967295
 80090ae:	601a      	str	r2, [r3, #0]
					break;
 80090b0:	e03f      	b.n	8009132 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b2:	4b31      	ldr	r3, [pc, #196]	@ (8009178 <xTaskIncrementTick+0x150>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d203      	bcs.n	80090d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009184 <xTaskIncrementTick+0x15c>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090d0:	e02f      	b.n	8009132 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3304      	adds	r3, #4
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe f910 	bl	80072fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	3318      	adds	r3, #24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe f907 	bl	80072fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f2:	4b25      	ldr	r3, [pc, #148]	@ (8009188 <xTaskIncrementTick+0x160>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d903      	bls.n	8009102 <xTaskIncrementTick+0xda>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	4a22      	ldr	r2, [pc, #136]	@ (8009188 <xTaskIncrementTick+0x160>)
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4a1f      	ldr	r2, [pc, #124]	@ (800918c <xTaskIncrementTick+0x164>)
 8009110:	441a      	add	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3304      	adds	r3, #4
 8009116:	4619      	mov	r1, r3
 8009118:	4610      	mov	r0, r2
 800911a:	f7fe f892 	bl	8007242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009122:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <xTaskIncrementTick+0x168>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009128:	429a      	cmp	r2, r3
 800912a:	d3b8      	bcc.n	800909e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009130:	e7b5      	b.n	800909e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009132:	4b17      	ldr	r3, [pc, #92]	@ (8009190 <xTaskIncrementTick+0x168>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009138:	4914      	ldr	r1, [pc, #80]	@ (800918c <xTaskIncrementTick+0x164>)
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d901      	bls.n	800914e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800914e:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <xTaskIncrementTick+0x16c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009156:	2301      	movs	r3, #1
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e004      	b.n	8009166 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800915c:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <xTaskIncrementTick+0x170>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	4a0d      	ldr	r2, [pc, #52]	@ (8009198 <xTaskIncrementTick+0x170>)
 8009164:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009166:	697b      	ldr	r3, [r7, #20]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	24009950 	.word	0x24009950
 8009174:	2400992c 	.word	0x2400992c
 8009178:	240098e0 	.word	0x240098e0
 800917c:	240098e4 	.word	0x240098e4
 8009180:	24009940 	.word	0x24009940
 8009184:	24009948 	.word	0x24009948
 8009188:	24009930 	.word	0x24009930
 800918c:	24009458 	.word	0x24009458
 8009190:	24009454 	.word	0x24009454
 8009194:	2400993c 	.word	0x2400993c
 8009198:	24009938 	.word	0x24009938

0800919c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091a2:	4b32      	ldr	r3, [pc, #200]	@ (800926c <vTaskSwitchContext+0xd0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091aa:	4b31      	ldr	r3, [pc, #196]	@ (8009270 <vTaskSwitchContext+0xd4>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091b0:	e058      	b.n	8009264 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 80091b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009270 <vTaskSwitchContext+0xd4>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009274 <vTaskSwitchContext+0xd8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b2d      	ldr	r3, [pc, #180]	@ (8009274 <vTaskSwitchContext+0xd8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d808      	bhi.n	80091da <vTaskSwitchContext+0x3e>
 80091c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009274 <vTaskSwitchContext+0xd8>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	4b29      	ldr	r3, [pc, #164]	@ (8009274 <vTaskSwitchContext+0xd8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3334      	adds	r3, #52	@ 0x34
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f7f7 f969 	bl	80004ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091da:	4b27      	ldr	r3, [pc, #156]	@ (8009278 <vTaskSwitchContext+0xdc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e011      	b.n	8009206 <vTaskSwitchContext+0x6a>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <vTaskSwitchContext+0x64>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	607b      	str	r3, [r7, #4]
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <vTaskSwitchContext+0x60>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3b01      	subs	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	491d      	ldr	r1, [pc, #116]	@ (800927c <vTaskSwitchContext+0xe0>)
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0e3      	beq.n	80091e2 <vTaskSwitchContext+0x46>
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4a15      	ldr	r2, [pc, #84]	@ (800927c <vTaskSwitchContext+0xe0>)
 8009226:	4413      	add	r3, r2
 8009228:	60bb      	str	r3, [r7, #8]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	605a      	str	r2, [r3, #4]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	3308      	adds	r3, #8
 800923c:	429a      	cmp	r2, r3
 800923e:	d104      	bne.n	800924a <vTaskSwitchContext+0xae>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	4a08      	ldr	r2, [pc, #32]	@ (8009274 <vTaskSwitchContext+0xd8>)
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	4a08      	ldr	r2, [pc, #32]	@ (8009278 <vTaskSwitchContext+0xdc>)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800925a:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <vTaskSwitchContext+0xd8>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3354      	adds	r3, #84	@ 0x54
 8009260:	4a07      	ldr	r2, [pc, #28]	@ (8009280 <vTaskSwitchContext+0xe4>)
 8009262:	6013      	str	r3, [r2, #0]
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	24009950 	.word	0x24009950
 8009270:	2400993c 	.word	0x2400993c
 8009274:	24009454 	.word	0x24009454
 8009278:	24009930 	.word	0x24009930
 800927c:	24009458 	.word	0x24009458
 8009280:	24000040 	.word	0x24000040

08009284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
}
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ac:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <vTaskPlaceOnEventList+0x48>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3318      	adds	r3, #24
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7fd ffe8 	bl	800728a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092ba:	2101      	movs	r1, #1
 80092bc:	6838      	ldr	r0, [r7, #0]
 80092be:	f000 fb97 	bl	80099f0 <prvAddCurrentTaskToDelayedList>
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	24009454 	.word	0x24009454

080092d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	617b      	str	r3, [r7, #20]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009324 <vTaskPlaceOnEventListRestricted+0x54>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3318      	adds	r3, #24
 8009300:	4619      	mov	r1, r3
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7fd ff9d 	bl	8007242 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	68b8      	ldr	r0, [r7, #8]
 8009318:	f000 fb6a 	bl	80099f0 <prvAddCurrentTaskToDelayedList>
	}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	24009454 	.word	0x24009454

08009328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10b      	bne.n	8009356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	e7fd      	b.n	8009352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	3318      	adds	r3, #24
 800935a:	4618      	mov	r0, r3
 800935c:	f7fd ffce 	bl	80072fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009360:	4b1d      	ldr	r3, [pc, #116]	@ (80093d8 <xTaskRemoveFromEventList+0xb0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11d      	bne.n	80093a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	3304      	adds	r3, #4
 800936c:	4618      	mov	r0, r3
 800936e:	f7fd ffc5 	bl	80072fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009376:	4b19      	ldr	r3, [pc, #100]	@ (80093dc <xTaskRemoveFromEventList+0xb4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d903      	bls.n	8009386 <xTaskRemoveFromEventList+0x5e>
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	4a16      	ldr	r2, [pc, #88]	@ (80093dc <xTaskRemoveFromEventList+0xb4>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a13      	ldr	r2, [pc, #76]	@ (80093e0 <xTaskRemoveFromEventList+0xb8>)
 8009394:	441a      	add	r2, r3
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fd ff50 	bl	8007242 <vListInsertEnd>
 80093a2:	e005      	b.n	80093b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3318      	adds	r3, #24
 80093a8:	4619      	mov	r1, r3
 80093aa:	480e      	ldr	r0, [pc, #56]	@ (80093e4 <xTaskRemoveFromEventList+0xbc>)
 80093ac:	f7fd ff49 	bl	8007242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b4:	4b0c      	ldr	r3, [pc, #48]	@ (80093e8 <xTaskRemoveFromEventList+0xc0>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d905      	bls.n	80093ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093be:	2301      	movs	r3, #1
 80093c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093c2:	4b0a      	ldr	r3, [pc, #40]	@ (80093ec <xTaskRemoveFromEventList+0xc4>)
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e001      	b.n	80093ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093ce:	697b      	ldr	r3, [r7, #20]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	24009950 	.word	0x24009950
 80093dc:	24009930 	.word	0x24009930
 80093e0:	24009458 	.word	0x24009458
 80093e4:	240098e8 	.word	0x240098e8
 80093e8:	24009454 	.word	0x24009454
 80093ec:	2400993c 	.word	0x2400993c

080093f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093f8:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <vTaskInternalSetTimeOutState+0x24>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <vTaskInternalSetTimeOutState+0x28>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	24009940 	.word	0x24009940
 8009418:	2400992c 	.word	0x2400992c

0800941c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10b      	bne.n	8009444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	613b      	str	r3, [r7, #16]
}
 800943e:	bf00      	nop
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60fb      	str	r3, [r7, #12]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009462:	f7fe f8a9 	bl	80075b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009466:	4b1d      	ldr	r3, [pc, #116]	@ (80094dc <xTaskCheckForTimeOut+0xc0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d102      	bne.n	8009486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009480:	2300      	movs	r3, #0
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e023      	b.n	80094ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b15      	ldr	r3, [pc, #84]	@ (80094e0 <xTaskCheckForTimeOut+0xc4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d007      	beq.n	80094a2 <xTaskCheckForTimeOut+0x86>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800949c:	2301      	movs	r3, #1
 800949e:	61fb      	str	r3, [r7, #28]
 80094a0:	e015      	b.n	80094ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d20b      	bcs.n	80094c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff ff99 	bl	80093f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	e004      	b.n	80094ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ca:	2301      	movs	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094ce:	f7fe f8a5 	bl	800761c <vPortExitCritical>

	return xReturn;
 80094d2:	69fb      	ldr	r3, [r7, #28]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3720      	adds	r7, #32
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2400992c 	.word	0x2400992c
 80094e0:	24009940 	.word	0x24009940

080094e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094e8:	4b03      	ldr	r3, [pc, #12]	@ (80094f8 <vTaskMissedYield+0x14>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	2400993c 	.word	0x2400993c

080094fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009504:	f000 f852 	bl	80095ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009508:	4b06      	ldr	r3, [pc, #24]	@ (8009524 <prvIdleTask+0x28>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d9f9      	bls.n	8009504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009510:	4b05      	ldr	r3, [pc, #20]	@ (8009528 <prvIdleTask+0x2c>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009520:	e7f0      	b.n	8009504 <prvIdleTask+0x8>
 8009522:	bf00      	nop
 8009524:	24009458 	.word	0x24009458
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	e00c      	b.n	8009552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4a12      	ldr	r2, [pc, #72]	@ (800958c <prvInitialiseTaskLists+0x60>)
 8009544:	4413      	add	r3, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f7fd fe4e 	bl	80071e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3301      	adds	r3, #1
 8009550:	607b      	str	r3, [r7, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b37      	cmp	r3, #55	@ 0x37
 8009556:	d9ef      	bls.n	8009538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009558:	480d      	ldr	r0, [pc, #52]	@ (8009590 <prvInitialiseTaskLists+0x64>)
 800955a:	f7fd fe45 	bl	80071e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800955e:	480d      	ldr	r0, [pc, #52]	@ (8009594 <prvInitialiseTaskLists+0x68>)
 8009560:	f7fd fe42 	bl	80071e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009564:	480c      	ldr	r0, [pc, #48]	@ (8009598 <prvInitialiseTaskLists+0x6c>)
 8009566:	f7fd fe3f 	bl	80071e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800956a:	480c      	ldr	r0, [pc, #48]	@ (800959c <prvInitialiseTaskLists+0x70>)
 800956c:	f7fd fe3c 	bl	80071e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009570:	480b      	ldr	r0, [pc, #44]	@ (80095a0 <prvInitialiseTaskLists+0x74>)
 8009572:	f7fd fe39 	bl	80071e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009576:	4b0b      	ldr	r3, [pc, #44]	@ (80095a4 <prvInitialiseTaskLists+0x78>)
 8009578:	4a05      	ldr	r2, [pc, #20]	@ (8009590 <prvInitialiseTaskLists+0x64>)
 800957a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <prvInitialiseTaskLists+0x7c>)
 800957e:	4a05      	ldr	r2, [pc, #20]	@ (8009594 <prvInitialiseTaskLists+0x68>)
 8009580:	601a      	str	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	24009458 	.word	0x24009458
 8009590:	240098b8 	.word	0x240098b8
 8009594:	240098cc 	.word	0x240098cc
 8009598:	240098e8 	.word	0x240098e8
 800959c:	240098fc 	.word	0x240098fc
 80095a0:	24009914 	.word	0x24009914
 80095a4:	240098e0 	.word	0x240098e0
 80095a8:	240098e4 	.word	0x240098e4

080095ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095b2:	e019      	b.n	80095e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095b4:	f7fe f800 	bl	80075b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b8:	4b10      	ldr	r3, [pc, #64]	@ (80095fc <prvCheckTasksWaitingTermination+0x50>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fd fe99 	bl	80072fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009600 <prvCheckTasksWaitingTermination+0x54>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	4a0b      	ldr	r2, [pc, #44]	@ (8009600 <prvCheckTasksWaitingTermination+0x54>)
 80095d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009604 <prvCheckTasksWaitingTermination+0x58>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3b01      	subs	r3, #1
 80095da:	4a0a      	ldr	r2, [pc, #40]	@ (8009604 <prvCheckTasksWaitingTermination+0x58>)
 80095dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095de:	f7fe f81d 	bl	800761c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f810 	bl	8009608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095e8:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <prvCheckTasksWaitingTermination+0x58>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e1      	bne.n	80095b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	240098fc 	.word	0x240098fc
 8009600:	24009928 	.word	0x24009928
 8009604:	24009910 	.word	0x24009910

08009608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3354      	adds	r3, #84	@ 0x54
 8009614:	4618      	mov	r0, r3
 8009616:	f00c f947 	bl	80158a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009620:	2b00      	cmp	r3, #0
 8009622:	d108      	bne.n	8009636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009628:	4618      	mov	r0, r3
 800962a:	f7fd fcbd 	bl	8006fa8 <vPortFree>
				vPortFree( pxTCB );
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fd fcba 	bl	8006fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009634:	e019      	b.n	800966a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800963c:	2b01      	cmp	r3, #1
 800963e:	d103      	bne.n	8009648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7fd fcb1 	bl	8006fa8 <vPortFree>
	}
 8009646:	e010      	b.n	800966a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800964e:	2b02      	cmp	r3, #2
 8009650:	d00b      	beq.n	800966a <prvDeleteTCB+0x62>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <prvDeleteTCB+0x5e>
	}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967a:	4b0c      	ldr	r3, [pc, #48]	@ (80096ac <prvResetNextTaskUnblockTime+0x38>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009684:	4b0a      	ldr	r3, [pc, #40]	@ (80096b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800968c:	e008      	b.n	80096a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800968e:	4b07      	ldr	r3, [pc, #28]	@ (80096ac <prvResetNextTaskUnblockTime+0x38>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	4a04      	ldr	r2, [pc, #16]	@ (80096b0 <prvResetNextTaskUnblockTime+0x3c>)
 800969e:	6013      	str	r3, [r2, #0]
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	240098e0 	.word	0x240098e0
 80096b0:	24009948 	.word	0x24009948

080096b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80096ba:	4b05      	ldr	r3, [pc, #20]	@ (80096d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80096c0:	687b      	ldr	r3, [r7, #4]
	}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	24009454 	.word	0x24009454

080096d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096da:	4b0b      	ldr	r3, [pc, #44]	@ (8009708 <xTaskGetSchedulerState+0x34>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096e2:	2301      	movs	r3, #1
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	e008      	b.n	80096fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e8:	4b08      	ldr	r3, [pc, #32]	@ (800970c <xTaskGetSchedulerState+0x38>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096f0:	2302      	movs	r3, #2
 80096f2:	607b      	str	r3, [r7, #4]
 80096f4:	e001      	b.n	80096fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096f6:	2300      	movs	r3, #0
 80096f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096fa:	687b      	ldr	r3, [r7, #4]
	}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	24009934 	.word	0x24009934
 800970c:	24009950 	.word	0x24009950

08009710 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d051      	beq.n	80097ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972a:	4b2a      	ldr	r3, [pc, #168]	@ (80097d4 <xTaskPriorityInherit+0xc4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	429a      	cmp	r2, r3
 8009732:	d241      	bcs.n	80097b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	db06      	blt.n	800974a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800973c:	4b25      	ldr	r3, [pc, #148]	@ (80097d4 <xTaskPriorityInherit+0xc4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6959      	ldr	r1, [r3, #20]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4a1f      	ldr	r2, [pc, #124]	@ (80097d8 <xTaskPriorityInherit+0xc8>)
 800975c:	4413      	add	r3, r2
 800975e:	4299      	cmp	r1, r3
 8009760:	d122      	bne.n	80097a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	3304      	adds	r3, #4
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd fdc8 	bl	80072fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800976c:	4b19      	ldr	r3, [pc, #100]	@ (80097d4 <xTaskPriorityInherit+0xc4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977a:	4b18      	ldr	r3, [pc, #96]	@ (80097dc <xTaskPriorityInherit+0xcc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d903      	bls.n	800978a <xTaskPriorityInherit+0x7a>
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009786:	4a15      	ldr	r2, [pc, #84]	@ (80097dc <xTaskPriorityInherit+0xcc>)
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4a10      	ldr	r2, [pc, #64]	@ (80097d8 <xTaskPriorityInherit+0xc8>)
 8009798:	441a      	add	r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	3304      	adds	r3, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f7fd fd4e 	bl	8007242 <vListInsertEnd>
 80097a6:	e004      	b.n	80097b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097a8:	4b0a      	ldr	r3, [pc, #40]	@ (80097d4 <xTaskPriorityInherit+0xc4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e008      	b.n	80097ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097bc:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <xTaskPriorityInherit+0xc4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d201      	bcs.n	80097ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097c6:	2301      	movs	r3, #1
 80097c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097ca:	68fb      	ldr	r3, [r7, #12]
	}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	24009454 	.word	0x24009454
 80097d8:	24009458 	.word	0x24009458
 80097dc:	24009930 	.word	0x24009930

080097e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d058      	beq.n	80098a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097f6:	4b2f      	ldr	r3, [pc, #188]	@ (80098b4 <xTaskPriorityDisinherit+0xd4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d00b      	beq.n	8009818 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	e7fd      	b.n	8009814 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60bb      	str	r3, [r7, #8]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984a:	429a      	cmp	r2, r3
 800984c:	d02c      	beq.n	80098a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009852:	2b00      	cmp	r3, #0
 8009854:	d128      	bne.n	80098a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3304      	adds	r3, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f7fd fd4e 	bl	80072fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009878:	4b0f      	ldr	r3, [pc, #60]	@ (80098b8 <xTaskPriorityDisinherit+0xd8>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d903      	bls.n	8009888 <xTaskPriorityDisinherit+0xa8>
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009884:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <xTaskPriorityDisinherit+0xd8>)
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4a09      	ldr	r2, [pc, #36]	@ (80098bc <xTaskPriorityDisinherit+0xdc>)
 8009896:	441a      	add	r2, r3
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f7fd fccf 	bl	8007242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098a8:	697b      	ldr	r3, [r7, #20]
	}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	24009454 	.word	0x24009454
 80098b8:	24009930 	.word	0x24009930
 80098bc:	24009458 	.word	0x24009458

080098c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098ce:	2301      	movs	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d06c      	beq.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10b      	bne.n	80098f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	60fb      	str	r3, [r7, #12]
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d902      	bls.n	8009908 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	e002      	b.n	800990e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800990c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	429a      	cmp	r2, r3
 8009916:	d04c      	beq.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	429a      	cmp	r2, r3
 8009920:	d147      	bne.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009922:	4b26      	ldr	r3, [pc, #152]	@ (80099bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	429a      	cmp	r2, r3
 800992a:	d10b      	bne.n	8009944 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60bb      	str	r3, [r7, #8]
}
 800993e:	bf00      	nop
 8009940:	bf00      	nop
 8009942:	e7fd      	b.n	8009940 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009948:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	db04      	blt.n	8009962 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	6959      	ldr	r1, [r3, #20]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4a13      	ldr	r2, [pc, #76]	@ (80099c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009972:	4413      	add	r3, r2
 8009974:	4299      	cmp	r1, r3
 8009976:	d11c      	bne.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	3304      	adds	r3, #4
 800997c:	4618      	mov	r0, r3
 800997e:	f7fd fcbd 	bl	80072fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009986:	4b0f      	ldr	r3, [pc, #60]	@ (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d903      	bls.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	4a0c      	ldr	r2, [pc, #48]	@ (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4a07      	ldr	r2, [pc, #28]	@ (80099c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80099a4:	441a      	add	r2, r3
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f7fd fc48 	bl	8007242 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099b2:	bf00      	nop
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	24009454 	.word	0x24009454
 80099c0:	24009458 	.word	0x24009458
 80099c4:	24009930 	.word	0x24009930

080099c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099cc:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d004      	beq.n	80099de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099da:	3201      	adds	r2, #1
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80099de:	4b03      	ldr	r3, [pc, #12]	@ (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099e0:	681b      	ldr	r3, [r3, #0]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	24009454 	.word	0x24009454

080099f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099fa:	4b21      	ldr	r3, [pc, #132]	@ (8009a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a00:	4b20      	ldr	r3, [pc, #128]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd fc78 	bl	80072fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a12:	d10a      	bne.n	8009a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4819      	ldr	r0, [pc, #100]	@ (8009a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a24:	f7fd fc0d 	bl	8007242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a28:	e026      	b.n	8009a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4413      	add	r3, r2
 8009a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d209      	bcs.n	8009a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a42:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7fd fc1b 	bl	800728a <vListInsert>
}
 8009a54:	e010      	b.n	8009a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a56:	4b0e      	ldr	r3, [pc, #56]	@ (8009a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fd fc11 	bl	800728a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a68:	4b0a      	ldr	r3, [pc, #40]	@ (8009a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d202      	bcs.n	8009a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a72:	4a08      	ldr	r2, [pc, #32]	@ (8009a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6013      	str	r3, [r2, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	2400992c 	.word	0x2400992c
 8009a84:	24009454 	.word	0x24009454
 8009a88:	24009914 	.word	0x24009914
 8009a8c:	240098e4 	.word	0x240098e4
 8009a90:	240098e0 	.word	0x240098e0
 8009a94:	24009948 	.word	0x24009948

08009a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	@ 0x28
 8009a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aa2:	f000 fb13 	bl	800a0cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8009b1c <xTimerCreateTimerTask+0x84>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d021      	beq.n	8009af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ab6:	1d3a      	adds	r2, r7, #4
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	f107 030c 	add.w	r3, r7, #12
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd f989 	bl	8006dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	9202      	str	r2, [sp, #8]
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	460a      	mov	r2, r1
 8009ad8:	4911      	ldr	r1, [pc, #68]	@ (8009b20 <xTimerCreateTimerTask+0x88>)
 8009ada:	4812      	ldr	r0, [pc, #72]	@ (8009b24 <xTimerCreateTimerTask+0x8c>)
 8009adc:	f7fe ff72 	bl	80089c4 <xTaskCreateStatic>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	4a11      	ldr	r2, [pc, #68]	@ (8009b28 <xTimerCreateTimerTask+0x90>)
 8009ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ae6:	4b10      	ldr	r3, [pc, #64]	@ (8009b28 <xTimerCreateTimerTask+0x90>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009aee:	2301      	movs	r3, #1
 8009af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	613b      	str	r3, [r7, #16]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b10:	697b      	ldr	r3, [r7, #20]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	24009984 	.word	0x24009984
 8009b20:	080168bc 	.word	0x080168bc
 8009b24:	08009c65 	.word	0x08009c65
 8009b28:	24009988 	.word	0x24009988

08009b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	@ 0x28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <xTimerGenericCommand+0x30>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	623b      	str	r3, [r7, #32]
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b5c:	4b19      	ldr	r3, [pc, #100]	@ (8009bc4 <xTimerGenericCommand+0x98>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02a      	beq.n	8009bba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	dc18      	bgt.n	8009ba8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b76:	f7ff fdad 	bl	80096d4 <xTaskGetSchedulerState>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d109      	bne.n	8009b94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b80:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <xTimerGenericCommand+0x98>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	f107 0110 	add.w	r1, r7, #16
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b8c:	f7fe f8a2 	bl	8007cd4 <xQueueGenericSend>
 8009b90:	6278      	str	r0, [r7, #36]	@ 0x24
 8009b92:	e012      	b.n	8009bba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b94:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc4 <xTimerGenericCommand+0x98>)
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	f107 0110 	add.w	r1, r7, #16
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f7fe f898 	bl	8007cd4 <xQueueGenericSend>
 8009ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ba6:	e008      	b.n	8009bba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <xTimerGenericCommand+0x98>)
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	f107 0110 	add.w	r1, r7, #16
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	f7fe f990 	bl	8007ed8 <xQueueGenericSendFromISR>
 8009bb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3728      	adds	r7, #40	@ 0x28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	24009984 	.word	0x24009984

08009bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd2:	4b23      	ldr	r3, [pc, #140]	@ (8009c60 <prvProcessExpiredTimer+0x98>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fd fb8b 	bl	80072fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d023      	beq.n	8009c3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	18d1      	adds	r1, r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	6978      	ldr	r0, [r7, #20]
 8009c02:	f000 f8d5 	bl	8009db0 <prvInsertTimerInActiveList>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d020      	beq.n	8009c4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	2300      	movs	r3, #0
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	2100      	movs	r1, #0
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f7ff ff88 	bl	8009b2c <xTimerGenericCommand>
 8009c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d114      	bne.n	8009c4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60fb      	str	r3, [r7, #12]
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c42:	f023 0301 	bic.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	6978      	ldr	r0, [r7, #20]
 8009c54:	4798      	blx	r3
}
 8009c56:	bf00      	nop
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	2400997c 	.word	0x2400997c

08009c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f859 	bl	8009d28 <prvGetNextExpireTime>
 8009c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f805 	bl	8009c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c82:	f000 f8d7 	bl	8009e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c86:	bf00      	nop
 8009c88:	e7f0      	b.n	8009c6c <prvTimerTask+0x8>
	...

08009c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c96:	f7ff f8f9 	bl	8008e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f866 	bl	8009d70 <prvSampleTimeNow>
 8009ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d130      	bne.n	8009d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <prvProcessTimerOrBlockTask+0x3c>
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d806      	bhi.n	8009cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cba:	f7ff f8f5 	bl	8008ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff ff81 	bl	8009bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cc6:	e024      	b.n	8009d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d008      	beq.n	8009ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cce:	4b13      	ldr	r3, [pc, #76]	@ (8009d1c <prvProcessTimerOrBlockTask+0x90>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <prvProcessTimerOrBlockTask+0x50>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <prvProcessTimerOrBlockTask+0x52>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d20 <prvProcessTimerOrBlockTask+0x94>)
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f7fe fe35 	bl	800895c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cf2:	f7ff f8d9 	bl	8008ea8 <xTaskResumeAll>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <prvProcessTimerOrBlockTask+0x98>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
}
 8009d0c:	e001      	b.n	8009d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d0e:	f7ff f8cb 	bl	8008ea8 <xTaskResumeAll>
}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24009980 	.word	0x24009980
 8009d20:	24009984 	.word	0x24009984
 8009d24:	e000ed04 	.word	0xe000ed04

08009d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d30:	4b0e      	ldr	r3, [pc, #56]	@ (8009d6c <prvGetNextExpireTime+0x44>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <prvGetNextExpireTime+0x16>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	e000      	b.n	8009d40 <prvGetNextExpireTime+0x18>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d4c:	4b07      	ldr	r3, [pc, #28]	@ (8009d6c <prvGetNextExpireTime+0x44>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60fb      	str	r3, [r7, #12]
 8009d56:	e001      	b.n	8009d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2400997c 	.word	0x2400997c

08009d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d78:	f7ff f934 	bl	8008fe4 <xTaskGetTickCount>
 8009d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <prvSampleTimeNow+0x3c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d205      	bcs.n	8009d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d88:	f000 f93a 	bl	800a000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	e002      	b.n	8009d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d9a:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <prvSampleTimeNow+0x3c>)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009da0:	68fb      	ldr	r3, [r7, #12]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	2400998c 	.word	0x2400998c

08009db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d812      	bhi.n	8009dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	1ad2      	subs	r2, r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d302      	bcc.n	8009dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009de4:	2301      	movs	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	e01b      	b.n	8009e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dea:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <prvInsertTimerInActiveList+0x7c>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7fd fa48 	bl	800728a <vListInsert>
 8009dfa:	e012      	b.n	8009e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d206      	bcs.n	8009e12 <prvInsertTimerInActiveList+0x62>
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d302      	bcc.n	8009e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	e007      	b.n	8009e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e12:	4b07      	ldr	r3, [pc, #28]	@ (8009e30 <prvInsertTimerInActiveList+0x80>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7fd fa34 	bl	800728a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e22:	697b      	ldr	r3, [r7, #20]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	24009980 	.word	0x24009980
 8009e30:	2400997c 	.word	0x2400997c

08009e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08e      	sub	sp, #56	@ 0x38
 8009e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e3a:	e0ce      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da19      	bge.n	8009e76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e42:	1d3b      	adds	r3, r7, #4
 8009e44:	3304      	adds	r3, #4
 8009e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	61fb      	str	r3, [r7, #28]
}
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
 8009e64:	e7fd      	b.n	8009e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e6c:	6850      	ldr	r0, [r2, #4]
 8009e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e70:	6892      	ldr	r2, [r2, #8]
 8009e72:	4611      	mov	r1, r2
 8009e74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f2c0 80ae 	blt.w	8009fda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fd fa34 	bl	80072fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e94:	463b      	mov	r3, r7
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff ff6a 	bl	8009d70 <prvSampleTimeNow>
 8009e9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	f200 8097 	bhi.w	8009fd4 <prvProcessReceivedCommands+0x1a0>
 8009ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eac <prvProcessReceivedCommands+0x78>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009ed5 	.word	0x08009ed5
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009ed5 	.word	0x08009ed5
 8009eb8:	08009f4b 	.word	0x08009f4b
 8009ebc:	08009f5f 	.word	0x08009f5f
 8009ec0:	08009fab 	.word	0x08009fab
 8009ec4:	08009ed5 	.word	0x08009ed5
 8009ec8:	08009ed5 	.word	0x08009ed5
 8009ecc:	08009f4b 	.word	0x08009f4b
 8009ed0:	08009f5f 	.word	0x08009f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	18d1      	adds	r1, r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ef4:	f7ff ff5c 	bl	8009db0 <prvInsertTimerInActiveList>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d06c      	beq.n	8009fd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d061      	beq.n	8009fd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	441a      	add	r2, r3
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	2300      	movs	r3, #0
 8009f22:	2100      	movs	r1, #0
 8009f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f26:	f7ff fe01 	bl	8009b2c <xTimerGenericCommand>
 8009f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d152      	bne.n	8009fd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	61bb      	str	r3, [r7, #24]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f5c:	e03d      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	617b      	str	r3, [r7, #20]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	18d1      	adds	r1, r2, r3
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa4:	f7ff ff04 	bl	8009db0 <prvInsertTimerInActiveList>
					break;
 8009fa8:	e017      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fba:	f7fc fff5 	bl	8006fa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fbe:	e00c      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fc6:	f023 0301 	bic.w	r3, r3, #1
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fd2:	e002      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <prvProcessReceivedCommands+0x1a6>
					break;
 8009fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fda:	4b08      	ldr	r3, [pc, #32]	@ (8009ffc <prvProcessReceivedCommands+0x1c8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	1d39      	adds	r1, r7, #4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe f8a6 	bl	8008134 <xQueueReceive>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f47f af26 	bne.w	8009e3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	3730      	adds	r7, #48	@ 0x30
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	24009984 	.word	0x24009984

0800a000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a006:	e049      	b.n	800a09c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a008:	4b2e      	ldr	r3, [pc, #184]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a012:	4b2c      	ldr	r3, [pc, #176]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fd f96b 	bl	80072fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d02f      	beq.n	800a09c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	4413      	add	r3, r2
 800a044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d90e      	bls.n	800a06c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a05a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3304      	adds	r3, #4
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f7fd f910 	bl	800728a <vListInsert>
 800a06a:	e017      	b.n	800a09c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a06c:	2300      	movs	r3, #0
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	2100      	movs	r1, #0
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fd58 	bl	8009b2c <xTimerGenericCommand>
 800a07c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10b      	bne.n	800a09c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	603b      	str	r3, [r7, #0]
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	e7fd      	b.n	800a098 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a09c:	4b09      	ldr	r3, [pc, #36]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1b0      	bne.n	800a008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0a6:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	@ (800a0c8 <prvSwitchTimerLists+0xc8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a04      	ldr	r2, [pc, #16]	@ (800a0c4 <prvSwitchTimerLists+0xc4>)
 800a0b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0b4:	4a04      	ldr	r2, [pc, #16]	@ (800a0c8 <prvSwitchTimerLists+0xc8>)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	6013      	str	r3, [r2, #0]
}
 800a0ba:	bf00      	nop
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2400997c 	.word	0x2400997c
 800a0c8:	24009980 	.word	0x24009980

0800a0cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0d2:	f7fd fa71 	bl	80075b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0d6:	4b15      	ldr	r3, [pc, #84]	@ (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d120      	bne.n	800a120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0de:	4814      	ldr	r0, [pc, #80]	@ (800a130 <prvCheckForValidListAndQueue+0x64>)
 800a0e0:	f7fd f882 	bl	80071e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0e4:	4813      	ldr	r0, [pc, #76]	@ (800a134 <prvCheckForValidListAndQueue+0x68>)
 800a0e6:	f7fd f87f 	bl	80071e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <prvCheckForValidListAndQueue+0x6c>)
 800a0ec:	4a10      	ldr	r2, [pc, #64]	@ (800a130 <prvCheckForValidListAndQueue+0x64>)
 800a0ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0f0:	4b12      	ldr	r3, [pc, #72]	@ (800a13c <prvCheckForValidListAndQueue+0x70>)
 800a0f2:	4a10      	ldr	r2, [pc, #64]	@ (800a134 <prvCheckForValidListAndQueue+0x68>)
 800a0f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4b11      	ldr	r3, [pc, #68]	@ (800a140 <prvCheckForValidListAndQueue+0x74>)
 800a0fc:	4a11      	ldr	r2, [pc, #68]	@ (800a144 <prvCheckForValidListAndQueue+0x78>)
 800a0fe:	2110      	movs	r1, #16
 800a100:	200a      	movs	r0, #10
 800a102:	f7fd fbe5 	bl	80078d0 <xQueueGenericCreateStatic>
 800a106:	4603      	mov	r3, r0
 800a108:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a10a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	490b      	ldr	r1, [pc, #44]	@ (800a148 <prvCheckForValidListAndQueue+0x7c>)
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fbca 	bl	80088b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f7fd fa7c 	bl	800761c <vPortExitCritical>
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	24009984 	.word	0x24009984
 800a130:	24009954 	.word	0x24009954
 800a134:	24009968 	.word	0x24009968
 800a138:	2400997c 	.word	0x2400997c
 800a13c:	24009980 	.word	0x24009980
 800a140:	24009a30 	.word	0x24009a30
 800a144:	24009990 	.word	0x24009990
 800a148:	080168c4 	.word	0x080168c4

0800a14c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b21a      	sxth	r2, r3
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	b21b      	sxth	r3, r3
 800a164:	4313      	orrs	r3, r2
 800a166:	b21b      	sxth	r3, r3
 800a168:	b29b      	uxth	r3, r3
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	061a      	lsls	r2, r3, #24
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a18a:	431a      	orrs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	0a1b      	lsrs	r3, r3, #8
 800a190:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a194:	431a      	orrs	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	4313      	orrs	r3, r2
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a1b0:	4915      	ldr	r1, [pc, #84]	@ (800a208 <etharp_free_entry+0x60>)
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	440b      	add	r3, r1
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d013      	beq.n	800a1ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a1c4:	4910      	ldr	r1, [pc, #64]	@ (800a208 <etharp_free_entry+0x60>)
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	440b      	add	r3, r1
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f003 ff55 	bl	800e084 <pbuf_free>
    arp_table[i].q = NULL;
 800a1da:	490b      	ldr	r1, [pc, #44]	@ (800a208 <etharp_free_entry+0x60>)
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a1ec:	4906      	ldr	r1, [pc, #24]	@ (800a208 <etharp_free_entry+0x60>)
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	440b      	add	r3, r1
 800a1fa:	3314      	adds	r3, #20
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	24009a80 	.word	0x24009a80

0800a20c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
 800a216:	e096      	b.n	800a346 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a218:	494f      	ldr	r1, [pc, #316]	@ (800a358 <etharp_tmr+0x14c>)
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4613      	mov	r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	4413      	add	r3, r2
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	440b      	add	r3, r1
 800a226:	3314      	adds	r3, #20
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 8086 	beq.w	800a340 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a234:	4948      	ldr	r1, [pc, #288]	@ (800a358 <etharp_tmr+0x14c>)
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	4413      	add	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	440b      	add	r3, r1
 800a242:	3312      	adds	r3, #18
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	3301      	adds	r3, #1
 800a248:	b298      	uxth	r0, r3
 800a24a:	4943      	ldr	r1, [pc, #268]	@ (800a358 <etharp_tmr+0x14c>)
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	4413      	add	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	440b      	add	r3, r1
 800a258:	3312      	adds	r3, #18
 800a25a:	4602      	mov	r2, r0
 800a25c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a25e:	493e      	ldr	r1, [pc, #248]	@ (800a358 <etharp_tmr+0x14c>)
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	4413      	add	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	440b      	add	r3, r1
 800a26c:	3312      	adds	r3, #18
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a274:	d215      	bcs.n	800a2a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a276:	4938      	ldr	r1, [pc, #224]	@ (800a358 <etharp_tmr+0x14c>)
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	440b      	add	r3, r1
 800a284:	3314      	adds	r3, #20
 800a286:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d10e      	bne.n	800a2aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a28c:	4932      	ldr	r1, [pc, #200]	@ (800a358 <etharp_tmr+0x14c>)
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	4413      	add	r3, r2
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	440b      	add	r3, r1
 800a29a:	3312      	adds	r3, #18
 800a29c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d903      	bls.n	800a2aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff ff80 	bl	800a1a8 <etharp_free_entry>
 800a2a8:	e04a      	b.n	800a340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a2aa:	492b      	ldr	r1, [pc, #172]	@ (800a358 <etharp_tmr+0x14c>)
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	4413      	add	r3, r2
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3314      	adds	r3, #20
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d10a      	bne.n	800a2d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a2c0:	4925      	ldr	r1, [pc, #148]	@ (800a358 <etharp_tmr+0x14c>)
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	e034      	b.n	800a340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a2d6:	4920      	ldr	r1, [pc, #128]	@ (800a358 <etharp_tmr+0x14c>)
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d10a      	bne.n	800a302 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a2ec:	491a      	ldr	r1, [pc, #104]	@ (800a358 <etharp_tmr+0x14c>)
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	4413      	add	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	440b      	add	r3, r1
 800a2fa:	3314      	adds	r3, #20
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	e01e      	b.n	800a340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a302:	4915      	ldr	r1, [pc, #84]	@ (800a358 <etharp_tmr+0x14c>)
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	4413      	add	r3, r2
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	440b      	add	r3, r1
 800a310:	3314      	adds	r3, #20
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d113      	bne.n	800a340 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a318:	490f      	ldr	r1, [pc, #60]	@ (800a358 <etharp_tmr+0x14c>)
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	440b      	add	r3, r1
 800a326:	3308      	adds	r3, #8
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	4413      	add	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	4a08      	ldr	r2, [pc, #32]	@ (800a358 <etharp_tmr+0x14c>)
 800a336:	4413      	add	r3, r2
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	f000 fe72 	bl	800b024 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3301      	adds	r3, #1
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b09      	cmp	r3, #9
 800a34a:	f77f af65 	ble.w	800a218 <etharp_tmr+0xc>
      }
    }
  }
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	24009a80 	.word	0x24009a80

0800a35c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	@ 0x28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	460b      	mov	r3, r1
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a36a:	230a      	movs	r3, #10
 800a36c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a36e:	230a      	movs	r3, #10
 800a370:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a372:	230a      	movs	r3, #10
 800a374:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a37a:	230a      	movs	r3, #10
 800a37c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	83bb      	strh	r3, [r7, #28]
 800a382:	2300      	movs	r3, #0
 800a384:	837b      	strh	r3, [r7, #26]
 800a386:	2300      	movs	r3, #0
 800a388:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a38a:	2300      	movs	r3, #0
 800a38c:	843b      	strh	r3, [r7, #32]
 800a38e:	e0ae      	b.n	800a4ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a394:	49a6      	ldr	r1, [pc, #664]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a396:	4613      	mov	r3, r2
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	4413      	add	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	440b      	add	r3, r1
 800a3a0:	3314      	adds	r3, #20
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a3a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a3aa:	2b0a      	cmp	r3, #10
 800a3ac:	d105      	bne.n	800a3ba <etharp_find_entry+0x5e>
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d102      	bne.n	800a3ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a3b4:	8c3b      	ldrh	r3, [r7, #32]
 800a3b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a3b8:	e095      	b.n	800a4e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8092 	beq.w	800a4e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d009      	beq.n	800a3dc <etharp_find_entry+0x80>
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d806      	bhi.n	800a3dc <etharp_find_entry+0x80>
 800a3ce:	4b99      	ldr	r3, [pc, #612]	@ (800a634 <etharp_find_entry+0x2d8>)
 800a3d0:	f240 1223 	movw	r2, #291	@ 0x123
 800a3d4:	4998      	ldr	r1, [pc, #608]	@ (800a638 <etharp_find_entry+0x2dc>)
 800a3d6:	4899      	ldr	r0, [pc, #612]	@ (800a63c <etharp_find_entry+0x2e0>)
 800a3d8:	f00b f9e8 	bl	80157ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <etharp_find_entry+0xc8>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6819      	ldr	r1, [r3, #0]
 800a3e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a3ea:	4891      	ldr	r0, [pc, #580]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	4413      	add	r3, r2
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4403      	add	r3, r0
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	d112      	bne.n	800a424 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00c      	beq.n	800a41e <etharp_find_entry+0xc2>
 800a404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a408:	4989      	ldr	r1, [pc, #548]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a40a:	4613      	mov	r3, r2
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	4413      	add	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	440b      	add	r3, r1
 800a414:	3308      	adds	r3, #8
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d102      	bne.n	800a424 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a41e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a422:	e100      	b.n	800a626 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d140      	bne.n	800a4ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a42a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a42e:	4980      	ldr	r1, [pc, #512]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a430:	4613      	mov	r3, r2
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01a      	beq.n	800a476 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a444:	497a      	ldr	r1, [pc, #488]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a446:	4613      	mov	r3, r2
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4413      	add	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	440b      	add	r3, r1
 800a450:	3312      	adds	r3, #18
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	8bba      	ldrh	r2, [r7, #28]
 800a456:	429a      	cmp	r2, r3
 800a458:	d845      	bhi.n	800a4e6 <etharp_find_entry+0x18a>
            old_queue = i;
 800a45a:	8c3b      	ldrh	r3, [r7, #32]
 800a45c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a45e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a462:	4973      	ldr	r1, [pc, #460]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a464:	4613      	mov	r3, r2
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	4413      	add	r3, r2
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	440b      	add	r3, r1
 800a46e:	3312      	adds	r3, #18
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	83bb      	strh	r3, [r7, #28]
 800a474:	e037      	b.n	800a4e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a47a:	496d      	ldr	r1, [pc, #436]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a47c:	4613      	mov	r3, r2
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	4413      	add	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	440b      	add	r3, r1
 800a486:	3312      	adds	r3, #18
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	8b7a      	ldrh	r2, [r7, #26]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d82a      	bhi.n	800a4e6 <etharp_find_entry+0x18a>
            old_pending = i;
 800a490:	8c3b      	ldrh	r3, [r7, #32]
 800a492:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800a494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a498:	4965      	ldr	r1, [pc, #404]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a49a:	4613      	mov	r3, r2
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	4413      	add	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	440b      	add	r3, r1
 800a4a4:	3312      	adds	r3, #18
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	837b      	strh	r3, [r7, #26]
 800a4aa:	e01c      	b.n	800a4e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d919      	bls.n	800a4e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a4b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4b6:	495e      	ldr	r1, [pc, #376]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	440b      	add	r3, r1
 800a4c2:	3312      	adds	r3, #18
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	8b3a      	ldrh	r2, [r7, #24]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d80c      	bhi.n	800a4e6 <etharp_find_entry+0x18a>
            old_stable = i;
 800a4cc:	8c3b      	ldrh	r3, [r7, #32]
 800a4ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800a4d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4d4:	4956      	ldr	r1, [pc, #344]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	4413      	add	r3, r2
 800a4dc:	00db      	lsls	r3, r3, #3
 800a4de:	440b      	add	r3, r1
 800a4e0:	3312      	adds	r3, #18
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a4e6:	8c3b      	ldrh	r3, [r7, #32]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	843b      	strh	r3, [r7, #32]
 800a4ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	f77f af4c 	ble.w	800a390 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d108      	bne.n	800a514 <etharp_find_entry+0x1b8>
 800a502:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a506:	2b0a      	cmp	r3, #10
 800a508:	d107      	bne.n	800a51a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a50a:	7afb      	ldrb	r3, [r7, #11]
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	e085      	b.n	800a626 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a51a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a51e:	2b09      	cmp	r3, #9
 800a520:	dc02      	bgt.n	800a528 <etharp_find_entry+0x1cc>
    i = empty;
 800a522:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a524:	843b      	strh	r3, [r7, #32]
 800a526:	e039      	b.n	800a59c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a528:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	dc14      	bgt.n	800a55a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a532:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a538:	493d      	ldr	r1, [pc, #244]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a53a:	4613      	mov	r3, r2
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	4413      	add	r3, r2
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	440b      	add	r3, r1
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d018      	beq.n	800a57c <etharp_find_entry+0x220>
 800a54a:	4b3a      	ldr	r3, [pc, #232]	@ (800a634 <etharp_find_entry+0x2d8>)
 800a54c:	f240 126d 	movw	r2, #365	@ 0x16d
 800a550:	493b      	ldr	r1, [pc, #236]	@ (800a640 <etharp_find_entry+0x2e4>)
 800a552:	483a      	ldr	r0, [pc, #232]	@ (800a63c <etharp_find_entry+0x2e0>)
 800a554:	f00b f92a 	bl	80157ac <iprintf>
 800a558:	e010      	b.n	800a57c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a55a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800a55e:	2b09      	cmp	r3, #9
 800a560:	dc02      	bgt.n	800a568 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a562:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a564:	843b      	strh	r3, [r7, #32]
 800a566:	e009      	b.n	800a57c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a568:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	dc02      	bgt.n	800a576 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a570:	8bfb      	ldrh	r3, [r7, #30]
 800a572:	843b      	strh	r3, [r7, #32]
 800a574:	e002      	b.n	800a57c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a576:	f04f 33ff 	mov.w	r3, #4294967295
 800a57a:	e054      	b.n	800a626 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a57c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a580:	2b09      	cmp	r3, #9
 800a582:	dd06      	ble.n	800a592 <etharp_find_entry+0x236>
 800a584:	4b2b      	ldr	r3, [pc, #172]	@ (800a634 <etharp_find_entry+0x2d8>)
 800a586:	f240 127f 	movw	r2, #383	@ 0x17f
 800a58a:	492e      	ldr	r1, [pc, #184]	@ (800a644 <etharp_find_entry+0x2e8>)
 800a58c:	482b      	ldr	r0, [pc, #172]	@ (800a63c <etharp_find_entry+0x2e0>)
 800a58e:	f00b f90d 	bl	80157ac <iprintf>
    etharp_free_entry(i);
 800a592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fe06 	bl	800a1a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a59c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	dd06      	ble.n	800a5b2 <etharp_find_entry+0x256>
 800a5a4:	4b23      	ldr	r3, [pc, #140]	@ (800a634 <etharp_find_entry+0x2d8>)
 800a5a6:	f240 1283 	movw	r2, #387	@ 0x183
 800a5aa:	4926      	ldr	r1, [pc, #152]	@ (800a644 <etharp_find_entry+0x2e8>)
 800a5ac:	4823      	ldr	r0, [pc, #140]	@ (800a63c <etharp_find_entry+0x2e0>)
 800a5ae:	f00b f8fd 	bl	80157ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a5b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5b6:	491e      	ldr	r1, [pc, #120]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	4413      	add	r3, r2
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	440b      	add	r3, r1
 800a5c2:	3314      	adds	r3, #20
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d006      	beq.n	800a5d8 <etharp_find_entry+0x27c>
 800a5ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a634 <etharp_find_entry+0x2d8>)
 800a5cc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800a5d0:	491d      	ldr	r1, [pc, #116]	@ (800a648 <etharp_find_entry+0x2ec>)
 800a5d2:	481a      	ldr	r0, [pc, #104]	@ (800a63c <etharp_find_entry+0x2e0>)
 800a5d4:	f00b f8ea 	bl	80157ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a5de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6819      	ldr	r1, [r3, #0]
 800a5e6:	4812      	ldr	r0, [pc, #72]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	4403      	add	r3, r0
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a5f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5fa:	490d      	ldr	r1, [pc, #52]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	440b      	add	r3, r1
 800a606:	3312      	adds	r3, #18
 800a608:	2200      	movs	r2, #0
 800a60a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a60c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a610:	4907      	ldr	r1, [pc, #28]	@ (800a630 <etharp_find_entry+0x2d4>)
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	440b      	add	r3, r1
 800a61c:	3308      	adds	r3, #8
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a622:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3728      	adds	r7, #40	@ 0x28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	24009a80 	.word	0x24009a80
 800a634:	080168cc 	.word	0x080168cc
 800a638:	0801693c 	.word	0x0801693c
 800a63c:	0801697c 	.word	0x0801697c
 800a640:	080169a4 	.word	0x080169a4
 800a644:	080169bc 	.word	0x080169bc
 800a648:	080169d0 	.word	0x080169d0

0800a64c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a660:	2b06      	cmp	r3, #6
 800a662:	d006      	beq.n	800a672 <etharp_update_arp_entry+0x26>
 800a664:	4b48      	ldr	r3, [pc, #288]	@ (800a788 <etharp_update_arp_entry+0x13c>)
 800a666:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800a66a:	4948      	ldr	r1, [pc, #288]	@ (800a78c <etharp_update_arp_entry+0x140>)
 800a66c:	4848      	ldr	r0, [pc, #288]	@ (800a790 <etharp_update_arp_entry+0x144>)
 800a66e:	f00b f89d 	bl	80157ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d012      	beq.n	800a69e <etharp_update_arp_entry+0x52>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00e      	beq.n	800a69e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68f9      	ldr	r1, [r7, #12]
 800a686:	4618      	mov	r0, r3
 800a688:	f001 fada 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800a68c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d105      	bne.n	800a69e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a69a:	2be0      	cmp	r3, #224	@ 0xe0
 800a69c:	d102      	bne.n	800a6a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a69e:	f06f 030f 	mvn.w	r3, #15
 800a6a2:	e06c      	b.n	800a77e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	68b8      	ldr	r0, [r7, #8]
 800a6ac:	f7ff fe56 	bl	800a35c <etharp_find_entry>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a6b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da02      	bge.n	800a6c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a6bc:	8afb      	ldrh	r3, [r7, #22]
 800a6be:	b25b      	sxtb	r3, r3
 800a6c0:	e05d      	b.n	800a77e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a6c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a6c6:	4933      	ldr	r1, [pc, #204]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	4413      	add	r3, r2
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	440b      	add	r3, r1
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a6d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a6dc:	492d      	ldr	r1, [pc, #180]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a6de:	4613      	mov	r3, r2
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	4413      	add	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a6ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	4413      	add	r3, r2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	4a25      	ldr	r2, [pc, #148]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a6fe:	4413      	add	r3, r2
 800a700:	3304      	adds	r3, #4
 800a702:	2206      	movs	r2, #6
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4618      	mov	r0, r3
 800a708:	f00b f981 	bl	8015a0e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a70c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a710:	4920      	ldr	r1, [pc, #128]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a712:	4613      	mov	r3, r2
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	4413      	add	r3, r2
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	440b      	add	r3, r1
 800a71c:	3312      	adds	r3, #18
 800a71e:	2200      	movs	r2, #0
 800a720:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a722:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a726:	491b      	ldr	r1, [pc, #108]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a728:	4613      	mov	r3, r2
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	4413      	add	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	440b      	add	r3, r1
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d021      	beq.n	800a77c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a738:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a73c:	4915      	ldr	r1, [pc, #84]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a73e:	4613      	mov	r3, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	440b      	add	r3, r1
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a74c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a750:	4910      	ldr	r1, [pc, #64]	@ (800a794 <etharp_update_arp_entry+0x148>)
 800a752:	4613      	mov	r3, r2
 800a754:	005b      	lsls	r3, r3, #1
 800a756:	4413      	add	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	440b      	add	r3, r1
 800a75c:	2200      	movs	r2, #0
 800a75e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800a766:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6939      	ldr	r1, [r7, #16]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fcf9 	bl	800b168 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a776:	6938      	ldr	r0, [r7, #16]
 800a778:	f003 fc84 	bl	800e084 <pbuf_free>
  }
  return ERR_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	080168cc 	.word	0x080168cc
 800a78c:	080169fc 	.word	0x080169fc
 800a790:	0801697c 	.word	0x0801697c
 800a794:	24009a80 	.word	0x24009a80

0800a798 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	e01e      	b.n	800a7e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a7a6:	4913      	ldr	r1, [pc, #76]	@ (800a7f4 <etharp_cleanup_netif+0x5c>)
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	3314      	adds	r3, #20
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00e      	beq.n	800a7de <etharp_cleanup_netif+0x46>
 800a7c0:	490c      	ldr	r1, [pc, #48]	@ (800a7f4 <etharp_cleanup_netif+0x5c>)
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	4413      	add	r3, r2
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	440b      	add	r3, r1
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d102      	bne.n	800a7de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7ff fce5 	bl	800a1a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b09      	cmp	r3, #9
 800a7e8:	dddd      	ble.n	800a7a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	24009a80 	.word	0x24009a80

0800a7f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a7f8:	b5b0      	push	{r4, r5, r7, lr}
 800a7fa:	b08a      	sub	sp, #40	@ 0x28
 800a7fc:	af04      	add	r7, sp, #16
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 800a802:	f7fb fdcb 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <etharp_input+0x24>
 800a80c:	4b3d      	ldr	r3, [pc, #244]	@ (800a904 <etharp_input+0x10c>)
 800a80e:	f240 228a 	movw	r2, #650	@ 0x28a
 800a812:	493d      	ldr	r1, [pc, #244]	@ (800a908 <etharp_input+0x110>)
 800a814:	483d      	ldr	r0, [pc, #244]	@ (800a90c <etharp_input+0x114>)
 800a816:	f00a ffc9 	bl	80157ac <iprintf>
 800a81a:	e06f      	b.n	800a8fc <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	b29b      	uxth	r3, r3
 800a828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a82c:	d10c      	bne.n	800a848 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a832:	2b06      	cmp	r3, #6
 800a834:	d108      	bne.n	800a848 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d104      	bne.n	800a848 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	885b      	ldrh	r3, [r3, #2]
 800a842:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a844:	2b08      	cmp	r3, #8
 800a846:	d003      	beq.n	800a850 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f003 fc1b 	bl	800e084 <pbuf_free>
    return;
 800a84e:	e055      	b.n	800a8fc <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	330e      	adds	r3, #14
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3318      	adds	r3, #24
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	3304      	adds	r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <etharp_input+0x78>
    for_us = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
 800a86e:	e009      	b.n	800a884 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	3304      	adds	r3, #4
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	bf0c      	ite	eq
 800a87c:	2301      	moveq	r3, #1
 800a87e:	2300      	movne	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f103 0208 	add.w	r2, r3, #8
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <etharp_input+0x9c>
 800a890:	2301      	movs	r3, #1
 800a892:	e000      	b.n	800a896 <etharp_input+0x9e>
 800a894:	2302      	movs	r3, #2
 800a896:	f107 010c 	add.w	r1, r7, #12
 800a89a:	6838      	ldr	r0, [r7, #0]
 800a89c:	f7ff fed6 	bl	800a64c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	88db      	ldrh	r3, [r3, #6]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8aa:	d003      	beq.n	800a8b4 <etharp_input+0xbc>
 800a8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8b0:	d01e      	beq.n	800a8f0 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a8b2:	e020      	b.n	800a8f6 <etharp_input+0xfe>
      if (for_us) {
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01c      	beq.n	800a8f4 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a8d4:	2102      	movs	r1, #2
 800a8d6:	9103      	str	r1, [sp, #12]
 800a8d8:	f107 010c 	add.w	r1, r7, #12
 800a8dc:	9102      	str	r1, [sp, #8]
 800a8de:	9201      	str	r2, [sp, #4]
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	6838      	ldr	r0, [r7, #0]
 800a8ea:	f000 faed 	bl	800aec8 <etharp_raw>
      break;
 800a8ee:	e001      	b.n	800a8f4 <etharp_input+0xfc>
      break;
 800a8f0:	bf00      	nop
 800a8f2:	e000      	b.n	800a8f6 <etharp_input+0xfe>
      break;
 800a8f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f003 fbc4 	bl	800e084 <pbuf_free>
}
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bdb0      	pop	{r4, r5, r7, pc}
 800a902:	bf00      	nop
 800a904:	080168cc 	.word	0x080168cc
 800a908:	08016a54 	.word	0x08016a54
 800a90c:	0801697c 	.word	0x0801697c

0800a910 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a91e:	79fa      	ldrb	r2, [r7, #7]
 800a920:	4944      	ldr	r1, [pc, #272]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a922:	4613      	mov	r3, r2
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	4413      	add	r3, r2
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	440b      	add	r3, r1
 800a92c:	3314      	adds	r3, #20
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d806      	bhi.n	800a942 <etharp_output_to_arp_index+0x32>
 800a934:	4b40      	ldr	r3, [pc, #256]	@ (800aa38 <etharp_output_to_arp_index+0x128>)
 800a936:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a93a:	4940      	ldr	r1, [pc, #256]	@ (800aa3c <etharp_output_to_arp_index+0x12c>)
 800a93c:	4840      	ldr	r0, [pc, #256]	@ (800aa40 <etharp_output_to_arp_index+0x130>)
 800a93e:	f00a ff35 	bl	80157ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a942:	79fa      	ldrb	r2, [r7, #7]
 800a944:	493b      	ldr	r1, [pc, #236]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a946:	4613      	mov	r3, r2
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	4413      	add	r3, r2
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	440b      	add	r3, r1
 800a950:	3314      	adds	r3, #20
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d153      	bne.n	800aa00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a958:	79fa      	ldrb	r2, [r7, #7]
 800a95a:	4936      	ldr	r1, [pc, #216]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a95c:	4613      	mov	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4413      	add	r3, r2
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	440b      	add	r3, r1
 800a966:	3312      	adds	r3, #18
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800a96e:	d919      	bls.n	800a9a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a970:	79fa      	ldrb	r2, [r7, #7]
 800a972:	4613      	mov	r3, r2
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4413      	add	r3, r2
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	4a2e      	ldr	r2, [pc, #184]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a97c:	4413      	add	r3, r2
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fb4e 	bl	800b024 <etharp_request>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d138      	bne.n	800aa00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a98e:	79fa      	ldrb	r2, [r7, #7]
 800a990:	4928      	ldr	r1, [pc, #160]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a992:	4613      	mov	r3, r2
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	4413      	add	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	440b      	add	r3, r1
 800a99c:	3314      	adds	r3, #20
 800a99e:	2203      	movs	r2, #3
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	e02d      	b.n	800aa00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a9a4:	79fa      	ldrb	r2, [r7, #7]
 800a9a6:	4923      	ldr	r1, [pc, #140]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	440b      	add	r3, r1
 800a9b2:	3312      	adds	r3, #18
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800a9ba:	d321      	bcc.n	800aa00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a9bc:	79fa      	ldrb	r2, [r7, #7]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	4413      	add	r3, r2
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	4a1b      	ldr	r2, [pc, #108]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a9c8:	4413      	add	r3, r2
 800a9ca:	1d19      	adds	r1, r3, #4
 800a9cc:	79fa      	ldrb	r2, [r7, #7]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	4413      	add	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	4a16      	ldr	r2, [pc, #88]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a9da:	4413      	add	r3, r2
 800a9dc:	3304      	adds	r3, #4
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fafd 	bl	800afe0 <etharp_request_dst>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d109      	bne.n	800aa00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a9ec:	79fa      	ldrb	r2, [r7, #7]
 800a9ee:	4911      	ldr	r1, [pc, #68]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	4413      	add	r3, r2
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	440b      	add	r3, r1
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800aa06:	79fa      	ldrb	r2, [r7, #7]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	3308      	adds	r3, #8
 800aa12:	4a08      	ldr	r2, [pc, #32]	@ (800aa34 <etharp_output_to_arp_index+0x124>)
 800aa14:	4413      	add	r3, r2
 800aa16:	3304      	adds	r3, #4
 800aa18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa1c:	9200      	str	r2, [sp, #0]
 800aa1e:	460a      	mov	r2, r1
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 fba0 	bl	800b168 <ethernet_output>
 800aa28:	4603      	mov	r3, r0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	24009a80 	.word	0x24009a80
 800aa38:	080168cc 	.word	0x080168cc
 800aa3c:	08016a74 	.word	0x08016a74
 800aa40:	0801697c 	.word	0x0801697c

0800aa44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08a      	sub	sp, #40	@ 0x28
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 800aa54:	f7fb fca2 	bl	800639c <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <etharp_output+0x28>
 800aa5e:	4b73      	ldr	r3, [pc, #460]	@ (800ac2c <etharp_output+0x1e8>)
 800aa60:	f240 321e 	movw	r2, #798	@ 0x31e
 800aa64:	4972      	ldr	r1, [pc, #456]	@ (800ac30 <etharp_output+0x1ec>)
 800aa66:	4873      	ldr	r0, [pc, #460]	@ (800ac34 <etharp_output+0x1f0>)
 800aa68:	f00a fea0 	bl	80157ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d106      	bne.n	800aa80 <etharp_output+0x3c>
 800aa72:	4b6e      	ldr	r3, [pc, #440]	@ (800ac2c <etharp_output+0x1e8>)
 800aa74:	f240 321f 	movw	r2, #799	@ 0x31f
 800aa78:	496f      	ldr	r1, [pc, #444]	@ (800ac38 <etharp_output+0x1f4>)
 800aa7a:	486e      	ldr	r0, [pc, #440]	@ (800ac34 <etharp_output+0x1f0>)
 800aa7c:	f00a fe96 	bl	80157ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <etharp_output+0x50>
 800aa86:	4b69      	ldr	r3, [pc, #420]	@ (800ac2c <etharp_output+0x1e8>)
 800aa88:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800aa8c:	496b      	ldr	r1, [pc, #428]	@ (800ac3c <etharp_output+0x1f8>)
 800aa8e:	4869      	ldr	r0, [pc, #420]	@ (800ac34 <etharp_output+0x1f0>)
 800aa90:	f00a fe8c 	bl	80157ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68f9      	ldr	r1, [r7, #12]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f001 f8d0 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800aaa6:	4b66      	ldr	r3, [pc, #408]	@ (800ac40 <etharp_output+0x1fc>)
 800aaa8:	61fb      	str	r3, [r7, #28]
 800aaaa:	e0af      	b.n	800ac0c <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aab4:	2be0      	cmp	r3, #224	@ 0xe0
 800aab6:	d118      	bne.n	800aaea <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800aab8:	2301      	movs	r3, #1
 800aaba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800aabc:	2300      	movs	r3, #0
 800aabe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800aac0:	235e      	movs	r3, #94	@ 0x5e
 800aac2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3301      	adds	r3, #1
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3302      	adds	r3, #2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3303      	adds	r3, #3
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800aae2:	f107 0310 	add.w	r3, r7, #16
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e090      	b.n	800ac0c <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	405a      	eors	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4013      	ands	r3, r2
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d012      	beq.n	800ab28 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab08:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d00b      	beq.n	800ab28 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	330c      	adds	r3, #12
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	61bb      	str	r3, [r7, #24]
 800ab20:	e002      	b.n	800ab28 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ab22:	f06f 0303 	mvn.w	r3, #3
 800ab26:	e07d      	b.n	800ac24 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ab28:	4b46      	ldr	r3, [pc, #280]	@ (800ac44 <etharp_output+0x200>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4a46      	ldr	r2, [pc, #280]	@ (800ac48 <etharp_output+0x204>)
 800ab30:	460b      	mov	r3, r1
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	440b      	add	r3, r1
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	4413      	add	r3, r2
 800ab3a:	3314      	adds	r3, #20
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d925      	bls.n	800ab8e <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ab42:	4b40      	ldr	r3, [pc, #256]	@ (800ac44 <etharp_output+0x200>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	4619      	mov	r1, r3
 800ab48:	4a3f      	ldr	r2, [pc, #252]	@ (800ac48 <etharp_output+0x204>)
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	440b      	add	r3, r1
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	4413      	add	r3, r2
 800ab54:	3308      	adds	r3, #8
 800ab56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d117      	bne.n	800ab8e <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b38      	ldr	r3, [pc, #224]	@ (800ac44 <etharp_output+0x200>)
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	4618      	mov	r0, r3
 800ab68:	4937      	ldr	r1, [pc, #220]	@ (800ac48 <etharp_output+0x204>)
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4403      	add	r3, r0
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	440b      	add	r3, r1
 800ab74:	3304      	adds	r3, #4
 800ab76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d108      	bne.n	800ab8e <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ab7c:	4b31      	ldr	r3, [pc, #196]	@ (800ac44 <etharp_output+0x200>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f7ff fec3 	bl	800a910 <etharp_output_to_arp_index>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	e04a      	b.n	800ac24 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ab8e:	2300      	movs	r3, #0
 800ab90:	75fb      	strb	r3, [r7, #23]
 800ab92:	e031      	b.n	800abf8 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ab94:	7dfa      	ldrb	r2, [r7, #23]
 800ab96:	492c      	ldr	r1, [pc, #176]	@ (800ac48 <etharp_output+0x204>)
 800ab98:	4613      	mov	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	440b      	add	r3, r1
 800aba2:	3314      	adds	r3, #20
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d923      	bls.n	800abf2 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800abaa:	7dfa      	ldrb	r2, [r7, #23]
 800abac:	4926      	ldr	r1, [pc, #152]	@ (800ac48 <etharp_output+0x204>)
 800abae:	4613      	mov	r3, r2
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	4413      	add	r3, r2
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	440b      	add	r3, r1
 800abb8:	3308      	adds	r3, #8
 800abba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d117      	bne.n	800abf2 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	6819      	ldr	r1, [r3, #0]
 800abc6:	7dfa      	ldrb	r2, [r7, #23]
 800abc8:	481f      	ldr	r0, [pc, #124]	@ (800ac48 <etharp_output+0x204>)
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	4403      	add	r3, r0
 800abd4:	3304      	adds	r3, #4
 800abd6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800abd8:	4299      	cmp	r1, r3
 800abda:	d10a      	bne.n	800abf2 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800abdc:	4a19      	ldr	r2, [pc, #100]	@ (800ac44 <etharp_output+0x200>)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	461a      	mov	r2, r3
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fe91 	bl	800a910 <etharp_output_to_arp_index>
 800abee:	4603      	mov	r3, r0
 800abf0:	e018      	b.n	800ac24 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	3301      	adds	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	2b09      	cmp	r3, #9
 800abfc:	d9ca      	bls.n	800ab94 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	69b9      	ldr	r1, [r7, #24]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f822 	bl	800ac4c <etharp_query>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	e00b      	b.n	800ac24 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ac12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 faa3 	bl	800b168 <ethernet_output>
 800ac22:	4603      	mov	r3, r0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	080168cc 	.word	0x080168cc
 800ac30:	08016a54 	.word	0x08016a54
 800ac34:	0801697c 	.word	0x0801697c
 800ac38:	08016aa4 	.word	0x08016aa4
 800ac3c:	08016a44 	.word	0x08016a44
 800ac40:	08019d30 	.word	0x08019d30
 800ac44:	24009b70 	.word	0x24009b70
 800ac48:	24009a80 	.word	0x24009a80

0800ac4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08c      	sub	sp, #48	@ 0x30
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3326      	adds	r3, #38	@ 0x26
 800ac5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ac5e:	23ff      	movs	r3, #255	@ 0xff
 800ac60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68f9      	ldr	r1, [r7, #12]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 ffe6 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10c      	bne.n	800ac94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ac82:	2be0      	cmp	r3, #224	@ 0xe0
 800ac84:	d006      	beq.n	800ac94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ac94:	f06f 030f 	mvn.w	r3, #15
 800ac98:	e101      	b.n	800ae9e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	68b8      	ldr	r0, [r7, #8]
 800aca0:	f7ff fb5c 	bl	800a35c <etharp_find_entry>
 800aca4:	4603      	mov	r3, r0
 800aca6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800aca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da02      	bge.n	800acb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800acb0:	8a7b      	ldrh	r3, [r7, #18]
 800acb2:	b25b      	sxtb	r3, r3
 800acb4:	e0f3      	b.n	800ae9e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800acb6:	8a7b      	ldrh	r3, [r7, #18]
 800acb8:	2b7e      	cmp	r3, #126	@ 0x7e
 800acba:	d906      	bls.n	800acca <etharp_query+0x7e>
 800acbc:	4b7a      	ldr	r3, [pc, #488]	@ (800aea8 <etharp_query+0x25c>)
 800acbe:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800acc2:	497a      	ldr	r1, [pc, #488]	@ (800aeac <etharp_query+0x260>)
 800acc4:	487a      	ldr	r0, [pc, #488]	@ (800aeb0 <etharp_query+0x264>)
 800acc6:	f00a fd71 	bl	80157ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 800acca:	8a7b      	ldrh	r3, [r7, #18]
 800accc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800acce:	7c7a      	ldrb	r2, [r7, #17]
 800acd0:	4978      	ldr	r1, [pc, #480]	@ (800aeb4 <etharp_query+0x268>)
 800acd2:	4613      	mov	r3, r2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	4413      	add	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	440b      	add	r3, r1
 800acdc:	3314      	adds	r3, #20
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d115      	bne.n	800ad10 <etharp_query+0xc4>
    is_new_entry = 1;
 800ace4:	2301      	movs	r3, #1
 800ace6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ace8:	7c7a      	ldrb	r2, [r7, #17]
 800acea:	4972      	ldr	r1, [pc, #456]	@ (800aeb4 <etharp_query+0x268>)
 800acec:	4613      	mov	r3, r2
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	4413      	add	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	440b      	add	r3, r1
 800acf6:	3314      	adds	r3, #20
 800acf8:	2201      	movs	r2, #1
 800acfa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800acfc:	7c7a      	ldrb	r2, [r7, #17]
 800acfe:	496d      	ldr	r1, [pc, #436]	@ (800aeb4 <etharp_query+0x268>)
 800ad00:	4613      	mov	r3, r2
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	4413      	add	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	440b      	add	r3, r1
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ad10:	7c7a      	ldrb	r2, [r7, #17]
 800ad12:	4968      	ldr	r1, [pc, #416]	@ (800aeb4 <etharp_query+0x268>)
 800ad14:	4613      	mov	r3, r2
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	4413      	add	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3314      	adds	r3, #20
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d011      	beq.n	800ad4a <etharp_query+0xfe>
 800ad26:	7c7a      	ldrb	r2, [r7, #17]
 800ad28:	4962      	ldr	r1, [pc, #392]	@ (800aeb4 <etharp_query+0x268>)
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	4413      	add	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	440b      	add	r3, r1
 800ad34:	3314      	adds	r3, #20
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d806      	bhi.n	800ad4a <etharp_query+0xfe>
 800ad3c:	4b5a      	ldr	r3, [pc, #360]	@ (800aea8 <etharp_query+0x25c>)
 800ad3e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ad42:	495d      	ldr	r1, [pc, #372]	@ (800aeb8 <etharp_query+0x26c>)
 800ad44:	485a      	ldr	r0, [pc, #360]	@ (800aeb0 <etharp_query+0x264>)
 800ad46:	f00a fd31 	bl	80157ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <etharp_query+0x10a>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10c      	bne.n	800ad70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f963 	bl	800b024 <etharp_request>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <etharp_query+0x124>
      return result;
 800ad6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ad6e:	e096      	b.n	800ae9e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <etharp_query+0x138>
 800ad76:	4b4c      	ldr	r3, [pc, #304]	@ (800aea8 <etharp_query+0x25c>)
 800ad78:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ad7c:	494f      	ldr	r1, [pc, #316]	@ (800aebc <etharp_query+0x270>)
 800ad7e:	484c      	ldr	r0, [pc, #304]	@ (800aeb0 <etharp_query+0x264>)
 800ad80:	f00a fd14 	bl	80157ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ad84:	7c7a      	ldrb	r2, [r7, #17]
 800ad86:	494b      	ldr	r1, [pc, #300]	@ (800aeb4 <etharp_query+0x268>)
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	440b      	add	r3, r1
 800ad92:	3314      	adds	r3, #20
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d917      	bls.n	800adca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ad9a:	4a49      	ldr	r2, [pc, #292]	@ (800aec0 <etharp_query+0x274>)
 800ad9c:	7c7b      	ldrb	r3, [r7, #17]
 800ad9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ada0:	7c7a      	ldrb	r2, [r7, #17]
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	3308      	adds	r3, #8
 800adac:	4a41      	ldr	r2, [pc, #260]	@ (800aeb4 <etharp_query+0x268>)
 800adae:	4413      	add	r3, r2
 800adb0:	3304      	adds	r3, #4
 800adb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adb6:	9200      	str	r2, [sp, #0]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f9d3 	bl	800b168 <ethernet_output>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adc8:	e067      	b.n	800ae9a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800adca:	7c7a      	ldrb	r2, [r7, #17]
 800adcc:	4939      	ldr	r1, [pc, #228]	@ (800aeb4 <etharp_query+0x268>)
 800adce:	4613      	mov	r3, r2
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	4413      	add	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	440b      	add	r3, r1
 800add8:	3314      	adds	r3, #20
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d15c      	bne.n	800ae9a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ade8:	e01c      	b.n	800ae24 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	895a      	ldrh	r2, [r3, #10]
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	891b      	ldrh	r3, [r3, #8]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d10a      	bne.n	800ae0c <etharp_query+0x1c0>
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d006      	beq.n	800ae0c <etharp_query+0x1c0>
 800adfe:	4b2a      	ldr	r3, [pc, #168]	@ (800aea8 <etharp_query+0x25c>)
 800ae00:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ae04:	492f      	ldr	r1, [pc, #188]	@ (800aec4 <etharp_query+0x278>)
 800ae06:	482a      	ldr	r0, [pc, #168]	@ (800aeb0 <etharp_query+0x264>)
 800ae08:	f00a fcd0 	bl	80157ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	7b1b      	ldrb	r3, [r3, #12]
 800ae10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <etharp_query+0x1d2>
        copy_needed = 1;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	61bb      	str	r3, [r7, #24]
        break;
 800ae1c:	e005      	b.n	800ae2a <etharp_query+0x1de>
      }
      p = p->next;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1df      	bne.n	800adea <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ae36:	200e      	movs	r0, #14
 800ae38:	f003 fbb6 	bl	800e5a8 <pbuf_clone>
 800ae3c:	61f8      	str	r0, [r7, #28]
 800ae3e:	e004      	b.n	800ae4a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ae44:	69f8      	ldr	r0, [r7, #28]
 800ae46:	f003 f9c3 	bl	800e1d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d021      	beq.n	800ae94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ae50:	7c7a      	ldrb	r2, [r7, #17]
 800ae52:	4918      	ldr	r1, [pc, #96]	@ (800aeb4 <etharp_query+0x268>)
 800ae54:	4613      	mov	r3, r2
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	4413      	add	r3, r2
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	440b      	add	r3, r1
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00a      	beq.n	800ae7a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ae64:	7c7a      	ldrb	r2, [r7, #17]
 800ae66:	4913      	ldr	r1, [pc, #76]	@ (800aeb4 <etharp_query+0x268>)
 800ae68:	4613      	mov	r3, r2
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	4413      	add	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	440b      	add	r3, r1
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f003 f905 	bl	800e084 <pbuf_free>
      }
      arp_table[i].q = p;
 800ae7a:	7c7a      	ldrb	r2, [r7, #17]
 800ae7c:	490d      	ldr	r1, [pc, #52]	@ (800aeb4 <etharp_query+0x268>)
 800ae7e:	4613      	mov	r3, r2
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	4413      	add	r3, r2
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	440b      	add	r3, r1
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae92:	e002      	b.n	800ae9a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ae94:	23ff      	movs	r3, #255	@ 0xff
 800ae96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800ae9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3728      	adds	r7, #40	@ 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	080168cc 	.word	0x080168cc
 800aeac:	08016ab0 	.word	0x08016ab0
 800aeb0:	0801697c 	.word	0x0801697c
 800aeb4:	24009a80 	.word	0x24009a80
 800aeb8:	08016ac0 	.word	0x08016ac0
 800aebc:	08016aa4 	.word	0x08016aa4
 800aec0:	24009b70 	.word	0x24009b70
 800aec4:	08016ae8 	.word	0x08016ae8

0800aec8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08a      	sub	sp, #40	@ 0x28
 800aecc:	af02      	add	r7, sp, #8
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d106      	bne.n	800aeee <etharp_raw+0x26>
 800aee0:	4b3a      	ldr	r3, [pc, #232]	@ (800afcc <etharp_raw+0x104>)
 800aee2:	f240 4257 	movw	r2, #1111	@ 0x457
 800aee6:	493a      	ldr	r1, [pc, #232]	@ (800afd0 <etharp_raw+0x108>)
 800aee8:	483a      	ldr	r0, [pc, #232]	@ (800afd4 <etharp_raw+0x10c>)
 800aeea:	f00a fc5f 	bl	80157ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800aeee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aef2:	211c      	movs	r1, #28
 800aef4:	200e      	movs	r0, #14
 800aef6:	f002 fde1 	bl	800dabc <pbuf_alloc>
 800aefa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800af02:	f04f 33ff 	mov.w	r3, #4294967295
 800af06:	e05d      	b.n	800afc4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	895b      	ldrh	r3, [r3, #10]
 800af0c:	2b1b      	cmp	r3, #27
 800af0e:	d806      	bhi.n	800af1e <etharp_raw+0x56>
 800af10:	4b2e      	ldr	r3, [pc, #184]	@ (800afcc <etharp_raw+0x104>)
 800af12:	f240 4262 	movw	r2, #1122	@ 0x462
 800af16:	4930      	ldr	r1, [pc, #192]	@ (800afd8 <etharp_raw+0x110>)
 800af18:	482e      	ldr	r0, [pc, #184]	@ (800afd4 <etharp_raw+0x10c>)
 800af1a:	f00a fc47 	bl	80157ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800af24:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff f910 	bl	800a14c <lwip_htons>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800af3a:	2b06      	cmp	r3, #6
 800af3c:	d006      	beq.n	800af4c <etharp_raw+0x84>
 800af3e:	4b23      	ldr	r3, [pc, #140]	@ (800afcc <etharp_raw+0x104>)
 800af40:	f240 4269 	movw	r2, #1129	@ 0x469
 800af44:	4925      	ldr	r1, [pc, #148]	@ (800afdc <etharp_raw+0x114>)
 800af46:	4823      	ldr	r0, [pc, #140]	@ (800afd4 <etharp_raw+0x10c>)
 800af48:	f00a fc30 	bl	80157ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	3308      	adds	r3, #8
 800af50:	2206      	movs	r2, #6
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	4618      	mov	r0, r3
 800af56:	f00a fd5a 	bl	8015a0e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	3312      	adds	r3, #18
 800af5e:	2206      	movs	r2, #6
 800af60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af62:	4618      	mov	r0, r3
 800af64:	f00a fd53 	bl	8015a0e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	330e      	adds	r3, #14
 800af6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af6e:	6812      	ldr	r2, [r2, #0]
 800af70:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	3318      	adds	r3, #24
 800af76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af78:	6812      	ldr	r2, [r2, #0]
 800af7a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	2200      	movs	r2, #0
 800af84:	f042 0201 	orr.w	r2, r2, #1
 800af88:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f042 0208 	orr.w	r2, r2, #8
 800af92:	709a      	strb	r2, [r3, #2]
 800af94:	2200      	movs	r2, #0
 800af96:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2206      	movs	r2, #6
 800af9c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2204      	movs	r2, #4
 800afa2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800afa4:	f640 0306 	movw	r3, #2054	@ 0x806
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	69b9      	ldr	r1, [r7, #24]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f8d9 	bl	800b168 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800afb6:	69b8      	ldr	r0, [r7, #24]
 800afb8:	f003 f864 	bl	800e084 <pbuf_free>
  p = NULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800afc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	080168cc 	.word	0x080168cc
 800afd0:	08016a54 	.word	0x08016a54
 800afd4:	0801697c 	.word	0x0801697c
 800afd8:	08016b04 	.word	0x08016b04
 800afdc:	08016b38 	.word	0x08016b38

0800afe0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af04      	add	r7, sp, #16
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800affc:	2201      	movs	r2, #1
 800affe:	9203      	str	r2, [sp, #12]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	9202      	str	r2, [sp, #8]
 800b004:	4a06      	ldr	r2, [pc, #24]	@ (800b020 <etharp_request_dst+0x40>)
 800b006:	9201      	str	r2, [sp, #4]
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4603      	mov	r3, r0
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff ff5a 	bl	800aec8 <etharp_raw>
 800b014:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	08019d38 	.word	0x08019d38

0800b024 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b02e:	4a05      	ldr	r2, [pc, #20]	@ (800b044 <etharp_request+0x20>)
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff ffd4 	bl	800afe0 <etharp_request_dst>
 800b038:	4603      	mov	r3, r0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	08019d30 	.word	0x08019d30

0800b048 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800b052:	230e      	movs	r3, #14
 800b054:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800b056:	f7fb f9a1 	bl	800639c <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	895b      	ldrh	r3, [r3, #10]
 800b05e:	2b0e      	cmp	r3, #14
 800b060:	d96e      	bls.n	800b140 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7bdb      	ldrb	r3, [r3, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b070:	3301      	adds	r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	7b1a      	ldrb	r2, [r3, #12]
 800b082:	7b5b      	ldrb	r3, [r3, #13]
 800b084:	021b      	lsls	r3, r3, #8
 800b086:	4313      	orrs	r3, r2
 800b088:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d023      	beq.n	800b0de <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d10f      	bne.n	800b0be <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d11b      	bne.n	800b0de <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b0aa:	2b5e      	cmp	r3, #94	@ 0x5e
 800b0ac:	d117      	bne.n	800b0de <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	7b5b      	ldrb	r3, [r3, #13]
 800b0b2:	f043 0310 	orr.w	r3, r3, #16
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	735a      	strb	r2, [r3, #13]
 800b0bc:	e00f      	b.n	800b0de <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2206      	movs	r2, #6
 800b0c2:	4928      	ldr	r1, [pc, #160]	@ (800b164 <ethernet_input+0x11c>)
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f00a fbc6 	bl	8015856 <memcmp>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7b5b      	ldrb	r3, [r3, #13]
 800b0d4:	f043 0308 	orr.w	r3, r3, #8
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b0de:	89fb      	ldrh	r3, [r7, #14]
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d003      	beq.n	800b0ec <ethernet_input+0xa4>
 800b0e4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b0e8:	d014      	beq.n	800b114 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b0ea:	e032      	b.n	800b152 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b0f2:	f003 0308 	and.w	r3, r3, #8
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d024      	beq.n	800b144 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b0fa:	8afb      	ldrh	r3, [r7, #22]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 ff3a 	bl	800df78 <pbuf_remove_header>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d11e      	bne.n	800b148 <ethernet_input+0x100>
        ip4_input(p, netif);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fb97 	bl	800b840 <ip4_input>
      break;
 800b112:	e013      	b.n	800b13c <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d014      	beq.n	800b14c <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b122:	8afb      	ldrh	r3, [r7, #22]
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f002 ff26 	bl	800df78 <pbuf_remove_header>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10e      	bne.n	800b150 <ethernet_input+0x108>
        etharp_input(p, netif);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fb5f 	bl	800a7f8 <etharp_input>
      break;
 800b13a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e00c      	b.n	800b15a <ethernet_input+0x112>
    goto free_and_return;
 800b140:	bf00      	nop
 800b142:	e006      	b.n	800b152 <ethernet_input+0x10a>
        goto free_and_return;
 800b144:	bf00      	nop
 800b146:	e004      	b.n	800b152 <ethernet_input+0x10a>
        goto free_and_return;
 800b148:	bf00      	nop
 800b14a:	e002      	b.n	800b152 <ethernet_input+0x10a>
        goto free_and_return;
 800b14c:	bf00      	nop
 800b14e:	e000      	b.n	800b152 <ethernet_input+0x10a>
        goto free_and_return;
 800b150:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f002 ff96 	bl	800e084 <pbuf_free>
  return ERR_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	08019d30 	.word	0x08019d30

0800b168 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b176:	8c3b      	ldrh	r3, [r7, #32]
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe ffe7 	bl	800a14c <lwip_htons>
 800b17e:	4603      	mov	r3, r0
 800b180:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b182:	210e      	movs	r1, #14
 800b184:	68b8      	ldr	r0, [r7, #8]
 800b186:	f002 fee7 	bl	800df58 <pbuf_add_header>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d127      	bne.n	800b1e0 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800b190:	f7fb f904 	bl	800639c <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	8afa      	ldrh	r2, [r7, #22]
 800b19e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	2206      	movs	r2, #6
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f00a fc31 	bl	8015a0e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3306      	adds	r3, #6
 800b1b0:	2206      	movs	r2, #6
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f00a fc2a 	bl	8015a0e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b1c0:	2b06      	cmp	r3, #6
 800b1c2:	d006      	beq.n	800b1d2 <ethernet_output+0x6a>
 800b1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f0 <ethernet_output+0x88>)
 800b1c6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800b1ca:	490a      	ldr	r1, [pc, #40]	@ (800b1f4 <ethernet_output+0x8c>)
 800b1cc:	480a      	ldr	r0, [pc, #40]	@ (800b1f8 <ethernet_output+0x90>)
 800b1ce:	f00a faed 	bl	80157ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	4798      	blx	r3
 800b1dc:	4603      	mov	r3, r0
 800b1de:	e002      	b.n	800b1e6 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 800b1e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b1e2:	f06f 0301 	mvn.w	r3, #1
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	08016b7c 	.word	0x08016b7c
 800b1f4:	08016bec 	.word	0x08016bec
 800b1f8:	08016c20 	.word	0x08016c20

0800b1fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08e      	sub	sp, #56	@ 0x38
 800b200:	af04      	add	r7, sp, #16
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b206:	4b87      	ldr	r3, [pc, #540]	@ (800b424 <icmp_input+0x228>)
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 030f 	and.w	r3, r3, #15
 800b214:	b2db      	uxtb	r3, r3
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b21c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b21e:	2b13      	cmp	r3, #19
 800b220:	f240 80e8 	bls.w	800b3f4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	895b      	ldrh	r3, [r3, #10]
 800b228:	2b03      	cmp	r3, #3
 800b22a:	f240 80e5 	bls.w	800b3f8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b238:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 80d2 	beq.w	800b3e6 <icmp_input+0x1ea>
 800b242:	2b08      	cmp	r3, #8
 800b244:	f040 80d2 	bne.w	800b3ec <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b248:	4b77      	ldr	r3, [pc, #476]	@ (800b428 <icmp_input+0x22c>)
 800b24a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b24c:	4b75      	ldr	r3, [pc, #468]	@ (800b424 <icmp_input+0x228>)
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b254:	2be0      	cmp	r3, #224	@ 0xe0
 800b256:	f000 80d6 	beq.w	800b406 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b25a:	4b72      	ldr	r3, [pc, #456]	@ (800b424 <icmp_input+0x228>)
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	4a71      	ldr	r2, [pc, #452]	@ (800b424 <icmp_input+0x228>)
 800b260:	6812      	ldr	r2, [r2, #0]
 800b262:	4611      	mov	r1, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fceb 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f040 80cc 	bne.w	800b40a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	891b      	ldrh	r3, [r3, #8]
 800b276:	2b07      	cmp	r3, #7
 800b278:	f240 80c0 	bls.w	800b3fc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f9e0 	bl	800b642 <inet_chksum_pbuf>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f002 fefb 	bl	800e084 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800b28e:	e0c5      	b.n	800b41c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b290:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b292:	330e      	adds	r3, #14
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fe5e 	bl	800df58 <pbuf_add_header>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d04b      	beq.n	800b33a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	891a      	ldrh	r2, [r3, #8]
 800b2a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2a8:	4413      	add	r3, r2
 800b2aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	891b      	ldrh	r3, [r3, #8]
 800b2b0:	8b7a      	ldrh	r2, [r7, #26]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	f0c0 80ab 	bcc.w	800b40e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b2b8:	8b7b      	ldrh	r3, [r7, #26]
 800b2ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b2be:	4619      	mov	r1, r3
 800b2c0:	200e      	movs	r0, #14
 800b2c2:	f002 fbfb 	bl	800dabc <pbuf_alloc>
 800b2c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 80a1 	beq.w	800b412 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	895b      	ldrh	r3, [r3, #10]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2d8:	3308      	adds	r3, #8
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d203      	bcs.n	800b2e6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b2de:	6978      	ldr	r0, [r7, #20]
 800b2e0:	f002 fed0 	bl	800e084 <pbuf_free>
          goto icmperr;
 800b2e4:	e096      	b.n	800b414 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b2ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f00a fb8d 	bl	8015a0e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b2f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6978      	ldr	r0, [r7, #20]
 800b2fa:	f002 fe3d 	bl	800df78 <pbuf_remove_header>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b304:	4b49      	ldr	r3, [pc, #292]	@ (800b42c <icmp_input+0x230>)
 800b306:	22b6      	movs	r2, #182	@ 0xb6
 800b308:	4949      	ldr	r1, [pc, #292]	@ (800b430 <icmp_input+0x234>)
 800b30a:	484a      	ldr	r0, [pc, #296]	@ (800b434 <icmp_input+0x238>)
 800b30c:	f00a fa4e 	bl	80157ac <iprintf>
          pbuf_free(r);
 800b310:	6978      	ldr	r0, [r7, #20]
 800b312:	f002 feb7 	bl	800e084 <pbuf_free>
          goto icmperr;
 800b316:	e07d      	b.n	800b414 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	6978      	ldr	r0, [r7, #20]
 800b31c:	f002 ffd6 	bl	800e2cc <pbuf_copy>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b326:	6978      	ldr	r0, [r7, #20]
 800b328:	f002 feac 	bl	800e084 <pbuf_free>
          goto icmperr;
 800b32c:	e072      	b.n	800b414 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f002 fea8 	bl	800e084 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	607b      	str	r3, [r7, #4]
 800b338:	e00f      	b.n	800b35a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b33a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b33c:	330e      	adds	r3, #14
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f002 fe19 	bl	800df78 <pbuf_remove_header>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d006      	beq.n	800b35a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b34c:	4b37      	ldr	r3, [pc, #220]	@ (800b42c <icmp_input+0x230>)
 800b34e:	22c7      	movs	r2, #199	@ 0xc7
 800b350:	4939      	ldr	r1, [pc, #228]	@ (800b438 <icmp_input+0x23c>)
 800b352:	4838      	ldr	r0, [pc, #224]	@ (800b434 <icmp_input+0x238>)
 800b354:	f00a fa2a 	bl	80157ac <iprintf>
          goto icmperr;
 800b358:	e05c      	b.n	800b414 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b360:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f002 fdf7 	bl	800df58 <pbuf_add_header>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d13c      	bne.n	800b3ea <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b37e:	4b29      	ldr	r3, [pc, #164]	@ (800b424 <icmp_input+0x228>)
 800b380:	691a      	ldr	r2, [r3, #16]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	885b      	ldrh	r3, [r3, #2]
 800b390:	b29b      	uxth	r3, r3
 800b392:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800b396:	4293      	cmp	r3, r2
 800b398:	d907      	bls.n	800b3aa <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	3309      	adds	r3, #9
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	805a      	strh	r2, [r3, #2]
 800b3a8:	e006      	b.n	800b3b8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	22ff      	movs	r2, #255	@ 0xff
 800b3bc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	729a      	strb	r2, [r3, #10]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	9302      	str	r3, [sp, #8]
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	23ff      	movs	r3, #255	@ 0xff
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	69f9      	ldr	r1, [r7, #28]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fb56 	bl	800ba8c <ip4_output_if>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b3e4:	e001      	b.n	800b3ea <icmp_input+0x1ee>
      break;
 800b3e6:	bf00      	nop
 800b3e8:	e000      	b.n	800b3ec <icmp_input+0x1f0>
      break;
 800b3ea:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 fe49 	bl	800e084 <pbuf_free>
  return;
 800b3f2:	e013      	b.n	800b41c <icmp_input+0x220>
    goto lenerr;
 800b3f4:	bf00      	nop
 800b3f6:	e002      	b.n	800b3fe <icmp_input+0x202>
    goto lenerr;
 800b3f8:	bf00      	nop
 800b3fa:	e000      	b.n	800b3fe <icmp_input+0x202>
        goto lenerr;
 800b3fc:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f002 fe40 	bl	800e084 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b404:	e00a      	b.n	800b41c <icmp_input+0x220>
        goto icmperr;
 800b406:	bf00      	nop
 800b408:	e004      	b.n	800b414 <icmp_input+0x218>
        goto icmperr;
 800b40a:	bf00      	nop
 800b40c:	e002      	b.n	800b414 <icmp_input+0x218>
          goto icmperr;
 800b40e:	bf00      	nop
 800b410:	e000      	b.n	800b414 <icmp_input+0x218>
          goto icmperr;
 800b412:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f002 fe35 	bl	800e084 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b41a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b41c:	3728      	adds	r7, #40	@ 0x28
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	24009b74 	.word	0x24009b74
 800b428:	24009b88 	.word	0x24009b88
 800b42c:	08016c48 	.word	0x08016c48
 800b430:	08016cb8 	.word	0x08016cb8
 800b434:	08016cf0 	.word	0x08016cf0
 800b438:	08016d18 	.word	0x08016d18

0800b43c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	461a      	mov	r2, r3
 800b44c:	2103      	movs	r1, #3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f814 	bl	800b47c <icmp_send_response>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	461a      	mov	r2, r3
 800b46c:	210b      	movs	r1, #11
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f804 	bl	800b47c <icmp_send_response>
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08c      	sub	sp, #48	@ 0x30
 800b480:	af04      	add	r7, sp, #16
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	460b      	mov	r3, r1
 800b486:	70fb      	strb	r3, [r7, #3]
 800b488:	4613      	mov	r3, r2
 800b48a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b48c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b490:	2124      	movs	r1, #36	@ 0x24
 800b492:	2022      	movs	r0, #34	@ 0x22
 800b494:	f002 fb12 	bl	800dabc <pbuf_alloc>
 800b498:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d056      	beq.n	800b54e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	895b      	ldrh	r3, [r3, #10]
 800b4a4:	2b23      	cmp	r3, #35	@ 0x23
 800b4a6:	d806      	bhi.n	800b4b6 <icmp_send_response+0x3a>
 800b4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800b558 <icmp_send_response+0xdc>)
 800b4aa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800b4ae:	492b      	ldr	r1, [pc, #172]	@ (800b55c <icmp_send_response+0xe0>)
 800b4b0:	482b      	ldr	r0, [pc, #172]	@ (800b560 <icmp_send_response+0xe4>)
 800b4b2:	f00a f97b 	bl	80157ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	78fa      	ldrb	r2, [r7, #3]
 800b4c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	78ba      	ldrb	r2, [r7, #2]
 800b4cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	711a      	strb	r2, [r3, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	719a      	strb	r2, [r3, #6]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f103 0008 	add.w	r0, r3, #8
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	221c      	movs	r2, #28
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f00a fa8c 	bl	8015a0e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b4fc:	f107 030c 	add.w	r3, r7, #12
 800b500:	4618      	mov	r0, r3
 800b502:	f000 f903 	bl	800b70c <ip4_route>
 800b506:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d01b      	beq.n	800b546 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2200      	movs	r2, #0
 800b512:	709a      	strb	r2, [r3, #2]
 800b514:	2200      	movs	r2, #0
 800b516:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	4619      	mov	r1, r3
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f000 f87d 	bl	800b61e <inet_chksum>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b52c:	f107 020c 	add.w	r2, r7, #12
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	9302      	str	r3, [sp, #8]
 800b534:	2301      	movs	r3, #1
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	2300      	movs	r3, #0
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	23ff      	movs	r3, #255	@ 0xff
 800b53e:	2100      	movs	r1, #0
 800b540:	69f8      	ldr	r0, [r7, #28]
 800b542:	f000 faa3 	bl	800ba8c <ip4_output_if>
  }
  pbuf_free(q);
 800b546:	69f8      	ldr	r0, [r7, #28]
 800b548:	f002 fd9c 	bl	800e084 <pbuf_free>
 800b54c:	e000      	b.n	800b550 <icmp_send_response+0xd4>
    return;
 800b54e:	bf00      	nop
}
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	08016c48 	.word	0x08016c48
 800b55c:	08016d4c 	.word	0x08016d4c
 800b560:	08016cf0 	.word	0x08016cf0

0800b564 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b564:	b480      	push	{r7}
 800b566:	b089      	sub	sp, #36	@ 0x24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00d      	beq.n	800b5a4 <lwip_standard_chksum+0x40>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	dd0a      	ble.n	800b5a4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b58e:	69fa      	ldr	r2, [r7, #28]
 800b590:	1c53      	adds	r3, r2, #1
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	f107 030e 	add.w	r3, r7, #14
 800b598:	3301      	adds	r3, #1
 800b59a:	7812      	ldrb	r2, [r2, #0]
 800b59c:	701a      	strb	r2, [r3, #0]
    len--;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b5a8:	e00a      	b.n	800b5c0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	1c9a      	adds	r2, r3, #2
 800b5ae:	61ba      	str	r2, [r7, #24]
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	3b02      	subs	r3, #2
 800b5be:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	dcf1      	bgt.n	800b5aa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dd04      	ble.n	800b5d6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b5cc:	f107 030e 	add.w	r3, r7, #14
 800b5d0:	69ba      	ldr	r2, [r7, #24]
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	4413      	add	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	0c1a      	lsrs	r2, r3, #16
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	0c1a      	lsrs	r2, r3, #16
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d007      	beq.n	800b60e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	021b      	lsls	r3, r3, #8
 800b602:	b29a      	uxth	r2, r3
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	4313      	orrs	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	b29b      	uxth	r3, r3
}
 800b612:	4618      	mov	r0, r3
 800b614:	3724      	adds	r7, #36	@ 0x24
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b082      	sub	sp, #8
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	460b      	mov	r3, r1
 800b628:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b62a:	887b      	ldrh	r3, [r7, #2]
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff ff98 	bl	800b564 <lwip_standard_chksum>
 800b634:	4603      	mov	r3, r0
 800b636:	43db      	mvns	r3, r3
 800b638:	b29b      	uxth	r3, r3
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b086      	sub	sp, #24
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	e02b      	b.n	800b6b0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	895b      	ldrh	r3, [r3, #10]
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7ff ff7e 	bl	800b564 <lwip_standard_chksum>
 800b668:	4603      	mov	r3, r0
 800b66a:	461a      	mov	r2, r3
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	4413      	add	r3, r2
 800b670:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	0c1a      	lsrs	r2, r3, #16
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	895b      	ldrh	r3, [r3, #10]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	b29b      	uxth	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00e      	beq.n	800b6aa <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bf0c      	ite	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	2300      	movne	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	613b      	str	r3, [r7, #16]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1d0      	bne.n	800b658 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	0a1b      	lsrs	r3, r3, #8
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	43db      	mvns	r3, r3
 800b6d2:	b29b      	uxth	r3, r3
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b6e6:	f003 f895 	bl	800e814 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b6ea:	f001 f9ed 	bl	800cac8 <mem_init>
  memp_init();
 800b6ee:	f001 fd35 	bl	800d15c <memp_init>
  pbuf_init();
  netif_init();
 800b6f2:	f001 fe41 	bl	800d378 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b6f6:	f009 fd9d 	bl	8015234 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b6fa:	f003 f907 	bl	800e90c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b6fe:	f009 fcd9 	bl	80150b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b702:	bf00      	nop
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800b714:	f7fa fe42 	bl	800639c <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b718:	4b32      	ldr	r3, [pc, #200]	@ (800b7e4 <ip4_route+0xd8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	e036      	b.n	800b78e <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d02b      	beq.n	800b788 <ip4_route+0x7c>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d022      	beq.n	800b788 <ip4_route+0x7c>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3304      	adds	r3, #4
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01d      	beq.n	800b788 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3304      	adds	r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	405a      	eors	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3308      	adds	r3, #8
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4013      	ands	r3, r2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	e038      	b.n	800b7da <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b76e:	f003 0302 	and.w	r3, r3, #2
 800b772:	2b00      	cmp	r3, #0
 800b774:	d108      	bne.n	800b788 <ip4_route+0x7c>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	330c      	adds	r3, #12
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d101      	bne.n	800b788 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	e028      	b.n	800b7da <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1c5      	bne.n	800b720 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b794:	4b14      	ldr	r3, [pc, #80]	@ (800b7e8 <ip4_route+0xdc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01a      	beq.n	800b7d2 <ip4_route+0xc6>
 800b79c:	4b12      	ldr	r3, [pc, #72]	@ (800b7e8 <ip4_route+0xdc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d012      	beq.n	800b7d2 <ip4_route+0xc6>
 800b7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e8 <ip4_route+0xdc>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00a      	beq.n	800b7d2 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e8 <ip4_route+0xdc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d004      	beq.n	800b7d2 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7d0:	d101      	bne.n	800b7d6 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e001      	b.n	800b7da <ip4_route+0xce>
  }

  return netif_default;
 800b7d6:	4b04      	ldr	r3, [pc, #16]	@ (800b7e8 <ip4_route+0xdc>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	24010634 	.word	0x24010634
 800b7e8:	24010638 	.word	0x24010638

0800b7ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d016      	beq.n	800b832 <ip4_input_accept+0x46>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3304      	adds	r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d011      	beq.n	800b832 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b80e:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <ip4_input_accept+0x50>)
 800b810:	695a      	ldr	r2, [r3, #20]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3304      	adds	r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d008      	beq.n	800b82e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b81c:	4b07      	ldr	r3, [pc, #28]	@ (800b83c <ip4_input_accept+0x50>)
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 fa0c 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800b828:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b82e:	2301      	movs	r3, #1
 800b830:	e000      	b.n	800b834 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	24009b74 	.word	0x24009b74

0800b840 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800b84a:	f7fa fda7 	bl	800639c <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d004      	beq.n	800b86a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f002 fc0f 	bl	800e084 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e107      	b.n	800ba7a <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	b2db      	uxtb	r3, r3
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	b2db      	uxtb	r3, r3
 800b878:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	885b      	ldrh	r3, [r3, #2]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe fc63 	bl	800a14c <lwip_htons>
 800b886:	4603      	mov	r3, r0
 800b888:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	891b      	ldrh	r3, [r3, #8]
 800b88e:	89ba      	ldrh	r2, [r7, #12]
 800b890:	429a      	cmp	r2, r3
 800b892:	d204      	bcs.n	800b89e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800b894:	89bb      	ldrh	r3, [r7, #12]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f002 fa6f 	bl	800dd7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	895b      	ldrh	r3, [r3, #10]
 800b8a2:	89fa      	ldrh	r2, [r7, #14]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d807      	bhi.n	800b8b8 <ip4_input+0x78>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	891b      	ldrh	r3, [r3, #8]
 800b8ac:	89ba      	ldrh	r2, [r7, #12]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d802      	bhi.n	800b8b8 <ip4_input+0x78>
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
 800b8b4:	2b13      	cmp	r3, #19
 800b8b6:	d804      	bhi.n	800b8c2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f002 fbe3 	bl	800e084 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	e0db      	b.n	800ba7a <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	4a6f      	ldr	r2, [pc, #444]	@ (800ba84 <ip4_input+0x244>)
 800b8c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	4a6d      	ldr	r2, [pc, #436]	@ (800ba84 <ip4_input+0x244>)
 800b8d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b8d2:	4b6c      	ldr	r3, [pc, #432]	@ (800ba84 <ip4_input+0x244>)
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b8da:	2be0      	cmp	r3, #224	@ 0xe0
 800b8dc:	d112      	bne.n	800b904 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d007      	beq.n	800b8fe <ip4_input+0xbe>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <ip4_input+0xbe>
      netif = inp;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	e02a      	b.n	800b954 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	613b      	str	r3, [r7, #16]
 800b902:	e027      	b.n	800b954 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b904:	6838      	ldr	r0, [r7, #0]
 800b906:	f7ff ff71 	bl	800b7ec <ip4_input_accept>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <ip4_input+0xd6>
      netif = inp;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	e01e      	b.n	800b954 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b91a:	4b5a      	ldr	r3, [pc, #360]	@ (800ba84 <ip4_input+0x244>)
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b7f      	cmp	r3, #127	@ 0x7f
 800b922:	d017      	beq.n	800b954 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b924:	4b58      	ldr	r3, [pc, #352]	@ (800ba88 <ip4_input+0x248>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	613b      	str	r3, [r7, #16]
 800b92a:	e00e      	b.n	800b94a <ip4_input+0x10a>
          if (netif == inp) {
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d006      	beq.n	800b942 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b934:	6938      	ldr	r0, [r7, #16]
 800b936:	f7ff ff59 	bl	800b7ec <ip4_input_accept>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d108      	bne.n	800b952 <ip4_input+0x112>
 800b940:	e000      	b.n	800b944 <ip4_input+0x104>
            continue;
 800b942:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1ed      	bne.n	800b92c <ip4_input+0xec>
 800b950:	e000      	b.n	800b954 <ip4_input+0x114>
            break;
 800b952:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b954:	4b4b      	ldr	r3, [pc, #300]	@ (800ba84 <ip4_input+0x244>)
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f970 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b966:	4b47      	ldr	r3, [pc, #284]	@ (800ba84 <ip4_input+0x244>)
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b96e:	2be0      	cmp	r3, #224	@ 0xe0
 800b970:	d104      	bne.n	800b97c <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f002 fb86 	bl	800e084 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	e07e      	b.n	800ba7a <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f002 fb7e 	bl	800e084 <pbuf_free>
    return ERR_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	e076      	b.n	800ba7a <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	88db      	ldrh	r3, [r3, #6]
 800b990:	b29b      	uxth	r3, r3
 800b992:	461a      	mov	r2, r3
 800b994:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800b998:	4013      	ands	r3, r2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fc94 	bl	800c2cc <ip4_reass>
 800b9a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <ip4_input+0x170>
      return ERR_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e064      	b.n	800ba7a <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b9b6:	4a33      	ldr	r2, [pc, #204]	@ (800ba84 <ip4_input+0x244>)
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b9bc:	4a31      	ldr	r2, [pc, #196]	@ (800ba84 <ip4_input+0x244>)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b9c2:	4a30      	ldr	r2, [pc, #192]	@ (800ba84 <ip4_input+0x244>)
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	4b2a      	ldr	r3, [pc, #168]	@ (800ba84 <ip4_input+0x244>)
 800b9da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b9dc:	89fb      	ldrh	r3, [r7, #14]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f002 fac9 	bl	800df78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ea:	2b11      	cmp	r3, #17
 800b9ec:	d006      	beq.n	800b9fc <ip4_input+0x1bc>
 800b9ee:	2b11      	cmp	r3, #17
 800b9f0:	dc13      	bgt.n	800ba1a <ip4_input+0x1da>
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d00c      	beq.n	800ba10 <ip4_input+0x1d0>
 800b9f6:	2b06      	cmp	r3, #6
 800b9f8:	d005      	beq.n	800ba06 <ip4_input+0x1c6>
 800b9fa:	e00e      	b.n	800ba1a <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f009 fc8e 	bl	8015320 <udp_input>
        break;
 800ba04:	e026      	b.n	800ba54 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f004 fed7 	bl	80107bc <tcp_input>
        break;
 800ba0e:	e021      	b.n	800ba54 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fbf2 	bl	800b1fc <icmp_input>
        break;
 800ba18:	e01c      	b.n	800ba54 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ba1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ba84 <ip4_input+0x244>)
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	6939      	ldr	r1, [r7, #16]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 f90d 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10f      	bne.n	800ba4c <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ba2c:	4b15      	ldr	r3, [pc, #84]	@ (800ba84 <ip4_input+0x244>)
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ba34:	2be0      	cmp	r3, #224	@ 0xe0
 800ba36:	d009      	beq.n	800ba4c <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ba38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f002 fb0d 	bl	800e05e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ba44:	2102      	movs	r1, #2
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff fcf8 	bl	800b43c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f002 fb19 	bl	800e084 <pbuf_free>
        break;
 800ba52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ba54:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <ip4_input+0x244>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba84 <ip4_input+0x244>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ba60:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <ip4_input+0x244>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ba66:	4b07      	ldr	r3, [pc, #28]	@ (800ba84 <ip4_input+0x244>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ba6c:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <ip4_input+0x244>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ba72:	4b04      	ldr	r3, [pc, #16]	@ (800ba84 <ip4_input+0x244>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	24009b74 	.word	0x24009b74
 800ba88:	24010634 	.word	0x24010634

0800ba8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	@ 0x28
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d009      	beq.n	800bab8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <ip4_output_if+0x26>
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab4:	3304      	adds	r3, #4
 800bab6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800babc:	9302      	str	r3, [sp, #8]
 800babe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bac2:	9301      	str	r3, [sp, #4]
 800bac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4613      	mov	r3, r2
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	6979      	ldr	r1, [r7, #20]
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 f805 	bl	800bae0 <ip4_output_if_src>
 800bad6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800baee:	f7fa fc55 	bl	800639c <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	7b9b      	ldrb	r3, [r3, #14]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d006      	beq.n	800bb08 <ip4_output_if_src+0x28>
 800bafa:	4b4b      	ldr	r3, [pc, #300]	@ (800bc28 <ip4_output_if_src+0x148>)
 800bafc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800bb00:	494a      	ldr	r1, [pc, #296]	@ (800bc2c <ip4_output_if_src+0x14c>)
 800bb02:	484b      	ldr	r0, [pc, #300]	@ (800bc30 <ip4_output_if_src+0x150>)
 800bb04:	f009 fe52 	bl	80157ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d060      	beq.n	800bbd0 <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 800bb0e:	2314      	movs	r3, #20
 800bb10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bb12:	2114      	movs	r1, #20
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f002 fa1f 	bl	800df58 <pbuf_add_header>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bb20:	f06f 0301 	mvn.w	r3, #1
 800bb24:	e07c      	b.n	800bc20 <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	895b      	ldrh	r3, [r3, #10]
 800bb30:	2b13      	cmp	r3, #19
 800bb32:	d806      	bhi.n	800bb42 <ip4_output_if_src+0x62>
 800bb34:	4b3c      	ldr	r3, [pc, #240]	@ (800bc28 <ip4_output_if_src+0x148>)
 800bb36:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800bb3a:	493e      	ldr	r1, [pc, #248]	@ (800bc34 <ip4_output_if_src+0x154>)
 800bb3c:	483c      	ldr	r0, [pc, #240]	@ (800bc30 <ip4_output_if_src+0x150>)
 800bb3e:	f009 fe35 	bl	80157ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	78fa      	ldrb	r2, [r7, #3]
 800bb46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800bb4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bb58:	8b7b      	ldrh	r3, [r7, #26]
 800bb5a:	089b      	lsrs	r3, r3, #2
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bb70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe fae8 	bl	800a14c <lwip_htons>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	461a      	mov	r2, r3
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	2200      	movs	r2, #0
 800bb88:	719a      	strb	r2, [r3, #6]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bb8e:	4b2a      	ldr	r3, [pc, #168]	@ (800bc38 <ip4_output_if_src+0x158>)
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe fada 	bl	800a14c <lwip_htons>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bba0:	4b25      	ldr	r3, [pc, #148]	@ (800bc38 <ip4_output_if_src+0x158>)
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	3301      	adds	r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	4b23      	ldr	r3, [pc, #140]	@ (800bc38 <ip4_output_if_src+0x158>)
 800bbaa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d104      	bne.n	800bbbc <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bbb2:	4b22      	ldr	r3, [pc, #136]	@ (800bc3c <ip4_output_if_src+0x15c>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	60da      	str	r2, [r3, #12]
 800bbba:	e003      	b.n	800bbc4 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	729a      	strb	r2, [r3, #10]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	72da      	strb	r2, [r3, #11]
 800bbce:	e00f      	b.n	800bbf0 <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	895b      	ldrh	r3, [r3, #10]
 800bbd4:	2b13      	cmp	r3, #19
 800bbd6:	d802      	bhi.n	800bbde <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bbd8:	f06f 0301 	mvn.w	r3, #1
 800bbdc:	e020      	b.n	800bc20 <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bbea:	f107 0314 	add.w	r3, r7, #20
 800bbee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00c      	beq.n	800bc12 <ip4_output_if_src+0x132>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	891a      	ldrh	r2, [r3, #8]
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d906      	bls.n	800bc12 <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 fd53 	bl	800c6b4 <ip4_frag>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	e006      	b.n	800bc20 <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	68f9      	ldr	r1, [r7, #12]
 800bc1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	08016d78 	.word	0x08016d78
 800bc2c:	08016de8 	.word	0x08016de8
 800bc30:	08016df4 	.word	0x08016df4
 800bc34:	08016e1c 	.word	0x08016e1c
 800bc38:	24009b8c 	.word	0x24009b8c
 800bc3c:	08019d40 	.word	0x08019d40

0800bc40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc54:	d002      	beq.n	800bc5c <ip4_addr_isbroadcast_u32+0x1c>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e02a      	b.n	800bcb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc66:	f003 0302 	and.w	r3, r3, #2
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e021      	b.n	800bcb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	3304      	adds	r3, #4
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d101      	bne.n	800bc82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e019      	b.n	800bcb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3304      	adds	r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	405a      	eors	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	3308      	adds	r3, #8
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4013      	ands	r3, r2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10d      	bne.n	800bcb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	43da      	mvns	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	3308      	adds	r3, #8
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d101      	bne.n	800bcb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bcb4:	2300      	movs	r3, #0
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
	...

0800bcc4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800bcce:	4b12      	ldr	r3, [pc, #72]	@ (800bd18 <ip_reass_tmr+0x54>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800bcd4:	e018      	b.n	800bd08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	7fdb      	ldrb	r3, [r3, #31]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00b      	beq.n	800bcf6 <ip_reass_tmr+0x32>
      r->timer--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	7fdb      	ldrb	r3, [r3, #31]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	e008      	b.n	800bd08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f80a 	bl	800bd1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1e3      	bne.n	800bcd6 <ip_reass_tmr+0x12>
    }
  }
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	24009b90 	.word	0x24009b90

0800bd1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d105      	bne.n	800bd3e <ip_reass_free_complete_datagram+0x22>
 800bd32:	4b45      	ldr	r3, [pc, #276]	@ (800be48 <ip_reass_free_complete_datagram+0x12c>)
 800bd34:	22ab      	movs	r2, #171	@ 0xab
 800bd36:	4945      	ldr	r1, [pc, #276]	@ (800be4c <ip_reass_free_complete_datagram+0x130>)
 800bd38:	4845      	ldr	r0, [pc, #276]	@ (800be50 <ip_reass_free_complete_datagram+0x134>)
 800bd3a:	f009 fd37 	bl	80157ac <iprintf>
  if (prev != NULL) {
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00a      	beq.n	800bd5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d005      	beq.n	800bd5a <ip_reass_free_complete_datagram+0x3e>
 800bd4e:	4b3e      	ldr	r3, [pc, #248]	@ (800be48 <ip_reass_free_complete_datagram+0x12c>)
 800bd50:	22ad      	movs	r2, #173	@ 0xad
 800bd52:	4940      	ldr	r1, [pc, #256]	@ (800be54 <ip_reass_free_complete_datagram+0x138>)
 800bd54:	483e      	ldr	r0, [pc, #248]	@ (800be50 <ip_reass_free_complete_datagram+0x134>)
 800bd56:	f009 fd29 	bl	80157ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	889b      	ldrh	r3, [r3, #4]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d12a      	bne.n	800bdc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	6858      	ldr	r0, [r3, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3308      	adds	r3, #8
 800bd82:	2214      	movs	r2, #20
 800bd84:	4619      	mov	r1, r3
 800bd86:	f009 fe42 	bl	8015a0e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	69b8      	ldr	r0, [r7, #24]
 800bd8e:	f7ff fb65 	bl	800b45c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800bd92:	69b8      	ldr	r0, [r7, #24]
 800bd94:	f002 fa04 	bl	800e1a0 <pbuf_clen>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bd9c:	8bfa      	ldrh	r2, [r7, #30]
 800bd9e:	8a7b      	ldrh	r3, [r7, #18]
 800bda0:	4413      	add	r3, r2
 800bda2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bda6:	db05      	blt.n	800bdb4 <ip_reass_free_complete_datagram+0x98>
 800bda8:	4b27      	ldr	r3, [pc, #156]	@ (800be48 <ip_reass_free_complete_datagram+0x12c>)
 800bdaa:	22bc      	movs	r2, #188	@ 0xbc
 800bdac:	492a      	ldr	r1, [pc, #168]	@ (800be58 <ip_reass_free_complete_datagram+0x13c>)
 800bdae:	4828      	ldr	r0, [pc, #160]	@ (800be50 <ip_reass_free_complete_datagram+0x134>)
 800bdb0:	f009 fcfc 	bl	80157ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bdb4:	8bfa      	ldrh	r2, [r7, #30]
 800bdb6:	8a7b      	ldrh	r3, [r7, #18]
 800bdb8:	4413      	add	r3, r2
 800bdba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800bdbc:	69b8      	ldr	r0, [r7, #24]
 800bdbe:	f002 f961 	bl	800e084 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800bdc8:	e01f      	b.n	800be0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	617b      	str	r3, [r7, #20]
    pcur = p;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f002 f9e0 	bl	800e1a0 <pbuf_clen>
 800bde0:	4603      	mov	r3, r0
 800bde2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bde4:	8bfa      	ldrh	r2, [r7, #30]
 800bde6:	8a7b      	ldrh	r3, [r7, #18]
 800bde8:	4413      	add	r3, r2
 800bdea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdee:	db05      	blt.n	800bdfc <ip_reass_free_complete_datagram+0xe0>
 800bdf0:	4b15      	ldr	r3, [pc, #84]	@ (800be48 <ip_reass_free_complete_datagram+0x12c>)
 800bdf2:	22cc      	movs	r2, #204	@ 0xcc
 800bdf4:	4918      	ldr	r1, [pc, #96]	@ (800be58 <ip_reass_free_complete_datagram+0x13c>)
 800bdf6:	4816      	ldr	r0, [pc, #88]	@ (800be50 <ip_reass_free_complete_datagram+0x134>)
 800bdf8:	f009 fcd8 	bl	80157ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bdfc:	8bfa      	ldrh	r2, [r7, #30]
 800bdfe:	8a7b      	ldrh	r3, [r7, #18]
 800be00:	4413      	add	r3, r2
 800be02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f002 f93d 	bl	800e084 <pbuf_free>
  while (p != NULL) {
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1dc      	bne.n	800bdca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f8c2 	bl	800bf9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800be18:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <ip_reass_free_complete_datagram+0x140>)
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	8bfa      	ldrh	r2, [r7, #30]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d905      	bls.n	800be2e <ip_reass_free_complete_datagram+0x112>
 800be22:	4b09      	ldr	r3, [pc, #36]	@ (800be48 <ip_reass_free_complete_datagram+0x12c>)
 800be24:	22d2      	movs	r2, #210	@ 0xd2
 800be26:	490e      	ldr	r1, [pc, #56]	@ (800be60 <ip_reass_free_complete_datagram+0x144>)
 800be28:	4809      	ldr	r0, [pc, #36]	@ (800be50 <ip_reass_free_complete_datagram+0x134>)
 800be2a:	f009 fcbf 	bl	80157ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800be2e:	4b0b      	ldr	r3, [pc, #44]	@ (800be5c <ip_reass_free_complete_datagram+0x140>)
 800be30:	881a      	ldrh	r2, [r3, #0]
 800be32:	8bfb      	ldrh	r3, [r7, #30]
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	b29a      	uxth	r2, r3
 800be38:	4b08      	ldr	r3, [pc, #32]	@ (800be5c <ip_reass_free_complete_datagram+0x140>)
 800be3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800be3c:	8bfb      	ldrh	r3, [r7, #30]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3720      	adds	r7, #32
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	08016e4c 	.word	0x08016e4c
 800be4c:	08016ec0 	.word	0x08016ec0
 800be50:	08016ecc 	.word	0x08016ecc
 800be54:	08016ef4 	.word	0x08016ef4
 800be58:	08016f08 	.word	0x08016f08
 800be5c:	24009b94 	.word	0x24009b94
 800be60:	08016f28 	.word	0x08016f28

0800be64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	@ 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800be82:	4b28      	ldr	r3, [pc, #160]	@ (800bf24 <ip_reass_remove_oldest_datagram+0xc0>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800be88:	e030      	b.n	800beec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	695a      	ldr	r2, [r3, #20]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	429a      	cmp	r2, r3
 800be94:	d10c      	bne.n	800beb0 <ip_reass_remove_oldest_datagram+0x4c>
 800be96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be98:	699a      	ldr	r2, [r3, #24]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d106      	bne.n	800beb0 <ip_reass_remove_oldest_datagram+0x4c>
 800bea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea4:	899a      	ldrh	r2, [r3, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	889b      	ldrh	r3, [r3, #4]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	429a      	cmp	r2, r3
 800beae:	d014      	beq.n	800beda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	3301      	adds	r3, #1
 800beb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	61bb      	str	r3, [r7, #24]
 800bec4:	e009      	b.n	800beda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec8:	7fda      	ldrb	r2, [r3, #31]
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	7fdb      	ldrb	r3, [r3, #31]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d803      	bhi.n	800beda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800bed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800beda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800bee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1cb      	bne.n	800be8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d008      	beq.n	800bf0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800bef8:	69b9      	ldr	r1, [r7, #24]
 800befa:	6a38      	ldr	r0, [r7, #32]
 800befc:	f7ff ff0e 	bl	800bd1c <ip_reass_free_complete_datagram>
 800bf00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	da02      	bge.n	800bf18 <ip_reass_remove_oldest_datagram+0xb4>
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	dcac      	bgt.n	800be72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3728      	adds	r7, #40	@ 0x28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	24009b90 	.word	0x24009b90

0800bf28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bf32:	2004      	movs	r0, #4
 800bf34:	f001 f980 	bl	800d238 <memp_malloc>
 800bf38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d110      	bne.n	800bf62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff ff8e 	bl	800be64 <ip_reass_remove_oldest_datagram>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	dc03      	bgt.n	800bf58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bf50:	2004      	movs	r0, #4
 800bf52:	f001 f971 	bl	800d238 <memp_malloc>
 800bf56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e016      	b.n	800bf90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800bf62:	2220      	movs	r2, #32
 800bf64:	2100      	movs	r1, #0
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f009 fc85 	bl	8015876 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	220f      	movs	r2, #15
 800bf70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800bf72:	4b09      	ldr	r3, [pc, #36]	@ (800bf98 <ip_reass_enqueue_new_datagram+0x70>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800bf7a:	4a07      	ldr	r2, [pc, #28]	@ (800bf98 <ip_reass_enqueue_new_datagram+0x70>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3308      	adds	r3, #8
 800bf84:	2214      	movs	r2, #20
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f009 fd40 	bl	8015a0e <memcpy>
  return ipr;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	24009b90 	.word	0x24009b90

0800bf9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800bfa6:	4b10      	ldr	r3, [pc, #64]	@ (800bfe8 <ip_reass_dequeue_datagram+0x4c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d104      	bne.n	800bfba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0c      	ldr	r2, [pc, #48]	@ (800bfe8 <ip_reass_dequeue_datagram+0x4c>)
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	e00d      	b.n	800bfd6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d106      	bne.n	800bfce <ip_reass_dequeue_datagram+0x32>
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <ip_reass_dequeue_datagram+0x50>)
 800bfc2:	f240 1245 	movw	r2, #325	@ 0x145
 800bfc6:	490a      	ldr	r1, [pc, #40]	@ (800bff0 <ip_reass_dequeue_datagram+0x54>)
 800bfc8:	480a      	ldr	r0, [pc, #40]	@ (800bff4 <ip_reass_dequeue_datagram+0x58>)
 800bfca:	f009 fbef 	bl	80157ac <iprintf>
    prev->next = ipr->next;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	2004      	movs	r0, #4
 800bfda:	f001 f9a3 	bl	800d324 <memp_free>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	24009b90 	.word	0x24009b90
 800bfec:	08016e4c 	.word	0x08016e4c
 800bff0:	08016f4c 	.word	0x08016f4c
 800bff4:	08016ecc 	.word	0x08016ecc

0800bff8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08c      	sub	sp, #48	@ 0x30
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c008:	2301      	movs	r3, #1
 800c00a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	b29b      	uxth	r3, r3
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe f897 	bl	800a14c <lwip_htons>
 800c01e:	4603      	mov	r3, r0
 800c020:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f003 030f 	and.w	r3, r3, #15
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c030:	7e7b      	ldrb	r3, [r7, #25]
 800c032:	b29b      	uxth	r3, r3
 800c034:	8b7a      	ldrh	r2, [r7, #26]
 800c036:	429a      	cmp	r2, r3
 800c038:	d202      	bcs.n	800c040 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c03a:	f04f 33ff 	mov.w	r3, #4294967295
 800c03e:	e135      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c040:	7e7b      	ldrb	r3, [r7, #25]
 800c042:	b29b      	uxth	r3, r3
 800c044:	8b7a      	ldrh	r2, [r7, #26]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	88db      	ldrh	r3, [r3, #6]
 800c04e:	b29b      	uxth	r3, r3
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe f87b 	bl	800a14c <lwip_htons>
 800c056:	4603      	mov	r3, r0
 800c058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800c068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06a:	2200      	movs	r2, #0
 800c06c:	701a      	strb	r2, [r3, #0]
 800c06e:	2200      	movs	r2, #0
 800c070:	705a      	strb	r2, [r3, #1]
 800c072:	2200      	movs	r2, #0
 800c074:	709a      	strb	r2, [r3, #2]
 800c076:	2200      	movs	r2, #0
 800c078:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c07c:	8afa      	ldrh	r2, [r7, #22]
 800c07e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c080:	8afa      	ldrh	r2, [r7, #22]
 800c082:	8b7b      	ldrh	r3, [r7, #26]
 800c084:	4413      	add	r3, r2
 800c086:	b29a      	uxth	r2, r3
 800c088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08e:	88db      	ldrh	r3, [r3, #6]
 800c090:	b29b      	uxth	r3, r3
 800c092:	8afa      	ldrh	r2, [r7, #22]
 800c094:	429a      	cmp	r2, r3
 800c096:	d902      	bls.n	800c09e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
 800c09c:	e106      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a4:	e068      	b.n	800c178 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ae:	889b      	ldrh	r3, [r3, #4]
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	889b      	ldrh	r3, [r3, #4]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d235      	bcs.n	800c128 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d020      	beq.n	800c10a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ca:	889b      	ldrh	r3, [r3, #4]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	88db      	ldrh	r3, [r3, #6]
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d307      	bcc.n	800c0e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	889b      	ldrh	r3, [r3, #4]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d902      	bls.n	800c0ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ec:	e0de      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	88db      	ldrh	r3, [r3, #6]
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fc:	889b      	ldrh	r3, [r3, #4]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	429a      	cmp	r2, r3
 800c102:	d03d      	beq.n	800c180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c108:	e03a      	b.n	800c180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10c:	88db      	ldrh	r3, [r3, #6]
 800c10e:	b29a      	uxth	r2, r3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	889b      	ldrh	r3, [r3, #4]
 800c114:	b29b      	uxth	r3, r3
 800c116:	429a      	cmp	r2, r3
 800c118:	d902      	bls.n	800c120 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c11a:	f04f 33ff 	mov.w	r3, #4294967295
 800c11e:	e0c5      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	605a      	str	r2, [r3, #4]
      break;
 800c126:	e02b      	b.n	800c180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12a:	889b      	ldrh	r3, [r3, #4]
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	889b      	ldrh	r3, [r3, #4]
 800c132:	b29b      	uxth	r3, r3
 800c134:	429a      	cmp	r2, r3
 800c136:	d102      	bne.n	800c13e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c138:	f04f 33ff 	mov.w	r3, #4294967295
 800c13c:	e0b6      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c140:	889b      	ldrh	r3, [r3, #4]
 800c142:	b29a      	uxth	r2, r3
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	88db      	ldrh	r3, [r3, #6]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d202      	bcs.n	800c154 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c14e:	f04f 33ff 	mov.w	r3, #4294967295
 800c152:	e0ab      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	88db      	ldrh	r3, [r3, #6]
 800c15e:	b29a      	uxth	r2, r3
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	889b      	ldrh	r3, [r3, #4]
 800c164:	b29b      	uxth	r3, r3
 800c166:	429a      	cmp	r2, r3
 800c168:	d001      	beq.n	800c16e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d193      	bne.n	800c0a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c17e:	e000      	b.n	800c182 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c180:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	2b00      	cmp	r3, #0
 800c186:	d12d      	bne.n	800c1e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d01c      	beq.n	800c1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c190:	88db      	ldrh	r3, [r3, #6]
 800c192:	b29a      	uxth	r2, r3
 800c194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c196:	889b      	ldrh	r3, [r3, #4]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d906      	bls.n	800c1ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c19e:	4b45      	ldr	r3, [pc, #276]	@ (800c2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c1a0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800c1a4:	4944      	ldr	r1, [pc, #272]	@ (800c2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c1a6:	4845      	ldr	r0, [pc, #276]	@ (800c2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c1a8:	f009 fb00 	bl	80157ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b4:	88db      	ldrh	r3, [r3, #6]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ba:	889b      	ldrh	r3, [r3, #4]
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d010      	beq.n	800c1e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	623b      	str	r3, [r7, #32]
 800c1c6:	e00d      	b.n	800c1e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c1d0:	4b38      	ldr	r3, [pc, #224]	@ (800c2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c1d2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800c1d6:	493a      	ldr	r1, [pc, #232]	@ (800c2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c1d8:	4838      	ldr	r0, [pc, #224]	@ (800c2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c1da:	f009 fae7 	bl	80157ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d105      	bne.n	800c1f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	7f9b      	ldrb	r3, [r3, #30]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d059      	beq.n	800c2aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d04f      	beq.n	800c29c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	889b      	ldrh	r3, [r3, #4]
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	623b      	str	r3, [r7, #32]
 800c216:	e041      	b.n	800c29c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c222:	e012      	b.n	800c24a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	88db      	ldrh	r3, [r3, #6]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c232:	889b      	ldrh	r3, [r3, #4]
 800c234:	b29b      	uxth	r3, r3
 800c236:	429a      	cmp	r2, r3
 800c238:	d002      	beq.n	800c240 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	623b      	str	r3, [r7, #32]
            break;
 800c23e:	e007      	b.n	800c250 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c242:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800c244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e9      	bne.n	800c224 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d022      	beq.n	800c29c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c25e:	4b15      	ldr	r3, [pc, #84]	@ (800c2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c260:	f240 12df 	movw	r2, #479	@ 0x1df
 800c264:	4917      	ldr	r1, [pc, #92]	@ (800c2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c266:	4815      	ldr	r0, [pc, #84]	@ (800c2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c268:	f009 faa0 	bl	80157ac <iprintf>
          LWIP_ASSERT("sanity check",
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c274:	429a      	cmp	r2, r3
 800c276:	d106      	bne.n	800c286 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c27a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c27e:	4911      	ldr	r1, [pc, #68]	@ (800c2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c280:	480e      	ldr	r0, [pc, #56]	@ (800c2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c282:	f009 fa93 	bl	80157ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d006      	beq.n	800c29c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c28e:	4b09      	ldr	r3, [pc, #36]	@ (800c2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c290:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800c294:	490c      	ldr	r1, [pc, #48]	@ (800c2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c296:	4809      	ldr	r0, [pc, #36]	@ (800c2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c298:	f009 fa88 	bl	80157ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bf14      	ite	ne
 800c2a2:	2301      	movne	r3, #1
 800c2a4:	2300      	moveq	r3, #0
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	e000      	b.n	800c2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3730      	adds	r7, #48	@ 0x30
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	08016e4c 	.word	0x08016e4c
 800c2b8:	08016f68 	.word	0x08016f68
 800c2bc:	08016ecc 	.word	0x08016ecc
 800c2c0:	08016f88 	.word	0x08016f88
 800c2c4:	08016fc0 	.word	0x08016fc0
 800c2c8:	08016fd0 	.word	0x08016fd0

0800c2cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08e      	sub	sp, #56	@ 0x38
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	f003 030f 	and.w	r3, r3, #15
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b14      	cmp	r3, #20
 800c2ea:	f040 8171 	bne.w	800c5d0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f0:	88db      	ldrh	r3, [r3, #6]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd ff29 	bl	800a14c <lwip_htons>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c300:	b29b      	uxth	r3, r3
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	885b      	ldrh	r3, [r3, #2]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7fd ff1d 	bl	800a14c <lwip_htons>
 800c312:	4603      	mov	r3, r0
 800c314:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	f003 030f 	and.w	r3, r3, #15
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800c326:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c32e:	429a      	cmp	r2, r3
 800c330:	f0c0 8150 	bcc.w	800c5d4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c338:	b29b      	uxth	r3, r3
 800c33a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 ff2d 	bl	800e1a0 <pbuf_clen>
 800c346:	4603      	mov	r3, r0
 800c348:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c34a:	4b8c      	ldr	r3, [pc, #560]	@ (800c57c <ip4_reass+0x2b0>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	8c3b      	ldrh	r3, [r7, #32]
 800c352:	4413      	add	r3, r2
 800c354:	2b0a      	cmp	r3, #10
 800c356:	dd10      	ble.n	800c37a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c358:	8c3b      	ldrh	r3, [r7, #32]
 800c35a:	4619      	mov	r1, r3
 800c35c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c35e:	f7ff fd81 	bl	800be64 <ip_reass_remove_oldest_datagram>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 8137 	beq.w	800c5d8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c36a:	4b84      	ldr	r3, [pc, #528]	@ (800c57c <ip4_reass+0x2b0>)
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	8c3b      	ldrh	r3, [r7, #32]
 800c372:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c374:	2b0a      	cmp	r3, #10
 800c376:	f300 812f 	bgt.w	800c5d8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c37a:	4b81      	ldr	r3, [pc, #516]	@ (800c580 <ip4_reass+0x2b4>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c380:	e015      	b.n	800c3ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	695a      	ldr	r2, [r3, #20]
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d10c      	bne.n	800c3a8 <ip4_reass+0xdc>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	691b      	ldr	r3, [r3, #16]
 800c396:	429a      	cmp	r2, r3
 800c398:	d106      	bne.n	800c3a8 <ip4_reass+0xdc>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39c:	899a      	ldrh	r2, [r3, #12]
 800c39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a0:	889b      	ldrh	r3, [r3, #4]
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d006      	beq.n	800c3b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e6      	bne.n	800c382 <ip4_reass+0xb6>
 800c3b4:	e000      	b.n	800c3b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c3b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d109      	bne.n	800c3d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c3be:	8c3b      	ldrh	r3, [r7, #32]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3c4:	f7ff fdb0 	bl	800bf28 <ip_reass_enqueue_new_datagram>
 800c3c8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11c      	bne.n	800c40a <ip4_reass+0x13e>
      goto nullreturn;
 800c3d0:	e105      	b.n	800c5de <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d4:	88db      	ldrh	r3, [r3, #6]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd feb7 	bl	800a14c <lwip_htons>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d110      	bne.n	800c40a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ea:	89db      	ldrh	r3, [r3, #14]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fd fead 	bl	800a14c <lwip_htons>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d006      	beq.n	800c40a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fe:	3308      	adds	r3, #8
 800c400:	2214      	movs	r2, #20
 800c402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c404:	4618      	mov	r0, r3
 800c406:	f009 fb02 	bl	8015a0e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40c:	88db      	ldrh	r3, [r3, #6]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	f003 0320 	and.w	r3, r3, #32
 800c414:	2b00      	cmp	r3, #0
 800c416:	bf0c      	ite	eq
 800c418:	2301      	moveq	r3, #1
 800c41a:	2300      	movne	r3, #0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00e      	beq.n	800c444 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c426:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c42a:	4413      	add	r3, r2
 800c42c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c42e:	8b7a      	ldrh	r2, [r7, #26]
 800c430:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c432:	429a      	cmp	r2, r3
 800c434:	f0c0 80a0 	bcc.w	800c578 <ip4_reass+0x2ac>
 800c438:	8b7b      	ldrh	r3, [r7, #26]
 800c43a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c43e:	4293      	cmp	r3, r2
 800c440:	f200 809a 	bhi.w	800c578 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c444:	69fa      	ldr	r2, [r7, #28]
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c44a:	f7ff fdd5 	bl	800bff8 <ip_reass_chain_frag_into_datagram_and_validate>
 800c44e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	f000 809b 	beq.w	800c590 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c45a:	4b48      	ldr	r3, [pc, #288]	@ (800c57c <ip4_reass+0x2b0>)
 800c45c:	881a      	ldrh	r2, [r3, #0]
 800c45e:	8c3b      	ldrh	r3, [r7, #32]
 800c460:	4413      	add	r3, r2
 800c462:	b29a      	uxth	r2, r3
 800c464:	4b45      	ldr	r3, [pc, #276]	@ (800c57c <ip4_reass+0x2b0>)
 800c466:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00d      	beq.n	800c48a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c46e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c472:	4413      	add	r3, r2
 800c474:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	8a7a      	ldrh	r2, [r7, #18]
 800c47a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47e:	7f9b      	ldrb	r3, [r3, #30]
 800c480:	f043 0301 	orr.w	r3, r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d171      	bne.n	800c574 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c492:	8b9b      	ldrh	r3, [r3, #28]
 800c494:	3314      	adds	r3, #20
 800c496:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	2214      	movs	r2, #20
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b4:	f009 faab 	bl	8015a0e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c4b8:	8a3b      	ldrh	r3, [r7, #16]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd fe46 	bl	800a14c <lwip_htons>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	719a      	strb	r2, [r3, #6]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	729a      	strb	r2, [r3, #10]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c4e2:	e00d      	b.n	800c500 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c4ea:	2114      	movs	r1, #20
 800c4ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c4ee:	f001 fd43 	bl	800df78 <pbuf_remove_header>
      pbuf_cat(p, r);
 800c4f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 fe93 	bl	800e220 <pbuf_cat>
      r = iprh->next_pbuf;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1ee      	bne.n	800c4e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c506:	4b1e      	ldr	r3, [pc, #120]	@ (800c580 <ip4_reass+0x2b4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d102      	bne.n	800c516 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c510:	2300      	movs	r3, #0
 800c512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c514:	e010      	b.n	800c538 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c516:	4b1a      	ldr	r3, [pc, #104]	@ (800c580 <ip4_reass+0x2b4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c51c:	e007      	b.n	800c52e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c524:	429a      	cmp	r2, r3
 800c526:	d006      	beq.n	800c536 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1f4      	bne.n	800c51e <ip4_reass+0x252>
 800c534:	e000      	b.n	800c538 <ip4_reass+0x26c>
          break;
 800c536:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c53a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c53c:	f7ff fd2e 	bl	800bf9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fe2d 	bl	800e1a0 <pbuf_clen>
 800c546:	4603      	mov	r3, r0
 800c548:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c54a:	4b0c      	ldr	r3, [pc, #48]	@ (800c57c <ip4_reass+0x2b0>)
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	8c3a      	ldrh	r2, [r7, #32]
 800c550:	429a      	cmp	r2, r3
 800c552:	d906      	bls.n	800c562 <ip4_reass+0x296>
 800c554:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <ip4_reass+0x2b8>)
 800c556:	f240 229b 	movw	r2, #667	@ 0x29b
 800c55a:	490b      	ldr	r1, [pc, #44]	@ (800c588 <ip4_reass+0x2bc>)
 800c55c:	480b      	ldr	r0, [pc, #44]	@ (800c58c <ip4_reass+0x2c0>)
 800c55e:	f009 f925 	bl	80157ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c562:	4b06      	ldr	r3, [pc, #24]	@ (800c57c <ip4_reass+0x2b0>)
 800c564:	881a      	ldrh	r2, [r3, #0]
 800c566:	8c3b      	ldrh	r3, [r7, #32]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	4b03      	ldr	r3, [pc, #12]	@ (800c57c <ip4_reass+0x2b0>)
 800c56e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	e038      	b.n	800c5e6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	e036      	b.n	800c5e6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800c578:	bf00      	nop
 800c57a:	e00a      	b.n	800c592 <ip4_reass+0x2c6>
 800c57c:	24009b94 	.word	0x24009b94
 800c580:	24009b90 	.word	0x24009b90
 800c584:	08016e4c 	.word	0x08016e4c
 800c588:	08016ff4 	.word	0x08016ff4
 800c58c:	08016ecc 	.word	0x08016ecc
    goto nullreturn_ipr;
 800c590:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <ip4_reass+0x2da>
 800c598:	4b15      	ldr	r3, [pc, #84]	@ (800c5f0 <ip4_reass+0x324>)
 800c59a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800c59e:	4915      	ldr	r1, [pc, #84]	@ (800c5f4 <ip4_reass+0x328>)
 800c5a0:	4815      	ldr	r0, [pc, #84]	@ (800c5f8 <ip4_reass+0x32c>)
 800c5a2:	f009 f903 	bl	80157ac <iprintf>
  if (ipr->p == NULL) {
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d116      	bne.n	800c5dc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c5ae:	4b13      	ldr	r3, [pc, #76]	@ (800c5fc <ip4_reass+0x330>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d006      	beq.n	800c5c6 <ip4_reass+0x2fa>
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <ip4_reass+0x324>)
 800c5ba:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c5be:	4910      	ldr	r1, [pc, #64]	@ (800c600 <ip4_reass+0x334>)
 800c5c0:	480d      	ldr	r0, [pc, #52]	@ (800c5f8 <ip4_reass+0x32c>)
 800c5c2:	f009 f8f3 	bl	80157ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ca:	f7ff fce7 	bl	800bf9c <ip_reass_dequeue_datagram>
 800c5ce:	e006      	b.n	800c5de <ip4_reass+0x312>
    goto nullreturn;
 800c5d0:	bf00      	nop
 800c5d2:	e004      	b.n	800c5de <ip4_reass+0x312>
    goto nullreturn;
 800c5d4:	bf00      	nop
 800c5d6:	e002      	b.n	800c5de <ip4_reass+0x312>
      goto nullreturn;
 800c5d8:	bf00      	nop
 800c5da:	e000      	b.n	800c5de <ip4_reass+0x312>
  }

nullreturn:
 800c5dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 fd50 	bl	800e084 <pbuf_free>
  return NULL;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3738      	adds	r7, #56	@ 0x38
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08016e4c 	.word	0x08016e4c
 800c5f4:	08017010 	.word	0x08017010
 800c5f8:	08016ecc 	.word	0x08016ecc
 800c5fc:	24009b90 	.word	0x24009b90
 800c600:	0801701c 	.word	0x0801701c

0800c604 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c608:	2005      	movs	r0, #5
 800c60a:	f000 fe15 	bl	800d238 <memp_malloc>
 800c60e:	4603      	mov	r3, r0
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}

0800c614 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c622:	4b07      	ldr	r3, [pc, #28]	@ (800c640 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c624:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800c628:	4906      	ldr	r1, [pc, #24]	@ (800c644 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c62a:	4807      	ldr	r0, [pc, #28]	@ (800c648 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c62c:	f009 f8be 	bl	80157ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	2005      	movs	r0, #5
 800c634:	f000 fe76 	bl	800d324 <memp_free>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	08016e4c 	.word	0x08016e4c
 800c644:	0801703c 	.word	0x0801703c
 800c648:	08016ecc 	.word	0x08016ecc

0800c64c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <ipfrag_free_pbuf_custom+0x20>
 800c65e:	4b11      	ldr	r3, [pc, #68]	@ (800c6a4 <ipfrag_free_pbuf_custom+0x58>)
 800c660:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800c664:	4910      	ldr	r1, [pc, #64]	@ (800c6a8 <ipfrag_free_pbuf_custom+0x5c>)
 800c666:	4811      	ldr	r0, [pc, #68]	@ (800c6ac <ipfrag_free_pbuf_custom+0x60>)
 800c668:	f009 f8a0 	bl	80157ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d006      	beq.n	800c682 <ipfrag_free_pbuf_custom+0x36>
 800c674:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a4 <ipfrag_free_pbuf_custom+0x58>)
 800c676:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800c67a:	490d      	ldr	r1, [pc, #52]	@ (800c6b0 <ipfrag_free_pbuf_custom+0x64>)
 800c67c:	480b      	ldr	r0, [pc, #44]	@ (800c6ac <ipfrag_free_pbuf_custom+0x60>)
 800c67e:	f009 f895 	bl	80157ac <iprintf>
  if (pcr->original != NULL) {
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d004      	beq.n	800c694 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 fcf8 	bl	800e084 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff ffbd 	bl	800c614 <ip_frag_free_pbuf_custom_ref>
}
 800c69a:	bf00      	nop
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	08016e4c 	.word	0x08016e4c
 800c6a8:	08017048 	.word	0x08017048
 800c6ac:	08016ecc 	.word	0x08016ecc
 800c6b0:	08017054 	.word	0x08017054

0800c6b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b094      	sub	sp, #80	@ 0x50
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c6ca:	3b14      	subs	r3, #20
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	da00      	bge.n	800c6d2 <ip4_frag+0x1e>
 800c6d0:	3307      	adds	r3, #7
 800c6d2:	10db      	asrs	r3, r3, #3
 800c6d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c6d6:	2314      	movs	r3, #20
 800c6d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	f003 030f 	and.w	r3, r3, #15
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b14      	cmp	r3, #20
 800c6f4:	d002      	beq.n	800c6fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c6f6:	f06f 0305 	mvn.w	r3, #5
 800c6fa:	e110      	b.n	800c91e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	895b      	ldrh	r3, [r3, #10]
 800c700:	2b13      	cmp	r3, #19
 800c702:	d809      	bhi.n	800c718 <ip4_frag+0x64>
 800c704:	4b88      	ldr	r3, [pc, #544]	@ (800c928 <ip4_frag+0x274>)
 800c706:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800c70a:	4988      	ldr	r1, [pc, #544]	@ (800c92c <ip4_frag+0x278>)
 800c70c:	4888      	ldr	r0, [pc, #544]	@ (800c930 <ip4_frag+0x27c>)
 800c70e:	f009 f84d 	bl	80157ac <iprintf>
 800c712:	f06f 0305 	mvn.w	r3, #5
 800c716:	e102      	b.n	800c91e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71a:	88db      	ldrh	r3, [r3, #6]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd fd14 	bl	800a14c <lwip_htons>
 800c724:	4603      	mov	r3, r0
 800c726:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800c728:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c72a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c72e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c732:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c738:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	891b      	ldrh	r3, [r3, #8]
 800c73e:	3b14      	subs	r3, #20
 800c740:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800c744:	e0e1      	b.n	800c90a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c746:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c750:	4293      	cmp	r3, r2
 800c752:	bf28      	it	cs
 800c754:	4613      	movcs	r3, r2
 800c756:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c758:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c75c:	2114      	movs	r1, #20
 800c75e:	200e      	movs	r0, #14
 800c760:	f001 f9ac 	bl	800dabc <pbuf_alloc>
 800c764:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 80d5 	beq.w	800c918 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	895b      	ldrh	r3, [r3, #10]
 800c772:	2b13      	cmp	r3, #19
 800c774:	d806      	bhi.n	800c784 <ip4_frag+0xd0>
 800c776:	4b6c      	ldr	r3, [pc, #432]	@ (800c928 <ip4_frag+0x274>)
 800c778:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800c77c:	496d      	ldr	r1, [pc, #436]	@ (800c934 <ip4_frag+0x280>)
 800c77e:	486c      	ldr	r0, [pc, #432]	@ (800c930 <ip4_frag+0x27c>)
 800c780:	f009 f814 	bl	80157ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2214      	movs	r2, #20
 800c78a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c78c:	4618      	mov	r0, r3
 800c78e:	f009 f93e 	bl	8015a0e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800c798:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c79a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800c79e:	e064      	b.n	800c86a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	895a      	ldrh	r2, [r3, #10]
 800c7a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	895b      	ldrh	r3, [r3, #10]
 800c7ae:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d906      	bls.n	800c7c2 <ip4_frag+0x10e>
 800c7b4:	4b5c      	ldr	r3, [pc, #368]	@ (800c928 <ip4_frag+0x274>)
 800c7b6:	f240 322d 	movw	r2, #813	@ 0x32d
 800c7ba:	495f      	ldr	r1, [pc, #380]	@ (800c938 <ip4_frag+0x284>)
 800c7bc:	485c      	ldr	r0, [pc, #368]	@ (800c930 <ip4_frag+0x27c>)
 800c7be:	f008 fff5 	bl	80157ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c7c2:	8bfa      	ldrh	r2, [r7, #30]
 800c7c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	bf28      	it	cs
 800c7cc:	4613      	movcs	r3, r2
 800c7ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c7d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <ip4_frag+0x132>
        poff = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
        continue;
 800c7e4:	e041      	b.n	800c86a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c7e6:	f7ff ff0d 	bl	800c604 <ip_frag_alloc_pbuf_custom_ref>
 800c7ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d103      	bne.n	800c7fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c7f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7f4:	f001 fc46 	bl	800e084 <pbuf_free>
        goto memerr;
 800c7f8:	e08f      	b.n	800c91a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c7fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c800:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c802:	4413      	add	r3, r2
 800c804:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800c808:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c80c:	9201      	str	r2, [sp, #4]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	4603      	mov	r3, r0
 800c812:	2241      	movs	r2, #65	@ 0x41
 800c814:	2000      	movs	r0, #0
 800c816:	f001 fa7d 	bl	800dd14 <pbuf_alloced_custom>
 800c81a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c822:	69b8      	ldr	r0, [r7, #24]
 800c824:	f7ff fef6 	bl	800c614 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c82a:	f001 fc2b 	bl	800e084 <pbuf_free>
        goto memerr;
 800c82e:	e074      	b.n	800c91a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f001 fccd 	bl	800e1d0 <pbuf_ref>
      pcr->original = p;
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	4a3f      	ldr	r2, [pc, #252]	@ (800c93c <ip4_frag+0x288>)
 800c840:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c842:	6979      	ldr	r1, [r7, #20]
 800c844:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c846:	f001 fceb 	bl	800e220 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c84a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800c84e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800c858:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <ip4_frag+0x1b6>
        poff = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c86a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d196      	bne.n	800c7a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c872:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c874:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c878:	4413      	add	r3, r2
 800c87a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c880:	f1a3 0213 	sub.w	r2, r3, #19
 800c884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c888:	429a      	cmp	r2, r3
 800c88a:	bfcc      	ite	gt
 800c88c:	2301      	movgt	r3, #1
 800c88e:	2300      	movle	r3, #0
 800c890:	b2db      	uxtb	r3, r3
 800c892:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c894:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c89c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <ip4_frag+0x1f6>
 800c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c8aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c8ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c8b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c8b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fd fc49 	bl	800a14c <lwip_htons>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c8c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fd fc3f 	bl	800a14c <lwip_htons>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	2200      	movs	r2, #0
 800c8da:	729a      	strb	r2, [r3, #10]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8e8:	68b8      	ldr	r0, [r7, #8]
 800c8ea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c8ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8ee:	f001 fbc9 	bl	800e084 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c8f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c8f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800c8fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c902:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c904:	4413      	add	r3, r2
 800c906:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800c90a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f47f af19 	bne.w	800c746 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	e002      	b.n	800c91e <ip4_frag+0x26a>
      goto memerr;
 800c918:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c91a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3748      	adds	r7, #72	@ 0x48
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	08016e4c 	.word	0x08016e4c
 800c92c:	08017060 	.word	0x08017060
 800c930:	08016ecc 	.word	0x08016ecc
 800c934:	0801707c 	.word	0x0801707c
 800c938:	0801709c 	.word	0x0801709c
 800c93c:	0800c64d 	.word	0x0800c64d

0800c940 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800c948:	4b04      	ldr	r3, [pc, #16]	@ (800c95c <ptr_to_mem+0x1c>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4413      	add	r3, r2
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	24009b98 	.word	0x24009b98

0800c960 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c968:	4b04      	ldr	r3, [pc, #16]	@ (800c97c <mem_to_ptr+0x1c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	1ad3      	subs	r3, r2, r3
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	24009b98 	.word	0x24009b98

0800c980 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c980:	b590      	push	{r4, r7, lr}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c988:	4b45      	ldr	r3, [pc, #276]	@ (800caa0 <plug_holes+0x120>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d206      	bcs.n	800c9a0 <plug_holes+0x20>
 800c992:	4b44      	ldr	r3, [pc, #272]	@ (800caa4 <plug_holes+0x124>)
 800c994:	f240 12df 	movw	r2, #479	@ 0x1df
 800c998:	4943      	ldr	r1, [pc, #268]	@ (800caa8 <plug_holes+0x128>)
 800c99a:	4844      	ldr	r0, [pc, #272]	@ (800caac <plug_holes+0x12c>)
 800c99c:	f008 ff06 	bl	80157ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c9a0:	4b43      	ldr	r3, [pc, #268]	@ (800cab0 <plug_holes+0x130>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d306      	bcc.n	800c9b8 <plug_holes+0x38>
 800c9aa:	4b3e      	ldr	r3, [pc, #248]	@ (800caa4 <plug_holes+0x124>)
 800c9ac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c9b0:	4940      	ldr	r1, [pc, #256]	@ (800cab4 <plug_holes+0x134>)
 800c9b2:	483e      	ldr	r0, [pc, #248]	@ (800caac <plug_holes+0x12c>)
 800c9b4:	f008 fefa 	bl	80157ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	7a1b      	ldrb	r3, [r3, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <plug_holes+0x4e>
 800c9c0:	4b38      	ldr	r3, [pc, #224]	@ (800caa4 <plug_holes+0x124>)
 800c9c2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c9c6:	493c      	ldr	r1, [pc, #240]	@ (800cab8 <plug_holes+0x138>)
 800c9c8:	4838      	ldr	r0, [pc, #224]	@ (800caac <plug_holes+0x12c>)
 800c9ca:	f008 feef 	bl	80157ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a3a      	ldr	r2, [pc, #232]	@ (800cabc <plug_holes+0x13c>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d906      	bls.n	800c9e6 <plug_holes+0x66>
 800c9d8:	4b32      	ldr	r3, [pc, #200]	@ (800caa4 <plug_holes+0x124>)
 800c9da:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c9de:	4938      	ldr	r1, [pc, #224]	@ (800cac0 <plug_holes+0x140>)
 800c9e0:	4832      	ldr	r0, [pc, #200]	@ (800caac <plug_holes+0x12c>)
 800c9e2:	f008 fee3 	bl	80157ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff ffa8 	bl	800c940 <ptr_to_mem>
 800c9f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d024      	beq.n	800ca44 <plug_holes+0xc4>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	7a1b      	ldrb	r3, [r3, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d120      	bne.n	800ca44 <plug_holes+0xc4>
 800ca02:	4b2b      	ldr	r3, [pc, #172]	@ (800cab0 <plug_holes+0x130>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d01b      	beq.n	800ca44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ca0c:	4b2d      	ldr	r3, [pc, #180]	@ (800cac4 <plug_holes+0x144>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d102      	bne.n	800ca1c <plug_holes+0x9c>
      lfree = mem;
 800ca16:	4a2b      	ldr	r2, [pc, #172]	@ (800cac4 <plug_holes+0x144>)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a24      	ldr	r2, [pc, #144]	@ (800cabc <plug_holes+0x13c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d00a      	beq.n	800ca44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff ff84 	bl	800c940 <ptr_to_mem>
 800ca38:	4604      	mov	r4, r0
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff ff90 	bl	800c960 <mem_to_ptr>
 800ca40:	4603      	mov	r3, r0
 800ca42:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff ff79 	bl	800c940 <ptr_to_mem>
 800ca4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d01f      	beq.n	800ca98 <plug_holes+0x118>
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	7a1b      	ldrb	r3, [r3, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d11b      	bne.n	800ca98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ca60:	4b18      	ldr	r3, [pc, #96]	@ (800cac4 <plug_holes+0x144>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d102      	bne.n	800ca70 <plug_holes+0xf0>
      lfree = pmem;
 800ca6a:	4a16      	ldr	r2, [pc, #88]	@ (800cac4 <plug_holes+0x144>)
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a0f      	ldr	r2, [pc, #60]	@ (800cabc <plug_holes+0x13c>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d00a      	beq.n	800ca98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff ff5a 	bl	800c940 <ptr_to_mem>
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f7ff ff66 	bl	800c960 <mem_to_ptr>
 800ca94:	4603      	mov	r3, r0
 800ca96:	6063      	str	r3, [r4, #4]
    }
  }
}
 800ca98:	bf00      	nop
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd90      	pop	{r4, r7, pc}
 800caa0:	24009b98 	.word	0x24009b98
 800caa4:	080170ac 	.word	0x080170ac
 800caa8:	08017114 	.word	0x08017114
 800caac:	0801712c 	.word	0x0801712c
 800cab0:	24009b9c 	.word	0x24009b9c
 800cab4:	08017154 	.word	0x08017154
 800cab8:	08017170 	.word	0x08017170
 800cabc:	0001ffe8 	.word	0x0001ffe8
 800cac0:	0801718c 	.word	0x0801718c
 800cac4:	24009ba4 	.word	0x24009ba4

0800cac8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cace:	4b1b      	ldr	r3, [pc, #108]	@ (800cb3c <mem_init+0x74>)
 800cad0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb40 <mem_init+0x78>)
 800cad2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cad4:	4b19      	ldr	r3, [pc, #100]	@ (800cb3c <mem_init+0x74>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a19      	ldr	r2, [pc, #100]	@ (800cb44 <mem_init+0x7c>)
 800cade:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800caec:	4815      	ldr	r0, [pc, #84]	@ (800cb44 <mem_init+0x7c>)
 800caee:	f7ff ff27 	bl	800c940 <ptr_to_mem>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4a14      	ldr	r2, [pc, #80]	@ (800cb48 <mem_init+0x80>)
 800caf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800caf8:	4b13      	ldr	r3, [pc, #76]	@ (800cb48 <mem_init+0x80>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2201      	movs	r2, #1
 800cafe:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cb00:	4b11      	ldr	r3, [pc, #68]	@ (800cb48 <mem_init+0x80>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a0f      	ldr	r2, [pc, #60]	@ (800cb44 <mem_init+0x7c>)
 800cb06:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cb08:	4b0f      	ldr	r3, [pc, #60]	@ (800cb48 <mem_init+0x80>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	@ (800cb44 <mem_init+0x7c>)
 800cb0e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cb10:	4b0a      	ldr	r3, [pc, #40]	@ (800cb3c <mem_init+0x74>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a0d      	ldr	r2, [pc, #52]	@ (800cb4c <mem_init+0x84>)
 800cb16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cb18:	480d      	ldr	r0, [pc, #52]	@ (800cb50 <mem_init+0x88>)
 800cb1a:	f001 fe87 	bl	800e82c <sys_mutex_new>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d006      	beq.n	800cb32 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cb24:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <mem_init+0x8c>)
 800cb26:	f240 221f 	movw	r2, #543	@ 0x21f
 800cb2a:	490b      	ldr	r1, [pc, #44]	@ (800cb58 <mem_init+0x90>)
 800cb2c:	480b      	ldr	r0, [pc, #44]	@ (800cb5c <mem_init+0x94>)
 800cb2e:	f008 fe3d 	bl	80157ac <iprintf>
  }
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	24009b98 	.word	0x24009b98
 800cb40:	30020000 	.word	0x30020000
 800cb44:	0001ffe8 	.word	0x0001ffe8
 800cb48:	24009b9c 	.word	0x24009b9c
 800cb4c:	24009ba4 	.word	0x24009ba4
 800cb50:	24009ba0 	.word	0x24009ba0
 800cb54:	080170ac 	.word	0x080170ac
 800cb58:	080171b8 	.word	0x080171b8
 800cb5c:	0801712c 	.word	0x0801712c

0800cb60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7ff fef9 	bl	800c960 <mem_to_ptr>
 800cb6e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7ff fee3 	bl	800c940 <ptr_to_mem>
 800cb7a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7ff fedd 	bl	800c940 <ptr_to_mem>
 800cb86:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a11      	ldr	r2, [pc, #68]	@ (800cbd4 <mem_link_valid+0x74>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d818      	bhi.n	800cbc4 <mem_link_valid+0x64>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4a0f      	ldr	r2, [pc, #60]	@ (800cbd4 <mem_link_valid+0x74>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d813      	bhi.n	800cbc4 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d004      	beq.n	800cbb0 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d109      	bne.n	800cbc4 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cbb0:	4b09      	ldr	r3, [pc, #36]	@ (800cbd8 <mem_link_valid+0x78>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d006      	beq.n	800cbc8 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d001      	beq.n	800cbc8 <mem_link_valid+0x68>
    return 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e000      	b.n	800cbca <mem_link_valid+0x6a>
  }
  return 1;
 800cbc8:	2301      	movs	r3, #1
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	0001ffe8 	.word	0x0001ffe8
 800cbd8:	24009b9c 	.word	0x24009b9c

0800cbdc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b088      	sub	sp, #32
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d070      	beq.n	800cccc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00d      	beq.n	800cc10 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cbf4:	4b37      	ldr	r3, [pc, #220]	@ (800ccd4 <mem_free+0xf8>)
 800cbf6:	f240 2273 	movw	r2, #627	@ 0x273
 800cbfa:	4937      	ldr	r1, [pc, #220]	@ (800ccd8 <mem_free+0xfc>)
 800cbfc:	4837      	ldr	r0, [pc, #220]	@ (800ccdc <mem_free+0x100>)
 800cbfe:	f008 fdd5 	bl	80157ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc02:	f001 fe65 	bl	800e8d0 <sys_arch_protect>
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f001 fe6f 	bl	800e8ec <sys_arch_unprotect>
    return;
 800cc0e:	e05e      	b.n	800ccce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3b0c      	subs	r3, #12
 800cc14:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cc16:	4b32      	ldr	r3, [pc, #200]	@ (800cce0 <mem_free+0x104>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69fa      	ldr	r2, [r7, #28]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d306      	bcc.n	800cc2e <mem_free+0x52>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f103 020c 	add.w	r2, r3, #12
 800cc26:	4b2f      	ldr	r3, [pc, #188]	@ (800cce4 <mem_free+0x108>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d90d      	bls.n	800cc4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cc2e:	4b29      	ldr	r3, [pc, #164]	@ (800ccd4 <mem_free+0xf8>)
 800cc30:	f240 227f 	movw	r2, #639	@ 0x27f
 800cc34:	492c      	ldr	r1, [pc, #176]	@ (800cce8 <mem_free+0x10c>)
 800cc36:	4829      	ldr	r0, [pc, #164]	@ (800ccdc <mem_free+0x100>)
 800cc38:	f008 fdb8 	bl	80157ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc3c:	f001 fe48 	bl	800e8d0 <sys_arch_protect>
 800cc40:	6138      	str	r0, [r7, #16]
 800cc42:	6938      	ldr	r0, [r7, #16]
 800cc44:	f001 fe52 	bl	800e8ec <sys_arch_unprotect>
    return;
 800cc48:	e041      	b.n	800ccce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc4a:	4828      	ldr	r0, [pc, #160]	@ (800ccec <mem_free+0x110>)
 800cc4c:	f001 fe04 	bl	800e858 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	7a1b      	ldrb	r3, [r3, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d110      	bne.n	800cc7a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cc58:	4b1e      	ldr	r3, [pc, #120]	@ (800ccd4 <mem_free+0xf8>)
 800cc5a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cc5e:	4924      	ldr	r1, [pc, #144]	@ (800ccf0 <mem_free+0x114>)
 800cc60:	481e      	ldr	r0, [pc, #120]	@ (800ccdc <mem_free+0x100>)
 800cc62:	f008 fda3 	bl	80157ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cc66:	4821      	ldr	r0, [pc, #132]	@ (800ccec <mem_free+0x110>)
 800cc68:	f001 fe05 	bl	800e876 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc6c:	f001 fe30 	bl	800e8d0 <sys_arch_protect>
 800cc70:	6178      	str	r0, [r7, #20]
 800cc72:	6978      	ldr	r0, [r7, #20]
 800cc74:	f001 fe3a 	bl	800e8ec <sys_arch_unprotect>
    return;
 800cc78:	e029      	b.n	800ccce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cc7a:	69f8      	ldr	r0, [r7, #28]
 800cc7c:	f7ff ff70 	bl	800cb60 <mem_link_valid>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d110      	bne.n	800cca8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cc86:	4b13      	ldr	r3, [pc, #76]	@ (800ccd4 <mem_free+0xf8>)
 800cc88:	f240 2295 	movw	r2, #661	@ 0x295
 800cc8c:	4919      	ldr	r1, [pc, #100]	@ (800ccf4 <mem_free+0x118>)
 800cc8e:	4813      	ldr	r0, [pc, #76]	@ (800ccdc <mem_free+0x100>)
 800cc90:	f008 fd8c 	bl	80157ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cc94:	4815      	ldr	r0, [pc, #84]	@ (800ccec <mem_free+0x110>)
 800cc96:	f001 fdee 	bl	800e876 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc9a:	f001 fe19 	bl	800e8d0 <sys_arch_protect>
 800cc9e:	61b8      	str	r0, [r7, #24]
 800cca0:	69b8      	ldr	r0, [r7, #24]
 800cca2:	f001 fe23 	bl	800e8ec <sys_arch_unprotect>
    return;
 800cca6:	e012      	b.n	800ccce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800ccae:	4b12      	ldr	r3, [pc, #72]	@ (800ccf8 <mem_free+0x11c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	69fa      	ldr	r2, [r7, #28]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d202      	bcs.n	800ccbe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ccb8:	4a0f      	ldr	r2, [pc, #60]	@ (800ccf8 <mem_free+0x11c>)
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ccbe:	69f8      	ldr	r0, [r7, #28]
 800ccc0:	f7ff fe5e 	bl	800c980 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ccc4:	4809      	ldr	r0, [pc, #36]	@ (800ccec <mem_free+0x110>)
 800ccc6:	f001 fdd6 	bl	800e876 <sys_mutex_unlock>
 800ccca:	e000      	b.n	800ccce <mem_free+0xf2>
    return;
 800cccc:	bf00      	nop
}
 800ccce:	3720      	adds	r7, #32
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	080170ac 	.word	0x080170ac
 800ccd8:	080171d4 	.word	0x080171d4
 800ccdc:	0801712c 	.word	0x0801712c
 800cce0:	24009b98 	.word	0x24009b98
 800cce4:	24009b9c 	.word	0x24009b9c
 800cce8:	080171f8 	.word	0x080171f8
 800ccec:	24009ba0 	.word	0x24009ba0
 800ccf0:	08017214 	.word	0x08017214
 800ccf4:	0801723c 	.word	0x0801723c
 800ccf8:	24009ba4 	.word	0x24009ba4

0800ccfc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08a      	sub	sp, #40	@ 0x28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	3303      	adds	r3, #3
 800cd0a:	f023 0303 	bic.w	r3, r3, #3
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	2b0b      	cmp	r3, #11
 800cd14:	d801      	bhi.n	800cd1a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cd16:	230c      	movs	r3, #12
 800cd18:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1c:	4a6e      	ldr	r2, [pc, #440]	@ (800ced8 <mem_trim+0x1dc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d803      	bhi.n	800cd2a <mem_trim+0x2e>
 800cd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d201      	bcs.n	800cd2e <mem_trim+0x32>
    return NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e0d0      	b.n	800ced0 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cd2e:	4b6b      	ldr	r3, [pc, #428]	@ (800cedc <mem_trim+0x1e0>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d304      	bcc.n	800cd42 <mem_trim+0x46>
 800cd38:	4b69      	ldr	r3, [pc, #420]	@ (800cee0 <mem_trim+0x1e4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d306      	bcc.n	800cd50 <mem_trim+0x54>
 800cd42:	4b68      	ldr	r3, [pc, #416]	@ (800cee4 <mem_trim+0x1e8>)
 800cd44:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cd48:	4967      	ldr	r1, [pc, #412]	@ (800cee8 <mem_trim+0x1ec>)
 800cd4a:	4868      	ldr	r0, [pc, #416]	@ (800ceec <mem_trim+0x1f0>)
 800cd4c:	f008 fd2e 	bl	80157ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cd50:	4b62      	ldr	r3, [pc, #392]	@ (800cedc <mem_trim+0x1e0>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d304      	bcc.n	800cd64 <mem_trim+0x68>
 800cd5a:	4b61      	ldr	r3, [pc, #388]	@ (800cee0 <mem_trim+0x1e4>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d307      	bcc.n	800cd74 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd64:	f001 fdb4 	bl	800e8d0 <sys_arch_protect>
 800cd68:	60b8      	str	r0, [r7, #8]
 800cd6a:	68b8      	ldr	r0, [r7, #8]
 800cd6c:	f001 fdbe 	bl	800e8ec <sys_arch_unprotect>
    return rmem;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	e0ad      	b.n	800ced0 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3b0c      	subs	r3, #12
 800cd78:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cd7a:	6a38      	ldr	r0, [r7, #32]
 800cd7c:	f7ff fdf0 	bl	800c960 <mem_to_ptr>
 800cd80:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	3b0c      	subs	r3, #12
 800cd8c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cd8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d906      	bls.n	800cda4 <mem_trim+0xa8>
 800cd96:	4b53      	ldr	r3, [pc, #332]	@ (800cee4 <mem_trim+0x1e8>)
 800cd98:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800cd9c:	4954      	ldr	r1, [pc, #336]	@ (800cef0 <mem_trim+0x1f4>)
 800cd9e:	4853      	ldr	r0, [pc, #332]	@ (800ceec <mem_trim+0x1f0>)
 800cda0:	f008 fd04 	bl	80157ac <iprintf>
  if (newsize > size) {
 800cda4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d901      	bls.n	800cdb0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	e08f      	b.n	800ced0 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800cdb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d101      	bne.n	800cdbc <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	e089      	b.n	800ced0 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cdbc:	484d      	ldr	r0, [pc, #308]	@ (800cef4 <mem_trim+0x1f8>)
 800cdbe:	f001 fd4b 	bl	800e858 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff fdba 	bl	800c940 <ptr_to_mem>
 800cdcc:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	7a1b      	ldrb	r3, [r3, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d13c      	bne.n	800ce50 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a3f      	ldr	r2, [pc, #252]	@ (800ced8 <mem_trim+0x1dc>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d106      	bne.n	800cdee <mem_trim+0xf2>
 800cde0:	4b40      	ldr	r3, [pc, #256]	@ (800cee4 <mem_trim+0x1e8>)
 800cde2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cde6:	4944      	ldr	r1, [pc, #272]	@ (800cef8 <mem_trim+0x1fc>)
 800cde8:	4840      	ldr	r0, [pc, #256]	@ (800ceec <mem_trim+0x1f0>)
 800cdea:	f008 fcdf 	bl	80157ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cdf4:	69fa      	ldr	r2, [r7, #28]
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	4413      	add	r3, r2
 800cdfa:	330c      	adds	r3, #12
 800cdfc:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800cdfe:	4b3f      	ldr	r3, [pc, #252]	@ (800cefc <mem_trim+0x200>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d105      	bne.n	800ce14 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800ce08:	6938      	ldr	r0, [r7, #16]
 800ce0a:	f7ff fd99 	bl	800c940 <ptr_to_mem>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4a3a      	ldr	r2, [pc, #232]	@ (800cefc <mem_trim+0x200>)
 800ce12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ce14:	6938      	ldr	r0, [r7, #16]
 800ce16:	f7ff fd93 	bl	800c940 <ptr_to_mem>
 800ce1a:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	69fa      	ldr	r2, [r7, #28]
 800ce2c:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a27      	ldr	r2, [pc, #156]	@ (800ced8 <mem_trim+0x1dc>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d044      	beq.n	800cec8 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff fd7c 	bl	800c940 <ptr_to_mem>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	6053      	str	r3, [r2, #4]
 800ce4e:	e03b      	b.n	800cec8 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ce50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce52:	3318      	adds	r3, #24
 800ce54:	69ba      	ldr	r2, [r7, #24]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d336      	bcc.n	800cec8 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce5a:	69fa      	ldr	r2, [r7, #28]
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5e:	4413      	add	r3, r2
 800ce60:	330c      	adds	r3, #12
 800ce62:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a1b      	ldr	r2, [pc, #108]	@ (800ced8 <mem_trim+0x1dc>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d106      	bne.n	800ce7c <mem_trim+0x180>
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cee4 <mem_trim+0x1e8>)
 800ce70:	f240 3216 	movw	r2, #790	@ 0x316
 800ce74:	4920      	ldr	r1, [pc, #128]	@ (800cef8 <mem_trim+0x1fc>)
 800ce76:	481d      	ldr	r0, [pc, #116]	@ (800ceec <mem_trim+0x1f0>)
 800ce78:	f008 fc98 	bl	80157ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ce7c:	6938      	ldr	r0, [r7, #16]
 800ce7e:	f7ff fd5f 	bl	800c940 <ptr_to_mem>
 800ce82:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800ce84:	4b1d      	ldr	r3, [pc, #116]	@ (800cefc <mem_trim+0x200>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d202      	bcs.n	800ce94 <mem_trim+0x198>
      lfree = mem2;
 800ce8e:	4a1b      	ldr	r2, [pc, #108]	@ (800cefc <mem_trim+0x200>)
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2200      	movs	r2, #0
 800ce98:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a09      	ldr	r2, [pc, #36]	@ (800ced8 <mem_trim+0x1dc>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d007      	beq.n	800cec8 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7ff fd3f 	bl	800c940 <ptr_to_mem>
 800cec2:	4602      	mov	r2, r0
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cec8:	480a      	ldr	r0, [pc, #40]	@ (800cef4 <mem_trim+0x1f8>)
 800ceca:	f001 fcd4 	bl	800e876 <sys_mutex_unlock>
  return rmem;
 800cece:	687b      	ldr	r3, [r7, #4]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3728      	adds	r7, #40	@ 0x28
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	0001ffe8 	.word	0x0001ffe8
 800cedc:	24009b98 	.word	0x24009b98
 800cee0:	24009b9c 	.word	0x24009b9c
 800cee4:	080170ac 	.word	0x080170ac
 800cee8:	08017270 	.word	0x08017270
 800ceec:	0801712c 	.word	0x0801712c
 800cef0:	08017288 	.word	0x08017288
 800cef4:	24009ba0 	.word	0x24009ba0
 800cef8:	080172a8 	.word	0x080172a8
 800cefc:	24009ba4 	.word	0x24009ba4

0800cf00 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <mem_malloc+0x12>
    return NULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e0d9      	b.n	800d0c6 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3303      	adds	r3, #3
 800cf16:	f023 0303 	bic.w	r3, r3, #3
 800cf1a:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	2b0b      	cmp	r3, #11
 800cf20:	d801      	bhi.n	800cf26 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cf22:	230c      	movs	r3, #12
 800cf24:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	4a69      	ldr	r2, [pc, #420]	@ (800d0d0 <mem_malloc+0x1d0>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d803      	bhi.n	800cf36 <mem_malloc+0x36>
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d201      	bcs.n	800cf3a <mem_malloc+0x3a>
    return NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e0c5      	b.n	800d0c6 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cf3a:	4866      	ldr	r0, [pc, #408]	@ (800d0d4 <mem_malloc+0x1d4>)
 800cf3c:	f001 fc8c 	bl	800e858 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf40:	4b65      	ldr	r3, [pc, #404]	@ (800d0d8 <mem_malloc+0x1d8>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fd0b 	bl	800c960 <mem_to_ptr>
 800cf4a:	61f8      	str	r0, [r7, #28]
 800cf4c:	e0b0      	b.n	800d0b0 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cf4e:	69f8      	ldr	r0, [r7, #28]
 800cf50:	f7ff fcf6 	bl	800c940 <ptr_to_mem>
 800cf54:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	7a1b      	ldrb	r3, [r3, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f040 80a2 	bne.w	800d0a4 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800cf6a:	69ba      	ldr	r2, [r7, #24]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	f200 8099 	bhi.w	800d0a4 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	f1a3 020c 	sub.w	r2, r3, #12
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	3318      	adds	r3, #24
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d331      	bcc.n	800cfea <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cf86:	69fa      	ldr	r2, [r7, #28]
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	330c      	adds	r3, #12
 800cf8e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4a4f      	ldr	r2, [pc, #316]	@ (800d0d0 <mem_malloc+0x1d0>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d106      	bne.n	800cfa6 <mem_malloc+0xa6>
 800cf98:	4b50      	ldr	r3, [pc, #320]	@ (800d0dc <mem_malloc+0x1dc>)
 800cf9a:	f240 3287 	movw	r2, #903	@ 0x387
 800cf9e:	4950      	ldr	r1, [pc, #320]	@ (800d0e0 <mem_malloc+0x1e0>)
 800cfa0:	4850      	ldr	r0, [pc, #320]	@ (800d0e4 <mem_malloc+0x1e4>)
 800cfa2:	f008 fc03 	bl	80157ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff fcca 	bl	800c940 <ptr_to_mem>
 800cfac:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	69fa      	ldr	r2, [r7, #28]
 800cfc0:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a3f      	ldr	r2, [pc, #252]	@ (800d0d0 <mem_malloc+0x1d0>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d00b      	beq.n	800cff0 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fcaf 	bl	800c940 <ptr_to_mem>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6053      	str	r3, [r2, #4]
 800cfe8:	e002      	b.n	800cff0 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2201      	movs	r2, #1
 800cfee:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cff0:	4b39      	ldr	r3, [pc, #228]	@ (800d0d8 <mem_malloc+0x1d8>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d127      	bne.n	800d04a <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800cffa:	4b37      	ldr	r3, [pc, #220]	@ (800d0d8 <mem_malloc+0x1d8>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d000:	e005      	b.n	800d00e <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fc9a 	bl	800c940 <ptr_to_mem>
 800d00c:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	7a1b      	ldrb	r3, [r3, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d004      	beq.n	800d020 <mem_malloc+0x120>
 800d016:	4b34      	ldr	r3, [pc, #208]	@ (800d0e8 <mem_malloc+0x1e8>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d1f0      	bne.n	800d002 <mem_malloc+0x102>
          }
          lfree = cur;
 800d020:	4a2d      	ldr	r2, [pc, #180]	@ (800d0d8 <mem_malloc+0x1d8>)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d026:	4b2c      	ldr	r3, [pc, #176]	@ (800d0d8 <mem_malloc+0x1d8>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4b2f      	ldr	r3, [pc, #188]	@ (800d0e8 <mem_malloc+0x1e8>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d00b      	beq.n	800d04a <mem_malloc+0x14a>
 800d032:	4b29      	ldr	r3, [pc, #164]	@ (800d0d8 <mem_malloc+0x1d8>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	7a1b      	ldrb	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d006      	beq.n	800d04a <mem_malloc+0x14a>
 800d03c:	4b27      	ldr	r3, [pc, #156]	@ (800d0dc <mem_malloc+0x1dc>)
 800d03e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d042:	492a      	ldr	r1, [pc, #168]	@ (800d0ec <mem_malloc+0x1ec>)
 800d044:	4827      	ldr	r0, [pc, #156]	@ (800d0e4 <mem_malloc+0x1e4>)
 800d046:	f008 fbb1 	bl	80157ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d04a:	4822      	ldr	r0, [pc, #136]	@ (800d0d4 <mem_malloc+0x1d4>)
 800d04c:	f001 fc13 	bl	800e876 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	4413      	add	r3, r2
 800d056:	330c      	adds	r3, #12
 800d058:	4a23      	ldr	r2, [pc, #140]	@ (800d0e8 <mem_malloc+0x1e8>)
 800d05a:	6812      	ldr	r2, [r2, #0]
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d906      	bls.n	800d06e <mem_malloc+0x16e>
 800d060:	4b1e      	ldr	r3, [pc, #120]	@ (800d0dc <mem_malloc+0x1dc>)
 800d062:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d066:	4922      	ldr	r1, [pc, #136]	@ (800d0f0 <mem_malloc+0x1f0>)
 800d068:	481e      	ldr	r0, [pc, #120]	@ (800d0e4 <mem_malloc+0x1e4>)
 800d06a:	f008 fb9f 	bl	80157ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	f003 0303 	and.w	r3, r3, #3
 800d074:	2b00      	cmp	r3, #0
 800d076:	d006      	beq.n	800d086 <mem_malloc+0x186>
 800d078:	4b18      	ldr	r3, [pc, #96]	@ (800d0dc <mem_malloc+0x1dc>)
 800d07a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d07e:	491d      	ldr	r1, [pc, #116]	@ (800d0f4 <mem_malloc+0x1f4>)
 800d080:	4818      	ldr	r0, [pc, #96]	@ (800d0e4 <mem_malloc+0x1e4>)
 800d082:	f008 fb93 	bl	80157ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f003 0303 	and.w	r3, r3, #3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d006      	beq.n	800d09e <mem_malloc+0x19e>
 800d090:	4b12      	ldr	r3, [pc, #72]	@ (800d0dc <mem_malloc+0x1dc>)
 800d092:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d096:	4918      	ldr	r1, [pc, #96]	@ (800d0f8 <mem_malloc+0x1f8>)
 800d098:	4812      	ldr	r0, [pc, #72]	@ (800d0e4 <mem_malloc+0x1e4>)
 800d09a:	f008 fb87 	bl	80157ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	e010      	b.n	800d0c6 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800d0a4:	69f8      	ldr	r0, [r7, #28]
 800d0a6:	f7ff fc4b 	bl	800c940 <ptr_to_mem>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d0b0:	69ba      	ldr	r2, [r7, #24]
 800d0b2:	4b07      	ldr	r3, [pc, #28]	@ (800d0d0 <mem_malloc+0x1d0>)
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	f4ff af48 	bcc.w	800cf4e <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d0be:	4805      	ldr	r0, [pc, #20]	@ (800d0d4 <mem_malloc+0x1d4>)
 800d0c0:	f001 fbd9 	bl	800e876 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	0001ffe8 	.word	0x0001ffe8
 800d0d4:	24009ba0 	.word	0x24009ba0
 800d0d8:	24009ba4 	.word	0x24009ba4
 800d0dc:	080170ac 	.word	0x080170ac
 800d0e0:	080172a8 	.word	0x080172a8
 800d0e4:	0801712c 	.word	0x0801712c
 800d0e8:	24009b9c 	.word	0x24009b9c
 800d0ec:	080172bc 	.word	0x080172bc
 800d0f0:	080172d8 	.word	0x080172d8
 800d0f4:	08017308 	.word	0x08017308
 800d0f8:	08017338 	.word	0x08017338

0800d0fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	3303      	adds	r3, #3
 800d112:	f023 0303 	bic.w	r3, r3, #3
 800d116:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d118:	2300      	movs	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e011      	b.n	800d142 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4413      	add	r3, r2
 800d13a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	461a      	mov	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4293      	cmp	r3, r2
 800d14c:	dbe7      	blt.n	800d11e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d162:	2300      	movs	r3, #0
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	e009      	b.n	800d17c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d168:	88fb      	ldrh	r3, [r7, #6]
 800d16a:	4a08      	ldr	r2, [pc, #32]	@ (800d18c <memp_init+0x30>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff ffc3 	bl	800d0fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d176:	88fb      	ldrh	r3, [r7, #6]
 800d178:	3301      	adds	r3, #1
 800d17a:	80fb      	strh	r3, [r7, #6]
 800d17c:	88fb      	ldrh	r3, [r7, #6]
 800d17e:	2b0c      	cmp	r3, #12
 800d180:	d9f2      	bls.n	800d168 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	08019de0 	.word	0x08019de0

0800d190 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d198:	f001 fb9a 	bl	800e8d0 <sys_arch_protect>
 800d19c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d015      	beq.n	800d1d8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	6812      	ldr	r2, [r2, #0]
 800d1b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	f003 0303 	and.w	r3, r3, #3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d006      	beq.n	800d1ce <do_memp_malloc_pool+0x3e>
 800d1c0:	4b09      	ldr	r3, [pc, #36]	@ (800d1e8 <do_memp_malloc_pool+0x58>)
 800d1c2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d1c6:	4909      	ldr	r1, [pc, #36]	@ (800d1ec <do_memp_malloc_pool+0x5c>)
 800d1c8:	4809      	ldr	r0, [pc, #36]	@ (800d1f0 <do_memp_malloc_pool+0x60>)
 800d1ca:	f008 faef 	bl	80157ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f001 fb8c 	bl	800e8ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	e003      	b.n	800d1e0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f001 fb87 	bl	800e8ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	0801735c 	.word	0x0801735c
 800d1ec:	080173c8 	.word	0x080173c8
 800d1f0:	080173ec 	.word	0x080173ec

0800d1f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <memp_malloc_pool+0x1c>
 800d202:	4b0a      	ldr	r3, [pc, #40]	@ (800d22c <memp_malloc_pool+0x38>)
 800d204:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d208:	4909      	ldr	r1, [pc, #36]	@ (800d230 <memp_malloc_pool+0x3c>)
 800d20a:	480a      	ldr	r0, [pc, #40]	@ (800d234 <memp_malloc_pool+0x40>)
 800d20c:	f008 face 	bl	80157ac <iprintf>
  if (desc == NULL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <memp_malloc_pool+0x26>
    return NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	e003      	b.n	800d222 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff ffb8 	bl	800d190 <do_memp_malloc_pool>
 800d220:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	0801735c 	.word	0x0801735c
 800d230:	08017414 	.word	0x08017414
 800d234:	080173ec 	.word	0x080173ec

0800d238 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	4603      	mov	r3, r0
 800d240:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	2b0c      	cmp	r3, #12
 800d246:	d908      	bls.n	800d25a <memp_malloc+0x22>
 800d248:	4b0a      	ldr	r3, [pc, #40]	@ (800d274 <memp_malloc+0x3c>)
 800d24a:	f240 1257 	movw	r2, #343	@ 0x157
 800d24e:	490a      	ldr	r1, [pc, #40]	@ (800d278 <memp_malloc+0x40>)
 800d250:	480a      	ldr	r0, [pc, #40]	@ (800d27c <memp_malloc+0x44>)
 800d252:	f008 faab 	bl	80157ac <iprintf>
 800d256:	2300      	movs	r3, #0
 800d258:	e008      	b.n	800d26c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	4a08      	ldr	r2, [pc, #32]	@ (800d280 <memp_malloc+0x48>)
 800d25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff ff94 	bl	800d190 <do_memp_malloc_pool>
 800d268:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d26a:	68fb      	ldr	r3, [r7, #12]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	0801735c 	.word	0x0801735c
 800d278:	08017428 	.word	0x08017428
 800d27c:	080173ec 	.word	0x080173ec
 800d280:	08019de0 	.word	0x08019de0

0800d284 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	f003 0303 	and.w	r3, r3, #3
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <do_memp_free_pool+0x22>
 800d298:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <do_memp_free_pool+0x4c>)
 800d29a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d29e:	490d      	ldr	r1, [pc, #52]	@ (800d2d4 <do_memp_free_pool+0x50>)
 800d2a0:	480d      	ldr	r0, [pc, #52]	@ (800d2d8 <do_memp_free_pool+0x54>)
 800d2a2:	f008 fa83 	bl	80157ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d2aa:	f001 fb11 	bl	800e8d0 <sys_arch_protect>
 800d2ae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f001 fb12 	bl	800e8ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d2c8:	bf00      	nop
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	0801735c 	.word	0x0801735c
 800d2d4:	08017448 	.word	0x08017448
 800d2d8:	080173ec 	.word	0x080173ec

0800d2dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <memp_free_pool+0x1e>
 800d2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d318 <memp_free_pool+0x3c>)
 800d2ee:	f240 1295 	movw	r2, #405	@ 0x195
 800d2f2:	490a      	ldr	r1, [pc, #40]	@ (800d31c <memp_free_pool+0x40>)
 800d2f4:	480a      	ldr	r0, [pc, #40]	@ (800d320 <memp_free_pool+0x44>)
 800d2f6:	f008 fa59 	bl	80157ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d007      	beq.n	800d310 <memp_free_pool+0x34>
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff ffbb 	bl	800d284 <do_memp_free_pool>
 800d30e:	e000      	b.n	800d312 <memp_free_pool+0x36>
    return;
 800d310:	bf00      	nop
}
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0801735c 	.word	0x0801735c
 800d31c:	08017414 	.word	0x08017414
 800d320:	080173ec 	.word	0x080173ec

0800d324 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	6039      	str	r1, [r7, #0]
 800d32e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	2b0c      	cmp	r3, #12
 800d334:	d907      	bls.n	800d346 <memp_free+0x22>
 800d336:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <memp_free+0x44>)
 800d338:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d33c:	490b      	ldr	r1, [pc, #44]	@ (800d36c <memp_free+0x48>)
 800d33e:	480c      	ldr	r0, [pc, #48]	@ (800d370 <memp_free+0x4c>)
 800d340:	f008 fa34 	bl	80157ac <iprintf>
 800d344:	e00c      	b.n	800d360 <memp_free+0x3c>

  if (mem == NULL) {
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d008      	beq.n	800d35e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	4a09      	ldr	r2, [pc, #36]	@ (800d374 <memp_free+0x50>)
 800d350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff ff94 	bl	800d284 <do_memp_free_pool>
 800d35c:	e000      	b.n	800d360 <memp_free+0x3c>
    return;
 800d35e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	0801735c 	.word	0x0801735c
 800d36c:	08017468 	.word	0x08017468
 800d370:	080173ec 	.word	0x080173ec
 800d374:	08019de0 	.word	0x08019de0

0800d378 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d378:	b480      	push	{r7}
 800d37a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d37c:	bf00      	nop
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800d396:	f7f9 f801 	bl	800639c <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d108      	bne.n	800d3b2 <netif_add+0x2a>
 800d3a0:	4b57      	ldr	r3, [pc, #348]	@ (800d500 <netif_add+0x178>)
 800d3a2:	f240 1227 	movw	r2, #295	@ 0x127
 800d3a6:	4957      	ldr	r1, [pc, #348]	@ (800d504 <netif_add+0x17c>)
 800d3a8:	4857      	ldr	r0, [pc, #348]	@ (800d508 <netif_add+0x180>)
 800d3aa:	f008 f9ff 	bl	80157ac <iprintf>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e0a2      	b.n	800d4f8 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d108      	bne.n	800d3ca <netif_add+0x42>
 800d3b8:	4b51      	ldr	r3, [pc, #324]	@ (800d500 <netif_add+0x178>)
 800d3ba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d3be:	4953      	ldr	r1, [pc, #332]	@ (800d50c <netif_add+0x184>)
 800d3c0:	4851      	ldr	r0, [pc, #324]	@ (800d508 <netif_add+0x180>)
 800d3c2:	f008 f9f3 	bl	80157ac <iprintf>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e096      	b.n	800d4f8 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d3d0:	4b4f      	ldr	r3, [pc, #316]	@ (800d510 <netif_add+0x188>)
 800d3d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d3da:	4b4d      	ldr	r3, [pc, #308]	@ (800d510 <netif_add+0x188>)
 800d3dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d3e4:	4b4a      	ldr	r3, [pc, #296]	@ (800d510 <netif_add+0x188>)
 800d3e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4a45      	ldr	r2, [pc, #276]	@ (800d514 <netif_add+0x18c>)
 800d3fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6a3a      	ldr	r2, [r7, #32]
 800d418:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d41a:	4b3f      	ldr	r3, [pc, #252]	@ (800d518 <netif_add+0x190>)
 800d41c:	781a      	ldrb	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d428:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 f913 	bl	800d65c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	4798      	blx	r3
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <netif_add+0xbe>
    return NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	e058      	b.n	800d4f8 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d44c:	2bff      	cmp	r3, #255	@ 0xff
 800d44e:	d103      	bne.n	800d458 <netif_add+0xd0>
        netif->num = 0;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d45c:	4b2f      	ldr	r3, [pc, #188]	@ (800d51c <netif_add+0x194>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	617b      	str	r3, [r7, #20]
 800d462:	e02b      	b.n	800d4bc <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d464:	697a      	ldr	r2, [r7, #20]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d106      	bne.n	800d47a <netif_add+0xf2>
 800d46c:	4b24      	ldr	r3, [pc, #144]	@ (800d500 <netif_add+0x178>)
 800d46e:	f240 128b 	movw	r2, #395	@ 0x18b
 800d472:	492b      	ldr	r1, [pc, #172]	@ (800d520 <netif_add+0x198>)
 800d474:	4824      	ldr	r0, [pc, #144]	@ (800d508 <netif_add+0x180>)
 800d476:	f008 f999 	bl	80157ac <iprintf>
        num_netifs++;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	3301      	adds	r3, #1
 800d47e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	2bff      	cmp	r3, #255	@ 0xff
 800d484:	dd06      	ble.n	800d494 <netif_add+0x10c>
 800d486:	4b1e      	ldr	r3, [pc, #120]	@ (800d500 <netif_add+0x178>)
 800d488:	f240 128d 	movw	r2, #397	@ 0x18d
 800d48c:	4925      	ldr	r1, [pc, #148]	@ (800d524 <netif_add+0x19c>)
 800d48e:	481e      	ldr	r0, [pc, #120]	@ (800d508 <netif_add+0x180>)
 800d490:	f008 f98c 	bl	80157ac <iprintf>
        if (netif2->num == netif->num) {
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d108      	bne.n	800d4b6 <netif_add+0x12e>
          netif->num++;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d4b4:	e005      	b.n	800d4c2 <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	617b      	str	r3, [r7, #20]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1d0      	bne.n	800d464 <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1be      	bne.n	800d446 <netif_add+0xbe>
  }
  if (netif->num == 254) {
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4ce:	2bfe      	cmp	r3, #254	@ 0xfe
 800d4d0:	d103      	bne.n	800d4da <netif_add+0x152>
    netif_num = 0;
 800d4d2:	4b11      	ldr	r3, [pc, #68]	@ (800d518 <netif_add+0x190>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	e006      	b.n	800d4e8 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d518 <netif_add+0x190>)
 800d4e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d51c <netif_add+0x194>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d4f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d51c <netif_add+0x194>)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	08017484 	.word	0x08017484
 800d504:	08017550 	.word	0x08017550
 800d508:	0801750c 	.word	0x0801750c
 800d50c:	0801756c 	.word	0x0801756c
 800d510:	08019d40 	.word	0x08019d40
 800d514:	0800d94b 	.word	0x0800d94b
 800d518:	2401063c 	.word	0x2401063c
 800d51c:	24010634 	.word	0x24010634
 800d520:	08017590 	.word	0x08017590
 800d524:	080175a4 	.word	0x080175a4

0800d528 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d532:	6839      	ldr	r1, [r7, #0]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f003 f8ef 	bl	8010718 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f008 f805 	bl	801554c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <netif_do_set_ipaddr+0x20>
 800d55e:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d4 <netif_do_set_ipaddr+0x88>)
 800d560:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d564:	491c      	ldr	r1, [pc, #112]	@ (800d5d8 <netif_do_set_ipaddr+0x8c>)
 800d566:	481d      	ldr	r0, [pc, #116]	@ (800d5dc <netif_do_set_ipaddr+0x90>)
 800d568:	f008 f920 	bl	80157ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <netif_do_set_ipaddr+0x34>
 800d572:	4b18      	ldr	r3, [pc, #96]	@ (800d5d4 <netif_do_set_ipaddr+0x88>)
 800d574:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d578:	4917      	ldr	r1, [pc, #92]	@ (800d5d8 <netif_do_set_ipaddr+0x8c>)
 800d57a:	4818      	ldr	r0, [pc, #96]	@ (800d5dc <netif_do_set_ipaddr+0x90>)
 800d57c:	f008 f916 	bl	80157ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3304      	adds	r3, #4
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d01c      	beq.n	800d5c8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3304      	adds	r3, #4
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d59e:	f107 0314 	add.w	r3, r7, #20
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7ff ffbf 	bl	800d528 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <netif_do_set_ipaddr+0x6a>
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	e000      	b.n	800d5b8 <netif_do_set_ipaddr+0x6c>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d5bc:	2101      	movs	r1, #1
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f000 f8d6 	bl	800d770 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e000      	b.n	800d5ca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	08017484 	.word	0x08017484
 800d5d8:	080175d4 	.word	0x080175d4
 800d5dc:	0801750c 	.word	0x0801750c

0800d5e0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d00a      	beq.n	800d610 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <netif_do_set_netmask+0x26>
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	e000      	b.n	800d608 <netif_do_set_netmask+0x28>
 800d606:	2300      	movs	r3, #0
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d60c:	2301      	movs	r3, #1
 800d60e:	e000      	b.n	800d612 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d61e:	b480      	push	{r7}
 800d620:	b085      	sub	sp, #20
 800d622:	af00      	add	r7, sp, #0
 800d624:	60f8      	str	r0, [r7, #12]
 800d626:	60b9      	str	r1, [r7, #8]
 800d628:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	330c      	adds	r3, #12
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d00a      	beq.n	800d64e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <netif_do_set_gw+0x26>
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	e000      	b.n	800d646 <netif_do_set_gw+0x28>
 800d644:	2300      	movs	r3, #0
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d64a:	2301      	movs	r3, #1
 800d64c:	e000      	b.n	800d650 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800d672:	f7f8 fe93 	bl	800639c <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800d67c:	4b1c      	ldr	r3, [pc, #112]	@ (800d6f0 <netif_set_addr+0x94>)
 800d67e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800d686:	4b1a      	ldr	r3, [pc, #104]	@ (800d6f0 <netif_set_addr+0x94>)
 800d688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800d690:	4b17      	ldr	r3, [pc, #92]	@ (800d6f0 <netif_set_addr+0x94>)
 800d692:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <netif_set_addr+0x46>
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <netif_set_addr+0x4a>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e000      	b.n	800d6a8 <netif_set_addr+0x4c>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6b0:	f107 0310 	add.w	r3, r7, #16
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7ff ff47 	bl	800d54c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d6be:	69fa      	ldr	r2, [r7, #28]
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7ff ff8c 	bl	800d5e0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d6c8:	69ba      	ldr	r2, [r7, #24]
 800d6ca:	6839      	ldr	r1, [r7, #0]
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7ff ffa6 	bl	800d61e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d106      	bne.n	800d6e6 <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6d8:	f107 0310 	add.w	r3, r7, #16
 800d6dc:	461a      	mov	r2, r3
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7ff ff33 	bl	800d54c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d6e6:	bf00      	nop
 800d6e8:	3720      	adds	r7, #32
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	08019d40 	.word	0x08019d40

0800d6f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d6fc:	f7f8 fe4e 	bl	800639c <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d700:	4a03      	ldr	r2, [pc, #12]	@ (800d710 <netif_set_default+0x1c>)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d706:	bf00      	nop
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	24010638 	.word	0x24010638

0800d714 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d71c:	f7f8 fe3e 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d107      	bne.n	800d736 <netif_set_up+0x22>
 800d726:	4b0f      	ldr	r3, [pc, #60]	@ (800d764 <netif_set_up+0x50>)
 800d728:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d72c:	490e      	ldr	r1, [pc, #56]	@ (800d768 <netif_set_up+0x54>)
 800d72e:	480f      	ldr	r0, [pc, #60]	@ (800d76c <netif_set_up+0x58>)
 800d730:	f008 f83c 	bl	80157ac <iprintf>
 800d734:	e013      	b.n	800d75e <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10c      	bne.n	800d75e <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d74a:	f043 0301 	orr.w	r3, r3, #1
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d756:	2103      	movs	r1, #3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f809 	bl	800d770 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	08017484 	.word	0x08017484
 800d768:	08017644 	.word	0x08017644
 800d76c:	0801750c 	.word	0x0801750c

0800d770 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <netif_issue_reports+0x20>
 800d782:	4b18      	ldr	r3, [pc, #96]	@ (800d7e4 <netif_issue_reports+0x74>)
 800d784:	f240 326d 	movw	r2, #877	@ 0x36d
 800d788:	4917      	ldr	r1, [pc, #92]	@ (800d7e8 <netif_issue_reports+0x78>)
 800d78a:	4818      	ldr	r0, [pc, #96]	@ (800d7ec <netif_issue_reports+0x7c>)
 800d78c:	f008 f80e 	bl	80157ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01e      	beq.n	800d7dc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7a4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d017      	beq.n	800d7dc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7ac:	78fb      	ldrb	r3, [r7, #3]
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d013      	beq.n	800d7de <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00e      	beq.n	800d7de <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7c6:	f003 0308 	and.w	r3, r3, #8
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d007      	beq.n	800d7de <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7fd fc25 	bl	800b024 <etharp_request>
 800d7da:	e000      	b.n	800d7de <netif_issue_reports+0x6e>
    return;
 800d7dc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	08017484 	.word	0x08017484
 800d7e8:	08017660 	.word	0x08017660
 800d7ec:	0801750c 	.word	0x0801750c

0800d7f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d7f8:	f7f8 fdd0 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d107      	bne.n	800d812 <netif_set_down+0x22>
 800d802:	4b12      	ldr	r3, [pc, #72]	@ (800d84c <netif_set_down+0x5c>)
 800d804:	f240 329b 	movw	r2, #923	@ 0x39b
 800d808:	4911      	ldr	r1, [pc, #68]	@ (800d850 <netif_set_down+0x60>)
 800d80a:	4812      	ldr	r0, [pc, #72]	@ (800d854 <netif_set_down+0x64>)
 800d80c:	f007 ffce 	bl	80157ac <iprintf>
 800d810:	e019      	b.n	800d846 <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d012      	beq.n	800d846 <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d826:	f023 0301 	bic.w	r3, r3, #1
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7fc ffa9 	bl	800a798 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	08017484 	.word	0x08017484
 800d850:	08017684 	.word	0x08017684
 800d854:	0801750c 	.word	0x0801750c

0800d858 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d860:	f7f8 fd9c 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d107      	bne.n	800d87a <netif_set_link_up+0x22>
 800d86a:	4b13      	ldr	r3, [pc, #76]	@ (800d8b8 <netif_set_link_up+0x60>)
 800d86c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d870:	4912      	ldr	r1, [pc, #72]	@ (800d8bc <netif_set_link_up+0x64>)
 800d872:	4813      	ldr	r0, [pc, #76]	@ (800d8c0 <netif_set_link_up+0x68>)
 800d874:	f007 ff9a 	bl	80157ac <iprintf>
 800d878:	e01b      	b.n	800d8b2 <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d880:	f003 0304 	and.w	r3, r3, #4
 800d884:	2b00      	cmp	r3, #0
 800d886:	d114      	bne.n	800d8b2 <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d88e:	f043 0304 	orr.w	r3, r3, #4
 800d892:	b2da      	uxtb	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d89a:	2103      	movs	r1, #3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff67 	bl	800d770 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <netif_set_link_up+0x5a>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	08017484 	.word	0x08017484
 800d8bc:	080176a4 	.word	0x080176a4
 800d8c0:	0801750c 	.word	0x0801750c

0800d8c4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800d8cc:	f7f8 fd66 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d107      	bne.n	800d8e6 <netif_set_link_down+0x22>
 800d8d6:	4b11      	ldr	r3, [pc, #68]	@ (800d91c <netif_set_link_down+0x58>)
 800d8d8:	f240 4206 	movw	r2, #1030	@ 0x406
 800d8dc:	4910      	ldr	r1, [pc, #64]	@ (800d920 <netif_set_link_down+0x5c>)
 800d8de:	4811      	ldr	r0, [pc, #68]	@ (800d924 <netif_set_link_down+0x60>)
 800d8e0:	f007 ff64 	bl	80157ac <iprintf>
 800d8e4:	e017      	b.n	800d916 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8ec:	f003 0304 	and.w	r3, r3, #4
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d010      	beq.n	800d916 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8fa:	f023 0304 	bic.w	r3, r3, #4
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <netif_set_link_down+0x52>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	08017484 	.word	0x08017484
 800d920:	080176c8 	.word	0x080176c8
 800d924:	0801750c 	.word	0x0801750c

0800d928 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d932:	f7f8 fd33 	bl	800639c <sys_check_core_locking>

  if (netif) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	61da      	str	r2, [r3, #28]
  }
}
 800d942:	bf00      	nop
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	60f8      	str	r0, [r7, #12]
 800d952:	60b9      	str	r1, [r7, #8]
 800d954:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d956:	f06f 030b 	mvn.w	r3, #11
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
	...

0800d968 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800d972:	f7f8 fd13 	bl	800639c <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800d976:	79fb      	ldrb	r3, [r7, #7]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d013      	beq.n	800d9a4 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800d97c:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b0 <netif_get_by_index+0x48>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	e00c      	b.n	800d99e <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d98a:	3301      	adds	r3, #1
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	79fa      	ldrb	r2, [r7, #7]
 800d990:	429a      	cmp	r2, r3
 800d992:	d101      	bne.n	800d998 <netif_get_by_index+0x30>
        return netif; /* found! */
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	e006      	b.n	800d9a6 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1ef      	bne.n	800d984 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	24010634 	.word	0x24010634

0800d9b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d9ba:	f000 ff89 	bl	800e8d0 <sys_arch_protect>
 800d9be:	6038      	str	r0, [r7, #0]
 800d9c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f8 <pbuf_free_ooseq+0x44>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
 800d9c6:	6838      	ldr	r0, [r7, #0]
 800d9c8:	f000 ff90 	bl	800e8ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d9fc <pbuf_free_ooseq+0x48>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	607b      	str	r3, [r7, #4]
 800d9d2:	e00a      	b.n	800d9ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d003      	beq.n	800d9e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f002 fed9 	bl	8010794 <tcp_free_ooseq>
      return;
 800d9e2:	e005      	b.n	800d9f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	607b      	str	r3, [r7, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1f1      	bne.n	800d9d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	2401063d 	.word	0x2401063d
 800d9fc:	24010650 	.word	0x24010650

0800da00 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800da08:	f7ff ffd4 	bl	800d9b4 <pbuf_free_ooseq>
}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800da1a:	f000 ff59 	bl	800e8d0 <sys_arch_protect>
 800da1e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800da20:	4b0f      	ldr	r3, [pc, #60]	@ (800da60 <pbuf_pool_is_empty+0x4c>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800da26:	4b0e      	ldr	r3, [pc, #56]	@ (800da60 <pbuf_pool_is_empty+0x4c>)
 800da28:	2201      	movs	r2, #1
 800da2a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 ff5d 	bl	800e8ec <sys_arch_unprotect>

  if (!queued) {
 800da32:	78fb      	ldrb	r3, [r7, #3]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10f      	bne.n	800da58 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800da38:	2100      	movs	r1, #0
 800da3a:	480a      	ldr	r0, [pc, #40]	@ (800da64 <pbuf_pool_is_empty+0x50>)
 800da3c:	f007 f9ca 	bl	8014dd4 <tcpip_try_callback>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <pbuf_pool_is_empty+0x44>
 800da46:	f000 ff43 	bl	800e8d0 <sys_arch_protect>
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <pbuf_pool_is_empty+0x4c>)
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 ff4a 	bl	800e8ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	2401063d 	.word	0x2401063d
 800da64:	0800da01 	.word	0x0800da01

0800da68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4611      	mov	r1, r2
 800da74:	461a      	mov	r2, r3
 800da76:	460b      	mov	r3, r1
 800da78:	80fb      	strh	r3, [r7, #6]
 800da7a:	4613      	mov	r3, r2
 800da7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	88fa      	ldrh	r2, [r7, #6]
 800da8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	88ba      	ldrh	r2, [r7, #4]
 800da94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800da96:	8b3b      	ldrh	r3, [r7, #24]
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	7f3a      	ldrb	r2, [r7, #28]
 800daa2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2201      	movs	r2, #1
 800daa8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	73da      	strb	r2, [r3, #15]
}
 800dab0:	bf00      	nop
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08c      	sub	sp, #48	@ 0x30
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
 800dac6:	460b      	mov	r3, r1
 800dac8:	80bb      	strh	r3, [r7, #4]
 800daca:	4613      	mov	r3, r2
 800dacc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dad2:	887b      	ldrh	r3, [r7, #2]
 800dad4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dad8:	f000 8082 	beq.w	800dbe0 <pbuf_alloc+0x124>
 800dadc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dae0:	f300 80c9 	bgt.w	800dc76 <pbuf_alloc+0x1ba>
 800dae4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dae8:	d010      	beq.n	800db0c <pbuf_alloc+0x50>
 800daea:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800daee:	f300 80c2 	bgt.w	800dc76 <pbuf_alloc+0x1ba>
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d002      	beq.n	800dafc <pbuf_alloc+0x40>
 800daf6:	2b41      	cmp	r3, #65	@ 0x41
 800daf8:	f040 80bd 	bne.w	800dc76 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dafc:	887a      	ldrh	r2, [r7, #2]
 800dafe:	88bb      	ldrh	r3, [r7, #4]
 800db00:	4619      	mov	r1, r3
 800db02:	2000      	movs	r0, #0
 800db04:	f000 f8d2 	bl	800dcac <pbuf_alloc_reference>
 800db08:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800db0a:	e0be      	b.n	800dc8a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800db0c:	2300      	movs	r3, #0
 800db0e:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800db14:	88bb      	ldrh	r3, [r7, #4]
 800db16:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800db18:	200c      	movs	r0, #12
 800db1a:	f7ff fb8d 	bl	800d238 <memp_malloc>
 800db1e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d109      	bne.n	800db3a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800db26:	f7ff ff75 	bl	800da14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800db30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db32:	f000 faa7 	bl	800e084 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800db36:	2300      	movs	r3, #0
 800db38:	e0a8      	b.n	800dc8c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800db3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db3c:	3303      	adds	r3, #3
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f023 0303 	bic.w	r3, r3, #3
 800db44:	b29a      	uxth	r2, r3
 800db46:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	8b7a      	ldrh	r2, [r7, #26]
 800db50:	4293      	cmp	r3, r2
 800db52:	bf28      	it	cs
 800db54:	4613      	movcs	r3, r2
 800db56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800db58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db5a:	3310      	adds	r3, #16
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	4413      	add	r3, r2
 800db60:	3303      	adds	r3, #3
 800db62:	f023 0303 	bic.w	r3, r3, #3
 800db66:	4618      	mov	r0, r3
 800db68:	89f9      	ldrh	r1, [r7, #14]
 800db6a:	8b7a      	ldrh	r2, [r7, #26]
 800db6c:	2300      	movs	r3, #0
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	887b      	ldrh	r3, [r7, #2]
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	460b      	mov	r3, r1
 800db76:	4601      	mov	r1, r0
 800db78:	6938      	ldr	r0, [r7, #16]
 800db7a:	f7ff ff75 	bl	800da68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f003 0303 	and.w	r3, r3, #3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d006      	beq.n	800db98 <pbuf_alloc+0xdc>
 800db8a:	4b42      	ldr	r3, [pc, #264]	@ (800dc94 <pbuf_alloc+0x1d8>)
 800db8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800db90:	4941      	ldr	r1, [pc, #260]	@ (800dc98 <pbuf_alloc+0x1dc>)
 800db92:	4842      	ldr	r0, [pc, #264]	@ (800dc9c <pbuf_alloc+0x1e0>)
 800db94:	f007 fe0a 	bl	80157ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800db98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db9a:	3303      	adds	r3, #3
 800db9c:	f023 0303 	bic.w	r3, r3, #3
 800dba0:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d106      	bne.n	800dbb6 <pbuf_alloc+0xfa>
 800dba8:	4b3a      	ldr	r3, [pc, #232]	@ (800dc94 <pbuf_alloc+0x1d8>)
 800dbaa:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800dbae:	493c      	ldr	r1, [pc, #240]	@ (800dca0 <pbuf_alloc+0x1e4>)
 800dbb0:	483a      	ldr	r0, [pc, #232]	@ (800dc9c <pbuf_alloc+0x1e0>)
 800dbb2:	f007 fdfb 	bl	80157ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d102      	bne.n	800dbc2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbc0:	e002      	b.n	800dbc8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dbcc:	8b7a      	ldrh	r2, [r7, #26]
 800dbce:	89fb      	ldrh	r3, [r7, #14]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800dbd8:	8b7b      	ldrh	r3, [r7, #26]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d19c      	bne.n	800db18 <pbuf_alloc+0x5c>
      break;
 800dbde:	e054      	b.n	800dc8a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dbe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbe2:	3303      	adds	r3, #3
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	f023 0303 	bic.w	r3, r3, #3
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	88bb      	ldrh	r3, [r7, #4]
 800dbee:	3303      	adds	r3, #3
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	f023 0303 	bic.w	r3, r3, #3
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	4413      	add	r3, r2
 800dbfa:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dbfc:	8b3b      	ldrh	r3, [r7, #24]
 800dbfe:	3310      	adds	r3, #16
 800dc00:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc02:	8b3a      	ldrh	r2, [r7, #24]
 800dc04:	88bb      	ldrh	r3, [r7, #4]
 800dc06:	3303      	adds	r3, #3
 800dc08:	f023 0303 	bic.w	r3, r3, #3
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d306      	bcc.n	800dc1e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dc10:	88bb      	ldrh	r3, [r7, #4]
 800dc12:	3303      	adds	r3, #3
 800dc14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc18:	697a      	ldr	r2, [r7, #20]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d201      	bcs.n	800dc22 <pbuf_alloc+0x166>
        return NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e034      	b.n	800dc8c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dc22:	6978      	ldr	r0, [r7, #20]
 800dc24:	f7ff f96c 	bl	800cf00 <mem_malloc>
 800dc28:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <pbuf_alloc+0x178>
        return NULL;
 800dc30:	2300      	movs	r3, #0
 800dc32:	e02b      	b.n	800dc8c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dc34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc36:	3310      	adds	r3, #16
 800dc38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc3a:	4413      	add	r3, r2
 800dc3c:	3303      	adds	r3, #3
 800dc3e:	f023 0303 	bic.w	r3, r3, #3
 800dc42:	4618      	mov	r0, r3
 800dc44:	88b9      	ldrh	r1, [r7, #4]
 800dc46:	88ba      	ldrh	r2, [r7, #4]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	887b      	ldrh	r3, [r7, #2]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	460b      	mov	r3, r1
 800dc52:	4601      	mov	r1, r0
 800dc54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc56:	f7ff ff07 	bl	800da68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d010      	beq.n	800dc88 <pbuf_alloc+0x1cc>
 800dc66:	4b0b      	ldr	r3, [pc, #44]	@ (800dc94 <pbuf_alloc+0x1d8>)
 800dc68:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dc6c:	490d      	ldr	r1, [pc, #52]	@ (800dca4 <pbuf_alloc+0x1e8>)
 800dc6e:	480b      	ldr	r0, [pc, #44]	@ (800dc9c <pbuf_alloc+0x1e0>)
 800dc70:	f007 fd9c 	bl	80157ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dc74:	e008      	b.n	800dc88 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dc76:	4b07      	ldr	r3, [pc, #28]	@ (800dc94 <pbuf_alloc+0x1d8>)
 800dc78:	f240 1227 	movw	r2, #295	@ 0x127
 800dc7c:	490a      	ldr	r1, [pc, #40]	@ (800dca8 <pbuf_alloc+0x1ec>)
 800dc7e:	4807      	ldr	r0, [pc, #28]	@ (800dc9c <pbuf_alloc+0x1e0>)
 800dc80:	f007 fd94 	bl	80157ac <iprintf>
      return NULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	e001      	b.n	800dc8c <pbuf_alloc+0x1d0>
      break;
 800dc88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3728      	adds	r7, #40	@ 0x28
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	080176ec 	.word	0x080176ec
 800dc98:	08017758 	.word	0x08017758
 800dc9c:	08017788 	.word	0x08017788
 800dca0:	080177b0 	.word	0x080177b0
 800dca4:	080177e4 	.word	0x080177e4
 800dca8:	08017810 	.word	0x08017810

0800dcac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	807b      	strh	r3, [r7, #2]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dcbc:	883b      	ldrh	r3, [r7, #0]
 800dcbe:	2b41      	cmp	r3, #65	@ 0x41
 800dcc0:	d009      	beq.n	800dcd6 <pbuf_alloc_reference+0x2a>
 800dcc2:	883b      	ldrh	r3, [r7, #0]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d006      	beq.n	800dcd6 <pbuf_alloc_reference+0x2a>
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd08 <pbuf_alloc_reference+0x5c>)
 800dcca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800dcce:	490f      	ldr	r1, [pc, #60]	@ (800dd0c <pbuf_alloc_reference+0x60>)
 800dcd0:	480f      	ldr	r0, [pc, #60]	@ (800dd10 <pbuf_alloc_reference+0x64>)
 800dcd2:	f007 fd6b 	bl	80157ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dcd6:	200b      	movs	r0, #11
 800dcd8:	f7ff faae 	bl	800d238 <memp_malloc>
 800dcdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dce4:	2300      	movs	r3, #0
 800dce6:	e00b      	b.n	800dd00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dce8:	8879      	ldrh	r1, [r7, #2]
 800dcea:	887a      	ldrh	r2, [r7, #2]
 800dcec:	2300      	movs	r3, #0
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	883b      	ldrh	r3, [r7, #0]
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7ff feb5 	bl	800da68 <pbuf_init_alloced_pbuf>
  return p;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	080176ec 	.word	0x080176ec
 800dd0c:	0801782c 	.word	0x0801782c
 800dd10:	08017788 	.word	0x08017788

0800dd14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af02      	add	r7, sp, #8
 800dd1a:	607b      	str	r3, [r7, #4]
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
 800dd20:	460b      	mov	r3, r1
 800dd22:	81bb      	strh	r3, [r7, #12]
 800dd24:	4613      	mov	r3, r2
 800dd26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
 800dd2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dd2c:	8a7b      	ldrh	r3, [r7, #18]
 800dd2e:	3303      	adds	r3, #3
 800dd30:	f023 0203 	bic.w	r2, r3, #3
 800dd34:	89bb      	ldrh	r3, [r7, #12]
 800dd36:	441a      	add	r2, r3
 800dd38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d901      	bls.n	800dd42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e018      	b.n	800dd74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d007      	beq.n	800dd58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dd48:	8a7b      	ldrh	r3, [r7, #18]
 800dd4a:	3303      	adds	r3, #3
 800dd4c:	f023 0303 	bic.w	r3, r3, #3
 800dd50:	6a3a      	ldr	r2, [r7, #32]
 800dd52:	4413      	add	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	e001      	b.n	800dd5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	89b9      	ldrh	r1, [r7, #12]
 800dd60:	89ba      	ldrh	r2, [r7, #12]
 800dd62:	2302      	movs	r3, #2
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	897b      	ldrh	r3, [r7, #10]
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	6979      	ldr	r1, [r7, #20]
 800dd6e:	f7ff fe7b 	bl	800da68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dd72:	687b      	ldr	r3, [r7, #4]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3718      	adds	r7, #24
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <pbuf_realloc+0x20>
 800dd8e:	4b39      	ldr	r3, [pc, #228]	@ (800de74 <pbuf_realloc+0xf8>)
 800dd90:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800dd94:	4938      	ldr	r1, [pc, #224]	@ (800de78 <pbuf_realloc+0xfc>)
 800dd96:	4839      	ldr	r0, [pc, #228]	@ (800de7c <pbuf_realloc+0x100>)
 800dd98:	f007 fd08 	bl	80157ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	891b      	ldrh	r3, [r3, #8]
 800dda0:	887a      	ldrh	r2, [r7, #2]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d261      	bcs.n	800de6a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	891a      	ldrh	r2, [r3, #8]
 800ddaa:	887b      	ldrh	r3, [r7, #2]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ddb0:	887b      	ldrh	r3, [r7, #2]
 800ddb2:	817b      	strh	r3, [r7, #10]
  q = p;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ddb8:	e018      	b.n	800ddec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	895b      	ldrh	r3, [r3, #10]
 800ddbe:	897a      	ldrh	r2, [r7, #10]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	891a      	ldrh	r2, [r3, #8]
 800ddc8:	893b      	ldrh	r3, [r7, #8]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <pbuf_realloc+0x70>
 800ddde:	4b25      	ldr	r3, [pc, #148]	@ (800de74 <pbuf_realloc+0xf8>)
 800dde0:	f240 12af 	movw	r2, #431	@ 0x1af
 800dde4:	4926      	ldr	r1, [pc, #152]	@ (800de80 <pbuf_realloc+0x104>)
 800dde6:	4825      	ldr	r0, [pc, #148]	@ (800de7c <pbuf_realloc+0x100>)
 800dde8:	f007 fce0 	bl	80157ac <iprintf>
  while (rem_len > q->len) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	895b      	ldrh	r3, [r3, #10]
 800ddf0:	897a      	ldrh	r2, [r7, #10]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d8e1      	bhi.n	800ddba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	7b1b      	ldrb	r3, [r3, #12]
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d11f      	bne.n	800de42 <pbuf_realloc+0xc6>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	895b      	ldrh	r3, [r3, #10]
 800de06:	897a      	ldrh	r2, [r7, #10]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d01a      	beq.n	800de42 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	7b5b      	ldrb	r3, [r3, #13]
 800de10:	f003 0302 	and.w	r3, r3, #2
 800de14:	2b00      	cmp	r3, #0
 800de16:	d114      	bne.n	800de42 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	897b      	ldrh	r3, [r7, #10]
 800de22:	4413      	add	r3, r2
 800de24:	4619      	mov	r1, r3
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7fe ff68 	bl	800ccfc <mem_trim>
 800de2c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d106      	bne.n	800de42 <pbuf_realloc+0xc6>
 800de34:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <pbuf_realloc+0xf8>)
 800de36:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800de3a:	4912      	ldr	r1, [pc, #72]	@ (800de84 <pbuf_realloc+0x108>)
 800de3c:	480f      	ldr	r0, [pc, #60]	@ (800de7c <pbuf_realloc+0x100>)
 800de3e:	f007 fcb5 	bl	80157ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	897a      	ldrh	r2, [r7, #10]
 800de46:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	895a      	ldrh	r2, [r3, #10]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d004      	beq.n	800de62 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f911 	bl	800e084 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	e000      	b.n	800de6c <pbuf_realloc+0xf0>
    return;
 800de6a:	bf00      	nop

}
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	080176ec 	.word	0x080176ec
 800de78:	08017840 	.word	0x08017840
 800de7c:	08017788 	.word	0x08017788
 800de80:	08017858 	.word	0x08017858
 800de84:	08017870 	.word	0x08017870

0800de88 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d106      	bne.n	800deaa <pbuf_add_header_impl+0x22>
 800de9c:	4b2b      	ldr	r3, [pc, #172]	@ (800df4c <pbuf_add_header_impl+0xc4>)
 800de9e:	f240 12df 	movw	r2, #479	@ 0x1df
 800dea2:	492b      	ldr	r1, [pc, #172]	@ (800df50 <pbuf_add_header_impl+0xc8>)
 800dea4:	482b      	ldr	r0, [pc, #172]	@ (800df54 <pbuf_add_header_impl+0xcc>)
 800dea6:	f007 fc81 	bl	80157ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <pbuf_add_header_impl+0x30>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deb6:	d301      	bcc.n	800debc <pbuf_add_header_impl+0x34>
    return 1;
 800deb8:	2301      	movs	r3, #1
 800deba:	e043      	b.n	800df44 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <pbuf_add_header_impl+0x3e>
    return 0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	e03e      	b.n	800df44 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	891a      	ldrh	r2, [r3, #8]
 800dece:	8a7b      	ldrh	r3, [r7, #18]
 800ded0:	4413      	add	r3, r2
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	8a7a      	ldrh	r2, [r7, #18]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d901      	bls.n	800dede <pbuf_add_header_impl+0x56>
    return 1;
 800deda:	2301      	movs	r3, #1
 800dedc:	e032      	b.n	800df44 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	7b1b      	ldrb	r3, [r3, #12]
 800dee2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dee4:	8a3b      	ldrh	r3, [r7, #16]
 800dee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00c      	beq.n	800df08 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	685a      	ldr	r2, [r3, #4]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	425b      	negs	r3, r3
 800def6:	4413      	add	r3, r2
 800def8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3310      	adds	r3, #16
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	429a      	cmp	r2, r3
 800df02:	d20d      	bcs.n	800df20 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800df04:	2301      	movs	r3, #1
 800df06:	e01d      	b.n	800df44 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d006      	beq.n	800df1c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	425b      	negs	r3, r3
 800df16:	4413      	add	r3, r2
 800df18:	617b      	str	r3, [r7, #20]
 800df1a:	e001      	b.n	800df20 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e011      	b.n	800df44 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	895a      	ldrh	r2, [r3, #10]
 800df2a:	8a7b      	ldrh	r3, [r7, #18]
 800df2c:	4413      	add	r3, r2
 800df2e:	b29a      	uxth	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	891a      	ldrh	r2, [r3, #8]
 800df38:	8a7b      	ldrh	r3, [r7, #18]
 800df3a:	4413      	add	r3, r2
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	811a      	strh	r2, [r3, #8]


  return 0;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3718      	adds	r7, #24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	080176ec 	.word	0x080176ec
 800df50:	0801788c 	.word	0x0801788c
 800df54:	08017788 	.word	0x08017788

0800df58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800df62:	2200      	movs	r2, #0
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff ff8e 	bl	800de88 <pbuf_add_header_impl>
 800df6c:	4603      	mov	r3, r0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
	...

0800df78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d106      	bne.n	800df96 <pbuf_remove_header+0x1e>
 800df88:	4b20      	ldr	r3, [pc, #128]	@ (800e00c <pbuf_remove_header+0x94>)
 800df8a:	f240 224b 	movw	r2, #587	@ 0x24b
 800df8e:	4920      	ldr	r1, [pc, #128]	@ (800e010 <pbuf_remove_header+0x98>)
 800df90:	4820      	ldr	r0, [pc, #128]	@ (800e014 <pbuf_remove_header+0x9c>)
 800df92:	f007 fc0b 	bl	80157ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d003      	beq.n	800dfa4 <pbuf_remove_header+0x2c>
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfa2:	d301      	bcc.n	800dfa8 <pbuf_remove_header+0x30>
    return 1;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e02c      	b.n	800e002 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <pbuf_remove_header+0x3a>
    return 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e027      	b.n	800e002 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	895b      	ldrh	r3, [r3, #10]
 800dfba:	89fa      	ldrh	r2, [r7, #14]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d908      	bls.n	800dfd2 <pbuf_remove_header+0x5a>
 800dfc0:	4b12      	ldr	r3, [pc, #72]	@ (800e00c <pbuf_remove_header+0x94>)
 800dfc2:	f240 2255 	movw	r2, #597	@ 0x255
 800dfc6:	4914      	ldr	r1, [pc, #80]	@ (800e018 <pbuf_remove_header+0xa0>)
 800dfc8:	4812      	ldr	r0, [pc, #72]	@ (800e014 <pbuf_remove_header+0x9c>)
 800dfca:	f007 fbef 	bl	80157ac <iprintf>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e017      	b.n	800e002 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	441a      	add	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	895a      	ldrh	r2, [r3, #10]
 800dfe8:	89fb      	ldrh	r3, [r7, #14]
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	89fb      	ldrh	r3, [r7, #14]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	080176ec 	.word	0x080176ec
 800e010:	0801788c 	.word	0x0801788c
 800e014:	08017788 	.word	0x08017788
 800e018:	08017898 	.word	0x08017898

0800e01c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	807b      	strh	r3, [r7, #2]
 800e028:	4613      	mov	r3, r2
 800e02a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e02c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e030:	2b00      	cmp	r3, #0
 800e032:	da08      	bge.n	800e046 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e038:	425b      	negs	r3, r3
 800e03a:	4619      	mov	r1, r3
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7ff ff9b 	bl	800df78 <pbuf_remove_header>
 800e042:	4603      	mov	r3, r0
 800e044:	e007      	b.n	800e056 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e04a:	787a      	ldrb	r2, [r7, #1]
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff ff1a 	bl	800de88 <pbuf_add_header_impl>
 800e054:	4603      	mov	r3, r0
  }
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	460b      	mov	r3, r1
 800e068:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e06a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e06e:	2201      	movs	r2, #1
 800e070:	4619      	mov	r1, r3
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff ffd2 	bl	800e01c <pbuf_header_impl>
 800e078:	4603      	mov	r3, r0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10b      	bne.n	800e0aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <pbuf_free+0x22>
 800e098:	4b3b      	ldr	r3, [pc, #236]	@ (800e188 <pbuf_free+0x104>)
 800e09a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e09e:	493b      	ldr	r1, [pc, #236]	@ (800e18c <pbuf_free+0x108>)
 800e0a0:	483b      	ldr	r0, [pc, #236]	@ (800e190 <pbuf_free+0x10c>)
 800e0a2:	f007 fb83 	bl	80157ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	e069      	b.n	800e17e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e0ae:	e062      	b.n	800e176 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e0b0:	f000 fc0e 	bl	800e8d0 <sys_arch_protect>
 800e0b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7b9b      	ldrb	r3, [r3, #14]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d106      	bne.n	800e0cc <pbuf_free+0x48>
 800e0be:	4b32      	ldr	r3, [pc, #200]	@ (800e188 <pbuf_free+0x104>)
 800e0c0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e0c4:	4933      	ldr	r1, [pc, #204]	@ (800e194 <pbuf_free+0x110>)
 800e0c6:	4832      	ldr	r0, [pc, #200]	@ (800e190 <pbuf_free+0x10c>)
 800e0c8:	f007 fb70 	bl	80157ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7b9b      	ldrb	r3, [r3, #14]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	739a      	strb	r2, [r3, #14]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7b9b      	ldrb	r3, [r3, #14]
 800e0dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e0de:	69b8      	ldr	r0, [r7, #24]
 800e0e0:	f000 fc04 	bl	800e8ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e0e4:	7dfb      	ldrb	r3, [r7, #23]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d143      	bne.n	800e172 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7b1b      	ldrb	r3, [r3, #12]
 800e0f4:	f003 030f 	and.w	r3, r3, #15
 800e0f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	7b5b      	ldrb	r3, [r3, #13]
 800e0fe:	f003 0302 	and.w	r3, r3, #2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d011      	beq.n	800e12a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <pbuf_free+0x9c>
 800e112:	4b1d      	ldr	r3, [pc, #116]	@ (800e188 <pbuf_free+0x104>)
 800e114:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e118:	491f      	ldr	r1, [pc, #124]	@ (800e198 <pbuf_free+0x114>)
 800e11a:	481d      	ldr	r0, [pc, #116]	@ (800e190 <pbuf_free+0x10c>)
 800e11c:	f007 fb46 	bl	80157ac <iprintf>
        pc->custom_free_function(p);
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
 800e128:	e01d      	b.n	800e166 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d104      	bne.n	800e13a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e130:	6879      	ldr	r1, [r7, #4]
 800e132:	200c      	movs	r0, #12
 800e134:	f7ff f8f6 	bl	800d324 <memp_free>
 800e138:	e015      	b.n	800e166 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e13a:	7bfb      	ldrb	r3, [r7, #15]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d104      	bne.n	800e14a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	200b      	movs	r0, #11
 800e144:	f7ff f8ee 	bl	800d324 <memp_free>
 800e148:	e00d      	b.n	800e166 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d103      	bne.n	800e158 <pbuf_free+0xd4>
          mem_free(p);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7fe fd43 	bl	800cbdc <mem_free>
 800e156:	e006      	b.n	800e166 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e158:	4b0b      	ldr	r3, [pc, #44]	@ (800e188 <pbuf_free+0x104>)
 800e15a:	f240 320f 	movw	r2, #783	@ 0x30f
 800e15e:	490f      	ldr	r1, [pc, #60]	@ (800e19c <pbuf_free+0x118>)
 800e160:	480b      	ldr	r0, [pc, #44]	@ (800e190 <pbuf_free+0x10c>)
 800e162:	f007 fb23 	bl	80157ac <iprintf>
        }
      }
      count++;
 800e166:	7ffb      	ldrb	r3, [r7, #31]
 800e168:	3301      	adds	r3, #1
 800e16a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	607b      	str	r3, [r7, #4]
 800e170:	e001      	b.n	800e176 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e172:	2300      	movs	r3, #0
 800e174:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d199      	bne.n	800e0b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e17c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3720      	adds	r7, #32
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	080176ec 	.word	0x080176ec
 800e18c:	0801788c 	.word	0x0801788c
 800e190:	08017788 	.word	0x08017788
 800e194:	080178b8 	.word	0x080178b8
 800e198:	080178d0 	.word	0x080178d0
 800e19c:	080178f4 	.word	0x080178f4

0800e1a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e1ac:	e005      	b.n	800e1ba <pbuf_clen+0x1a>
    ++len;
 800e1ae:	89fb      	ldrh	r3, [r7, #14]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1f6      	bne.n	800e1ae <pbuf_clen+0xe>
  }
  return len;
 800e1c0:	89fb      	ldrh	r3, [r7, #14]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3714      	adds	r7, #20
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
	...

0800e1d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d016      	beq.n	800e20c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e1de:	f000 fb77 	bl	800e8d0 <sys_arch_protect>
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7b9b      	ldrb	r3, [r3, #14]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	739a      	strb	r2, [r3, #14]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 fb7b 	bl	800e8ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7b9b      	ldrb	r3, [r3, #14]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <pbuf_ref+0x3c>
 800e1fe:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <pbuf_ref+0x44>)
 800e200:	f240 3242 	movw	r2, #834	@ 0x342
 800e204:	4904      	ldr	r1, [pc, #16]	@ (800e218 <pbuf_ref+0x48>)
 800e206:	4805      	ldr	r0, [pc, #20]	@ (800e21c <pbuf_ref+0x4c>)
 800e208:	f007 fad0 	bl	80157ac <iprintf>
  }
}
 800e20c:	bf00      	nop
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	080176ec 	.word	0x080176ec
 800e218:	08017908 	.word	0x08017908
 800e21c:	08017788 	.word	0x08017788

0800e220 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <pbuf_cat+0x16>
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d107      	bne.n	800e246 <pbuf_cat+0x26>
 800e236:	4b20      	ldr	r3, [pc, #128]	@ (800e2b8 <pbuf_cat+0x98>)
 800e238:	f240 3259 	movw	r2, #857	@ 0x359
 800e23c:	491f      	ldr	r1, [pc, #124]	@ (800e2bc <pbuf_cat+0x9c>)
 800e23e:	4820      	ldr	r0, [pc, #128]	@ (800e2c0 <pbuf_cat+0xa0>)
 800e240:	f007 fab4 	bl	80157ac <iprintf>
 800e244:	e034      	b.n	800e2b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	60fb      	str	r3, [r7, #12]
 800e24a:	e00a      	b.n	800e262 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	891a      	ldrh	r2, [r3, #8]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	891b      	ldrh	r3, [r3, #8]
 800e254:	4413      	add	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1f0      	bne.n	800e24c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	891a      	ldrh	r2, [r3, #8]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	895b      	ldrh	r3, [r3, #10]
 800e272:	429a      	cmp	r2, r3
 800e274:	d006      	beq.n	800e284 <pbuf_cat+0x64>
 800e276:	4b10      	ldr	r3, [pc, #64]	@ (800e2b8 <pbuf_cat+0x98>)
 800e278:	f240 3262 	movw	r2, #866	@ 0x362
 800e27c:	4911      	ldr	r1, [pc, #68]	@ (800e2c4 <pbuf_cat+0xa4>)
 800e27e:	4810      	ldr	r0, [pc, #64]	@ (800e2c0 <pbuf_cat+0xa0>)
 800e280:	f007 fa94 	bl	80157ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d006      	beq.n	800e29a <pbuf_cat+0x7a>
 800e28c:	4b0a      	ldr	r3, [pc, #40]	@ (800e2b8 <pbuf_cat+0x98>)
 800e28e:	f240 3263 	movw	r2, #867	@ 0x363
 800e292:	490d      	ldr	r1, [pc, #52]	@ (800e2c8 <pbuf_cat+0xa8>)
 800e294:	480a      	ldr	r0, [pc, #40]	@ (800e2c0 <pbuf_cat+0xa0>)
 800e296:	f007 fa89 	bl	80157ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	891a      	ldrh	r2, [r3, #8]
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	891b      	ldrh	r3, [r3, #8]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	080176ec 	.word	0x080176ec
 800e2bc:	0801791c 	.word	0x0801791c
 800e2c0:	08017788 	.word	0x08017788
 800e2c4:	08017954 	.word	0x08017954
 800e2c8:	08017984 	.word	0x08017984

0800e2cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	2300      	movs	r3, #0
 800e2dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d008      	beq.n	800e2f6 <pbuf_copy+0x2a>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d005      	beq.n	800e2f6 <pbuf_copy+0x2a>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	891a      	ldrh	r2, [r3, #8]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	891b      	ldrh	r3, [r3, #8]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d209      	bcs.n	800e30a <pbuf_copy+0x3e>
 800e2f6:	4b57      	ldr	r3, [pc, #348]	@ (800e454 <pbuf_copy+0x188>)
 800e2f8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e2fc:	4956      	ldr	r1, [pc, #344]	@ (800e458 <pbuf_copy+0x18c>)
 800e2fe:	4857      	ldr	r0, [pc, #348]	@ (800e45c <pbuf_copy+0x190>)
 800e300:	f007 fa54 	bl	80157ac <iprintf>
 800e304:	f06f 030f 	mvn.w	r3, #15
 800e308:	e09f      	b.n	800e44a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	895b      	ldrh	r3, [r3, #10]
 800e30e:	461a      	mov	r2, r3
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	1ad2      	subs	r2, r2, r3
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	895b      	ldrh	r3, [r3, #10]
 800e318:	4619      	mov	r1, r3
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	1acb      	subs	r3, r1, r3
 800e31e:	429a      	cmp	r2, r3
 800e320:	d306      	bcc.n	800e330 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	895b      	ldrh	r3, [r3, #10]
 800e326:	461a      	mov	r2, r3
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e005      	b.n	800e33c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	895b      	ldrh	r3, [r3, #10]
 800e334:	461a      	mov	r2, r3
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	18d0      	adds	r0, r2, r3
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	4413      	add	r3, r2
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	4619      	mov	r1, r3
 800e350:	f007 fb5d 	bl	8015a0e <memcpy>
    offset_to += len;
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	4413      	add	r3, r2
 800e35a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4413      	add	r3, r2
 800e362:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	895b      	ldrh	r3, [r3, #10]
 800e368:	461a      	mov	r2, r3
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d906      	bls.n	800e37e <pbuf_copy+0xb2>
 800e370:	4b38      	ldr	r3, [pc, #224]	@ (800e454 <pbuf_copy+0x188>)
 800e372:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e376:	493a      	ldr	r1, [pc, #232]	@ (800e460 <pbuf_copy+0x194>)
 800e378:	4838      	ldr	r0, [pc, #224]	@ (800e45c <pbuf_copy+0x190>)
 800e37a:	f007 fa17 	bl	80157ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	895b      	ldrh	r3, [r3, #10]
 800e382:	461a      	mov	r2, r3
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	4293      	cmp	r3, r2
 800e388:	d906      	bls.n	800e398 <pbuf_copy+0xcc>
 800e38a:	4b32      	ldr	r3, [pc, #200]	@ (800e454 <pbuf_copy+0x188>)
 800e38c:	f240 32da 	movw	r2, #986	@ 0x3da
 800e390:	4934      	ldr	r1, [pc, #208]	@ (800e464 <pbuf_copy+0x198>)
 800e392:	4832      	ldr	r0, [pc, #200]	@ (800e45c <pbuf_copy+0x190>)
 800e394:	f007 fa0a 	bl	80157ac <iprintf>
    if (offset_from >= p_from->len) {
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	895b      	ldrh	r3, [r3, #10]
 800e39c:	461a      	mov	r2, r3
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d304      	bcc.n	800e3ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	895b      	ldrh	r3, [r3, #10]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d114      	bne.n	800e3e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10c      	bne.n	800e3e4 <pbuf_copy+0x118>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d009      	beq.n	800e3e4 <pbuf_copy+0x118>
 800e3d0:	4b20      	ldr	r3, [pc, #128]	@ (800e454 <pbuf_copy+0x188>)
 800e3d2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e3d6:	4924      	ldr	r1, [pc, #144]	@ (800e468 <pbuf_copy+0x19c>)
 800e3d8:	4820      	ldr	r0, [pc, #128]	@ (800e45c <pbuf_copy+0x190>)
 800e3da:	f007 f9e7 	bl	80157ac <iprintf>
 800e3de:	f06f 030f 	mvn.w	r3, #15
 800e3e2:	e032      	b.n	800e44a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d013      	beq.n	800e412 <pbuf_copy+0x146>
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	895a      	ldrh	r2, [r3, #10]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	891b      	ldrh	r3, [r3, #8]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d10d      	bne.n	800e412 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d009      	beq.n	800e412 <pbuf_copy+0x146>
 800e3fe:	4b15      	ldr	r3, [pc, #84]	@ (800e454 <pbuf_copy+0x188>)
 800e400:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e404:	4919      	ldr	r1, [pc, #100]	@ (800e46c <pbuf_copy+0x1a0>)
 800e406:	4815      	ldr	r0, [pc, #84]	@ (800e45c <pbuf_copy+0x190>)
 800e408:	f007 f9d0 	bl	80157ac <iprintf>
 800e40c:	f06f 0305 	mvn.w	r3, #5
 800e410:	e01b      	b.n	800e44a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d013      	beq.n	800e440 <pbuf_copy+0x174>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	895a      	ldrh	r2, [r3, #10]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	891b      	ldrh	r3, [r3, #8]
 800e420:	429a      	cmp	r2, r3
 800e422:	d10d      	bne.n	800e440 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d009      	beq.n	800e440 <pbuf_copy+0x174>
 800e42c:	4b09      	ldr	r3, [pc, #36]	@ (800e454 <pbuf_copy+0x188>)
 800e42e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e432:	490e      	ldr	r1, [pc, #56]	@ (800e46c <pbuf_copy+0x1a0>)
 800e434:	4809      	ldr	r0, [pc, #36]	@ (800e45c <pbuf_copy+0x190>)
 800e436:	f007 f9b9 	bl	80157ac <iprintf>
 800e43a:	f06f 0305 	mvn.w	r3, #5
 800e43e:	e004      	b.n	800e44a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	f47f af61 	bne.w	800e30a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3718      	adds	r7, #24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	080176ec 	.word	0x080176ec
 800e458:	080179d0 	.word	0x080179d0
 800e45c:	08017788 	.word	0x08017788
 800e460:	08017a00 	.word	0x08017a00
 800e464:	08017a18 	.word	0x08017a18
 800e468:	08017a34 	.word	0x08017a34
 800e46c:	08017a44 	.word	0x08017a44

0800e470 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	4611      	mov	r1, r2
 800e47c:	461a      	mov	r2, r3
 800e47e:	460b      	mov	r3, r1
 800e480:	80fb      	strh	r3, [r7, #6]
 800e482:	4613      	mov	r3, r2
 800e484:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d108      	bne.n	800e4a6 <pbuf_copy_partial+0x36>
 800e494:	4b2b      	ldr	r3, [pc, #172]	@ (800e544 <pbuf_copy_partial+0xd4>)
 800e496:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e49a:	492b      	ldr	r1, [pc, #172]	@ (800e548 <pbuf_copy_partial+0xd8>)
 800e49c:	482b      	ldr	r0, [pc, #172]	@ (800e54c <pbuf_copy_partial+0xdc>)
 800e49e:	f007 f985 	bl	80157ac <iprintf>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e04a      	b.n	800e53c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d108      	bne.n	800e4be <pbuf_copy_partial+0x4e>
 800e4ac:	4b25      	ldr	r3, [pc, #148]	@ (800e544 <pbuf_copy_partial+0xd4>)
 800e4ae:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e4b2:	4927      	ldr	r1, [pc, #156]	@ (800e550 <pbuf_copy_partial+0xe0>)
 800e4b4:	4825      	ldr	r0, [pc, #148]	@ (800e54c <pbuf_copy_partial+0xdc>)
 800e4b6:	f007 f979 	bl	80157ac <iprintf>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e03e      	b.n	800e53c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	61fb      	str	r3, [r7, #28]
 800e4c2:	e034      	b.n	800e52e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e4c4:	88bb      	ldrh	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <pbuf_copy_partial+0x70>
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	895b      	ldrh	r3, [r3, #10]
 800e4ce:	88ba      	ldrh	r2, [r7, #4]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d305      	bcc.n	800e4e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	895b      	ldrh	r3, [r3, #10]
 800e4d8:	88ba      	ldrh	r2, [r7, #4]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	80bb      	strh	r3, [r7, #4]
 800e4de:	e023      	b.n	800e528 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	895a      	ldrh	r2, [r3, #10]
 800e4e4:	88bb      	ldrh	r3, [r7, #4]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e4ea:	8b3a      	ldrh	r2, [r7, #24]
 800e4ec:	88fb      	ldrh	r3, [r7, #6]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d901      	bls.n	800e4f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e4f2:	88fb      	ldrh	r3, [r7, #6]
 800e4f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e4f6:	8b7b      	ldrh	r3, [r7, #26]
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	18d0      	adds	r0, r2, r3
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	88bb      	ldrh	r3, [r7, #4]
 800e502:	4413      	add	r3, r2
 800e504:	8b3a      	ldrh	r2, [r7, #24]
 800e506:	4619      	mov	r1, r3
 800e508:	f007 fa81 	bl	8015a0e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e50c:	8afa      	ldrh	r2, [r7, #22]
 800e50e:	8b3b      	ldrh	r3, [r7, #24]
 800e510:	4413      	add	r3, r2
 800e512:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e514:	8b7a      	ldrh	r2, [r7, #26]
 800e516:	8b3b      	ldrh	r3, [r7, #24]
 800e518:	4413      	add	r3, r2
 800e51a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e51c:	88fa      	ldrh	r2, [r7, #6]
 800e51e:	8b3b      	ldrh	r3, [r7, #24]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	61fb      	str	r3, [r7, #28]
 800e52e:	88fb      	ldrh	r3, [r7, #6]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <pbuf_copy_partial+0xca>
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1c4      	bne.n	800e4c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e53a:	8afb      	ldrh	r3, [r7, #22]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3720      	adds	r7, #32
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	080176ec 	.word	0x080176ec
 800e548:	08017a70 	.word	0x08017a70
 800e54c:	08017788 	.word	0x08017788
 800e550:	08017a90 	.word	0x08017a90

0800e554 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e554:	b480      	push	{r7}
 800e556:	b087      	sub	sp, #28
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	460b      	mov	r3, r1
 800e55e:	607a      	str	r2, [r7, #4]
 800e560:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800e562:	897b      	ldrh	r3, [r7, #10]
 800e564:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800e56a:	e007      	b.n	800e57c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	895b      	ldrh	r3, [r3, #10]
 800e570:	8afa      	ldrh	r2, [r7, #22]
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d004      	beq.n	800e58c <pbuf_skip_const+0x38>
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	895b      	ldrh	r3, [r3, #10]
 800e586:	8afa      	ldrh	r2, [r7, #22]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d2ef      	bcs.n	800e56c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d002      	beq.n	800e598 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	8afa      	ldrh	r2, [r7, #22]
 800e596:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800e598:	693b      	ldr	r3, [r7, #16]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	371c      	adds	r7, #28
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
	...

0800e5a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	603a      	str	r2, [r7, #0]
 800e5b2:	71fb      	strb	r3, [r7, #7]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	8919      	ldrh	r1, [r3, #8]
 800e5bc:	88ba      	ldrh	r2, [r7, #4]
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff fa7b 	bl	800dabc <pbuf_alloc>
 800e5c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <pbuf_clone+0x2a>
    return NULL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e011      	b.n	800e5f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f7ff fe79 	bl	800e2cc <pbuf_copy>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e5de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <pbuf_clone+0x4c>
 800e5e6:	4b06      	ldr	r3, [pc, #24]	@ (800e600 <pbuf_clone+0x58>)
 800e5e8:	f240 5224 	movw	r2, #1316	@ 0x524
 800e5ec:	4905      	ldr	r1, [pc, #20]	@ (800e604 <pbuf_clone+0x5c>)
 800e5ee:	4806      	ldr	r0, [pc, #24]	@ (800e608 <pbuf_clone+0x60>)
 800e5f0:	f007 f8dc 	bl	80157ac <iprintf>
  return q;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	080176ec 	.word	0x080176ec
 800e604:	08017b9c 	.word	0x08017b9c
 800e608:	08017788 	.word	0x08017788

0800e60c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	460b      	mov	r3, r1
 800e616:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800e618:	887b      	ldrh	r3, [r7, #2]
 800e61a:	4619      	mov	r1, r3
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f80c 	bl	800e63a <pbuf_try_get_at>
 800e622:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2b00      	cmp	r3, #0
 800e628:	db02      	blt.n	800e630 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	e000      	b.n	800e632 <pbuf_get_at+0x26>
  }
  return 0;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	460b      	mov	r3, r1
 800e644:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800e646:	f107 020a 	add.w	r2, r7, #10
 800e64a:	887b      	ldrh	r3, [r7, #2]
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff ff80 	bl	800e554 <pbuf_skip_const>
 800e654:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00a      	beq.n	800e672 <pbuf_try_get_at+0x38>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	895a      	ldrh	r2, [r3, #10]
 800e660:	897b      	ldrh	r3, [r7, #10]
 800e662:	429a      	cmp	r2, r3
 800e664:	d905      	bls.n	800e672 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	897a      	ldrh	r2, [r7, #10]
 800e66c:	4413      	add	r3, r2
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	e001      	b.n	800e676 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800e672:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b088      	sub	sp, #32
 800e682:	af00      	add	r7, sp, #0
 800e684:	60f8      	str	r0, [r7, #12]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	461a      	mov	r2, r3
 800e68a:	460b      	mov	r3, r1
 800e68c:	817b      	strh	r3, [r7, #10]
 800e68e:	4613      	mov	r3, r2
 800e690:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800e692:	897b      	ldrh	r3, [r7, #10]
 800e694:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	891b      	ldrh	r3, [r3, #8]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	897a      	ldrh	r2, [r7, #10]
 800e6a2:	893b      	ldrh	r3, [r7, #8]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	4299      	cmp	r1, r3
 800e6a8:	da0a      	bge.n	800e6c0 <pbuf_memcmp+0x42>
    return 0xffff;
 800e6aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e6ae:	e037      	b.n	800e720 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	895b      	ldrh	r3, [r3, #10]
 800e6b4:	8bfa      	ldrh	r2, [r7, #30]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d004      	beq.n	800e6d0 <pbuf_memcmp+0x52>
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	895b      	ldrh	r3, [r3, #10]
 800e6ca:	8bfa      	ldrh	r2, [r7, #30]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d2ef      	bcs.n	800e6b0 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	82fb      	strh	r3, [r7, #22]
 800e6d4:	e01f      	b.n	800e716 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800e6d6:	8bfa      	ldrh	r2, [r7, #30]
 800e6d8:	8afb      	ldrh	r3, [r7, #22]
 800e6da:	4413      	add	r3, r2
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	4619      	mov	r1, r3
 800e6e0:	69b8      	ldr	r0, [r7, #24]
 800e6e2:	f7ff ff93 	bl	800e60c <pbuf_get_at>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800e6ea:	8afb      	ldrh	r3, [r7, #22]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800e6f4:	7d7a      	ldrb	r2, [r7, #21]
 800e6f6:	7d3b      	ldrb	r3, [r7, #20]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d009      	beq.n	800e710 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800e6fc:	8afb      	ldrh	r3, [r7, #22]
 800e6fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e702:	4293      	cmp	r3, r2
 800e704:	bf28      	it	cs
 800e706:	4613      	movcs	r3, r2
 800e708:	b29b      	uxth	r3, r3
 800e70a:	3301      	adds	r3, #1
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	e007      	b.n	800e720 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800e710:	8afb      	ldrh	r3, [r7, #22]
 800e712:	3301      	adds	r3, #1
 800e714:	82fb      	strh	r3, [r7, #22]
 800e716:	8afa      	ldrh	r2, [r7, #22]
 800e718:	893b      	ldrh	r3, [r7, #8]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d3db      	bcc.n	800e6d6 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3720      	adds	r7, #32
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2200      	movs	r2, #0
 800e736:	2104      	movs	r1, #4
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f8 fa01 	bl	8006b40 <osMessageQueueNew>
 800e73e:	4602      	mov	r2, r0
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <sys_mbox_new+0x2a>
    return ERR_MEM;
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
 800e750:	e000      	b.n	800e754 <sys_mbox_new+0x2c>

  return ERR_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6818      	ldr	r0, [r3, #0]
 800e76a:	4639      	mov	r1, r7
 800e76c:	2300      	movs	r3, #0
 800e76e:	2200      	movs	r2, #0
 800e770:	f7f8 fa5a 	bl	8006c28 <osMessageQueuePut>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d102      	bne.n	800e780 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 800e77a:	2300      	movs	r3, #0
 800e77c:	73fb      	strb	r3, [r7, #15]
 800e77e:	e001      	b.n	800e784 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800e780:	23ff      	movs	r3, #255	@ 0xff
 800e782:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800e784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800e79c:	f7f7 fed4 	bl	8006548 <osKernelGetTickCount>
 800e7a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d013      	beq.n	800e7d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6818      	ldr	r0, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	68b9      	ldr	r1, [r7, #8]
 800e7b2:	f7f8 fa99 	bl	8006ce8 <osMessageQueueGet>
 800e7b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 800e7be:	f7f7 fec3 	bl	8006548 <osKernelGetTickCount>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	e00f      	b.n	800e7ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800e7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ce:	e00c      	b.n	800e7ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6818      	ldr	r0, [r3, #0]
 800e7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d8:	2200      	movs	r2, #0
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	f7f8 fa84 	bl	8006ce8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800e7e0:	f7f7 feb2 	bl	8006548 <osKernelGetTickCount>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3718      	adds	r7, #24
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <sys_mbox_valid+0x14>
    return 0;
 800e802:	2300      	movs	r3, #0
 800e804:	e000      	b.n	800e808 <sys_mbox_valid+0x16>
  else
    return 1;
 800e806:	2301      	movs	r3, #1
}
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800e818:	2000      	movs	r0, #0
 800e81a:	f7f7 ff63 	bl	80066e4 <osMutexNew>
 800e81e:	4603      	mov	r3, r0
 800e820:	4a01      	ldr	r2, [pc, #4]	@ (800e828 <sys_init+0x14>)
 800e822:	6013      	str	r3, [r2, #0]
#endif
}
 800e824:	bf00      	nop
 800e826:	bd80      	pop	{r7, pc}
 800e828:	24010640 	.word	0x24010640

0800e82c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800e834:	2000      	movs	r0, #0
 800e836:	f7f7 ff55 	bl	80066e4 <osMutexNew>
 800e83a:	4602      	mov	r2, r0
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d102      	bne.n	800e84e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800e848:	f04f 33ff 	mov.w	r3, #4294967295
 800e84c:	e000      	b.n	800e850 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f04f 31ff 	mov.w	r1, #4294967295
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f7 ffc1 	bl	80067f0 <osMutexAcquire>
#endif
}
 800e86e:	bf00      	nop
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4618      	mov	r0, r3
 800e884:	f7f7 ffff 	bl	8006886 <osMutexRelease>
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08e      	sub	sp, #56	@ 0x38
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800e89e:	f107 0314 	add.w	r3, r7, #20
 800e8a2:	2224      	movs	r2, #36	@ 0x24
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f006 ffe5 	bl	8015876 <memset>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800e8b8:	f107 0314 	add.w	r3, r7, #20
 800e8bc:	461a      	mov	r2, r3
 800e8be:	6879      	ldr	r1, [r7, #4]
 800e8c0:	68b8      	ldr	r0, [r7, #8]
 800e8c2:	f7f7 fe56 	bl	8006572 <osThreadNew>
 800e8c6:	4603      	mov	r3, r0
#endif
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3738      	adds	r7, #56	@ 0x38
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800e8d4:	4b04      	ldr	r3, [pc, #16]	@ (800e8e8 <sys_arch_protect+0x18>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f04f 31ff 	mov.w	r1, #4294967295
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f7 ff87 	bl	80067f0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 800e8e2:	2301      	movs	r3, #1
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	24010640 	.word	0x24010640

0800e8ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e8f4:	4b04      	ldr	r3, [pc, #16]	@ (800e908 <sys_arch_unprotect+0x1c>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7f7 ffc4 	bl	8006886 <osMutexRelease>
}
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	24010640 	.word	0x24010640

0800e90c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e910:	f006 fe4c 	bl	80155ac <rand>
 800e914:	4603      	mov	r3, r0
 800e916:	b29b      	uxth	r3, r3
 800e918:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e922:	b29a      	uxth	r2, r3
 800e924:	4b01      	ldr	r3, [pc, #4]	@ (800e92c <tcp_init+0x20>)
 800e926:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e928:	bf00      	nop
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	24000028 	.word	0x24000028

0800e930 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7d1b      	ldrb	r3, [r3, #20]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d105      	bne.n	800e94c <tcp_free+0x1c>
 800e940:	4b06      	ldr	r3, [pc, #24]	@ (800e95c <tcp_free+0x2c>)
 800e942:	22d4      	movs	r2, #212	@ 0xd4
 800e944:	4906      	ldr	r1, [pc, #24]	@ (800e960 <tcp_free+0x30>)
 800e946:	4807      	ldr	r0, [pc, #28]	@ (800e964 <tcp_free+0x34>)
 800e948:	f006 ff30 	bl	80157ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	2001      	movs	r0, #1
 800e950:	f7fe fce8 	bl	800d324 <memp_free>
}
 800e954:	bf00      	nop
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	08017c28 	.word	0x08017c28
 800e960:	08017c90 	.word	0x08017c90
 800e964:	08017ca4 	.word	0x08017ca4

0800e968 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7d1b      	ldrb	r3, [r3, #20]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d105      	bne.n	800e984 <tcp_free_listen+0x1c>
 800e978:	4b06      	ldr	r3, [pc, #24]	@ (800e994 <tcp_free_listen+0x2c>)
 800e97a:	22df      	movs	r2, #223	@ 0xdf
 800e97c:	4906      	ldr	r1, [pc, #24]	@ (800e998 <tcp_free_listen+0x30>)
 800e97e:	4807      	ldr	r0, [pc, #28]	@ (800e99c <tcp_free_listen+0x34>)
 800e980:	f006 ff14 	bl	80157ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e984:	6879      	ldr	r1, [r7, #4]
 800e986:	2002      	movs	r0, #2
 800e988:	f7fe fccc 	bl	800d324 <memp_free>
}
 800e98c:	bf00      	nop
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	08017c28 	.word	0x08017c28
 800e998:	08017ccc 	.word	0x08017ccc
 800e99c:	08017ca4 	.word	0x08017ca4

0800e9a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e9a4:	f001 f986 	bl	800fcb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e9a8:	4b07      	ldr	r3, [pc, #28]	@ (800e9c8 <tcp_tmr+0x28>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	4b05      	ldr	r3, [pc, #20]	@ (800e9c8 <tcp_tmr+0x28>)
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	4b04      	ldr	r3, [pc, #16]	@ (800e9c8 <tcp_tmr+0x28>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e9c0:	f000 fe36 	bl	800f630 <tcp_slowtmr>
  }
}
 800e9c4:	bf00      	nop
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	24010659 	.word	0x24010659

0800e9cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d105      	bne.n	800e9e8 <tcp_remove_listener+0x1c>
 800e9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800ea14 <tcp_remove_listener+0x48>)
 800e9de:	22ff      	movs	r2, #255	@ 0xff
 800e9e0:	490d      	ldr	r1, [pc, #52]	@ (800ea18 <tcp_remove_listener+0x4c>)
 800e9e2:	480e      	ldr	r0, [pc, #56]	@ (800ea1c <tcp_remove_listener+0x50>)
 800e9e4:	f006 fee2 	bl	80157ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]
 800e9ec:	e00a      	b.n	800ea04 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d102      	bne.n	800e9fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	60fb      	str	r3, [r7, #12]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1f1      	bne.n	800e9ee <tcp_remove_listener+0x22>
    }
  }
}
 800ea0a:	bf00      	nop
 800ea0c:	bf00      	nop
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	08017c28 	.word	0x08017c28
 800ea18:	08017ce8 	.word	0x08017ce8
 800ea1c:	08017ca4 	.word	0x08017ca4

0800ea20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d106      	bne.n	800ea3c <tcp_listen_closed+0x1c>
 800ea2e:	4b14      	ldr	r3, [pc, #80]	@ (800ea80 <tcp_listen_closed+0x60>)
 800ea30:	f240 1211 	movw	r2, #273	@ 0x111
 800ea34:	4913      	ldr	r1, [pc, #76]	@ (800ea84 <tcp_listen_closed+0x64>)
 800ea36:	4814      	ldr	r0, [pc, #80]	@ (800ea88 <tcp_listen_closed+0x68>)
 800ea38:	f006 feb8 	bl	80157ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7d1b      	ldrb	r3, [r3, #20]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d006      	beq.n	800ea52 <tcp_listen_closed+0x32>
 800ea44:	4b0e      	ldr	r3, [pc, #56]	@ (800ea80 <tcp_listen_closed+0x60>)
 800ea46:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ea4a:	4910      	ldr	r1, [pc, #64]	@ (800ea8c <tcp_listen_closed+0x6c>)
 800ea4c:	480e      	ldr	r0, [pc, #56]	@ (800ea88 <tcp_listen_closed+0x68>)
 800ea4e:	f006 fead 	bl	80157ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea52:	2301      	movs	r3, #1
 800ea54:	60fb      	str	r3, [r7, #12]
 800ea56:	e00b      	b.n	800ea70 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ea58:	4a0d      	ldr	r2, [pc, #52]	@ (800ea90 <tcp_listen_closed+0x70>)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff ffb1 	bl	800e9cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	60fb      	str	r3, [r7, #12]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d9f0      	bls.n	800ea58 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	08017c28 	.word	0x08017c28
 800ea84:	08017d10 	.word	0x08017d10
 800ea88:	08017ca4 	.word	0x08017ca4
 800ea8c:	08017d1c 	.word	0x08017d1c
 800ea90:	08019e2c 	.word	0x08019e2c

0800ea94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ea94:	b5b0      	push	{r4, r5, r7, lr}
 800ea96:	b088      	sub	sp, #32
 800ea98:	af04      	add	r7, sp, #16
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <tcp_close_shutdown+0x20>
 800eaa6:	4b63      	ldr	r3, [pc, #396]	@ (800ec34 <tcp_close_shutdown+0x1a0>)
 800eaa8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800eaac:	4962      	ldr	r1, [pc, #392]	@ (800ec38 <tcp_close_shutdown+0x1a4>)
 800eaae:	4863      	ldr	r0, [pc, #396]	@ (800ec3c <tcp_close_shutdown+0x1a8>)
 800eab0:	f006 fe7c 	bl	80157ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d067      	beq.n	800eb8a <tcp_close_shutdown+0xf6>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	d003      	beq.n	800eaca <tcp_close_shutdown+0x36>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7d1b      	ldrb	r3, [r3, #20]
 800eac6:	2b07      	cmp	r3, #7
 800eac8:	d15f      	bne.n	800eb8a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d105      	bne.n	800eade <tcp_close_shutdown+0x4a>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ead6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800eada:	4293      	cmp	r3, r2
 800eadc:	d055      	beq.n	800eb8a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	8b5b      	ldrh	r3, [r3, #26]
 800eae2:	f003 0310 	and.w	r3, r3, #16
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <tcp_close_shutdown+0x64>
 800eaea:	4b52      	ldr	r3, [pc, #328]	@ (800ec34 <tcp_close_shutdown+0x1a0>)
 800eaec:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800eaf0:	4953      	ldr	r1, [pc, #332]	@ (800ec40 <tcp_close_shutdown+0x1ac>)
 800eaf2:	4852      	ldr	r0, [pc, #328]	@ (800ec3c <tcp_close_shutdown+0x1a8>)
 800eaf4:	f006 fe5a 	bl	80157ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eb00:	687d      	ldr	r5, [r7, #4]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3304      	adds	r3, #4
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	8ad2      	ldrh	r2, [r2, #22]
 800eb0a:	6879      	ldr	r1, [r7, #4]
 800eb0c:	8b09      	ldrh	r1, [r1, #24]
 800eb0e:	9102      	str	r1, [sp, #8]
 800eb10:	9201      	str	r2, [sp, #4]
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	462b      	mov	r3, r5
 800eb16:	4622      	mov	r2, r4
 800eb18:	4601      	mov	r1, r0
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f005 fea8 	bl	8014870 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f001 fc83 	bl	801042c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eb26:	4b47      	ldr	r3, [pc, #284]	@ (800ec44 <tcp_close_shutdown+0x1b0>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d105      	bne.n	800eb3c <tcp_close_shutdown+0xa8>
 800eb30:	4b44      	ldr	r3, [pc, #272]	@ (800ec44 <tcp_close_shutdown+0x1b0>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4a43      	ldr	r2, [pc, #268]	@ (800ec44 <tcp_close_shutdown+0x1b0>)
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	e013      	b.n	800eb64 <tcp_close_shutdown+0xd0>
 800eb3c:	4b41      	ldr	r3, [pc, #260]	@ (800ec44 <tcp_close_shutdown+0x1b0>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	60fb      	str	r3, [r7, #12]
 800eb42:	e00c      	b.n	800eb5e <tcp_close_shutdown+0xca>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d104      	bne.n	800eb58 <tcp_close_shutdown+0xc4>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68da      	ldr	r2, [r3, #12]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	60da      	str	r2, [r3, #12]
 800eb56:	e005      	b.n	800eb64 <tcp_close_shutdown+0xd0>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1ef      	bne.n	800eb44 <tcp_close_shutdown+0xb0>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	60da      	str	r2, [r3, #12]
 800eb6a:	4b37      	ldr	r3, [pc, #220]	@ (800ec48 <tcp_close_shutdown+0x1b4>)
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800eb70:	4b36      	ldr	r3, [pc, #216]	@ (800ec4c <tcp_close_shutdown+0x1b8>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d102      	bne.n	800eb80 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eb7a:	f004 f91b 	bl	8012db4 <tcp_trigger_input_pcb_close>
 800eb7e:	e002      	b.n	800eb86 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fed5 	bl	800e930 <tcp_free>
      }
      return ERR_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	e050      	b.n	800ec2c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	7d1b      	ldrb	r3, [r3, #20]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d03b      	beq.n	800ec0a <tcp_close_shutdown+0x176>
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	dc44      	bgt.n	800ec20 <tcp_close_shutdown+0x18c>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <tcp_close_shutdown+0x10c>
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d02a      	beq.n	800ebf4 <tcp_close_shutdown+0x160>
 800eb9e:	e03f      	b.n	800ec20 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8adb      	ldrh	r3, [r3, #22]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d021      	beq.n	800ebec <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eba8:	4b29      	ldr	r3, [pc, #164]	@ (800ec50 <tcp_close_shutdown+0x1bc>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d105      	bne.n	800ebbe <tcp_close_shutdown+0x12a>
 800ebb2:	4b27      	ldr	r3, [pc, #156]	@ (800ec50 <tcp_close_shutdown+0x1bc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	4a25      	ldr	r2, [pc, #148]	@ (800ec50 <tcp_close_shutdown+0x1bc>)
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	e013      	b.n	800ebe6 <tcp_close_shutdown+0x152>
 800ebbe:	4b24      	ldr	r3, [pc, #144]	@ (800ec50 <tcp_close_shutdown+0x1bc>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	60bb      	str	r3, [r7, #8]
 800ebc4:	e00c      	b.n	800ebe0 <tcp_close_shutdown+0x14c>
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d104      	bne.n	800ebda <tcp_close_shutdown+0x146>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	60da      	str	r2, [r3, #12]
 800ebd8:	e005      	b.n	800ebe6 <tcp_close_shutdown+0x152>
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	60bb      	str	r3, [r7, #8]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1ef      	bne.n	800ebc6 <tcp_close_shutdown+0x132>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fe9f 	bl	800e930 <tcp_free>
      break;
 800ebf2:	e01a      	b.n	800ec2a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff ff13 	bl	800ea20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	4815      	ldr	r0, [pc, #84]	@ (800ec54 <tcp_close_shutdown+0x1c0>)
 800ebfe:	f001 fc65 	bl	80104cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff feb0 	bl	800e968 <tcp_free_listen>
      break;
 800ec08:	e00f      	b.n	800ec2a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec0a:	6879      	ldr	r1, [r7, #4]
 800ec0c:	480d      	ldr	r0, [pc, #52]	@ (800ec44 <tcp_close_shutdown+0x1b0>)
 800ec0e:	f001 fc5d 	bl	80104cc <tcp_pcb_remove>
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <tcp_close_shutdown+0x1b4>)
 800ec14:	2201      	movs	r2, #1
 800ec16:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff fe89 	bl	800e930 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ec1e:	e004      	b.n	800ec2a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f819 	bl	800ec58 <tcp_close_shutdown_fin>
 800ec26:	4603      	mov	r3, r0
 800ec28:	e000      	b.n	800ec2c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bdb0      	pop	{r4, r5, r7, pc}
 800ec34:	08017c28 	.word	0x08017c28
 800ec38:	08017d34 	.word	0x08017d34
 800ec3c:	08017ca4 	.word	0x08017ca4
 800ec40:	08017d54 	.word	0x08017d54
 800ec44:	24010650 	.word	0x24010650
 800ec48:	24010658 	.word	0x24010658
 800ec4c:	24010690 	.word	0x24010690
 800ec50:	24010648 	.word	0x24010648
 800ec54:	2401064c 	.word	0x2401064c

0800ec58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <tcp_close_shutdown_fin+0x1c>
 800ec66:	4b2e      	ldr	r3, [pc, #184]	@ (800ed20 <tcp_close_shutdown_fin+0xc8>)
 800ec68:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ec6c:	492d      	ldr	r1, [pc, #180]	@ (800ed24 <tcp_close_shutdown_fin+0xcc>)
 800ec6e:	482e      	ldr	r0, [pc, #184]	@ (800ed28 <tcp_close_shutdown_fin+0xd0>)
 800ec70:	f006 fd9c 	bl	80157ac <iprintf>

  switch (pcb->state) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	7d1b      	ldrb	r3, [r3, #20]
 800ec78:	2b07      	cmp	r3, #7
 800ec7a:	d020      	beq.n	800ecbe <tcp_close_shutdown_fin+0x66>
 800ec7c:	2b07      	cmp	r3, #7
 800ec7e:	dc2b      	bgt.n	800ecd8 <tcp_close_shutdown_fin+0x80>
 800ec80:	2b03      	cmp	r3, #3
 800ec82:	d002      	beq.n	800ec8a <tcp_close_shutdown_fin+0x32>
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	d00d      	beq.n	800eca4 <tcp_close_shutdown_fin+0x4c>
 800ec88:	e026      	b.n	800ecd8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f004 fefc 	bl	8013a88 <tcp_send_fin>
 800ec90:	4603      	mov	r3, r0
 800ec92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d11f      	bne.n	800ecdc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2205      	movs	r2, #5
 800eca0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eca2:	e01b      	b.n	800ecdc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f004 feef 	bl	8013a88 <tcp_send_fin>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ecae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d114      	bne.n	800ece0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2205      	movs	r2, #5
 800ecba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ecbc:	e010      	b.n	800ece0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f004 fee2 	bl	8013a88 <tcp_send_fin>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ecc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d109      	bne.n	800ece4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2209      	movs	r2, #9
 800ecd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ecd6:	e005      	b.n	800ece4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	e01c      	b.n	800ed16 <tcp_close_shutdown_fin+0xbe>
      break;
 800ecdc:	bf00      	nop
 800ecde:	e002      	b.n	800ece6 <tcp_close_shutdown_fin+0x8e>
      break;
 800ece0:	bf00      	nop
 800ece2:	e000      	b.n	800ece6 <tcp_close_shutdown_fin+0x8e>
      break;
 800ece4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ece6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d103      	bne.n	800ecf6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f005 f808 	bl	8013d04 <tcp_output>
 800ecf4:	e00d      	b.n	800ed12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ecf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfe:	d108      	bne.n	800ed12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	8b5b      	ldrh	r3, [r3, #26]
 800ed04:	f043 0308 	orr.w	r3, r3, #8
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e001      	b.n	800ed16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ed12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	08017c28 	.word	0x08017c28
 800ed24:	08017d10 	.word	0x08017d10
 800ed28:	08017ca4 	.word	0x08017ca4

0800ed2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ed34:	f7f7 fb32 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d109      	bne.n	800ed52 <tcp_close+0x26>
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed7c <tcp_close+0x50>)
 800ed40:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ed44:	490e      	ldr	r1, [pc, #56]	@ (800ed80 <tcp_close+0x54>)
 800ed46:	480f      	ldr	r0, [pc, #60]	@ (800ed84 <tcp_close+0x58>)
 800ed48:	f006 fd30 	bl	80157ac <iprintf>
 800ed4c:	f06f 030f 	mvn.w	r3, #15
 800ed50:	e00f      	b.n	800ed72 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	7d1b      	ldrb	r3, [r3, #20]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d006      	beq.n	800ed68 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8b5b      	ldrh	r3, [r3, #26]
 800ed5e:	f043 0310 	orr.w	r3, r3, #16
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ed68:	2101      	movs	r1, #1
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff fe92 	bl	800ea94 <tcp_close_shutdown>
 800ed70:	4603      	mov	r3, r0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	08017c28 	.word	0x08017c28
 800ed80:	08017d70 	.word	0x08017d70
 800ed84:	08017ca4 	.word	0x08017ca4

0800ed88 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b08e      	sub	sp, #56	@ 0x38
 800ed8c:	af04      	add	r7, sp, #16
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 800ed92:	f7f7 fb03 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d107      	bne.n	800edac <tcp_abandon+0x24>
 800ed9c:	4b52      	ldr	r3, [pc, #328]	@ (800eee8 <tcp_abandon+0x160>)
 800ed9e:	f240 223d 	movw	r2, #573	@ 0x23d
 800eda2:	4952      	ldr	r1, [pc, #328]	@ (800eeec <tcp_abandon+0x164>)
 800eda4:	4852      	ldr	r0, [pc, #328]	@ (800eef0 <tcp_abandon+0x168>)
 800eda6:	f006 fd01 	bl	80157ac <iprintf>
 800edaa:	e099      	b.n	800eee0 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7d1b      	ldrb	r3, [r3, #20]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d106      	bne.n	800edc2 <tcp_abandon+0x3a>
 800edb4:	4b4c      	ldr	r3, [pc, #304]	@ (800eee8 <tcp_abandon+0x160>)
 800edb6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800edba:	494e      	ldr	r1, [pc, #312]	@ (800eef4 <tcp_abandon+0x16c>)
 800edbc:	484c      	ldr	r0, [pc, #304]	@ (800eef0 <tcp_abandon+0x168>)
 800edbe:	f006 fcf5 	bl	80157ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	2b0a      	cmp	r3, #10
 800edc8:	d107      	bne.n	800edda <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	484a      	ldr	r0, [pc, #296]	@ (800eef8 <tcp_abandon+0x170>)
 800edce:	f001 fb7d 	bl	80104cc <tcp_pcb_remove>
    tcp_free(pcb);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff fdac 	bl	800e930 <tcp_free>
 800edd8:	e082      	b.n	800eee0 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edf4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	7d1b      	ldrb	r3, [r3, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d126      	bne.n	800ee52 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8adb      	ldrh	r3, [r3, #22]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d02e      	beq.n	800ee6a <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee0c:	4b3b      	ldr	r3, [pc, #236]	@ (800eefc <tcp_abandon+0x174>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d105      	bne.n	800ee22 <tcp_abandon+0x9a>
 800ee16:	4b39      	ldr	r3, [pc, #228]	@ (800eefc <tcp_abandon+0x174>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	4a37      	ldr	r2, [pc, #220]	@ (800eefc <tcp_abandon+0x174>)
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	e013      	b.n	800ee4a <tcp_abandon+0xc2>
 800ee22:	4b36      	ldr	r3, [pc, #216]	@ (800eefc <tcp_abandon+0x174>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	61fb      	str	r3, [r7, #28]
 800ee28:	e00c      	b.n	800ee44 <tcp_abandon+0xbc>
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d104      	bne.n	800ee3e <tcp_abandon+0xb6>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	68da      	ldr	r2, [r3, #12]
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	60da      	str	r2, [r3, #12]
 800ee3c:	e005      	b.n	800ee4a <tcp_abandon+0xc2>
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	61fb      	str	r3, [r7, #28]
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1ef      	bne.n	800ee2a <tcp_abandon+0xa2>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	60da      	str	r2, [r3, #12]
 800ee50:	e00b      	b.n	800ee6a <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8adb      	ldrh	r3, [r3, #22]
 800ee5a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee5c:	6879      	ldr	r1, [r7, #4]
 800ee5e:	4828      	ldr	r0, [pc, #160]	@ (800ef00 <tcp_abandon+0x178>)
 800ee60:	f001 fb34 	bl	80104cc <tcp_pcb_remove>
 800ee64:	4b27      	ldr	r3, [pc, #156]	@ (800ef04 <tcp_abandon+0x17c>)
 800ee66:	2201      	movs	r2, #1
 800ee68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d004      	beq.n	800ee7c <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee76:	4618      	mov	r0, r3
 800ee78:	f000 fffe 	bl	800fe78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d004      	beq.n	800ee8e <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f000 fff5 	bl	800fe78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d004      	beq.n	800eea0 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 ffec 	bl	800fe78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800eea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00e      	beq.n	800eec4 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	8b12      	ldrh	r2, [r2, #24]
 800eeb0:	9202      	str	r2, [sp, #8]
 800eeb2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eeb4:	9201      	str	r2, [sp, #4]
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	69b9      	ldr	r1, [r7, #24]
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f005 fcd6 	bl	8014870 <tcp_rst>
    }
    last_state = pcb->state;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7d1b      	ldrb	r3, [r3, #20]
 800eec8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7ff fd30 	bl	800e930 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d004      	beq.n	800eee0 <tcp_abandon+0x158>
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	f06f 010c 	mvn.w	r1, #12
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	4798      	blx	r3
  }
}
 800eee0:	3728      	adds	r7, #40	@ 0x28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	08017c28 	.word	0x08017c28
 800eeec:	08017da4 	.word	0x08017da4
 800eef0:	08017ca4 	.word	0x08017ca4
 800eef4:	08017dc0 	.word	0x08017dc0
 800eef8:	24010654 	.word	0x24010654
 800eefc:	24010648 	.word	0x24010648
 800ef00:	24010650 	.word	0x24010650
 800ef04:	24010658 	.word	0x24010658

0800ef08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ef10:	2101      	movs	r1, #1
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff ff38 	bl	800ed88 <tcp_abandon>
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ef2e:	2304      	movs	r3, #4
 800ef30:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800ef32:	f7f7 fa33 	bl	800639c <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 800ef3c:	4b3e      	ldr	r3, [pc, #248]	@ (800f038 <tcp_bind+0x118>)
 800ef3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d109      	bne.n	800ef5a <tcp_bind+0x3a>
 800ef46:	4b3d      	ldr	r3, [pc, #244]	@ (800f03c <tcp_bind+0x11c>)
 800ef48:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800ef4c:	493c      	ldr	r1, [pc, #240]	@ (800f040 <tcp_bind+0x120>)
 800ef4e:	483d      	ldr	r0, [pc, #244]	@ (800f044 <tcp_bind+0x124>)
 800ef50:	f006 fc2c 	bl	80157ac <iprintf>
 800ef54:	f06f 030f 	mvn.w	r3, #15
 800ef58:	e06a      	b.n	800f030 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	7d1b      	ldrb	r3, [r3, #20]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d009      	beq.n	800ef76 <tcp_bind+0x56>
 800ef62:	4b36      	ldr	r3, [pc, #216]	@ (800f03c <tcp_bind+0x11c>)
 800ef64:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ef68:	4937      	ldr	r1, [pc, #220]	@ (800f048 <tcp_bind+0x128>)
 800ef6a:	4836      	ldr	r0, [pc, #216]	@ (800f044 <tcp_bind+0x124>)
 800ef6c:	f006 fc1e 	bl	80157ac <iprintf>
 800ef70:	f06f 0305 	mvn.w	r3, #5
 800ef74:	e05c      	b.n	800f030 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ef76:	88fb      	ldrh	r3, [r7, #6]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d109      	bne.n	800ef90 <tcp_bind+0x70>
    port = tcp_new_port();
 800ef7c:	f000 f9f8 	bl	800f370 <tcp_new_port>
 800ef80:	4603      	mov	r3, r0
 800ef82:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d135      	bne.n	800eff6 <tcp_bind+0xd6>
      return ERR_BUF;
 800ef8a:	f06f 0301 	mvn.w	r3, #1
 800ef8e:	e04f      	b.n	800f030 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ef90:	2300      	movs	r3, #0
 800ef92:	61fb      	str	r3, [r7, #28]
 800ef94:	e02b      	b.n	800efee <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ef96:	4a2d      	ldr	r2, [pc, #180]	@ (800f04c <tcp_bind+0x12c>)
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	e01e      	b.n	800efe2 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	8adb      	ldrh	r3, [r3, #22]
 800efa8:	88fa      	ldrh	r2, [r7, #6]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d116      	bne.n	800efdc <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800efae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d010      	beq.n	800efd6 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00c      	beq.n	800efd6 <tcp_bind+0xb6>
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d009      	beq.n	800efd6 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d005      	beq.n	800efd6 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d102      	bne.n	800efdc <tcp_bind+0xbc>
              return ERR_USE;
 800efd6:	f06f 0307 	mvn.w	r3, #7
 800efda:	e029      	b.n	800f030 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1dd      	bne.n	800efa4 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	3301      	adds	r3, #1
 800efec:	61fb      	str	r3, [r7, #28]
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	dbcf      	blt.n	800ef96 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00c      	beq.n	800f016 <tcp_bind+0xf6>
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d008      	beq.n	800f016 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <tcp_bind+0xf0>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	e000      	b.n	800f012 <tcp_bind+0xf2>
 800f010:	2300      	movs	r3, #0
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	88fa      	ldrh	r2, [r7, #6]
 800f01a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f01c:	4b0c      	ldr	r3, [pc, #48]	@ (800f050 <tcp_bind+0x130>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	60da      	str	r2, [r3, #12]
 800f024:	4a0a      	ldr	r2, [pc, #40]	@ (800f050 <tcp_bind+0x130>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6013      	str	r3, [r2, #0]
 800f02a:	f005 ff81 	bl	8014f30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3720      	adds	r7, #32
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	08019d40 	.word	0x08019d40
 800f03c:	08017c28 	.word	0x08017c28
 800f040:	08017df4 	.word	0x08017df4
 800f044:	08017ca4 	.word	0x08017ca4
 800f048:	08017e0c 	.word	0x08017e0c
 800f04c:	08019e2c 	.word	0x08019e2c
 800f050:	24010648 	.word	0x24010648

0800f054 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	4613      	mov	r3, r2
 800f060:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d106      	bne.n	800f076 <tcp_accept_null+0x22>
 800f068:	4b07      	ldr	r3, [pc, #28]	@ (800f088 <tcp_accept_null+0x34>)
 800f06a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f06e:	4907      	ldr	r1, [pc, #28]	@ (800f08c <tcp_accept_null+0x38>)
 800f070:	4807      	ldr	r0, [pc, #28]	@ (800f090 <tcp_accept_null+0x3c>)
 800f072:	f006 fb9b 	bl	80157ac <iprintf>

  tcp_abort(pcb);
 800f076:	68b8      	ldr	r0, [r7, #8]
 800f078:	f7ff ff46 	bl	800ef08 <tcp_abort>

  return ERR_ABRT;
 800f07c:	f06f 030c 	mvn.w	r3, #12
}
 800f080:	4618      	mov	r0, r3
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	08017c28 	.word	0x08017c28
 800f08c:	08017e34 	.word	0x08017e34
 800f090:	08017ca4 	.word	0x08017ca4

0800f094 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
 800f0a0:	f7f7 f97c 	bl	800639c <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f0a4:	78fb      	ldrb	r3, [r7, #3]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f806 	bl	800f0bc <tcp_listen_with_backlog_and_err>
 800f0b0:	4603      	mov	r3, r0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
	...

0800f0bc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b088      	sub	sp, #32
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();
 800f0ce:	f7f7 f965 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <tcp_listen_with_backlog_and_err+0x30>
 800f0d8:	4b47      	ldr	r3, [pc, #284]	@ (800f1f8 <tcp_listen_with_backlog_and_err+0x13c>)
 800f0da:	f240 3259 	movw	r2, #857	@ 0x359
 800f0de:	4947      	ldr	r1, [pc, #284]	@ (800f1fc <tcp_listen_with_backlog_and_err+0x140>)
 800f0e0:	4847      	ldr	r0, [pc, #284]	@ (800f200 <tcp_listen_with_backlog_and_err+0x144>)
 800f0e2:	f006 fb63 	bl	80157ac <iprintf>
 800f0e6:	23f0      	movs	r3, #240	@ 0xf0
 800f0e8:	76fb      	strb	r3, [r7, #27]
 800f0ea:	e079      	b.n	800f1e0 <tcp_listen_with_backlog_and_err+0x124>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	7d1b      	ldrb	r3, [r3, #20]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d009      	beq.n	800f108 <tcp_listen_with_backlog_and_err+0x4c>
 800f0f4:	4b40      	ldr	r3, [pc, #256]	@ (800f1f8 <tcp_listen_with_backlog_and_err+0x13c>)
 800f0f6:	f240 325a 	movw	r2, #858	@ 0x35a
 800f0fa:	4942      	ldr	r1, [pc, #264]	@ (800f204 <tcp_listen_with_backlog_and_err+0x148>)
 800f0fc:	4840      	ldr	r0, [pc, #256]	@ (800f200 <tcp_listen_with_backlog_and_err+0x144>)
 800f0fe:	f006 fb55 	bl	80157ac <iprintf>
 800f102:	23f1      	movs	r3, #241	@ 0xf1
 800f104:	76fb      	strb	r3, [r7, #27]
 800f106:	e06b      	b.n	800f1e0 <tcp_listen_with_backlog_and_err+0x124>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	7d1b      	ldrb	r3, [r3, #20]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d104      	bne.n	800f11a <tcp_listen_with_backlog_and_err+0x5e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f114:	23f7      	movs	r3, #247	@ 0xf7
 800f116:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f118:	e062      	b.n	800f1e0 <tcp_listen_with_backlog_and_err+0x124>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f11a:	2002      	movs	r0, #2
 800f11c:	f7fe f88c 	bl	800d238 <memp_malloc>
 800f120:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d102      	bne.n	800f12e <tcp_listen_with_backlog_and_err+0x72>
    res = ERR_MEM;
 800f128:	23ff      	movs	r3, #255	@ 0xff
 800f12a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f12c:	e058      	b.n	800f1e0 <tcp_listen_with_backlog_and_err+0x124>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	691a      	ldr	r2, [r3, #16]
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	8ada      	ldrh	r2, [r3, #22]
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	2201      	movs	r2, #1
 800f142:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	7d5a      	ldrb	r2, [r3, #21]
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	7a5a      	ldrb	r2, [r3, #9]
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	2200      	movs	r2, #0
 800f158:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	7ada      	ldrb	r2, [r3, #11]
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	7a9a      	ldrb	r2, [r3, #10]
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	8adb      	ldrh	r3, [r3, #22]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d021      	beq.n	800f1be <tcp_listen_with_backlog_and_err+0x102>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f17a:	4b23      	ldr	r3, [pc, #140]	@ (800f208 <tcp_listen_with_backlog_and_err+0x14c>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	429a      	cmp	r2, r3
 800f182:	d105      	bne.n	800f190 <tcp_listen_with_backlog_and_err+0xd4>
 800f184:	4b20      	ldr	r3, [pc, #128]	@ (800f208 <tcp_listen_with_backlog_and_err+0x14c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	4a1f      	ldr	r2, [pc, #124]	@ (800f208 <tcp_listen_with_backlog_and_err+0x14c>)
 800f18c:	6013      	str	r3, [r2, #0]
 800f18e:	e013      	b.n	800f1b8 <tcp_listen_with_backlog_and_err+0xfc>
 800f190:	4b1d      	ldr	r3, [pc, #116]	@ (800f208 <tcp_listen_with_backlog_and_err+0x14c>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	617b      	str	r3, [r7, #20]
 800f196:	e00c      	b.n	800f1b2 <tcp_listen_with_backlog_and_err+0xf6>
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d104      	bne.n	800f1ac <tcp_listen_with_backlog_and_err+0xf0>
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	68da      	ldr	r2, [r3, #12]
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	60da      	str	r2, [r3, #12]
 800f1aa:	e005      	b.n	800f1b8 <tcp_listen_with_backlog_and_err+0xfc>
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	617b      	str	r3, [r7, #20]
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1ef      	bne.n	800f198 <tcp_listen_with_backlog_and_err+0xdc>
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff fbb6 	bl	800e930 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	4a11      	ldr	r2, [pc, #68]	@ (800f20c <tcp_listen_with_backlog_and_err+0x150>)
 800f1c8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f1ca:	4b11      	ldr	r3, [pc, #68]	@ (800f210 <tcp_listen_with_backlog_and_err+0x154>)
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	60da      	str	r2, [r3, #12]
 800f1d2:	4a0f      	ldr	r2, [pc, #60]	@ (800f210 <tcp_listen_with_backlog_and_err+0x154>)
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	6013      	str	r3, [r2, #0]
 800f1d8:	f005 feaa 	bl	8014f30 <tcp_timer_needed>
  res = ERR_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <tcp_listen_with_backlog_and_err+0x130>
    *err = res;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	7efa      	ldrb	r2, [r7, #27]
 800f1ea:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f1ec:	69fb      	ldr	r3, [r7, #28]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3720      	adds	r7, #32
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	08017c28 	.word	0x08017c28
 800f1fc:	08017e54 	.word	0x08017e54
 800f200:	08017ca4 	.word	0x08017ca4
 800f204:	08017e84 	.word	0x08017e84
 800f208:	24010648 	.word	0x24010648
 800f20c:	0800f055 	.word	0x0800f055
 800f210:	2401064c 	.word	0x2401064c

0800f214 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <tcp_update_rcv_ann_wnd+0x1c>
 800f222:	4b25      	ldr	r3, [pc, #148]	@ (800f2b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f224:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f228:	4924      	ldr	r1, [pc, #144]	@ (800f2bc <tcp_update_rcv_ann_wnd+0xa8>)
 800f22a:	4825      	ldr	r0, [pc, #148]	@ (800f2c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f22c:	f006 fabe 	bl	80157ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f238:	4413      	add	r3, r2
 800f23a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f244:	f640 3168 	movw	r1, #2920	@ 0xb68
 800f248:	428a      	cmp	r2, r1
 800f24a:	bf28      	it	cs
 800f24c:	460a      	movcs	r2, r1
 800f24e:	b292      	uxth	r2, r2
 800f250:	4413      	add	r3, r2
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	db08      	blt.n	800f26c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	e020      	b.n	800f2ae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f274:	1ad3      	subs	r3, r2, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	dd03      	ble.n	800f282 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f280:	e014      	b.n	800f2ac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f294:	d306      	bcc.n	800f2a4 <tcp_update_rcv_ann_wnd+0x90>
 800f296:	4b08      	ldr	r3, [pc, #32]	@ (800f2b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f298:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f29c:	4909      	ldr	r1, [pc, #36]	@ (800f2c4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f29e:	4808      	ldr	r0, [pc, #32]	@ (800f2c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f2a0:	f006 fa84 	bl	80157ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f2ac:	2300      	movs	r3, #0
  }
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	08017c28 	.word	0x08017c28
 800f2bc:	08017ebc 	.word	0x08017ebc
 800f2c0:	08017ca4 	.word	0x08017ca4
 800f2c4:	08017ee0 	.word	0x08017ee0

0800f2c8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 800f2d4:	f7f7 f862 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d107      	bne.n	800f2ee <tcp_recved+0x26>
 800f2de:	4b20      	ldr	r3, [pc, #128]	@ (800f360 <tcp_recved+0x98>)
 800f2e0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f2e4:	491f      	ldr	r1, [pc, #124]	@ (800f364 <tcp_recved+0x9c>)
 800f2e6:	4820      	ldr	r0, [pc, #128]	@ (800f368 <tcp_recved+0xa0>)
 800f2e8:	f006 fa60 	bl	80157ac <iprintf>
 800f2ec:	e034      	b.n	800f358 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	7d1b      	ldrb	r3, [r3, #20]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d106      	bne.n	800f304 <tcp_recved+0x3c>
 800f2f6:	4b1a      	ldr	r3, [pc, #104]	@ (800f360 <tcp_recved+0x98>)
 800f2f8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f2fc:	491b      	ldr	r1, [pc, #108]	@ (800f36c <tcp_recved+0xa4>)
 800f2fe:	481a      	ldr	r0, [pc, #104]	@ (800f368 <tcp_recved+0xa0>)
 800f300:	f006 fa54 	bl	80157ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f308:	887b      	ldrh	r3, [r7, #2]
 800f30a:	4413      	add	r3, r2
 800f30c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f30e:	89fb      	ldrh	r3, [r7, #14]
 800f310:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f314:	4293      	cmp	r3, r2
 800f316:	d804      	bhi.n	800f322 <tcp_recved+0x5a>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f31c:	89fa      	ldrh	r2, [r7, #14]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d204      	bcs.n	800f32c <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f328:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f32a:	e002      	b.n	800f332 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	89fa      	ldrh	r2, [r7, #14]
 800f330:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff ff6e 	bl	800f214 <tcp_update_rcv_ann_wnd>
 800f338:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f340:	4293      	cmp	r3, r2
 800f342:	d909      	bls.n	800f358 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	8b5b      	ldrh	r3, [r3, #26]
 800f348:	f043 0302 	orr.w	r3, r3, #2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f004 fcd6 	bl	8013d04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	08017c28 	.word	0x08017c28
 800f364:	08017efc 	.word	0x08017efc
 800f368:	08017ca4 	.word	0x08017ca4
 800f36c:	08017f14 	.word	0x08017f14

0800f370 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f37a:	4b1e      	ldr	r3, [pc, #120]	@ (800f3f4 <tcp_new_port+0x84>)
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	3301      	adds	r3, #1
 800f380:	b29a      	uxth	r2, r3
 800f382:	4b1c      	ldr	r3, [pc, #112]	@ (800f3f4 <tcp_new_port+0x84>)
 800f384:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f386:	4b1b      	ldr	r3, [pc, #108]	@ (800f3f4 <tcp_new_port+0x84>)
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f38e:	4293      	cmp	r3, r2
 800f390:	d103      	bne.n	800f39a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f392:	4b18      	ldr	r3, [pc, #96]	@ (800f3f4 <tcp_new_port+0x84>)
 800f394:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f398:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f39a:	2300      	movs	r3, #0
 800f39c:	71fb      	strb	r3, [r7, #7]
 800f39e:	e01e      	b.n	800f3de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	4a15      	ldr	r2, [pc, #84]	@ (800f3f8 <tcp_new_port+0x88>)
 800f3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	603b      	str	r3, [r7, #0]
 800f3ac:	e011      	b.n	800f3d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	8ada      	ldrh	r2, [r3, #22]
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <tcp_new_port+0x84>)
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d108      	bne.n	800f3cc <tcp_new_port+0x5c>
        n++;
 800f3ba:	88bb      	ldrh	r3, [r7, #4]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f3c0:	88bb      	ldrh	r3, [r7, #4]
 800f3c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f3c6:	d3d8      	bcc.n	800f37a <tcp_new_port+0xa>
          return 0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e00d      	b.n	800f3e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	603b      	str	r3, [r7, #0]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1ea      	bne.n	800f3ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f3d8:	79fb      	ldrb	r3, [r7, #7]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	71fb      	strb	r3, [r7, #7]
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	2b03      	cmp	r3, #3
 800f3e2:	d9dd      	bls.n	800f3a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f3e4:	4b03      	ldr	r3, [pc, #12]	@ (800f3f4 <tcp_new_port+0x84>)
 800f3e6:	881b      	ldrh	r3, [r3, #0]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	24000028 	.word	0x24000028
 800f3f8:	08019e2c 	.word	0x08019e2c

0800f3fc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	@ 0x28
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	603b      	str	r3, [r7, #0]
 800f408:	4613      	mov	r3, r2
 800f40a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f40c:	2300      	movs	r3, #0
 800f40e:	627b      	str	r3, [r7, #36]	@ 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800f410:	f7f6 ffc4 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d109      	bne.n	800f42e <tcp_connect+0x32>
 800f41a:	4b7d      	ldr	r3, [pc, #500]	@ (800f610 <tcp_connect+0x214>)
 800f41c:	f240 4235 	movw	r2, #1077	@ 0x435
 800f420:	497c      	ldr	r1, [pc, #496]	@ (800f614 <tcp_connect+0x218>)
 800f422:	487d      	ldr	r0, [pc, #500]	@ (800f618 <tcp_connect+0x21c>)
 800f424:	f006 f9c2 	bl	80157ac <iprintf>
 800f428:	f06f 030f 	mvn.w	r3, #15
 800f42c:	e0ec      	b.n	800f608 <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <tcp_connect+0x4c>
 800f434:	4b76      	ldr	r3, [pc, #472]	@ (800f610 <tcp_connect+0x214>)
 800f436:	f240 4236 	movw	r2, #1078	@ 0x436
 800f43a:	4978      	ldr	r1, [pc, #480]	@ (800f61c <tcp_connect+0x220>)
 800f43c:	4876      	ldr	r0, [pc, #472]	@ (800f618 <tcp_connect+0x21c>)
 800f43e:	f006 f9b5 	bl	80157ac <iprintf>
 800f442:	f06f 030f 	mvn.w	r3, #15
 800f446:	e0df      	b.n	800f608 <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d009      	beq.n	800f464 <tcp_connect+0x68>
 800f450:	4b6f      	ldr	r3, [pc, #444]	@ (800f610 <tcp_connect+0x214>)
 800f452:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800f456:	4972      	ldr	r1, [pc, #456]	@ (800f620 <tcp_connect+0x224>)
 800f458:	486f      	ldr	r0, [pc, #444]	@ (800f618 <tcp_connect+0x21c>)
 800f45a:	f006 f9a7 	bl	80157ac <iprintf>
 800f45e:	f06f 0309 	mvn.w	r3, #9
 800f462:	e0d1      	b.n	800f608 <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d002      	beq.n	800f470 <tcp_connect+0x74>
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	e000      	b.n	800f472 <tcp_connect+0x76>
 800f470:	2300      	movs	r3, #0
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	88fa      	ldrh	r2, [r7, #6]
 800f47a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	7a1b      	ldrb	r3, [r3, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	7a1b      	ldrb	r3, [r3, #8]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fa6d 	bl	800d968 <netif_get_by_index>
 800f48e:	6278      	str	r0, [r7, #36]	@ 0x24
 800f490:	e005      	b.n	800f49e <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3304      	adds	r3, #4
 800f496:	4618      	mov	r0, r3
 800f498:	f7fc f938 	bl	800b70c <ip4_route>
 800f49c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800f49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d102      	bne.n	800f4aa <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f4a4:	f06f 0303 	mvn.w	r3, #3
 800f4a8:	e0ae      	b.n	800f608 <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <tcp_connect+0xbc>
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d111      	bne.n	800f4dc <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <tcp_connect+0xc8>
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	e000      	b.n	800f4c6 <tcp_connect+0xca>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d102      	bne.n	800f4d4 <tcp_connect+0xd8>
      return ERR_RTE;
 800f4ce:	f06f 0303 	mvn.w	r3, #3
 800f4d2:	e099      	b.n	800f608 <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8adb      	ldrh	r3, [r3, #22]
 800f4e0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	8adb      	ldrh	r3, [r3, #22]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10c      	bne.n	800f504 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 800f4ea:	f7ff ff41 	bl	800f370 <tcp_new_port>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	8adb      	ldrh	r3, [r3, #22]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d102      	bne.n	800f504 <tcp_connect+0x108>
      return ERR_BUF;
 800f4fe:	f06f 0301 	mvn.w	r3, #1
 800f502:	e081      	b.n	800f608 <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f001 f875 	bl	80105f4 <tcp_next_iss>
 800f50a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2200      	movs	r2, #0
 800f510:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	1e5a      	subs	r2, r3, #1
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	1e5a      	subs	r2, r3, #1
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	1e5a      	subs	r2, r3, #1
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f536:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f54e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f558:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3304      	adds	r3, #4
 800f562:	461a      	mov	r2, r3
 800f564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f566:	f001 f86b 	bl	8010640 <tcp_eff_send_mss_netif>
 800f56a:	4603      	mov	r3, r0
 800f56c:	461a      	mov	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2201      	movs	r2, #1
 800f576:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f582:	2102      	movs	r1, #2
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f004 facf 	bl	8013b28 <tcp_enqueue_flags>
 800f58a:	4603      	mov	r3, r0
 800f58c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f58e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d136      	bne.n	800f604 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2202      	movs	r2, #2
 800f59a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f59c:	8b7b      	ldrh	r3, [r7, #26]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d021      	beq.n	800f5e6 <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f5a2:	4b20      	ldr	r3, [pc, #128]	@ (800f624 <tcp_connect+0x228>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d105      	bne.n	800f5b8 <tcp_connect+0x1bc>
 800f5ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f624 <tcp_connect+0x228>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	4a1c      	ldr	r2, [pc, #112]	@ (800f624 <tcp_connect+0x228>)
 800f5b4:	6013      	str	r3, [r2, #0]
 800f5b6:	e013      	b.n	800f5e0 <tcp_connect+0x1e4>
 800f5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f624 <tcp_connect+0x228>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	623b      	str	r3, [r7, #32]
 800f5be:	e00c      	b.n	800f5da <tcp_connect+0x1de>
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d104      	bne.n	800f5d4 <tcp_connect+0x1d8>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	6a3b      	ldr	r3, [r7, #32]
 800f5d0:	60da      	str	r2, [r3, #12]
 800f5d2:	e005      	b.n	800f5e0 <tcp_connect+0x1e4>
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	623b      	str	r3, [r7, #32]
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1ef      	bne.n	800f5c0 <tcp_connect+0x1c4>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f5e6:	4b10      	ldr	r3, [pc, #64]	@ (800f628 <tcp_connect+0x22c>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	60da      	str	r2, [r3, #12]
 800f5ee:	4a0e      	ldr	r2, [pc, #56]	@ (800f628 <tcp_connect+0x22c>)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	f005 fc9c 	bl	8014f30 <tcp_timer_needed>
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f62c <tcp_connect+0x230>)
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f004 fb80 	bl	8013d04 <tcp_output>
  }
  return ret;
 800f604:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3728      	adds	r7, #40	@ 0x28
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	08017c28 	.word	0x08017c28
 800f614:	08017f3c 	.word	0x08017f3c
 800f618:	08017ca4 	.word	0x08017ca4
 800f61c:	08017f58 	.word	0x08017f58
 800f620:	08017f74 	.word	0x08017f74
 800f624:	24010648 	.word	0x24010648
 800f628:	24010650 	.word	0x24010650
 800f62c:	24010658 	.word	0x24010658

0800f630 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f630:	b5b0      	push	{r4, r5, r7, lr}
 800f632:	b090      	sub	sp, #64	@ 0x40
 800f634:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f636:	2300      	movs	r3, #0
 800f638:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f63c:	4b95      	ldr	r3, [pc, #596]	@ (800f894 <tcp_slowtmr+0x264>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3301      	adds	r3, #1
 800f642:	4a94      	ldr	r2, [pc, #592]	@ (800f894 <tcp_slowtmr+0x264>)
 800f644:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f646:	4b94      	ldr	r3, [pc, #592]	@ (800f898 <tcp_slowtmr+0x268>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	3301      	adds	r3, #1
 800f64c:	b2da      	uxtb	r2, r3
 800f64e:	4b92      	ldr	r3, [pc, #584]	@ (800f898 <tcp_slowtmr+0x268>)
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	e000      	b.n	800f656 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f654:	bf00      	nop
  prev = NULL;
 800f656:	2300      	movs	r3, #0
 800f658:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f65a:	4b90      	ldr	r3, [pc, #576]	@ (800f89c <tcp_slowtmr+0x26c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f660:	e29d      	b.n	800fb9e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f664:	7d1b      	ldrb	r3, [r3, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <tcp_slowtmr+0x48>
 800f66a:	4b8d      	ldr	r3, [pc, #564]	@ (800f8a0 <tcp_slowtmr+0x270>)
 800f66c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f670:	498c      	ldr	r1, [pc, #560]	@ (800f8a4 <tcp_slowtmr+0x274>)
 800f672:	488d      	ldr	r0, [pc, #564]	@ (800f8a8 <tcp_slowtmr+0x278>)
 800f674:	f006 f89a 	bl	80157ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67a:	7d1b      	ldrb	r3, [r3, #20]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d106      	bne.n	800f68e <tcp_slowtmr+0x5e>
 800f680:	4b87      	ldr	r3, [pc, #540]	@ (800f8a0 <tcp_slowtmr+0x270>)
 800f682:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f686:	4989      	ldr	r1, [pc, #548]	@ (800f8ac <tcp_slowtmr+0x27c>)
 800f688:	4887      	ldr	r0, [pc, #540]	@ (800f8a8 <tcp_slowtmr+0x278>)
 800f68a:	f006 f88f 	bl	80157ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	2b0a      	cmp	r3, #10
 800f694:	d106      	bne.n	800f6a4 <tcp_slowtmr+0x74>
 800f696:	4b82      	ldr	r3, [pc, #520]	@ (800f8a0 <tcp_slowtmr+0x270>)
 800f698:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f69c:	4984      	ldr	r1, [pc, #528]	@ (800f8b0 <tcp_slowtmr+0x280>)
 800f69e:	4882      	ldr	r0, [pc, #520]	@ (800f8a8 <tcp_slowtmr+0x278>)
 800f6a0:	f006 f884 	bl	80157ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a6:	7f9a      	ldrb	r2, [r3, #30]
 800f6a8:	4b7b      	ldr	r3, [pc, #492]	@ (800f898 <tcp_slowtmr+0x268>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d105      	bne.n	800f6bc <tcp_slowtmr+0x8c>
      prev = pcb;
 800f6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f6ba:	e270      	b.n	800fb9e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f6bc:	4b76      	ldr	r3, [pc, #472]	@ (800f898 <tcp_slowtmr+0x268>)
 800f6be:	781a      	ldrb	r2, [r3, #0]
 800f6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6d2:	7d1b      	ldrb	r3, [r3, #20]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d10a      	bne.n	800f6ee <tcp_slowtmr+0xbe>
 800f6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f6de:	2b05      	cmp	r3, #5
 800f6e0:	d905      	bls.n	800f6ee <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f6ec:	e11e      	b.n	800f92c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f6f4:	2b0b      	cmp	r3, #11
 800f6f6:	d905      	bls.n	800f704 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f702:	e113      	b.n	800f92c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f706:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d075      	beq.n	800f7fa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f712:	2b00      	cmp	r3, #0
 800f714:	d006      	beq.n	800f724 <tcp_slowtmr+0xf4>
 800f716:	4b62      	ldr	r3, [pc, #392]	@ (800f8a0 <tcp_slowtmr+0x270>)
 800f718:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f71c:	4965      	ldr	r1, [pc, #404]	@ (800f8b4 <tcp_slowtmr+0x284>)
 800f71e:	4862      	ldr	r0, [pc, #392]	@ (800f8a8 <tcp_slowtmr+0x278>)
 800f720:	f006 f844 	bl	80157ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d106      	bne.n	800f73a <tcp_slowtmr+0x10a>
 800f72c:	4b5c      	ldr	r3, [pc, #368]	@ (800f8a0 <tcp_slowtmr+0x270>)
 800f72e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f732:	4961      	ldr	r1, [pc, #388]	@ (800f8b8 <tcp_slowtmr+0x288>)
 800f734:	485c      	ldr	r0, [pc, #368]	@ (800f8a8 <tcp_slowtmr+0x278>)
 800f736:	f006 f839 	bl	80157ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f73c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f740:	2b0b      	cmp	r3, #11
 800f742:	d905      	bls.n	800f750 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f748:	3301      	adds	r3, #1
 800f74a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f74e:	e0ed      	b.n	800f92c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f752:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f756:	3b01      	subs	r3, #1
 800f758:	4a58      	ldr	r2, [pc, #352]	@ (800f8bc <tcp_slowtmr+0x28c>)
 800f75a:	5cd3      	ldrb	r3, [r2, r3]
 800f75c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f760:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f764:	7c7a      	ldrb	r2, [r7, #17]
 800f766:	429a      	cmp	r2, r3
 800f768:	d907      	bls.n	800f77a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f770:	3301      	adds	r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f776:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f780:	7c7a      	ldrb	r2, [r7, #17]
 800f782:	429a      	cmp	r2, r3
 800f784:	f200 80d2 	bhi.w	800f92c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f788:	2301      	movs	r3, #1
 800f78a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f78e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f792:	2b00      	cmp	r3, #0
 800f794:	d108      	bne.n	800f7a8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f796:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f798:	f005 f95e 	bl	8014a58 <tcp_zero_window_probe>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d014      	beq.n	800f7cc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	623b      	str	r3, [r7, #32]
 800f7a6:	e011      	b.n	800f7cc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7b2:	f004 f821 	bl	80137f8 <tcp_split_unsent_seg>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d107      	bne.n	800f7cc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f7bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7be:	f004 faa1 	bl	8013d04 <tcp_output>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80ac 	beq.w	800f92c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	f200 80a2 	bhi.w	800f92c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b2da      	uxtb	r2, r3
 800f7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f7f8:	e098      	b.n	800f92c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f800:	2b00      	cmp	r3, #0
 800f802:	db0f      	blt.n	800f824 <tcp_slowtmr+0x1f4>
 800f804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f806:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f80a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f80e:	4293      	cmp	r3, r2
 800f810:	d008      	beq.n	800f824 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f818:	b29b      	uxth	r3, r3
 800f81a:	3301      	adds	r3, #1
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	b21a      	sxth	r2, r3
 800f820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f822:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f826:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f82c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f830:	429a      	cmp	r2, r3
 800f832:	db7b      	blt.n	800f92c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f836:	f004 fd5b 	bl	80142f0 <tcp_rexmit_rto_prepare>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <tcp_slowtmr+0x220>
 800f840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f844:	2b00      	cmp	r3, #0
 800f846:	d171      	bne.n	800f92c <tcp_slowtmr+0x2fc>
 800f848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f84a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d06d      	beq.n	800f92c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f852:	7d1b      	ldrb	r3, [r3, #20]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d03a      	beq.n	800f8ce <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f85a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f85e:	2b0c      	cmp	r3, #12
 800f860:	bf28      	it	cs
 800f862:	230c      	movcs	r3, #12
 800f864:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f86c:	10db      	asrs	r3, r3, #3
 800f86e:	b21b      	sxth	r3, r3
 800f870:	461a      	mov	r2, r3
 800f872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f874:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f878:	4413      	add	r3, r2
 800f87a:	7efa      	ldrb	r2, [r7, #27]
 800f87c:	4910      	ldr	r1, [pc, #64]	@ (800f8c0 <tcp_slowtmr+0x290>)
 800f87e:	5c8a      	ldrb	r2, [r1, r2]
 800f880:	4093      	lsls	r3, r2
 800f882:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f88a:	4293      	cmp	r3, r2
 800f88c:	dc1a      	bgt.n	800f8c4 <tcp_slowtmr+0x294>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	b21a      	sxth	r2, r3
 800f892:	e019      	b.n	800f8c8 <tcp_slowtmr+0x298>
 800f894:	24010644 	.word	0x24010644
 800f898:	2401065a 	.word	0x2401065a
 800f89c:	24010650 	.word	0x24010650
 800f8a0:	08017c28 	.word	0x08017c28
 800f8a4:	08017fa4 	.word	0x08017fa4
 800f8a8:	08017ca4 	.word	0x08017ca4
 800f8ac:	08017fd0 	.word	0x08017fd0
 800f8b0:	08017ffc 	.word	0x08017ffc
 800f8b4:	0801802c 	.word	0x0801802c
 800f8b8:	08018060 	.word	0x08018060
 800f8bc:	08019e24 	.word	0x08019e24
 800f8c0:	08019e14 	.word	0x08019e14
 800f8c4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	bf28      	it	cs
 800f8e4:	4613      	movcs	r3, r2
 800f8e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8e8:	8a7b      	ldrh	r3, [r7, #18]
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	b29b      	uxth	r3, r3
 800f902:	429a      	cmp	r2, r3
 800f904:	d206      	bcs.n	800f914 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f910:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f916:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f91a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f920:	2200      	movs	r2, #0
 800f922:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f928:	f004 fd52 	bl	80143d0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92e:	7d1b      	ldrb	r3, [r3, #20]
 800f930:	2b06      	cmp	r3, #6
 800f932:	d111      	bne.n	800f958 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f936:	8b5b      	ldrh	r3, [r3, #26]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00b      	beq.n	800f958 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f940:	4b9c      	ldr	r3, [pc, #624]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	2b28      	cmp	r3, #40	@ 0x28
 800f94c:	d904      	bls.n	800f958 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f94e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f952:	3301      	adds	r3, #1
 800f954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f95a:	7a5b      	ldrb	r3, [r3, #9]
 800f95c:	f003 0308 	and.w	r3, r3, #8
 800f960:	2b00      	cmp	r3, #0
 800f962:	d04a      	beq.n	800f9fa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f966:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f968:	2b04      	cmp	r3, #4
 800f96a:	d003      	beq.n	800f974 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f96e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f970:	2b07      	cmp	r3, #7
 800f972:	d142      	bne.n	800f9fa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f974:	4b8f      	ldr	r3, [pc, #572]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f980:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f984:	4b8c      	ldr	r3, [pc, #560]	@ (800fbb8 <tcp_slowtmr+0x588>)
 800f986:	440b      	add	r3, r1
 800f988:	498c      	ldr	r1, [pc, #560]	@ (800fbbc <tcp_slowtmr+0x58c>)
 800f98a:	fba1 1303 	umull	r1, r3, r1, r3
 800f98e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f990:	429a      	cmp	r2, r3
 800f992:	d90a      	bls.n	800f9aa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f998:	3301      	adds	r3, #1
 800f99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f99e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f9a8:	e027      	b.n	800f9fa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9aa:	4b82      	ldr	r3, [pc, #520]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	4b7f      	ldr	r3, [pc, #508]	@ (800fbc0 <tcp_slowtmr+0x590>)
 800f9c4:	fb00 f303 	mul.w	r3, r0, r3
 800f9c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f9ca:	497c      	ldr	r1, [pc, #496]	@ (800fbbc <tcp_slowtmr+0x58c>)
 800f9cc:	fba1 1303 	umull	r1, r3, r1, r3
 800f9d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d911      	bls.n	800f9fa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f9d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9d8:	f004 fffe 	bl	80149d8 <tcp_keepalive>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f9e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d107      	bne.n	800f9fa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d011      	beq.n	800fa26 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fa02:	4b6c      	ldr	r3, [pc, #432]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	1ad2      	subs	r2, r2, r3
 800fa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800fa12:	4619      	mov	r1, r3
 800fa14:	460b      	mov	r3, r1
 800fa16:	005b      	lsls	r3, r3, #1
 800fa18:	440b      	add	r3, r1
 800fa1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d302      	bcc.n	800fa26 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800fa20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa22:	f000 feb7 	bl	8010794 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800fa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa28:	7d1b      	ldrb	r3, [r3, #20]
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d10b      	bne.n	800fa46 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa2e:	4b61      	ldr	r3, [pc, #388]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa34:	6a1b      	ldr	r3, [r3, #32]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	2b28      	cmp	r3, #40	@ 0x28
 800fa3a:	d904      	bls.n	800fa46 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800fa3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa40:	3301      	adds	r3, #1
 800fa42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800fa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa48:	7d1b      	ldrb	r3, [r3, #20]
 800fa4a:	2b09      	cmp	r3, #9
 800fa4c:	d10b      	bne.n	800fa66 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa4e:	4b59      	ldr	r3, [pc, #356]	@ (800fbb4 <tcp_slowtmr+0x584>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	2bf0      	cmp	r3, #240	@ 0xf0
 800fa5a:	d904      	bls.n	800fa66 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa60:	3301      	adds	r3, #1
 800fa62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800fa66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d060      	beq.n	800fb30 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800fa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa74:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800fa76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa78:	f000 fcd8 	bl	801042c <tcp_pcb_purge>
      if (prev != NULL) {
 800fa7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d010      	beq.n	800faa4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa82:	4b50      	ldr	r3, [pc, #320]	@ (800fbc4 <tcp_slowtmr+0x594>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d106      	bne.n	800fa9a <tcp_slowtmr+0x46a>
 800fa8c:	4b4e      	ldr	r3, [pc, #312]	@ (800fbc8 <tcp_slowtmr+0x598>)
 800fa8e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800fa92:	494e      	ldr	r1, [pc, #312]	@ (800fbcc <tcp_slowtmr+0x59c>)
 800fa94:	484e      	ldr	r0, [pc, #312]	@ (800fbd0 <tcp_slowtmr+0x5a0>)
 800fa96:	f005 fe89 	bl	80157ac <iprintf>
        prev->next = pcb->next;
 800fa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9c:	68da      	ldr	r2, [r3, #12]
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	e00f      	b.n	800fac4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800faa4:	4b47      	ldr	r3, [pc, #284]	@ (800fbc4 <tcp_slowtmr+0x594>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800faaa:	429a      	cmp	r2, r3
 800faac:	d006      	beq.n	800fabc <tcp_slowtmr+0x48c>
 800faae:	4b46      	ldr	r3, [pc, #280]	@ (800fbc8 <tcp_slowtmr+0x598>)
 800fab0:	f240 5271 	movw	r2, #1393	@ 0x571
 800fab4:	4947      	ldr	r1, [pc, #284]	@ (800fbd4 <tcp_slowtmr+0x5a4>)
 800fab6:	4846      	ldr	r0, [pc, #280]	@ (800fbd0 <tcp_slowtmr+0x5a0>)
 800fab8:	f005 fe78 	bl	80157ac <iprintf>
        tcp_active_pcbs = pcb->next;
 800fabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	4a40      	ldr	r2, [pc, #256]	@ (800fbc4 <tcp_slowtmr+0x594>)
 800fac2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800fac4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d013      	beq.n	800faf4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800facc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800face:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fad4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800fad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad8:	3304      	adds	r3, #4
 800fada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fadc:	8ad2      	ldrh	r2, [r2, #22]
 800fade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fae0:	8b09      	ldrh	r1, [r1, #24]
 800fae2:	9102      	str	r1, [sp, #8]
 800fae4:	9201      	str	r2, [sp, #4]
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	462b      	mov	r3, r5
 800faea:	4622      	mov	r2, r4
 800faec:	4601      	mov	r1, r0
 800faee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800faf0:	f004 febe 	bl	8014870 <tcp_rst>
      err_arg = pcb->callback_arg;
 800faf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fb0a:	6838      	ldr	r0, [r7, #0]
 800fb0c:	f7fe ff10 	bl	800e930 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800fb10:	4b31      	ldr	r3, [pc, #196]	@ (800fbd8 <tcp_slowtmr+0x5a8>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d004      	beq.n	800fb26 <tcp_slowtmr+0x4f6>
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f06f 010c 	mvn.w	r1, #12
 800fb22:	68b8      	ldr	r0, [r7, #8]
 800fb24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb26:	4b2c      	ldr	r3, [pc, #176]	@ (800fbd8 <tcp_slowtmr+0x5a8>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d037      	beq.n	800fb9e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fb2e:	e592      	b.n	800f656 <tcp_slowtmr+0x26>
      prev = pcb;
 800fb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb32:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800fb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb3c:	7f1b      	ldrb	r3, [r3, #28]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb48:	7f1a      	ldrb	r2, [r3, #28]
 800fb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb4c:	7f5b      	ldrb	r3, [r3, #29]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d325      	bcc.n	800fb9e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb54:	2200      	movs	r2, #0
 800fb56:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800fb58:	4b1f      	ldr	r3, [pc, #124]	@ (800fbd8 <tcp_slowtmr+0x5a8>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00b      	beq.n	800fb80 <tcp_slowtmr+0x550>
 800fb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb70:	6912      	ldr	r2, [r2, #16]
 800fb72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb74:	4610      	mov	r0, r2
 800fb76:	4798      	blx	r3
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fb7e:	e002      	b.n	800fb86 <tcp_slowtmr+0x556>
 800fb80:	2300      	movs	r3, #0
 800fb82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800fb86:	4b14      	ldr	r3, [pc, #80]	@ (800fbd8 <tcp_slowtmr+0x5a8>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f47f ad62 	bne.w	800f654 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb90:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fb98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb9a:	f004 f8b3 	bl	8013d04 <tcp_output>
  while (pcb != NULL) {
 800fb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f47f ad5e 	bne.w	800f662 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800fbaa:	4b0c      	ldr	r3, [pc, #48]	@ (800fbdc <tcp_slowtmr+0x5ac>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fbb0:	e069      	b.n	800fc86 <tcp_slowtmr+0x656>
 800fbb2:	bf00      	nop
 800fbb4:	24010644 	.word	0x24010644
 800fbb8:	000a4cb8 	.word	0x000a4cb8
 800fbbc:	10624dd3 	.word	0x10624dd3
 800fbc0:	000124f8 	.word	0x000124f8
 800fbc4:	24010650 	.word	0x24010650
 800fbc8:	08017c28 	.word	0x08017c28
 800fbcc:	08018098 	.word	0x08018098
 800fbd0:	08017ca4 	.word	0x08017ca4
 800fbd4:	080180c4 	.word	0x080180c4
 800fbd8:	24010658 	.word	0x24010658
 800fbdc:	24010654 	.word	0x24010654
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe2:	7d1b      	ldrb	r3, [r3, #20]
 800fbe4:	2b0a      	cmp	r3, #10
 800fbe6:	d006      	beq.n	800fbf6 <tcp_slowtmr+0x5c6>
 800fbe8:	4b2b      	ldr	r3, [pc, #172]	@ (800fc98 <tcp_slowtmr+0x668>)
 800fbea:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800fbee:	492b      	ldr	r1, [pc, #172]	@ (800fc9c <tcp_slowtmr+0x66c>)
 800fbf0:	482b      	ldr	r0, [pc, #172]	@ (800fca0 <tcp_slowtmr+0x670>)
 800fbf2:	f005 fddb 	bl	80157ac <iprintf>
    pcb_remove = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbfc:	4b29      	ldr	r3, [pc, #164]	@ (800fca4 <tcp_slowtmr+0x674>)
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	2bf0      	cmp	r3, #240	@ 0xf0
 800fc08:	d904      	bls.n	800fc14 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800fc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc0e:	3301      	adds	r3, #1
 800fc10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d02f      	beq.n	800fc7c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc1e:	f000 fc05 	bl	801042c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d010      	beq.n	800fc4a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc28:	4b1f      	ldr	r3, [pc, #124]	@ (800fca8 <tcp_slowtmr+0x678>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d106      	bne.n	800fc40 <tcp_slowtmr+0x610>
 800fc32:	4b19      	ldr	r3, [pc, #100]	@ (800fc98 <tcp_slowtmr+0x668>)
 800fc34:	f240 52af 	movw	r2, #1455	@ 0x5af
 800fc38:	491c      	ldr	r1, [pc, #112]	@ (800fcac <tcp_slowtmr+0x67c>)
 800fc3a:	4819      	ldr	r0, [pc, #100]	@ (800fca0 <tcp_slowtmr+0x670>)
 800fc3c:	f005 fdb6 	bl	80157ac <iprintf>
        prev->next = pcb->next;
 800fc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc42:	68da      	ldr	r2, [r3, #12]
 800fc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc46:	60da      	str	r2, [r3, #12]
 800fc48:	e00f      	b.n	800fc6a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc4a:	4b17      	ldr	r3, [pc, #92]	@ (800fca8 <tcp_slowtmr+0x678>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d006      	beq.n	800fc62 <tcp_slowtmr+0x632>
 800fc54:	4b10      	ldr	r3, [pc, #64]	@ (800fc98 <tcp_slowtmr+0x668>)
 800fc56:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800fc5a:	4915      	ldr	r1, [pc, #84]	@ (800fcb0 <tcp_slowtmr+0x680>)
 800fc5c:	4810      	ldr	r0, [pc, #64]	@ (800fca0 <tcp_slowtmr+0x670>)
 800fc5e:	f005 fda5 	bl	80157ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	4a10      	ldr	r2, [pc, #64]	@ (800fca8 <tcp_slowtmr+0x678>)
 800fc68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fc74:	69f8      	ldr	r0, [r7, #28]
 800fc76:	f7fe fe5b 	bl	800e930 <tcp_free>
 800fc7a:	e004      	b.n	800fc86 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800fc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1a9      	bne.n	800fbe0 <tcp_slowtmr+0x5b0>
    }
  }
}
 800fc8c:	bf00      	nop
 800fc8e:	bf00      	nop
 800fc90:	3730      	adds	r7, #48	@ 0x30
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bdb0      	pop	{r4, r5, r7, pc}
 800fc96:	bf00      	nop
 800fc98:	08017c28 	.word	0x08017c28
 800fc9c:	080180f0 	.word	0x080180f0
 800fca0:	08017ca4 	.word	0x08017ca4
 800fca4:	24010644 	.word	0x24010644
 800fca8:	24010654 	.word	0x24010654
 800fcac:	08018120 	.word	0x08018120
 800fcb0:	08018148 	.word	0x08018148

0800fcb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fcba:	4b2d      	ldr	r3, [pc, #180]	@ (800fd70 <tcp_fasttmr+0xbc>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	4b2b      	ldr	r3, [pc, #172]	@ (800fd70 <tcp_fasttmr+0xbc>)
 800fcc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fcc6:	4b2b      	ldr	r3, [pc, #172]	@ (800fd74 <tcp_fasttmr+0xc0>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fccc:	e048      	b.n	800fd60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7f9a      	ldrb	r2, [r3, #30]
 800fcd2:	4b27      	ldr	r3, [pc, #156]	@ (800fd70 <tcp_fasttmr+0xbc>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d03f      	beq.n	800fd5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fcda:	4b25      	ldr	r3, [pc, #148]	@ (800fd70 <tcp_fasttmr+0xbc>)
 800fcdc:	781a      	ldrb	r2, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8b5b      	ldrh	r3, [r3, #26]
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d010      	beq.n	800fd10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8b5b      	ldrh	r3, [r3, #26]
 800fcf2:	f043 0302 	orr.w	r3, r3, #2
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f004 f801 	bl	8013d04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	8b5b      	ldrh	r3, [r3, #26]
 800fd06:	f023 0303 	bic.w	r3, r3, #3
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f003 0308 	and.w	r3, r3, #8
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d009      	beq.n	800fd30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8b5b      	ldrh	r3, [r3, #26]
 800fd20:	f023 0308 	bic.w	r3, r3, #8
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7fe ff94 	bl	800ec58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00a      	beq.n	800fd54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd78 <tcp_fasttmr+0xc4>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f819 	bl	800fd7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fd78 <tcp_fasttmr+0xc4>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d000      	beq.n	800fd54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd52:	e7b8      	b.n	800fcc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	607b      	str	r3, [r7, #4]
 800fd58:	e002      	b.n	800fd60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1b3      	bne.n	800fcce <tcp_fasttmr+0x1a>
    }
  }
}
 800fd66:	bf00      	nop
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	2401065a 	.word	0x2401065a
 800fd74:	24010650 	.word	0x24010650
 800fd78:	24010658 	.word	0x24010658

0800fd7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd7c:	b590      	push	{r4, r7, lr}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <tcp_process_refused_data+0x22>
 800fd8a:	4b38      	ldr	r3, [pc, #224]	@ (800fe6c <tcp_process_refused_data+0xf0>)
 800fd8c:	f240 6209 	movw	r2, #1545	@ 0x609
 800fd90:	4937      	ldr	r1, [pc, #220]	@ (800fe70 <tcp_process_refused_data+0xf4>)
 800fd92:	4838      	ldr	r0, [pc, #224]	@ (800fe74 <tcp_process_refused_data+0xf8>)
 800fd94:	f005 fd0a 	bl	80157ac <iprintf>
 800fd98:	f06f 030f 	mvn.w	r3, #15
 800fd9c:	e061      	b.n	800fe62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fda2:	7b5b      	ldrb	r3, [r3, #13]
 800fda4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00b      	beq.n	800fdd4 <tcp_process_refused_data+0x58>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6918      	ldr	r0, [r3, #16]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	47a0      	blx	r4
 800fdce:	4603      	mov	r3, r0
 800fdd0:	73fb      	strb	r3, [r7, #15]
 800fdd2:	e007      	b.n	800fde4 <tcp_process_refused_data+0x68>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	2000      	movs	r0, #0
 800fddc:	f000 f8a6 	bl	800ff2c <tcp_recv_null>
 800fde0:	4603      	mov	r3, r0
 800fde2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fde4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d12b      	bne.n	800fe44 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
 800fdee:	f003 0320 	and.w	r3, r3, #32
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d034      	beq.n	800fe60 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdfa:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d005      	beq.n	800fe0e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe06:	3301      	adds	r3, #1
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00b      	beq.n	800fe30 <tcp_process_refused_data+0xb4>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6918      	ldr	r0, [r3, #16]
 800fe22:	2300      	movs	r3, #0
 800fe24:	2200      	movs	r2, #0
 800fe26:	6879      	ldr	r1, [r7, #4]
 800fe28:	47a0      	blx	r4
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	73fb      	strb	r3, [r7, #15]
 800fe2e:	e001      	b.n	800fe34 <tcp_process_refused_data+0xb8>
 800fe30:	2300      	movs	r3, #0
 800fe32:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe38:	f113 0f0d 	cmn.w	r3, #13
 800fe3c:	d110      	bne.n	800fe60 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800fe3e:	f06f 030c 	mvn.w	r3, #12
 800fe42:	e00e      	b.n	800fe62 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe48:	f113 0f0d 	cmn.w	r3, #13
 800fe4c:	d102      	bne.n	800fe54 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe4e:	f06f 030c 	mvn.w	r3, #12
 800fe52:	e006      	b.n	800fe62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	68ba      	ldr	r2, [r7, #8]
 800fe58:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800fe5a:	f06f 0304 	mvn.w	r3, #4
 800fe5e:	e000      	b.n	800fe62 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3714      	adds	r7, #20
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd90      	pop	{r4, r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	08017c28 	.word	0x08017c28
 800fe70:	08018170 	.word	0x08018170
 800fe74:	08017ca4 	.word	0x08017ca4

0800fe78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe80:	e007      	b.n	800fe92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f80a 	bl	800fea2 <tcp_seg_free>
    seg = next;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1f4      	bne.n	800fe82 <tcp_segs_free+0xa>
  }
}
 800fe98:	bf00      	nop
 800fe9a:	bf00      	nop
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00c      	beq.n	800feca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	f7fe f8e1 	bl	800e084 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fec2:	6879      	ldr	r1, [r7, #4]
 800fec4:	2003      	movs	r0, #3
 800fec6:	f7fd fa2d 	bl	800d324 <memp_free>
  }
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
	...

0800fed4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d106      	bne.n	800fef0 <tcp_seg_copy+0x1c>
 800fee2:	4b0f      	ldr	r3, [pc, #60]	@ (800ff20 <tcp_seg_copy+0x4c>)
 800fee4:	f240 6282 	movw	r2, #1666	@ 0x682
 800fee8:	490e      	ldr	r1, [pc, #56]	@ (800ff24 <tcp_seg_copy+0x50>)
 800feea:	480f      	ldr	r0, [pc, #60]	@ (800ff28 <tcp_seg_copy+0x54>)
 800feec:	f005 fc5e 	bl	80157ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fef0:	2003      	movs	r0, #3
 800fef2:	f7fd f9a1 	bl	800d238 <memp_malloc>
 800fef6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d101      	bne.n	800ff02 <tcp_seg_copy+0x2e>
    return NULL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	e00a      	b.n	800ff18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ff02:	2210      	movs	r2, #16
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f005 fd81 	bl	8015a0e <memcpy>
  pbuf_ref(cseg->p);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe f95d 	bl	800e1d0 <pbuf_ref>
  return cseg;
 800ff16:	68fb      	ldr	r3, [r7, #12]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	08017c28 	.word	0x08017c28
 800ff24:	080181b4 	.word	0x080181b4
 800ff28:	08017ca4 	.word	0x08017ca4

0800ff2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
 800ff38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d109      	bne.n	800ff54 <tcp_recv_null+0x28>
 800ff40:	4b12      	ldr	r3, [pc, #72]	@ (800ff8c <tcp_recv_null+0x60>)
 800ff42:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ff46:	4912      	ldr	r1, [pc, #72]	@ (800ff90 <tcp_recv_null+0x64>)
 800ff48:	4812      	ldr	r0, [pc, #72]	@ (800ff94 <tcp_recv_null+0x68>)
 800ff4a:	f005 fc2f 	bl	80157ac <iprintf>
 800ff4e:	f06f 030f 	mvn.w	r3, #15
 800ff52:	e016      	b.n	800ff82 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d009      	beq.n	800ff6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	891b      	ldrh	r3, [r3, #8]
 800ff5e:	4619      	mov	r1, r3
 800ff60:	68b8      	ldr	r0, [r7, #8]
 800ff62:	f7ff f9b1 	bl	800f2c8 <tcp_recved>
    pbuf_free(p);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7fe f88c 	bl	800e084 <pbuf_free>
 800ff6c:	e008      	b.n	800ff80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d104      	bne.n	800ff80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff76:	68b8      	ldr	r0, [r7, #8]
 800ff78:	f7fe fed8 	bl	800ed2c <tcp_close>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	e000      	b.n	800ff82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	08017c28 	.word	0x08017c28
 800ff90:	080181d0 	.word	0x080181d0
 800ff94:	08017ca4 	.word	0x08017ca4

0800ff98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ffa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	db01      	blt.n	800ffae <tcp_kill_prio+0x16>
 800ffaa:	79fb      	ldrb	r3, [r7, #7]
 800ffac:	e000      	b.n	800ffb0 <tcp_kill_prio+0x18>
 800ffae:	237f      	movs	r3, #127	@ 0x7f
 800ffb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ffb2:	7afb      	ldrb	r3, [r7, #11]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d034      	beq.n	8010022 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ffb8:	7afb      	ldrb	r3, [r7, #11]
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffc6:	4b19      	ldr	r3, [pc, #100]	@ (801002c <tcp_kill_prio+0x94>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	617b      	str	r3, [r7, #20]
 800ffcc:	e01f      	b.n	801000e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	7d5b      	ldrb	r3, [r3, #21]
 800ffd2:	7afa      	ldrb	r2, [r7, #11]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d80c      	bhi.n	800fff2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ffdc:	7afa      	ldrb	r2, [r7, #11]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d112      	bne.n	8010008 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffe2:	4b13      	ldr	r3, [pc, #76]	@ (8010030 <tcp_kill_prio+0x98>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	6a1b      	ldr	r3, [r3, #32]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d80a      	bhi.n	8010008 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fff2:	4b0f      	ldr	r3, [pc, #60]	@ (8010030 <tcp_kill_prio+0x98>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	7d5b      	ldrb	r3, [r3, #21]
 8010006:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	617b      	str	r3, [r7, #20]
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1dc      	bne.n	800ffce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801001a:	6938      	ldr	r0, [r7, #16]
 801001c:	f7fe ff74 	bl	800ef08 <tcp_abort>
 8010020:	e000      	b.n	8010024 <tcp_kill_prio+0x8c>
    return;
 8010022:	bf00      	nop
  }
}
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	24010650 	.word	0x24010650
 8010030:	24010644 	.word	0x24010644

08010034 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	2b08      	cmp	r3, #8
 8010042:	d009      	beq.n	8010058 <tcp_kill_state+0x24>
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	2b09      	cmp	r3, #9
 8010048:	d006      	beq.n	8010058 <tcp_kill_state+0x24>
 801004a:	4b1a      	ldr	r3, [pc, #104]	@ (80100b4 <tcp_kill_state+0x80>)
 801004c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010050:	4919      	ldr	r1, [pc, #100]	@ (80100b8 <tcp_kill_state+0x84>)
 8010052:	481a      	ldr	r0, [pc, #104]	@ (80100bc <tcp_kill_state+0x88>)
 8010054:	f005 fbaa 	bl	80157ac <iprintf>

  inactivity = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010060:	4b17      	ldr	r3, [pc, #92]	@ (80100c0 <tcp_kill_state+0x8c>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	617b      	str	r3, [r7, #20]
 8010066:	e017      	b.n	8010098 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	7d1b      	ldrb	r3, [r3, #20]
 801006c:	79fa      	ldrb	r2, [r7, #7]
 801006e:	429a      	cmp	r2, r3
 8010070:	d10f      	bne.n	8010092 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010072:	4b14      	ldr	r3, [pc, #80]	@ (80100c4 <tcp_kill_state+0x90>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	429a      	cmp	r2, r3
 8010080:	d807      	bhi.n	8010092 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010082:	4b10      	ldr	r3, [pc, #64]	@ (80100c4 <tcp_kill_state+0x90>)
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	1ad3      	subs	r3, r2, r3
 801008c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1e4      	bne.n	8010068 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d003      	beq.n	80100ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80100a4:	2100      	movs	r1, #0
 80100a6:	6938      	ldr	r0, [r7, #16]
 80100a8:	f7fe fe6e 	bl	800ed88 <tcp_abandon>
  }
}
 80100ac:	bf00      	nop
 80100ae:	3718      	adds	r7, #24
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	08017c28 	.word	0x08017c28
 80100b8:	080181ec 	.word	0x080181ec
 80100bc:	08017ca4 	.word	0x08017ca4
 80100c0:	24010650 	.word	0x24010650
 80100c4:	24010644 	.word	0x24010644

080100c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100d6:	4b12      	ldr	r3, [pc, #72]	@ (8010120 <tcp_kill_timewait+0x58>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	60fb      	str	r3, [r7, #12]
 80100dc:	e012      	b.n	8010104 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100de:	4b11      	ldr	r3, [pc, #68]	@ (8010124 <tcp_kill_timewait+0x5c>)
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6a1b      	ldr	r3, [r3, #32]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d807      	bhi.n	80100fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80100ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010124 <tcp_kill_timewait+0x5c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6a1b      	ldr	r3, [r3, #32]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	60fb      	str	r3, [r7, #12]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1e9      	bne.n	80100de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010110:	68b8      	ldr	r0, [r7, #8]
 8010112:	f7fe fef9 	bl	800ef08 <tcp_abort>
  }
}
 8010116:	bf00      	nop
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	24010654 	.word	0x24010654
 8010124:	24010644 	.word	0x24010644

08010128 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801012e:	4b10      	ldr	r3, [pc, #64]	@ (8010170 <tcp_handle_closepend+0x48>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010134:	e014      	b.n	8010160 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	8b5b      	ldrh	r3, [r3, #26]
 8010140:	f003 0308 	and.w	r3, r3, #8
 8010144:	2b00      	cmp	r3, #0
 8010146:	d009      	beq.n	801015c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8b5b      	ldrh	r3, [r3, #26]
 801014c:	f023 0308 	bic.w	r3, r3, #8
 8010150:	b29a      	uxth	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f7fe fd7e 	bl	800ec58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1e7      	bne.n	8010136 <tcp_handle_closepend+0xe>
  }
}
 8010166:	bf00      	nop
 8010168:	bf00      	nop
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	24010650 	.word	0x24010650

08010174 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 801017e:	f7f6 f90d 	bl	800639c <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010182:	2001      	movs	r0, #1
 8010184:	f7fd f858 	bl	800d238 <memp_malloc>
 8010188:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d126      	bne.n	80101de <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010190:	f7ff ffca 	bl	8010128 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010194:	f7ff ff98 	bl	80100c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010198:	2001      	movs	r0, #1
 801019a:	f7fd f84d 	bl	800d238 <memp_malloc>
 801019e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d11b      	bne.n	80101de <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80101a6:	2009      	movs	r0, #9
 80101a8:	f7ff ff44 	bl	8010034 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ac:	2001      	movs	r0, #1
 80101ae:	f7fd f843 	bl	800d238 <memp_malloc>
 80101b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d111      	bne.n	80101de <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80101ba:	2008      	movs	r0, #8
 80101bc:	f7ff ff3a 	bl	8010034 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101c0:	2001      	movs	r0, #1
 80101c2:	f7fd f839 	bl	800d238 <memp_malloc>
 80101c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d107      	bne.n	80101de <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7ff fee1 	bl	800ff98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101d6:	2001      	movs	r0, #1
 80101d8:	f7fd f82e 	bl	800d238 <memp_malloc>
 80101dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d03f      	beq.n	8010264 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80101e4:	229c      	movs	r2, #156	@ 0x9c
 80101e6:	2100      	movs	r1, #0
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f005 fb44 	bl	8015876 <memset>
    pcb->prio = prio;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	79fa      	ldrb	r2, [r7, #7]
 80101f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80101fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010204:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	22ff      	movs	r2, #255	@ 0xff
 8010212:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801021a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2206      	movs	r2, #6
 8010220:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2206      	movs	r2, #6
 8010228:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010230:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2201      	movs	r2, #1
 8010236:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801023a:	4b0d      	ldr	r3, [pc, #52]	@ (8010270 <tcp_alloc+0xfc>)
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010242:	4b0c      	ldr	r3, [pc, #48]	@ (8010274 <tcp_alloc+0x100>)
 8010244:	781a      	ldrb	r2, [r3, #0]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010250:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	4a08      	ldr	r2, [pc, #32]	@ (8010278 <tcp_alloc+0x104>)
 8010258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4a07      	ldr	r2, [pc, #28]	@ (801027c <tcp_alloc+0x108>)
 8010260:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010264:	68fb      	ldr	r3, [r7, #12]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	24010644 	.word	0x24010644
 8010274:	2401065a 	.word	0x2401065a
 8010278:	0800ff2d 	.word	0x0800ff2d
 801027c:	006ddd00 	.word	0x006ddd00

08010280 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	4603      	mov	r3, r0
 8010288:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801028a:	2040      	movs	r0, #64	@ 0x40
 801028c:	f7ff ff72 	bl	8010174 <tcp_alloc>
 8010290:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010292:	68fb      	ldr	r3, [r7, #12]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80102a6:	f7f6 f879 	bl	800639c <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d002      	beq.n	80102b6 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	683a      	ldr	r2, [r7, #0]
 80102b4:	611a      	str	r2, [r3, #16]
  }
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80102ca:	f7f6 f867 	bl	800639c <sys_check_core_locking>
  if (pcb != NULL) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00e      	beq.n	80102f2 <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d106      	bne.n	80102ea <tcp_recv+0x2a>
 80102dc:	4b07      	ldr	r3, [pc, #28]	@ (80102fc <tcp_recv+0x3c>)
 80102de:	f240 72df 	movw	r2, #2015	@ 0x7df
 80102e2:	4907      	ldr	r1, [pc, #28]	@ (8010300 <tcp_recv+0x40>)
 80102e4:	4807      	ldr	r0, [pc, #28]	@ (8010304 <tcp_recv+0x44>)
 80102e6:	f005 fa61 	bl	80157ac <iprintf>
    pcb->recv = recv;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	683a      	ldr	r2, [r7, #0]
 80102ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80102f2:	bf00      	nop
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	08017c28 	.word	0x08017c28
 8010300:	080181fc 	.word	0x080181fc
 8010304:	08017ca4 	.word	0x08017ca4

08010308 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8010312:	f7f6 f843 	bl	800639c <sys_check_core_locking>
  if (pcb != NULL) {
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00e      	beq.n	801033a <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d106      	bne.n	8010332 <tcp_sent+0x2a>
 8010324:	4b07      	ldr	r3, [pc, #28]	@ (8010344 <tcp_sent+0x3c>)
 8010326:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801032a:	4907      	ldr	r1, [pc, #28]	@ (8010348 <tcp_sent+0x40>)
 801032c:	4807      	ldr	r0, [pc, #28]	@ (801034c <tcp_sent+0x44>)
 801032e:	f005 fa3d 	bl	80157ac <iprintf>
    pcb->sent = sent;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	08017c28 	.word	0x08017c28
 8010348:	08018224 	.word	0x08018224
 801034c:	08017ca4 	.word	0x08017ca4

08010350 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801035a:	f7f6 f81f 	bl	800639c <sys_check_core_locking>
  if (pcb != NULL) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00e      	beq.n	8010382 <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	7d1b      	ldrb	r3, [r3, #20]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d106      	bne.n	801037a <tcp_err+0x2a>
 801036c:	4b07      	ldr	r3, [pc, #28]	@ (801038c <tcp_err+0x3c>)
 801036e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8010372:	4907      	ldr	r1, [pc, #28]	@ (8010390 <tcp_err+0x40>)
 8010374:	4807      	ldr	r0, [pc, #28]	@ (8010394 <tcp_err+0x44>)
 8010376:	f005 fa19 	bl	80157ac <iprintf>
    pcb->errf = err;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	683a      	ldr	r2, [r7, #0]
 801037e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	08017c28 	.word	0x08017c28
 8010390:	0801824c 	.word	0x0801824c
 8010394:	08017ca4 	.word	0x08017ca4

08010398 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80103a2:	f7f5 fffb 	bl	800639c <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d008      	beq.n	80103be <tcp_accept+0x26>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	7d1b      	ldrb	r3, [r3, #20]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d104      	bne.n	80103be <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	683a      	ldr	r2, [r7, #0]
 80103bc:	619a      	str	r2, [r3, #24]
  }
}
 80103be:	bf00      	nop
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	4613      	mov	r3, r2
 80103d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 80103d6:	f7f5 ffe1 	bl	800639c <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d107      	bne.n	80103f0 <tcp_poll+0x28>
 80103e0:	4b0e      	ldr	r3, [pc, #56]	@ (801041c <tcp_poll+0x54>)
 80103e2:	f640 023d 	movw	r2, #2109	@ 0x83d
 80103e6:	490e      	ldr	r1, [pc, #56]	@ (8010420 <tcp_poll+0x58>)
 80103e8:	480e      	ldr	r0, [pc, #56]	@ (8010424 <tcp_poll+0x5c>)
 80103ea:	f005 f9df 	bl	80157ac <iprintf>
 80103ee:	e011      	b.n	8010414 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	7d1b      	ldrb	r3, [r3, #20]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d106      	bne.n	8010406 <tcp_poll+0x3e>
 80103f8:	4b08      	ldr	r3, [pc, #32]	@ (801041c <tcp_poll+0x54>)
 80103fa:	f640 023e 	movw	r2, #2110	@ 0x83e
 80103fe:	490a      	ldr	r1, [pc, #40]	@ (8010428 <tcp_poll+0x60>)
 8010400:	4808      	ldr	r0, [pc, #32]	@ (8010424 <tcp_poll+0x5c>)
 8010402:	f005 f9d3 	bl	80157ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	79fa      	ldrb	r2, [r7, #7]
 8010412:	775a      	strb	r2, [r3, #29]
}
 8010414:	3710      	adds	r7, #16
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	08017c28 	.word	0x08017c28
 8010420:	08018274 	.word	0x08018274
 8010424:	08017ca4 	.word	0x08017ca4
 8010428:	0801828c 	.word	0x0801828c

0801042c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d107      	bne.n	801044a <tcp_pcb_purge+0x1e>
 801043a:	4b21      	ldr	r3, [pc, #132]	@ (80104c0 <tcp_pcb_purge+0x94>)
 801043c:	f640 0251 	movw	r2, #2129	@ 0x851
 8010440:	4920      	ldr	r1, [pc, #128]	@ (80104c4 <tcp_pcb_purge+0x98>)
 8010442:	4821      	ldr	r0, [pc, #132]	@ (80104c8 <tcp_pcb_purge+0x9c>)
 8010444:	f005 f9b2 	bl	80157ac <iprintf>
 8010448:	e037      	b.n	80104ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	7d1b      	ldrb	r3, [r3, #20]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d033      	beq.n	80104ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010456:	2b0a      	cmp	r3, #10
 8010458:	d02f      	beq.n	80104ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801045e:	2b01      	cmp	r3, #1
 8010460:	d02b      	beq.n	80104ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010466:	2b00      	cmp	r3, #0
 8010468:	d007      	beq.n	801047a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801046e:	4618      	mov	r0, r3
 8010470:	f7fd fe08 	bl	800e084 <pbuf_free>
      pcb->refused_data = NULL;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801047e:	2b00      	cmp	r3, #0
 8010480:	d002      	beq.n	8010488 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f986 	bl	8010794 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801048e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fcef 	bl	800fe78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff fcea 	bl	800fe78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	08017c28 	.word	0x08017c28
 80104c4:	080182ac 	.word	0x080182ac
 80104c8:	08017ca4 	.word	0x08017ca4

080104cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <tcp_pcb_remove+0x1e>
 80104dc:	4b3e      	ldr	r3, [pc, #248]	@ (80105d8 <tcp_pcb_remove+0x10c>)
 80104de:	f640 0283 	movw	r2, #2179	@ 0x883
 80104e2:	493e      	ldr	r1, [pc, #248]	@ (80105dc <tcp_pcb_remove+0x110>)
 80104e4:	483e      	ldr	r0, [pc, #248]	@ (80105e0 <tcp_pcb_remove+0x114>)
 80104e6:	f005 f961 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d106      	bne.n	80104fe <tcp_pcb_remove+0x32>
 80104f0:	4b39      	ldr	r3, [pc, #228]	@ (80105d8 <tcp_pcb_remove+0x10c>)
 80104f2:	f640 0284 	movw	r2, #2180	@ 0x884
 80104f6:	493b      	ldr	r1, [pc, #236]	@ (80105e4 <tcp_pcb_remove+0x118>)
 80104f8:	4839      	ldr	r0, [pc, #228]	@ (80105e0 <tcp_pcb_remove+0x114>)
 80104fa:	f005 f957 	bl	80157ac <iprintf>

  TCP_RMV(pcblist, pcb);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d105      	bne.n	8010514 <tcp_pcb_remove+0x48>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68da      	ldr	r2, [r3, #12]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	601a      	str	r2, [r3, #0]
 8010512:	e013      	b.n	801053c <tcp_pcb_remove+0x70>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	e00c      	b.n	8010536 <tcp_pcb_remove+0x6a>
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	683a      	ldr	r2, [r7, #0]
 8010522:	429a      	cmp	r2, r3
 8010524:	d104      	bne.n	8010530 <tcp_pcb_remove+0x64>
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	68da      	ldr	r2, [r3, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	60da      	str	r2, [r3, #12]
 801052e:	e005      	b.n	801053c <tcp_pcb_remove+0x70>
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1ef      	bne.n	801051c <tcp_pcb_remove+0x50>
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2200      	movs	r2, #0
 8010540:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010542:	6838      	ldr	r0, [r7, #0]
 8010544:	f7ff ff72 	bl	801042c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	7d1b      	ldrb	r3, [r3, #20]
 801054c:	2b0a      	cmp	r3, #10
 801054e:	d013      	beq.n	8010578 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010554:	2b01      	cmp	r3, #1
 8010556:	d00f      	beq.n	8010578 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	8b5b      	ldrh	r3, [r3, #26]
 801055c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010560:	2b00      	cmp	r3, #0
 8010562:	d009      	beq.n	8010578 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	8b5b      	ldrh	r3, [r3, #26]
 8010568:	f043 0302 	orr.w	r3, r3, #2
 801056c:	b29a      	uxth	r2, r3
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010572:	6838      	ldr	r0, [r7, #0]
 8010574:	f003 fbc6 	bl	8013d04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	7d1b      	ldrb	r3, [r3, #20]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d020      	beq.n	80105c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d006      	beq.n	8010596 <tcp_pcb_remove+0xca>
 8010588:	4b13      	ldr	r3, [pc, #76]	@ (80105d8 <tcp_pcb_remove+0x10c>)
 801058a:	f640 0293 	movw	r2, #2195	@ 0x893
 801058e:	4916      	ldr	r1, [pc, #88]	@ (80105e8 <tcp_pcb_remove+0x11c>)
 8010590:	4813      	ldr	r0, [pc, #76]	@ (80105e0 <tcp_pcb_remove+0x114>)
 8010592:	f005 f90b 	bl	80157ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059a:	2b00      	cmp	r3, #0
 801059c:	d006      	beq.n	80105ac <tcp_pcb_remove+0xe0>
 801059e:	4b0e      	ldr	r3, [pc, #56]	@ (80105d8 <tcp_pcb_remove+0x10c>)
 80105a0:	f640 0294 	movw	r2, #2196	@ 0x894
 80105a4:	4911      	ldr	r1, [pc, #68]	@ (80105ec <tcp_pcb_remove+0x120>)
 80105a6:	480e      	ldr	r0, [pc, #56]	@ (80105e0 <tcp_pcb_remove+0x114>)
 80105a8:	f005 f900 	bl	80157ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d006      	beq.n	80105c2 <tcp_pcb_remove+0xf6>
 80105b4:	4b08      	ldr	r3, [pc, #32]	@ (80105d8 <tcp_pcb_remove+0x10c>)
 80105b6:	f640 0296 	movw	r2, #2198	@ 0x896
 80105ba:	490d      	ldr	r1, [pc, #52]	@ (80105f0 <tcp_pcb_remove+0x124>)
 80105bc:	4808      	ldr	r0, [pc, #32]	@ (80105e0 <tcp_pcb_remove+0x114>)
 80105be:	f005 f8f5 	bl	80157ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2200      	movs	r2, #0
 80105c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2200      	movs	r2, #0
 80105cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08017c28 	.word	0x08017c28
 80105dc:	080182c8 	.word	0x080182c8
 80105e0:	08017ca4 	.word	0x08017ca4
 80105e4:	080182e4 	.word	0x080182e4
 80105e8:	08018304 	.word	0x08018304
 80105ec:	0801831c 	.word	0x0801831c
 80105f0:	08018338 	.word	0x08018338

080105f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_next_iss+0x1c>
 8010602:	4b0a      	ldr	r3, [pc, #40]	@ (801062c <tcp_next_iss+0x38>)
 8010604:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010608:	4909      	ldr	r1, [pc, #36]	@ (8010630 <tcp_next_iss+0x3c>)
 801060a:	480a      	ldr	r0, [pc, #40]	@ (8010634 <tcp_next_iss+0x40>)
 801060c:	f005 f8ce 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010610:	4b09      	ldr	r3, [pc, #36]	@ (8010638 <tcp_next_iss+0x44>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	4b09      	ldr	r3, [pc, #36]	@ (801063c <tcp_next_iss+0x48>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4413      	add	r3, r2
 801061a:	4a07      	ldr	r2, [pc, #28]	@ (8010638 <tcp_next_iss+0x44>)
 801061c:	6013      	str	r3, [r2, #0]
  return iss;
 801061e:	4b06      	ldr	r3, [pc, #24]	@ (8010638 <tcp_next_iss+0x44>)
 8010620:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	08017c28 	.word	0x08017c28
 8010630:	08018350 	.word	0x08018350
 8010634:	08017ca4 	.word	0x08017ca4
 8010638:	2400002c 	.word	0x2400002c
 801063c:	24010644 	.word	0x24010644

08010640 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <tcp_eff_send_mss_netif+0x22>
 8010654:	4b14      	ldr	r3, [pc, #80]	@ (80106a8 <tcp_eff_send_mss_netif+0x68>)
 8010656:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801065a:	4914      	ldr	r1, [pc, #80]	@ (80106ac <tcp_eff_send_mss_netif+0x6c>)
 801065c:	4814      	ldr	r0, [pc, #80]	@ (80106b0 <tcp_eff_send_mss_netif+0x70>)
 801065e:	f005 f8a5 	bl	80157ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d101      	bne.n	801066c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010668:	89fb      	ldrh	r3, [r7, #14]
 801066a:	e019      	b.n	80106a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010670:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010672:	8afb      	ldrh	r3, [r7, #22]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d012      	beq.n	801069e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010678:	2328      	movs	r3, #40	@ 0x28
 801067a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801067c:	8afa      	ldrh	r2, [r7, #22]
 801067e:	8abb      	ldrh	r3, [r7, #20]
 8010680:	429a      	cmp	r2, r3
 8010682:	d904      	bls.n	801068e <tcp_eff_send_mss_netif+0x4e>
 8010684:	8afa      	ldrh	r2, [r7, #22]
 8010686:	8abb      	ldrh	r3, [r7, #20]
 8010688:	1ad3      	subs	r3, r2, r3
 801068a:	b29b      	uxth	r3, r3
 801068c:	e000      	b.n	8010690 <tcp_eff_send_mss_netif+0x50>
 801068e:	2300      	movs	r3, #0
 8010690:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010692:	8a7a      	ldrh	r2, [r7, #18]
 8010694:	89fb      	ldrh	r3, [r7, #14]
 8010696:	4293      	cmp	r3, r2
 8010698:	bf28      	it	cs
 801069a:	4613      	movcs	r3, r2
 801069c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801069e:	89fb      	ldrh	r3, [r7, #14]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3718      	adds	r7, #24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	08017c28 	.word	0x08017c28
 80106ac:	0801836c 	.word	0x0801836c
 80106b0:	08017ca4 	.word	0x08017ca4

080106b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d119      	bne.n	80106fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80106c8:	4b10      	ldr	r3, [pc, #64]	@ (801070c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80106ca:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80106ce:	4910      	ldr	r1, [pc, #64]	@ (8010710 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80106d0:	4810      	ldr	r0, [pc, #64]	@ (8010714 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80106d2:	f005 f86b 	bl	80157ac <iprintf>

  while (pcb != NULL) {
 80106d6:	e011      	b.n	80106fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d108      	bne.n	80106f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7fe fc0c 	bl	800ef08 <tcp_abort>
      pcb = next;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	e002      	b.n	80106fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1ea      	bne.n	80106d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010702:	bf00      	nop
 8010704:	bf00      	nop
 8010706:	3710      	adds	r7, #16
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	08017c28 	.word	0x08017c28
 8010710:	08018394 	.word	0x08018394
 8010714:	08017ca4 	.word	0x08017ca4

08010718 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d02a      	beq.n	801077e <tcp_netif_ip_addr_changed+0x66>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d026      	beq.n	801077e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010730:	4b15      	ldr	r3, [pc, #84]	@ (8010788 <tcp_netif_ip_addr_changed+0x70>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff ffbc 	bl	80106b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801073c:	4b13      	ldr	r3, [pc, #76]	@ (801078c <tcp_netif_ip_addr_changed+0x74>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ffb6 	bl	80106b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d017      	beq.n	801077e <tcp_netif_ip_addr_changed+0x66>
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d013      	beq.n	801077e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010756:	4b0e      	ldr	r3, [pc, #56]	@ (8010790 <tcp_netif_ip_addr_changed+0x78>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	e00c      	b.n	8010778 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	429a      	cmp	r2, r3
 8010768:	d103      	bne.n	8010772 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1ef      	bne.n	801075e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801077e:	bf00      	nop
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	24010650 	.word	0x24010650
 801078c:	24010648 	.word	0x24010648
 8010790:	2401064c 	.word	0x2401064c

08010794 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d007      	beq.n	80107b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7ff fb65 	bl	800fe78 <tcp_segs_free>
    pcb->ooseq = NULL;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80107bc:	b590      	push	{r4, r7, lr}
 80107be:	b08d      	sub	sp, #52	@ 0x34
 80107c0:	af04      	add	r7, sp, #16
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 80107c6:	f7f5 fde9 	bl	800639c <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d105      	bne.n	80107dc <tcp_input+0x20>
 80107d0:	4b9b      	ldr	r3, [pc, #620]	@ (8010a40 <tcp_input+0x284>)
 80107d2:	2283      	movs	r2, #131	@ 0x83
 80107d4:	499b      	ldr	r1, [pc, #620]	@ (8010a44 <tcp_input+0x288>)
 80107d6:	489c      	ldr	r0, [pc, #624]	@ (8010a48 <tcp_input+0x28c>)
 80107d8:	f004 ffe8 	bl	80157ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	4a9a      	ldr	r2, [pc, #616]	@ (8010a4c <tcp_input+0x290>)
 80107e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	895b      	ldrh	r3, [r3, #10]
 80107e8:	2b13      	cmp	r3, #19
 80107ea:	f240 83d1 	bls.w	8010f90 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80107ee:	4b98      	ldr	r3, [pc, #608]	@ (8010a50 <tcp_input+0x294>)
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	4a97      	ldr	r2, [pc, #604]	@ (8010a50 <tcp_input+0x294>)
 80107f4:	6812      	ldr	r2, [r2, #0]
 80107f6:	4611      	mov	r1, r2
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fb fa21 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	f040 83c7 	bne.w	8010f94 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010806:	4b92      	ldr	r3, [pc, #584]	@ (8010a50 <tcp_input+0x294>)
 8010808:	695b      	ldr	r3, [r3, #20]
 801080a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801080e:	2be0      	cmp	r3, #224	@ 0xe0
 8010810:	f000 83c0 	beq.w	8010f94 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010814:	4b8d      	ldr	r3, [pc, #564]	@ (8010a4c <tcp_input+0x290>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	899b      	ldrh	r3, [r3, #12]
 801081a:	b29b      	uxth	r3, r3
 801081c:	4618      	mov	r0, r3
 801081e:	f7f9 fc95 	bl	800a14c <lwip_htons>
 8010822:	4603      	mov	r3, r0
 8010824:	0b1b      	lsrs	r3, r3, #12
 8010826:	b29b      	uxth	r3, r3
 8010828:	b2db      	uxtb	r3, r3
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801082e:	7cbb      	ldrb	r3, [r7, #18]
 8010830:	2b13      	cmp	r3, #19
 8010832:	f240 83b1 	bls.w	8010f98 <tcp_input+0x7dc>
 8010836:	7cbb      	ldrb	r3, [r7, #18]
 8010838:	b29a      	uxth	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	891b      	ldrh	r3, [r3, #8]
 801083e:	429a      	cmp	r2, r3
 8010840:	f200 83aa 	bhi.w	8010f98 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010844:	7cbb      	ldrb	r3, [r7, #18]
 8010846:	b29b      	uxth	r3, r3
 8010848:	3b14      	subs	r3, #20
 801084a:	b29a      	uxth	r2, r3
 801084c:	4b81      	ldr	r3, [pc, #516]	@ (8010a54 <tcp_input+0x298>)
 801084e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010850:	4b81      	ldr	r3, [pc, #516]	@ (8010a58 <tcp_input+0x29c>)
 8010852:	2200      	movs	r2, #0
 8010854:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	895a      	ldrh	r2, [r3, #10]
 801085a:	7cbb      	ldrb	r3, [r7, #18]
 801085c:	b29b      	uxth	r3, r3
 801085e:	429a      	cmp	r2, r3
 8010860:	d309      	bcc.n	8010876 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010862:	4b7c      	ldr	r3, [pc, #496]	@ (8010a54 <tcp_input+0x298>)
 8010864:	881a      	ldrh	r2, [r3, #0]
 8010866:	4b7d      	ldr	r3, [pc, #500]	@ (8010a5c <tcp_input+0x2a0>)
 8010868:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801086a:	7cbb      	ldrb	r3, [r7, #18]
 801086c:	4619      	mov	r1, r3
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7fd fb82 	bl	800df78 <pbuf_remove_header>
 8010874:	e04e      	b.n	8010914 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d105      	bne.n	801088a <tcp_input+0xce>
 801087e:	4b70      	ldr	r3, [pc, #448]	@ (8010a40 <tcp_input+0x284>)
 8010880:	22c2      	movs	r2, #194	@ 0xc2
 8010882:	4977      	ldr	r1, [pc, #476]	@ (8010a60 <tcp_input+0x2a4>)
 8010884:	4870      	ldr	r0, [pc, #448]	@ (8010a48 <tcp_input+0x28c>)
 8010886:	f004 ff91 	bl	80157ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801088a:	2114      	movs	r1, #20
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7fd fb73 	bl	800df78 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	895a      	ldrh	r2, [r3, #10]
 8010896:	4b71      	ldr	r3, [pc, #452]	@ (8010a5c <tcp_input+0x2a0>)
 8010898:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801089a:	4b6e      	ldr	r3, [pc, #440]	@ (8010a54 <tcp_input+0x298>)
 801089c:	881a      	ldrh	r2, [r3, #0]
 801089e:	4b6f      	ldr	r3, [pc, #444]	@ (8010a5c <tcp_input+0x2a0>)
 80108a0:	881b      	ldrh	r3, [r3, #0]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80108a6:	4b6d      	ldr	r3, [pc, #436]	@ (8010a5c <tcp_input+0x2a0>)
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fd fb63 	bl	800df78 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	895b      	ldrh	r3, [r3, #10]
 80108b8:	8a3a      	ldrh	r2, [r7, #16]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	f200 836e 	bhi.w	8010f9c <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	4a64      	ldr	r2, [pc, #400]	@ (8010a58 <tcp_input+0x29c>)
 80108c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	8a3a      	ldrh	r2, [r7, #16]
 80108d0:	4611      	mov	r1, r2
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fd fb50 	bl	800df78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	891a      	ldrh	r2, [r3, #8]
 80108dc:	8a3b      	ldrh	r3, [r7, #16]
 80108de:	1ad3      	subs	r3, r2, r3
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	895b      	ldrh	r3, [r3, #10]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d005      	beq.n	80108fa <tcp_input+0x13e>
 80108ee:	4b54      	ldr	r3, [pc, #336]	@ (8010a40 <tcp_input+0x284>)
 80108f0:	22df      	movs	r2, #223	@ 0xdf
 80108f2:	495c      	ldr	r1, [pc, #368]	@ (8010a64 <tcp_input+0x2a8>)
 80108f4:	4854      	ldr	r0, [pc, #336]	@ (8010a48 <tcp_input+0x28c>)
 80108f6:	f004 ff59 	bl	80157ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	891a      	ldrh	r2, [r3, #8]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	891b      	ldrh	r3, [r3, #8]
 8010904:	429a      	cmp	r2, r3
 8010906:	d005      	beq.n	8010914 <tcp_input+0x158>
 8010908:	4b4d      	ldr	r3, [pc, #308]	@ (8010a40 <tcp_input+0x284>)
 801090a:	22e0      	movs	r2, #224	@ 0xe0
 801090c:	4956      	ldr	r1, [pc, #344]	@ (8010a68 <tcp_input+0x2ac>)
 801090e:	484e      	ldr	r0, [pc, #312]	@ (8010a48 <tcp_input+0x28c>)
 8010910:	f004 ff4c 	bl	80157ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010914:	4b4d      	ldr	r3, [pc, #308]	@ (8010a4c <tcp_input+0x290>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	b29b      	uxth	r3, r3
 801091c:	4a4b      	ldr	r2, [pc, #300]	@ (8010a4c <tcp_input+0x290>)
 801091e:	6814      	ldr	r4, [r2, #0]
 8010920:	4618      	mov	r0, r3
 8010922:	f7f9 fc13 	bl	800a14c <lwip_htons>
 8010926:	4603      	mov	r3, r0
 8010928:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801092a:	4b48      	ldr	r3, [pc, #288]	@ (8010a4c <tcp_input+0x290>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	885b      	ldrh	r3, [r3, #2]
 8010930:	b29b      	uxth	r3, r3
 8010932:	4a46      	ldr	r2, [pc, #280]	@ (8010a4c <tcp_input+0x290>)
 8010934:	6814      	ldr	r4, [r2, #0]
 8010936:	4618      	mov	r0, r3
 8010938:	f7f9 fc08 	bl	800a14c <lwip_htons>
 801093c:	4603      	mov	r3, r0
 801093e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010940:	4b42      	ldr	r3, [pc, #264]	@ (8010a4c <tcp_input+0x290>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	4a41      	ldr	r2, [pc, #260]	@ (8010a4c <tcp_input+0x290>)
 8010948:	6814      	ldr	r4, [r2, #0]
 801094a:	4618      	mov	r0, r3
 801094c:	f7f9 fc13 	bl	800a176 <lwip_htonl>
 8010950:	4603      	mov	r3, r0
 8010952:	6063      	str	r3, [r4, #4]
 8010954:	6863      	ldr	r3, [r4, #4]
 8010956:	4a45      	ldr	r2, [pc, #276]	@ (8010a6c <tcp_input+0x2b0>)
 8010958:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801095a:	4b3c      	ldr	r3, [pc, #240]	@ (8010a4c <tcp_input+0x290>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	4a3a      	ldr	r2, [pc, #232]	@ (8010a4c <tcp_input+0x290>)
 8010962:	6814      	ldr	r4, [r2, #0]
 8010964:	4618      	mov	r0, r3
 8010966:	f7f9 fc06 	bl	800a176 <lwip_htonl>
 801096a:	4603      	mov	r3, r0
 801096c:	60a3      	str	r3, [r4, #8]
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	4a3f      	ldr	r2, [pc, #252]	@ (8010a70 <tcp_input+0x2b4>)
 8010972:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010974:	4b35      	ldr	r3, [pc, #212]	@ (8010a4c <tcp_input+0x290>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	89db      	ldrh	r3, [r3, #14]
 801097a:	b29b      	uxth	r3, r3
 801097c:	4a33      	ldr	r2, [pc, #204]	@ (8010a4c <tcp_input+0x290>)
 801097e:	6814      	ldr	r4, [r2, #0]
 8010980:	4618      	mov	r0, r3
 8010982:	f7f9 fbe3 	bl	800a14c <lwip_htons>
 8010986:	4603      	mov	r3, r0
 8010988:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801098a:	4b30      	ldr	r3, [pc, #192]	@ (8010a4c <tcp_input+0x290>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	899b      	ldrh	r3, [r3, #12]
 8010990:	b29b      	uxth	r3, r3
 8010992:	4618      	mov	r0, r3
 8010994:	f7f9 fbda 	bl	800a14c <lwip_htons>
 8010998:	4603      	mov	r3, r0
 801099a:	b2db      	uxtb	r3, r3
 801099c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	4b34      	ldr	r3, [pc, #208]	@ (8010a74 <tcp_input+0x2b8>)
 80109a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	891a      	ldrh	r2, [r3, #8]
 80109aa:	4b33      	ldr	r3, [pc, #204]	@ (8010a78 <tcp_input+0x2bc>)
 80109ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80109ae:	4b31      	ldr	r3, [pc, #196]	@ (8010a74 <tcp_input+0x2b8>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	f003 0303 	and.w	r3, r3, #3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00c      	beq.n	80109d4 <tcp_input+0x218>
    tcplen++;
 80109ba:	4b2f      	ldr	r3, [pc, #188]	@ (8010a78 <tcp_input+0x2bc>)
 80109bc:	881b      	ldrh	r3, [r3, #0]
 80109be:	3301      	adds	r3, #1
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	4b2d      	ldr	r3, [pc, #180]	@ (8010a78 <tcp_input+0x2bc>)
 80109c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	891a      	ldrh	r2, [r3, #8]
 80109ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010a78 <tcp_input+0x2bc>)
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	f200 82e6 	bhi.w	8010fa0 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80109d4:	2300      	movs	r3, #0
 80109d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109d8:	4b28      	ldr	r3, [pc, #160]	@ (8010a7c <tcp_input+0x2c0>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	61fb      	str	r3, [r7, #28]
 80109de:	e09d      	b.n	8010b1c <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	7d1b      	ldrb	r3, [r3, #20]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d105      	bne.n	80109f4 <tcp_input+0x238>
 80109e8:	4b15      	ldr	r3, [pc, #84]	@ (8010a40 <tcp_input+0x284>)
 80109ea:	22fb      	movs	r2, #251	@ 0xfb
 80109ec:	4924      	ldr	r1, [pc, #144]	@ (8010a80 <tcp_input+0x2c4>)
 80109ee:	4816      	ldr	r0, [pc, #88]	@ (8010a48 <tcp_input+0x28c>)
 80109f0:	f004 fedc 	bl	80157ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	7d1b      	ldrb	r3, [r3, #20]
 80109f8:	2b0a      	cmp	r3, #10
 80109fa:	d105      	bne.n	8010a08 <tcp_input+0x24c>
 80109fc:	4b10      	ldr	r3, [pc, #64]	@ (8010a40 <tcp_input+0x284>)
 80109fe:	22fc      	movs	r2, #252	@ 0xfc
 8010a00:	4920      	ldr	r1, [pc, #128]	@ (8010a84 <tcp_input+0x2c8>)
 8010a02:	4811      	ldr	r0, [pc, #68]	@ (8010a48 <tcp_input+0x28c>)
 8010a04:	f004 fed2 	bl	80157ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	7d1b      	ldrb	r3, [r3, #20]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d105      	bne.n	8010a1c <tcp_input+0x260>
 8010a10:	4b0b      	ldr	r3, [pc, #44]	@ (8010a40 <tcp_input+0x284>)
 8010a12:	22fd      	movs	r2, #253	@ 0xfd
 8010a14:	491c      	ldr	r1, [pc, #112]	@ (8010a88 <tcp_input+0x2cc>)
 8010a16:	480c      	ldr	r0, [pc, #48]	@ (8010a48 <tcp_input+0x28c>)
 8010a18:	f004 fec8 	bl	80157ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	7a1b      	ldrb	r3, [r3, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d033      	beq.n	8010a8c <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	7a1a      	ldrb	r2, [r3, #8]
 8010a28:	4b09      	ldr	r3, [pc, #36]	@ (8010a50 <tcp_input+0x294>)
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a30:	3301      	adds	r3, #1
 8010a32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d029      	beq.n	8010a8c <tcp_input+0x2d0>
      prev = pcb;
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	61bb      	str	r3, [r7, #24]
      continue;
 8010a3c:	e06b      	b.n	8010b16 <tcp_input+0x35a>
 8010a3e:	bf00      	nop
 8010a40:	080183c8 	.word	0x080183c8
 8010a44:	08018434 	.word	0x08018434
 8010a48:	0801844c 	.word	0x0801844c
 8010a4c:	2401066c 	.word	0x2401066c
 8010a50:	24009b74 	.word	0x24009b74
 8010a54:	24010670 	.word	0x24010670
 8010a58:	24010674 	.word	0x24010674
 8010a5c:	24010672 	.word	0x24010672
 8010a60:	08018474 	.word	0x08018474
 8010a64:	08018484 	.word	0x08018484
 8010a68:	08018490 	.word	0x08018490
 8010a6c:	2401067c 	.word	0x2401067c
 8010a70:	24010680 	.word	0x24010680
 8010a74:	24010688 	.word	0x24010688
 8010a78:	24010686 	.word	0x24010686
 8010a7c:	24010650 	.word	0x24010650
 8010a80:	080184b0 	.word	0x080184b0
 8010a84:	080184d8 	.word	0x080184d8
 8010a88:	08018504 	.word	0x08018504
    }

    if (pcb->remote_port == tcphdr->src &&
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	8b1a      	ldrh	r2, [r3, #24]
 8010a90:	4b72      	ldr	r3, [pc, #456]	@ (8010c5c <tcp_input+0x4a0>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d13a      	bne.n	8010b12 <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	8ada      	ldrh	r2, [r3, #22]
 8010aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8010c5c <tcp_input+0x4a0>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	885b      	ldrh	r3, [r3, #2]
 8010aa6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d132      	bne.n	8010b12 <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	685a      	ldr	r2, [r3, #4]
 8010ab0:	4b6b      	ldr	r3, [pc, #428]	@ (8010c60 <tcp_input+0x4a4>)
 8010ab2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d12c      	bne.n	8010b12 <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	4b68      	ldr	r3, [pc, #416]	@ (8010c60 <tcp_input+0x4a4>)
 8010abe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d126      	bne.n	8010b12 <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	69fa      	ldr	r2, [r7, #28]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d106      	bne.n	8010adc <tcp_input+0x320>
 8010ace:	4b65      	ldr	r3, [pc, #404]	@ (8010c64 <tcp_input+0x4a8>)
 8010ad0:	f240 120d 	movw	r2, #269	@ 0x10d
 8010ad4:	4964      	ldr	r1, [pc, #400]	@ (8010c68 <tcp_input+0x4ac>)
 8010ad6:	4865      	ldr	r0, [pc, #404]	@ (8010c6c <tcp_input+0x4b0>)
 8010ad8:	f004 fe68 	bl	80157ac <iprintf>
      if (prev != NULL) {
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d00a      	beq.n	8010af8 <tcp_input+0x33c>
        prev->next = pcb->next;
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	68da      	ldr	r2, [r3, #12]
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010aea:	4b61      	ldr	r3, [pc, #388]	@ (8010c70 <tcp_input+0x4b4>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010af2:	4a5f      	ldr	r2, [pc, #380]	@ (8010c70 <tcp_input+0x4b4>)
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	69fa      	ldr	r2, [r7, #28]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d111      	bne.n	8010b26 <tcp_input+0x36a>
 8010b02:	4b58      	ldr	r3, [pc, #352]	@ (8010c64 <tcp_input+0x4a8>)
 8010b04:	f240 1215 	movw	r2, #277	@ 0x115
 8010b08:	495a      	ldr	r1, [pc, #360]	@ (8010c74 <tcp_input+0x4b8>)
 8010b0a:	4858      	ldr	r0, [pc, #352]	@ (8010c6c <tcp_input+0x4b0>)
 8010b0c:	f004 fe4e 	bl	80157ac <iprintf>
      break;
 8010b10:	e009      	b.n	8010b26 <tcp_input+0x36a>
    }
    prev = pcb;
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	61fb      	str	r3, [r7, #28]
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f47f af5e 	bne.w	80109e0 <tcp_input+0x224>
 8010b24:	e000      	b.n	8010b28 <tcp_input+0x36c>
      break;
 8010b26:	bf00      	nop
  }

  if (pcb == NULL) {
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f040 80aa 	bne.w	8010c84 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b30:	4b51      	ldr	r3, [pc, #324]	@ (8010c78 <tcp_input+0x4bc>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	61fb      	str	r3, [r7, #28]
 8010b36:	e03f      	b.n	8010bb8 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	7d1b      	ldrb	r3, [r3, #20]
 8010b3c:	2b0a      	cmp	r3, #10
 8010b3e:	d006      	beq.n	8010b4e <tcp_input+0x392>
 8010b40:	4b48      	ldr	r3, [pc, #288]	@ (8010c64 <tcp_input+0x4a8>)
 8010b42:	f240 121f 	movw	r2, #287	@ 0x11f
 8010b46:	494d      	ldr	r1, [pc, #308]	@ (8010c7c <tcp_input+0x4c0>)
 8010b48:	4848      	ldr	r0, [pc, #288]	@ (8010c6c <tcp_input+0x4b0>)
 8010b4a:	f004 fe2f 	bl	80157ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	7a1b      	ldrb	r3, [r3, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d009      	beq.n	8010b6a <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	7a1a      	ldrb	r2, [r3, #8]
 8010b5a:	4b41      	ldr	r3, [pc, #260]	@ (8010c60 <tcp_input+0x4a4>)
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b62:	3301      	adds	r3, #1
 8010b64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d122      	bne.n	8010bb0 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	8b1a      	ldrh	r2, [r3, #24]
 8010b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8010c5c <tcp_input+0x4a0>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d11b      	bne.n	8010bb2 <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	8ada      	ldrh	r2, [r3, #22]
 8010b7e:	4b37      	ldr	r3, [pc, #220]	@ (8010c5c <tcp_input+0x4a0>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	885b      	ldrh	r3, [r3, #2]
 8010b84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d113      	bne.n	8010bb2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	4b34      	ldr	r3, [pc, #208]	@ (8010c60 <tcp_input+0x4a4>)
 8010b90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d10d      	bne.n	8010bb2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	4b31      	ldr	r3, [pc, #196]	@ (8010c60 <tcp_input+0x4a4>)
 8010b9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d107      	bne.n	8010bb2 <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010ba2:	69f8      	ldr	r0, [r7, #28]
 8010ba4:	f000 fb56 	bl	8011254 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7fd fa6b 	bl	800e084 <pbuf_free>
        return;
 8010bae:	e1fd      	b.n	8010fac <tcp_input+0x7f0>
        continue;
 8010bb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	61fb      	str	r3, [r7, #28]
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1bc      	bne.n	8010b38 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8010c80 <tcp_input+0x4c4>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	617b      	str	r3, [r7, #20]
 8010bc8:	e02a      	b.n	8010c20 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	7a1b      	ldrb	r3, [r3, #8]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00c      	beq.n	8010bec <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	7a1a      	ldrb	r2, [r3, #8]
 8010bd6:	4b22      	ldr	r3, [pc, #136]	@ (8010c60 <tcp_input+0x4a4>)
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010bde:	3301      	adds	r3, #1
 8010be0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d002      	beq.n	8010bec <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	61bb      	str	r3, [r7, #24]
        continue;
 8010bea:	e016      	b.n	8010c1a <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	8ada      	ldrh	r2, [r3, #22]
 8010bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8010c5c <tcp_input+0x4a0>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d10c      	bne.n	8010c16 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	4b17      	ldr	r3, [pc, #92]	@ (8010c60 <tcp_input+0x4a4>)
 8010c02:	695b      	ldr	r3, [r3, #20]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d00f      	beq.n	8010c28 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00d      	beq.n	8010c2a <tcp_input+0x46e>
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d009      	beq.n	8010c2a <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	617b      	str	r3, [r7, #20]
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1d1      	bne.n	8010bca <tcp_input+0x40e>
 8010c26:	e000      	b.n	8010c2a <tcp_input+0x46e>
            break;
 8010c28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d029      	beq.n	8010c84 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00a      	beq.n	8010c4c <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010c3e:	4b10      	ldr	r3, [pc, #64]	@ (8010c80 <tcp_input+0x4c4>)
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010c46:	4a0e      	ldr	r2, [pc, #56]	@ (8010c80 <tcp_input+0x4c4>)
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010c4c:	6978      	ldr	r0, [r7, #20]
 8010c4e:	f000 fa03 	bl	8011058 <tcp_listen_input>
      }
      pbuf_free(p);
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7fd fa16 	bl	800e084 <pbuf_free>
      return;
 8010c58:	e1a8      	b.n	8010fac <tcp_input+0x7f0>
 8010c5a:	bf00      	nop
 8010c5c:	2401066c 	.word	0x2401066c
 8010c60:	24009b74 	.word	0x24009b74
 8010c64:	080183c8 	.word	0x080183c8
 8010c68:	0801852c 	.word	0x0801852c
 8010c6c:	0801844c 	.word	0x0801844c
 8010c70:	24010650 	.word	0x24010650
 8010c74:	08018558 	.word	0x08018558
 8010c78:	24010654 	.word	0x24010654
 8010c7c:	08018584 	.word	0x08018584
 8010c80:	2401064c 	.word	0x2401064c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f000 8158 	beq.w	8010f3c <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010c8c:	4b95      	ldr	r3, [pc, #596]	@ (8010ee4 <tcp_input+0x728>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	891a      	ldrh	r2, [r3, #8]
 8010c96:	4b93      	ldr	r3, [pc, #588]	@ (8010ee4 <tcp_input+0x728>)
 8010c98:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010c9a:	4a92      	ldr	r2, [pc, #584]	@ (8010ee4 <tcp_input+0x728>)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010ca0:	4b91      	ldr	r3, [pc, #580]	@ (8010ee8 <tcp_input+0x72c>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a8f      	ldr	r2, [pc, #572]	@ (8010ee4 <tcp_input+0x728>)
 8010ca6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010ca8:	4b90      	ldr	r3, [pc, #576]	@ (8010eec <tcp_input+0x730>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010cae:	4b90      	ldr	r3, [pc, #576]	@ (8010ef0 <tcp_input+0x734>)
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8010ef4 <tcp_input+0x738>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010cba:	4b8f      	ldr	r3, [pc, #572]	@ (8010ef8 <tcp_input+0x73c>)
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	f003 0308 	and.w	r3, r3, #8
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d006      	beq.n	8010cd4 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	7b5b      	ldrb	r3, [r3, #13]
 8010cca:	f043 0301 	orr.w	r3, r3, #1
 8010cce:	b2da      	uxtb	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d017      	beq.n	8010d0c <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cdc:	69f8      	ldr	r0, [r7, #28]
 8010cde:	f7ff f84d 	bl	800fd7c <tcp_process_refused_data>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	f113 0f0d 	cmn.w	r3, #13
 8010ce8:	d007      	beq.n	8010cfa <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00c      	beq.n	8010d0c <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010cf2:	4b82      	ldr	r3, [pc, #520]	@ (8010efc <tcp_input+0x740>)
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d008      	beq.n	8010d0c <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f040 80e4 	bne.w	8010ecc <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010d04:	69f8      	ldr	r0, [r7, #28]
 8010d06:	f003 fe05 	bl	8014914 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010d0a:	e0df      	b.n	8010ecc <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 8010d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8010f00 <tcp_input+0x744>)
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010d12:	69f8      	ldr	r0, [r7, #28]
 8010d14:	f000 fb18 	bl	8011348 <tcp_process>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010d1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d20:	f113 0f0d 	cmn.w	r3, #13
 8010d24:	f000 80d4 	beq.w	8010ed0 <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 8010d28:	4b71      	ldr	r3, [pc, #452]	@ (8010ef0 <tcp_input+0x734>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	f003 0308 	and.w	r3, r3, #8
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d015      	beq.n	8010d60 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d008      	beq.n	8010d50 <tcp_input+0x594>
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d44:	69fa      	ldr	r2, [r7, #28]
 8010d46:	6912      	ldr	r2, [r2, #16]
 8010d48:	f06f 010d 	mvn.w	r1, #13
 8010d4c:	4610      	mov	r0, r2
 8010d4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010d50:	69f9      	ldr	r1, [r7, #28]
 8010d52:	486c      	ldr	r0, [pc, #432]	@ (8010f04 <tcp_input+0x748>)
 8010d54:	f7ff fbba 	bl	80104cc <tcp_pcb_remove>
        tcp_free(pcb);
 8010d58:	69f8      	ldr	r0, [r7, #28]
 8010d5a:	f7fd fde9 	bl	800e930 <tcp_free>
 8010d5e:	e0da      	b.n	8010f16 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 8010d60:	2300      	movs	r3, #0
 8010d62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010d64:	4b63      	ldr	r3, [pc, #396]	@ (8010ef4 <tcp_input+0x738>)
 8010d66:	881b      	ldrh	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d01d      	beq.n	8010da8 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010d6c:	4b61      	ldr	r3, [pc, #388]	@ (8010ef4 <tcp_input+0x738>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00a      	beq.n	8010d92 <tcp_input+0x5d6>
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d82:	69fa      	ldr	r2, [r7, #28]
 8010d84:	6910      	ldr	r0, [r2, #16]
 8010d86:	89fa      	ldrh	r2, [r7, #14]
 8010d88:	69f9      	ldr	r1, [r7, #28]
 8010d8a:	4798      	blx	r3
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	74fb      	strb	r3, [r7, #19]
 8010d90:	e001      	b.n	8010d96 <tcp_input+0x5da>
 8010d92:	2300      	movs	r3, #0
 8010d94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010d96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d9a:	f113 0f0d 	cmn.w	r3, #13
 8010d9e:	f000 8099 	beq.w	8010ed4 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010da2:	4b54      	ldr	r3, [pc, #336]	@ (8010ef4 <tcp_input+0x738>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010da8:	69f8      	ldr	r0, [r7, #28]
 8010daa:	f000 f915 	bl	8010fd8 <tcp_input_delayed_close>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f040 8091 	bne.w	8010ed8 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010db6:	4b4d      	ldr	r3, [pc, #308]	@ (8010eec <tcp_input+0x730>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d041      	beq.n	8010e42 <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d006      	beq.n	8010dd4 <tcp_input+0x618>
 8010dc6:	4b50      	ldr	r3, [pc, #320]	@ (8010f08 <tcp_input+0x74c>)
 8010dc8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010dcc:	494f      	ldr	r1, [pc, #316]	@ (8010f0c <tcp_input+0x750>)
 8010dce:	4850      	ldr	r0, [pc, #320]	@ (8010f10 <tcp_input+0x754>)
 8010dd0:	f004 fcec 	bl	80157ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	8b5b      	ldrh	r3, [r3, #26]
 8010dd8:	f003 0310 	and.w	r3, r3, #16
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d008      	beq.n	8010df2 <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010de0:	4b42      	ldr	r3, [pc, #264]	@ (8010eec <tcp_input+0x730>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fd f94d 	bl	800e084 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010dea:	69f8      	ldr	r0, [r7, #28]
 8010dec:	f7fe f88c 	bl	800ef08 <tcp_abort>
            goto aborted;
 8010df0:	e091      	b.n	8010f16 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00c      	beq.n	8010e16 <tcp_input+0x65a>
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	6918      	ldr	r0, [r3, #16]
 8010e06:	4b39      	ldr	r3, [pc, #228]	@ (8010eec <tcp_input+0x730>)
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	69f9      	ldr	r1, [r7, #28]
 8010e0e:	47a0      	blx	r4
 8010e10:	4603      	mov	r3, r0
 8010e12:	74fb      	strb	r3, [r7, #19]
 8010e14:	e008      	b.n	8010e28 <tcp_input+0x66c>
 8010e16:	4b35      	ldr	r3, [pc, #212]	@ (8010eec <tcp_input+0x730>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	69f9      	ldr	r1, [r7, #28]
 8010e1e:	2000      	movs	r0, #0
 8010e20:	f7ff f884 	bl	800ff2c <tcp_recv_null>
 8010e24:	4603      	mov	r3, r0
 8010e26:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010e28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e2c:	f113 0f0d 	cmn.w	r3, #13
 8010e30:	d054      	beq.n	8010edc <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d003      	beq.n	8010e42 <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8010eec <tcp_input+0x730>)
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010e42:	4b2b      	ldr	r3, [pc, #172]	@ (8010ef0 <tcp_input+0x734>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	f003 0320 	and.w	r3, r3, #32
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d031      	beq.n	8010eb2 <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d009      	beq.n	8010e6a <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e5a:	7b5a      	ldrb	r2, [r3, #13]
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e60:	f042 0220 	orr.w	r2, r2, #32
 8010e64:	b2d2      	uxtb	r2, r2
 8010e66:	735a      	strb	r2, [r3, #13]
 8010e68:	e023      	b.n	8010eb2 <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e6e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d005      	beq.n	8010e82 <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d00b      	beq.n	8010ea4 <tcp_input+0x6e8>
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	6918      	ldr	r0, [r3, #16]
 8010e96:	2300      	movs	r3, #0
 8010e98:	2200      	movs	r2, #0
 8010e9a:	69f9      	ldr	r1, [r7, #28]
 8010e9c:	47a0      	blx	r4
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	74fb      	strb	r3, [r7, #19]
 8010ea2:	e001      	b.n	8010ea8 <tcp_input+0x6ec>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ea8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010eac:	f113 0f0d 	cmn.w	r3, #13
 8010eb0:	d016      	beq.n	8010ee0 <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010eb2:	4b13      	ldr	r3, [pc, #76]	@ (8010f00 <tcp_input+0x744>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010eb8:	69f8      	ldr	r0, [r7, #28]
 8010eba:	f000 f88d 	bl	8010fd8 <tcp_input_delayed_close>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d127      	bne.n	8010f14 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010ec4:	69f8      	ldr	r0, [r7, #28]
 8010ec6:	f002 ff1d 	bl	8013d04 <tcp_output>
 8010eca:	e024      	b.n	8010f16 <tcp_input+0x75a>
        goto aborted;
 8010ecc:	bf00      	nop
 8010ece:	e022      	b.n	8010f16 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010ed0:	bf00      	nop
 8010ed2:	e020      	b.n	8010f16 <tcp_input+0x75a>
              goto aborted;
 8010ed4:	bf00      	nop
 8010ed6:	e01e      	b.n	8010f16 <tcp_input+0x75a>
          goto aborted;
 8010ed8:	bf00      	nop
 8010eda:	e01c      	b.n	8010f16 <tcp_input+0x75a>
            goto aborted;
 8010edc:	bf00      	nop
 8010ede:	e01a      	b.n	8010f16 <tcp_input+0x75a>
              goto aborted;
 8010ee0:	bf00      	nop
 8010ee2:	e018      	b.n	8010f16 <tcp_input+0x75a>
 8010ee4:	2401065c 	.word	0x2401065c
 8010ee8:	2401066c 	.word	0x2401066c
 8010eec:	2401068c 	.word	0x2401068c
 8010ef0:	24010689 	.word	0x24010689
 8010ef4:	24010684 	.word	0x24010684
 8010ef8:	24010688 	.word	0x24010688
 8010efc:	24010686 	.word	0x24010686
 8010f00:	24010690 	.word	0x24010690
 8010f04:	24010650 	.word	0x24010650
 8010f08:	080183c8 	.word	0x080183c8
 8010f0c:	080185b4 	.word	0x080185b4
 8010f10:	0801844c 	.word	0x0801844c
          goto aborted;
 8010f14:	bf00      	nop
    tcp_input_pcb = NULL;
 8010f16:	4b27      	ldr	r3, [pc, #156]	@ (8010fb4 <tcp_input+0x7f8>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010f1c:	4b26      	ldr	r3, [pc, #152]	@ (8010fb8 <tcp_input+0x7fc>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010f22:	4b26      	ldr	r3, [pc, #152]	@ (8010fbc <tcp_input+0x800>)
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d03f      	beq.n	8010faa <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 8010f2a:	4b24      	ldr	r3, [pc, #144]	@ (8010fbc <tcp_input+0x800>)
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fd f8a8 	bl	800e084 <pbuf_free>
      inseg.p = NULL;
 8010f34:	4b21      	ldr	r3, [pc, #132]	@ (8010fbc <tcp_input+0x800>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010f3a:	e036      	b.n	8010faa <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010f3c:	4b20      	ldr	r3, [pc, #128]	@ (8010fc0 <tcp_input+0x804>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7f9 f901 	bl	800a14c <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0304 	and.w	r3, r3, #4
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d118      	bne.n	8010f88 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f56:	4b1b      	ldr	r3, [pc, #108]	@ (8010fc4 <tcp_input+0x808>)
 8010f58:	6819      	ldr	r1, [r3, #0]
 8010f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fc8 <tcp_input+0x80c>)
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	4b1a      	ldr	r3, [pc, #104]	@ (8010fcc <tcp_input+0x810>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f66:	4b16      	ldr	r3, [pc, #88]	@ (8010fc0 <tcp_input+0x804>)
 8010f68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f6a:	885b      	ldrh	r3, [r3, #2]
 8010f6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f6e:	4a14      	ldr	r2, [pc, #80]	@ (8010fc0 <tcp_input+0x804>)
 8010f70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f72:	8812      	ldrh	r2, [r2, #0]
 8010f74:	b292      	uxth	r2, r2
 8010f76:	9202      	str	r2, [sp, #8]
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	4b15      	ldr	r3, [pc, #84]	@ (8010fd0 <tcp_input+0x814>)
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	4b15      	ldr	r3, [pc, #84]	@ (8010fd4 <tcp_input+0x818>)
 8010f80:	4602      	mov	r2, r0
 8010f82:	2000      	movs	r0, #0
 8010f84:	f003 fc74 	bl	8014870 <tcp_rst>
    pbuf_free(p);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7fd f87b 	bl	800e084 <pbuf_free>
  return;
 8010f8e:	e00c      	b.n	8010faa <tcp_input+0x7ee>
    goto dropped;
 8010f90:	bf00      	nop
 8010f92:	e006      	b.n	8010fa2 <tcp_input+0x7e6>
    goto dropped;
 8010f94:	bf00      	nop
 8010f96:	e004      	b.n	8010fa2 <tcp_input+0x7e6>
    goto dropped;
 8010f98:	bf00      	nop
 8010f9a:	e002      	b.n	8010fa2 <tcp_input+0x7e6>
      goto dropped;
 8010f9c:	bf00      	nop
 8010f9e:	e000      	b.n	8010fa2 <tcp_input+0x7e6>
      goto dropped;
 8010fa0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f7fd f86e 	bl	800e084 <pbuf_free>
 8010fa8:	e000      	b.n	8010fac <tcp_input+0x7f0>
  return;
 8010faa:	bf00      	nop
}
 8010fac:	3724      	adds	r7, #36	@ 0x24
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd90      	pop	{r4, r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	24010690 	.word	0x24010690
 8010fb8:	2401068c 	.word	0x2401068c
 8010fbc:	2401065c 	.word	0x2401065c
 8010fc0:	2401066c 	.word	0x2401066c
 8010fc4:	24010680 	.word	0x24010680
 8010fc8:	24010686 	.word	0x24010686
 8010fcc:	2401067c 	.word	0x2401067c
 8010fd0:	24009b84 	.word	0x24009b84
 8010fd4:	24009b88 	.word	0x24009b88

08010fd8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d106      	bne.n	8010ff4 <tcp_input_delayed_close+0x1c>
 8010fe6:	4b17      	ldr	r3, [pc, #92]	@ (8011044 <tcp_input_delayed_close+0x6c>)
 8010fe8:	f240 225a 	movw	r2, #602	@ 0x25a
 8010fec:	4916      	ldr	r1, [pc, #88]	@ (8011048 <tcp_input_delayed_close+0x70>)
 8010fee:	4817      	ldr	r0, [pc, #92]	@ (801104c <tcp_input_delayed_close+0x74>)
 8010ff0:	f004 fbdc 	bl	80157ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010ff4:	4b16      	ldr	r3, [pc, #88]	@ (8011050 <tcp_input_delayed_close+0x78>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	f003 0310 	and.w	r3, r3, #16
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d01c      	beq.n	801103a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	8b5b      	ldrh	r3, [r3, #26]
 8011004:	f003 0310 	and.w	r3, r3, #16
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10d      	bne.n	8011028 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011012:	2b00      	cmp	r3, #0
 8011014:	d008      	beq.n	8011028 <tcp_input_delayed_close+0x50>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	6912      	ldr	r2, [r2, #16]
 8011020:	f06f 010e 	mvn.w	r1, #14
 8011024:	4610      	mov	r0, r2
 8011026:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011028:	6879      	ldr	r1, [r7, #4]
 801102a:	480a      	ldr	r0, [pc, #40]	@ (8011054 <tcp_input_delayed_close+0x7c>)
 801102c:	f7ff fa4e 	bl	80104cc <tcp_pcb_remove>
    tcp_free(pcb);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7fd fc7d 	bl	800e930 <tcp_free>
    return 1;
 8011036:	2301      	movs	r3, #1
 8011038:	e000      	b.n	801103c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801103a:	2300      	movs	r3, #0
}
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	080183c8 	.word	0x080183c8
 8011048:	080185d0 	.word	0x080185d0
 801104c:	0801844c 	.word	0x0801844c
 8011050:	24010689 	.word	0x24010689
 8011054:	24010650 	.word	0x24010650

08011058 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b08b      	sub	sp, #44	@ 0x2c
 801105c:	af04      	add	r7, sp, #16
 801105e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011060:	4b6f      	ldr	r3, [pc, #444]	@ (8011220 <tcp_listen_input+0x1c8>)
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f003 0304 	and.w	r3, r3, #4
 8011068:	2b00      	cmp	r3, #0
 801106a:	f040 80d2 	bne.w	8011212 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <tcp_listen_input+0x2a>
 8011074:	4b6b      	ldr	r3, [pc, #428]	@ (8011224 <tcp_listen_input+0x1cc>)
 8011076:	f240 2281 	movw	r2, #641	@ 0x281
 801107a:	496b      	ldr	r1, [pc, #428]	@ (8011228 <tcp_listen_input+0x1d0>)
 801107c:	486b      	ldr	r0, [pc, #428]	@ (801122c <tcp_listen_input+0x1d4>)
 801107e:	f004 fb95 	bl	80157ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011082:	4b67      	ldr	r3, [pc, #412]	@ (8011220 <tcp_listen_input+0x1c8>)
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	f003 0310 	and.w	r3, r3, #16
 801108a:	2b00      	cmp	r3, #0
 801108c:	d019      	beq.n	80110c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801108e:	4b68      	ldr	r3, [pc, #416]	@ (8011230 <tcp_listen_input+0x1d8>)
 8011090:	6819      	ldr	r1, [r3, #0]
 8011092:	4b68      	ldr	r3, [pc, #416]	@ (8011234 <tcp_listen_input+0x1dc>)
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	4b67      	ldr	r3, [pc, #412]	@ (8011238 <tcp_listen_input+0x1e0>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801109e:	4b67      	ldr	r3, [pc, #412]	@ (801123c <tcp_listen_input+0x1e4>)
 80110a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110a2:	885b      	ldrh	r3, [r3, #2]
 80110a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110a6:	4a65      	ldr	r2, [pc, #404]	@ (801123c <tcp_listen_input+0x1e4>)
 80110a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110aa:	8812      	ldrh	r2, [r2, #0]
 80110ac:	b292      	uxth	r2, r2
 80110ae:	9202      	str	r2, [sp, #8]
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	4b63      	ldr	r3, [pc, #396]	@ (8011240 <tcp_listen_input+0x1e8>)
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	4b63      	ldr	r3, [pc, #396]	@ (8011244 <tcp_listen_input+0x1ec>)
 80110b8:	4602      	mov	r2, r0
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f003 fbd8 	bl	8014870 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80110c0:	e0a9      	b.n	8011216 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80110c2:	4b57      	ldr	r3, [pc, #348]	@ (8011220 <tcp_listen_input+0x1c8>)
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	f003 0302 	and.w	r3, r3, #2
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f000 80a3 	beq.w	8011216 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	7d5b      	ldrb	r3, [r3, #21]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7ff f84d 	bl	8010174 <tcp_alloc>
 80110da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d111      	bne.n	8011106 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00a      	beq.n	8011100 <tcp_listen_input+0xa8>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	699b      	ldr	r3, [r3, #24]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	6910      	ldr	r0, [r2, #16]
 80110f2:	f04f 32ff 	mov.w	r2, #4294967295
 80110f6:	2100      	movs	r1, #0
 80110f8:	4798      	blx	r3
 80110fa:	4603      	mov	r3, r0
 80110fc:	73bb      	strb	r3, [r7, #14]
      return;
 80110fe:	e08b      	b.n	8011218 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011100:	23f0      	movs	r3, #240	@ 0xf0
 8011102:	73bb      	strb	r3, [r7, #14]
      return;
 8011104:	e088      	b.n	8011218 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011106:	4b50      	ldr	r3, [pc, #320]	@ (8011248 <tcp_listen_input+0x1f0>)
 8011108:	695a      	ldr	r2, [r3, #20]
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801110e:	4b4e      	ldr	r3, [pc, #312]	@ (8011248 <tcp_listen_input+0x1f0>)
 8011110:	691a      	ldr	r2, [r3, #16]
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8ada      	ldrh	r2, [r3, #22]
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801111e:	4b47      	ldr	r3, [pc, #284]	@ (801123c <tcp_listen_input+0x1e4>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	881b      	ldrh	r3, [r3, #0]
 8011124:	b29a      	uxth	r2, r3
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	2203      	movs	r2, #3
 801112e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011130:	4b41      	ldr	r3, [pc, #260]	@ (8011238 <tcp_listen_input+0x1e0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011142:	6978      	ldr	r0, [r7, #20]
 8011144:	f7ff fa56 	bl	80105f4 <tcp_next_iss>
 8011148:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	693a      	ldr	r2, [r7, #16]
 8011154:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	693a      	ldr	r2, [r7, #16]
 801115a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	693a      	ldr	r2, [r7, #16]
 8011160:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011162:	4b35      	ldr	r3, [pc, #212]	@ (8011238 <tcp_listen_input+0x1e0>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	1e5a      	subs	r2, r3, #1
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	691a      	ldr	r2, [r3, #16]
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7a5b      	ldrb	r3, [r3, #9]
 801117e:	f003 030c 	and.w	r3, r3, #12
 8011182:	b2da      	uxtb	r2, r3
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7a1a      	ldrb	r2, [r3, #8]
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011190:	4b2e      	ldr	r3, [pc, #184]	@ (801124c <tcp_listen_input+0x1f4>)
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	60da      	str	r2, [r3, #12]
 8011198:	4a2c      	ldr	r2, [pc, #176]	@ (801124c <tcp_listen_input+0x1f4>)
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	6013      	str	r3, [r2, #0]
 801119e:	f003 fec7 	bl	8014f30 <tcp_timer_needed>
 80111a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011250 <tcp_listen_input+0x1f8>)
 80111a4:	2201      	movs	r2, #1
 80111a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80111a8:	6978      	ldr	r0, [r7, #20]
 80111aa:	f001 fd8b 	bl	8012cc4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80111ae:	4b23      	ldr	r3, [pc, #140]	@ (801123c <tcp_listen_input+0x1e4>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	89db      	ldrh	r3, [r3, #14]
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	3304      	adds	r3, #4
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fa fa9b 	bl	800b70c <ip4_route>
 80111d6:	4601      	mov	r1, r0
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	3304      	adds	r3, #4
 80111dc:	461a      	mov	r2, r3
 80111de:	4620      	mov	r0, r4
 80111e0:	f7ff fa2e 	bl	8010640 <tcp_eff_send_mss_netif>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80111ec:	2112      	movs	r1, #18
 80111ee:	6978      	ldr	r0, [r7, #20]
 80111f0:	f002 fc9a 	bl	8013b28 <tcp_enqueue_flags>
 80111f4:	4603      	mov	r3, r0
 80111f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80111f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d004      	beq.n	801120a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011200:	2100      	movs	r1, #0
 8011202:	6978      	ldr	r0, [r7, #20]
 8011204:	f7fd fdc0 	bl	800ed88 <tcp_abandon>
      return;
 8011208:	e006      	b.n	8011218 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801120a:	6978      	ldr	r0, [r7, #20]
 801120c:	f002 fd7a 	bl	8013d04 <tcp_output>
  return;
 8011210:	e001      	b.n	8011216 <tcp_listen_input+0x1be>
    return;
 8011212:	bf00      	nop
 8011214:	e000      	b.n	8011218 <tcp_listen_input+0x1c0>
  return;
 8011216:	bf00      	nop
}
 8011218:	371c      	adds	r7, #28
 801121a:	46bd      	mov	sp, r7
 801121c:	bd90      	pop	{r4, r7, pc}
 801121e:	bf00      	nop
 8011220:	24010688 	.word	0x24010688
 8011224:	080183c8 	.word	0x080183c8
 8011228:	080185f8 	.word	0x080185f8
 801122c:	0801844c 	.word	0x0801844c
 8011230:	24010680 	.word	0x24010680
 8011234:	24010686 	.word	0x24010686
 8011238:	2401067c 	.word	0x2401067c
 801123c:	2401066c 	.word	0x2401066c
 8011240:	24009b84 	.word	0x24009b84
 8011244:	24009b88 	.word	0x24009b88
 8011248:	24009b74 	.word	0x24009b74
 801124c:	24010650 	.word	0x24010650
 8011250:	24010658 	.word	0x24010658

08011254 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af04      	add	r7, sp, #16
 801125a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801125c:	4b2f      	ldr	r3, [pc, #188]	@ (801131c <tcp_timewait_input+0xc8>)
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	f003 0304 	and.w	r3, r3, #4
 8011264:	2b00      	cmp	r3, #0
 8011266:	d153      	bne.n	8011310 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d106      	bne.n	801127c <tcp_timewait_input+0x28>
 801126e:	4b2c      	ldr	r3, [pc, #176]	@ (8011320 <tcp_timewait_input+0xcc>)
 8011270:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011274:	492b      	ldr	r1, [pc, #172]	@ (8011324 <tcp_timewait_input+0xd0>)
 8011276:	482c      	ldr	r0, [pc, #176]	@ (8011328 <tcp_timewait_input+0xd4>)
 8011278:	f004 fa98 	bl	80157ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801127c:	4b27      	ldr	r3, [pc, #156]	@ (801131c <tcp_timewait_input+0xc8>)
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	f003 0302 	and.w	r3, r3, #2
 8011284:	2b00      	cmp	r3, #0
 8011286:	d02a      	beq.n	80112de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011288:	4b28      	ldr	r3, [pc, #160]	@ (801132c <tcp_timewait_input+0xd8>)
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	2b00      	cmp	r3, #0
 8011294:	db2d      	blt.n	80112f2 <tcp_timewait_input+0x9e>
 8011296:	4b25      	ldr	r3, [pc, #148]	@ (801132c <tcp_timewait_input+0xd8>)
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129e:	6879      	ldr	r1, [r7, #4]
 80112a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80112a2:	440b      	add	r3, r1
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dc23      	bgt.n	80112f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112aa:	4b21      	ldr	r3, [pc, #132]	@ (8011330 <tcp_timewait_input+0xdc>)
 80112ac:	6819      	ldr	r1, [r3, #0]
 80112ae:	4b21      	ldr	r3, [pc, #132]	@ (8011334 <tcp_timewait_input+0xe0>)
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	461a      	mov	r2, r3
 80112b4:	4b1d      	ldr	r3, [pc, #116]	@ (801132c <tcp_timewait_input+0xd8>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112ba:	4b1f      	ldr	r3, [pc, #124]	@ (8011338 <tcp_timewait_input+0xe4>)
 80112bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112be:	885b      	ldrh	r3, [r3, #2]
 80112c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112c2:	4a1d      	ldr	r2, [pc, #116]	@ (8011338 <tcp_timewait_input+0xe4>)
 80112c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112c6:	8812      	ldrh	r2, [r2, #0]
 80112c8:	b292      	uxth	r2, r2
 80112ca:	9202      	str	r2, [sp, #8]
 80112cc:	9301      	str	r3, [sp, #4]
 80112ce:	4b1b      	ldr	r3, [pc, #108]	@ (801133c <tcp_timewait_input+0xe8>)
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	4b1b      	ldr	r3, [pc, #108]	@ (8011340 <tcp_timewait_input+0xec>)
 80112d4:	4602      	mov	r2, r0
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f003 faca 	bl	8014870 <tcp_rst>
      return;
 80112dc:	e01b      	b.n	8011316 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80112de:	4b0f      	ldr	r3, [pc, #60]	@ (801131c <tcp_timewait_input+0xc8>)
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	f003 0301 	and.w	r3, r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d003      	beq.n	80112f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80112ea:	4b16      	ldr	r3, [pc, #88]	@ (8011344 <tcp_timewait_input+0xf0>)
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80112f2:	4b10      	ldr	r3, [pc, #64]	@ (8011334 <tcp_timewait_input+0xe0>)
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00c      	beq.n	8011314 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	8b5b      	ldrh	r3, [r3, #26]
 80112fe:	f043 0302 	orr.w	r3, r3, #2
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f002 fcfb 	bl	8013d04 <tcp_output>
  }
  return;
 801130e:	e001      	b.n	8011314 <tcp_timewait_input+0xc0>
    return;
 8011310:	bf00      	nop
 8011312:	e000      	b.n	8011316 <tcp_timewait_input+0xc2>
  return;
 8011314:	bf00      	nop
}
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	24010688 	.word	0x24010688
 8011320:	080183c8 	.word	0x080183c8
 8011324:	08018618 	.word	0x08018618
 8011328:	0801844c 	.word	0x0801844c
 801132c:	2401067c 	.word	0x2401067c
 8011330:	24010680 	.word	0x24010680
 8011334:	24010686 	.word	0x24010686
 8011338:	2401066c 	.word	0x2401066c
 801133c:	24009b84 	.word	0x24009b84
 8011340:	24009b88 	.word	0x24009b88
 8011344:	24010644 	.word	0x24010644

08011348 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011348:	b590      	push	{r4, r7, lr}
 801134a:	b08d      	sub	sp, #52	@ 0x34
 801134c:	af04      	add	r7, sp, #16
 801134e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011350:	2300      	movs	r3, #0
 8011352:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d106      	bne.n	801136c <tcp_process+0x24>
 801135e:	4b9d      	ldr	r3, [pc, #628]	@ (80115d4 <tcp_process+0x28c>)
 8011360:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011364:	499c      	ldr	r1, [pc, #624]	@ (80115d8 <tcp_process+0x290>)
 8011366:	489d      	ldr	r0, [pc, #628]	@ (80115dc <tcp_process+0x294>)
 8011368:	f004 fa20 	bl	80157ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801136c:	4b9c      	ldr	r3, [pc, #624]	@ (80115e0 <tcp_process+0x298>)
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	f003 0304 	and.w	r3, r3, #4
 8011374:	2b00      	cmp	r3, #0
 8011376:	d04e      	beq.n	8011416 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7d1b      	ldrb	r3, [r3, #20]
 801137c:	2b02      	cmp	r3, #2
 801137e:	d108      	bne.n	8011392 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011384:	4b97      	ldr	r3, [pc, #604]	@ (80115e4 <tcp_process+0x29c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d123      	bne.n	80113d4 <tcp_process+0x8c>
        acceptable = 1;
 801138c:	2301      	movs	r3, #1
 801138e:	76fb      	strb	r3, [r7, #27]
 8011390:	e020      	b.n	80113d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011396:	4b94      	ldr	r3, [pc, #592]	@ (80115e8 <tcp_process+0x2a0>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	429a      	cmp	r2, r3
 801139c:	d102      	bne.n	80113a4 <tcp_process+0x5c>
        acceptable = 1;
 801139e:	2301      	movs	r3, #1
 80113a0:	76fb      	strb	r3, [r7, #27]
 80113a2:	e017      	b.n	80113d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80113a4:	4b90      	ldr	r3, [pc, #576]	@ (80115e8 <tcp_process+0x2a0>)
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	db10      	blt.n	80113d4 <tcp_process+0x8c>
 80113b2:	4b8d      	ldr	r3, [pc, #564]	@ (80115e8 <tcp_process+0x2a0>)
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ba:	6879      	ldr	r1, [r7, #4]
 80113bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80113be:	440b      	add	r3, r1
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	dc06      	bgt.n	80113d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8b5b      	ldrh	r3, [r3, #26]
 80113ca:	f043 0302 	orr.w	r3, r3, #2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80113d4:	7efb      	ldrb	r3, [r7, #27]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d01b      	beq.n	8011412 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	7d1b      	ldrb	r3, [r3, #20]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d106      	bne.n	80113f0 <tcp_process+0xa8>
 80113e2:	4b7c      	ldr	r3, [pc, #496]	@ (80115d4 <tcp_process+0x28c>)
 80113e4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80113e8:	4980      	ldr	r1, [pc, #512]	@ (80115ec <tcp_process+0x2a4>)
 80113ea:	487c      	ldr	r0, [pc, #496]	@ (80115dc <tcp_process+0x294>)
 80113ec:	f004 f9de 	bl	80157ac <iprintf>
      recv_flags |= TF_RESET;
 80113f0:	4b7f      	ldr	r3, [pc, #508]	@ (80115f0 <tcp_process+0x2a8>)
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	f043 0308 	orr.w	r3, r3, #8
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	4b7d      	ldr	r3, [pc, #500]	@ (80115f0 <tcp_process+0x2a8>)
 80113fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8b5b      	ldrh	r3, [r3, #26]
 8011402:	f023 0301 	bic.w	r3, r3, #1
 8011406:	b29a      	uxth	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801140c:	f06f 030d 	mvn.w	r3, #13
 8011410:	e37a      	b.n	8011b08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011412:	2300      	movs	r3, #0
 8011414:	e378      	b.n	8011b08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011416:	4b72      	ldr	r3, [pc, #456]	@ (80115e0 <tcp_process+0x298>)
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	f003 0302 	and.w	r3, r3, #2
 801141e:	2b00      	cmp	r3, #0
 8011420:	d010      	beq.n	8011444 <tcp_process+0xfc>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	7d1b      	ldrb	r3, [r3, #20]
 8011426:	2b02      	cmp	r3, #2
 8011428:	d00c      	beq.n	8011444 <tcp_process+0xfc>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	7d1b      	ldrb	r3, [r3, #20]
 801142e:	2b03      	cmp	r3, #3
 8011430:	d008      	beq.n	8011444 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8b5b      	ldrh	r3, [r3, #26]
 8011436:	f043 0302 	orr.w	r3, r3, #2
 801143a:	b29a      	uxth	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011440:	2300      	movs	r3, #0
 8011442:	e361      	b.n	8011b08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	8b5b      	ldrh	r3, [r3, #26]
 8011448:	f003 0310 	and.w	r3, r3, #16
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011450:	4b68      	ldr	r3, [pc, #416]	@ (80115f4 <tcp_process+0x2ac>)
 8011452:	681a      	ldr	r2, [r3, #0]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f001 fc2b 	bl	8012cc4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	7d1b      	ldrb	r3, [r3, #20]
 8011472:	3b02      	subs	r3, #2
 8011474:	2b07      	cmp	r3, #7
 8011476:	f200 8337 	bhi.w	8011ae8 <tcp_process+0x7a0>
 801147a:	a201      	add	r2, pc, #4	@ (adr r2, 8011480 <tcp_process+0x138>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	080114a1 	.word	0x080114a1
 8011484:	080116d1 	.word	0x080116d1
 8011488:	08011849 	.word	0x08011849
 801148c:	08011873 	.word	0x08011873
 8011490:	08011997 	.word	0x08011997
 8011494:	08011849 	.word	0x08011849
 8011498:	08011a23 	.word	0x08011a23
 801149c:	08011ab3 	.word	0x08011ab3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80114a0:	4b4f      	ldr	r3, [pc, #316]	@ (80115e0 <tcp_process+0x298>)
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	f003 0310 	and.w	r3, r3, #16
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f000 80e4 	beq.w	8011676 <tcp_process+0x32e>
 80114ae:	4b4c      	ldr	r3, [pc, #304]	@ (80115e0 <tcp_process+0x298>)
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	f003 0302 	and.w	r3, r3, #2
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 80dd 	beq.w	8011676 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114c0:	1c5a      	adds	r2, r3, #1
 80114c2:	4b48      	ldr	r3, [pc, #288]	@ (80115e4 <tcp_process+0x29c>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	f040 80d5 	bne.w	8011676 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80114cc:	4b46      	ldr	r3, [pc, #280]	@ (80115e8 <tcp_process+0x2a0>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	1c5a      	adds	r2, r3, #1
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80114de:	4b41      	ldr	r3, [pc, #260]	@ (80115e4 <tcp_process+0x29c>)
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80114e6:	4b44      	ldr	r3, [pc, #272]	@ (80115f8 <tcp_process+0x2b0>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	89db      	ldrh	r3, [r3, #14]
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011500:	4b39      	ldr	r3, [pc, #228]	@ (80115e8 <tcp_process+0x2a0>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	1e5a      	subs	r2, r3, #1
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2204      	movs	r2, #4
 801150e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	3304      	adds	r3, #4
 8011518:	4618      	mov	r0, r3
 801151a:	f7fa f8f7 	bl	800b70c <ip4_route>
 801151e:	4601      	mov	r1, r0
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	3304      	adds	r3, #4
 8011524:	461a      	mov	r2, r3
 8011526:	4620      	mov	r0, r4
 8011528:	f7ff f88a 	bl	8010640 <tcp_eff_send_mss_netif>
 801152c:	4603      	mov	r3, r0
 801152e:	461a      	mov	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011538:	009a      	lsls	r2, r3, #2
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011544:	428b      	cmp	r3, r1
 8011546:	bf38      	it	cc
 8011548:	460b      	movcc	r3, r1
 801154a:	429a      	cmp	r2, r3
 801154c:	d204      	bcs.n	8011558 <tcp_process+0x210>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	b29b      	uxth	r3, r3
 8011556:	e00d      	b.n	8011574 <tcp_process+0x22c>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011562:	4293      	cmp	r3, r2
 8011564:	d904      	bls.n	8011570 <tcp_process+0x228>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801156a:	005b      	lsls	r3, r3, #1
 801156c:	b29b      	uxth	r3, r3
 801156e:	e001      	b.n	8011574 <tcp_process+0x22c>
 8011570:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011580:	2b00      	cmp	r3, #0
 8011582:	d106      	bne.n	8011592 <tcp_process+0x24a>
 8011584:	4b13      	ldr	r3, [pc, #76]	@ (80115d4 <tcp_process+0x28c>)
 8011586:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801158a:	491c      	ldr	r1, [pc, #112]	@ (80115fc <tcp_process+0x2b4>)
 801158c:	4813      	ldr	r0, [pc, #76]	@ (80115dc <tcp_process+0x294>)
 801158e:	f004 f90d 	bl	80157ac <iprintf>
        --pcb->snd_queuelen;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011598:	3b01      	subs	r3, #1
 801159a:	b29a      	uxth	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d12a      	bne.n	8011604 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d106      	bne.n	80115c8 <tcp_process+0x280>
 80115ba:	4b06      	ldr	r3, [pc, #24]	@ (80115d4 <tcp_process+0x28c>)
 80115bc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80115c0:	490f      	ldr	r1, [pc, #60]	@ (8011600 <tcp_process+0x2b8>)
 80115c2:	4806      	ldr	r0, [pc, #24]	@ (80115dc <tcp_process+0x294>)
 80115c4:	f004 f8f2 	bl	80157ac <iprintf>
          pcb->unsent = rseg->next;
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 80115d0:	e01c      	b.n	801160c <tcp_process+0x2c4>
 80115d2:	bf00      	nop
 80115d4:	080183c8 	.word	0x080183c8
 80115d8:	08018638 	.word	0x08018638
 80115dc:	0801844c 	.word	0x0801844c
 80115e0:	24010688 	.word	0x24010688
 80115e4:	24010680 	.word	0x24010680
 80115e8:	2401067c 	.word	0x2401067c
 80115ec:	08018654 	.word	0x08018654
 80115f0:	24010689 	.word	0x24010689
 80115f4:	24010644 	.word	0x24010644
 80115f8:	2401066c 	.word	0x2401066c
 80115fc:	08018674 	.word	0x08018674
 8011600:	0801868c 	.word	0x0801868c
        } else {
          pcb->unacked = rseg->next;
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801160c:	69f8      	ldr	r0, [r7, #28]
 801160e:	f7fe fc48 	bl	800fea2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011616:	2b00      	cmp	r3, #0
 8011618:	d104      	bne.n	8011624 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011620:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011622:	e006      	b.n	8011632 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00a      	beq.n	8011652 <tcp_process+0x30a>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	6910      	ldr	r0, [r2, #16]
 8011646:	2200      	movs	r2, #0
 8011648:	6879      	ldr	r1, [r7, #4]
 801164a:	4798      	blx	r3
 801164c:	4603      	mov	r3, r0
 801164e:	76bb      	strb	r3, [r7, #26]
 8011650:	e001      	b.n	8011656 <tcp_process+0x30e>
 8011652:	2300      	movs	r3, #0
 8011654:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011656:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801165a:	f113 0f0d 	cmn.w	r3, #13
 801165e:	d102      	bne.n	8011666 <tcp_process+0x31e>
          return ERR_ABRT;
 8011660:	f06f 030c 	mvn.w	r3, #12
 8011664:	e250      	b.n	8011b08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	8b5b      	ldrh	r3, [r3, #26]
 801166a:	f043 0302 	orr.w	r3, r3, #2
 801166e:	b29a      	uxth	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011674:	e23a      	b.n	8011aec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011676:	4b98      	ldr	r3, [pc, #608]	@ (80118d8 <tcp_process+0x590>)
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	f003 0310 	and.w	r3, r3, #16
 801167e:	2b00      	cmp	r3, #0
 8011680:	f000 8234 	beq.w	8011aec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011684:	4b95      	ldr	r3, [pc, #596]	@ (80118dc <tcp_process+0x594>)
 8011686:	6819      	ldr	r1, [r3, #0]
 8011688:	4b95      	ldr	r3, [pc, #596]	@ (80118e0 <tcp_process+0x598>)
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	461a      	mov	r2, r3
 801168e:	4b95      	ldr	r3, [pc, #596]	@ (80118e4 <tcp_process+0x59c>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011694:	4b94      	ldr	r3, [pc, #592]	@ (80118e8 <tcp_process+0x5a0>)
 8011696:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011698:	885b      	ldrh	r3, [r3, #2]
 801169a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801169c:	4a92      	ldr	r2, [pc, #584]	@ (80118e8 <tcp_process+0x5a0>)
 801169e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116a0:	8812      	ldrh	r2, [r2, #0]
 80116a2:	b292      	uxth	r2, r2
 80116a4:	9202      	str	r2, [sp, #8]
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	4b90      	ldr	r3, [pc, #576]	@ (80118ec <tcp_process+0x5a4>)
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	4b90      	ldr	r3, [pc, #576]	@ (80118f0 <tcp_process+0x5a8>)
 80116ae:	4602      	mov	r2, r0
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f003 f8dd 	bl	8014870 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80116bc:	2b05      	cmp	r3, #5
 80116be:	f200 8215 	bhi.w	8011aec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f002 fea9 	bl	8014420 <tcp_rexmit_rto>
      break;
 80116ce:	e20d      	b.n	8011aec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80116d0:	4b81      	ldr	r3, [pc, #516]	@ (80118d8 <tcp_process+0x590>)
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	f003 0310 	and.w	r3, r3, #16
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f000 80a1 	beq.w	8011820 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116de:	4b7f      	ldr	r3, [pc, #508]	@ (80118dc <tcp_process+0x594>)
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	3b01      	subs	r3, #1
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	db7e      	blt.n	80117ec <tcp_process+0x4a4>
 80116ee:	4b7b      	ldr	r3, [pc, #492]	@ (80118dc <tcp_process+0x594>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	dc77      	bgt.n	80117ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2204      	movs	r2, #4
 8011700:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011706:	2b00      	cmp	r3, #0
 8011708:	d102      	bne.n	8011710 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801170a:	23fa      	movs	r3, #250	@ 0xfa
 801170c:	76bb      	strb	r3, [r7, #26]
 801170e:	e01d      	b.n	801174c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011714:	699b      	ldr	r3, [r3, #24]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d106      	bne.n	8011728 <tcp_process+0x3e0>
 801171a:	4b76      	ldr	r3, [pc, #472]	@ (80118f4 <tcp_process+0x5ac>)
 801171c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011720:	4975      	ldr	r1, [pc, #468]	@ (80118f8 <tcp_process+0x5b0>)
 8011722:	4876      	ldr	r0, [pc, #472]	@ (80118fc <tcp_process+0x5b4>)
 8011724:	f004 f842 	bl	80157ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00a      	beq.n	8011748 <tcp_process+0x400>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	6910      	ldr	r0, [r2, #16]
 801173c:	2200      	movs	r2, #0
 801173e:	6879      	ldr	r1, [r7, #4]
 8011740:	4798      	blx	r3
 8011742:	4603      	mov	r3, r0
 8011744:	76bb      	strb	r3, [r7, #26]
 8011746:	e001      	b.n	801174c <tcp_process+0x404>
 8011748:	23f0      	movs	r3, #240	@ 0xf0
 801174a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801174c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00a      	beq.n	801176a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011754:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011758:	f113 0f0d 	cmn.w	r3, #13
 801175c:	d002      	beq.n	8011764 <tcp_process+0x41c>
              tcp_abort(pcb);
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7fd fbd2 	bl	800ef08 <tcp_abort>
            }
            return ERR_ABRT;
 8011764:	f06f 030c 	mvn.w	r3, #12
 8011768:	e1ce      	b.n	8011b08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fae0 	bl	8011d30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011770:	4b63      	ldr	r3, [pc, #396]	@ (8011900 <tcp_process+0x5b8>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d005      	beq.n	8011784 <tcp_process+0x43c>
            recv_acked--;
 8011778:	4b61      	ldr	r3, [pc, #388]	@ (8011900 <tcp_process+0x5b8>)
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	3b01      	subs	r3, #1
 801177e:	b29a      	uxth	r2, r3
 8011780:	4b5f      	ldr	r3, [pc, #380]	@ (8011900 <tcp_process+0x5b8>)
 8011782:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011788:	009a      	lsls	r2, r3, #2
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801178e:	005b      	lsls	r3, r3, #1
 8011790:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011794:	428b      	cmp	r3, r1
 8011796:	bf38      	it	cc
 8011798:	460b      	movcc	r3, r1
 801179a:	429a      	cmp	r2, r3
 801179c:	d204      	bcs.n	80117a8 <tcp_process+0x460>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	e00d      	b.n	80117c4 <tcp_process+0x47c>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	f241 121c 	movw	r2, #4380	@ 0x111c
 80117b2:	4293      	cmp	r3, r2
 80117b4:	d904      	bls.n	80117c0 <tcp_process+0x478>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ba:	005b      	lsls	r3, r3, #1
 80117bc:	b29b      	uxth	r3, r3
 80117be:	e001      	b.n	80117c4 <tcp_process+0x47c>
 80117c0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80117ca:	4b4e      	ldr	r3, [pc, #312]	@ (8011904 <tcp_process+0x5bc>)
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	f003 0320 	and.w	r3, r3, #32
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d037      	beq.n	8011846 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	8b5b      	ldrh	r3, [r3, #26]
 80117da:	f043 0302 	orr.w	r3, r3, #2
 80117de:	b29a      	uxth	r2, r3
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2207      	movs	r2, #7
 80117e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80117ea:	e02c      	b.n	8011846 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ec:	4b3b      	ldr	r3, [pc, #236]	@ (80118dc <tcp_process+0x594>)
 80117ee:	6819      	ldr	r1, [r3, #0]
 80117f0:	4b3b      	ldr	r3, [pc, #236]	@ (80118e0 <tcp_process+0x598>)
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	461a      	mov	r2, r3
 80117f6:	4b3b      	ldr	r3, [pc, #236]	@ (80118e4 <tcp_process+0x59c>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117fc:	4b3a      	ldr	r3, [pc, #232]	@ (80118e8 <tcp_process+0x5a0>)
 80117fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011800:	885b      	ldrh	r3, [r3, #2]
 8011802:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011804:	4a38      	ldr	r2, [pc, #224]	@ (80118e8 <tcp_process+0x5a0>)
 8011806:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011808:	8812      	ldrh	r2, [r2, #0]
 801180a:	b292      	uxth	r2, r2
 801180c:	9202      	str	r2, [sp, #8]
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	4b36      	ldr	r3, [pc, #216]	@ (80118ec <tcp_process+0x5a4>)
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	4b36      	ldr	r3, [pc, #216]	@ (80118f0 <tcp_process+0x5a8>)
 8011816:	4602      	mov	r2, r0
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f003 f829 	bl	8014870 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801181e:	e167      	b.n	8011af0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011820:	4b2d      	ldr	r3, [pc, #180]	@ (80118d8 <tcp_process+0x590>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	f000 8161 	beq.w	8011af0 <tcp_process+0x7a8>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011832:	1e5a      	subs	r2, r3, #1
 8011834:	4b2b      	ldr	r3, [pc, #172]	@ (80118e4 <tcp_process+0x59c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	429a      	cmp	r2, r3
 801183a:	f040 8159 	bne.w	8011af0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f002 fe10 	bl	8014464 <tcp_rexmit>
      break;
 8011844:	e154      	b.n	8011af0 <tcp_process+0x7a8>
 8011846:	e153      	b.n	8011af0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f000 fa71 	bl	8011d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801184e:	4b2d      	ldr	r3, [pc, #180]	@ (8011904 <tcp_process+0x5bc>)
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	f003 0320 	and.w	r3, r3, #32
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 814c 	beq.w	8011af4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	8b5b      	ldrh	r3, [r3, #26]
 8011860:	f043 0302 	orr.w	r3, r3, #2
 8011864:	b29a      	uxth	r2, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2207      	movs	r2, #7
 801186e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011870:	e140      	b.n	8011af4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f000 fa5c 	bl	8011d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011878:	4b22      	ldr	r3, [pc, #136]	@ (8011904 <tcp_process+0x5bc>)
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	f003 0320 	and.w	r3, r3, #32
 8011880:	2b00      	cmp	r3, #0
 8011882:	d071      	beq.n	8011968 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011884:	4b14      	ldr	r3, [pc, #80]	@ (80118d8 <tcp_process+0x590>)
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	f003 0310 	and.w	r3, r3, #16
 801188c:	2b00      	cmp	r3, #0
 801188e:	d060      	beq.n	8011952 <tcp_process+0x60a>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011894:	4b11      	ldr	r3, [pc, #68]	@ (80118dc <tcp_process+0x594>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	429a      	cmp	r2, r3
 801189a:	d15a      	bne.n	8011952 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d156      	bne.n	8011952 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8b5b      	ldrh	r3, [r3, #26]
 80118a8:	f043 0302 	orr.w	r3, r3, #2
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7fe fdba 	bl	801042c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80118b8:	4b13      	ldr	r3, [pc, #76]	@ (8011908 <tcp_process+0x5c0>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d105      	bne.n	80118ce <tcp_process+0x586>
 80118c2:	4b11      	ldr	r3, [pc, #68]	@ (8011908 <tcp_process+0x5c0>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	4a0f      	ldr	r2, [pc, #60]	@ (8011908 <tcp_process+0x5c0>)
 80118ca:	6013      	str	r3, [r2, #0]
 80118cc:	e02e      	b.n	801192c <tcp_process+0x5e4>
 80118ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011908 <tcp_process+0x5c0>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	617b      	str	r3, [r7, #20]
 80118d4:	e027      	b.n	8011926 <tcp_process+0x5de>
 80118d6:	bf00      	nop
 80118d8:	24010688 	.word	0x24010688
 80118dc:	24010680 	.word	0x24010680
 80118e0:	24010686 	.word	0x24010686
 80118e4:	2401067c 	.word	0x2401067c
 80118e8:	2401066c 	.word	0x2401066c
 80118ec:	24009b84 	.word	0x24009b84
 80118f0:	24009b88 	.word	0x24009b88
 80118f4:	080183c8 	.word	0x080183c8
 80118f8:	080186a0 	.word	0x080186a0
 80118fc:	0801844c 	.word	0x0801844c
 8011900:	24010684 	.word	0x24010684
 8011904:	24010689 	.word	0x24010689
 8011908:	24010650 	.word	0x24010650
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	429a      	cmp	r2, r3
 8011914:	d104      	bne.n	8011920 <tcp_process+0x5d8>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	68da      	ldr	r2, [r3, #12]
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	60da      	str	r2, [r3, #12]
 801191e:	e005      	b.n	801192c <tcp_process+0x5e4>
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	617b      	str	r3, [r7, #20]
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1ef      	bne.n	801190c <tcp_process+0x5c4>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	60da      	str	r2, [r3, #12]
 8011932:	4b77      	ldr	r3, [pc, #476]	@ (8011b10 <tcp_process+0x7c8>)
 8011934:	2201      	movs	r2, #1
 8011936:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	220a      	movs	r2, #10
 801193c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801193e:	4b75      	ldr	r3, [pc, #468]	@ (8011b14 <tcp_process+0x7cc>)
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	60da      	str	r2, [r3, #12]
 8011946:	4a73      	ldr	r2, [pc, #460]	@ (8011b14 <tcp_process+0x7cc>)
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6013      	str	r3, [r2, #0]
 801194c:	f003 faf0 	bl	8014f30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011950:	e0d2      	b.n	8011af8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	8b5b      	ldrh	r3, [r3, #26]
 8011956:	f043 0302 	orr.w	r3, r3, #2
 801195a:	b29a      	uxth	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2208      	movs	r2, #8
 8011964:	751a      	strb	r2, [r3, #20]
      break;
 8011966:	e0c7      	b.n	8011af8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011968:	4b6b      	ldr	r3, [pc, #428]	@ (8011b18 <tcp_process+0x7d0>)
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	f003 0310 	and.w	r3, r3, #16
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 80c1 	beq.w	8011af8 <tcp_process+0x7b0>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801197a:	4b68      	ldr	r3, [pc, #416]	@ (8011b1c <tcp_process+0x7d4>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	f040 80ba 	bne.w	8011af8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011988:	2b00      	cmp	r3, #0
 801198a:	f040 80b5 	bne.w	8011af8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2206      	movs	r2, #6
 8011992:	751a      	strb	r2, [r3, #20]
      break;
 8011994:	e0b0      	b.n	8011af8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f9ca 	bl	8011d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801199c:	4b60      	ldr	r3, [pc, #384]	@ (8011b20 <tcp_process+0x7d8>)
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	f003 0320 	and.w	r3, r3, #32
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 80a9 	beq.w	8011afc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	8b5b      	ldrh	r3, [r3, #26]
 80119ae:	f043 0302 	orr.w	r3, r3, #2
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7fe fd37 	bl	801042c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119be:	4b59      	ldr	r3, [pc, #356]	@ (8011b24 <tcp_process+0x7dc>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d105      	bne.n	80119d4 <tcp_process+0x68c>
 80119c8:	4b56      	ldr	r3, [pc, #344]	@ (8011b24 <tcp_process+0x7dc>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	4a55      	ldr	r2, [pc, #340]	@ (8011b24 <tcp_process+0x7dc>)
 80119d0:	6013      	str	r3, [r2, #0]
 80119d2:	e013      	b.n	80119fc <tcp_process+0x6b4>
 80119d4:	4b53      	ldr	r3, [pc, #332]	@ (8011b24 <tcp_process+0x7dc>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	613b      	str	r3, [r7, #16]
 80119da:	e00c      	b.n	80119f6 <tcp_process+0x6ae>
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d104      	bne.n	80119f0 <tcp_process+0x6a8>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	68da      	ldr	r2, [r3, #12]
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	60da      	str	r2, [r3, #12]
 80119ee:	e005      	b.n	80119fc <tcp_process+0x6b4>
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	613b      	str	r3, [r7, #16]
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1ef      	bne.n	80119dc <tcp_process+0x694>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	60da      	str	r2, [r3, #12]
 8011a02:	4b43      	ldr	r3, [pc, #268]	@ (8011b10 <tcp_process+0x7c8>)
 8011a04:	2201      	movs	r2, #1
 8011a06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	220a      	movs	r2, #10
 8011a0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a0e:	4b41      	ldr	r3, [pc, #260]	@ (8011b14 <tcp_process+0x7cc>)
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	60da      	str	r2, [r3, #12]
 8011a16:	4a3f      	ldr	r2, [pc, #252]	@ (8011b14 <tcp_process+0x7cc>)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6013      	str	r3, [r2, #0]
 8011a1c:	f003 fa88 	bl	8014f30 <tcp_timer_needed>
      }
      break;
 8011a20:	e06c      	b.n	8011afc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f984 	bl	8011d30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a28:	4b3b      	ldr	r3, [pc, #236]	@ (8011b18 <tcp_process+0x7d0>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	f003 0310 	and.w	r3, r3, #16
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d065      	beq.n	8011b00 <tcp_process+0x7b8>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a38:	4b38      	ldr	r3, [pc, #224]	@ (8011b1c <tcp_process+0x7d4>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d15f      	bne.n	8011b00 <tcp_process+0x7b8>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d15b      	bne.n	8011b00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f7fe fcef 	bl	801042c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a4e:	4b35      	ldr	r3, [pc, #212]	@ (8011b24 <tcp_process+0x7dc>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d105      	bne.n	8011a64 <tcp_process+0x71c>
 8011a58:	4b32      	ldr	r3, [pc, #200]	@ (8011b24 <tcp_process+0x7dc>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	4a31      	ldr	r2, [pc, #196]	@ (8011b24 <tcp_process+0x7dc>)
 8011a60:	6013      	str	r3, [r2, #0]
 8011a62:	e013      	b.n	8011a8c <tcp_process+0x744>
 8011a64:	4b2f      	ldr	r3, [pc, #188]	@ (8011b24 <tcp_process+0x7dc>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e00c      	b.n	8011a86 <tcp_process+0x73e>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d104      	bne.n	8011a80 <tcp_process+0x738>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68da      	ldr	r2, [r3, #12]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	e005      	b.n	8011a8c <tcp_process+0x744>
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	60fb      	str	r3, [r7, #12]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1ef      	bne.n	8011a6c <tcp_process+0x724>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	60da      	str	r2, [r3, #12]
 8011a92:	4b1f      	ldr	r3, [pc, #124]	@ (8011b10 <tcp_process+0x7c8>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	220a      	movs	r2, #10
 8011a9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8011b14 <tcp_process+0x7cc>)
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	60da      	str	r2, [r3, #12]
 8011aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8011b14 <tcp_process+0x7cc>)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6013      	str	r3, [r2, #0]
 8011aac:	f003 fa40 	bl	8014f30 <tcp_timer_needed>
      }
      break;
 8011ab0:	e026      	b.n	8011b00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f93c 	bl	8011d30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ab8:	4b17      	ldr	r3, [pc, #92]	@ (8011b18 <tcp_process+0x7d0>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	f003 0310 	and.w	r3, r3, #16
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d01f      	beq.n	8011b04 <tcp_process+0x7bc>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ac8:	4b14      	ldr	r3, [pc, #80]	@ (8011b1c <tcp_process+0x7d4>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d119      	bne.n	8011b04 <tcp_process+0x7bc>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d115      	bne.n	8011b04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011ad8:	4b11      	ldr	r3, [pc, #68]	@ (8011b20 <tcp_process+0x7d8>)
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f043 0310 	orr.w	r3, r3, #16
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8011b20 <tcp_process+0x7d8>)
 8011ae4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011ae6:	e00d      	b.n	8011b04 <tcp_process+0x7bc>
    default:
      break;
 8011ae8:	bf00      	nop
 8011aea:	e00c      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011aec:	bf00      	nop
 8011aee:	e00a      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011af0:	bf00      	nop
 8011af2:	e008      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011af4:	bf00      	nop
 8011af6:	e006      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011af8:	bf00      	nop
 8011afa:	e004      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011afc:	bf00      	nop
 8011afe:	e002      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011b00:	bf00      	nop
 8011b02:	e000      	b.n	8011b06 <tcp_process+0x7be>
      break;
 8011b04:	bf00      	nop
  }
  return ERR_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3724      	adds	r7, #36	@ 0x24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd90      	pop	{r4, r7, pc}
 8011b10:	24010658 	.word	0x24010658
 8011b14:	24010654 	.word	0x24010654
 8011b18:	24010688 	.word	0x24010688
 8011b1c:	24010680 	.word	0x24010680
 8011b20:	24010689 	.word	0x24010689
 8011b24:	24010650 	.word	0x24010650

08011b28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <tcp_oos_insert_segment+0x1e>
 8011b38:	4b3b      	ldr	r3, [pc, #236]	@ (8011c28 <tcp_oos_insert_segment+0x100>)
 8011b3a:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011b3e:	493b      	ldr	r1, [pc, #236]	@ (8011c2c <tcp_oos_insert_segment+0x104>)
 8011b40:	483b      	ldr	r0, [pc, #236]	@ (8011c30 <tcp_oos_insert_segment+0x108>)
 8011b42:	f003 fe33 	bl	80157ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	899b      	ldrh	r3, [r3, #12]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7f8 fafc 	bl	800a14c <lwip_htons>
 8011b54:	4603      	mov	r3, r0
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d028      	beq.n	8011bb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011b60:	6838      	ldr	r0, [r7, #0]
 8011b62:	f7fe f989 	bl	800fe78 <tcp_segs_free>
    next = NULL;
 8011b66:	2300      	movs	r3, #0
 8011b68:	603b      	str	r3, [r7, #0]
 8011b6a:	e056      	b.n	8011c1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	899b      	ldrh	r3, [r3, #12]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7f8 fae9 	bl	800a14c <lwip_htons>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00d      	beq.n	8011ba2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	899b      	ldrh	r3, [r3, #12]
 8011b8c:	b29c      	uxth	r4, r3
 8011b8e:	2001      	movs	r0, #1
 8011b90:	f7f8 fadc 	bl	800a14c <lwip_htons>
 8011b94:	4603      	mov	r3, r0
 8011b96:	461a      	mov	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	4322      	orrs	r2, r4
 8011b9e:	b292      	uxth	r2, r2
 8011ba0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f7fe f978 	bl	800fea2 <tcp_seg_free>
    while (next &&
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00e      	beq.n	8011bd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	891b      	ldrh	r3, [r3, #8]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8011c34 <tcp_oos_insert_segment+0x10c>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	441a      	add	r2, r3
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	6839      	ldr	r1, [r7, #0]
 8011bcc:	8909      	ldrh	r1, [r1, #8]
 8011bce:	440b      	add	r3, r1
 8011bd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	daca      	bge.n	8011b6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d01e      	beq.n	8011c1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	891b      	ldrh	r3, [r3, #8]
 8011be0:	461a      	mov	r2, r3
 8011be2:	4b14      	ldr	r3, [pc, #80]	@ (8011c34 <tcp_oos_insert_segment+0x10c>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	441a      	add	r2, r3
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dd12      	ble.n	8011c1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	b29a      	uxth	r2, r3
 8011bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8011c34 <tcp_oos_insert_segment+0x10c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	685a      	ldr	r2, [r3, #4]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	891b      	ldrh	r3, [r3, #8]
 8011c12:	4619      	mov	r1, r3
 8011c14:	4610      	mov	r0, r2
 8011c16:	f7fc f8b1 	bl	800dd7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	601a      	str	r2, [r3, #0]
}
 8011c20:	bf00      	nop
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}
 8011c28:	080183c8 	.word	0x080183c8
 8011c2c:	080186c0 	.word	0x080186c0
 8011c30:	0801844c 	.word	0x0801844c
 8011c34:	2401067c 	.word	0x2401067c

08011c38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011c38:	b5b0      	push	{r4, r5, r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011c46:	e03e      	b.n	8011cc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fc faa2 	bl	800e1a0 <pbuf_clen>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c66:	8a7a      	ldrh	r2, [r7, #18]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d906      	bls.n	8011c7a <tcp_free_acked_segments+0x42>
 8011c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8011d18 <tcp_free_acked_segments+0xe0>)
 8011c6e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011c72:	492a      	ldr	r1, [pc, #168]	@ (8011d1c <tcp_free_acked_segments+0xe4>)
 8011c74:	482a      	ldr	r0, [pc, #168]	@ (8011d20 <tcp_free_acked_segments+0xe8>)
 8011c76:	f003 fd99 	bl	80157ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011c80:	8a7b      	ldrh	r3, [r7, #18]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	891a      	ldrh	r2, [r3, #8]
 8011c90:	4b24      	ldr	r3, [pc, #144]	@ (8011d24 <tcp_free_acked_segments+0xec>)
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	4413      	add	r3, r2
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	4b22      	ldr	r3, [pc, #136]	@ (8011d24 <tcp_free_acked_segments+0xec>)
 8011c9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011c9c:	6978      	ldr	r0, [r7, #20]
 8011c9e:	f7fe f900 	bl	800fea2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00c      	beq.n	8011cc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d109      	bne.n	8011cc6 <tcp_free_acked_segments+0x8e>
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d106      	bne.n	8011cc6 <tcp_free_acked_segments+0x8e>
 8011cb8:	4b17      	ldr	r3, [pc, #92]	@ (8011d18 <tcp_free_acked_segments+0xe0>)
 8011cba:	f240 4261 	movw	r2, #1121	@ 0x461
 8011cbe:	491a      	ldr	r1, [pc, #104]	@ (8011d28 <tcp_free_acked_segments+0xf0>)
 8011cc0:	4817      	ldr	r0, [pc, #92]	@ (8011d20 <tcp_free_acked_segments+0xe8>)
 8011cc2:	f003 fd73 	bl	80157ac <iprintf>
  while (seg_list != NULL &&
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d020      	beq.n	8011d0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f8 fa4f 	bl	800a176 <lwip_htonl>
 8011cd8:	4604      	mov	r4, r0
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	891b      	ldrh	r3, [r3, #8]
 8011cde:	461d      	mov	r5, r3
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	899b      	ldrh	r3, [r3, #12]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f8 fa2f 	bl	800a14c <lwip_htons>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	f003 0303 	and.w	r3, r3, #3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d001      	beq.n	8011cfe <tcp_free_acked_segments+0xc6>
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	e000      	b.n	8011d00 <tcp_free_acked_segments+0xc8>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	442b      	add	r3, r5
 8011d02:	18e2      	adds	r2, r4, r3
 8011d04:	4b09      	ldr	r3, [pc, #36]	@ (8011d2c <tcp_free_acked_segments+0xf4>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	dd9c      	ble.n	8011c48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011d0e:	68bb      	ldr	r3, [r7, #8]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3718      	adds	r7, #24
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bdb0      	pop	{r4, r5, r7, pc}
 8011d18:	080183c8 	.word	0x080183c8
 8011d1c:	080186e8 	.word	0x080186e8
 8011d20:	0801844c 	.word	0x0801844c
 8011d24:	24010684 	.word	0x24010684
 8011d28:	08018710 	.word	0x08018710
 8011d2c:	24010680 	.word	0x24010680

08011d30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011d30:	b5b0      	push	{r4, r5, r7, lr}
 8011d32:	b094      	sub	sp, #80	@ 0x50
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d106      	bne.n	8011d50 <tcp_receive+0x20>
 8011d42:	4b91      	ldr	r3, [pc, #580]	@ (8011f88 <tcp_receive+0x258>)
 8011d44:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011d48:	4990      	ldr	r1, [pc, #576]	@ (8011f8c <tcp_receive+0x25c>)
 8011d4a:	4891      	ldr	r0, [pc, #580]	@ (8011f90 <tcp_receive+0x260>)
 8011d4c:	f003 fd2e 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	7d1b      	ldrb	r3, [r3, #20]
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d806      	bhi.n	8011d66 <tcp_receive+0x36>
 8011d58:	4b8b      	ldr	r3, [pc, #556]	@ (8011f88 <tcp_receive+0x258>)
 8011d5a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011d5e:	498d      	ldr	r1, [pc, #564]	@ (8011f94 <tcp_receive+0x264>)
 8011d60:	488b      	ldr	r0, [pc, #556]	@ (8011f90 <tcp_receive+0x260>)
 8011d62:	f003 fd23 	bl	80157ac <iprintf>

  if (flags & TCP_ACK) {
 8011d66:	4b8c      	ldr	r3, [pc, #560]	@ (8011f98 <tcp_receive+0x268>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	f003 0310 	and.w	r3, r3, #16
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f000 8264 	beq.w	801223c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d80:	4413      	add	r3, r2
 8011d82:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d88:	4b84      	ldr	r3, [pc, #528]	@ (8011f9c <tcp_receive+0x26c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	db1b      	blt.n	8011dca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d96:	4b81      	ldr	r3, [pc, #516]	@ (8011f9c <tcp_receive+0x26c>)
 8011d98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d106      	bne.n	8011dac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011da2:	4b7f      	ldr	r3, [pc, #508]	@ (8011fa0 <tcp_receive+0x270>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	db0e      	blt.n	8011dca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011db0:	4b7b      	ldr	r3, [pc, #492]	@ (8011fa0 <tcp_receive+0x270>)
 8011db2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d125      	bne.n	8011e04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011db8:	4b7a      	ldr	r3, [pc, #488]	@ (8011fa4 <tcp_receive+0x274>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	89db      	ldrh	r3, [r3, #14]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d91c      	bls.n	8011e04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011dca:	4b76      	ldr	r3, [pc, #472]	@ (8011fa4 <tcp_receive+0x274>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	89db      	ldrh	r3, [r3, #14]
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d205      	bcs.n	8011df4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011df4:	4b69      	ldr	r3, [pc, #420]	@ (8011f9c <tcp_receive+0x26c>)
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011dfc:	4b68      	ldr	r3, [pc, #416]	@ (8011fa0 <tcp_receive+0x270>)
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011e04:	4b66      	ldr	r3, [pc, #408]	@ (8011fa0 <tcp_receive+0x270>)
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	dc58      	bgt.n	8011ec4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011e12:	4b65      	ldr	r3, [pc, #404]	@ (8011fa8 <tcp_receive+0x278>)
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d14b      	bne.n	8011eb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011e24:	4413      	add	r3, r2
 8011e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d142      	bne.n	8011eb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	db3d      	blt.n	8011eb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e3a:	4b59      	ldr	r3, [pc, #356]	@ (8011fa0 <tcp_receive+0x270>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d137      	bne.n	8011eb2 <tcp_receive+0x182>
              found_dupack = 1;
 8011e42:	2301      	movs	r3, #1
 8011e44:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011e4c:	2bff      	cmp	r3, #255	@ 0xff
 8011e4e:	d007      	beq.n	8011e60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011e56:	3301      	adds	r3, #1
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	d91b      	bls.n	8011ea2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e74:	4413      	add	r3, r2
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d30a      	bcc.n	8011e98 <tcp_receive+0x168>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e8c:	4413      	add	r3, r2
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011e96:	e004      	b.n	8011ea2 <tcp_receive+0x172>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d902      	bls.n	8011eb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f002 fb45 	bl	801453c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f040 8161 	bne.w	801217c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011ec2:	e15b      	b.n	801217c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ec4:	4b36      	ldr	r3, [pc, #216]	@ (8011fa0 <tcp_receive+0x270>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f2c0 814e 	blt.w	8012172 <tcp_receive+0x442>
 8011ed6:	4b32      	ldr	r3, [pc, #200]	@ (8011fa0 <tcp_receive+0x270>)
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ede:	1ad3      	subs	r3, r2, r3
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f300 8146 	bgt.w	8012172 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8b5b      	ldrh	r3, [r3, #26]
 8011eea:	f003 0304 	and.w	r3, r3, #4
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d010      	beq.n	8011f14 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	8b5b      	ldrh	r3, [r3, #26]
 8011ef6:	f023 0304 	bic.w	r3, r3, #4
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011f22:	10db      	asrs	r3, r3, #3
 8011f24:	b21b      	sxth	r3, r3
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4413      	add	r3, r2
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	b21a      	sxth	r2, r3
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011f3c:	4b18      	ldr	r3, [pc, #96]	@ (8011fa0 <tcp_receive+0x270>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	b29a      	uxth	r2, r3
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011f54:	4b12      	ldr	r3, [pc, #72]	@ (8011fa0 <tcp_receive+0x270>)
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	7d1b      	ldrb	r3, [r3, #20]
 8011f60:	2b03      	cmp	r3, #3
 8011f62:	f240 8097 	bls.w	8012094 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d245      	bcs.n	8012002 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	8b5b      	ldrh	r3, [r3, #26]
 8011f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d014      	beq.n	8011fac <tcp_receive+0x27c>
 8011f82:	2301      	movs	r3, #1
 8011f84:	e013      	b.n	8011fae <tcp_receive+0x27e>
 8011f86:	bf00      	nop
 8011f88:	080183c8 	.word	0x080183c8
 8011f8c:	08018730 	.word	0x08018730
 8011f90:	0801844c 	.word	0x0801844c
 8011f94:	0801874c 	.word	0x0801874c
 8011f98:	24010688 	.word	0x24010688
 8011f9c:	2401067c 	.word	0x2401067c
 8011fa0:	24010680 	.word	0x24010680
 8011fa4:	2401066c 	.word	0x2401066c
 8011fa8:	24010686 	.word	0x24010686
 8011fac:	2302      	movs	r3, #2
 8011fae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011fb2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011fbc:	fb12 f303 	smulbb	r3, r2, r3
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	bf28      	it	cs
 8011fc8:	4613      	movcs	r3, r2
 8011fca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011fd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d309      	bcc.n	8011ff6 <tcp_receive+0x2c6>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011fe8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011fea:	4413      	add	r3, r2
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011ff4:	e04e      	b.n	8012094 <tcp_receive+0x364>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011ffc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012000:	e048      	b.n	8012094 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012008:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801200a:	4413      	add	r3, r2
 801200c:	b29a      	uxth	r2, r3
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012014:	429a      	cmp	r2, r3
 8012016:	d309      	bcc.n	801202c <tcp_receive+0x2fc>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801201e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012020:	4413      	add	r3, r2
 8012022:	b29a      	uxth	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801202a:	e004      	b.n	8012036 <tcp_receive+0x306>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012032:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012042:	429a      	cmp	r2, r3
 8012044:	d326      	bcc.n	8012094 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012066:	4413      	add	r3, r2
 8012068:	b29a      	uxth	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012070:	429a      	cmp	r2, r3
 8012072:	d30a      	bcc.n	801208a <tcp_receive+0x35a>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801207e:	4413      	add	r3, r2
 8012080:	b29a      	uxth	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012088:	e004      	b.n	8012094 <tcp_receive+0x364>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012090:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801209c:	4a98      	ldr	r2, [pc, #608]	@ (8012300 <tcp_receive+0x5d0>)
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7ff fdca 	bl	8011c38 <tcp_free_acked_segments>
 80120a4:	4602      	mov	r2, r0
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120b2:	4a94      	ldr	r2, [pc, #592]	@ (8012304 <tcp_receive+0x5d4>)
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f7ff fdbf 	bl	8011c38 <tcp_free_acked_segments>
 80120ba:	4602      	mov	r2, r0
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d104      	bne.n	80120d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 80120d0:	e002      	b.n	80120d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d103      	bne.n	80120ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80120f4:	4b84      	ldr	r3, [pc, #528]	@ (8012308 <tcp_receive+0x5d8>)
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	4413      	add	r3, r2
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	8b5b      	ldrh	r3, [r3, #26]
 8012106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801210a:	2b00      	cmp	r3, #0
 801210c:	d035      	beq.n	801217a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012112:	2b00      	cmp	r3, #0
 8012114:	d118      	bne.n	8012148 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00c      	beq.n	8012138 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	f7f8 f823 	bl	800a176 <lwip_htonl>
 8012130:	4603      	mov	r3, r0
 8012132:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012134:	2b00      	cmp	r3, #0
 8012136:	dc20      	bgt.n	801217a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	8b5b      	ldrh	r3, [r3, #26]
 801213c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012140:	b29a      	uxth	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012146:	e018      	b.n	801217a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	4618      	mov	r0, r3
 8012156:	f7f8 f80e 	bl	800a176 <lwip_htonl>
 801215a:	4603      	mov	r3, r0
 801215c:	1ae3      	subs	r3, r4, r3
 801215e:	2b00      	cmp	r3, #0
 8012160:	dc0b      	bgt.n	801217a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	8b5b      	ldrh	r3, [r3, #26]
 8012166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012170:	e003      	b.n	801217a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f002 fbce 	bl	8014914 <tcp_send_empty_ack>
 8012178:	e000      	b.n	801217c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801217a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012180:	2b00      	cmp	r3, #0
 8012182:	d05b      	beq.n	801223c <tcp_receive+0x50c>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012188:	4b60      	ldr	r3, [pc, #384]	@ (801230c <tcp_receive+0x5dc>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	2b00      	cmp	r3, #0
 8012190:	da54      	bge.n	801223c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012192:	4b5f      	ldr	r3, [pc, #380]	@ (8012310 <tcp_receive+0x5e0>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	b29a      	uxth	r2, r3
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801219c:	b29b      	uxth	r3, r3
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80121a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80121b0:	10db      	asrs	r3, r3, #3
 80121b2:	b21b      	sxth	r3, r3
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	1ad3      	subs	r3, r2, r3
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80121ca:	4413      	add	r3, r2
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	b21a      	sxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80121d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80121d8:	2b00      	cmp	r3, #0
 80121da:	da05      	bge.n	80121e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80121dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80121e0:	425b      	negs	r3, r3
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80121e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80121f2:	109b      	asrs	r3, r3, #2
 80121f4:	b21b      	sxth	r3, r3
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012206:	b29a      	uxth	r2, r3
 8012208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801220c:	4413      	add	r3, r2
 801220e:	b29b      	uxth	r3, r3
 8012210:	b21a      	sxth	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801221c:	10db      	asrs	r3, r3, #3
 801221e:	b21b      	sxth	r3, r3
 8012220:	b29a      	uxth	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012228:	b29b      	uxth	r3, r3
 801222a:	4413      	add	r3, r2
 801222c:	b29b      	uxth	r3, r3
 801222e:	b21a      	sxth	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801223c:	4b35      	ldr	r3, [pc, #212]	@ (8012314 <tcp_receive+0x5e4>)
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	f000 84df 	beq.w	8012c04 <tcp_receive+0xed4>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	7d1b      	ldrb	r3, [r3, #20]
 801224a:	2b06      	cmp	r3, #6
 801224c:	f200 84da 	bhi.w	8012c04 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012254:	4b30      	ldr	r3, [pc, #192]	@ (8012318 <tcp_receive+0x5e8>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	3b01      	subs	r3, #1
 801225c:	2b00      	cmp	r3, #0
 801225e:	f2c0 808f 	blt.w	8012380 <tcp_receive+0x650>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012266:	4b2b      	ldr	r3, [pc, #172]	@ (8012314 <tcp_receive+0x5e4>)
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	4619      	mov	r1, r3
 801226c:	4b2a      	ldr	r3, [pc, #168]	@ (8012318 <tcp_receive+0x5e8>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	440b      	add	r3, r1
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	3301      	adds	r3, #1
 8012276:	2b00      	cmp	r3, #0
 8012278:	f300 8082 	bgt.w	8012380 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801227c:	4b27      	ldr	r3, [pc, #156]	@ (801231c <tcp_receive+0x5ec>)
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012286:	4b24      	ldr	r3, [pc, #144]	@ (8012318 <tcp_receive+0x5e8>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801228e:	4b23      	ldr	r3, [pc, #140]	@ (801231c <tcp_receive+0x5ec>)
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d106      	bne.n	80122a4 <tcp_receive+0x574>
 8012296:	4b22      	ldr	r3, [pc, #136]	@ (8012320 <tcp_receive+0x5f0>)
 8012298:	f240 5294 	movw	r2, #1428	@ 0x594
 801229c:	4921      	ldr	r1, [pc, #132]	@ (8012324 <tcp_receive+0x5f4>)
 801229e:	4822      	ldr	r0, [pc, #136]	@ (8012328 <tcp_receive+0x5f8>)
 80122a0:	f003 fa84 	bl	80157ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80122a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d906      	bls.n	80122bc <tcp_receive+0x58c>
 80122ae:	4b1c      	ldr	r3, [pc, #112]	@ (8012320 <tcp_receive+0x5f0>)
 80122b0:	f240 5295 	movw	r2, #1429	@ 0x595
 80122b4:	491d      	ldr	r1, [pc, #116]	@ (801232c <tcp_receive+0x5fc>)
 80122b6:	481c      	ldr	r0, [pc, #112]	@ (8012328 <tcp_receive+0x5f8>)
 80122b8:	f003 fa78 	bl	80157ac <iprintf>
      off = (u16_t)off32;
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80122c2:	4b16      	ldr	r3, [pc, #88]	@ (801231c <tcp_receive+0x5ec>)
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	891b      	ldrh	r3, [r3, #8]
 80122c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d906      	bls.n	80122de <tcp_receive+0x5ae>
 80122d0:	4b13      	ldr	r3, [pc, #76]	@ (8012320 <tcp_receive+0x5f0>)
 80122d2:	f240 5297 	movw	r2, #1431	@ 0x597
 80122d6:	4916      	ldr	r1, [pc, #88]	@ (8012330 <tcp_receive+0x600>)
 80122d8:	4813      	ldr	r0, [pc, #76]	@ (8012328 <tcp_receive+0x5f8>)
 80122da:	f003 fa67 	bl	80157ac <iprintf>
      inseg.len -= off;
 80122de:	4b0f      	ldr	r3, [pc, #60]	@ (801231c <tcp_receive+0x5ec>)
 80122e0:	891a      	ldrh	r2, [r3, #8]
 80122e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80122e6:	1ad3      	subs	r3, r2, r3
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	4b0c      	ldr	r3, [pc, #48]	@ (801231c <tcp_receive+0x5ec>)
 80122ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80122ee:	4b0b      	ldr	r3, [pc, #44]	@ (801231c <tcp_receive+0x5ec>)
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	891a      	ldrh	r2, [r3, #8]
 80122f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80122fc:	e02a      	b.n	8012354 <tcp_receive+0x624>
 80122fe:	bf00      	nop
 8012300:	08018768 	.word	0x08018768
 8012304:	08018770 	.word	0x08018770
 8012308:	24010684 	.word	0x24010684
 801230c:	24010680 	.word	0x24010680
 8012310:	24010644 	.word	0x24010644
 8012314:	24010686 	.word	0x24010686
 8012318:	2401067c 	.word	0x2401067c
 801231c:	2401065c 	.word	0x2401065c
 8012320:	080183c8 	.word	0x080183c8
 8012324:	08018778 	.word	0x08018778
 8012328:	0801844c 	.word	0x0801844c
 801232c:	08018788 	.word	0x08018788
 8012330:	08018798 	.word	0x08018798
        off -= p->len;
 8012334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012336:	895b      	ldrh	r3, [r3, #10]
 8012338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801233c:	1ad3      	subs	r3, r2, r3
 801233e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012344:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012346:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801234a:	2200      	movs	r2, #0
 801234c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801234e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012356:	895b      	ldrh	r3, [r3, #10]
 8012358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801235c:	429a      	cmp	r2, r3
 801235e:	d8e9      	bhi.n	8012334 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012364:	4619      	mov	r1, r3
 8012366:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012368:	f7fb fe06 	bl	800df78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012370:	4a90      	ldr	r2, [pc, #576]	@ (80125b4 <tcp_receive+0x884>)
 8012372:	6013      	str	r3, [r2, #0]
 8012374:	4b90      	ldr	r3, [pc, #576]	@ (80125b8 <tcp_receive+0x888>)
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	4a8e      	ldr	r2, [pc, #568]	@ (80125b4 <tcp_receive+0x884>)
 801237a:	6812      	ldr	r2, [r2, #0]
 801237c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801237e:	e00d      	b.n	801239c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012380:	4b8c      	ldr	r3, [pc, #560]	@ (80125b4 <tcp_receive+0x884>)
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	2b00      	cmp	r3, #0
 801238c:	da06      	bge.n	801239c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8b5b      	ldrh	r3, [r3, #26]
 8012392:	f043 0302 	orr.w	r3, r3, #2
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801239c:	4b85      	ldr	r3, [pc, #532]	@ (80125b4 <tcp_receive+0x884>)
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f2c0 8427 	blt.w	8012bfa <tcp_receive+0xeca>
 80123ac:	4b81      	ldr	r3, [pc, #516]	@ (80125b4 <tcp_receive+0x884>)
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80123b8:	440b      	add	r3, r1
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	3301      	adds	r3, #1
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f300 841b 	bgt.w	8012bfa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123c8:	4b7a      	ldr	r3, [pc, #488]	@ (80125b4 <tcp_receive+0x884>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	f040 8298 	bne.w	8012902 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80123d2:	4b79      	ldr	r3, [pc, #484]	@ (80125b8 <tcp_receive+0x888>)
 80123d4:	891c      	ldrh	r4, [r3, #8]
 80123d6:	4b78      	ldr	r3, [pc, #480]	@ (80125b8 <tcp_receive+0x888>)
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	899b      	ldrh	r3, [r3, #12]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	4618      	mov	r0, r3
 80123e0:	f7f7 feb4 	bl	800a14c <lwip_htons>
 80123e4:	4603      	mov	r3, r0
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	f003 0303 	and.w	r3, r3, #3
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <tcp_receive+0x6c4>
 80123f0:	2301      	movs	r3, #1
 80123f2:	e000      	b.n	80123f6 <tcp_receive+0x6c6>
 80123f4:	2300      	movs	r3, #0
 80123f6:	4423      	add	r3, r4
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	4b70      	ldr	r3, [pc, #448]	@ (80125bc <tcp_receive+0x88c>)
 80123fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012402:	4b6e      	ldr	r3, [pc, #440]	@ (80125bc <tcp_receive+0x88c>)
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	429a      	cmp	r2, r3
 8012408:	d274      	bcs.n	80124f4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801240a:	4b6b      	ldr	r3, [pc, #428]	@ (80125b8 <tcp_receive+0x888>)
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	899b      	ldrh	r3, [r3, #12]
 8012410:	b29b      	uxth	r3, r3
 8012412:	4618      	mov	r0, r3
 8012414:	f7f7 fe9a 	bl	800a14c <lwip_htons>
 8012418:	4603      	mov	r3, r0
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 0301 	and.w	r3, r3, #1
 8012420:	2b00      	cmp	r3, #0
 8012422:	d01e      	beq.n	8012462 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012424:	4b64      	ldr	r3, [pc, #400]	@ (80125b8 <tcp_receive+0x888>)
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	899b      	ldrh	r3, [r3, #12]
 801242a:	b29b      	uxth	r3, r3
 801242c:	b21b      	sxth	r3, r3
 801242e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012432:	b21c      	sxth	r4, r3
 8012434:	4b60      	ldr	r3, [pc, #384]	@ (80125b8 <tcp_receive+0x888>)
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	899b      	ldrh	r3, [r3, #12]
 801243a:	b29b      	uxth	r3, r3
 801243c:	4618      	mov	r0, r3
 801243e:	f7f7 fe85 	bl	800a14c <lwip_htons>
 8012442:	4603      	mov	r3, r0
 8012444:	b2db      	uxtb	r3, r3
 8012446:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801244a:	b29b      	uxth	r3, r3
 801244c:	4618      	mov	r0, r3
 801244e:	f7f7 fe7d 	bl	800a14c <lwip_htons>
 8012452:	4603      	mov	r3, r0
 8012454:	b21b      	sxth	r3, r3
 8012456:	4323      	orrs	r3, r4
 8012458:	b21a      	sxth	r2, r3
 801245a:	4b57      	ldr	r3, [pc, #348]	@ (80125b8 <tcp_receive+0x888>)
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	b292      	uxth	r2, r2
 8012460:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012466:	4b54      	ldr	r3, [pc, #336]	@ (80125b8 <tcp_receive+0x888>)
 8012468:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801246a:	4b53      	ldr	r3, [pc, #332]	@ (80125b8 <tcp_receive+0x888>)
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	899b      	ldrh	r3, [r3, #12]
 8012470:	b29b      	uxth	r3, r3
 8012472:	4618      	mov	r0, r3
 8012474:	f7f7 fe6a 	bl	800a14c <lwip_htons>
 8012478:	4603      	mov	r3, r0
 801247a:	b2db      	uxtb	r3, r3
 801247c:	f003 0302 	and.w	r3, r3, #2
 8012480:	2b00      	cmp	r3, #0
 8012482:	d005      	beq.n	8012490 <tcp_receive+0x760>
            inseg.len -= 1;
 8012484:	4b4c      	ldr	r3, [pc, #304]	@ (80125b8 <tcp_receive+0x888>)
 8012486:	891b      	ldrh	r3, [r3, #8]
 8012488:	3b01      	subs	r3, #1
 801248a:	b29a      	uxth	r2, r3
 801248c:	4b4a      	ldr	r3, [pc, #296]	@ (80125b8 <tcp_receive+0x888>)
 801248e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012490:	4b49      	ldr	r3, [pc, #292]	@ (80125b8 <tcp_receive+0x888>)
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	4a48      	ldr	r2, [pc, #288]	@ (80125b8 <tcp_receive+0x888>)
 8012496:	8912      	ldrh	r2, [r2, #8]
 8012498:	4611      	mov	r1, r2
 801249a:	4618      	mov	r0, r3
 801249c:	f7fb fc6e 	bl	800dd7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80124a0:	4b45      	ldr	r3, [pc, #276]	@ (80125b8 <tcp_receive+0x888>)
 80124a2:	891c      	ldrh	r4, [r3, #8]
 80124a4:	4b44      	ldr	r3, [pc, #272]	@ (80125b8 <tcp_receive+0x888>)
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	899b      	ldrh	r3, [r3, #12]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7f7 fe4d 	bl	800a14c <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	f003 0303 	and.w	r3, r3, #3
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <tcp_receive+0x792>
 80124be:	2301      	movs	r3, #1
 80124c0:	e000      	b.n	80124c4 <tcp_receive+0x794>
 80124c2:	2300      	movs	r3, #0
 80124c4:	4423      	add	r3, r4
 80124c6:	b29a      	uxth	r2, r3
 80124c8:	4b3c      	ldr	r3, [pc, #240]	@ (80125bc <tcp_receive+0x88c>)
 80124ca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80124cc:	4b3b      	ldr	r3, [pc, #236]	@ (80125bc <tcp_receive+0x88c>)
 80124ce:	881b      	ldrh	r3, [r3, #0]
 80124d0:	461a      	mov	r2, r3
 80124d2:	4b38      	ldr	r3, [pc, #224]	@ (80125b4 <tcp_receive+0x884>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	441a      	add	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124dc:	6879      	ldr	r1, [r7, #4]
 80124de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80124e0:	440b      	add	r3, r1
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d006      	beq.n	80124f4 <tcp_receive+0x7c4>
 80124e6:	4b36      	ldr	r3, [pc, #216]	@ (80125c0 <tcp_receive+0x890>)
 80124e8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80124ec:	4935      	ldr	r1, [pc, #212]	@ (80125c4 <tcp_receive+0x894>)
 80124ee:	4836      	ldr	r0, [pc, #216]	@ (80125c8 <tcp_receive+0x898>)
 80124f0:	f003 f95c 	bl	80157ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f000 80e6 	beq.w	80126ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80124fe:	4b2e      	ldr	r3, [pc, #184]	@ (80125b8 <tcp_receive+0x888>)
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	899b      	ldrh	r3, [r3, #12]
 8012504:	b29b      	uxth	r3, r3
 8012506:	4618      	mov	r0, r3
 8012508:	f7f7 fe20 	bl	800a14c <lwip_htons>
 801250c:	4603      	mov	r3, r0
 801250e:	b2db      	uxtb	r3, r3
 8012510:	f003 0301 	and.w	r3, r3, #1
 8012514:	2b00      	cmp	r3, #0
 8012516:	d010      	beq.n	801253a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012518:	e00a      	b.n	8012530 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801251e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7fd fcb9 	bl	800fea2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1f0      	bne.n	801251a <tcp_receive+0x7ea>
 8012538:	e0c7      	b.n	80126ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012540:	e051      	b.n	80125e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	899b      	ldrh	r3, [r3, #12]
 8012548:	b29b      	uxth	r3, r3
 801254a:	4618      	mov	r0, r3
 801254c:	f7f7 fdfe 	bl	800a14c <lwip_htons>
 8012550:	4603      	mov	r3, r0
 8012552:	b2db      	uxtb	r3, r3
 8012554:	f003 0301 	and.w	r3, r3, #1
 8012558:	2b00      	cmp	r3, #0
 801255a:	d03c      	beq.n	80125d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801255c:	4b16      	ldr	r3, [pc, #88]	@ (80125b8 <tcp_receive+0x888>)
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	899b      	ldrh	r3, [r3, #12]
 8012562:	b29b      	uxth	r3, r3
 8012564:	4618      	mov	r0, r3
 8012566:	f7f7 fdf1 	bl	800a14c <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	b2db      	uxtb	r3, r3
 801256e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012572:	2b00      	cmp	r3, #0
 8012574:	d12f      	bne.n	80125d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012576:	4b10      	ldr	r3, [pc, #64]	@ (80125b8 <tcp_receive+0x888>)
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	899b      	ldrh	r3, [r3, #12]
 801257c:	b29c      	uxth	r4, r3
 801257e:	2001      	movs	r0, #1
 8012580:	f7f7 fde4 	bl	800a14c <lwip_htons>
 8012584:	4603      	mov	r3, r0
 8012586:	461a      	mov	r2, r3
 8012588:	4b0b      	ldr	r3, [pc, #44]	@ (80125b8 <tcp_receive+0x888>)
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	4322      	orrs	r2, r4
 801258e:	b292      	uxth	r2, r2
 8012590:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012592:	4b09      	ldr	r3, [pc, #36]	@ (80125b8 <tcp_receive+0x888>)
 8012594:	891c      	ldrh	r4, [r3, #8]
 8012596:	4b08      	ldr	r3, [pc, #32]	@ (80125b8 <tcp_receive+0x888>)
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29b      	uxth	r3, r3
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f7 fdd4 	bl	800a14c <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	f003 0303 	and.w	r3, r3, #3
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00d      	beq.n	80125cc <tcp_receive+0x89c>
 80125b0:	2301      	movs	r3, #1
 80125b2:	e00c      	b.n	80125ce <tcp_receive+0x89e>
 80125b4:	2401067c 	.word	0x2401067c
 80125b8:	2401065c 	.word	0x2401065c
 80125bc:	24010686 	.word	0x24010686
 80125c0:	080183c8 	.word	0x080183c8
 80125c4:	080187a8 	.word	0x080187a8
 80125c8:	0801844c 	.word	0x0801844c
 80125cc:	2300      	movs	r3, #0
 80125ce:	4423      	add	r3, r4
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	4b98      	ldr	r3, [pc, #608]	@ (8012834 <tcp_receive+0xb04>)
 80125d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80125d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80125da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80125e0:	6938      	ldr	r0, [r7, #16]
 80125e2:	f7fd fc5e 	bl	800fea2 <tcp_seg_free>
            while (next &&
 80125e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d00e      	beq.n	801260a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80125ec:	4b91      	ldr	r3, [pc, #580]	@ (8012834 <tcp_receive+0xb04>)
 80125ee:	881b      	ldrh	r3, [r3, #0]
 80125f0:	461a      	mov	r2, r3
 80125f2:	4b91      	ldr	r3, [pc, #580]	@ (8012838 <tcp_receive+0xb08>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	441a      	add	r2, r3
 80125f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012600:	8909      	ldrh	r1, [r1, #8]
 8012602:	440b      	add	r3, r1
 8012604:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012606:	2b00      	cmp	r3, #0
 8012608:	da9b      	bge.n	8012542 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801260a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801260c:	2b00      	cmp	r3, #0
 801260e:	d059      	beq.n	80126c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012610:	4b88      	ldr	r3, [pc, #544]	@ (8012834 <tcp_receive+0xb04>)
 8012612:	881b      	ldrh	r3, [r3, #0]
 8012614:	461a      	mov	r2, r3
 8012616:	4b88      	ldr	r3, [pc, #544]	@ (8012838 <tcp_receive+0xb08>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	441a      	add	r2, r3
 801261c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012624:	2b00      	cmp	r3, #0
 8012626:	dd4d      	ble.n	80126c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	b29a      	uxth	r2, r3
 8012630:	4b81      	ldr	r3, [pc, #516]	@ (8012838 <tcp_receive+0xb08>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	b29b      	uxth	r3, r3
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	b29a      	uxth	r2, r3
 801263a:	4b80      	ldr	r3, [pc, #512]	@ (801283c <tcp_receive+0xb0c>)
 801263c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801263e:	4b7f      	ldr	r3, [pc, #508]	@ (801283c <tcp_receive+0xb0c>)
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	899b      	ldrh	r3, [r3, #12]
 8012644:	b29b      	uxth	r3, r3
 8012646:	4618      	mov	r0, r3
 8012648:	f7f7 fd80 	bl	800a14c <lwip_htons>
 801264c:	4603      	mov	r3, r0
 801264e:	b2db      	uxtb	r3, r3
 8012650:	f003 0302 	and.w	r3, r3, #2
 8012654:	2b00      	cmp	r3, #0
 8012656:	d005      	beq.n	8012664 <tcp_receive+0x934>
                inseg.len -= 1;
 8012658:	4b78      	ldr	r3, [pc, #480]	@ (801283c <tcp_receive+0xb0c>)
 801265a:	891b      	ldrh	r3, [r3, #8]
 801265c:	3b01      	subs	r3, #1
 801265e:	b29a      	uxth	r2, r3
 8012660:	4b76      	ldr	r3, [pc, #472]	@ (801283c <tcp_receive+0xb0c>)
 8012662:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012664:	4b75      	ldr	r3, [pc, #468]	@ (801283c <tcp_receive+0xb0c>)
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4a74      	ldr	r2, [pc, #464]	@ (801283c <tcp_receive+0xb0c>)
 801266a:	8912      	ldrh	r2, [r2, #8]
 801266c:	4611      	mov	r1, r2
 801266e:	4618      	mov	r0, r3
 8012670:	f7fb fb84 	bl	800dd7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012674:	4b71      	ldr	r3, [pc, #452]	@ (801283c <tcp_receive+0xb0c>)
 8012676:	891c      	ldrh	r4, [r3, #8]
 8012678:	4b70      	ldr	r3, [pc, #448]	@ (801283c <tcp_receive+0xb0c>)
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29b      	uxth	r3, r3
 8012680:	4618      	mov	r0, r3
 8012682:	f7f7 fd63 	bl	800a14c <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	b2db      	uxtb	r3, r3
 801268a:	f003 0303 	and.w	r3, r3, #3
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <tcp_receive+0x966>
 8012692:	2301      	movs	r3, #1
 8012694:	e000      	b.n	8012698 <tcp_receive+0x968>
 8012696:	2300      	movs	r3, #0
 8012698:	4423      	add	r3, r4
 801269a:	b29a      	uxth	r2, r3
 801269c:	4b65      	ldr	r3, [pc, #404]	@ (8012834 <tcp_receive+0xb04>)
 801269e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80126a0:	4b64      	ldr	r3, [pc, #400]	@ (8012834 <tcp_receive+0xb04>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	4b64      	ldr	r3, [pc, #400]	@ (8012838 <tcp_receive+0xb08>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	441a      	add	r2, r3
 80126ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d006      	beq.n	80126c4 <tcp_receive+0x994>
 80126b6:	4b62      	ldr	r3, [pc, #392]	@ (8012840 <tcp_receive+0xb10>)
 80126b8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80126bc:	4961      	ldr	r1, [pc, #388]	@ (8012844 <tcp_receive+0xb14>)
 80126be:	4862      	ldr	r0, [pc, #392]	@ (8012848 <tcp_receive+0xb18>)
 80126c0:	f003 f874 	bl	80157ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126c8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80126ca:	4b5a      	ldr	r3, [pc, #360]	@ (8012834 <tcp_receive+0xb04>)
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	4b59      	ldr	r3, [pc, #356]	@ (8012838 <tcp_receive+0xb08>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	441a      	add	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80126de:	4b55      	ldr	r3, [pc, #340]	@ (8012834 <tcp_receive+0xb04>)
 80126e0:	881b      	ldrh	r3, [r3, #0]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d206      	bcs.n	80126f4 <tcp_receive+0x9c4>
 80126e6:	4b56      	ldr	r3, [pc, #344]	@ (8012840 <tcp_receive+0xb10>)
 80126e8:	f240 6207 	movw	r2, #1543	@ 0x607
 80126ec:	4957      	ldr	r1, [pc, #348]	@ (801284c <tcp_receive+0xb1c>)
 80126ee:	4856      	ldr	r0, [pc, #344]	@ (8012848 <tcp_receive+0xb18>)
 80126f0:	f003 f85c 	bl	80157ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80126f8:	4b4e      	ldr	r3, [pc, #312]	@ (8012834 <tcp_receive+0xb04>)
 80126fa:	881b      	ldrh	r3, [r3, #0]
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	b29a      	uxth	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7fc fd85 	bl	800f214 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801270a:	4b4c      	ldr	r3, [pc, #304]	@ (801283c <tcp_receive+0xb0c>)
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	891b      	ldrh	r3, [r3, #8]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d006      	beq.n	8012722 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012714:	4b49      	ldr	r3, [pc, #292]	@ (801283c <tcp_receive+0xb0c>)
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	4a4d      	ldr	r2, [pc, #308]	@ (8012850 <tcp_receive+0xb20>)
 801271a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801271c:	4b47      	ldr	r3, [pc, #284]	@ (801283c <tcp_receive+0xb0c>)
 801271e:	2200      	movs	r2, #0
 8012720:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012722:	4b46      	ldr	r3, [pc, #280]	@ (801283c <tcp_receive+0xb0c>)
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	899b      	ldrh	r3, [r3, #12]
 8012728:	b29b      	uxth	r3, r3
 801272a:	4618      	mov	r0, r3
 801272c:	f7f7 fd0e 	bl	800a14c <lwip_htons>
 8012730:	4603      	mov	r3, r0
 8012732:	b2db      	uxtb	r3, r3
 8012734:	f003 0301 	and.w	r3, r3, #1
 8012738:	2b00      	cmp	r3, #0
 801273a:	f000 80b8 	beq.w	80128ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801273e:	4b45      	ldr	r3, [pc, #276]	@ (8012854 <tcp_receive+0xb24>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	f043 0320 	orr.w	r3, r3, #32
 8012746:	b2da      	uxtb	r2, r3
 8012748:	4b42      	ldr	r3, [pc, #264]	@ (8012854 <tcp_receive+0xb24>)
 801274a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801274c:	e0af      	b.n	80128ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012752:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	4a36      	ldr	r2, [pc, #216]	@ (8012838 <tcp_receive+0xb08>)
 801275e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	891b      	ldrh	r3, [r3, #8]
 8012764:	461c      	mov	r4, r3
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	899b      	ldrh	r3, [r3, #12]
 801276c:	b29b      	uxth	r3, r3
 801276e:	4618      	mov	r0, r3
 8012770:	f7f7 fcec 	bl	800a14c <lwip_htons>
 8012774:	4603      	mov	r3, r0
 8012776:	b2db      	uxtb	r3, r3
 8012778:	f003 0303 	and.w	r3, r3, #3
 801277c:	2b00      	cmp	r3, #0
 801277e:	d001      	beq.n	8012784 <tcp_receive+0xa54>
 8012780:	2301      	movs	r3, #1
 8012782:	e000      	b.n	8012786 <tcp_receive+0xa56>
 8012784:	2300      	movs	r3, #0
 8012786:	191a      	adds	r2, r3, r4
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801278c:	441a      	add	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012796:	461c      	mov	r4, r3
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	891b      	ldrh	r3, [r3, #8]
 801279c:	461d      	mov	r5, r3
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	899b      	ldrh	r3, [r3, #12]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f7 fcd0 	bl	800a14c <lwip_htons>
 80127ac:	4603      	mov	r3, r0
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	f003 0303 	and.w	r3, r3, #3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <tcp_receive+0xa8c>
 80127b8:	2301      	movs	r3, #1
 80127ba:	e000      	b.n	80127be <tcp_receive+0xa8e>
 80127bc:	2300      	movs	r3, #0
 80127be:	442b      	add	r3, r5
 80127c0:	429c      	cmp	r4, r3
 80127c2:	d206      	bcs.n	80127d2 <tcp_receive+0xaa2>
 80127c4:	4b1e      	ldr	r3, [pc, #120]	@ (8012840 <tcp_receive+0xb10>)
 80127c6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80127ca:	4923      	ldr	r1, [pc, #140]	@ (8012858 <tcp_receive+0xb28>)
 80127cc:	481e      	ldr	r0, [pc, #120]	@ (8012848 <tcp_receive+0xb18>)
 80127ce:	f002 ffed 	bl	80157ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	891b      	ldrh	r3, [r3, #8]
 80127d6:	461c      	mov	r4, r3
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	899b      	ldrh	r3, [r3, #12]
 80127de:	b29b      	uxth	r3, r3
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7f7 fcb3 	bl	800a14c <lwip_htons>
 80127e6:	4603      	mov	r3, r0
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	f003 0303 	and.w	r3, r3, #3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d001      	beq.n	80127f6 <tcp_receive+0xac6>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <tcp_receive+0xac8>
 80127f6:	2300      	movs	r3, #0
 80127f8:	1919      	adds	r1, r3, r4
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80127fe:	b28b      	uxth	r3, r1
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	b29a      	uxth	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7fc fd03 	bl	800f214 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	891b      	ldrh	r3, [r3, #8]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d028      	beq.n	801286a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012818:	4b0d      	ldr	r3, [pc, #52]	@ (8012850 <tcp_receive+0xb20>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01d      	beq.n	801285c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012820:	4b0b      	ldr	r3, [pc, #44]	@ (8012850 <tcp_receive+0xb20>)
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	4619      	mov	r1, r3
 801282a:	4610      	mov	r0, r2
 801282c:	f7fb fcf8 	bl	800e220 <pbuf_cat>
 8012830:	e018      	b.n	8012864 <tcp_receive+0xb34>
 8012832:	bf00      	nop
 8012834:	24010686 	.word	0x24010686
 8012838:	2401067c 	.word	0x2401067c
 801283c:	2401065c 	.word	0x2401065c
 8012840:	080183c8 	.word	0x080183c8
 8012844:	080187e0 	.word	0x080187e0
 8012848:	0801844c 	.word	0x0801844c
 801284c:	0801881c 	.word	0x0801881c
 8012850:	2401068c 	.word	0x2401068c
 8012854:	24010689 	.word	0x24010689
 8012858:	0801883c 	.word	0x0801883c
            } else {
              recv_data = cseg->p;
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	4a70      	ldr	r2, [pc, #448]	@ (8012a24 <tcp_receive+0xcf4>)
 8012862:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2200      	movs	r2, #0
 8012868:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	899b      	ldrh	r3, [r3, #12]
 8012870:	b29b      	uxth	r3, r3
 8012872:	4618      	mov	r0, r3
 8012874:	f7f7 fc6a 	bl	800a14c <lwip_htons>
 8012878:	4603      	mov	r3, r0
 801287a:	b2db      	uxtb	r3, r3
 801287c:	f003 0301 	and.w	r3, r3, #1
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00d      	beq.n	80128a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012884:	4b68      	ldr	r3, [pc, #416]	@ (8012a28 <tcp_receive+0xcf8>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	f043 0320 	orr.w	r3, r3, #32
 801288c:	b2da      	uxtb	r2, r3
 801288e:	4b66      	ldr	r3, [pc, #408]	@ (8012a28 <tcp_receive+0xcf8>)
 8012890:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	7d1b      	ldrb	r3, [r3, #20]
 8012896:	2b04      	cmp	r3, #4
 8012898:	d102      	bne.n	80128a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2207      	movs	r2, #7
 801289e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80128a8:	68b8      	ldr	r0, [r7, #8]
 80128aa:	f7fd fafa 	bl	800fea2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d008      	beq.n	80128c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	685a      	ldr	r2, [r3, #4]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80128c2:	429a      	cmp	r2, r3
 80128c4:	f43f af43 	beq.w	801274e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	8b5b      	ldrh	r3, [r3, #26]
 80128cc:	f003 0301 	and.w	r3, r3, #1
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00e      	beq.n	80128f2 <tcp_receive+0xbc2>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f023 0301 	bic.w	r3, r3, #1
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	835a      	strh	r2, [r3, #26]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	8b5b      	ldrh	r3, [r3, #26]
 80128e6:	f043 0302 	orr.w	r3, r3, #2
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80128f0:	e187      	b.n	8012c02 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	8b5b      	ldrh	r3, [r3, #26]
 80128f6:	f043 0301 	orr.w	r3, r3, #1
 80128fa:	b29a      	uxth	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012900:	e17f      	b.n	8012c02 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012906:	2b00      	cmp	r3, #0
 8012908:	d106      	bne.n	8012918 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801290a:	4848      	ldr	r0, [pc, #288]	@ (8012a2c <tcp_receive+0xcfc>)
 801290c:	f7fd fae2 	bl	800fed4 <tcp_seg_copy>
 8012910:	4602      	mov	r2, r0
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	675a      	str	r2, [r3, #116]	@ 0x74
 8012916:	e16c      	b.n	8012bf2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012918:	2300      	movs	r3, #0
 801291a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012922:	e156      	b.n	8012bd2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8012924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	685a      	ldr	r2, [r3, #4]
 801292a:	4b41      	ldr	r3, [pc, #260]	@ (8012a30 <tcp_receive+0xd00>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	429a      	cmp	r2, r3
 8012930:	d11d      	bne.n	801296e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012932:	4b3e      	ldr	r3, [pc, #248]	@ (8012a2c <tcp_receive+0xcfc>)
 8012934:	891a      	ldrh	r2, [r3, #8]
 8012936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012938:	891b      	ldrh	r3, [r3, #8]
 801293a:	429a      	cmp	r2, r3
 801293c:	f240 814e 	bls.w	8012bdc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012940:	483a      	ldr	r0, [pc, #232]	@ (8012a2c <tcp_receive+0xcfc>)
 8012942:	f7fd fac7 	bl	800fed4 <tcp_seg_copy>
 8012946:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 8148 	beq.w	8012be0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012952:	2b00      	cmp	r3, #0
 8012954:	d003      	beq.n	801295e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012958:	697a      	ldr	r2, [r7, #20]
 801295a:	601a      	str	r2, [r3, #0]
 801295c:	e002      	b.n	8012964 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012964:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012966:	6978      	ldr	r0, [r7, #20]
 8012968:	f7ff f8de 	bl	8011b28 <tcp_oos_insert_segment>
                }
                break;
 801296c:	e138      	b.n	8012be0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801296e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012970:	2b00      	cmp	r3, #0
 8012972:	d117      	bne.n	80129a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012974:	4b2e      	ldr	r3, [pc, #184]	@ (8012a30 <tcp_receive+0xd00>)
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	da57      	bge.n	8012a34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012984:	4829      	ldr	r0, [pc, #164]	@ (8012a2c <tcp_receive+0xcfc>)
 8012986:	f7fd faa5 	bl	800fed4 <tcp_seg_copy>
 801298a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	2b00      	cmp	r3, #0
 8012990:	f000 8128 	beq.w	8012be4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	69ba      	ldr	r2, [r7, #24]
 8012998:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801299a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801299c:	69b8      	ldr	r0, [r7, #24]
 801299e:	f7ff f8c3 	bl	8011b28 <tcp_oos_insert_segment>
                  }
                  break;
 80129a2:	e11f      	b.n	8012be4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80129a4:	4b22      	ldr	r3, [pc, #136]	@ (8012a30 <tcp_receive+0xd00>)
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	1ad3      	subs	r3, r2, r3
 80129b0:	3b01      	subs	r3, #1
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	db3e      	blt.n	8012a34 <tcp_receive+0xd04>
 80129b6:	4b1e      	ldr	r3, [pc, #120]	@ (8012a30 <tcp_receive+0xd00>)
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	1ad3      	subs	r3, r2, r3
 80129c2:	3301      	adds	r3, #1
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	dc35      	bgt.n	8012a34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129c8:	4818      	ldr	r0, [pc, #96]	@ (8012a2c <tcp_receive+0xcfc>)
 80129ca:	f7fd fa83 	bl	800fed4 <tcp_seg_copy>
 80129ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 8108 	beq.w	8012be8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80129d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129e0:	8912      	ldrh	r2, [r2, #8]
 80129e2:	441a      	add	r2, r3
 80129e4:	4b12      	ldr	r3, [pc, #72]	@ (8012a30 <tcp_receive+0xd00>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	dd12      	ble.n	8012a14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80129ee:	4b10      	ldr	r3, [pc, #64]	@ (8012a30 <tcp_receive+0xd00>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a06:	685a      	ldr	r2, [r3, #4]
 8012a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a0a:	891b      	ldrh	r3, [r3, #8]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4610      	mov	r0, r2
 8012a10:	f7fb f9b4 	bl	800dd7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a16:	69fa      	ldr	r2, [r7, #28]
 8012a18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a1c:	69f8      	ldr	r0, [r7, #28]
 8012a1e:	f7ff f883 	bl	8011b28 <tcp_oos_insert_segment>
                  }
                  break;
 8012a22:	e0e1      	b.n	8012be8 <tcp_receive+0xeb8>
 8012a24:	2401068c 	.word	0x2401068c
 8012a28:	24010689 	.word	0x24010689
 8012a2c:	2401065c 	.word	0x2401065c
 8012a30:	2401067c 	.word	0x2401067c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a36:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f040 80c5 	bne.w	8012bcc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012a42:	4b7f      	ldr	r3, [pc, #508]	@ (8012c40 <tcp_receive+0xf10>)
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f340 80bc 	ble.w	8012bcc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	899b      	ldrh	r3, [r3, #12]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f7 fb75 	bl	800a14c <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f040 80be 	bne.w	8012bec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a70:	4874      	ldr	r0, [pc, #464]	@ (8012c44 <tcp_receive+0xf14>)
 8012a72:	f7fd fa2f 	bl	800fed4 <tcp_seg_copy>
 8012a76:	4602      	mov	r2, r0
 8012a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 80b5 	beq.w	8012bf0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a8e:	8912      	ldrh	r2, [r2, #8]
 8012a90:	441a      	add	r2, r3
 8012a92:	4b6b      	ldr	r3, [pc, #428]	@ (8012c40 <tcp_receive+0xf10>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	1ad3      	subs	r3, r2, r3
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	dd12      	ble.n	8012ac2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012a9c:	4b68      	ldr	r3, [pc, #416]	@ (8012c40 <tcp_receive+0xf10>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab4:	685a      	ldr	r2, [r3, #4]
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab8:	891b      	ldrh	r3, [r3, #8]
 8012aba:	4619      	mov	r1, r3
 8012abc:	4610      	mov	r0, r2
 8012abe:	f7fb f95d 	bl	800dd7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012ac2:	4b61      	ldr	r3, [pc, #388]	@ (8012c48 <tcp_receive+0xf18>)
 8012ac4:	881b      	ldrh	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8012c40 <tcp_receive+0xf10>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	441a      	add	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ad2:	6879      	ldr	r1, [r7, #4]
 8012ad4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012ad6:	440b      	add	r3, r1
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f340 8088 	ble.w	8012bf0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	899b      	ldrh	r3, [r3, #12]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7f7 fb2e 	bl	800a14c <lwip_htons>
 8012af0:	4603      	mov	r3, r0
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	f003 0301 	and.w	r3, r3, #1
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d021      	beq.n	8012b40 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	899b      	ldrh	r3, [r3, #12]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	b21b      	sxth	r3, r3
 8012b08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012b0c:	b21c      	sxth	r4, r3
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	899b      	ldrh	r3, [r3, #12]
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f7 fb17 	bl	800a14c <lwip_htons>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f7 fb0f 	bl	800a14c <lwip_htons>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	b21b      	sxth	r3, r3
 8012b32:	4323      	orrs	r3, r4
 8012b34:	b21a      	sxth	r2, r3
 8012b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	b292      	uxth	r2, r2
 8012b3e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b4a:	4413      	add	r3, r2
 8012b4c:	b299      	uxth	r1, r3
 8012b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8012c40 <tcp_receive+0xf10>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	1a8a      	subs	r2, r1, r2
 8012b5a:	b292      	uxth	r2, r2
 8012b5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	685a      	ldr	r2, [r3, #4]
 8012b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	891b      	ldrh	r3, [r3, #8]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	4610      	mov	r0, r2
 8012b6e:	f7fb f905 	bl	800dd7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	891c      	ldrh	r4, [r3, #8]
 8012b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	899b      	ldrh	r3, [r3, #12]
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7f7 fae2 	bl	800a14c <lwip_htons>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	f003 0303 	and.w	r3, r3, #3
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d001      	beq.n	8012b98 <tcp_receive+0xe68>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <tcp_receive+0xe6a>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	4423      	add	r3, r4
 8012b9c:	b29a      	uxth	r2, r3
 8012b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8012c48 <tcp_receive+0xf18>)
 8012ba0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ba2:	4b29      	ldr	r3, [pc, #164]	@ (8012c48 <tcp_receive+0xf18>)
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	4b25      	ldr	r3, [pc, #148]	@ (8012c40 <tcp_receive+0xf10>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	441a      	add	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bb2:	6879      	ldr	r1, [r7, #4]
 8012bb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012bb6:	440b      	add	r3, r1
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d019      	beq.n	8012bf0 <tcp_receive+0xec0>
 8012bbc:	4b23      	ldr	r3, [pc, #140]	@ (8012c4c <tcp_receive+0xf1c>)
 8012bbe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8012bc2:	4923      	ldr	r1, [pc, #140]	@ (8012c50 <tcp_receive+0xf20>)
 8012bc4:	4823      	ldr	r0, [pc, #140]	@ (8012c54 <tcp_receive+0xf24>)
 8012bc6:	f002 fdf1 	bl	80157ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012bca:	e011      	b.n	8012bf0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	f47f aea5 	bne.w	8012924 <tcp_receive+0xbf4>
 8012bda:	e00a      	b.n	8012bf2 <tcp_receive+0xec2>
                break;
 8012bdc:	bf00      	nop
 8012bde:	e008      	b.n	8012bf2 <tcp_receive+0xec2>
                break;
 8012be0:	bf00      	nop
 8012be2:	e006      	b.n	8012bf2 <tcp_receive+0xec2>
                  break;
 8012be4:	bf00      	nop
 8012be6:	e004      	b.n	8012bf2 <tcp_receive+0xec2>
                  break;
 8012be8:	bf00      	nop
 8012bea:	e002      	b.n	8012bf2 <tcp_receive+0xec2>
                  break;
 8012bec:	bf00      	nop
 8012bee:	e000      	b.n	8012bf2 <tcp_receive+0xec2>
                break;
 8012bf0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f001 fe8e 	bl	8014914 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012bf8:	e003      	b.n	8012c02 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f001 fe8a 	bl	8014914 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c00:	e01a      	b.n	8012c38 <tcp_receive+0xf08>
 8012c02:	e019      	b.n	8012c38 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c04:	4b0e      	ldr	r3, [pc, #56]	@ (8012c40 <tcp_receive+0xf10>)
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0c:	1ad3      	subs	r3, r2, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	db0a      	blt.n	8012c28 <tcp_receive+0xef8>
 8012c12:	4b0b      	ldr	r3, [pc, #44]	@ (8012c40 <tcp_receive+0xf10>)
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c1a:	6879      	ldr	r1, [r7, #4]
 8012c1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c1e:	440b      	add	r3, r1
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	3301      	adds	r3, #1
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dd07      	ble.n	8012c38 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	8b5b      	ldrh	r3, [r3, #26]
 8012c2c:	f043 0302 	orr.w	r3, r3, #2
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012c36:	e7ff      	b.n	8012c38 <tcp_receive+0xf08>
 8012c38:	bf00      	nop
 8012c3a:	3750      	adds	r7, #80	@ 0x50
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c40:	2401067c 	.word	0x2401067c
 8012c44:	2401065c 	.word	0x2401065c
 8012c48:	24010686 	.word	0x24010686
 8012c4c:	080183c8 	.word	0x080183c8
 8012c50:	080187a8 	.word	0x080187a8
 8012c54:	0801844c 	.word	0x0801844c

08012c58 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012c5e:	4b15      	ldr	r3, [pc, #84]	@ (8012cb4 <tcp_get_next_optbyte+0x5c>)
 8012c60:	881b      	ldrh	r3, [r3, #0]
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	b291      	uxth	r1, r2
 8012c66:	4a13      	ldr	r2, [pc, #76]	@ (8012cb4 <tcp_get_next_optbyte+0x5c>)
 8012c68:	8011      	strh	r1, [r2, #0]
 8012c6a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c6c:	4b12      	ldr	r3, [pc, #72]	@ (8012cb8 <tcp_get_next_optbyte+0x60>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d004      	beq.n	8012c7e <tcp_get_next_optbyte+0x26>
 8012c74:	4b11      	ldr	r3, [pc, #68]	@ (8012cbc <tcp_get_next_optbyte+0x64>)
 8012c76:	881b      	ldrh	r3, [r3, #0]
 8012c78:	88fa      	ldrh	r2, [r7, #6]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d208      	bcs.n	8012c90 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c7e:	4b10      	ldr	r3, [pc, #64]	@ (8012cc0 <tcp_get_next_optbyte+0x68>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	3314      	adds	r3, #20
 8012c84:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012c86:	88fb      	ldrh	r3, [r7, #6]
 8012c88:	683a      	ldr	r2, [r7, #0]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	e00b      	b.n	8012ca8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c90:	88fb      	ldrh	r3, [r7, #6]
 8012c92:	b2da      	uxtb	r2, r3
 8012c94:	4b09      	ldr	r3, [pc, #36]	@ (8012cbc <tcp_get_next_optbyte+0x64>)
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012c9e:	4b06      	ldr	r3, [pc, #24]	@ (8012cb8 <tcp_get_next_optbyte+0x60>)
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	797b      	ldrb	r3, [r7, #5]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr
 8012cb4:	24010678 	.word	0x24010678
 8012cb8:	24010674 	.word	0x24010674
 8012cbc:	24010672 	.word	0x24010672
 8012cc0:	2401066c 	.word	0x2401066c

08012cc4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d106      	bne.n	8012ce0 <tcp_parseopt+0x1c>
 8012cd2:	4b33      	ldr	r3, [pc, #204]	@ (8012da0 <tcp_parseopt+0xdc>)
 8012cd4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012cd8:	4932      	ldr	r1, [pc, #200]	@ (8012da4 <tcp_parseopt+0xe0>)
 8012cda:	4833      	ldr	r0, [pc, #204]	@ (8012da8 <tcp_parseopt+0xe4>)
 8012cdc:	f002 fd66 	bl	80157ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012ce0:	4b32      	ldr	r3, [pc, #200]	@ (8012dac <tcp_parseopt+0xe8>)
 8012ce2:	881b      	ldrh	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d057      	beq.n	8012d98 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ce8:	4b31      	ldr	r3, [pc, #196]	@ (8012db0 <tcp_parseopt+0xec>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	801a      	strh	r2, [r3, #0]
 8012cee:	e047      	b.n	8012d80 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8012cf0:	f7ff ffb2 	bl	8012c58 <tcp_get_next_optbyte>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012cf8:	7bfb      	ldrb	r3, [r7, #15]
 8012cfa:	2b02      	cmp	r3, #2
 8012cfc:	d006      	beq.n	8012d0c <tcp_parseopt+0x48>
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	dc2b      	bgt.n	8012d5a <tcp_parseopt+0x96>
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d043      	beq.n	8012d8e <tcp_parseopt+0xca>
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d039      	beq.n	8012d7e <tcp_parseopt+0xba>
 8012d0a:	e026      	b.n	8012d5a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012d0c:	f7ff ffa4 	bl	8012c58 <tcp_get_next_optbyte>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b04      	cmp	r3, #4
 8012d14:	d13d      	bne.n	8012d92 <tcp_parseopt+0xce>
 8012d16:	4b26      	ldr	r3, [pc, #152]	@ (8012db0 <tcp_parseopt+0xec>)
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	4a23      	ldr	r2, [pc, #140]	@ (8012dac <tcp_parseopt+0xe8>)
 8012d1e:	8812      	ldrh	r2, [r2, #0]
 8012d20:	4293      	cmp	r3, r2
 8012d22:	da36      	bge.n	8012d92 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d24:	f7ff ff98 	bl	8012c58 <tcp_get_next_optbyte>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	021b      	lsls	r3, r3, #8
 8012d2c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012d2e:	f7ff ff93 	bl	8012c58 <tcp_get_next_optbyte>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
 8012d36:	89bb      	ldrh	r3, [r7, #12]
 8012d38:	4313      	orrs	r3, r2
 8012d3a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012d3c:	89bb      	ldrh	r3, [r7, #12]
 8012d3e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d804      	bhi.n	8012d50 <tcp_parseopt+0x8c>
 8012d46:	89bb      	ldrh	r3, [r7, #12]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <tcp_parseopt+0x8c>
 8012d4c:	89ba      	ldrh	r2, [r7, #12]
 8012d4e:	e001      	b.n	8012d54 <tcp_parseopt+0x90>
 8012d50:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012d58:	e012      	b.n	8012d80 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012d5a:	f7ff ff7d 	bl	8012c58 <tcp_get_next_optbyte>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012d62:	7afb      	ldrb	r3, [r7, #11]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d916      	bls.n	8012d96 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012d68:	7afb      	ldrb	r3, [r7, #11]
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	4b10      	ldr	r3, [pc, #64]	@ (8012db0 <tcp_parseopt+0xec>)
 8012d6e:	881b      	ldrh	r3, [r3, #0]
 8012d70:	4413      	add	r3, r2
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	3b02      	subs	r3, #2
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	4b0d      	ldr	r3, [pc, #52]	@ (8012db0 <tcp_parseopt+0xec>)
 8012d7a:	801a      	strh	r2, [r3, #0]
 8012d7c:	e000      	b.n	8012d80 <tcp_parseopt+0xbc>
          break;
 8012d7e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d80:	4b0b      	ldr	r3, [pc, #44]	@ (8012db0 <tcp_parseopt+0xec>)
 8012d82:	881a      	ldrh	r2, [r3, #0]
 8012d84:	4b09      	ldr	r3, [pc, #36]	@ (8012dac <tcp_parseopt+0xe8>)
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d3b1      	bcc.n	8012cf0 <tcp_parseopt+0x2c>
 8012d8c:	e004      	b.n	8012d98 <tcp_parseopt+0xd4>
          return;
 8012d8e:	bf00      	nop
 8012d90:	e002      	b.n	8012d98 <tcp_parseopt+0xd4>
            return;
 8012d92:	bf00      	nop
 8012d94:	e000      	b.n	8012d98 <tcp_parseopt+0xd4>
            return;
 8012d96:	bf00      	nop
      }
    }
  }
}
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	080183c8 	.word	0x080183c8
 8012da4:	08018864 	.word	0x08018864
 8012da8:	0801844c 	.word	0x0801844c
 8012dac:	24010670 	.word	0x24010670
 8012db0:	24010678 	.word	0x24010678

08012db4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012db4:	b480      	push	{r7}
 8012db6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012db8:	4b05      	ldr	r3, [pc, #20]	@ (8012dd0 <tcp_trigger_input_pcb_close+0x1c>)
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	f043 0310 	orr.w	r3, r3, #16
 8012dc0:	b2da      	uxtb	r2, r3
 8012dc2:	4b03      	ldr	r3, [pc, #12]	@ (8012dd0 <tcp_trigger_input_pcb_close+0x1c>)
 8012dc4:	701a      	strb	r2, [r3, #0]
}
 8012dc6:	bf00      	nop
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr
 8012dd0:	24010689 	.word	0x24010689

08012dd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00a      	beq.n	8012dfc <tcp_route+0x28>
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	7a1b      	ldrb	r3, [r3, #8]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	7a1b      	ldrb	r3, [r3, #8]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fa fdb8 	bl	800d968 <netif_get_by_index>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	e003      	b.n	8012e04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7f8 fc85 	bl	800b70c <ip4_route>
 8012e02:	4603      	mov	r3, r0
  }
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012e0c:	b590      	push	{r4, r7, lr}
 8012e0e:	b087      	sub	sp, #28
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	603b      	str	r3, [r7, #0]
 8012e18:	4613      	mov	r3, r2
 8012e1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d105      	bne.n	8012e2e <tcp_create_segment+0x22>
 8012e22:	4b43      	ldr	r3, [pc, #268]	@ (8012f30 <tcp_create_segment+0x124>)
 8012e24:	22a3      	movs	r2, #163	@ 0xa3
 8012e26:	4943      	ldr	r1, [pc, #268]	@ (8012f34 <tcp_create_segment+0x128>)
 8012e28:	4843      	ldr	r0, [pc, #268]	@ (8012f38 <tcp_create_segment+0x12c>)
 8012e2a:	f002 fcbf 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d105      	bne.n	8012e40 <tcp_create_segment+0x34>
 8012e34:	4b3e      	ldr	r3, [pc, #248]	@ (8012f30 <tcp_create_segment+0x124>)
 8012e36:	22a4      	movs	r2, #164	@ 0xa4
 8012e38:	4940      	ldr	r1, [pc, #256]	@ (8012f3c <tcp_create_segment+0x130>)
 8012e3a:	483f      	ldr	r0, [pc, #252]	@ (8012f38 <tcp_create_segment+0x12c>)
 8012e3c:	f002 fcb6 	bl	80157ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012e40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	f003 0304 	and.w	r3, r3, #4
 8012e4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012e4e:	2003      	movs	r0, #3
 8012e50:	f7fa f9f2 	bl	800d238 <memp_malloc>
 8012e54:	6138      	str	r0, [r7, #16]
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d104      	bne.n	8012e66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012e5c:	68b8      	ldr	r0, [r7, #8]
 8012e5e:	f7fb f911 	bl	800e084 <pbuf_free>
    return NULL;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e060      	b.n	8012f28 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012e6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	2200      	movs	r2, #0
 8012e72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	68ba      	ldr	r2, [r7, #8]
 8012e78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	891a      	ldrh	r2, [r3, #8]
 8012e7e:	7dfb      	ldrb	r3, [r7, #23]
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d205      	bcs.n	8012e92 <tcp_create_segment+0x86>
 8012e86:	4b2a      	ldr	r3, [pc, #168]	@ (8012f30 <tcp_create_segment+0x124>)
 8012e88:	22b0      	movs	r2, #176	@ 0xb0
 8012e8a:	492d      	ldr	r1, [pc, #180]	@ (8012f40 <tcp_create_segment+0x134>)
 8012e8c:	482a      	ldr	r0, [pc, #168]	@ (8012f38 <tcp_create_segment+0x12c>)
 8012e8e:	f002 fc8d 	bl	80157ac <iprintf>
  seg->len = p->tot_len - optlen;
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	891a      	ldrh	r2, [r3, #8]
 8012e96:	7dfb      	ldrb	r3, [r7, #23]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012ea2:	2114      	movs	r1, #20
 8012ea4:	68b8      	ldr	r0, [r7, #8]
 8012ea6:	f7fb f857 	bl	800df58 <pbuf_add_header>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d004      	beq.n	8012eba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012eb0:	6938      	ldr	r0, [r7, #16]
 8012eb2:	f7fc fff6 	bl	800fea2 <tcp_seg_free>
    return NULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	e036      	b.n	8012f28 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	685a      	ldr	r2, [r3, #4]
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	8ada      	ldrh	r2, [r3, #22]
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	68dc      	ldr	r4, [r3, #12]
 8012ecc:	4610      	mov	r0, r2
 8012ece:	f7f7 f93d 	bl	800a14c <lwip_htons>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	8b1a      	ldrh	r2, [r3, #24]
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	68dc      	ldr	r4, [r3, #12]
 8012ede:	4610      	mov	r0, r2
 8012ee0:	f7f7 f934 	bl	800a14c <lwip_htons>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	68dc      	ldr	r4, [r3, #12]
 8012eec:	6838      	ldr	r0, [r7, #0]
 8012eee:	f7f7 f942 	bl	800a176 <lwip_htonl>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	089b      	lsrs	r3, r3, #2
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	3305      	adds	r3, #5
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	031b      	lsls	r3, r3, #12
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	79fb      	ldrb	r3, [r7, #7]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	68dc      	ldr	r4, [r3, #12]
 8012f10:	4610      	mov	r0, r2
 8012f12:	f7f7 f91b 	bl	800a14c <lwip_htons>
 8012f16:	4603      	mov	r3, r0
 8012f18:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	749a      	strb	r2, [r3, #18]
 8012f22:	2200      	movs	r2, #0
 8012f24:	74da      	strb	r2, [r3, #19]
  return seg;
 8012f26:	693b      	ldr	r3, [r7, #16]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	371c      	adds	r7, #28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd90      	pop	{r4, r7, pc}
 8012f30:	08018880 	.word	0x08018880
 8012f34:	080188ec 	.word	0x080188ec
 8012f38:	0801890c 	.word	0x0801890c
 8012f3c:	08018934 	.word	0x08018934
 8012f40:	08018958 	.word	0x08018958

08012f44 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	607b      	str	r3, [r7, #4]
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	73fb      	strb	r3, [r7, #15]
 8012f50:	460b      	mov	r3, r1
 8012f52:	81bb      	strh	r3, [r7, #12]
 8012f54:	4613      	mov	r3, r2
 8012f56:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012f58:	89bb      	ldrh	r3, [r7, #12]
 8012f5a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d105      	bne.n	8012f6e <tcp_pbuf_prealloc+0x2a>
 8012f62:	4b30      	ldr	r3, [pc, #192]	@ (8013024 <tcp_pbuf_prealloc+0xe0>)
 8012f64:	22e8      	movs	r2, #232	@ 0xe8
 8012f66:	4930      	ldr	r1, [pc, #192]	@ (8013028 <tcp_pbuf_prealloc+0xe4>)
 8012f68:	4830      	ldr	r0, [pc, #192]	@ (801302c <tcp_pbuf_prealloc+0xe8>)
 8012f6a:	f002 fc1f 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012f6e:	6a3b      	ldr	r3, [r7, #32]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d105      	bne.n	8012f80 <tcp_pbuf_prealloc+0x3c>
 8012f74:	4b2b      	ldr	r3, [pc, #172]	@ (8013024 <tcp_pbuf_prealloc+0xe0>)
 8012f76:	22e9      	movs	r2, #233	@ 0xe9
 8012f78:	492d      	ldr	r1, [pc, #180]	@ (8013030 <tcp_pbuf_prealloc+0xec>)
 8012f7a:	482c      	ldr	r0, [pc, #176]	@ (801302c <tcp_pbuf_prealloc+0xe8>)
 8012f7c:	f002 fc16 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012f80:	89ba      	ldrh	r2, [r7, #12]
 8012f82:	897b      	ldrh	r3, [r7, #10]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d221      	bcs.n	8012fcc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012f8c:	f003 0302 	and.w	r3, r3, #2
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d111      	bne.n	8012fb8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012f94:	6a3b      	ldr	r3, [r7, #32]
 8012f96:	8b5b      	ldrh	r3, [r3, #26]
 8012f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d115      	bne.n	8012fcc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d007      	beq.n	8012fb8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012fa8:	6a3b      	ldr	r3, [r7, #32]
 8012faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d103      	bne.n	8012fb8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d009      	beq.n	8012fcc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012fb8:	89bb      	ldrh	r3, [r7, #12]
 8012fba:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8012fbe:	f023 0203 	bic.w	r2, r3, #3
 8012fc2:	897b      	ldrh	r3, [r7, #10]
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	bf28      	it	cs
 8012fc8:	4613      	movcs	r3, r2
 8012fca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012fcc:	8af9      	ldrh	r1, [r7, #22]
 8012fce:	7bfb      	ldrb	r3, [r7, #15]
 8012fd0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7fa fd71 	bl	800dabc <pbuf_alloc>
 8012fda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d101      	bne.n	8012fe6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e019      	b.n	801301a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d006      	beq.n	8012ffc <tcp_pbuf_prealloc+0xb8>
 8012fee:	4b0d      	ldr	r3, [pc, #52]	@ (8013024 <tcp_pbuf_prealloc+0xe0>)
 8012ff0:	f240 120b 	movw	r2, #267	@ 0x10b
 8012ff4:	490f      	ldr	r1, [pc, #60]	@ (8013034 <tcp_pbuf_prealloc+0xf0>)
 8012ff6:	480d      	ldr	r0, [pc, #52]	@ (801302c <tcp_pbuf_prealloc+0xe8>)
 8012ff8:	f002 fbd8 	bl	80157ac <iprintf>
  *oversize = p->len - length;
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	895a      	ldrh	r2, [r3, #10]
 8013000:	89bb      	ldrh	r3, [r7, #12]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	b29a      	uxth	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	89ba      	ldrh	r2, [r7, #12]
 801300e:	811a      	strh	r2, [r3, #8]
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	891a      	ldrh	r2, [r3, #8]
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	815a      	strh	r2, [r3, #10]
  return p;
 8013018:	693b      	ldr	r3, [r7, #16]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3718      	adds	r7, #24
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	08018880 	.word	0x08018880
 8013028:	08018970 	.word	0x08018970
 801302c:	0801890c 	.word	0x0801890c
 8013030:	08018994 	.word	0x08018994
 8013034:	080189b4 	.word	0x080189b4

08013038 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	460b      	mov	r3, r1
 8013042:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d106      	bne.n	8013058 <tcp_write_checks+0x20>
 801304a:	4b33      	ldr	r3, [pc, #204]	@ (8013118 <tcp_write_checks+0xe0>)
 801304c:	f240 1233 	movw	r2, #307	@ 0x133
 8013050:	4932      	ldr	r1, [pc, #200]	@ (801311c <tcp_write_checks+0xe4>)
 8013052:	4833      	ldr	r0, [pc, #204]	@ (8013120 <tcp_write_checks+0xe8>)
 8013054:	f002 fbaa 	bl	80157ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	7d1b      	ldrb	r3, [r3, #20]
 801305c:	2b04      	cmp	r3, #4
 801305e:	d00e      	beq.n	801307e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013064:	2b07      	cmp	r3, #7
 8013066:	d00a      	beq.n	801307e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801306c:	2b02      	cmp	r3, #2
 801306e:	d006      	beq.n	801307e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013074:	2b03      	cmp	r3, #3
 8013076:	d002      	beq.n	801307e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013078:	f06f 030a 	mvn.w	r3, #10
 801307c:	e048      	b.n	8013110 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801307e:	887b      	ldrh	r3, [r7, #2]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <tcp_write_checks+0x50>
    return ERR_OK;
 8013084:	2300      	movs	r3, #0
 8013086:	e043      	b.n	8013110 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801308e:	887a      	ldrh	r2, [r7, #2]
 8013090:	429a      	cmp	r2, r3
 8013092:	d909      	bls.n	80130a8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8b5b      	ldrh	r3, [r3, #26]
 8013098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801309c:	b29a      	uxth	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130a2:	f04f 33ff 	mov.w	r3, #4294967295
 80130a6:	e033      	b.n	8013110 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80130ae:	2b0f      	cmp	r3, #15
 80130b0:	d909      	bls.n	80130c6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	8b5b      	ldrh	r3, [r3, #26]
 80130b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130c0:	f04f 33ff 	mov.w	r3, #4294967295
 80130c4:	e024      	b.n	8013110 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d00f      	beq.n	80130f0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d11a      	bne.n	801310e <tcp_write_checks+0xd6>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d116      	bne.n	801310e <tcp_write_checks+0xd6>
 80130e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013118 <tcp_write_checks+0xe0>)
 80130e2:	f240 1255 	movw	r2, #341	@ 0x155
 80130e6:	490f      	ldr	r1, [pc, #60]	@ (8013124 <tcp_write_checks+0xec>)
 80130e8:	480d      	ldr	r0, [pc, #52]	@ (8013120 <tcp_write_checks+0xe8>)
 80130ea:	f002 fb5f 	bl	80157ac <iprintf>
 80130ee:	e00e      	b.n	801310e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d103      	bne.n	8013100 <tcp_write_checks+0xc8>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d006      	beq.n	801310e <tcp_write_checks+0xd6>
 8013100:	4b05      	ldr	r3, [pc, #20]	@ (8013118 <tcp_write_checks+0xe0>)
 8013102:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013106:	4908      	ldr	r1, [pc, #32]	@ (8013128 <tcp_write_checks+0xf0>)
 8013108:	4805      	ldr	r0, [pc, #20]	@ (8013120 <tcp_write_checks+0xe8>)
 801310a:	f002 fb4f 	bl	80157ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801310e:	2300      	movs	r3, #0
}
 8013110:	4618      	mov	r0, r3
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08018880 	.word	0x08018880
 801311c:	080189c8 	.word	0x080189c8
 8013120:	0801890c 	.word	0x0801890c
 8013124:	080189e8 	.word	0x080189e8
 8013128:	08018a24 	.word	0x08018a24

0801312c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801312c:	b590      	push	{r4, r7, lr}
 801312e:	b09b      	sub	sp, #108	@ 0x6c
 8013130:	af04      	add	r7, sp, #16
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	4611      	mov	r1, r2
 8013138:	461a      	mov	r2, r3
 801313a:	460b      	mov	r3, r1
 801313c:	80fb      	strh	r3, [r7, #6]
 801313e:	4613      	mov	r3, r2
 8013140:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013142:	2300      	movs	r3, #0
 8013144:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013146:	2300      	movs	r3, #0
 8013148:	653b      	str	r3, [r7, #80]	@ 0x50
 801314a:	2300      	movs	r3, #0
 801314c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801314e:	2300      	movs	r3, #0
 8013150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013152:	2300      	movs	r3, #0
 8013154:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013156:	2300      	movs	r3, #0
 8013158:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013162:	2300      	movs	r3, #0
 8013164:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801316a:	2300      	movs	r3, #0
 801316c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d109      	bne.n	8013188 <tcp_write+0x5c>
 8013174:	4ba5      	ldr	r3, [pc, #660]	@ (801340c <tcp_write+0x2e0>)
 8013176:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801317a:	49a5      	ldr	r1, [pc, #660]	@ (8013410 <tcp_write+0x2e4>)
 801317c:	48a5      	ldr	r0, [pc, #660]	@ (8013414 <tcp_write+0x2e8>)
 801317e:	f002 fb15 	bl	80157ac <iprintf>
 8013182:	f06f 030f 	mvn.w	r3, #15
 8013186:	e32c      	b.n	80137e2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801318e:	085b      	lsrs	r3, r3, #1
 8013190:	b29a      	uxth	r2, r3
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013196:	4293      	cmp	r3, r2
 8013198:	bf28      	it	cs
 801319a:	4613      	movcs	r3, r2
 801319c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801319e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d102      	bne.n	80131aa <tcp_write+0x7e>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131a8:	e000      	b.n	80131ac <tcp_write+0x80>
 80131aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ac:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 80131ae:	f7f3 f8f5 	bl	800639c <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <tcp_write+0xa0>
 80131b8:	4b94      	ldr	r3, [pc, #592]	@ (801340c <tcp_write+0x2e0>)
 80131ba:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80131be:	4996      	ldr	r1, [pc, #600]	@ (8013418 <tcp_write+0x2ec>)
 80131c0:	4894      	ldr	r0, [pc, #592]	@ (8013414 <tcp_write+0x2e8>)
 80131c2:	f002 faf3 	bl	80157ac <iprintf>
 80131c6:	f06f 030f 	mvn.w	r3, #15
 80131ca:	e30a      	b.n	80137e2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80131cc:	88fb      	ldrh	r3, [r7, #6]
 80131ce:	4619      	mov	r1, r3
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7ff ff31 	bl	8013038 <tcp_write_checks>
 80131d6:	4603      	mov	r3, r0
 80131d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80131dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d002      	beq.n	80131ea <tcp_write+0xbe>
    return err;
 80131e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80131e8:	e2fb      	b.n	80137e2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131f4:	2300      	movs	r3, #0
 80131f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f000 80f6 	beq.w	80133f0 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013208:	653b      	str	r3, [r7, #80]	@ 0x50
 801320a:	e002      	b.n	8013212 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 801320c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d1f8      	bne.n	801320c <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801321a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801321c:	7a9b      	ldrb	r3, [r3, #10]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	b29b      	uxth	r3, r3
 8013222:	f003 0304 	and.w	r3, r3, #4
 8013226:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013228:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801322a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801322c:	891b      	ldrh	r3, [r3, #8]
 801322e:	4619      	mov	r1, r3
 8013230:	8c3b      	ldrh	r3, [r7, #32]
 8013232:	440b      	add	r3, r1
 8013234:	429a      	cmp	r2, r3
 8013236:	da06      	bge.n	8013246 <tcp_write+0x11a>
 8013238:	4b74      	ldr	r3, [pc, #464]	@ (801340c <tcp_write+0x2e0>)
 801323a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801323e:	4977      	ldr	r1, [pc, #476]	@ (801341c <tcp_write+0x2f0>)
 8013240:	4874      	ldr	r0, [pc, #464]	@ (8013414 <tcp_write+0x2e8>)
 8013242:	f002 fab3 	bl	80157ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013248:	891a      	ldrh	r2, [r3, #8]
 801324a:	8c3b      	ldrh	r3, [r7, #32]
 801324c:	4413      	add	r3, r2
 801324e:	b29b      	uxth	r3, r3
 8013250:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801325c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801325e:	8a7b      	ldrh	r3, [r7, #18]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d026      	beq.n	80132b2 <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013264:	8a7b      	ldrh	r3, [r7, #18]
 8013266:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013268:	429a      	cmp	r2, r3
 801326a:	d206      	bcs.n	801327a <tcp_write+0x14e>
 801326c:	4b67      	ldr	r3, [pc, #412]	@ (801340c <tcp_write+0x2e0>)
 801326e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8013272:	496b      	ldr	r1, [pc, #428]	@ (8013420 <tcp_write+0x2f4>)
 8013274:	4867      	ldr	r0, [pc, #412]	@ (8013414 <tcp_write+0x2e8>)
 8013276:	f002 fa99 	bl	80157ac <iprintf>
      seg = last_unsent;
 801327a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801327c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801327e:	8a7b      	ldrh	r3, [r7, #18]
 8013280:	88fa      	ldrh	r2, [r7, #6]
 8013282:	4293      	cmp	r3, r2
 8013284:	bf28      	it	cs
 8013286:	4613      	movcs	r3, r2
 8013288:	b29b      	uxth	r3, r3
 801328a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801328c:	4293      	cmp	r3, r2
 801328e:	bf28      	it	cs
 8013290:	4613      	movcs	r3, r2
 8013292:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8013294:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013298:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801329a:	4413      	add	r3, r2
 801329c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80132a0:	8a7a      	ldrh	r2, [r7, #18]
 80132a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80132aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80132ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80132ae:	1ad3      	subs	r3, r2, r3
 80132b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80132b2:	8a7b      	ldrh	r3, [r7, #18]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00b      	beq.n	80132d0 <tcp_write+0x1a4>
 80132b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80132bc:	88fb      	ldrh	r3, [r7, #6]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d006      	beq.n	80132d0 <tcp_write+0x1a4>
 80132c2:	4b52      	ldr	r3, [pc, #328]	@ (801340c <tcp_write+0x2e0>)
 80132c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132c8:	4956      	ldr	r1, [pc, #344]	@ (8013424 <tcp_write+0x2f8>)
 80132ca:	4852      	ldr	r0, [pc, #328]	@ (8013414 <tcp_write+0x2e8>)
 80132cc:	f002 fa6e 	bl	80157ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80132d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80132d4:	88fb      	ldrh	r3, [r7, #6]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	f080 8167 	bcs.w	80135aa <tcp_write+0x47e>
 80132dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f000 8163 	beq.w	80135aa <tcp_write+0x47e>
 80132e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132e6:	891b      	ldrh	r3, [r3, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	f000 815e 	beq.w	80135aa <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80132ee:	88fa      	ldrh	r2, [r7, #6]
 80132f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80132f4:	1ad2      	subs	r2, r2, r3
 80132f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80132f8:	4293      	cmp	r3, r2
 80132fa:	bfa8      	it	ge
 80132fc:	4613      	movge	r3, r2
 80132fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013302:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013304:	797b      	ldrb	r3, [r7, #5]
 8013306:	f003 0301 	and.w	r3, r3, #1
 801330a:	2b00      	cmp	r3, #0
 801330c:	d027      	beq.n	801335e <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801330e:	f107 0012 	add.w	r0, r7, #18
 8013312:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013314:	8bf9      	ldrh	r1, [r7, #30]
 8013316:	2301      	movs	r3, #1
 8013318:	9302      	str	r3, [sp, #8]
 801331a:	797b      	ldrb	r3, [r7, #5]
 801331c:	9301      	str	r3, [sp, #4]
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	4603      	mov	r3, r0
 8013324:	2000      	movs	r0, #0
 8013326:	f7ff fe0d 	bl	8012f44 <tcp_pbuf_prealloc>
 801332a:	6578      	str	r0, [r7, #84]	@ 0x54
 801332c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801332e:	2b00      	cmp	r3, #0
 8013330:	f000 8225 	beq.w	801377e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013336:	6858      	ldr	r0, [r3, #4]
 8013338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801333c:	68ba      	ldr	r2, [r7, #8]
 801333e:	4413      	add	r3, r2
 8013340:	8bfa      	ldrh	r2, [r7, #30]
 8013342:	4619      	mov	r1, r3
 8013344:	f002 fb63 	bl	8015a0e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013348:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801334a:	f7fa ff29 	bl	800e1a0 <pbuf_clen>
 801334e:	4603      	mov	r3, r0
 8013350:	461a      	mov	r2, r3
 8013352:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013356:	4413      	add	r3, r2
 8013358:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801335c:	e041      	b.n	80133e2 <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	637b      	str	r3, [r7, #52]	@ 0x34
 8013364:	e002      	b.n	801336c <tcp_write+0x240>
 8013366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	637b      	str	r3, [r7, #52]	@ 0x34
 801336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d1f8      	bne.n	8013366 <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013376:	7b1b      	ldrb	r3, [r3, #12]
 8013378:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d115      	bne.n	80133ac <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013386:	8952      	ldrh	r2, [r2, #10]
 8013388:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801338a:	68ba      	ldr	r2, [r7, #8]
 801338c:	429a      	cmp	r2, r3
 801338e:	d10d      	bne.n	80133ac <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013390:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013394:	2b00      	cmp	r3, #0
 8013396:	d006      	beq.n	80133a6 <tcp_write+0x27a>
 8013398:	4b1c      	ldr	r3, [pc, #112]	@ (801340c <tcp_write+0x2e0>)
 801339a:	f240 2231 	movw	r2, #561	@ 0x231
 801339e:	4922      	ldr	r1, [pc, #136]	@ (8013428 <tcp_write+0x2fc>)
 80133a0:	481c      	ldr	r0, [pc, #112]	@ (8013414 <tcp_write+0x2e8>)
 80133a2:	f002 fa03 	bl	80157ac <iprintf>
          extendlen = seglen;
 80133a6:	8bfb      	ldrh	r3, [r7, #30]
 80133a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80133aa:	e01a      	b.n	80133e2 <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80133ac:	8bfb      	ldrh	r3, [r7, #30]
 80133ae:	2201      	movs	r2, #1
 80133b0:	4619      	mov	r1, r3
 80133b2:	2000      	movs	r0, #0
 80133b4:	f7fa fb82 	bl	800dabc <pbuf_alloc>
 80133b8:	6578      	str	r0, [r7, #84]	@ 0x54
 80133ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f000 81e0 	beq.w	8013782 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80133c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80133c6:	68ba      	ldr	r2, [r7, #8]
 80133c8:	441a      	add	r2, r3
 80133ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80133ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80133d0:	f7fa fee6 	bl	800e1a0 <pbuf_clen>
 80133d4:	4603      	mov	r3, r0
 80133d6:	461a      	mov	r2, r3
 80133d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80133dc:	4413      	add	r3, r2
 80133de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80133e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80133e6:	8bfb      	ldrh	r3, [r7, #30]
 80133e8:	4413      	add	r3, r2
 80133ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80133ee:	e0dc      	b.n	80135aa <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	f000 80d7 	beq.w	80135aa <tcp_write+0x47e>
 80133fc:	4b03      	ldr	r3, [pc, #12]	@ (801340c <tcp_write+0x2e0>)
 80133fe:	f240 224a 	movw	r2, #586	@ 0x24a
 8013402:	490a      	ldr	r1, [pc, #40]	@ (801342c <tcp_write+0x300>)
 8013404:	4803      	ldr	r0, [pc, #12]	@ (8013414 <tcp_write+0x2e8>)
 8013406:	f002 f9d1 	bl	80157ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801340a:	e0ce      	b.n	80135aa <tcp_write+0x47e>
 801340c:	08018880 	.word	0x08018880
 8013410:	08018a58 	.word	0x08018a58
 8013414:	0801890c 	.word	0x0801890c
 8013418:	08018a70 	.word	0x08018a70
 801341c:	08018aa4 	.word	0x08018aa4
 8013420:	08018abc 	.word	0x08018abc
 8013424:	08018adc 	.word	0x08018adc
 8013428:	08018afc 	.word	0x08018afc
 801342c:	08018b28 	.word	0x08018b28
    struct pbuf *p;
    u16_t left = len - pos;
 8013430:	88fa      	ldrh	r2, [r7, #6]
 8013432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013436:	1ad3      	subs	r3, r2, r3
 8013438:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801343a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801343e:	b29b      	uxth	r3, r3
 8013440:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013446:	8b7a      	ldrh	r2, [r7, #26]
 8013448:	8bbb      	ldrh	r3, [r7, #28]
 801344a:	4293      	cmp	r3, r2
 801344c:	bf28      	it	cs
 801344e:	4613      	movcs	r3, r2
 8013450:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013452:	797b      	ldrb	r3, [r7, #5]
 8013454:	f003 0301 	and.w	r3, r3, #1
 8013458:	2b00      	cmp	r3, #0
 801345a:	d036      	beq.n	80134ca <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801345c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013460:	b29a      	uxth	r2, r3
 8013462:	8b3b      	ldrh	r3, [r7, #24]
 8013464:	4413      	add	r3, r2
 8013466:	b299      	uxth	r1, r3
 8013468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801346a:	2b00      	cmp	r3, #0
 801346c:	bf0c      	ite	eq
 801346e:	2301      	moveq	r3, #1
 8013470:	2300      	movne	r3, #0
 8013472:	b2db      	uxtb	r3, r3
 8013474:	f107 0012 	add.w	r0, r7, #18
 8013478:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801347a:	9302      	str	r3, [sp, #8]
 801347c:	797b      	ldrb	r3, [r7, #5]
 801347e:	9301      	str	r3, [sp, #4]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	4603      	mov	r3, r0
 8013486:	2036      	movs	r0, #54	@ 0x36
 8013488:	f7ff fd5c 	bl	8012f44 <tcp_pbuf_prealloc>
 801348c:	6338      	str	r0, [r7, #48]	@ 0x30
 801348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013490:	2b00      	cmp	r3, #0
 8013492:	f000 8178 	beq.w	8013786 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013498:	895b      	ldrh	r3, [r3, #10]
 801349a:	8b3a      	ldrh	r2, [r7, #24]
 801349c:	429a      	cmp	r2, r3
 801349e:	d906      	bls.n	80134ae <tcp_write+0x382>
 80134a0:	4b8c      	ldr	r3, [pc, #560]	@ (80136d4 <tcp_write+0x5a8>)
 80134a2:	f240 2266 	movw	r2, #614	@ 0x266
 80134a6:	498c      	ldr	r1, [pc, #560]	@ (80136d8 <tcp_write+0x5ac>)
 80134a8:	488c      	ldr	r0, [pc, #560]	@ (80136dc <tcp_write+0x5b0>)
 80134aa:	f002 f97f 	bl	80157ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80134ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b0:	685a      	ldr	r2, [r3, #4]
 80134b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80134b6:	18d0      	adds	r0, r2, r3
 80134b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80134bc:	68ba      	ldr	r2, [r7, #8]
 80134be:	4413      	add	r3, r2
 80134c0:	8b3a      	ldrh	r2, [r7, #24]
 80134c2:	4619      	mov	r1, r3
 80134c4:	f002 faa3 	bl	8015a0e <memcpy>
 80134c8:	e02f      	b.n	801352a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80134ca:	8a7b      	ldrh	r3, [r7, #18]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d006      	beq.n	80134de <tcp_write+0x3b2>
 80134d0:	4b80      	ldr	r3, [pc, #512]	@ (80136d4 <tcp_write+0x5a8>)
 80134d2:	f240 2271 	movw	r2, #625	@ 0x271
 80134d6:	4982      	ldr	r1, [pc, #520]	@ (80136e0 <tcp_write+0x5b4>)
 80134d8:	4880      	ldr	r0, [pc, #512]	@ (80136dc <tcp_write+0x5b0>)
 80134da:	f002 f967 	bl	80157ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80134de:	8b3b      	ldrh	r3, [r7, #24]
 80134e0:	2201      	movs	r2, #1
 80134e2:	4619      	mov	r1, r3
 80134e4:	2036      	movs	r0, #54	@ 0x36
 80134e6:	f7fa fae9 	bl	800dabc <pbuf_alloc>
 80134ea:	6178      	str	r0, [r7, #20]
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 814b 	beq.w	801378a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80134f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80134f8:	68ba      	ldr	r2, [r7, #8]
 80134fa:	441a      	add	r2, r3
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013500:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013504:	b29b      	uxth	r3, r3
 8013506:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801350a:	4619      	mov	r1, r3
 801350c:	2036      	movs	r0, #54	@ 0x36
 801350e:	f7fa fad5 	bl	800dabc <pbuf_alloc>
 8013512:	6338      	str	r0, [r7, #48]	@ 0x30
 8013514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013516:	2b00      	cmp	r3, #0
 8013518:	d103      	bne.n	8013522 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801351a:	6978      	ldr	r0, [r7, #20]
 801351c:	f7fa fdb2 	bl	800e084 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013520:	e136      	b.n	8013790 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013522:	6979      	ldr	r1, [r7, #20]
 8013524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013526:	f7fa fe7b 	bl	800e220 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801352a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801352c:	f7fa fe38 	bl	800e1a0 <pbuf_clen>
 8013530:	4603      	mov	r3, r0
 8013532:	461a      	mov	r2, r3
 8013534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013538:	4413      	add	r3, r2
 801353a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801353e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013542:	2b10      	cmp	r3, #16
 8013544:	d903      	bls.n	801354e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013546:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013548:	f7fa fd9c 	bl	800e084 <pbuf_free>
      goto memerr;
 801354c:	e120      	b.n	8013790 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013556:	441a      	add	r2, r3
 8013558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	4613      	mov	r3, r2
 8013560:	2200      	movs	r2, #0
 8013562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f7ff fc51 	bl	8012e0c <tcp_create_segment>
 801356a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801356c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801356e:	2b00      	cmp	r3, #0
 8013570:	f000 810d 	beq.w	801378e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013576:	2b00      	cmp	r3, #0
 8013578:	d102      	bne.n	8013580 <tcp_write+0x454>
      queue = seg;
 801357a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801357c:	647b      	str	r3, [r7, #68]	@ 0x44
 801357e:	e00c      	b.n	801359a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013582:	2b00      	cmp	r3, #0
 8013584:	d106      	bne.n	8013594 <tcp_write+0x468>
 8013586:	4b53      	ldr	r3, [pc, #332]	@ (80136d4 <tcp_write+0x5a8>)
 8013588:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801358c:	4955      	ldr	r1, [pc, #340]	@ (80136e4 <tcp_write+0x5b8>)
 801358e:	4853      	ldr	r0, [pc, #332]	@ (80136dc <tcp_write+0x5b0>)
 8013590:	f002 f90c 	bl	80157ac <iprintf>
      prev_seg->next = seg;
 8013594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013598:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801359a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801359c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801359e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80135a2:	8b3b      	ldrh	r3, [r7, #24]
 80135a4:	4413      	add	r3, r2
 80135a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80135aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80135ae:	88fb      	ldrh	r3, [r7, #6]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	f4ff af3d 	bcc.w	8013430 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80135b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d02c      	beq.n	8013616 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80135bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135c2:	e01e      	b.n	8013602 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80135c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c6:	891a      	ldrh	r2, [r3, #8]
 80135c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80135ca:	4413      	add	r3, r2
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80135d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d110      	bne.n	80135fc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80135da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135e0:	8952      	ldrh	r2, [r2, #10]
 80135e2:	4413      	add	r3, r2
 80135e4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80135e6:	68b9      	ldr	r1, [r7, #8]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f002 fa10 	bl	8015a0e <memcpy>
        p->len += oversize_used;
 80135ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f0:	895a      	ldrh	r2, [r3, #10]
 80135f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80135f4:	4413      	add	r3, r2
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80135fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013604:	2b00      	cmp	r3, #0
 8013606:	d1dd      	bne.n	80135c4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8013608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801360a:	891a      	ldrh	r2, [r3, #8]
 801360c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801360e:	4413      	add	r3, r2
 8013610:	b29a      	uxth	r2, r3
 8013612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013614:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013616:	8a7a      	ldrh	r2, [r7, #18]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013620:	2b00      	cmp	r3, #0
 8013622:	d018      	beq.n	8013656 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013626:	2b00      	cmp	r3, #0
 8013628:	d106      	bne.n	8013638 <tcp_write+0x50c>
 801362a:	4b2a      	ldr	r3, [pc, #168]	@ (80136d4 <tcp_write+0x5a8>)
 801362c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8013630:	492d      	ldr	r1, [pc, #180]	@ (80136e8 <tcp_write+0x5bc>)
 8013632:	482a      	ldr	r0, [pc, #168]	@ (80136dc <tcp_write+0x5b0>)
 8013634:	f002 f8ba 	bl	80157ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801363e:	4618      	mov	r0, r3
 8013640:	f7fa fdee 	bl	800e220 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013646:	891a      	ldrh	r2, [r3, #8]
 8013648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801364a:	891b      	ldrh	r3, [r3, #8]
 801364c:	4413      	add	r3, r2
 801364e:	b29a      	uxth	r2, r3
 8013650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013652:	811a      	strh	r2, [r3, #8]
 8013654:	e037      	b.n	80136c6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8013656:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013658:	2b00      	cmp	r3, #0
 801365a:	d034      	beq.n	80136c6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801365c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801365e:	2b00      	cmp	r3, #0
 8013660:	d003      	beq.n	801366a <tcp_write+0x53e>
 8013662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <tcp_write+0x54c>
 801366a:	4b1a      	ldr	r3, [pc, #104]	@ (80136d4 <tcp_write+0x5a8>)
 801366c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8013670:	491e      	ldr	r1, [pc, #120]	@ (80136ec <tcp_write+0x5c0>)
 8013672:	481a      	ldr	r0, [pc, #104]	@ (80136dc <tcp_write+0x5b0>)
 8013674:	f002 f89a 	bl	80157ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801367e:	e009      	b.n	8013694 <tcp_write+0x568>
      p->tot_len += extendlen;
 8013680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013682:	891a      	ldrh	r2, [r3, #8]
 8013684:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013686:	4413      	add	r3, r2
 8013688:	b29a      	uxth	r2, r3
 801368a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801368c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1f1      	bne.n	8013680 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369e:	891a      	ldrh	r2, [r3, #8]
 80136a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136a2:	4413      	add	r3, r2
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80136aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ac:	895a      	ldrh	r2, [r3, #10]
 80136ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136b0:	4413      	add	r3, r2
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80136b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136ba:	891a      	ldrh	r2, [r3, #8]
 80136bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136be:	4413      	add	r3, r2
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80136c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d111      	bne.n	80136f0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80136d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80136d2:	e010      	b.n	80136f6 <tcp_write+0x5ca>
 80136d4:	08018880 	.word	0x08018880
 80136d8:	08018b58 	.word	0x08018b58
 80136dc:	0801890c 	.word	0x0801890c
 80136e0:	08018b98 	.word	0x08018b98
 80136e4:	08018ba8 	.word	0x08018ba8
 80136e8:	08018bbc 	.word	0x08018bbc
 80136ec:	08018bf4 	.word	0x08018bf4
  } else {
    last_unsent->next = queue;
 80136f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80136f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80136fa:	88fb      	ldrh	r3, [r7, #6]
 80136fc:	441a      	add	r2, r3
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013708:	88fb      	ldrh	r3, [r7, #6]
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	b29a      	uxth	r2, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801371a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00e      	beq.n	8013746 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10a      	bne.n	8013746 <tcp_write+0x61a>
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013734:	2b00      	cmp	r3, #0
 8013736:	d106      	bne.n	8013746 <tcp_write+0x61a>
 8013738:	4b2c      	ldr	r3, [pc, #176]	@ (80137ec <tcp_write+0x6c0>)
 801373a:	f240 3212 	movw	r2, #786	@ 0x312
 801373e:	492c      	ldr	r1, [pc, #176]	@ (80137f0 <tcp_write+0x6c4>)
 8013740:	482c      	ldr	r0, [pc, #176]	@ (80137f4 <tcp_write+0x6c8>)
 8013742:	f002 f833 	bl	80157ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013748:	2b00      	cmp	r3, #0
 801374a:	d016      	beq.n	801377a <tcp_write+0x64e>
 801374c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d012      	beq.n	801377a <tcp_write+0x64e>
 8013754:	797b      	ldrb	r3, [r7, #5]
 8013756:	f003 0302 	and.w	r3, r3, #2
 801375a:	2b00      	cmp	r3, #0
 801375c:	d10d      	bne.n	801377a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801375e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	899b      	ldrh	r3, [r3, #12]
 8013764:	b29c      	uxth	r4, r3
 8013766:	2008      	movs	r0, #8
 8013768:	f7f6 fcf0 	bl	800a14c <lwip_htons>
 801376c:	4603      	mov	r3, r0
 801376e:	461a      	mov	r2, r3
 8013770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	4322      	orrs	r2, r4
 8013776:	b292      	uxth	r2, r2
 8013778:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	e031      	b.n	80137e2 <tcp_write+0x6b6>
          goto memerr;
 801377e:	bf00      	nop
 8013780:	e006      	b.n	8013790 <tcp_write+0x664>
            goto memerr;
 8013782:	bf00      	nop
 8013784:	e004      	b.n	8013790 <tcp_write+0x664>
        goto memerr;
 8013786:	bf00      	nop
 8013788:	e002      	b.n	8013790 <tcp_write+0x664>
        goto memerr;
 801378a:	bf00      	nop
 801378c:	e000      	b.n	8013790 <tcp_write+0x664>
      goto memerr;
 801378e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	8b5b      	ldrh	r3, [r3, #26]
 8013794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013798:	b29a      	uxth	r2, r3
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d002      	beq.n	80137aa <tcp_write+0x67e>
    pbuf_free(concat_p);
 80137a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80137a6:	f7fa fc6d 	bl	800e084 <pbuf_free>
  }
  if (queue != NULL) {
 80137aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 80137b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80137b2:	f7fc fb61 	bl	800fe78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00e      	beq.n	80137de <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <tcp_write+0x6b2>
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d106      	bne.n	80137de <tcp_write+0x6b2>
 80137d0:	4b06      	ldr	r3, [pc, #24]	@ (80137ec <tcp_write+0x6c0>)
 80137d2:	f240 3227 	movw	r2, #807	@ 0x327
 80137d6:	4906      	ldr	r1, [pc, #24]	@ (80137f0 <tcp_write+0x6c4>)
 80137d8:	4806      	ldr	r0, [pc, #24]	@ (80137f4 <tcp_write+0x6c8>)
 80137da:	f001 ffe7 	bl	80157ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80137de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	375c      	adds	r7, #92	@ 0x5c
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd90      	pop	{r4, r7, pc}
 80137ea:	bf00      	nop
 80137ec:	08018880 	.word	0x08018880
 80137f0:	08018c2c 	.word	0x08018c2c
 80137f4:	0801890c 	.word	0x0801890c

080137f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80137f8:	b590      	push	{r4, r7, lr}
 80137fa:	b08b      	sub	sp, #44	@ 0x2c
 80137fc:	af02      	add	r7, sp, #8
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013804:	2300      	movs	r3, #0
 8013806:	61fb      	str	r3, [r7, #28]
 8013808:	2300      	movs	r3, #0
 801380a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801380c:	2300      	movs	r3, #0
 801380e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d106      	bne.n	8013824 <tcp_split_unsent_seg+0x2c>
 8013816:	4b95      	ldr	r3, [pc, #596]	@ (8013a6c <tcp_split_unsent_seg+0x274>)
 8013818:	f240 324b 	movw	r2, #843	@ 0x34b
 801381c:	4994      	ldr	r1, [pc, #592]	@ (8013a70 <tcp_split_unsent_seg+0x278>)
 801381e:	4895      	ldr	r0, [pc, #596]	@ (8013a74 <tcp_split_unsent_seg+0x27c>)
 8013820:	f001 ffc4 	bl	80157ac <iprintf>

  useg = pcb->unsent;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013828:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d102      	bne.n	8013836 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013830:	f04f 33ff 	mov.w	r3, #4294967295
 8013834:	e116      	b.n	8013a64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013836:	887b      	ldrh	r3, [r7, #2]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d109      	bne.n	8013850 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801383c:	4b8b      	ldr	r3, [pc, #556]	@ (8013a6c <tcp_split_unsent_seg+0x274>)
 801383e:	f240 3253 	movw	r2, #851	@ 0x353
 8013842:	498d      	ldr	r1, [pc, #564]	@ (8013a78 <tcp_split_unsent_seg+0x280>)
 8013844:	488b      	ldr	r0, [pc, #556]	@ (8013a74 <tcp_split_unsent_seg+0x27c>)
 8013846:	f001 ffb1 	bl	80157ac <iprintf>
    return ERR_VAL;
 801384a:	f06f 0305 	mvn.w	r3, #5
 801384e:	e109      	b.n	8013a64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	891b      	ldrh	r3, [r3, #8]
 8013854:	887a      	ldrh	r2, [r7, #2]
 8013856:	429a      	cmp	r2, r3
 8013858:	d301      	bcc.n	801385e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801385a:	2300      	movs	r3, #0
 801385c:	e102      	b.n	8013a64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013862:	887a      	ldrh	r2, [r7, #2]
 8013864:	429a      	cmp	r2, r3
 8013866:	d906      	bls.n	8013876 <tcp_split_unsent_seg+0x7e>
 8013868:	4b80      	ldr	r3, [pc, #512]	@ (8013a6c <tcp_split_unsent_seg+0x274>)
 801386a:	f240 325b 	movw	r2, #859	@ 0x35b
 801386e:	4983      	ldr	r1, [pc, #524]	@ (8013a7c <tcp_split_unsent_seg+0x284>)
 8013870:	4880      	ldr	r0, [pc, #512]	@ (8013a74 <tcp_split_unsent_seg+0x27c>)
 8013872:	f001 ff9b 	bl	80157ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	891b      	ldrh	r3, [r3, #8]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d106      	bne.n	801388c <tcp_split_unsent_seg+0x94>
 801387e:	4b7b      	ldr	r3, [pc, #492]	@ (8013a6c <tcp_split_unsent_seg+0x274>)
 8013880:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8013884:	497e      	ldr	r1, [pc, #504]	@ (8013a80 <tcp_split_unsent_seg+0x288>)
 8013886:	487b      	ldr	r0, [pc, #492]	@ (8013a74 <tcp_split_unsent_seg+0x27c>)
 8013888:	f001 ff90 	bl	80157ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	7a9b      	ldrb	r3, [r3, #10]
 8013890:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013892:	7bfb      	ldrb	r3, [r7, #15]
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	b2db      	uxtb	r3, r3
 8013898:	f003 0304 	and.w	r3, r3, #4
 801389c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	891a      	ldrh	r2, [r3, #8]
 80138a2:	887b      	ldrh	r3, [r7, #2]
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80138a8:	7bbb      	ldrb	r3, [r7, #14]
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	89bb      	ldrh	r3, [r7, #12]
 80138ae:	4413      	add	r3, r2
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80138b6:	4619      	mov	r1, r3
 80138b8:	2036      	movs	r0, #54	@ 0x36
 80138ba:	f7fa f8ff 	bl	800dabc <pbuf_alloc>
 80138be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	f000 80b7 	beq.w	8013a36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	891a      	ldrh	r2, [r3, #8]
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	891b      	ldrh	r3, [r3, #8]
 80138d2:	1ad3      	subs	r3, r2, r3
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	887b      	ldrh	r3, [r7, #2]
 80138d8:	4413      	add	r3, r2
 80138da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	6858      	ldr	r0, [r3, #4]
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	7bbb      	ldrb	r3, [r7, #14]
 80138e6:	18d1      	adds	r1, r2, r3
 80138e8:	897b      	ldrh	r3, [r7, #10]
 80138ea:	89ba      	ldrh	r2, [r7, #12]
 80138ec:	f7fa fdc0 	bl	800e470 <pbuf_copy_partial>
 80138f0:	4603      	mov	r3, r0
 80138f2:	461a      	mov	r2, r3
 80138f4:	89bb      	ldrh	r3, [r7, #12]
 80138f6:	4293      	cmp	r3, r2
 80138f8:	f040 809f 	bne.w	8013a3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	899b      	ldrh	r3, [r3, #12]
 8013902:	b29b      	uxth	r3, r3
 8013904:	4618      	mov	r0, r3
 8013906:	f7f6 fc21 	bl	800a14c <lwip_htons>
 801390a:	4603      	mov	r3, r0
 801390c:	b2db      	uxtb	r3, r3
 801390e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013912:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013914:	2300      	movs	r3, #0
 8013916:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013918:	7efb      	ldrb	r3, [r7, #27]
 801391a:	f003 0308 	and.w	r3, r3, #8
 801391e:	2b00      	cmp	r3, #0
 8013920:	d007      	beq.n	8013932 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013922:	7efb      	ldrb	r3, [r7, #27]
 8013924:	f023 0308 	bic.w	r3, r3, #8
 8013928:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801392a:	7ebb      	ldrb	r3, [r7, #26]
 801392c:	f043 0308 	orr.w	r3, r3, #8
 8013930:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013932:	7efb      	ldrb	r3, [r7, #27]
 8013934:	f003 0301 	and.w	r3, r3, #1
 8013938:	2b00      	cmp	r3, #0
 801393a:	d007      	beq.n	801394c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801393c:	7efb      	ldrb	r3, [r7, #27]
 801393e:	f023 0301 	bic.w	r3, r3, #1
 8013942:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013944:	7ebb      	ldrb	r3, [r7, #26]
 8013946:	f043 0301 	orr.w	r3, r3, #1
 801394a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	4618      	mov	r0, r3
 8013954:	f7f6 fc0f 	bl	800a176 <lwip_htonl>
 8013958:	4602      	mov	r2, r0
 801395a:	887b      	ldrh	r3, [r7, #2]
 801395c:	18d1      	adds	r1, r2, r3
 801395e:	7eba      	ldrb	r2, [r7, #26]
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	460b      	mov	r3, r1
 8013966:	6939      	ldr	r1, [r7, #16]
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7ff fa4f 	bl	8012e0c <tcp_create_segment>
 801396e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d063      	beq.n	8013a3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	f7fa fc10 	bl	800e1a0 <pbuf_clen>
 8013980:	4603      	mov	r3, r0
 8013982:	461a      	mov	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801398a:	1a9b      	subs	r3, r3, r2
 801398c:	b29a      	uxth	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	6858      	ldr	r0, [r3, #4]
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	891a      	ldrh	r2, [r3, #8]
 801399e:	89bb      	ldrh	r3, [r7, #12]
 80139a0:	1ad3      	subs	r3, r2, r3
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	4619      	mov	r1, r3
 80139a6:	f7fa f9e9 	bl	800dd7c <pbuf_realloc>
  useg->len -= remainder;
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	891a      	ldrh	r2, [r3, #8]
 80139ae:	89bb      	ldrh	r3, [r7, #12]
 80139b0:	1ad3      	subs	r3, r2, r3
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	899b      	ldrh	r3, [r3, #12]
 80139be:	b29c      	uxth	r4, r3
 80139c0:	7efb      	ldrb	r3, [r7, #27]
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7f6 fbc1 	bl	800a14c <lwip_htons>
 80139ca:	4603      	mov	r3, r0
 80139cc:	461a      	mov	r2, r3
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	4322      	orrs	r2, r4
 80139d4:	b292      	uxth	r2, r2
 80139d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fa fbdf 	bl	800e1a0 <pbuf_clen>
 80139e2:	4603      	mov	r3, r0
 80139e4:	461a      	mov	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139ec:	4413      	add	r3, r2
 80139ee:	b29a      	uxth	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fa fbd0 	bl	800e1a0 <pbuf_clen>
 8013a00:	4603      	mov	r3, r0
 8013a02:	461a      	mov	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a0a:	4413      	add	r3, r2
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	69fa      	ldr	r2, [r7, #28]
 8013a20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d103      	bne.n	8013a32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013a32:	2300      	movs	r3, #0
 8013a34:	e016      	b.n	8013a64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013a36:	bf00      	nop
 8013a38:	e002      	b.n	8013a40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a3a:	bf00      	nop
 8013a3c:	e000      	b.n	8013a40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d006      	beq.n	8013a54 <tcp_split_unsent_seg+0x25c>
 8013a46:	4b09      	ldr	r3, [pc, #36]	@ (8013a6c <tcp_split_unsent_seg+0x274>)
 8013a48:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013a4c:	490d      	ldr	r1, [pc, #52]	@ (8013a84 <tcp_split_unsent_seg+0x28c>)
 8013a4e:	4809      	ldr	r0, [pc, #36]	@ (8013a74 <tcp_split_unsent_seg+0x27c>)
 8013a50:	f001 feac 	bl	80157ac <iprintf>
  if (p != NULL) {
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d002      	beq.n	8013a60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013a5a:	6938      	ldr	r0, [r7, #16]
 8013a5c:	f7fa fb12 	bl	800e084 <pbuf_free>
  }

  return ERR_MEM;
 8013a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3724      	adds	r7, #36	@ 0x24
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd90      	pop	{r4, r7, pc}
 8013a6c:	08018880 	.word	0x08018880
 8013a70:	08018c4c 	.word	0x08018c4c
 8013a74:	0801890c 	.word	0x0801890c
 8013a78:	08018c70 	.word	0x08018c70
 8013a7c:	08018c94 	.word	0x08018c94
 8013a80:	08018ca4 	.word	0x08018ca4
 8013a84:	08018cb4 	.word	0x08018cb4

08013a88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013a88:	b590      	push	{r4, r7, lr}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d106      	bne.n	8013aa4 <tcp_send_fin+0x1c>
 8013a96:	4b21      	ldr	r3, [pc, #132]	@ (8013b1c <tcp_send_fin+0x94>)
 8013a98:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013a9c:	4920      	ldr	r1, [pc, #128]	@ (8013b20 <tcp_send_fin+0x98>)
 8013a9e:	4821      	ldr	r0, [pc, #132]	@ (8013b24 <tcp_send_fin+0x9c>)
 8013aa0:	f001 fe84 	bl	80157ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d02e      	beq.n	8013b0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ab0:	60fb      	str	r3, [r7, #12]
 8013ab2:	e002      	b.n	8013aba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1f8      	bne.n	8013ab4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	68db      	ldr	r3, [r3, #12]
 8013ac6:	899b      	ldrh	r3, [r3, #12]
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7f6 fb3e 	bl	800a14c <lwip_htons>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	b2db      	uxtb	r3, r3
 8013ad4:	f003 0307 	and.w	r3, r3, #7
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d116      	bne.n	8013b0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	899b      	ldrh	r3, [r3, #12]
 8013ae2:	b29c      	uxth	r4, r3
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	f7f6 fb31 	bl	800a14c <lwip_htons>
 8013aea:	4603      	mov	r3, r0
 8013aec:	461a      	mov	r2, r3
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	4322      	orrs	r2, r4
 8013af4:	b292      	uxth	r2, r2
 8013af6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	8b5b      	ldrh	r3, [r3, #26]
 8013afc:	f043 0320 	orr.w	r3, r3, #32
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013b06:	2300      	movs	r3, #0
 8013b08:	e004      	b.n	8013b14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013b0a:	2101      	movs	r1, #1
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 f80b 	bl	8013b28 <tcp_enqueue_flags>
 8013b12:	4603      	mov	r3, r0
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3714      	adds	r7, #20
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd90      	pop	{r4, r7, pc}
 8013b1c:	08018880 	.word	0x08018880
 8013b20:	08018cc0 	.word	0x08018cc0
 8013b24:	0801890c 	.word	0x0801890c

08013b28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b08a      	sub	sp, #40	@ 0x28
 8013b2c:	af02      	add	r7, sp, #8
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	460b      	mov	r3, r1
 8013b32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013b34:	2300      	movs	r3, #0
 8013b36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013b3c:	78fb      	ldrb	r3, [r7, #3]
 8013b3e:	f003 0303 	and.w	r3, r3, #3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d106      	bne.n	8013b54 <tcp_enqueue_flags+0x2c>
 8013b46:	4b67      	ldr	r3, [pc, #412]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013b48:	f240 4211 	movw	r2, #1041	@ 0x411
 8013b4c:	4966      	ldr	r1, [pc, #408]	@ (8013ce8 <tcp_enqueue_flags+0x1c0>)
 8013b4e:	4867      	ldr	r0, [pc, #412]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013b50:	f001 fe2c 	bl	80157ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d106      	bne.n	8013b68 <tcp_enqueue_flags+0x40>
 8013b5a:	4b62      	ldr	r3, [pc, #392]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013b5c:	f240 4213 	movw	r2, #1043	@ 0x413
 8013b60:	4963      	ldr	r1, [pc, #396]	@ (8013cf0 <tcp_enqueue_flags+0x1c8>)
 8013b62:	4862      	ldr	r0, [pc, #392]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013b64:	f001 fe22 	bl	80157ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013b68:	78fb      	ldrb	r3, [r7, #3]
 8013b6a:	f003 0302 	and.w	r3, r3, #2
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013b72:	2301      	movs	r3, #1
 8013b74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b76:	7ffb      	ldrb	r3, [r7, #31]
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	f003 0304 	and.w	r3, r3, #4
 8013b80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b82:	7dfb      	ldrb	r3, [r7, #23]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	2036      	movs	r0, #54	@ 0x36
 8013b8e:	f7f9 ff95 	bl	800dabc <pbuf_alloc>
 8013b92:	6138      	str	r0, [r7, #16]
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d109      	bne.n	8013bae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	8b5b      	ldrh	r3, [r3, #26]
 8013b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bac:	e095      	b.n	8013cda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	895a      	ldrh	r2, [r3, #10]
 8013bb2:	7dfb      	ldrb	r3, [r7, #23]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d206      	bcs.n	8013bc8 <tcp_enqueue_flags+0xa0>
 8013bba:	4b4a      	ldr	r3, [pc, #296]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013bbc:	f240 4239 	movw	r2, #1081	@ 0x439
 8013bc0:	494c      	ldr	r1, [pc, #304]	@ (8013cf4 <tcp_enqueue_flags+0x1cc>)
 8013bc2:	484a      	ldr	r0, [pc, #296]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013bc4:	f001 fdf2 	bl	80157ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013bcc:	78fa      	ldrb	r2, [r7, #3]
 8013bce:	7ffb      	ldrb	r3, [r7, #31]
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	460b      	mov	r3, r1
 8013bd4:	6939      	ldr	r1, [r7, #16]
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f7ff f918 	bl	8012e0c <tcp_create_segment>
 8013bdc:	60f8      	str	r0, [r7, #12]
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d109      	bne.n	8013bf8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8013bf6:	e070      	b.n	8013cda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	f003 0303 	and.w	r3, r3, #3
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d006      	beq.n	8013c12 <tcp_enqueue_flags+0xea>
 8013c04:	4b37      	ldr	r3, [pc, #220]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013c06:	f240 4242 	movw	r2, #1090	@ 0x442
 8013c0a:	493b      	ldr	r1, [pc, #236]	@ (8013cf8 <tcp_enqueue_flags+0x1d0>)
 8013c0c:	4837      	ldr	r0, [pc, #220]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013c0e:	f001 fdcd 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	891b      	ldrh	r3, [r3, #8]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d006      	beq.n	8013c28 <tcp_enqueue_flags+0x100>
 8013c1a:	4b32      	ldr	r3, [pc, #200]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013c1c:	f240 4243 	movw	r2, #1091	@ 0x443
 8013c20:	4936      	ldr	r1, [pc, #216]	@ (8013cfc <tcp_enqueue_flags+0x1d4>)
 8013c22:	4832      	ldr	r0, [pc, #200]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013c24:	f001 fdc2 	bl	80157ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d103      	bne.n	8013c38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013c36:	e00d      	b.n	8013c54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c3c:	61bb      	str	r3, [r7, #24]
 8013c3e:	e002      	b.n	8013c46 <tcp_enqueue_flags+0x11e>
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	61bb      	str	r3, [r7, #24]
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d1f8      	bne.n	8013c40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013c4e:	69bb      	ldr	r3, [r7, #24]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2200      	movs	r2, #0
 8013c58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013c5c:	78fb      	ldrb	r3, [r7, #3]
 8013c5e:	f003 0302 	and.w	r3, r3, #2
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d104      	bne.n	8013c70 <tcp_enqueue_flags+0x148>
 8013c66:	78fb      	ldrb	r3, [r7, #3]
 8013c68:	f003 0301 	and.w	r3, r3, #1
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d004      	beq.n	8013c7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013c74:	1c5a      	adds	r2, r3, #1
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d006      	beq.n	8013c92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	8b5b      	ldrh	r3, [r3, #26]
 8013c88:	f043 0320 	orr.w	r3, r3, #32
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fa fa82 	bl	800e1a0 <pbuf_clen>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ca6:	4413      	add	r3, r2
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d00e      	beq.n	8013cd8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d10a      	bne.n	8013cd8 <tcp_enqueue_flags+0x1b0>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <tcp_enqueue_flags+0x1b0>
 8013cca:	4b06      	ldr	r3, [pc, #24]	@ (8013ce4 <tcp_enqueue_flags+0x1bc>)
 8013ccc:	f240 4265 	movw	r2, #1125	@ 0x465
 8013cd0:	490b      	ldr	r1, [pc, #44]	@ (8013d00 <tcp_enqueue_flags+0x1d8>)
 8013cd2:	4806      	ldr	r0, [pc, #24]	@ (8013cec <tcp_enqueue_flags+0x1c4>)
 8013cd4:	f001 fd6a 	bl	80157ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013cd8:	2300      	movs	r3, #0
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3720      	adds	r7, #32
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	08018880 	.word	0x08018880
 8013ce8:	08018cdc 	.word	0x08018cdc
 8013cec:	0801890c 	.word	0x0801890c
 8013cf0:	08018d34 	.word	0x08018d34
 8013cf4:	08018d54 	.word	0x08018d54
 8013cf8:	08018d90 	.word	0x08018d90
 8013cfc:	08018da8 	.word	0x08018da8
 8013d00:	08018dd4 	.word	0x08018dd4

08013d04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d04:	b5b0      	push	{r4, r5, r7, lr}
 8013d06:	b08a      	sub	sp, #40	@ 0x28
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 8013d0c:	f7f2 fb46 	bl	800639c <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d106      	bne.n	8013d24 <tcp_output+0x20>
 8013d16:	4b8a      	ldr	r3, [pc, #552]	@ (8013f40 <tcp_output+0x23c>)
 8013d18:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013d1c:	4989      	ldr	r1, [pc, #548]	@ (8013f44 <tcp_output+0x240>)
 8013d1e:	488a      	ldr	r0, [pc, #552]	@ (8013f48 <tcp_output+0x244>)
 8013d20:	f001 fd44 	bl	80157ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	7d1b      	ldrb	r3, [r3, #20]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d106      	bne.n	8013d3a <tcp_output+0x36>
 8013d2c:	4b84      	ldr	r3, [pc, #528]	@ (8013f40 <tcp_output+0x23c>)
 8013d2e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013d32:	4986      	ldr	r1, [pc, #536]	@ (8013f4c <tcp_output+0x248>)
 8013d34:	4884      	ldr	r0, [pc, #528]	@ (8013f48 <tcp_output+0x244>)
 8013d36:	f001 fd39 	bl	80157ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013d3a:	4b85      	ldr	r3, [pc, #532]	@ (8013f50 <tcp_output+0x24c>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d101      	bne.n	8013d48 <tcp_output+0x44>
    return ERR_OK;
 8013d44:	2300      	movs	r3, #0
 8013d46:	e1ce      	b.n	80140e6 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013d54:	4293      	cmp	r3, r2
 8013d56:	bf28      	it	cs
 8013d58:	4613      	movcs	r3, r2
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d10b      	bne.n	8013d82 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	8b5b      	ldrh	r3, [r3, #26]
 8013d6e:	f003 0302 	and.w	r3, r3, #2
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f000 81aa 	beq.w	80140cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 fdcb 	bl	8014914 <tcp_send_empty_ack>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	e1b1      	b.n	80140e6 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013d82:	6879      	ldr	r1, [r7, #4]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	3304      	adds	r3, #4
 8013d88:	461a      	mov	r2, r3
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f7ff f822 	bl	8012dd4 <tcp_route>
 8013d90:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <tcp_output+0x9a>
    return ERR_RTE;
 8013d98:	f06f 0303 	mvn.w	r3, #3
 8013d9c:	e1a3      	b.n	80140e6 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d003      	beq.n	8013dac <tcp_output+0xa8>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d111      	bne.n	8013dd0 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d002      	beq.n	8013db8 <tcp_output+0xb4>
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	3304      	adds	r3, #4
 8013db6:	e000      	b.n	8013dba <tcp_output+0xb6>
 8013db8:	2300      	movs	r3, #0
 8013dba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <tcp_output+0xc4>
      return ERR_RTE;
 8013dc2:	f06f 0303 	mvn.w	r3, #3
 8013dc6:	e18e      	b.n	80140e6 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7f6 f9cd 	bl	800a176 <lwip_htonl>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013de2:	1ad3      	subs	r3, r2, r3
 8013de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013de6:	8912      	ldrh	r2, [r2, #8]
 8013de8:	4413      	add	r3, r2
 8013dea:	69ba      	ldr	r2, [r7, #24]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d227      	bcs.n	8013e40 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013df6:	461a      	mov	r2, r3
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d114      	bne.n	8013e28 <tcp_output+0x124>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d110      	bne.n	8013e28 <tcp_output+0x124>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10b      	bne.n	8013e28 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2200      	movs	r2, #0
 8013e14:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	8b5b      	ldrh	r3, [r3, #26]
 8013e2c:	f003 0302 	and.w	r3, r3, #2
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f000 814d 	beq.w	80140d0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 fd6c 	bl	8014914 <tcp_send_empty_ack>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	e152      	b.n	80140e6 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e4c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013e4e:	6a3b      	ldr	r3, [r7, #32]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f000 811c 	beq.w	801408e <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 8013e56:	e002      	b.n	8013e5e <tcp_output+0x15a>
 8013e58:	6a3b      	ldr	r3, [r7, #32]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	623b      	str	r3, [r7, #32]
 8013e5e:	6a3b      	ldr	r3, [r7, #32]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d1f8      	bne.n	8013e58 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013e66:	e112      	b.n	801408e <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	899b      	ldrh	r3, [r3, #12]
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7f6 f96b 	bl	800a14c <lwip_htons>
 8013e76:	4603      	mov	r3, r0
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	f003 0304 	and.w	r3, r3, #4
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d006      	beq.n	8013e90 <tcp_output+0x18c>
 8013e82:	4b2f      	ldr	r3, [pc, #188]	@ (8013f40 <tcp_output+0x23c>)
 8013e84:	f240 5236 	movw	r2, #1334	@ 0x536
 8013e88:	4932      	ldr	r1, [pc, #200]	@ (8013f54 <tcp_output+0x250>)
 8013e8a:	482f      	ldr	r0, [pc, #188]	@ (8013f48 <tcp_output+0x244>)
 8013e8c:	f001 fc8e 	bl	80157ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d01f      	beq.n	8013ed8 <tcp_output+0x1d4>
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	8b5b      	ldrh	r3, [r3, #26]
 8013e9c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d119      	bne.n	8013ed8 <tcp_output+0x1d4>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d00b      	beq.n	8013ec4 <tcp_output+0x1c0>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d110      	bne.n	8013ed8 <tcp_output+0x1d4>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eba:	891a      	ldrh	r2, [r3, #8]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d209      	bcs.n	8013ed8 <tcp_output+0x1d4>
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d004      	beq.n	8013ed8 <tcp_output+0x1d4>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ed4:	2b0f      	cmp	r3, #15
 8013ed6:	d901      	bls.n	8013edc <tcp_output+0x1d8>
 8013ed8:	2301      	movs	r3, #1
 8013eda:	e000      	b.n	8013ede <tcp_output+0x1da>
 8013edc:	2300      	movs	r3, #0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d106      	bne.n	8013ef0 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	8b5b      	ldrh	r3, [r3, #26]
 8013ee6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f000 80e4 	beq.w	80140b8 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	7d1b      	ldrb	r3, [r3, #20]
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d00d      	beq.n	8013f14 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	899b      	ldrh	r3, [r3, #12]
 8013efe:	b29c      	uxth	r4, r3
 8013f00:	2010      	movs	r0, #16
 8013f02:	f7f6 f923 	bl	800a14c <lwip_htons>
 8013f06:	4603      	mov	r3, r0
 8013f08:	461a      	mov	r2, r3
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	4322      	orrs	r2, r4
 8013f10:	b292      	uxth	r2, r2
 8013f12:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	6879      	ldr	r1, [r7, #4]
 8013f18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f1a:	f000 f909 	bl	8014130 <tcp_output_segment>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d016      	beq.n	8013f58 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	8b5b      	ldrh	r3, [r3, #26]
 8013f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	835a      	strh	r2, [r3, #26]
      return err;
 8013f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f3c:	e0d3      	b.n	80140e6 <tcp_output+0x3e2>
 8013f3e:	bf00      	nop
 8013f40:	08018880 	.word	0x08018880
 8013f44:	08018dfc 	.word	0x08018dfc
 8013f48:	0801890c 	.word	0x0801890c
 8013f4c:	08018e14 	.word	0x08018e14
 8013f50:	24010690 	.word	0x24010690
 8013f54:	08018e3c 	.word	0x08018e3c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	7d1b      	ldrb	r3, [r3, #20]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d006      	beq.n	8013f76 <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	8b5b      	ldrh	r3, [r3, #26]
 8013f6c:	f023 0303 	bic.w	r3, r3, #3
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7f6 f8fa 	bl	800a176 <lwip_htonl>
 8013f82:	4604      	mov	r4, r0
 8013f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f86:	891b      	ldrh	r3, [r3, #8]
 8013f88:	461d      	mov	r5, r3
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	899b      	ldrh	r3, [r3, #12]
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7f6 f8da 	bl	800a14c <lwip_htons>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	f003 0303 	and.w	r3, r3, #3
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d001      	beq.n	8013fa8 <tcp_output+0x2a4>
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e000      	b.n	8013faa <tcp_output+0x2a6>
 8013fa8:	2300      	movs	r3, #0
 8013faa:	442b      	add	r3, r5
 8013fac:	4423      	add	r3, r4
 8013fae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	da02      	bge.n	8013fc2 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc4:	891b      	ldrh	r3, [r3, #8]
 8013fc6:	461c      	mov	r4, r3
 8013fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	899b      	ldrh	r3, [r3, #12]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7f6 f8bb 	bl	800a14c <lwip_htons>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	f003 0303 	and.w	r3, r3, #3
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d001      	beq.n	8013fe6 <tcp_output+0x2e2>
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	e000      	b.n	8013fe8 <tcp_output+0x2e4>
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	4423      	add	r3, r4
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d049      	beq.n	8014082 <tcp_output+0x37e>
      seg->next = NULL;
 8013fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d105      	bne.n	8014008 <tcp_output+0x304>
        pcb->unacked = seg;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014000:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014004:	623b      	str	r3, [r7, #32]
 8014006:	e03f      	b.n	8014088 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400a:	68db      	ldr	r3, [r3, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	4618      	mov	r0, r3
 8014010:	f7f6 f8b1 	bl	800a176 <lwip_htonl>
 8014014:	4604      	mov	r4, r0
 8014016:	6a3b      	ldr	r3, [r7, #32]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	4618      	mov	r0, r3
 801401e:	f7f6 f8aa 	bl	800a176 <lwip_htonl>
 8014022:	4603      	mov	r3, r0
 8014024:	1ae3      	subs	r3, r4, r3
 8014026:	2b00      	cmp	r3, #0
 8014028:	da24      	bge.n	8014074 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	3370      	adds	r3, #112	@ 0x70
 801402e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014030:	e002      	b.n	8014038 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d011      	beq.n	8014064 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	f7f6 f894 	bl	800a176 <lwip_htonl>
 801404e:	4604      	mov	r4, r0
 8014050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	4618      	mov	r0, r3
 8014058:	f7f6 f88d 	bl	800a176 <lwip_htonl>
 801405c:	4603      	mov	r3, r0
 801405e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014060:	2b00      	cmp	r3, #0
 8014062:	dbe6      	blt.n	8014032 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801406a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	e009      	b.n	8014088 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014078:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801407a:	6a3b      	ldr	r3, [r7, #32]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	623b      	str	r3, [r7, #32]
 8014080:	e002      	b.n	8014088 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014082:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014084:	f7fb ff0d 	bl	800fea2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801408c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014090:	2b00      	cmp	r3, #0
 8014092:	d012      	beq.n	80140ba <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	f7f6 f86b 	bl	800a176 <lwip_htonl>
 80140a0:	4602      	mov	r2, r0
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140aa:	8912      	ldrh	r2, [r2, #8]
 80140ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80140ae:	69ba      	ldr	r2, [r7, #24]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	f4bf aed9 	bcs.w	8013e68 <tcp_output+0x164>
 80140b6:	e000      	b.n	80140ba <tcp_output+0x3b6>
      break;
 80140b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d108      	bne.n	80140d4 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2200      	movs	r2, #0
 80140c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80140ca:	e004      	b.n	80140d6 <tcp_output+0x3d2>
    goto output_done;
 80140cc:	bf00      	nop
 80140ce:	e002      	b.n	80140d6 <tcp_output+0x3d2>
    goto output_done;
 80140d0:	bf00      	nop
 80140d2:	e000      	b.n	80140d6 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80140d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	8b5b      	ldrh	r3, [r3, #26]
 80140da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80140de:	b29a      	uxth	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80140e4:	2300      	movs	r3, #0
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	3728      	adds	r7, #40	@ 0x28
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bdb0      	pop	{r4, r5, r7, pc}
 80140ee:	bf00      	nop

080140f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d106      	bne.n	801410c <tcp_output_segment_busy+0x1c>
 80140fe:	4b09      	ldr	r3, [pc, #36]	@ (8014124 <tcp_output_segment_busy+0x34>)
 8014100:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014104:	4908      	ldr	r1, [pc, #32]	@ (8014128 <tcp_output_segment_busy+0x38>)
 8014106:	4809      	ldr	r0, [pc, #36]	@ (801412c <tcp_output_segment_busy+0x3c>)
 8014108:	f001 fb50 	bl	80157ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	7b9b      	ldrb	r3, [r3, #14]
 8014112:	2b01      	cmp	r3, #1
 8014114:	d001      	beq.n	801411a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014116:	2301      	movs	r3, #1
 8014118:	e000      	b.n	801411c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	08018880 	.word	0x08018880
 8014128:	08018e54 	.word	0x08018e54
 801412c:	0801890c 	.word	0x0801890c

08014130 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014130:	b5b0      	push	{r4, r5, r7, lr}
 8014132:	b08c      	sub	sp, #48	@ 0x30
 8014134:	af04      	add	r7, sp, #16
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d106      	bne.n	8014150 <tcp_output_segment+0x20>
 8014142:	4b64      	ldr	r3, [pc, #400]	@ (80142d4 <tcp_output_segment+0x1a4>)
 8014144:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014148:	4963      	ldr	r1, [pc, #396]	@ (80142d8 <tcp_output_segment+0x1a8>)
 801414a:	4864      	ldr	r0, [pc, #400]	@ (80142dc <tcp_output_segment+0x1ac>)
 801414c:	f001 fb2e 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d106      	bne.n	8014164 <tcp_output_segment+0x34>
 8014156:	4b5f      	ldr	r3, [pc, #380]	@ (80142d4 <tcp_output_segment+0x1a4>)
 8014158:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801415c:	4960      	ldr	r1, [pc, #384]	@ (80142e0 <tcp_output_segment+0x1b0>)
 801415e:	485f      	ldr	r0, [pc, #380]	@ (80142dc <tcp_output_segment+0x1ac>)
 8014160:	f001 fb24 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d106      	bne.n	8014178 <tcp_output_segment+0x48>
 801416a:	4b5a      	ldr	r3, [pc, #360]	@ (80142d4 <tcp_output_segment+0x1a4>)
 801416c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014170:	495c      	ldr	r1, [pc, #368]	@ (80142e4 <tcp_output_segment+0x1b4>)
 8014172:	485a      	ldr	r0, [pc, #360]	@ (80142dc <tcp_output_segment+0x1ac>)
 8014174:	f001 fb1a 	bl	80157ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f7ff ffb9 	bl	80140f0 <tcp_output_segment_busy>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014184:	2300      	movs	r3, #0
 8014186:	e0a1      	b.n	80142cc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	68dc      	ldr	r4, [r3, #12]
 8014190:	4610      	mov	r0, r2
 8014192:	f7f5 fff0 	bl	800a176 <lwip_htonl>
 8014196:	4603      	mov	r3, r0
 8014198:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	68dc      	ldr	r4, [r3, #12]
 80141a2:	4610      	mov	r0, r2
 80141a4:	f7f5 ffd2 	bl	800a14c <lwip_htons>
 80141a8:	4603      	mov	r3, r0
 80141aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141b0:	68ba      	ldr	r2, [r7, #8]
 80141b2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80141b4:	441a      	add	r2, r3
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	3314      	adds	r3, #20
 80141c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	7a9b      	ldrb	r3, [r3, #10]
 80141c6:	f003 0301 	and.w	r3, r3, #1
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d015      	beq.n	80141fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	3304      	adds	r3, #4
 80141d2:	461a      	mov	r2, r3
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80141da:	f7fc fa31 	bl	8010640 <tcp_eff_send_mss_netif>
 80141de:	4603      	mov	r3, r0
 80141e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80141e2:	8b7b      	ldrh	r3, [r7, #26]
 80141e4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7f5 ffc4 	bl	800a176 <lwip_htonl>
 80141ee:	4602      	mov	r2, r0
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	3304      	adds	r3, #4
 80141f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014200:	2b00      	cmp	r3, #0
 8014202:	da02      	bge.n	801420a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	2200      	movs	r2, #0
 8014208:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801420e:	2b00      	cmp	r3, #0
 8014210:	d10c      	bne.n	801422c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014212:	4b35      	ldr	r3, [pc, #212]	@ (80142e8 <tcp_output_segment+0x1b8>)
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	4618      	mov	r0, r3
 8014222:	f7f5 ffa8 	bl	800a176 <lwip_htonl>
 8014226:	4602      	mov	r2, r0
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	68da      	ldr	r2, [r3, #12]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	8959      	ldrh	r1, [r3, #10]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	8b3a      	ldrh	r2, [r7, #24]
 8014246:	1a8a      	subs	r2, r1, r2
 8014248:	b292      	uxth	r2, r2
 801424a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	8919      	ldrh	r1, [r3, #8]
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	8b3a      	ldrh	r2, [r7, #24]
 8014258:	1a8a      	subs	r2, r1, r2
 801425a:	b292      	uxth	r2, r2
 801425c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	68fa      	ldr	r2, [r7, #12]
 8014264:	68d2      	ldr	r2, [r2, #12]
 8014266:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	2200      	movs	r2, #0
 801426e:	741a      	strb	r2, [r3, #16]
 8014270:	2200      	movs	r2, #0
 8014272:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	68da      	ldr	r2, [r3, #12]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	7a9b      	ldrb	r3, [r3, #10]
 801427c:	f003 0301 	and.w	r3, r3, #1
 8014280:	2b00      	cmp	r3, #0
 8014282:	d001      	beq.n	8014288 <tcp_output_segment+0x158>
 8014284:	2318      	movs	r3, #24
 8014286:	e000      	b.n	801428a <tcp_output_segment+0x15a>
 8014288:	2314      	movs	r3, #20
 801428a:	4413      	add	r3, r2
 801428c:	69fa      	ldr	r2, [r7, #28]
 801428e:	429a      	cmp	r2, r3
 8014290:	d006      	beq.n	80142a0 <tcp_output_segment+0x170>
 8014292:	4b10      	ldr	r3, [pc, #64]	@ (80142d4 <tcp_output_segment+0x1a4>)
 8014294:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014298:	4914      	ldr	r1, [pc, #80]	@ (80142ec <tcp_output_segment+0x1bc>)
 801429a:	4810      	ldr	r0, [pc, #64]	@ (80142dc <tcp_output_segment+0x1ac>)
 801429c:	f001 fa86 	bl	80157ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6858      	ldr	r0, [r3, #4]
 80142a4:	68b9      	ldr	r1, [r7, #8]
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	1d1c      	adds	r4, r3, #4
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	7add      	ldrb	r5, [r3, #11]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	7a9b      	ldrb	r3, [r3, #10]
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	9202      	str	r2, [sp, #8]
 80142b6:	2206      	movs	r2, #6
 80142b8:	9201      	str	r2, [sp, #4]
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	462b      	mov	r3, r5
 80142be:	4622      	mov	r2, r4
 80142c0:	f7f7 fbe4 	bl	800ba8c <ip4_output_if>
 80142c4:	4603      	mov	r3, r0
 80142c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80142c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3720      	adds	r7, #32
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bdb0      	pop	{r4, r5, r7, pc}
 80142d4:	08018880 	.word	0x08018880
 80142d8:	08018e7c 	.word	0x08018e7c
 80142dc:	0801890c 	.word	0x0801890c
 80142e0:	08018e9c 	.word	0x08018e9c
 80142e4:	08018ebc 	.word	0x08018ebc
 80142e8:	24010644 	.word	0x24010644
 80142ec:	08018ee0 	.word	0x08018ee0

080142f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80142f0:	b5b0      	push	{r4, r5, r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d106      	bne.n	801430c <tcp_rexmit_rto_prepare+0x1c>
 80142fe:	4b31      	ldr	r3, [pc, #196]	@ (80143c4 <tcp_rexmit_rto_prepare+0xd4>)
 8014300:	f240 6263 	movw	r2, #1635	@ 0x663
 8014304:	4930      	ldr	r1, [pc, #192]	@ (80143c8 <tcp_rexmit_rto_prepare+0xd8>)
 8014306:	4831      	ldr	r0, [pc, #196]	@ (80143cc <tcp_rexmit_rto_prepare+0xdc>)
 8014308:	f001 fa50 	bl	80157ac <iprintf>

  if (pcb->unacked == NULL) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014314:	f06f 0305 	mvn.w	r3, #5
 8014318:	e050      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801431e:	60fb      	str	r3, [r7, #12]
 8014320:	e00b      	b.n	801433a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014322:	68f8      	ldr	r0, [r7, #12]
 8014324:	f7ff fee4 	bl	80140f0 <tcp_output_segment_busy>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d002      	beq.n	8014334 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801432e:	f06f 0305 	mvn.w	r3, #5
 8014332:	e043      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	60fb      	str	r3, [r7, #12]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d1ef      	bne.n	8014322 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f7ff fed4 	bl	80140f0 <tcp_output_segment_busy>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d002      	beq.n	8014354 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801434e:	f06f 0305 	mvn.w	r3, #5
 8014352:	e033      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8b5b      	ldrh	r3, [r3, #26]
 801436e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014372:	b29a      	uxth	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	4618      	mov	r0, r3
 8014380:	f7f5 fef9 	bl	800a176 <lwip_htonl>
 8014384:	4604      	mov	r4, r0
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	891b      	ldrh	r3, [r3, #8]
 801438a:	461d      	mov	r5, r3
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	899b      	ldrh	r3, [r3, #12]
 8014392:	b29b      	uxth	r3, r3
 8014394:	4618      	mov	r0, r3
 8014396:	f7f5 fed9 	bl	800a14c <lwip_htons>
 801439a:	4603      	mov	r3, r0
 801439c:	b2db      	uxtb	r3, r3
 801439e:	f003 0303 	and.w	r3, r3, #3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d001      	beq.n	80143aa <tcp_rexmit_rto_prepare+0xba>
 80143a6:	2301      	movs	r3, #1
 80143a8:	e000      	b.n	80143ac <tcp_rexmit_rto_prepare+0xbc>
 80143aa:	2300      	movs	r3, #0
 80143ac:	442b      	add	r3, r5
 80143ae:	18e2      	adds	r2, r4, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2200      	movs	r2, #0
 80143b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80143ba:	2300      	movs	r3, #0
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bdb0      	pop	{r4, r5, r7, pc}
 80143c4:	08018880 	.word	0x08018880
 80143c8:	08018ef4 	.word	0x08018ef4
 80143cc:	0801890c 	.word	0x0801890c

080143d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <tcp_rexmit_rto_commit+0x1c>
 80143de:	4b0d      	ldr	r3, [pc, #52]	@ (8014414 <tcp_rexmit_rto_commit+0x44>)
 80143e0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80143e4:	490c      	ldr	r1, [pc, #48]	@ (8014418 <tcp_rexmit_rto_commit+0x48>)
 80143e6:	480d      	ldr	r0, [pc, #52]	@ (801441c <tcp_rexmit_rto_commit+0x4c>)
 80143e8:	f001 f9e0 	bl	80157ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80143f2:	2bff      	cmp	r3, #255	@ 0xff
 80143f4:	d007      	beq.n	8014406 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80143fc:	3301      	adds	r3, #1
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ff fc7c 	bl	8013d04 <tcp_output>
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	08018880 	.word	0x08018880
 8014418:	08018f18 	.word	0x08018f18
 801441c:	0801890c 	.word	0x0801890c

08014420 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d106      	bne.n	801443c <tcp_rexmit_rto+0x1c>
 801442e:	4b0a      	ldr	r3, [pc, #40]	@ (8014458 <tcp_rexmit_rto+0x38>)
 8014430:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014434:	4909      	ldr	r1, [pc, #36]	@ (801445c <tcp_rexmit_rto+0x3c>)
 8014436:	480a      	ldr	r0, [pc, #40]	@ (8014460 <tcp_rexmit_rto+0x40>)
 8014438:	f001 f9b8 	bl	80157ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ff ff57 	bl	80142f0 <tcp_rexmit_rto_prepare>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d102      	bne.n	801444e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ffc1 	bl	80143d0 <tcp_rexmit_rto_commit>
  }
}
 801444e:	bf00      	nop
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	08018880 	.word	0x08018880
 801445c:	08018f3c 	.word	0x08018f3c
 8014460:	0801890c 	.word	0x0801890c

08014464 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014464:	b590      	push	{r4, r7, lr}
 8014466:	b085      	sub	sp, #20
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d106      	bne.n	8014480 <tcp_rexmit+0x1c>
 8014472:	4b2f      	ldr	r3, [pc, #188]	@ (8014530 <tcp_rexmit+0xcc>)
 8014474:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8014478:	492e      	ldr	r1, [pc, #184]	@ (8014534 <tcp_rexmit+0xd0>)
 801447a:	482f      	ldr	r0, [pc, #188]	@ (8014538 <tcp_rexmit+0xd4>)
 801447c:	f001 f996 	bl	80157ac <iprintf>

  if (pcb->unacked == NULL) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014484:	2b00      	cmp	r3, #0
 8014486:	d102      	bne.n	801448e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014488:	f06f 0305 	mvn.w	r3, #5
 801448c:	e04c      	b.n	8014528 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014492:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014494:	68b8      	ldr	r0, [r7, #8]
 8014496:	f7ff fe2b 	bl	80140f0 <tcp_output_segment_busy>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d002      	beq.n	80144a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80144a0:	f06f 0305 	mvn.w	r3, #5
 80144a4:	e040      	b.n	8014528 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	336c      	adds	r3, #108	@ 0x6c
 80144b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144b4:	e002      	b.n	80144bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d011      	beq.n	80144e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	68db      	ldr	r3, [r3, #12]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7f5 fe52 	bl	800a176 <lwip_htonl>
 80144d2:	4604      	mov	r4, r0
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	f7f5 fe4b 	bl	800a176 <lwip_htonl>
 80144e0:	4603      	mov	r3, r0
 80144e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	dbe6      	blt.n	80144b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	68ba      	ldr	r2, [r7, #8]
 80144f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d103      	bne.n	8014506 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2200      	movs	r2, #0
 8014502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801450c:	2bff      	cmp	r3, #255	@ 0xff
 801450e:	d007      	beq.n	8014520 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014516:	3301      	adds	r3, #1
 8014518:	b2da      	uxtb	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3714      	adds	r7, #20
 801452c:	46bd      	mov	sp, r7
 801452e:	bd90      	pop	{r4, r7, pc}
 8014530:	08018880 	.word	0x08018880
 8014534:	08018f58 	.word	0x08018f58
 8014538:	0801890c 	.word	0x0801890c

0801453c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <tcp_rexmit_fast+0x1c>
 801454a:	4b2a      	ldr	r3, [pc, #168]	@ (80145f4 <tcp_rexmit_fast+0xb8>)
 801454c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014550:	4929      	ldr	r1, [pc, #164]	@ (80145f8 <tcp_rexmit_fast+0xbc>)
 8014552:	482a      	ldr	r0, [pc, #168]	@ (80145fc <tcp_rexmit_fast+0xc0>)
 8014554:	f001 f92a 	bl	80157ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801455c:	2b00      	cmp	r3, #0
 801455e:	d045      	beq.n	80145ec <tcp_rexmit_fast+0xb0>
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8b5b      	ldrh	r3, [r3, #26]
 8014564:	f003 0304 	and.w	r3, r3, #4
 8014568:	2b00      	cmp	r3, #0
 801456a:	d13f      	bne.n	80145ec <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7ff ff79 	bl	8014464 <tcp_rexmit>
 8014572:	4603      	mov	r3, r0
 8014574:	2b00      	cmp	r3, #0
 8014576:	d139      	bne.n	80145ec <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014584:	4293      	cmp	r3, r2
 8014586:	bf28      	it	cs
 8014588:	4613      	movcs	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	2b00      	cmp	r3, #0
 801458e:	da00      	bge.n	8014592 <tcp_rexmit_fast+0x56>
 8014590:	3301      	adds	r3, #1
 8014592:	105b      	asrs	r3, r3, #1
 8014594:	b29a      	uxth	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80145a2:	461a      	mov	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145a8:	005b      	lsls	r3, r3, #1
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d206      	bcs.n	80145bc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145c6:	4619      	mov	r1, r3
 80145c8:	0049      	lsls	r1, r1, #1
 80145ca:	440b      	add	r3, r1
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	4413      	add	r3, r2
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	8b5b      	ldrh	r3, [r3, #26]
 80145dc:	f043 0304 	orr.w	r3, r3, #4
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2200      	movs	r2, #0
 80145ea:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80145ec:	bf00      	nop
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	08018880 	.word	0x08018880
 80145f8:	08018f70 	.word	0x08018f70
 80145fc:	0801890c 	.word	0x0801890c

08014600 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b086      	sub	sp, #24
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	460b      	mov	r3, r1
 801460c:	817b      	strh	r3, [r7, #10]
 801460e:	4613      	mov	r3, r2
 8014610:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014612:	897a      	ldrh	r2, [r7, #10]
 8014614:	893b      	ldrh	r3, [r7, #8]
 8014616:	4413      	add	r3, r2
 8014618:	b29b      	uxth	r3, r3
 801461a:	3314      	adds	r3, #20
 801461c:	b29b      	uxth	r3, r3
 801461e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014622:	4619      	mov	r1, r3
 8014624:	2022      	movs	r0, #34	@ 0x22
 8014626:	f7f9 fa49 	bl	800dabc <pbuf_alloc>
 801462a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d04d      	beq.n	80146ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014632:	897b      	ldrh	r3, [r7, #10]
 8014634:	3313      	adds	r3, #19
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	8952      	ldrh	r2, [r2, #10]
 801463a:	4293      	cmp	r3, r2
 801463c:	db06      	blt.n	801464c <tcp_output_alloc_header_common+0x4c>
 801463e:	4b26      	ldr	r3, [pc, #152]	@ (80146d8 <tcp_output_alloc_header_common+0xd8>)
 8014640:	f240 7223 	movw	r2, #1827	@ 0x723
 8014644:	4925      	ldr	r1, [pc, #148]	@ (80146dc <tcp_output_alloc_header_common+0xdc>)
 8014646:	4826      	ldr	r0, [pc, #152]	@ (80146e0 <tcp_output_alloc_header_common+0xe0>)
 8014648:	f001 f8b0 	bl	80157ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014652:	8c3b      	ldrh	r3, [r7, #32]
 8014654:	4618      	mov	r0, r3
 8014656:	f7f5 fd79 	bl	800a14c <lwip_htons>
 801465a:	4603      	mov	r3, r0
 801465c:	461a      	mov	r2, r3
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014664:	4618      	mov	r0, r3
 8014666:	f7f5 fd71 	bl	800a14c <lwip_htons>
 801466a:	4603      	mov	r3, r0
 801466c:	461a      	mov	r2, r3
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f7f5 fd7c 	bl	800a176 <lwip_htonl>
 801467e:	4602      	mov	r2, r0
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014684:	897b      	ldrh	r3, [r7, #10]
 8014686:	089b      	lsrs	r3, r3, #2
 8014688:	b29b      	uxth	r3, r3
 801468a:	3305      	adds	r3, #5
 801468c:	b29b      	uxth	r3, r3
 801468e:	031b      	lsls	r3, r3, #12
 8014690:	b29a      	uxth	r2, r3
 8014692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014696:	b29b      	uxth	r3, r3
 8014698:	4313      	orrs	r3, r2
 801469a:	b29b      	uxth	r3, r3
 801469c:	4618      	mov	r0, r3
 801469e:	f7f5 fd55 	bl	800a14c <lwip_htons>
 80146a2:	4603      	mov	r3, r0
 80146a4:	461a      	mov	r2, r3
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80146aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f5 fd4d 	bl	800a14c <lwip_htons>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461a      	mov	r2, r3
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	2200      	movs	r2, #0
 80146be:	741a      	strb	r2, [r3, #16]
 80146c0:	2200      	movs	r2, #0
 80146c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	2200      	movs	r2, #0
 80146c8:	749a      	strb	r2, [r3, #18]
 80146ca:	2200      	movs	r2, #0
 80146cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80146ce:	697b      	ldr	r3, [r7, #20]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	08018880 	.word	0x08018880
 80146dc:	08018f90 	.word	0x08018f90
 80146e0:	0801890c 	.word	0x0801890c

080146e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80146e4:	b5b0      	push	{r4, r5, r7, lr}
 80146e6:	b08a      	sub	sp, #40	@ 0x28
 80146e8:	af04      	add	r7, sp, #16
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	607b      	str	r3, [r7, #4]
 80146ee:	460b      	mov	r3, r1
 80146f0:	817b      	strh	r3, [r7, #10]
 80146f2:	4613      	mov	r3, r2
 80146f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d106      	bne.n	801470a <tcp_output_alloc_header+0x26>
 80146fc:	4b15      	ldr	r3, [pc, #84]	@ (8014754 <tcp_output_alloc_header+0x70>)
 80146fe:	f240 7242 	movw	r2, #1858	@ 0x742
 8014702:	4915      	ldr	r1, [pc, #84]	@ (8014758 <tcp_output_alloc_header+0x74>)
 8014704:	4815      	ldr	r0, [pc, #84]	@ (801475c <tcp_output_alloc_header+0x78>)
 8014706:	f001 f851 	bl	80157ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	8adb      	ldrh	r3, [r3, #22]
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	8b12      	ldrh	r2, [r2, #24]
 8014716:	68f9      	ldr	r1, [r7, #12]
 8014718:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801471a:	893d      	ldrh	r5, [r7, #8]
 801471c:	897c      	ldrh	r4, [r7, #10]
 801471e:	9103      	str	r1, [sp, #12]
 8014720:	2110      	movs	r1, #16
 8014722:	9102      	str	r1, [sp, #8]
 8014724:	9201      	str	r2, [sp, #4]
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	462a      	mov	r2, r5
 801472c:	4621      	mov	r1, r4
 801472e:	f7ff ff67 	bl	8014600 <tcp_output_alloc_header_common>
 8014732:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d006      	beq.n	8014748 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801473e:	68fa      	ldr	r2, [r7, #12]
 8014740:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014742:	441a      	add	r2, r3
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014748:	697b      	ldr	r3, [r7, #20]
}
 801474a:	4618      	mov	r0, r3
 801474c:	3718      	adds	r7, #24
 801474e:	46bd      	mov	sp, r7
 8014750:	bdb0      	pop	{r4, r5, r7, pc}
 8014752:	bf00      	nop
 8014754:	08018880 	.word	0x08018880
 8014758:	08018fc0 	.word	0x08018fc0
 801475c:	0801890c 	.word	0x0801890c

08014760 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b088      	sub	sp, #32
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	4611      	mov	r1, r2
 801476c:	461a      	mov	r2, r3
 801476e:	460b      	mov	r3, r1
 8014770:	71fb      	strb	r3, [r7, #7]
 8014772:	4613      	mov	r3, r2
 8014774:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014776:	2300      	movs	r3, #0
 8014778:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d106      	bne.n	801478e <tcp_output_fill_options+0x2e>
 8014780:	4b12      	ldr	r3, [pc, #72]	@ (80147cc <tcp_output_fill_options+0x6c>)
 8014782:	f240 7256 	movw	r2, #1878	@ 0x756
 8014786:	4912      	ldr	r1, [pc, #72]	@ (80147d0 <tcp_output_fill_options+0x70>)
 8014788:	4812      	ldr	r0, [pc, #72]	@ (80147d4 <tcp_output_fill_options+0x74>)
 801478a:	f001 f80f 	bl	80157ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	3314      	adds	r3, #20
 8014798:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801479a:	8bfb      	ldrh	r3, [r7, #30]
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	461a      	mov	r2, r3
 80147a0:	79fb      	ldrb	r3, [r7, #7]
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	f003 0304 	and.w	r3, r3, #4
 80147a8:	4413      	add	r3, r2
 80147aa:	3314      	adds	r3, #20
 80147ac:	69ba      	ldr	r2, [r7, #24]
 80147ae:	4413      	add	r3, r2
 80147b0:	697a      	ldr	r2, [r7, #20]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d006      	beq.n	80147c4 <tcp_output_fill_options+0x64>
 80147b6:	4b05      	ldr	r3, [pc, #20]	@ (80147cc <tcp_output_fill_options+0x6c>)
 80147b8:	f240 7275 	movw	r2, #1909	@ 0x775
 80147bc:	4906      	ldr	r1, [pc, #24]	@ (80147d8 <tcp_output_fill_options+0x78>)
 80147be:	4805      	ldr	r0, [pc, #20]	@ (80147d4 <tcp_output_fill_options+0x74>)
 80147c0:	f000 fff4 	bl	80157ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80147c4:	bf00      	nop
 80147c6:	3720      	adds	r7, #32
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	08018880 	.word	0x08018880
 80147d0:	08018fe8 	.word	0x08018fe8
 80147d4:	0801890c 	.word	0x0801890c
 80147d8:	08018ee0 	.word	0x08018ee0

080147dc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08a      	sub	sp, #40	@ 0x28
 80147e0:	af04      	add	r7, sp, #16
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d106      	bne.n	80147fe <tcp_output_control_segment+0x22>
 80147f0:	4b1c      	ldr	r3, [pc, #112]	@ (8014864 <tcp_output_control_segment+0x88>)
 80147f2:	f240 7287 	movw	r2, #1927	@ 0x787
 80147f6:	491c      	ldr	r1, [pc, #112]	@ (8014868 <tcp_output_control_segment+0x8c>)
 80147f8:	481c      	ldr	r0, [pc, #112]	@ (801486c <tcp_output_control_segment+0x90>)
 80147fa:	f000 ffd7 	bl	80157ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 80147fe:	683a      	ldr	r2, [r7, #0]
 8014800:	6879      	ldr	r1, [r7, #4]
 8014802:	68f8      	ldr	r0, [r7, #12]
 8014804:	f7fe fae6 	bl	8012dd4 <tcp_route>
 8014808:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d102      	bne.n	8014816 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014810:	23fc      	movs	r3, #252	@ 0xfc
 8014812:	75fb      	strb	r3, [r7, #23]
 8014814:	e01c      	b.n	8014850 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d006      	beq.n	801482a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	7adb      	ldrb	r3, [r3, #11]
 8014820:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	7a9b      	ldrb	r3, [r3, #10]
 8014826:	757b      	strb	r3, [r7, #21]
 8014828:	e003      	b.n	8014832 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801482a:	23ff      	movs	r3, #255	@ 0xff
 801482c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801482e:	2300      	movs	r3, #0
 8014830:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014832:	7dba      	ldrb	r2, [r7, #22]
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	9302      	str	r3, [sp, #8]
 8014838:	2306      	movs	r3, #6
 801483a:	9301      	str	r3, [sp, #4]
 801483c:	7d7b      	ldrb	r3, [r7, #21]
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	4613      	mov	r3, r2
 8014842:	683a      	ldr	r2, [r7, #0]
 8014844:	6879      	ldr	r1, [r7, #4]
 8014846:	68b8      	ldr	r0, [r7, #8]
 8014848:	f7f7 f920 	bl	800ba8c <ip4_output_if>
 801484c:	4603      	mov	r3, r0
 801484e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014850:	68b8      	ldr	r0, [r7, #8]
 8014852:	f7f9 fc17 	bl	800e084 <pbuf_free>
  return err;
 8014856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801485a:	4618      	mov	r0, r3
 801485c:	3718      	adds	r7, #24
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	08018880 	.word	0x08018880
 8014868:	08019010 	.word	0x08019010
 801486c:	0801890c 	.word	0x0801890c

08014870 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014870:	b590      	push	{r4, r7, lr}
 8014872:	b08b      	sub	sp, #44	@ 0x2c
 8014874:	af04      	add	r7, sp, #16
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d106      	bne.n	8014892 <tcp_rst+0x22>
 8014884:	4b1f      	ldr	r3, [pc, #124]	@ (8014904 <tcp_rst+0x94>)
 8014886:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801488a:	491f      	ldr	r1, [pc, #124]	@ (8014908 <tcp_rst+0x98>)
 801488c:	481f      	ldr	r0, [pc, #124]	@ (801490c <tcp_rst+0x9c>)
 801488e:	f000 ff8d 	bl	80157ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014894:	2b00      	cmp	r3, #0
 8014896:	d106      	bne.n	80148a6 <tcp_rst+0x36>
 8014898:	4b1a      	ldr	r3, [pc, #104]	@ (8014904 <tcp_rst+0x94>)
 801489a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801489e:	491c      	ldr	r1, [pc, #112]	@ (8014910 <tcp_rst+0xa0>)
 80148a0:	481a      	ldr	r0, [pc, #104]	@ (801490c <tcp_rst+0x9c>)
 80148a2:	f000 ff83 	bl	80157ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80148a6:	2300      	movs	r3, #0
 80148a8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80148aa:	f24d 0316 	movw	r3, #53270	@ 0xd016
 80148ae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80148b0:	7dfb      	ldrb	r3, [r7, #23]
 80148b2:	b29c      	uxth	r4, r3
 80148b4:	68b8      	ldr	r0, [r7, #8]
 80148b6:	f7f5 fc5e 	bl	800a176 <lwip_htonl>
 80148ba:	4602      	mov	r2, r0
 80148bc:	8abb      	ldrh	r3, [r7, #20]
 80148be:	9303      	str	r3, [sp, #12]
 80148c0:	2314      	movs	r3, #20
 80148c2:	9302      	str	r3, [sp, #8]
 80148c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80148c6:	9301      	str	r3, [sp, #4]
 80148c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	4613      	mov	r3, r2
 80148ce:	2200      	movs	r2, #0
 80148d0:	4621      	mov	r1, r4
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7ff fe94 	bl	8014600 <tcp_output_alloc_header_common>
 80148d8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d00c      	beq.n	80148fa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148e0:	7dfb      	ldrb	r3, [r7, #23]
 80148e2:	2200      	movs	r2, #0
 80148e4:	6939      	ldr	r1, [r7, #16]
 80148e6:	68f8      	ldr	r0, [r7, #12]
 80148e8:	f7ff ff3a 	bl	8014760 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80148ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ee:	683a      	ldr	r2, [r7, #0]
 80148f0:	6939      	ldr	r1, [r7, #16]
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	f7ff ff72 	bl	80147dc <tcp_output_control_segment>
 80148f8:	e000      	b.n	80148fc <tcp_rst+0x8c>
    return;
 80148fa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80148fc:	371c      	adds	r7, #28
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd90      	pop	{r4, r7, pc}
 8014902:	bf00      	nop
 8014904:	08018880 	.word	0x08018880
 8014908:	0801903c 	.word	0x0801903c
 801490c:	0801890c 	.word	0x0801890c
 8014910:	08019058 	.word	0x08019058

08014914 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014914:	b590      	push	{r4, r7, lr}
 8014916:	b087      	sub	sp, #28
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801491c:	2300      	movs	r3, #0
 801491e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014920:	2300      	movs	r3, #0
 8014922:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d106      	bne.n	8014938 <tcp_send_empty_ack+0x24>
 801492a:	4b28      	ldr	r3, [pc, #160]	@ (80149cc <tcp_send_empty_ack+0xb8>)
 801492c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014930:	4927      	ldr	r1, [pc, #156]	@ (80149d0 <tcp_send_empty_ack+0xbc>)
 8014932:	4828      	ldr	r0, [pc, #160]	@ (80149d4 <tcp_send_empty_ack+0xc0>)
 8014934:	f000 ff3a 	bl	80157ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014938:	7dfb      	ldrb	r3, [r7, #23]
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	b2db      	uxtb	r3, r3
 801493e:	f003 0304 	and.w	r3, r3, #4
 8014942:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014944:	7d7b      	ldrb	r3, [r7, #21]
 8014946:	b29c      	uxth	r4, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801494c:	4618      	mov	r0, r3
 801494e:	f7f5 fc12 	bl	800a176 <lwip_htonl>
 8014952:	4603      	mov	r3, r0
 8014954:	2200      	movs	r2, #0
 8014956:	4621      	mov	r1, r4
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f7ff fec3 	bl	80146e4 <tcp_output_alloc_header>
 801495e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d109      	bne.n	801497a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8b5b      	ldrh	r3, [r3, #26]
 801496a:	f043 0303 	orr.w	r3, r3, #3
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014974:	f06f 0301 	mvn.w	r3, #1
 8014978:	e023      	b.n	80149c2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801497a:	7dbb      	ldrb	r3, [r7, #22]
 801497c:	7dfa      	ldrb	r2, [r7, #23]
 801497e:	6939      	ldr	r1, [r7, #16]
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7ff feed 	bl	8014760 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014986:	687a      	ldr	r2, [r7, #4]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	3304      	adds	r3, #4
 801498c:	6939      	ldr	r1, [r7, #16]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f7ff ff24 	bl	80147dc <tcp_output_control_segment>
 8014994:	4603      	mov	r3, r0
 8014996:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d007      	beq.n	80149b0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	8b5b      	ldrh	r3, [r3, #26]
 80149a4:	f043 0303 	orr.w	r3, r3, #3
 80149a8:	b29a      	uxth	r2, r3
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	835a      	strh	r2, [r3, #26]
 80149ae:	e006      	b.n	80149be <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	8b5b      	ldrh	r3, [r3, #26]
 80149b4:	f023 0303 	bic.w	r3, r3, #3
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80149be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	371c      	adds	r7, #28
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd90      	pop	{r4, r7, pc}
 80149ca:	bf00      	nop
 80149cc:	08018880 	.word	0x08018880
 80149d0:	08019074 	.word	0x08019074
 80149d4:	0801890c 	.word	0x0801890c

080149d8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80149d8:	b590      	push	{r4, r7, lr}
 80149da:	b087      	sub	sp, #28
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149e0:	2300      	movs	r3, #0
 80149e2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d106      	bne.n	80149f8 <tcp_keepalive+0x20>
 80149ea:	4b18      	ldr	r3, [pc, #96]	@ (8014a4c <tcp_keepalive+0x74>)
 80149ec:	f640 0224 	movw	r2, #2084	@ 0x824
 80149f0:	4917      	ldr	r1, [pc, #92]	@ (8014a50 <tcp_keepalive+0x78>)
 80149f2:	4818      	ldr	r0, [pc, #96]	@ (8014a54 <tcp_keepalive+0x7c>)
 80149f4:	f000 feda 	bl	80157ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80149f8:	7dfb      	ldrb	r3, [r7, #23]
 80149fa:	b29c      	uxth	r4, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a00:	3b01      	subs	r3, #1
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7f5 fbb7 	bl	800a176 <lwip_htonl>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff fe68 	bl	80146e4 <tcp_output_alloc_header>
 8014a14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d102      	bne.n	8014a22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a20:	e010      	b.n	8014a44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a22:	7dfb      	ldrb	r3, [r7, #23]
 8014a24:	2200      	movs	r2, #0
 8014a26:	6939      	ldr	r1, [r7, #16]
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7ff fe99 	bl	8014760 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3304      	adds	r3, #4
 8014a34:	6939      	ldr	r1, [r7, #16]
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff fed0 	bl	80147dc <tcp_output_control_segment>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	371c      	adds	r7, #28
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd90      	pop	{r4, r7, pc}
 8014a4c:	08018880 	.word	0x08018880
 8014a50:	08019094 	.word	0x08019094
 8014a54:	0801890c 	.word	0x0801890c

08014a58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014a58:	b590      	push	{r4, r7, lr}
 8014a5a:	b08b      	sub	sp, #44	@ 0x2c
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a60:	2300      	movs	r3, #0
 8014a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d106      	bne.n	8014a7a <tcp_zero_window_probe+0x22>
 8014a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8014ba0 <tcp_zero_window_probe+0x148>)
 8014a6e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014a72:	494c      	ldr	r1, [pc, #304]	@ (8014ba4 <tcp_zero_window_probe+0x14c>)
 8014a74:	484c      	ldr	r0, [pc, #304]	@ (8014ba8 <tcp_zero_window_probe+0x150>)
 8014a76:	f000 fe99 	bl	80157ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a80:	6a3b      	ldr	r3, [r7, #32]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d101      	bne.n	8014a8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a86:	2300      	movs	r3, #0
 8014a88:	e086      	b.n	8014b98 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014a90:	2bff      	cmp	r3, #255	@ 0xff
 8014a92:	d007      	beq.n	8014aa4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	b2da      	uxtb	r2, r3
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	899b      	ldrh	r3, [r3, #12]
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f5 fb4d 	bl	800a14c <lwip_htons>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	f003 0301 	and.w	r3, r3, #1
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d005      	beq.n	8014aca <tcp_zero_window_probe+0x72>
 8014abe:	6a3b      	ldr	r3, [r7, #32]
 8014ac0:	891b      	ldrh	r3, [r3, #8]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d101      	bne.n	8014aca <tcp_zero_window_probe+0x72>
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	e000      	b.n	8014acc <tcp_zero_window_probe+0x74>
 8014aca:	2300      	movs	r3, #0
 8014acc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014ace:	7ffb      	ldrb	r3, [r7, #31]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	bf0c      	ite	eq
 8014ad4:	2301      	moveq	r3, #1
 8014ad6:	2300      	movne	r3, #0
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ae0:	b299      	uxth	r1, r3
 8014ae2:	6a3b      	ldr	r3, [r7, #32]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	8bba      	ldrh	r2, [r7, #28]
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f7ff fdfa 	bl	80146e4 <tcp_output_alloc_header>
 8014af0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d102      	bne.n	8014afe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
 8014afc:	e04c      	b.n	8014b98 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014b04:	7ffb      	ldrb	r3, [r7, #31]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d011      	beq.n	8014b2e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	899b      	ldrh	r3, [r3, #12]
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	b21b      	sxth	r3, r3
 8014b12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014b16:	b21c      	sxth	r4, r3
 8014b18:	2011      	movs	r0, #17
 8014b1a:	f7f5 fb17 	bl	800a14c <lwip_htons>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	b21b      	sxth	r3, r3
 8014b22:	4323      	orrs	r3, r4
 8014b24:	b21b      	sxth	r3, r3
 8014b26:	b29a      	uxth	r2, r3
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	819a      	strh	r2, [r3, #12]
 8014b2c:	e010      	b.n	8014b50 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	3314      	adds	r3, #20
 8014b34:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	6858      	ldr	r0, [r3, #4]
 8014b3a:	6a3b      	ldr	r3, [r7, #32]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	891a      	ldrh	r2, [r3, #8]
 8014b40:	6a3b      	ldr	r3, [r7, #32]
 8014b42:	891b      	ldrh	r3, [r3, #8]
 8014b44:	1ad3      	subs	r3, r2, r3
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	2201      	movs	r2, #1
 8014b4a:	6939      	ldr	r1, [r7, #16]
 8014b4c:	f7f9 fc90 	bl	800e470 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014b50:	6a3b      	ldr	r3, [r7, #32]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7f5 fb0d 	bl	800a176 <lwip_htonl>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	3301      	adds	r3, #1
 8014b60:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	1ad3      	subs	r3, r2, r3
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	da02      	bge.n	8014b74 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b78:	2200      	movs	r2, #0
 8014b7a:	69b9      	ldr	r1, [r7, #24]
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f7ff fdef 	bl	8014760 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	3304      	adds	r3, #4
 8014b88:	69b9      	ldr	r1, [r7, #24]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7ff fe26 	bl	80147dc <tcp_output_control_segment>
 8014b90:	4603      	mov	r3, r0
 8014b92:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	372c      	adds	r7, #44	@ 0x2c
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd90      	pop	{r4, r7, pc}
 8014ba0:	08018880 	.word	0x08018880
 8014ba4:	080190b0 	.word	0x080190b0
 8014ba8:	0801890c 	.word	0x0801890c

08014bac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 8014bb6:	f7f1 fbf1 	bl	800639c <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 8014bba:	f000 fb01 	bl	80151c0 <sys_timeouts_sleeptime>
 8014bbe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc6:	d109      	bne.n	8014bdc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014bc8:	f7f1 fbda 	bl	8006380 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014bcc:	2200      	movs	r2, #0
 8014bce:	6839      	ldr	r1, [r7, #0]
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7f9 fddd 	bl	800e790 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014bd6:	f7f1 fbc3 	bl	8006360 <sys_lock_tcpip_core>
    return;
 8014bda:	e016      	b.n	8014c0a <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d102      	bne.n	8014be8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8014be2:	f000 fab1 	bl	8015148 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014be6:	e7e6      	b.n	8014bb6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014be8:	f7f1 fbca 	bl	8006380 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8014bec:	68fa      	ldr	r2, [r7, #12]
 8014bee:	6839      	ldr	r1, [r7, #0]
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7f9 fdcd 	bl	800e790 <sys_arch_mbox_fetch>
 8014bf6:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8014bf8:	f7f1 fbb2 	bl	8006360 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c02:	d102      	bne.n	8014c0a <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014c04:	f000 faa0 	bl	8015148 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014c08:	e7d5      	b.n	8014bb6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8014c18:	f7f1 fbfc 	bl	8006414 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8014c1c:	f7f1 fba0 	bl	8006360 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8014c20:	4b0f      	ldr	r3, [pc, #60]	@ (8014c60 <tcpip_thread+0x50>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d005      	beq.n	8014c34 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8014c28:	4b0d      	ldr	r3, [pc, #52]	@ (8014c60 <tcpip_thread+0x50>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8014c64 <tcpip_thread+0x54>)
 8014c2e:	6812      	ldr	r2, [r2, #0]
 8014c30:	4610      	mov	r0, r2
 8014c32:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8014c34:	f107 030c 	add.w	r3, r7, #12
 8014c38:	4619      	mov	r1, r3
 8014c3a:	480b      	ldr	r0, [pc, #44]	@ (8014c68 <tcpip_thread+0x58>)
 8014c3c:	f7ff ffb6 	bl	8014bac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d106      	bne.n	8014c54 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014c46:	4b09      	ldr	r3, [pc, #36]	@ (8014c6c <tcpip_thread+0x5c>)
 8014c48:	2291      	movs	r2, #145	@ 0x91
 8014c4a:	4909      	ldr	r1, [pc, #36]	@ (8014c70 <tcpip_thread+0x60>)
 8014c4c:	4809      	ldr	r0, [pc, #36]	@ (8014c74 <tcpip_thread+0x64>)
 8014c4e:	f000 fdad 	bl	80157ac <iprintf>
      continue;
 8014c52:	e003      	b.n	8014c5c <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 f80e 	bl	8014c78 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8014c5c:	e7ea      	b.n	8014c34 <tcpip_thread+0x24>
 8014c5e:	bf00      	nop
 8014c60:	24010694 	.word	0x24010694
 8014c64:	24010698 	.word	0x24010698
 8014c68:	2401069c 	.word	0x2401069c
 8014c6c:	080190d4 	.word	0x080190d4
 8014c70:	08019140 	.word	0x08019140
 8014c74:	08019160 	.word	0x08019160

08014c78 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b02      	cmp	r3, #2
 8014c86:	d026      	beq.n	8014cd6 <tcpip_thread_handle_msg+0x5e>
 8014c88:	2b02      	cmp	r3, #2
 8014c8a:	dc2b      	bgt.n	8014ce4 <tcpip_thread_handle_msg+0x6c>
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d002      	beq.n	8014c96 <tcpip_thread_handle_msg+0x1e>
 8014c90:	2b01      	cmp	r3, #1
 8014c92:	d015      	beq.n	8014cc0 <tcpip_thread_handle_msg+0x48>
 8014c94:	e026      	b.n	8014ce4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	6850      	ldr	r0, [r2, #4]
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	6892      	ldr	r2, [r2, #8]
 8014ca2:	4611      	mov	r1, r2
 8014ca4:	4798      	blx	r3
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d004      	beq.n	8014cb6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f9 f9e7 	bl	800e084 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014cb6:	6879      	ldr	r1, [r7, #4]
 8014cb8:	2009      	movs	r0, #9
 8014cba:	f7f8 fb33 	bl	800d324 <memp_free>
      break;
 8014cbe:	e018      	b.n	8014cf2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	6892      	ldr	r2, [r2, #8]
 8014cc8:	4610      	mov	r0, r2
 8014cca:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014ccc:	6879      	ldr	r1, [r7, #4]
 8014cce:	2008      	movs	r0, #8
 8014cd0:	f7f8 fb28 	bl	800d324 <memp_free>
      break;
 8014cd4:	e00d      	b.n	8014cf2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	6892      	ldr	r2, [r2, #8]
 8014cde:	4610      	mov	r0, r2
 8014ce0:	4798      	blx	r3
      break;
 8014ce2:	e006      	b.n	8014cf2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014ce4:	4b05      	ldr	r3, [pc, #20]	@ (8014cfc <tcpip_thread_handle_msg+0x84>)
 8014ce6:	22cf      	movs	r2, #207	@ 0xcf
 8014ce8:	4905      	ldr	r1, [pc, #20]	@ (8014d00 <tcpip_thread_handle_msg+0x88>)
 8014cea:	4806      	ldr	r0, [pc, #24]	@ (8014d04 <tcpip_thread_handle_msg+0x8c>)
 8014cec:	f000 fd5e 	bl	80157ac <iprintf>
      break;
 8014cf0:	bf00      	nop
  }
}
 8014cf2:	bf00      	nop
 8014cf4:	3708      	adds	r7, #8
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	080190d4 	.word	0x080190d4
 8014d00:	08019140 	.word	0x08019140
 8014d04:	08019160 	.word	0x08019160

08014d08 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	60b9      	str	r1, [r7, #8]
 8014d12:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014d14:	481a      	ldr	r0, [pc, #104]	@ (8014d80 <tcpip_inpkt+0x78>)
 8014d16:	f7f9 fd6c 	bl	800e7f2 <sys_mbox_valid>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d105      	bne.n	8014d2c <tcpip_inpkt+0x24>
 8014d20:	4b18      	ldr	r3, [pc, #96]	@ (8014d84 <tcpip_inpkt+0x7c>)
 8014d22:	22fc      	movs	r2, #252	@ 0xfc
 8014d24:	4918      	ldr	r1, [pc, #96]	@ (8014d88 <tcpip_inpkt+0x80>)
 8014d26:	4819      	ldr	r0, [pc, #100]	@ (8014d8c <tcpip_inpkt+0x84>)
 8014d28:	f000 fd40 	bl	80157ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014d2c:	2009      	movs	r0, #9
 8014d2e:	f7f8 fa83 	bl	800d238 <memp_malloc>
 8014d32:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d102      	bne.n	8014d40 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8014d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d3e:	e01a      	b.n	8014d76 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	2200      	movs	r2, #0
 8014d44:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	68fa      	ldr	r2, [r7, #12]
 8014d4a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	68ba      	ldr	r2, [r7, #8]
 8014d50:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014d58:	6979      	ldr	r1, [r7, #20]
 8014d5a:	4809      	ldr	r0, [pc, #36]	@ (8014d80 <tcpip_inpkt+0x78>)
 8014d5c:	f7f9 fcfe 	bl	800e75c <sys_mbox_trypost>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d006      	beq.n	8014d74 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014d66:	6979      	ldr	r1, [r7, #20]
 8014d68:	2009      	movs	r0, #9
 8014d6a:	f7f8 fadb 	bl	800d324 <memp_free>
    return ERR_MEM;
 8014d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d72:	e000      	b.n	8014d76 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8014d74:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3718      	adds	r7, #24
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	2401069c 	.word	0x2401069c
 8014d84:	080190d4 	.word	0x080190d4
 8014d88:	08019188 	.word	0x08019188
 8014d8c:	08019160 	.word	0x08019160

08014d90 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014da0:	f003 0318 	and.w	r3, r3, #24
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d006      	beq.n	8014db6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8014da8:	4a08      	ldr	r2, [pc, #32]	@ (8014dcc <tcpip_input+0x3c>)
 8014daa:	6839      	ldr	r1, [r7, #0]
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f7ff ffab 	bl	8014d08 <tcpip_inpkt>
 8014db2:	4603      	mov	r3, r0
 8014db4:	e005      	b.n	8014dc2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8014db6:	4a06      	ldr	r2, [pc, #24]	@ (8014dd0 <tcpip_input+0x40>)
 8014db8:	6839      	ldr	r1, [r7, #0]
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7ff ffa4 	bl	8014d08 <tcpip_inpkt>
 8014dc0:	4603      	mov	r3, r0
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3708      	adds	r7, #8
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	0800b049 	.word	0x0800b049
 8014dd0:	0800b841 	.word	0x0800b841

08014dd4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014dde:	4819      	ldr	r0, [pc, #100]	@ (8014e44 <tcpip_try_callback+0x70>)
 8014de0:	f7f9 fd07 	bl	800e7f2 <sys_mbox_valid>
 8014de4:	4603      	mov	r3, r0
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d106      	bne.n	8014df8 <tcpip_try_callback+0x24>
 8014dea:	4b17      	ldr	r3, [pc, #92]	@ (8014e48 <tcpip_try_callback+0x74>)
 8014dec:	f240 125d 	movw	r2, #349	@ 0x15d
 8014df0:	4916      	ldr	r1, [pc, #88]	@ (8014e4c <tcpip_try_callback+0x78>)
 8014df2:	4817      	ldr	r0, [pc, #92]	@ (8014e50 <tcpip_try_callback+0x7c>)
 8014df4:	f000 fcda 	bl	80157ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8014df8:	2008      	movs	r0, #8
 8014dfa:	f7f8 fa1d 	bl	800d238 <memp_malloc>
 8014dfe:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d102      	bne.n	8014e0c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8014e06:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0a:	e017      	b.n	8014e3c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2201      	movs	r2, #1
 8014e10:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	683a      	ldr	r2, [r7, #0]
 8014e1c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014e1e:	68f9      	ldr	r1, [r7, #12]
 8014e20:	4808      	ldr	r0, [pc, #32]	@ (8014e44 <tcpip_try_callback+0x70>)
 8014e22:	f7f9 fc9b 	bl	800e75c <sys_mbox_trypost>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d006      	beq.n	8014e3a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8014e2c:	68f9      	ldr	r1, [r7, #12]
 8014e2e:	2008      	movs	r0, #8
 8014e30:	f7f8 fa78 	bl	800d324 <memp_free>
    return ERR_MEM;
 8014e34:	f04f 33ff 	mov.w	r3, #4294967295
 8014e38:	e000      	b.n	8014e3c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	2401069c 	.word	0x2401069c
 8014e48:	080190d4 	.word	0x080190d4
 8014e4c:	08019188 	.word	0x08019188
 8014e50:	08019160 	.word	0x08019160

08014e54 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af02      	add	r7, sp, #8
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8014e5e:	f7f6 fc3d 	bl	800b6dc <lwip_init>

  tcpip_init_done = initfunc;
 8014e62:	4a17      	ldr	r2, [pc, #92]	@ (8014ec0 <tcpip_init+0x6c>)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014e68:	4a16      	ldr	r2, [pc, #88]	@ (8014ec4 <tcpip_init+0x70>)
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014e6e:	2106      	movs	r1, #6
 8014e70:	4815      	ldr	r0, [pc, #84]	@ (8014ec8 <tcpip_init+0x74>)
 8014e72:	f7f9 fc59 	bl	800e728 <sys_mbox_new>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d006      	beq.n	8014e8a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014e7c:	4b13      	ldr	r3, [pc, #76]	@ (8014ecc <tcpip_init+0x78>)
 8014e7e:	f240 2261 	movw	r2, #609	@ 0x261
 8014e82:	4913      	ldr	r1, [pc, #76]	@ (8014ed0 <tcpip_init+0x7c>)
 8014e84:	4813      	ldr	r0, [pc, #76]	@ (8014ed4 <tcpip_init+0x80>)
 8014e86:	f000 fc91 	bl	80157ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014e8a:	4813      	ldr	r0, [pc, #76]	@ (8014ed8 <tcpip_init+0x84>)
 8014e8c:	f7f9 fcce 	bl	800e82c <sys_mutex_new>
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d006      	beq.n	8014ea4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014e96:	4b0d      	ldr	r3, [pc, #52]	@ (8014ecc <tcpip_init+0x78>)
 8014e98:	f240 2265 	movw	r2, #613	@ 0x265
 8014e9c:	490f      	ldr	r1, [pc, #60]	@ (8014edc <tcpip_init+0x88>)
 8014e9e:	480d      	ldr	r0, [pc, #52]	@ (8014ed4 <tcpip_init+0x80>)
 8014ea0:	f000 fc84 	bl	80157ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014ea4:	2318      	movs	r3, #24
 8014ea6:	9300      	str	r3, [sp, #0]
 8014ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014eac:	2200      	movs	r2, #0
 8014eae:	490c      	ldr	r1, [pc, #48]	@ (8014ee0 <tcpip_init+0x8c>)
 8014eb0:	480c      	ldr	r0, [pc, #48]	@ (8014ee4 <tcpip_init+0x90>)
 8014eb2:	f7f9 fced 	bl	800e890 <sys_thread_new>
}
 8014eb6:	bf00      	nop
 8014eb8:	3708      	adds	r7, #8
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	24010694 	.word	0x24010694
 8014ec4:	24010698 	.word	0x24010698
 8014ec8:	2401069c 	.word	0x2401069c
 8014ecc:	080190d4 	.word	0x080190d4
 8014ed0:	08019198 	.word	0x08019198
 8014ed4:	08019160 	.word	0x08019160
 8014ed8:	240106a0 	.word	0x240106a0
 8014edc:	080191bc 	.word	0x080191bc
 8014ee0:	08014c11 	.word	0x08014c11
 8014ee4:	080191e0 	.word	0x080191e0

08014ee8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ef0:	f7f9 fd56 	bl	800e9a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8014f20 <tcpip_tcp_timer+0x38>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d103      	bne.n	8014f04 <tcpip_tcp_timer+0x1c>
 8014efc:	4b09      	ldr	r3, [pc, #36]	@ (8014f24 <tcpip_tcp_timer+0x3c>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d005      	beq.n	8014f10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f04:	2200      	movs	r2, #0
 8014f06:	4908      	ldr	r1, [pc, #32]	@ (8014f28 <tcpip_tcp_timer+0x40>)
 8014f08:	20fa      	movs	r0, #250	@ 0xfa
 8014f0a:	f000 f8f5 	bl	80150f8 <sys_timeout>
 8014f0e:	e003      	b.n	8014f18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014f10:	4b06      	ldr	r3, [pc, #24]	@ (8014f2c <tcpip_tcp_timer+0x44>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
  }
}
 8014f16:	bf00      	nop
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	24010650 	.word	0x24010650
 8014f24:	24010654 	.word	0x24010654
 8014f28:	08014ee9 	.word	0x08014ee9
 8014f2c:	240106ac 	.word	0x240106ac

08014f30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8014f34:	f7f1 fa32 	bl	800639c <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f38:	4b0a      	ldr	r3, [pc, #40]	@ (8014f64 <tcp_timer_needed+0x34>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d10f      	bne.n	8014f60 <tcp_timer_needed+0x30>
 8014f40:	4b09      	ldr	r3, [pc, #36]	@ (8014f68 <tcp_timer_needed+0x38>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d103      	bne.n	8014f50 <tcp_timer_needed+0x20>
 8014f48:	4b08      	ldr	r3, [pc, #32]	@ (8014f6c <tcp_timer_needed+0x3c>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d007      	beq.n	8014f60 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f50:	4b04      	ldr	r3, [pc, #16]	@ (8014f64 <tcp_timer_needed+0x34>)
 8014f52:	2201      	movs	r2, #1
 8014f54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f56:	2200      	movs	r2, #0
 8014f58:	4905      	ldr	r1, [pc, #20]	@ (8014f70 <tcp_timer_needed+0x40>)
 8014f5a:	20fa      	movs	r0, #250	@ 0xfa
 8014f5c:	f000 f8cc 	bl	80150f8 <sys_timeout>
  }
}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	240106ac 	.word	0x240106ac
 8014f68:	24010650 	.word	0x24010650
 8014f6c:	24010654 	.word	0x24010654
 8014f70:	08014ee9 	.word	0x08014ee9

08014f74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b086      	sub	sp, #24
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f80:	200a      	movs	r0, #10
 8014f82:	f7f8 f959 	bl	800d238 <memp_malloc>
 8014f86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d109      	bne.n	8014fa2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d151      	bne.n	8015038 <sys_timeout_abs+0xc4>
 8014f94:	4b2a      	ldr	r3, [pc, #168]	@ (8015040 <sys_timeout_abs+0xcc>)
 8014f96:	22be      	movs	r2, #190	@ 0xbe
 8014f98:	492a      	ldr	r1, [pc, #168]	@ (8015044 <sys_timeout_abs+0xd0>)
 8014f9a:	482b      	ldr	r0, [pc, #172]	@ (8015048 <sys_timeout_abs+0xd4>)
 8014f9c:	f000 fc06 	bl	80157ac <iprintf>
    return;
 8014fa0:	e04a      	b.n	8015038 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	68ba      	ldr	r2, [r7, #8]
 8014fac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	68fa      	ldr	r2, [r7, #12]
 8014fb8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014fba:	4b24      	ldr	r3, [pc, #144]	@ (801504c <sys_timeout_abs+0xd8>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d103      	bne.n	8014fca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014fc2:	4a22      	ldr	r2, [pc, #136]	@ (801504c <sys_timeout_abs+0xd8>)
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	6013      	str	r3, [r2, #0]
    return;
 8014fc8:	e037      	b.n	801503a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	685a      	ldr	r2, [r3, #4]
 8014fce:	4b1f      	ldr	r3, [pc, #124]	@ (801504c <sys_timeout_abs+0xd8>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	0fdb      	lsrs	r3, r3, #31
 8014fd8:	f003 0301 	and.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d007      	beq.n	8014ff2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014fe2:	4b1a      	ldr	r3, [pc, #104]	@ (801504c <sys_timeout_abs+0xd8>)
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014fea:	4a18      	ldr	r2, [pc, #96]	@ (801504c <sys_timeout_abs+0xd8>)
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	6013      	str	r3, [r2, #0]
 8014ff0:	e023      	b.n	801503a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014ff2:	4b16      	ldr	r3, [pc, #88]	@ (801504c <sys_timeout_abs+0xd8>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	617b      	str	r3, [r7, #20]
 8014ff8:	e01a      	b.n	8015030 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d00b      	beq.n	801501a <sys_timeout_abs+0xa6>
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	685a      	ldr	r2, [r3, #4]
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	0fdb      	lsrs	r3, r3, #31
 8015010:	f003 0301 	and.w	r3, r3, #1
 8015014:	b2db      	uxtb	r3, r3
 8015016:	2b00      	cmp	r3, #0
 8015018:	d007      	beq.n	801502a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	693a      	ldr	r2, [r7, #16]
 8015026:	601a      	str	r2, [r3, #0]
        break;
 8015028:	e007      	b.n	801503a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	617b      	str	r3, [r7, #20]
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1e1      	bne.n	8014ffa <sys_timeout_abs+0x86>
 8015036:	e000      	b.n	801503a <sys_timeout_abs+0xc6>
    return;
 8015038:	bf00      	nop
      }
    }
  }
}
 801503a:	3718      	adds	r7, #24
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	080191f0 	.word	0x080191f0
 8015044:	08019260 	.word	0x08019260
 8015048:	080192a0 	.word	0x080192a0
 801504c:	240106a4 	.word	0x240106a4

08015050 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b086      	sub	sp, #24
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	4798      	blx	r3

  now = sys_now();
 8015062:	f7f0 ff19 	bl	8005e98 <sys_now>
 8015066:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	4b0f      	ldr	r3, [pc, #60]	@ (80150ac <lwip_cyclic_timer+0x5c>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4413      	add	r3, r2
 8015072:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015074:	68fa      	ldr	r2, [r7, #12]
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	1ad3      	subs	r3, r2, r3
 801507a:	0fdb      	lsrs	r3, r3, #31
 801507c:	f003 0301 	and.w	r3, r3, #1
 8015080:	b2db      	uxtb	r3, r3
 8015082:	2b00      	cmp	r3, #0
 8015084:	d009      	beq.n	801509a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	4413      	add	r3, r2
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	4907      	ldr	r1, [pc, #28]	@ (80150b0 <lwip_cyclic_timer+0x60>)
 8015092:	4618      	mov	r0, r3
 8015094:	f7ff ff6e 	bl	8014f74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015098:	e004      	b.n	80150a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	4904      	ldr	r1, [pc, #16]	@ (80150b0 <lwip_cyclic_timer+0x60>)
 801509e:	68f8      	ldr	r0, [r7, #12]
 80150a0:	f7ff ff68 	bl	8014f74 <sys_timeout_abs>
}
 80150a4:	bf00      	nop
 80150a6:	3718      	adds	r7, #24
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	240106a8 	.word	0x240106a8
 80150b0:	08015051 	.word	0x08015051

080150b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150ba:	2301      	movs	r3, #1
 80150bc:	607b      	str	r3, [r7, #4]
 80150be:	e00e      	b.n	80150de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80150c0:	4a0b      	ldr	r2, [pc, #44]	@ (80150f0 <sys_timeouts_init+0x3c>)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	00db      	lsls	r3, r3, #3
 80150cc:	4a08      	ldr	r2, [pc, #32]	@ (80150f0 <sys_timeouts_init+0x3c>)
 80150ce:	4413      	add	r3, r2
 80150d0:	461a      	mov	r2, r3
 80150d2:	4908      	ldr	r1, [pc, #32]	@ (80150f4 <sys_timeouts_init+0x40>)
 80150d4:	f000 f810 	bl	80150f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	3301      	adds	r3, #1
 80150dc:	607b      	str	r3, [r7, #4]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d9ed      	bls.n	80150c0 <sys_timeouts_init+0xc>
  }
}
 80150e4:	bf00      	nop
 80150e6:	bf00      	nop
 80150e8:	3708      	adds	r7, #8
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	08019e3c 	.word	0x08019e3c
 80150f4:	08015051 	.word	0x08015051

080150f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b086      	sub	sp, #24
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8015104:	f7f1 f94a 	bl	800639c <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801510e:	d306      	bcc.n	801511e <sys_timeout+0x26>
 8015110:	4b0a      	ldr	r3, [pc, #40]	@ (801513c <sys_timeout+0x44>)
 8015112:	f240 1229 	movw	r2, #297	@ 0x129
 8015116:	490a      	ldr	r1, [pc, #40]	@ (8015140 <sys_timeout+0x48>)
 8015118:	480a      	ldr	r0, [pc, #40]	@ (8015144 <sys_timeout+0x4c>)
 801511a:	f000 fb47 	bl	80157ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801511e:	f7f0 febb 	bl	8005e98 <sys_now>
 8015122:	4602      	mov	r2, r0
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	4413      	add	r3, r2
 8015128:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	68b9      	ldr	r1, [r7, #8]
 801512e:	6978      	ldr	r0, [r7, #20]
 8015130:	f7ff ff20 	bl	8014f74 <sys_timeout_abs>
#endif
}
 8015134:	bf00      	nop
 8015136:	3718      	adds	r7, #24
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	080191f0 	.word	0x080191f0
 8015140:	080192c8 	.word	0x080192c8
 8015144:	080192a0 	.word	0x080192a0

08015148 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801514e:	f7f1 f925 	bl	800639c <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015152:	f7f0 fea1 	bl	8005e98 <sys_now>
 8015156:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015158:	4b17      	ldr	r3, [pc, #92]	@ (80151b8 <sys_check_timeouts+0x70>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d022      	beq.n	80151aa <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	68fa      	ldr	r2, [r7, #12]
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	0fdb      	lsrs	r3, r3, #31
 801516e:	f003 0301 	and.w	r3, r3, #1
 8015172:	b2db      	uxtb	r3, r3
 8015174:	2b00      	cmp	r3, #0
 8015176:	d11a      	bne.n	80151ae <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	4a0e      	ldr	r2, [pc, #56]	@ (80151b8 <sys_check_timeouts+0x70>)
 801517e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	4a0a      	ldr	r2, [pc, #40]	@ (80151bc <sys_check_timeouts+0x74>)
 8015192:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015194:	68b9      	ldr	r1, [r7, #8]
 8015196:	200a      	movs	r0, #10
 8015198:	f7f8 f8c4 	bl	800d324 <memp_free>
    if (handler != NULL) {
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d0da      	beq.n	8015158 <sys_check_timeouts+0x10>
      handler(arg);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6838      	ldr	r0, [r7, #0]
 80151a6:	4798      	blx	r3
  do {
 80151a8:	e7d6      	b.n	8015158 <sys_check_timeouts+0x10>
      return;
 80151aa:	bf00      	nop
 80151ac:	e000      	b.n	80151b0 <sys_check_timeouts+0x68>
      return;
 80151ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	240106a4 	.word	0x240106a4
 80151bc:	240106a8 	.word	0x240106a8

080151c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80151c6:	f7f1 f8e9 	bl	800639c <sys_check_core_locking>

  if (next_timeout == NULL) {
 80151ca:	4b16      	ldr	r3, [pc, #88]	@ (8015224 <sys_timeouts_sleeptime+0x64>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d102      	bne.n	80151d8 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80151d2:	f04f 33ff 	mov.w	r3, #4294967295
 80151d6:	e020      	b.n	801521a <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 80151d8:	f7f0 fe5e 	bl	8005e98 <sys_now>
 80151dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80151de:	4b11      	ldr	r3, [pc, #68]	@ (8015224 <sys_timeouts_sleeptime+0x64>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	685a      	ldr	r2, [r3, #4]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	0fdb      	lsrs	r3, r3, #31
 80151ea:	f003 0301 	and.w	r3, r3, #1
 80151ee:	b2db      	uxtb	r3, r3
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d001      	beq.n	80151f8 <sys_timeouts_sleeptime+0x38>
    return 0;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e010      	b.n	801521a <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80151f8:	4b0a      	ldr	r3, [pc, #40]	@ (8015224 <sys_timeouts_sleeptime+0x64>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	685a      	ldr	r2, [r3, #4]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	da06      	bge.n	8015218 <sys_timeouts_sleeptime+0x58>
 801520a:	4b07      	ldr	r3, [pc, #28]	@ (8015228 <sys_timeouts_sleeptime+0x68>)
 801520c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015210:	4906      	ldr	r1, [pc, #24]	@ (801522c <sys_timeouts_sleeptime+0x6c>)
 8015212:	4807      	ldr	r0, [pc, #28]	@ (8015230 <sys_timeouts_sleeptime+0x70>)
 8015214:	f000 faca 	bl	80157ac <iprintf>
    return ret;
 8015218:	683b      	ldr	r3, [r7, #0]
  }
}
 801521a:	4618      	mov	r0, r3
 801521c:	3708      	adds	r7, #8
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	240106a4 	.word	0x240106a4
 8015228:	080191f0 	.word	0x080191f0
 801522c:	08019300 	.word	0x08019300
 8015230:	080192a0 	.word	0x080192a0

08015234 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015238:	f000 f9b8 	bl	80155ac <rand>
 801523c:	4603      	mov	r3, r0
 801523e:	b29b      	uxth	r3, r3
 8015240:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015244:	b29b      	uxth	r3, r3
 8015246:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801524a:	b29a      	uxth	r2, r3
 801524c:	4b01      	ldr	r3, [pc, #4]	@ (8015254 <udp_init+0x20>)
 801524e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015250:	bf00      	nop
 8015252:	bd80      	pop	{r7, pc}
 8015254:	24000030 	.word	0x24000030

08015258 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	4613      	mov	r3, r2
 8015264:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d105      	bne.n	8015278 <udp_input_local_match+0x20>
 801526c:	4b27      	ldr	r3, [pc, #156]	@ (801530c <udp_input_local_match+0xb4>)
 801526e:	2287      	movs	r2, #135	@ 0x87
 8015270:	4927      	ldr	r1, [pc, #156]	@ (8015310 <udp_input_local_match+0xb8>)
 8015272:	4828      	ldr	r0, [pc, #160]	@ (8015314 <udp_input_local_match+0xbc>)
 8015274:	f000 fa9a 	bl	80157ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d105      	bne.n	801528a <udp_input_local_match+0x32>
 801527e:	4b23      	ldr	r3, [pc, #140]	@ (801530c <udp_input_local_match+0xb4>)
 8015280:	2288      	movs	r2, #136	@ 0x88
 8015282:	4925      	ldr	r1, [pc, #148]	@ (8015318 <udp_input_local_match+0xc0>)
 8015284:	4823      	ldr	r0, [pc, #140]	@ (8015314 <udp_input_local_match+0xbc>)
 8015286:	f000 fa91 	bl	80157ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	7a1b      	ldrb	r3, [r3, #8]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d00b      	beq.n	80152aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	7a1a      	ldrb	r2, [r3, #8]
 8015296:	4b21      	ldr	r3, [pc, #132]	@ (801531c <udp_input_local_match+0xc4>)
 8015298:	685b      	ldr	r3, [r3, #4]
 801529a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801529e:	3301      	adds	r3, #1
 80152a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d001      	beq.n	80152aa <udp_input_local_match+0x52>
    return 0;
 80152a6:	2300      	movs	r3, #0
 80152a8:	e02b      	b.n	8015302 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80152aa:	79fb      	ldrb	r3, [r7, #7]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d018      	beq.n	80152e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d013      	beq.n	80152de <udp_input_local_match+0x86>
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d00f      	beq.n	80152de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152be:	4b17      	ldr	r3, [pc, #92]	@ (801531c <udp_input_local_match+0xc4>)
 80152c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152c6:	d00a      	beq.n	80152de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	4b13      	ldr	r3, [pc, #76]	@ (801531c <udp_input_local_match+0xc4>)
 80152ce:	695b      	ldr	r3, [r3, #20]
 80152d0:	405a      	eors	r2, r3
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	3308      	adds	r3, #8
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d110      	bne.n	8015300 <udp_input_local_match+0xa8>
          return 1;
 80152de:	2301      	movs	r3, #1
 80152e0:	e00f      	b.n	8015302 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d009      	beq.n	80152fc <udp_input_local_match+0xa4>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d005      	beq.n	80152fc <udp_input_local_match+0xa4>
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	4b09      	ldr	r3, [pc, #36]	@ (801531c <udp_input_local_match+0xc4>)
 80152f6:	695b      	ldr	r3, [r3, #20]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d101      	bne.n	8015300 <udp_input_local_match+0xa8>
        return 1;
 80152fc:	2301      	movs	r3, #1
 80152fe:	e000      	b.n	8015302 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015300:	2300      	movs	r3, #0
}
 8015302:	4618      	mov	r0, r3
 8015304:	3710      	adds	r7, #16
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	08019314 	.word	0x08019314
 8015310:	0801937c 	.word	0x0801937c
 8015314:	080193a0 	.word	0x080193a0
 8015318:	080193c8 	.word	0x080193c8
 801531c:	24009b74 	.word	0x24009b74

08015320 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015320:	b590      	push	{r4, r7, lr}
 8015322:	b08d      	sub	sp, #52	@ 0x34
 8015324:	af02      	add	r7, sp, #8
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801532a:	2300      	movs	r3, #0
 801532c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 801532e:	f7f1 f835 	bl	800639c <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d105      	bne.n	8015344 <udp_input+0x24>
 8015338:	4b7c      	ldr	r3, [pc, #496]	@ (801552c <udp_input+0x20c>)
 801533a:	22cf      	movs	r2, #207	@ 0xcf
 801533c:	497c      	ldr	r1, [pc, #496]	@ (8015530 <udp_input+0x210>)
 801533e:	487d      	ldr	r0, [pc, #500]	@ (8015534 <udp_input+0x214>)
 8015340:	f000 fa34 	bl	80157ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d105      	bne.n	8015356 <udp_input+0x36>
 801534a:	4b78      	ldr	r3, [pc, #480]	@ (801552c <udp_input+0x20c>)
 801534c:	22d0      	movs	r2, #208	@ 0xd0
 801534e:	497a      	ldr	r1, [pc, #488]	@ (8015538 <udp_input+0x218>)
 8015350:	4878      	ldr	r0, [pc, #480]	@ (8015534 <udp_input+0x214>)
 8015352:	f000 fa2b 	bl	80157ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	895b      	ldrh	r3, [r3, #10]
 801535a:	2b07      	cmp	r3, #7
 801535c:	d803      	bhi.n	8015366 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7f8 fe90 	bl	800e084 <pbuf_free>
    goto end;
 8015364:	e0de      	b.n	8015524 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801536c:	4b73      	ldr	r3, [pc, #460]	@ (801553c <udp_input+0x21c>)
 801536e:	695b      	ldr	r3, [r3, #20]
 8015370:	4a72      	ldr	r2, [pc, #456]	@ (801553c <udp_input+0x21c>)
 8015372:	6812      	ldr	r2, [r2, #0]
 8015374:	4611      	mov	r1, r2
 8015376:	4618      	mov	r0, r3
 8015378:	f7f6 fc62 	bl	800bc40 <ip4_addr_isbroadcast_u32>
 801537c:	4603      	mov	r3, r0
 801537e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015380:	697b      	ldr	r3, [r7, #20]
 8015382:	881b      	ldrh	r3, [r3, #0]
 8015384:	b29b      	uxth	r3, r3
 8015386:	4618      	mov	r0, r3
 8015388:	f7f4 fee0 	bl	800a14c <lwip_htons>
 801538c:	4603      	mov	r3, r0
 801538e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	885b      	ldrh	r3, [r3, #2]
 8015394:	b29b      	uxth	r3, r3
 8015396:	4618      	mov	r0, r3
 8015398:	f7f4 fed8 	bl	800a14c <lwip_htons>
 801539c:	4603      	mov	r3, r0
 801539e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80153a0:	2300      	movs	r3, #0
 80153a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80153a4:	2300      	movs	r3, #0
 80153a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80153a8:	2300      	movs	r3, #0
 80153aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153ac:	4b64      	ldr	r3, [pc, #400]	@ (8015540 <udp_input+0x220>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80153b2:	e054      	b.n	801545e <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80153b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b6:	8a5b      	ldrh	r3, [r3, #18]
 80153b8:	89fa      	ldrh	r2, [r7, #14]
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d14a      	bne.n	8015454 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80153be:	7cfb      	ldrb	r3, [r7, #19]
 80153c0:	461a      	mov	r2, r3
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80153c6:	f7ff ff47 	bl	8015258 <udp_input_local_match>
 80153ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d041      	beq.n	8015454 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80153d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153d2:	7c1b      	ldrb	r3, [r3, #16]
 80153d4:	f003 0304 	and.w	r3, r3, #4
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d11d      	bne.n	8015418 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d102      	bne.n	80153e8 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80153e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153e4:	61fb      	str	r3, [r7, #28]
 80153e6:	e017      	b.n	8015418 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80153e8:	7cfb      	ldrb	r3, [r7, #19]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d014      	beq.n	8015418 <udp_input+0xf8>
 80153ee:	4b53      	ldr	r3, [pc, #332]	@ (801553c <udp_input+0x21c>)
 80153f0:	695b      	ldr	r3, [r3, #20]
 80153f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153f6:	d10f      	bne.n	8015418 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	3304      	adds	r3, #4
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	429a      	cmp	r2, r3
 8015404:	d008      	beq.n	8015418 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	3304      	adds	r3, #4
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	429a      	cmp	r2, r3
 8015412:	d101      	bne.n	8015418 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8015414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015416:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541a:	8a9b      	ldrh	r3, [r3, #20]
 801541c:	8a3a      	ldrh	r2, [r7, #16]
 801541e:	429a      	cmp	r2, r3
 8015420:	d118      	bne.n	8015454 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015424:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015426:	2b00      	cmp	r3, #0
 8015428:	d005      	beq.n	8015436 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801542c:	685a      	ldr	r2, [r3, #4]
 801542e:	4b43      	ldr	r3, [pc, #268]	@ (801553c <udp_input+0x21c>)
 8015430:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015432:	429a      	cmp	r2, r3
 8015434:	d10e      	bne.n	8015454 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015436:	6a3b      	ldr	r3, [r7, #32]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d014      	beq.n	8015466 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801543e:	68da      	ldr	r2, [r3, #12]
 8015440:	6a3b      	ldr	r3, [r7, #32]
 8015442:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015444:	4b3e      	ldr	r3, [pc, #248]	@ (8015540 <udp_input+0x220>)
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801544a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801544c:	4a3c      	ldr	r2, [pc, #240]	@ (8015540 <udp_input+0x220>)
 801544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015450:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015452:	e008      	b.n	8015466 <udp_input+0x146>
      }
    }

    prev = pcb;
 8015454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015456:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	627b      	str	r3, [r7, #36]	@ 0x24
 801545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015460:	2b00      	cmp	r3, #0
 8015462:	d1a7      	bne.n	80153b4 <udp_input+0x94>
 8015464:	e000      	b.n	8015468 <udp_input+0x148>
        break;
 8015466:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801546a:	2b00      	cmp	r3, #0
 801546c:	d101      	bne.n	8015472 <udp_input+0x152>
    pcb = uncon_pcb;
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015474:	2b00      	cmp	r3, #0
 8015476:	d002      	beq.n	801547e <udp_input+0x15e>
    for_us = 1;
 8015478:	2301      	movs	r3, #1
 801547a:	76fb      	strb	r3, [r7, #27]
 801547c:	e00a      	b.n	8015494 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	3304      	adds	r3, #4
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	4b2d      	ldr	r3, [pc, #180]	@ (801553c <udp_input+0x21c>)
 8015486:	695b      	ldr	r3, [r3, #20]
 8015488:	429a      	cmp	r2, r3
 801548a:	bf0c      	ite	eq
 801548c:	2301      	moveq	r3, #1
 801548e:	2300      	movne	r3, #0
 8015490:	b2db      	uxtb	r3, r3
 8015492:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015494:	7efb      	ldrb	r3, [r7, #27]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d041      	beq.n	801551e <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801549a:	2108      	movs	r1, #8
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f7f8 fd6b 	bl	800df78 <pbuf_remove_header>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d00a      	beq.n	80154be <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80154a8:	4b20      	ldr	r3, [pc, #128]	@ (801552c <udp_input+0x20c>)
 80154aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80154ae:	4925      	ldr	r1, [pc, #148]	@ (8015544 <udp_input+0x224>)
 80154b0:	4820      	ldr	r0, [pc, #128]	@ (8015534 <udp_input+0x214>)
 80154b2:	f000 f97b 	bl	80157ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f7f8 fde4 	bl	800e084 <pbuf_free>
      goto end;
 80154bc:	e032      	b.n	8015524 <udp_input+0x204>
    }

    if (pcb != NULL) {
 80154be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d012      	beq.n	80154ea <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80154c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c6:	699b      	ldr	r3, [r3, #24]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d00a      	beq.n	80154e2 <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80154cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ce:	699c      	ldr	r4, [r3, #24]
 80154d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154d2:	69d8      	ldr	r0, [r3, #28]
 80154d4:	8a3b      	ldrh	r3, [r7, #16]
 80154d6:	9300      	str	r3, [sp, #0]
 80154d8:	4b1b      	ldr	r3, [pc, #108]	@ (8015548 <udp_input+0x228>)
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80154e0:	e021      	b.n	8015526 <udp_input+0x206>
        pbuf_free(p);
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f7f8 fdce 	bl	800e084 <pbuf_free>
        goto end;
 80154e8:	e01c      	b.n	8015524 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80154ea:	7cfb      	ldrb	r3, [r7, #19]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d112      	bne.n	8015516 <udp_input+0x1f6>
 80154f0:	4b12      	ldr	r3, [pc, #72]	@ (801553c <udp_input+0x21c>)
 80154f2:	695b      	ldr	r3, [r3, #20]
 80154f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80154f8:	2be0      	cmp	r3, #224	@ 0xe0
 80154fa:	d00c      	beq.n	8015516 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80154fc:	4b0f      	ldr	r3, [pc, #60]	@ (801553c <udp_input+0x21c>)
 80154fe:	899b      	ldrh	r3, [r3, #12]
 8015500:	3308      	adds	r3, #8
 8015502:	b29b      	uxth	r3, r3
 8015504:	b21b      	sxth	r3, r3
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7f8 fda8 	bl	800e05e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801550e:	2103      	movs	r1, #3
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f7f5 ff93 	bl	800b43c <icmp_dest_unreach>
      pbuf_free(p);
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f7f8 fdb4 	bl	800e084 <pbuf_free>
  return;
 801551c:	e003      	b.n	8015526 <udp_input+0x206>
    pbuf_free(p);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7f8 fdb0 	bl	800e084 <pbuf_free>
  return;
 8015524:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015526:	372c      	adds	r7, #44	@ 0x2c
 8015528:	46bd      	mov	sp, r7
 801552a:	bd90      	pop	{r4, r7, pc}
 801552c:	08019314 	.word	0x08019314
 8015530:	080193f0 	.word	0x080193f0
 8015534:	080193a0 	.word	0x080193a0
 8015538:	08019408 	.word	0x08019408
 801553c:	24009b74 	.word	0x24009b74
 8015540:	240106b0 	.word	0x240106b0
 8015544:	08019424 	.word	0x08019424
 8015548:	24009b84 	.word	0x24009b84

0801554c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801554c:	b480      	push	{r7}
 801554e:	b085      	sub	sp, #20
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01e      	beq.n	801559a <udp_netif_ip_addr_changed+0x4e>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d01a      	beq.n	801559a <udp_netif_ip_addr_changed+0x4e>
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d017      	beq.n	801559a <udp_netif_ip_addr_changed+0x4e>
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d013      	beq.n	801559a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015572:	4b0d      	ldr	r3, [pc, #52]	@ (80155a8 <udp_netif_ip_addr_changed+0x5c>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	60fb      	str	r3, [r7, #12]
 8015578:	e00c      	b.n	8015594 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	429a      	cmp	r2, r3
 8015584:	d103      	bne.n	801558e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	60fb      	str	r3, [r7, #12]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d1ef      	bne.n	801557a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801559a:	bf00      	nop
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	240106b0 	.word	0x240106b0

080155ac <rand>:
 80155ac:	4b16      	ldr	r3, [pc, #88]	@ (8015608 <rand+0x5c>)
 80155ae:	b510      	push	{r4, lr}
 80155b0:	681c      	ldr	r4, [r3, #0]
 80155b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155b4:	b9b3      	cbnz	r3, 80155e4 <rand+0x38>
 80155b6:	2018      	movs	r0, #24
 80155b8:	f000 faa0 	bl	8015afc <malloc>
 80155bc:	4602      	mov	r2, r0
 80155be:	6320      	str	r0, [r4, #48]	@ 0x30
 80155c0:	b920      	cbnz	r0, 80155cc <rand+0x20>
 80155c2:	4b12      	ldr	r3, [pc, #72]	@ (801560c <rand+0x60>)
 80155c4:	4812      	ldr	r0, [pc, #72]	@ (8015610 <rand+0x64>)
 80155c6:	2152      	movs	r1, #82	@ 0x52
 80155c8:	f000 fa30 	bl	8015a2c <__assert_func>
 80155cc:	4911      	ldr	r1, [pc, #68]	@ (8015614 <rand+0x68>)
 80155ce:	4b12      	ldr	r3, [pc, #72]	@ (8015618 <rand+0x6c>)
 80155d0:	e9c0 1300 	strd	r1, r3, [r0]
 80155d4:	4b11      	ldr	r3, [pc, #68]	@ (801561c <rand+0x70>)
 80155d6:	6083      	str	r3, [r0, #8]
 80155d8:	230b      	movs	r3, #11
 80155da:	8183      	strh	r3, [r0, #12]
 80155dc:	2100      	movs	r1, #0
 80155de:	2001      	movs	r0, #1
 80155e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80155e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80155e6:	480e      	ldr	r0, [pc, #56]	@ (8015620 <rand+0x74>)
 80155e8:	690b      	ldr	r3, [r1, #16]
 80155ea:	694c      	ldr	r4, [r1, #20]
 80155ec:	4a0d      	ldr	r2, [pc, #52]	@ (8015624 <rand+0x78>)
 80155ee:	4358      	muls	r0, r3
 80155f0:	fb02 0004 	mla	r0, r2, r4, r0
 80155f4:	fba3 3202 	umull	r3, r2, r3, r2
 80155f8:	3301      	adds	r3, #1
 80155fa:	eb40 0002 	adc.w	r0, r0, r2
 80155fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015602:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015606:	bd10      	pop	{r4, pc}
 8015608:	24000040 	.word	0x24000040
 801560c:	08019e54 	.word	0x08019e54
 8015610:	08019e6b 	.word	0x08019e6b
 8015614:	abcd330e 	.word	0xabcd330e
 8015618:	e66d1234 	.word	0xe66d1234
 801561c:	0005deec 	.word	0x0005deec
 8015620:	5851f42d 	.word	0x5851f42d
 8015624:	4c957f2d 	.word	0x4c957f2d

08015628 <std>:
 8015628:	2300      	movs	r3, #0
 801562a:	b510      	push	{r4, lr}
 801562c:	4604      	mov	r4, r0
 801562e:	e9c0 3300 	strd	r3, r3, [r0]
 8015632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015636:	6083      	str	r3, [r0, #8]
 8015638:	8181      	strh	r1, [r0, #12]
 801563a:	6643      	str	r3, [r0, #100]	@ 0x64
 801563c:	81c2      	strh	r2, [r0, #14]
 801563e:	6183      	str	r3, [r0, #24]
 8015640:	4619      	mov	r1, r3
 8015642:	2208      	movs	r2, #8
 8015644:	305c      	adds	r0, #92	@ 0x5c
 8015646:	f000 f916 	bl	8015876 <memset>
 801564a:	4b0d      	ldr	r3, [pc, #52]	@ (8015680 <std+0x58>)
 801564c:	6263      	str	r3, [r4, #36]	@ 0x24
 801564e:	4b0d      	ldr	r3, [pc, #52]	@ (8015684 <std+0x5c>)
 8015650:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015652:	4b0d      	ldr	r3, [pc, #52]	@ (8015688 <std+0x60>)
 8015654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015656:	4b0d      	ldr	r3, [pc, #52]	@ (801568c <std+0x64>)
 8015658:	6323      	str	r3, [r4, #48]	@ 0x30
 801565a:	4b0d      	ldr	r3, [pc, #52]	@ (8015690 <std+0x68>)
 801565c:	6224      	str	r4, [r4, #32]
 801565e:	429c      	cmp	r4, r3
 8015660:	d006      	beq.n	8015670 <std+0x48>
 8015662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015666:	4294      	cmp	r4, r2
 8015668:	d002      	beq.n	8015670 <std+0x48>
 801566a:	33d0      	adds	r3, #208	@ 0xd0
 801566c:	429c      	cmp	r4, r3
 801566e:	d105      	bne.n	801567c <std+0x54>
 8015670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015678:	f000 b9c6 	b.w	8015a08 <__retarget_lock_init_recursive>
 801567c:	bd10      	pop	{r4, pc}
 801567e:	bf00      	nop
 8015680:	080157d1 	.word	0x080157d1
 8015684:	080157f3 	.word	0x080157f3
 8015688:	0801582b 	.word	0x0801582b
 801568c:	0801584f 	.word	0x0801584f
 8015690:	240106b4 	.word	0x240106b4

08015694 <stdio_exit_handler>:
 8015694:	4a02      	ldr	r2, [pc, #8]	@ (80156a0 <stdio_exit_handler+0xc>)
 8015696:	4903      	ldr	r1, [pc, #12]	@ (80156a4 <stdio_exit_handler+0x10>)
 8015698:	4803      	ldr	r0, [pc, #12]	@ (80156a8 <stdio_exit_handler+0x14>)
 801569a:	f000 b869 	b.w	8015770 <_fwalk_sglue>
 801569e:	bf00      	nop
 80156a0:	24000034 	.word	0x24000034
 80156a4:	08016311 	.word	0x08016311
 80156a8:	24000044 	.word	0x24000044

080156ac <cleanup_stdio>:
 80156ac:	6841      	ldr	r1, [r0, #4]
 80156ae:	4b0c      	ldr	r3, [pc, #48]	@ (80156e0 <cleanup_stdio+0x34>)
 80156b0:	4299      	cmp	r1, r3
 80156b2:	b510      	push	{r4, lr}
 80156b4:	4604      	mov	r4, r0
 80156b6:	d001      	beq.n	80156bc <cleanup_stdio+0x10>
 80156b8:	f000 fe2a 	bl	8016310 <_fflush_r>
 80156bc:	68a1      	ldr	r1, [r4, #8]
 80156be:	4b09      	ldr	r3, [pc, #36]	@ (80156e4 <cleanup_stdio+0x38>)
 80156c0:	4299      	cmp	r1, r3
 80156c2:	d002      	beq.n	80156ca <cleanup_stdio+0x1e>
 80156c4:	4620      	mov	r0, r4
 80156c6:	f000 fe23 	bl	8016310 <_fflush_r>
 80156ca:	68e1      	ldr	r1, [r4, #12]
 80156cc:	4b06      	ldr	r3, [pc, #24]	@ (80156e8 <cleanup_stdio+0x3c>)
 80156ce:	4299      	cmp	r1, r3
 80156d0:	d004      	beq.n	80156dc <cleanup_stdio+0x30>
 80156d2:	4620      	mov	r0, r4
 80156d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d8:	f000 be1a 	b.w	8016310 <_fflush_r>
 80156dc:	bd10      	pop	{r4, pc}
 80156de:	bf00      	nop
 80156e0:	240106b4 	.word	0x240106b4
 80156e4:	2401071c 	.word	0x2401071c
 80156e8:	24010784 	.word	0x24010784

080156ec <global_stdio_init.part.0>:
 80156ec:	b510      	push	{r4, lr}
 80156ee:	4b0b      	ldr	r3, [pc, #44]	@ (801571c <global_stdio_init.part.0+0x30>)
 80156f0:	4c0b      	ldr	r4, [pc, #44]	@ (8015720 <global_stdio_init.part.0+0x34>)
 80156f2:	4a0c      	ldr	r2, [pc, #48]	@ (8015724 <global_stdio_init.part.0+0x38>)
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	4620      	mov	r0, r4
 80156f8:	2200      	movs	r2, #0
 80156fa:	2104      	movs	r1, #4
 80156fc:	f7ff ff94 	bl	8015628 <std>
 8015700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015704:	2201      	movs	r2, #1
 8015706:	2109      	movs	r1, #9
 8015708:	f7ff ff8e 	bl	8015628 <std>
 801570c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015710:	2202      	movs	r2, #2
 8015712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015716:	2112      	movs	r1, #18
 8015718:	f7ff bf86 	b.w	8015628 <std>
 801571c:	240107ec 	.word	0x240107ec
 8015720:	240106b4 	.word	0x240106b4
 8015724:	08015695 	.word	0x08015695

08015728 <__sfp_lock_acquire>:
 8015728:	4801      	ldr	r0, [pc, #4]	@ (8015730 <__sfp_lock_acquire+0x8>)
 801572a:	f000 b96e 	b.w	8015a0a <__retarget_lock_acquire_recursive>
 801572e:	bf00      	nop
 8015730:	240107f5 	.word	0x240107f5

08015734 <__sfp_lock_release>:
 8015734:	4801      	ldr	r0, [pc, #4]	@ (801573c <__sfp_lock_release+0x8>)
 8015736:	f000 b969 	b.w	8015a0c <__retarget_lock_release_recursive>
 801573a:	bf00      	nop
 801573c:	240107f5 	.word	0x240107f5

08015740 <__sinit>:
 8015740:	b510      	push	{r4, lr}
 8015742:	4604      	mov	r4, r0
 8015744:	f7ff fff0 	bl	8015728 <__sfp_lock_acquire>
 8015748:	6a23      	ldr	r3, [r4, #32]
 801574a:	b11b      	cbz	r3, 8015754 <__sinit+0x14>
 801574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015750:	f7ff bff0 	b.w	8015734 <__sfp_lock_release>
 8015754:	4b04      	ldr	r3, [pc, #16]	@ (8015768 <__sinit+0x28>)
 8015756:	6223      	str	r3, [r4, #32]
 8015758:	4b04      	ldr	r3, [pc, #16]	@ (801576c <__sinit+0x2c>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1f5      	bne.n	801574c <__sinit+0xc>
 8015760:	f7ff ffc4 	bl	80156ec <global_stdio_init.part.0>
 8015764:	e7f2      	b.n	801574c <__sinit+0xc>
 8015766:	bf00      	nop
 8015768:	080156ad 	.word	0x080156ad
 801576c:	240107ec 	.word	0x240107ec

08015770 <_fwalk_sglue>:
 8015770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015774:	4607      	mov	r7, r0
 8015776:	4688      	mov	r8, r1
 8015778:	4614      	mov	r4, r2
 801577a:	2600      	movs	r6, #0
 801577c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015780:	f1b9 0901 	subs.w	r9, r9, #1
 8015784:	d505      	bpl.n	8015792 <_fwalk_sglue+0x22>
 8015786:	6824      	ldr	r4, [r4, #0]
 8015788:	2c00      	cmp	r4, #0
 801578a:	d1f7      	bne.n	801577c <_fwalk_sglue+0xc>
 801578c:	4630      	mov	r0, r6
 801578e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015792:	89ab      	ldrh	r3, [r5, #12]
 8015794:	2b01      	cmp	r3, #1
 8015796:	d907      	bls.n	80157a8 <_fwalk_sglue+0x38>
 8015798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801579c:	3301      	adds	r3, #1
 801579e:	d003      	beq.n	80157a8 <_fwalk_sglue+0x38>
 80157a0:	4629      	mov	r1, r5
 80157a2:	4638      	mov	r0, r7
 80157a4:	47c0      	blx	r8
 80157a6:	4306      	orrs	r6, r0
 80157a8:	3568      	adds	r5, #104	@ 0x68
 80157aa:	e7e9      	b.n	8015780 <_fwalk_sglue+0x10>

080157ac <iprintf>:
 80157ac:	b40f      	push	{r0, r1, r2, r3}
 80157ae:	b507      	push	{r0, r1, r2, lr}
 80157b0:	4906      	ldr	r1, [pc, #24]	@ (80157cc <iprintf+0x20>)
 80157b2:	ab04      	add	r3, sp, #16
 80157b4:	6808      	ldr	r0, [r1, #0]
 80157b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80157ba:	6881      	ldr	r1, [r0, #8]
 80157bc:	9301      	str	r3, [sp, #4]
 80157be:	f000 fa7d 	bl	8015cbc <_vfiprintf_r>
 80157c2:	b003      	add	sp, #12
 80157c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80157c8:	b004      	add	sp, #16
 80157ca:	4770      	bx	lr
 80157cc:	24000040 	.word	0x24000040

080157d0 <__sread>:
 80157d0:	b510      	push	{r4, lr}
 80157d2:	460c      	mov	r4, r1
 80157d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d8:	f000 f8ce 	bl	8015978 <_read_r>
 80157dc:	2800      	cmp	r0, #0
 80157de:	bfab      	itete	ge
 80157e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80157e2:	89a3      	ldrhlt	r3, [r4, #12]
 80157e4:	181b      	addge	r3, r3, r0
 80157e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80157ea:	bfac      	ite	ge
 80157ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80157ee:	81a3      	strhlt	r3, [r4, #12]
 80157f0:	bd10      	pop	{r4, pc}

080157f2 <__swrite>:
 80157f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157f6:	461f      	mov	r7, r3
 80157f8:	898b      	ldrh	r3, [r1, #12]
 80157fa:	05db      	lsls	r3, r3, #23
 80157fc:	4605      	mov	r5, r0
 80157fe:	460c      	mov	r4, r1
 8015800:	4616      	mov	r6, r2
 8015802:	d505      	bpl.n	8015810 <__swrite+0x1e>
 8015804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015808:	2302      	movs	r3, #2
 801580a:	2200      	movs	r2, #0
 801580c:	f000 f8a2 	bl	8015954 <_lseek_r>
 8015810:	89a3      	ldrh	r3, [r4, #12]
 8015812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801581a:	81a3      	strh	r3, [r4, #12]
 801581c:	4632      	mov	r2, r6
 801581e:	463b      	mov	r3, r7
 8015820:	4628      	mov	r0, r5
 8015822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015826:	f000 b8b9 	b.w	801599c <_write_r>

0801582a <__sseek>:
 801582a:	b510      	push	{r4, lr}
 801582c:	460c      	mov	r4, r1
 801582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015832:	f000 f88f 	bl	8015954 <_lseek_r>
 8015836:	1c43      	adds	r3, r0, #1
 8015838:	89a3      	ldrh	r3, [r4, #12]
 801583a:	bf15      	itete	ne
 801583c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801583e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015846:	81a3      	strheq	r3, [r4, #12]
 8015848:	bf18      	it	ne
 801584a:	81a3      	strhne	r3, [r4, #12]
 801584c:	bd10      	pop	{r4, pc}

0801584e <__sclose>:
 801584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015852:	f000 b819 	b.w	8015888 <_close_r>

08015856 <memcmp>:
 8015856:	b510      	push	{r4, lr}
 8015858:	3901      	subs	r1, #1
 801585a:	4402      	add	r2, r0
 801585c:	4290      	cmp	r0, r2
 801585e:	d101      	bne.n	8015864 <memcmp+0xe>
 8015860:	2000      	movs	r0, #0
 8015862:	e005      	b.n	8015870 <memcmp+0x1a>
 8015864:	7803      	ldrb	r3, [r0, #0]
 8015866:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801586a:	42a3      	cmp	r3, r4
 801586c:	d001      	beq.n	8015872 <memcmp+0x1c>
 801586e:	1b18      	subs	r0, r3, r4
 8015870:	bd10      	pop	{r4, pc}
 8015872:	3001      	adds	r0, #1
 8015874:	e7f2      	b.n	801585c <memcmp+0x6>

08015876 <memset>:
 8015876:	4402      	add	r2, r0
 8015878:	4603      	mov	r3, r0
 801587a:	4293      	cmp	r3, r2
 801587c:	d100      	bne.n	8015880 <memset+0xa>
 801587e:	4770      	bx	lr
 8015880:	f803 1b01 	strb.w	r1, [r3], #1
 8015884:	e7f9      	b.n	801587a <memset+0x4>
	...

08015888 <_close_r>:
 8015888:	b538      	push	{r3, r4, r5, lr}
 801588a:	4d06      	ldr	r5, [pc, #24]	@ (80158a4 <_close_r+0x1c>)
 801588c:	2300      	movs	r3, #0
 801588e:	4604      	mov	r4, r0
 8015890:	4608      	mov	r0, r1
 8015892:	602b      	str	r3, [r5, #0]
 8015894:	f7ec f8b8 	bl	8001a08 <_close>
 8015898:	1c43      	adds	r3, r0, #1
 801589a:	d102      	bne.n	80158a2 <_close_r+0x1a>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	b103      	cbz	r3, 80158a2 <_close_r+0x1a>
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	bd38      	pop	{r3, r4, r5, pc}
 80158a4:	240107f0 	.word	0x240107f0

080158a8 <_reclaim_reent>:
 80158a8:	4b29      	ldr	r3, [pc, #164]	@ (8015950 <_reclaim_reent+0xa8>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	4283      	cmp	r3, r0
 80158ae:	b570      	push	{r4, r5, r6, lr}
 80158b0:	4604      	mov	r4, r0
 80158b2:	d04b      	beq.n	801594c <_reclaim_reent+0xa4>
 80158b4:	69c3      	ldr	r3, [r0, #28]
 80158b6:	b1ab      	cbz	r3, 80158e4 <_reclaim_reent+0x3c>
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	b16b      	cbz	r3, 80158d8 <_reclaim_reent+0x30>
 80158bc:	2500      	movs	r5, #0
 80158be:	69e3      	ldr	r3, [r4, #28]
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	5959      	ldr	r1, [r3, r5]
 80158c4:	2900      	cmp	r1, #0
 80158c6:	d13b      	bne.n	8015940 <_reclaim_reent+0x98>
 80158c8:	3504      	adds	r5, #4
 80158ca:	2d80      	cmp	r5, #128	@ 0x80
 80158cc:	d1f7      	bne.n	80158be <_reclaim_reent+0x16>
 80158ce:	69e3      	ldr	r3, [r4, #28]
 80158d0:	4620      	mov	r0, r4
 80158d2:	68d9      	ldr	r1, [r3, #12]
 80158d4:	f000 f8c8 	bl	8015a68 <_free_r>
 80158d8:	69e3      	ldr	r3, [r4, #28]
 80158da:	6819      	ldr	r1, [r3, #0]
 80158dc:	b111      	cbz	r1, 80158e4 <_reclaim_reent+0x3c>
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 f8c2 	bl	8015a68 <_free_r>
 80158e4:	6961      	ldr	r1, [r4, #20]
 80158e6:	b111      	cbz	r1, 80158ee <_reclaim_reent+0x46>
 80158e8:	4620      	mov	r0, r4
 80158ea:	f000 f8bd 	bl	8015a68 <_free_r>
 80158ee:	69e1      	ldr	r1, [r4, #28]
 80158f0:	b111      	cbz	r1, 80158f8 <_reclaim_reent+0x50>
 80158f2:	4620      	mov	r0, r4
 80158f4:	f000 f8b8 	bl	8015a68 <_free_r>
 80158f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80158fa:	b111      	cbz	r1, 8015902 <_reclaim_reent+0x5a>
 80158fc:	4620      	mov	r0, r4
 80158fe:	f000 f8b3 	bl	8015a68 <_free_r>
 8015902:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015904:	b111      	cbz	r1, 801590c <_reclaim_reent+0x64>
 8015906:	4620      	mov	r0, r4
 8015908:	f000 f8ae 	bl	8015a68 <_free_r>
 801590c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801590e:	b111      	cbz	r1, 8015916 <_reclaim_reent+0x6e>
 8015910:	4620      	mov	r0, r4
 8015912:	f000 f8a9 	bl	8015a68 <_free_r>
 8015916:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015918:	b111      	cbz	r1, 8015920 <_reclaim_reent+0x78>
 801591a:	4620      	mov	r0, r4
 801591c:	f000 f8a4 	bl	8015a68 <_free_r>
 8015920:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015922:	b111      	cbz	r1, 801592a <_reclaim_reent+0x82>
 8015924:	4620      	mov	r0, r4
 8015926:	f000 f89f 	bl	8015a68 <_free_r>
 801592a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801592c:	b111      	cbz	r1, 8015934 <_reclaim_reent+0x8c>
 801592e:	4620      	mov	r0, r4
 8015930:	f000 f89a 	bl	8015a68 <_free_r>
 8015934:	6a23      	ldr	r3, [r4, #32]
 8015936:	b14b      	cbz	r3, 801594c <_reclaim_reent+0xa4>
 8015938:	4620      	mov	r0, r4
 801593a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801593e:	4718      	bx	r3
 8015940:	680e      	ldr	r6, [r1, #0]
 8015942:	4620      	mov	r0, r4
 8015944:	f000 f890 	bl	8015a68 <_free_r>
 8015948:	4631      	mov	r1, r6
 801594a:	e7bb      	b.n	80158c4 <_reclaim_reent+0x1c>
 801594c:	bd70      	pop	{r4, r5, r6, pc}
 801594e:	bf00      	nop
 8015950:	24000040 	.word	0x24000040

08015954 <_lseek_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4d07      	ldr	r5, [pc, #28]	@ (8015974 <_lseek_r+0x20>)
 8015958:	4604      	mov	r4, r0
 801595a:	4608      	mov	r0, r1
 801595c:	4611      	mov	r1, r2
 801595e:	2200      	movs	r2, #0
 8015960:	602a      	str	r2, [r5, #0]
 8015962:	461a      	mov	r2, r3
 8015964:	f7ec f877 	bl	8001a56 <_lseek>
 8015968:	1c43      	adds	r3, r0, #1
 801596a:	d102      	bne.n	8015972 <_lseek_r+0x1e>
 801596c:	682b      	ldr	r3, [r5, #0]
 801596e:	b103      	cbz	r3, 8015972 <_lseek_r+0x1e>
 8015970:	6023      	str	r3, [r4, #0]
 8015972:	bd38      	pop	{r3, r4, r5, pc}
 8015974:	240107f0 	.word	0x240107f0

08015978 <_read_r>:
 8015978:	b538      	push	{r3, r4, r5, lr}
 801597a:	4d07      	ldr	r5, [pc, #28]	@ (8015998 <_read_r+0x20>)
 801597c:	4604      	mov	r4, r0
 801597e:	4608      	mov	r0, r1
 8015980:	4611      	mov	r1, r2
 8015982:	2200      	movs	r2, #0
 8015984:	602a      	str	r2, [r5, #0]
 8015986:	461a      	mov	r2, r3
 8015988:	f7ec f805 	bl	8001996 <_read>
 801598c:	1c43      	adds	r3, r0, #1
 801598e:	d102      	bne.n	8015996 <_read_r+0x1e>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	b103      	cbz	r3, 8015996 <_read_r+0x1e>
 8015994:	6023      	str	r3, [r4, #0]
 8015996:	bd38      	pop	{r3, r4, r5, pc}
 8015998:	240107f0 	.word	0x240107f0

0801599c <_write_r>:
 801599c:	b538      	push	{r3, r4, r5, lr}
 801599e:	4d07      	ldr	r5, [pc, #28]	@ (80159bc <_write_r+0x20>)
 80159a0:	4604      	mov	r4, r0
 80159a2:	4608      	mov	r0, r1
 80159a4:	4611      	mov	r1, r2
 80159a6:	2200      	movs	r2, #0
 80159a8:	602a      	str	r2, [r5, #0]
 80159aa:	461a      	mov	r2, r3
 80159ac:	f7ec f810 	bl	80019d0 <_write>
 80159b0:	1c43      	adds	r3, r0, #1
 80159b2:	d102      	bne.n	80159ba <_write_r+0x1e>
 80159b4:	682b      	ldr	r3, [r5, #0]
 80159b6:	b103      	cbz	r3, 80159ba <_write_r+0x1e>
 80159b8:	6023      	str	r3, [r4, #0]
 80159ba:	bd38      	pop	{r3, r4, r5, pc}
 80159bc:	240107f0 	.word	0x240107f0

080159c0 <__libc_init_array>:
 80159c0:	b570      	push	{r4, r5, r6, lr}
 80159c2:	4d0d      	ldr	r5, [pc, #52]	@ (80159f8 <__libc_init_array+0x38>)
 80159c4:	4c0d      	ldr	r4, [pc, #52]	@ (80159fc <__libc_init_array+0x3c>)
 80159c6:	1b64      	subs	r4, r4, r5
 80159c8:	10a4      	asrs	r4, r4, #2
 80159ca:	2600      	movs	r6, #0
 80159cc:	42a6      	cmp	r6, r4
 80159ce:	d109      	bne.n	80159e4 <__libc_init_array+0x24>
 80159d0:	4d0b      	ldr	r5, [pc, #44]	@ (8015a00 <__libc_init_array+0x40>)
 80159d2:	4c0c      	ldr	r4, [pc, #48]	@ (8015a04 <__libc_init_array+0x44>)
 80159d4:	f000 fe4a 	bl	801666c <_init>
 80159d8:	1b64      	subs	r4, r4, r5
 80159da:	10a4      	asrs	r4, r4, #2
 80159dc:	2600      	movs	r6, #0
 80159de:	42a6      	cmp	r6, r4
 80159e0:	d105      	bne.n	80159ee <__libc_init_array+0x2e>
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80159e8:	4798      	blx	r3
 80159ea:	3601      	adds	r6, #1
 80159ec:	e7ee      	b.n	80159cc <__libc_init_array+0xc>
 80159ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80159f2:	4798      	blx	r3
 80159f4:	3601      	adds	r6, #1
 80159f6:	e7f2      	b.n	80159de <__libc_init_array+0x1e>
 80159f8:	08019f3c 	.word	0x08019f3c
 80159fc:	08019f3c 	.word	0x08019f3c
 8015a00:	08019f3c 	.word	0x08019f3c
 8015a04:	08019f40 	.word	0x08019f40

08015a08 <__retarget_lock_init_recursive>:
 8015a08:	4770      	bx	lr

08015a0a <__retarget_lock_acquire_recursive>:
 8015a0a:	4770      	bx	lr

08015a0c <__retarget_lock_release_recursive>:
 8015a0c:	4770      	bx	lr

08015a0e <memcpy>:
 8015a0e:	440a      	add	r2, r1
 8015a10:	4291      	cmp	r1, r2
 8015a12:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a16:	d100      	bne.n	8015a1a <memcpy+0xc>
 8015a18:	4770      	bx	lr
 8015a1a:	b510      	push	{r4, lr}
 8015a1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a24:	4291      	cmp	r1, r2
 8015a26:	d1f9      	bne.n	8015a1c <memcpy+0xe>
 8015a28:	bd10      	pop	{r4, pc}
	...

08015a2c <__assert_func>:
 8015a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a2e:	4614      	mov	r4, r2
 8015a30:	461a      	mov	r2, r3
 8015a32:	4b09      	ldr	r3, [pc, #36]	@ (8015a58 <__assert_func+0x2c>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4605      	mov	r5, r0
 8015a38:	68d8      	ldr	r0, [r3, #12]
 8015a3a:	b954      	cbnz	r4, 8015a52 <__assert_func+0x26>
 8015a3c:	4b07      	ldr	r3, [pc, #28]	@ (8015a5c <__assert_func+0x30>)
 8015a3e:	461c      	mov	r4, r3
 8015a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a44:	9100      	str	r1, [sp, #0]
 8015a46:	462b      	mov	r3, r5
 8015a48:	4905      	ldr	r1, [pc, #20]	@ (8015a60 <__assert_func+0x34>)
 8015a4a:	f000 fc89 	bl	8016360 <fiprintf>
 8015a4e:	f000 fd3d 	bl	80164cc <abort>
 8015a52:	4b04      	ldr	r3, [pc, #16]	@ (8015a64 <__assert_func+0x38>)
 8015a54:	e7f4      	b.n	8015a40 <__assert_func+0x14>
 8015a56:	bf00      	nop
 8015a58:	24000040 	.word	0x24000040
 8015a5c:	08019efe 	.word	0x08019efe
 8015a60:	08019ed0 	.word	0x08019ed0
 8015a64:	08019ec3 	.word	0x08019ec3

08015a68 <_free_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	4605      	mov	r5, r0
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	d041      	beq.n	8015af4 <_free_r+0x8c>
 8015a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a74:	1f0c      	subs	r4, r1, #4
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	bfb8      	it	lt
 8015a7a:	18e4      	addlt	r4, r4, r3
 8015a7c:	f000 f8e8 	bl	8015c50 <__malloc_lock>
 8015a80:	4a1d      	ldr	r2, [pc, #116]	@ (8015af8 <_free_r+0x90>)
 8015a82:	6813      	ldr	r3, [r2, #0]
 8015a84:	b933      	cbnz	r3, 8015a94 <_free_r+0x2c>
 8015a86:	6063      	str	r3, [r4, #4]
 8015a88:	6014      	str	r4, [r2, #0]
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a90:	f000 b8e4 	b.w	8015c5c <__malloc_unlock>
 8015a94:	42a3      	cmp	r3, r4
 8015a96:	d908      	bls.n	8015aaa <_free_r+0x42>
 8015a98:	6820      	ldr	r0, [r4, #0]
 8015a9a:	1821      	adds	r1, r4, r0
 8015a9c:	428b      	cmp	r3, r1
 8015a9e:	bf01      	itttt	eq
 8015aa0:	6819      	ldreq	r1, [r3, #0]
 8015aa2:	685b      	ldreq	r3, [r3, #4]
 8015aa4:	1809      	addeq	r1, r1, r0
 8015aa6:	6021      	streq	r1, [r4, #0]
 8015aa8:	e7ed      	b.n	8015a86 <_free_r+0x1e>
 8015aaa:	461a      	mov	r2, r3
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	b10b      	cbz	r3, 8015ab4 <_free_r+0x4c>
 8015ab0:	42a3      	cmp	r3, r4
 8015ab2:	d9fa      	bls.n	8015aaa <_free_r+0x42>
 8015ab4:	6811      	ldr	r1, [r2, #0]
 8015ab6:	1850      	adds	r0, r2, r1
 8015ab8:	42a0      	cmp	r0, r4
 8015aba:	d10b      	bne.n	8015ad4 <_free_r+0x6c>
 8015abc:	6820      	ldr	r0, [r4, #0]
 8015abe:	4401      	add	r1, r0
 8015ac0:	1850      	adds	r0, r2, r1
 8015ac2:	4283      	cmp	r3, r0
 8015ac4:	6011      	str	r1, [r2, #0]
 8015ac6:	d1e0      	bne.n	8015a8a <_free_r+0x22>
 8015ac8:	6818      	ldr	r0, [r3, #0]
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	6053      	str	r3, [r2, #4]
 8015ace:	4408      	add	r0, r1
 8015ad0:	6010      	str	r0, [r2, #0]
 8015ad2:	e7da      	b.n	8015a8a <_free_r+0x22>
 8015ad4:	d902      	bls.n	8015adc <_free_r+0x74>
 8015ad6:	230c      	movs	r3, #12
 8015ad8:	602b      	str	r3, [r5, #0]
 8015ada:	e7d6      	b.n	8015a8a <_free_r+0x22>
 8015adc:	6820      	ldr	r0, [r4, #0]
 8015ade:	1821      	adds	r1, r4, r0
 8015ae0:	428b      	cmp	r3, r1
 8015ae2:	bf04      	itt	eq
 8015ae4:	6819      	ldreq	r1, [r3, #0]
 8015ae6:	685b      	ldreq	r3, [r3, #4]
 8015ae8:	6063      	str	r3, [r4, #4]
 8015aea:	bf04      	itt	eq
 8015aec:	1809      	addeq	r1, r1, r0
 8015aee:	6021      	streq	r1, [r4, #0]
 8015af0:	6054      	str	r4, [r2, #4]
 8015af2:	e7ca      	b.n	8015a8a <_free_r+0x22>
 8015af4:	bd38      	pop	{r3, r4, r5, pc}
 8015af6:	bf00      	nop
 8015af8:	240107fc 	.word	0x240107fc

08015afc <malloc>:
 8015afc:	4b02      	ldr	r3, [pc, #8]	@ (8015b08 <malloc+0xc>)
 8015afe:	4601      	mov	r1, r0
 8015b00:	6818      	ldr	r0, [r3, #0]
 8015b02:	f000 b825 	b.w	8015b50 <_malloc_r>
 8015b06:	bf00      	nop
 8015b08:	24000040 	.word	0x24000040

08015b0c <sbrk_aligned>:
 8015b0c:	b570      	push	{r4, r5, r6, lr}
 8015b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8015b4c <sbrk_aligned+0x40>)
 8015b10:	460c      	mov	r4, r1
 8015b12:	6831      	ldr	r1, [r6, #0]
 8015b14:	4605      	mov	r5, r0
 8015b16:	b911      	cbnz	r1, 8015b1e <sbrk_aligned+0x12>
 8015b18:	f000 fcc8 	bl	80164ac <_sbrk_r>
 8015b1c:	6030      	str	r0, [r6, #0]
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4628      	mov	r0, r5
 8015b22:	f000 fcc3 	bl	80164ac <_sbrk_r>
 8015b26:	1c43      	adds	r3, r0, #1
 8015b28:	d103      	bne.n	8015b32 <sbrk_aligned+0x26>
 8015b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8015b2e:	4620      	mov	r0, r4
 8015b30:	bd70      	pop	{r4, r5, r6, pc}
 8015b32:	1cc4      	adds	r4, r0, #3
 8015b34:	f024 0403 	bic.w	r4, r4, #3
 8015b38:	42a0      	cmp	r0, r4
 8015b3a:	d0f8      	beq.n	8015b2e <sbrk_aligned+0x22>
 8015b3c:	1a21      	subs	r1, r4, r0
 8015b3e:	4628      	mov	r0, r5
 8015b40:	f000 fcb4 	bl	80164ac <_sbrk_r>
 8015b44:	3001      	adds	r0, #1
 8015b46:	d1f2      	bne.n	8015b2e <sbrk_aligned+0x22>
 8015b48:	e7ef      	b.n	8015b2a <sbrk_aligned+0x1e>
 8015b4a:	bf00      	nop
 8015b4c:	240107f8 	.word	0x240107f8

08015b50 <_malloc_r>:
 8015b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b54:	1ccd      	adds	r5, r1, #3
 8015b56:	f025 0503 	bic.w	r5, r5, #3
 8015b5a:	3508      	adds	r5, #8
 8015b5c:	2d0c      	cmp	r5, #12
 8015b5e:	bf38      	it	cc
 8015b60:	250c      	movcc	r5, #12
 8015b62:	2d00      	cmp	r5, #0
 8015b64:	4606      	mov	r6, r0
 8015b66:	db01      	blt.n	8015b6c <_malloc_r+0x1c>
 8015b68:	42a9      	cmp	r1, r5
 8015b6a:	d904      	bls.n	8015b76 <_malloc_r+0x26>
 8015b6c:	230c      	movs	r3, #12
 8015b6e:	6033      	str	r3, [r6, #0]
 8015b70:	2000      	movs	r0, #0
 8015b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c4c <_malloc_r+0xfc>
 8015b7a:	f000 f869 	bl	8015c50 <__malloc_lock>
 8015b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8015b82:	461c      	mov	r4, r3
 8015b84:	bb44      	cbnz	r4, 8015bd8 <_malloc_r+0x88>
 8015b86:	4629      	mov	r1, r5
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f7ff ffbf 	bl	8015b0c <sbrk_aligned>
 8015b8e:	1c43      	adds	r3, r0, #1
 8015b90:	4604      	mov	r4, r0
 8015b92:	d158      	bne.n	8015c46 <_malloc_r+0xf6>
 8015b94:	f8d8 4000 	ldr.w	r4, [r8]
 8015b98:	4627      	mov	r7, r4
 8015b9a:	2f00      	cmp	r7, #0
 8015b9c:	d143      	bne.n	8015c26 <_malloc_r+0xd6>
 8015b9e:	2c00      	cmp	r4, #0
 8015ba0:	d04b      	beq.n	8015c3a <_malloc_r+0xea>
 8015ba2:	6823      	ldr	r3, [r4, #0]
 8015ba4:	4639      	mov	r1, r7
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	eb04 0903 	add.w	r9, r4, r3
 8015bac:	f000 fc7e 	bl	80164ac <_sbrk_r>
 8015bb0:	4581      	cmp	r9, r0
 8015bb2:	d142      	bne.n	8015c3a <_malloc_r+0xea>
 8015bb4:	6821      	ldr	r1, [r4, #0]
 8015bb6:	1a6d      	subs	r5, r5, r1
 8015bb8:	4629      	mov	r1, r5
 8015bba:	4630      	mov	r0, r6
 8015bbc:	f7ff ffa6 	bl	8015b0c <sbrk_aligned>
 8015bc0:	3001      	adds	r0, #1
 8015bc2:	d03a      	beq.n	8015c3a <_malloc_r+0xea>
 8015bc4:	6823      	ldr	r3, [r4, #0]
 8015bc6:	442b      	add	r3, r5
 8015bc8:	6023      	str	r3, [r4, #0]
 8015bca:	f8d8 3000 	ldr.w	r3, [r8]
 8015bce:	685a      	ldr	r2, [r3, #4]
 8015bd0:	bb62      	cbnz	r2, 8015c2c <_malloc_r+0xdc>
 8015bd2:	f8c8 7000 	str.w	r7, [r8]
 8015bd6:	e00f      	b.n	8015bf8 <_malloc_r+0xa8>
 8015bd8:	6822      	ldr	r2, [r4, #0]
 8015bda:	1b52      	subs	r2, r2, r5
 8015bdc:	d420      	bmi.n	8015c20 <_malloc_r+0xd0>
 8015bde:	2a0b      	cmp	r2, #11
 8015be0:	d917      	bls.n	8015c12 <_malloc_r+0xc2>
 8015be2:	1961      	adds	r1, r4, r5
 8015be4:	42a3      	cmp	r3, r4
 8015be6:	6025      	str	r5, [r4, #0]
 8015be8:	bf18      	it	ne
 8015bea:	6059      	strne	r1, [r3, #4]
 8015bec:	6863      	ldr	r3, [r4, #4]
 8015bee:	bf08      	it	eq
 8015bf0:	f8c8 1000 	streq.w	r1, [r8]
 8015bf4:	5162      	str	r2, [r4, r5]
 8015bf6:	604b      	str	r3, [r1, #4]
 8015bf8:	4630      	mov	r0, r6
 8015bfa:	f000 f82f 	bl	8015c5c <__malloc_unlock>
 8015bfe:	f104 000b 	add.w	r0, r4, #11
 8015c02:	1d23      	adds	r3, r4, #4
 8015c04:	f020 0007 	bic.w	r0, r0, #7
 8015c08:	1ac2      	subs	r2, r0, r3
 8015c0a:	bf1c      	itt	ne
 8015c0c:	1a1b      	subne	r3, r3, r0
 8015c0e:	50a3      	strne	r3, [r4, r2]
 8015c10:	e7af      	b.n	8015b72 <_malloc_r+0x22>
 8015c12:	6862      	ldr	r2, [r4, #4]
 8015c14:	42a3      	cmp	r3, r4
 8015c16:	bf0c      	ite	eq
 8015c18:	f8c8 2000 	streq.w	r2, [r8]
 8015c1c:	605a      	strne	r2, [r3, #4]
 8015c1e:	e7eb      	b.n	8015bf8 <_malloc_r+0xa8>
 8015c20:	4623      	mov	r3, r4
 8015c22:	6864      	ldr	r4, [r4, #4]
 8015c24:	e7ae      	b.n	8015b84 <_malloc_r+0x34>
 8015c26:	463c      	mov	r4, r7
 8015c28:	687f      	ldr	r7, [r7, #4]
 8015c2a:	e7b6      	b.n	8015b9a <_malloc_r+0x4a>
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	42a3      	cmp	r3, r4
 8015c32:	d1fb      	bne.n	8015c2c <_malloc_r+0xdc>
 8015c34:	2300      	movs	r3, #0
 8015c36:	6053      	str	r3, [r2, #4]
 8015c38:	e7de      	b.n	8015bf8 <_malloc_r+0xa8>
 8015c3a:	230c      	movs	r3, #12
 8015c3c:	6033      	str	r3, [r6, #0]
 8015c3e:	4630      	mov	r0, r6
 8015c40:	f000 f80c 	bl	8015c5c <__malloc_unlock>
 8015c44:	e794      	b.n	8015b70 <_malloc_r+0x20>
 8015c46:	6005      	str	r5, [r0, #0]
 8015c48:	e7d6      	b.n	8015bf8 <_malloc_r+0xa8>
 8015c4a:	bf00      	nop
 8015c4c:	240107fc 	.word	0x240107fc

08015c50 <__malloc_lock>:
 8015c50:	4801      	ldr	r0, [pc, #4]	@ (8015c58 <__malloc_lock+0x8>)
 8015c52:	f7ff beda 	b.w	8015a0a <__retarget_lock_acquire_recursive>
 8015c56:	bf00      	nop
 8015c58:	240107f4 	.word	0x240107f4

08015c5c <__malloc_unlock>:
 8015c5c:	4801      	ldr	r0, [pc, #4]	@ (8015c64 <__malloc_unlock+0x8>)
 8015c5e:	f7ff bed5 	b.w	8015a0c <__retarget_lock_release_recursive>
 8015c62:	bf00      	nop
 8015c64:	240107f4 	.word	0x240107f4

08015c68 <__sfputc_r>:
 8015c68:	6893      	ldr	r3, [r2, #8]
 8015c6a:	3b01      	subs	r3, #1
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	b410      	push	{r4}
 8015c70:	6093      	str	r3, [r2, #8]
 8015c72:	da08      	bge.n	8015c86 <__sfputc_r+0x1e>
 8015c74:	6994      	ldr	r4, [r2, #24]
 8015c76:	42a3      	cmp	r3, r4
 8015c78:	db01      	blt.n	8015c7e <__sfputc_r+0x16>
 8015c7a:	290a      	cmp	r1, #10
 8015c7c:	d103      	bne.n	8015c86 <__sfputc_r+0x1e>
 8015c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c82:	f000 bb7f 	b.w	8016384 <__swbuf_r>
 8015c86:	6813      	ldr	r3, [r2, #0]
 8015c88:	1c58      	adds	r0, r3, #1
 8015c8a:	6010      	str	r0, [r2, #0]
 8015c8c:	7019      	strb	r1, [r3, #0]
 8015c8e:	4608      	mov	r0, r1
 8015c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c94:	4770      	bx	lr

08015c96 <__sfputs_r>:
 8015c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c98:	4606      	mov	r6, r0
 8015c9a:	460f      	mov	r7, r1
 8015c9c:	4614      	mov	r4, r2
 8015c9e:	18d5      	adds	r5, r2, r3
 8015ca0:	42ac      	cmp	r4, r5
 8015ca2:	d101      	bne.n	8015ca8 <__sfputs_r+0x12>
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	e007      	b.n	8015cb8 <__sfputs_r+0x22>
 8015ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cac:	463a      	mov	r2, r7
 8015cae:	4630      	mov	r0, r6
 8015cb0:	f7ff ffda 	bl	8015c68 <__sfputc_r>
 8015cb4:	1c43      	adds	r3, r0, #1
 8015cb6:	d1f3      	bne.n	8015ca0 <__sfputs_r+0xa>
 8015cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015cbc <_vfiprintf_r>:
 8015cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc0:	460d      	mov	r5, r1
 8015cc2:	b09d      	sub	sp, #116	@ 0x74
 8015cc4:	4614      	mov	r4, r2
 8015cc6:	4698      	mov	r8, r3
 8015cc8:	4606      	mov	r6, r0
 8015cca:	b118      	cbz	r0, 8015cd4 <_vfiprintf_r+0x18>
 8015ccc:	6a03      	ldr	r3, [r0, #32]
 8015cce:	b90b      	cbnz	r3, 8015cd4 <_vfiprintf_r+0x18>
 8015cd0:	f7ff fd36 	bl	8015740 <__sinit>
 8015cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015cd6:	07d9      	lsls	r1, r3, #31
 8015cd8:	d405      	bmi.n	8015ce6 <_vfiprintf_r+0x2a>
 8015cda:	89ab      	ldrh	r3, [r5, #12]
 8015cdc:	059a      	lsls	r2, r3, #22
 8015cde:	d402      	bmi.n	8015ce6 <_vfiprintf_r+0x2a>
 8015ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ce2:	f7ff fe92 	bl	8015a0a <__retarget_lock_acquire_recursive>
 8015ce6:	89ab      	ldrh	r3, [r5, #12]
 8015ce8:	071b      	lsls	r3, r3, #28
 8015cea:	d501      	bpl.n	8015cf0 <_vfiprintf_r+0x34>
 8015cec:	692b      	ldr	r3, [r5, #16]
 8015cee:	b99b      	cbnz	r3, 8015d18 <_vfiprintf_r+0x5c>
 8015cf0:	4629      	mov	r1, r5
 8015cf2:	4630      	mov	r0, r6
 8015cf4:	f000 fb84 	bl	8016400 <__swsetup_r>
 8015cf8:	b170      	cbz	r0, 8015d18 <_vfiprintf_r+0x5c>
 8015cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015cfc:	07dc      	lsls	r4, r3, #31
 8015cfe:	d504      	bpl.n	8015d0a <_vfiprintf_r+0x4e>
 8015d00:	f04f 30ff 	mov.w	r0, #4294967295
 8015d04:	b01d      	add	sp, #116	@ 0x74
 8015d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0a:	89ab      	ldrh	r3, [r5, #12]
 8015d0c:	0598      	lsls	r0, r3, #22
 8015d0e:	d4f7      	bmi.n	8015d00 <_vfiprintf_r+0x44>
 8015d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d12:	f7ff fe7b 	bl	8015a0c <__retarget_lock_release_recursive>
 8015d16:	e7f3      	b.n	8015d00 <_vfiprintf_r+0x44>
 8015d18:	2300      	movs	r3, #0
 8015d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d1c:	2320      	movs	r3, #32
 8015d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d26:	2330      	movs	r3, #48	@ 0x30
 8015d28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015ed8 <_vfiprintf_r+0x21c>
 8015d2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015d30:	f04f 0901 	mov.w	r9, #1
 8015d34:	4623      	mov	r3, r4
 8015d36:	469a      	mov	sl, r3
 8015d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d3c:	b10a      	cbz	r2, 8015d42 <_vfiprintf_r+0x86>
 8015d3e:	2a25      	cmp	r2, #37	@ 0x25
 8015d40:	d1f9      	bne.n	8015d36 <_vfiprintf_r+0x7a>
 8015d42:	ebba 0b04 	subs.w	fp, sl, r4
 8015d46:	d00b      	beq.n	8015d60 <_vfiprintf_r+0xa4>
 8015d48:	465b      	mov	r3, fp
 8015d4a:	4622      	mov	r2, r4
 8015d4c:	4629      	mov	r1, r5
 8015d4e:	4630      	mov	r0, r6
 8015d50:	f7ff ffa1 	bl	8015c96 <__sfputs_r>
 8015d54:	3001      	adds	r0, #1
 8015d56:	f000 80a7 	beq.w	8015ea8 <_vfiprintf_r+0x1ec>
 8015d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d5c:	445a      	add	r2, fp
 8015d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d60:	f89a 3000 	ldrb.w	r3, [sl]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f000 809f 	beq.w	8015ea8 <_vfiprintf_r+0x1ec>
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8015d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d74:	f10a 0a01 	add.w	sl, sl, #1
 8015d78:	9304      	str	r3, [sp, #16]
 8015d7a:	9307      	str	r3, [sp, #28]
 8015d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d82:	4654      	mov	r4, sl
 8015d84:	2205      	movs	r2, #5
 8015d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d8a:	4853      	ldr	r0, [pc, #332]	@ (8015ed8 <_vfiprintf_r+0x21c>)
 8015d8c:	f7ea faa8 	bl	80002e0 <memchr>
 8015d90:	9a04      	ldr	r2, [sp, #16]
 8015d92:	b9d8      	cbnz	r0, 8015dcc <_vfiprintf_r+0x110>
 8015d94:	06d1      	lsls	r1, r2, #27
 8015d96:	bf44      	itt	mi
 8015d98:	2320      	movmi	r3, #32
 8015d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d9e:	0713      	lsls	r3, r2, #28
 8015da0:	bf44      	itt	mi
 8015da2:	232b      	movmi	r3, #43	@ 0x2b
 8015da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015da8:	f89a 3000 	ldrb.w	r3, [sl]
 8015dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8015dae:	d015      	beq.n	8015ddc <_vfiprintf_r+0x120>
 8015db0:	9a07      	ldr	r2, [sp, #28]
 8015db2:	4654      	mov	r4, sl
 8015db4:	2000      	movs	r0, #0
 8015db6:	f04f 0c0a 	mov.w	ip, #10
 8015dba:	4621      	mov	r1, r4
 8015dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dc0:	3b30      	subs	r3, #48	@ 0x30
 8015dc2:	2b09      	cmp	r3, #9
 8015dc4:	d94b      	bls.n	8015e5e <_vfiprintf_r+0x1a2>
 8015dc6:	b1b0      	cbz	r0, 8015df6 <_vfiprintf_r+0x13a>
 8015dc8:	9207      	str	r2, [sp, #28]
 8015dca:	e014      	b.n	8015df6 <_vfiprintf_r+0x13a>
 8015dcc:	eba0 0308 	sub.w	r3, r0, r8
 8015dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8015dd4:	4313      	orrs	r3, r2
 8015dd6:	9304      	str	r3, [sp, #16]
 8015dd8:	46a2      	mov	sl, r4
 8015dda:	e7d2      	b.n	8015d82 <_vfiprintf_r+0xc6>
 8015ddc:	9b03      	ldr	r3, [sp, #12]
 8015dde:	1d19      	adds	r1, r3, #4
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	9103      	str	r1, [sp, #12]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	bfbb      	ittet	lt
 8015de8:	425b      	neglt	r3, r3
 8015dea:	f042 0202 	orrlt.w	r2, r2, #2
 8015dee:	9307      	strge	r3, [sp, #28]
 8015df0:	9307      	strlt	r3, [sp, #28]
 8015df2:	bfb8      	it	lt
 8015df4:	9204      	strlt	r2, [sp, #16]
 8015df6:	7823      	ldrb	r3, [r4, #0]
 8015df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8015dfa:	d10a      	bne.n	8015e12 <_vfiprintf_r+0x156>
 8015dfc:	7863      	ldrb	r3, [r4, #1]
 8015dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e00:	d132      	bne.n	8015e68 <_vfiprintf_r+0x1ac>
 8015e02:	9b03      	ldr	r3, [sp, #12]
 8015e04:	1d1a      	adds	r2, r3, #4
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	9203      	str	r2, [sp, #12]
 8015e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015e0e:	3402      	adds	r4, #2
 8015e10:	9305      	str	r3, [sp, #20]
 8015e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015ee8 <_vfiprintf_r+0x22c>
 8015e16:	7821      	ldrb	r1, [r4, #0]
 8015e18:	2203      	movs	r2, #3
 8015e1a:	4650      	mov	r0, sl
 8015e1c:	f7ea fa60 	bl	80002e0 <memchr>
 8015e20:	b138      	cbz	r0, 8015e32 <_vfiprintf_r+0x176>
 8015e22:	9b04      	ldr	r3, [sp, #16]
 8015e24:	eba0 000a 	sub.w	r0, r0, sl
 8015e28:	2240      	movs	r2, #64	@ 0x40
 8015e2a:	4082      	lsls	r2, r0
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	3401      	adds	r4, #1
 8015e30:	9304      	str	r3, [sp, #16]
 8015e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e36:	4829      	ldr	r0, [pc, #164]	@ (8015edc <_vfiprintf_r+0x220>)
 8015e38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015e3c:	2206      	movs	r2, #6
 8015e3e:	f7ea fa4f 	bl	80002e0 <memchr>
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d03f      	beq.n	8015ec6 <_vfiprintf_r+0x20a>
 8015e46:	4b26      	ldr	r3, [pc, #152]	@ (8015ee0 <_vfiprintf_r+0x224>)
 8015e48:	bb1b      	cbnz	r3, 8015e92 <_vfiprintf_r+0x1d6>
 8015e4a:	9b03      	ldr	r3, [sp, #12]
 8015e4c:	3307      	adds	r3, #7
 8015e4e:	f023 0307 	bic.w	r3, r3, #7
 8015e52:	3308      	adds	r3, #8
 8015e54:	9303      	str	r3, [sp, #12]
 8015e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e58:	443b      	add	r3, r7
 8015e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e5c:	e76a      	b.n	8015d34 <_vfiprintf_r+0x78>
 8015e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e62:	460c      	mov	r4, r1
 8015e64:	2001      	movs	r0, #1
 8015e66:	e7a8      	b.n	8015dba <_vfiprintf_r+0xfe>
 8015e68:	2300      	movs	r3, #0
 8015e6a:	3401      	adds	r4, #1
 8015e6c:	9305      	str	r3, [sp, #20]
 8015e6e:	4619      	mov	r1, r3
 8015e70:	f04f 0c0a 	mov.w	ip, #10
 8015e74:	4620      	mov	r0, r4
 8015e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e7a:	3a30      	subs	r2, #48	@ 0x30
 8015e7c:	2a09      	cmp	r2, #9
 8015e7e:	d903      	bls.n	8015e88 <_vfiprintf_r+0x1cc>
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d0c6      	beq.n	8015e12 <_vfiprintf_r+0x156>
 8015e84:	9105      	str	r1, [sp, #20]
 8015e86:	e7c4      	b.n	8015e12 <_vfiprintf_r+0x156>
 8015e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e8c:	4604      	mov	r4, r0
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e7f0      	b.n	8015e74 <_vfiprintf_r+0x1b8>
 8015e92:	ab03      	add	r3, sp, #12
 8015e94:	9300      	str	r3, [sp, #0]
 8015e96:	462a      	mov	r2, r5
 8015e98:	4b12      	ldr	r3, [pc, #72]	@ (8015ee4 <_vfiprintf_r+0x228>)
 8015e9a:	a904      	add	r1, sp, #16
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	f3af 8000 	nop.w
 8015ea2:	4607      	mov	r7, r0
 8015ea4:	1c78      	adds	r0, r7, #1
 8015ea6:	d1d6      	bne.n	8015e56 <_vfiprintf_r+0x19a>
 8015ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015eaa:	07d9      	lsls	r1, r3, #31
 8015eac:	d405      	bmi.n	8015eba <_vfiprintf_r+0x1fe>
 8015eae:	89ab      	ldrh	r3, [r5, #12]
 8015eb0:	059a      	lsls	r2, r3, #22
 8015eb2:	d402      	bmi.n	8015eba <_vfiprintf_r+0x1fe>
 8015eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015eb6:	f7ff fda9 	bl	8015a0c <__retarget_lock_release_recursive>
 8015eba:	89ab      	ldrh	r3, [r5, #12]
 8015ebc:	065b      	lsls	r3, r3, #25
 8015ebe:	f53f af1f 	bmi.w	8015d00 <_vfiprintf_r+0x44>
 8015ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ec4:	e71e      	b.n	8015d04 <_vfiprintf_r+0x48>
 8015ec6:	ab03      	add	r3, sp, #12
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	462a      	mov	r2, r5
 8015ecc:	4b05      	ldr	r3, [pc, #20]	@ (8015ee4 <_vfiprintf_r+0x228>)
 8015ece:	a904      	add	r1, sp, #16
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	f000 f879 	bl	8015fc8 <_printf_i>
 8015ed6:	e7e4      	b.n	8015ea2 <_vfiprintf_r+0x1e6>
 8015ed8:	08019eff 	.word	0x08019eff
 8015edc:	08019f09 	.word	0x08019f09
 8015ee0:	00000000 	.word	0x00000000
 8015ee4:	08015c97 	.word	0x08015c97
 8015ee8:	08019f05 	.word	0x08019f05

08015eec <_printf_common>:
 8015eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef0:	4616      	mov	r6, r2
 8015ef2:	4698      	mov	r8, r3
 8015ef4:	688a      	ldr	r2, [r1, #8]
 8015ef6:	690b      	ldr	r3, [r1, #16]
 8015ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015efc:	4293      	cmp	r3, r2
 8015efe:	bfb8      	it	lt
 8015f00:	4613      	movlt	r3, r2
 8015f02:	6033      	str	r3, [r6, #0]
 8015f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015f08:	4607      	mov	r7, r0
 8015f0a:	460c      	mov	r4, r1
 8015f0c:	b10a      	cbz	r2, 8015f12 <_printf_common+0x26>
 8015f0e:	3301      	adds	r3, #1
 8015f10:	6033      	str	r3, [r6, #0]
 8015f12:	6823      	ldr	r3, [r4, #0]
 8015f14:	0699      	lsls	r1, r3, #26
 8015f16:	bf42      	ittt	mi
 8015f18:	6833      	ldrmi	r3, [r6, #0]
 8015f1a:	3302      	addmi	r3, #2
 8015f1c:	6033      	strmi	r3, [r6, #0]
 8015f1e:	6825      	ldr	r5, [r4, #0]
 8015f20:	f015 0506 	ands.w	r5, r5, #6
 8015f24:	d106      	bne.n	8015f34 <_printf_common+0x48>
 8015f26:	f104 0a19 	add.w	sl, r4, #25
 8015f2a:	68e3      	ldr	r3, [r4, #12]
 8015f2c:	6832      	ldr	r2, [r6, #0]
 8015f2e:	1a9b      	subs	r3, r3, r2
 8015f30:	42ab      	cmp	r3, r5
 8015f32:	dc26      	bgt.n	8015f82 <_printf_common+0x96>
 8015f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015f38:	6822      	ldr	r2, [r4, #0]
 8015f3a:	3b00      	subs	r3, #0
 8015f3c:	bf18      	it	ne
 8015f3e:	2301      	movne	r3, #1
 8015f40:	0692      	lsls	r2, r2, #26
 8015f42:	d42b      	bmi.n	8015f9c <_printf_common+0xb0>
 8015f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015f48:	4641      	mov	r1, r8
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	47c8      	blx	r9
 8015f4e:	3001      	adds	r0, #1
 8015f50:	d01e      	beq.n	8015f90 <_printf_common+0xa4>
 8015f52:	6823      	ldr	r3, [r4, #0]
 8015f54:	6922      	ldr	r2, [r4, #16]
 8015f56:	f003 0306 	and.w	r3, r3, #6
 8015f5a:	2b04      	cmp	r3, #4
 8015f5c:	bf02      	ittt	eq
 8015f5e:	68e5      	ldreq	r5, [r4, #12]
 8015f60:	6833      	ldreq	r3, [r6, #0]
 8015f62:	1aed      	subeq	r5, r5, r3
 8015f64:	68a3      	ldr	r3, [r4, #8]
 8015f66:	bf0c      	ite	eq
 8015f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f6c:	2500      	movne	r5, #0
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	bfc4      	itt	gt
 8015f72:	1a9b      	subgt	r3, r3, r2
 8015f74:	18ed      	addgt	r5, r5, r3
 8015f76:	2600      	movs	r6, #0
 8015f78:	341a      	adds	r4, #26
 8015f7a:	42b5      	cmp	r5, r6
 8015f7c:	d11a      	bne.n	8015fb4 <_printf_common+0xc8>
 8015f7e:	2000      	movs	r0, #0
 8015f80:	e008      	b.n	8015f94 <_printf_common+0xa8>
 8015f82:	2301      	movs	r3, #1
 8015f84:	4652      	mov	r2, sl
 8015f86:	4641      	mov	r1, r8
 8015f88:	4638      	mov	r0, r7
 8015f8a:	47c8      	blx	r9
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	d103      	bne.n	8015f98 <_printf_common+0xac>
 8015f90:	f04f 30ff 	mov.w	r0, #4294967295
 8015f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f98:	3501      	adds	r5, #1
 8015f9a:	e7c6      	b.n	8015f2a <_printf_common+0x3e>
 8015f9c:	18e1      	adds	r1, r4, r3
 8015f9e:	1c5a      	adds	r2, r3, #1
 8015fa0:	2030      	movs	r0, #48	@ 0x30
 8015fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015fa6:	4422      	add	r2, r4
 8015fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015fb0:	3302      	adds	r3, #2
 8015fb2:	e7c7      	b.n	8015f44 <_printf_common+0x58>
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	4622      	mov	r2, r4
 8015fb8:	4641      	mov	r1, r8
 8015fba:	4638      	mov	r0, r7
 8015fbc:	47c8      	blx	r9
 8015fbe:	3001      	adds	r0, #1
 8015fc0:	d0e6      	beq.n	8015f90 <_printf_common+0xa4>
 8015fc2:	3601      	adds	r6, #1
 8015fc4:	e7d9      	b.n	8015f7a <_printf_common+0x8e>
	...

08015fc8 <_printf_i>:
 8015fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fcc:	7e0f      	ldrb	r7, [r1, #24]
 8015fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015fd0:	2f78      	cmp	r7, #120	@ 0x78
 8015fd2:	4691      	mov	r9, r2
 8015fd4:	4680      	mov	r8, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	469a      	mov	sl, r3
 8015fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015fde:	d807      	bhi.n	8015ff0 <_printf_i+0x28>
 8015fe0:	2f62      	cmp	r7, #98	@ 0x62
 8015fe2:	d80a      	bhi.n	8015ffa <_printf_i+0x32>
 8015fe4:	2f00      	cmp	r7, #0
 8015fe6:	f000 80d2 	beq.w	801618e <_printf_i+0x1c6>
 8015fea:	2f58      	cmp	r7, #88	@ 0x58
 8015fec:	f000 80b9 	beq.w	8016162 <_printf_i+0x19a>
 8015ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ff8:	e03a      	b.n	8016070 <_printf_i+0xa8>
 8015ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015ffe:	2b15      	cmp	r3, #21
 8016000:	d8f6      	bhi.n	8015ff0 <_printf_i+0x28>
 8016002:	a101      	add	r1, pc, #4	@ (adr r1, 8016008 <_printf_i+0x40>)
 8016004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016008:	08016061 	.word	0x08016061
 801600c:	08016075 	.word	0x08016075
 8016010:	08015ff1 	.word	0x08015ff1
 8016014:	08015ff1 	.word	0x08015ff1
 8016018:	08015ff1 	.word	0x08015ff1
 801601c:	08015ff1 	.word	0x08015ff1
 8016020:	08016075 	.word	0x08016075
 8016024:	08015ff1 	.word	0x08015ff1
 8016028:	08015ff1 	.word	0x08015ff1
 801602c:	08015ff1 	.word	0x08015ff1
 8016030:	08015ff1 	.word	0x08015ff1
 8016034:	08016175 	.word	0x08016175
 8016038:	0801609f 	.word	0x0801609f
 801603c:	0801612f 	.word	0x0801612f
 8016040:	08015ff1 	.word	0x08015ff1
 8016044:	08015ff1 	.word	0x08015ff1
 8016048:	08016197 	.word	0x08016197
 801604c:	08015ff1 	.word	0x08015ff1
 8016050:	0801609f 	.word	0x0801609f
 8016054:	08015ff1 	.word	0x08015ff1
 8016058:	08015ff1 	.word	0x08015ff1
 801605c:	08016137 	.word	0x08016137
 8016060:	6833      	ldr	r3, [r6, #0]
 8016062:	1d1a      	adds	r2, r3, #4
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	6032      	str	r2, [r6, #0]
 8016068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801606c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016070:	2301      	movs	r3, #1
 8016072:	e09d      	b.n	80161b0 <_printf_i+0x1e8>
 8016074:	6833      	ldr	r3, [r6, #0]
 8016076:	6820      	ldr	r0, [r4, #0]
 8016078:	1d19      	adds	r1, r3, #4
 801607a:	6031      	str	r1, [r6, #0]
 801607c:	0606      	lsls	r6, r0, #24
 801607e:	d501      	bpl.n	8016084 <_printf_i+0xbc>
 8016080:	681d      	ldr	r5, [r3, #0]
 8016082:	e003      	b.n	801608c <_printf_i+0xc4>
 8016084:	0645      	lsls	r5, r0, #25
 8016086:	d5fb      	bpl.n	8016080 <_printf_i+0xb8>
 8016088:	f9b3 5000 	ldrsh.w	r5, [r3]
 801608c:	2d00      	cmp	r5, #0
 801608e:	da03      	bge.n	8016098 <_printf_i+0xd0>
 8016090:	232d      	movs	r3, #45	@ 0x2d
 8016092:	426d      	negs	r5, r5
 8016094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016098:	4859      	ldr	r0, [pc, #356]	@ (8016200 <_printf_i+0x238>)
 801609a:	230a      	movs	r3, #10
 801609c:	e011      	b.n	80160c2 <_printf_i+0xfa>
 801609e:	6821      	ldr	r1, [r4, #0]
 80160a0:	6833      	ldr	r3, [r6, #0]
 80160a2:	0608      	lsls	r0, r1, #24
 80160a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80160a8:	d402      	bmi.n	80160b0 <_printf_i+0xe8>
 80160aa:	0649      	lsls	r1, r1, #25
 80160ac:	bf48      	it	mi
 80160ae:	b2ad      	uxthmi	r5, r5
 80160b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80160b2:	4853      	ldr	r0, [pc, #332]	@ (8016200 <_printf_i+0x238>)
 80160b4:	6033      	str	r3, [r6, #0]
 80160b6:	bf14      	ite	ne
 80160b8:	230a      	movne	r3, #10
 80160ba:	2308      	moveq	r3, #8
 80160bc:	2100      	movs	r1, #0
 80160be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80160c2:	6866      	ldr	r6, [r4, #4]
 80160c4:	60a6      	str	r6, [r4, #8]
 80160c6:	2e00      	cmp	r6, #0
 80160c8:	bfa2      	ittt	ge
 80160ca:	6821      	ldrge	r1, [r4, #0]
 80160cc:	f021 0104 	bicge.w	r1, r1, #4
 80160d0:	6021      	strge	r1, [r4, #0]
 80160d2:	b90d      	cbnz	r5, 80160d8 <_printf_i+0x110>
 80160d4:	2e00      	cmp	r6, #0
 80160d6:	d04b      	beq.n	8016170 <_printf_i+0x1a8>
 80160d8:	4616      	mov	r6, r2
 80160da:	fbb5 f1f3 	udiv	r1, r5, r3
 80160de:	fb03 5711 	mls	r7, r3, r1, r5
 80160e2:	5dc7      	ldrb	r7, [r0, r7]
 80160e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80160e8:	462f      	mov	r7, r5
 80160ea:	42bb      	cmp	r3, r7
 80160ec:	460d      	mov	r5, r1
 80160ee:	d9f4      	bls.n	80160da <_printf_i+0x112>
 80160f0:	2b08      	cmp	r3, #8
 80160f2:	d10b      	bne.n	801610c <_printf_i+0x144>
 80160f4:	6823      	ldr	r3, [r4, #0]
 80160f6:	07df      	lsls	r7, r3, #31
 80160f8:	d508      	bpl.n	801610c <_printf_i+0x144>
 80160fa:	6923      	ldr	r3, [r4, #16]
 80160fc:	6861      	ldr	r1, [r4, #4]
 80160fe:	4299      	cmp	r1, r3
 8016100:	bfde      	ittt	le
 8016102:	2330      	movle	r3, #48	@ 0x30
 8016104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016108:	f106 36ff 	addle.w	r6, r6, #4294967295
 801610c:	1b92      	subs	r2, r2, r6
 801610e:	6122      	str	r2, [r4, #16]
 8016110:	f8cd a000 	str.w	sl, [sp]
 8016114:	464b      	mov	r3, r9
 8016116:	aa03      	add	r2, sp, #12
 8016118:	4621      	mov	r1, r4
 801611a:	4640      	mov	r0, r8
 801611c:	f7ff fee6 	bl	8015eec <_printf_common>
 8016120:	3001      	adds	r0, #1
 8016122:	d14a      	bne.n	80161ba <_printf_i+0x1f2>
 8016124:	f04f 30ff 	mov.w	r0, #4294967295
 8016128:	b004      	add	sp, #16
 801612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801612e:	6823      	ldr	r3, [r4, #0]
 8016130:	f043 0320 	orr.w	r3, r3, #32
 8016134:	6023      	str	r3, [r4, #0]
 8016136:	4833      	ldr	r0, [pc, #204]	@ (8016204 <_printf_i+0x23c>)
 8016138:	2778      	movs	r7, #120	@ 0x78
 801613a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801613e:	6823      	ldr	r3, [r4, #0]
 8016140:	6831      	ldr	r1, [r6, #0]
 8016142:	061f      	lsls	r7, r3, #24
 8016144:	f851 5b04 	ldr.w	r5, [r1], #4
 8016148:	d402      	bmi.n	8016150 <_printf_i+0x188>
 801614a:	065f      	lsls	r7, r3, #25
 801614c:	bf48      	it	mi
 801614e:	b2ad      	uxthmi	r5, r5
 8016150:	6031      	str	r1, [r6, #0]
 8016152:	07d9      	lsls	r1, r3, #31
 8016154:	bf44      	itt	mi
 8016156:	f043 0320 	orrmi.w	r3, r3, #32
 801615a:	6023      	strmi	r3, [r4, #0]
 801615c:	b11d      	cbz	r5, 8016166 <_printf_i+0x19e>
 801615e:	2310      	movs	r3, #16
 8016160:	e7ac      	b.n	80160bc <_printf_i+0xf4>
 8016162:	4827      	ldr	r0, [pc, #156]	@ (8016200 <_printf_i+0x238>)
 8016164:	e7e9      	b.n	801613a <_printf_i+0x172>
 8016166:	6823      	ldr	r3, [r4, #0]
 8016168:	f023 0320 	bic.w	r3, r3, #32
 801616c:	6023      	str	r3, [r4, #0]
 801616e:	e7f6      	b.n	801615e <_printf_i+0x196>
 8016170:	4616      	mov	r6, r2
 8016172:	e7bd      	b.n	80160f0 <_printf_i+0x128>
 8016174:	6833      	ldr	r3, [r6, #0]
 8016176:	6825      	ldr	r5, [r4, #0]
 8016178:	6961      	ldr	r1, [r4, #20]
 801617a:	1d18      	adds	r0, r3, #4
 801617c:	6030      	str	r0, [r6, #0]
 801617e:	062e      	lsls	r6, r5, #24
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	d501      	bpl.n	8016188 <_printf_i+0x1c0>
 8016184:	6019      	str	r1, [r3, #0]
 8016186:	e002      	b.n	801618e <_printf_i+0x1c6>
 8016188:	0668      	lsls	r0, r5, #25
 801618a:	d5fb      	bpl.n	8016184 <_printf_i+0x1bc>
 801618c:	8019      	strh	r1, [r3, #0]
 801618e:	2300      	movs	r3, #0
 8016190:	6123      	str	r3, [r4, #16]
 8016192:	4616      	mov	r6, r2
 8016194:	e7bc      	b.n	8016110 <_printf_i+0x148>
 8016196:	6833      	ldr	r3, [r6, #0]
 8016198:	1d1a      	adds	r2, r3, #4
 801619a:	6032      	str	r2, [r6, #0]
 801619c:	681e      	ldr	r6, [r3, #0]
 801619e:	6862      	ldr	r2, [r4, #4]
 80161a0:	2100      	movs	r1, #0
 80161a2:	4630      	mov	r0, r6
 80161a4:	f7ea f89c 	bl	80002e0 <memchr>
 80161a8:	b108      	cbz	r0, 80161ae <_printf_i+0x1e6>
 80161aa:	1b80      	subs	r0, r0, r6
 80161ac:	6060      	str	r0, [r4, #4]
 80161ae:	6863      	ldr	r3, [r4, #4]
 80161b0:	6123      	str	r3, [r4, #16]
 80161b2:	2300      	movs	r3, #0
 80161b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161b8:	e7aa      	b.n	8016110 <_printf_i+0x148>
 80161ba:	6923      	ldr	r3, [r4, #16]
 80161bc:	4632      	mov	r2, r6
 80161be:	4649      	mov	r1, r9
 80161c0:	4640      	mov	r0, r8
 80161c2:	47d0      	blx	sl
 80161c4:	3001      	adds	r0, #1
 80161c6:	d0ad      	beq.n	8016124 <_printf_i+0x15c>
 80161c8:	6823      	ldr	r3, [r4, #0]
 80161ca:	079b      	lsls	r3, r3, #30
 80161cc:	d413      	bmi.n	80161f6 <_printf_i+0x22e>
 80161ce:	68e0      	ldr	r0, [r4, #12]
 80161d0:	9b03      	ldr	r3, [sp, #12]
 80161d2:	4298      	cmp	r0, r3
 80161d4:	bfb8      	it	lt
 80161d6:	4618      	movlt	r0, r3
 80161d8:	e7a6      	b.n	8016128 <_printf_i+0x160>
 80161da:	2301      	movs	r3, #1
 80161dc:	4632      	mov	r2, r6
 80161de:	4649      	mov	r1, r9
 80161e0:	4640      	mov	r0, r8
 80161e2:	47d0      	blx	sl
 80161e4:	3001      	adds	r0, #1
 80161e6:	d09d      	beq.n	8016124 <_printf_i+0x15c>
 80161e8:	3501      	adds	r5, #1
 80161ea:	68e3      	ldr	r3, [r4, #12]
 80161ec:	9903      	ldr	r1, [sp, #12]
 80161ee:	1a5b      	subs	r3, r3, r1
 80161f0:	42ab      	cmp	r3, r5
 80161f2:	dcf2      	bgt.n	80161da <_printf_i+0x212>
 80161f4:	e7eb      	b.n	80161ce <_printf_i+0x206>
 80161f6:	2500      	movs	r5, #0
 80161f8:	f104 0619 	add.w	r6, r4, #25
 80161fc:	e7f5      	b.n	80161ea <_printf_i+0x222>
 80161fe:	bf00      	nop
 8016200:	08019f10 	.word	0x08019f10
 8016204:	08019f21 	.word	0x08019f21

08016208 <__sflush_r>:
 8016208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016210:	0716      	lsls	r6, r2, #28
 8016212:	4605      	mov	r5, r0
 8016214:	460c      	mov	r4, r1
 8016216:	d454      	bmi.n	80162c2 <__sflush_r+0xba>
 8016218:	684b      	ldr	r3, [r1, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	dc02      	bgt.n	8016224 <__sflush_r+0x1c>
 801621e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016220:	2b00      	cmp	r3, #0
 8016222:	dd48      	ble.n	80162b6 <__sflush_r+0xae>
 8016224:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016226:	2e00      	cmp	r6, #0
 8016228:	d045      	beq.n	80162b6 <__sflush_r+0xae>
 801622a:	2300      	movs	r3, #0
 801622c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016230:	682f      	ldr	r7, [r5, #0]
 8016232:	6a21      	ldr	r1, [r4, #32]
 8016234:	602b      	str	r3, [r5, #0]
 8016236:	d030      	beq.n	801629a <__sflush_r+0x92>
 8016238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801623a:	89a3      	ldrh	r3, [r4, #12]
 801623c:	0759      	lsls	r1, r3, #29
 801623e:	d505      	bpl.n	801624c <__sflush_r+0x44>
 8016240:	6863      	ldr	r3, [r4, #4]
 8016242:	1ad2      	subs	r2, r2, r3
 8016244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016246:	b10b      	cbz	r3, 801624c <__sflush_r+0x44>
 8016248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801624a:	1ad2      	subs	r2, r2, r3
 801624c:	2300      	movs	r3, #0
 801624e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016250:	6a21      	ldr	r1, [r4, #32]
 8016252:	4628      	mov	r0, r5
 8016254:	47b0      	blx	r6
 8016256:	1c43      	adds	r3, r0, #1
 8016258:	89a3      	ldrh	r3, [r4, #12]
 801625a:	d106      	bne.n	801626a <__sflush_r+0x62>
 801625c:	6829      	ldr	r1, [r5, #0]
 801625e:	291d      	cmp	r1, #29
 8016260:	d82b      	bhi.n	80162ba <__sflush_r+0xb2>
 8016262:	4a2a      	ldr	r2, [pc, #168]	@ (801630c <__sflush_r+0x104>)
 8016264:	410a      	asrs	r2, r1
 8016266:	07d6      	lsls	r6, r2, #31
 8016268:	d427      	bmi.n	80162ba <__sflush_r+0xb2>
 801626a:	2200      	movs	r2, #0
 801626c:	6062      	str	r2, [r4, #4]
 801626e:	04d9      	lsls	r1, r3, #19
 8016270:	6922      	ldr	r2, [r4, #16]
 8016272:	6022      	str	r2, [r4, #0]
 8016274:	d504      	bpl.n	8016280 <__sflush_r+0x78>
 8016276:	1c42      	adds	r2, r0, #1
 8016278:	d101      	bne.n	801627e <__sflush_r+0x76>
 801627a:	682b      	ldr	r3, [r5, #0]
 801627c:	b903      	cbnz	r3, 8016280 <__sflush_r+0x78>
 801627e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016282:	602f      	str	r7, [r5, #0]
 8016284:	b1b9      	cbz	r1, 80162b6 <__sflush_r+0xae>
 8016286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801628a:	4299      	cmp	r1, r3
 801628c:	d002      	beq.n	8016294 <__sflush_r+0x8c>
 801628e:	4628      	mov	r0, r5
 8016290:	f7ff fbea 	bl	8015a68 <_free_r>
 8016294:	2300      	movs	r3, #0
 8016296:	6363      	str	r3, [r4, #52]	@ 0x34
 8016298:	e00d      	b.n	80162b6 <__sflush_r+0xae>
 801629a:	2301      	movs	r3, #1
 801629c:	4628      	mov	r0, r5
 801629e:	47b0      	blx	r6
 80162a0:	4602      	mov	r2, r0
 80162a2:	1c50      	adds	r0, r2, #1
 80162a4:	d1c9      	bne.n	801623a <__sflush_r+0x32>
 80162a6:	682b      	ldr	r3, [r5, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d0c6      	beq.n	801623a <__sflush_r+0x32>
 80162ac:	2b1d      	cmp	r3, #29
 80162ae:	d001      	beq.n	80162b4 <__sflush_r+0xac>
 80162b0:	2b16      	cmp	r3, #22
 80162b2:	d11e      	bne.n	80162f2 <__sflush_r+0xea>
 80162b4:	602f      	str	r7, [r5, #0]
 80162b6:	2000      	movs	r0, #0
 80162b8:	e022      	b.n	8016300 <__sflush_r+0xf8>
 80162ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162be:	b21b      	sxth	r3, r3
 80162c0:	e01b      	b.n	80162fa <__sflush_r+0xf2>
 80162c2:	690f      	ldr	r7, [r1, #16]
 80162c4:	2f00      	cmp	r7, #0
 80162c6:	d0f6      	beq.n	80162b6 <__sflush_r+0xae>
 80162c8:	0793      	lsls	r3, r2, #30
 80162ca:	680e      	ldr	r6, [r1, #0]
 80162cc:	bf08      	it	eq
 80162ce:	694b      	ldreq	r3, [r1, #20]
 80162d0:	600f      	str	r7, [r1, #0]
 80162d2:	bf18      	it	ne
 80162d4:	2300      	movne	r3, #0
 80162d6:	eba6 0807 	sub.w	r8, r6, r7
 80162da:	608b      	str	r3, [r1, #8]
 80162dc:	f1b8 0f00 	cmp.w	r8, #0
 80162e0:	dde9      	ble.n	80162b6 <__sflush_r+0xae>
 80162e2:	6a21      	ldr	r1, [r4, #32]
 80162e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80162e6:	4643      	mov	r3, r8
 80162e8:	463a      	mov	r2, r7
 80162ea:	4628      	mov	r0, r5
 80162ec:	47b0      	blx	r6
 80162ee:	2800      	cmp	r0, #0
 80162f0:	dc08      	bgt.n	8016304 <__sflush_r+0xfc>
 80162f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162fa:	81a3      	strh	r3, [r4, #12]
 80162fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016304:	4407      	add	r7, r0
 8016306:	eba8 0800 	sub.w	r8, r8, r0
 801630a:	e7e7      	b.n	80162dc <__sflush_r+0xd4>
 801630c:	dfbffffe 	.word	0xdfbffffe

08016310 <_fflush_r>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	690b      	ldr	r3, [r1, #16]
 8016314:	4605      	mov	r5, r0
 8016316:	460c      	mov	r4, r1
 8016318:	b913      	cbnz	r3, 8016320 <_fflush_r+0x10>
 801631a:	2500      	movs	r5, #0
 801631c:	4628      	mov	r0, r5
 801631e:	bd38      	pop	{r3, r4, r5, pc}
 8016320:	b118      	cbz	r0, 801632a <_fflush_r+0x1a>
 8016322:	6a03      	ldr	r3, [r0, #32]
 8016324:	b90b      	cbnz	r3, 801632a <_fflush_r+0x1a>
 8016326:	f7ff fa0b 	bl	8015740 <__sinit>
 801632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d0f3      	beq.n	801631a <_fflush_r+0xa>
 8016332:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016334:	07d0      	lsls	r0, r2, #31
 8016336:	d404      	bmi.n	8016342 <_fflush_r+0x32>
 8016338:	0599      	lsls	r1, r3, #22
 801633a:	d402      	bmi.n	8016342 <_fflush_r+0x32>
 801633c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801633e:	f7ff fb64 	bl	8015a0a <__retarget_lock_acquire_recursive>
 8016342:	4628      	mov	r0, r5
 8016344:	4621      	mov	r1, r4
 8016346:	f7ff ff5f 	bl	8016208 <__sflush_r>
 801634a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801634c:	07da      	lsls	r2, r3, #31
 801634e:	4605      	mov	r5, r0
 8016350:	d4e4      	bmi.n	801631c <_fflush_r+0xc>
 8016352:	89a3      	ldrh	r3, [r4, #12]
 8016354:	059b      	lsls	r3, r3, #22
 8016356:	d4e1      	bmi.n	801631c <_fflush_r+0xc>
 8016358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801635a:	f7ff fb57 	bl	8015a0c <__retarget_lock_release_recursive>
 801635e:	e7dd      	b.n	801631c <_fflush_r+0xc>

08016360 <fiprintf>:
 8016360:	b40e      	push	{r1, r2, r3}
 8016362:	b503      	push	{r0, r1, lr}
 8016364:	4601      	mov	r1, r0
 8016366:	ab03      	add	r3, sp, #12
 8016368:	4805      	ldr	r0, [pc, #20]	@ (8016380 <fiprintf+0x20>)
 801636a:	f853 2b04 	ldr.w	r2, [r3], #4
 801636e:	6800      	ldr	r0, [r0, #0]
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	f7ff fca3 	bl	8015cbc <_vfiprintf_r>
 8016376:	b002      	add	sp, #8
 8016378:	f85d eb04 	ldr.w	lr, [sp], #4
 801637c:	b003      	add	sp, #12
 801637e:	4770      	bx	lr
 8016380:	24000040 	.word	0x24000040

08016384 <__swbuf_r>:
 8016384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016386:	460e      	mov	r6, r1
 8016388:	4614      	mov	r4, r2
 801638a:	4605      	mov	r5, r0
 801638c:	b118      	cbz	r0, 8016396 <__swbuf_r+0x12>
 801638e:	6a03      	ldr	r3, [r0, #32]
 8016390:	b90b      	cbnz	r3, 8016396 <__swbuf_r+0x12>
 8016392:	f7ff f9d5 	bl	8015740 <__sinit>
 8016396:	69a3      	ldr	r3, [r4, #24]
 8016398:	60a3      	str	r3, [r4, #8]
 801639a:	89a3      	ldrh	r3, [r4, #12]
 801639c:	071a      	lsls	r2, r3, #28
 801639e:	d501      	bpl.n	80163a4 <__swbuf_r+0x20>
 80163a0:	6923      	ldr	r3, [r4, #16]
 80163a2:	b943      	cbnz	r3, 80163b6 <__swbuf_r+0x32>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4628      	mov	r0, r5
 80163a8:	f000 f82a 	bl	8016400 <__swsetup_r>
 80163ac:	b118      	cbz	r0, 80163b6 <__swbuf_r+0x32>
 80163ae:	f04f 37ff 	mov.w	r7, #4294967295
 80163b2:	4638      	mov	r0, r7
 80163b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163b6:	6823      	ldr	r3, [r4, #0]
 80163b8:	6922      	ldr	r2, [r4, #16]
 80163ba:	1a98      	subs	r0, r3, r2
 80163bc:	6963      	ldr	r3, [r4, #20]
 80163be:	b2f6      	uxtb	r6, r6
 80163c0:	4283      	cmp	r3, r0
 80163c2:	4637      	mov	r7, r6
 80163c4:	dc05      	bgt.n	80163d2 <__swbuf_r+0x4e>
 80163c6:	4621      	mov	r1, r4
 80163c8:	4628      	mov	r0, r5
 80163ca:	f7ff ffa1 	bl	8016310 <_fflush_r>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d1ed      	bne.n	80163ae <__swbuf_r+0x2a>
 80163d2:	68a3      	ldr	r3, [r4, #8]
 80163d4:	3b01      	subs	r3, #1
 80163d6:	60a3      	str	r3, [r4, #8]
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	1c5a      	adds	r2, r3, #1
 80163dc:	6022      	str	r2, [r4, #0]
 80163de:	701e      	strb	r6, [r3, #0]
 80163e0:	6962      	ldr	r2, [r4, #20]
 80163e2:	1c43      	adds	r3, r0, #1
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d004      	beq.n	80163f2 <__swbuf_r+0x6e>
 80163e8:	89a3      	ldrh	r3, [r4, #12]
 80163ea:	07db      	lsls	r3, r3, #31
 80163ec:	d5e1      	bpl.n	80163b2 <__swbuf_r+0x2e>
 80163ee:	2e0a      	cmp	r6, #10
 80163f0:	d1df      	bne.n	80163b2 <__swbuf_r+0x2e>
 80163f2:	4621      	mov	r1, r4
 80163f4:	4628      	mov	r0, r5
 80163f6:	f7ff ff8b 	bl	8016310 <_fflush_r>
 80163fa:	2800      	cmp	r0, #0
 80163fc:	d0d9      	beq.n	80163b2 <__swbuf_r+0x2e>
 80163fe:	e7d6      	b.n	80163ae <__swbuf_r+0x2a>

08016400 <__swsetup_r>:
 8016400:	b538      	push	{r3, r4, r5, lr}
 8016402:	4b29      	ldr	r3, [pc, #164]	@ (80164a8 <__swsetup_r+0xa8>)
 8016404:	4605      	mov	r5, r0
 8016406:	6818      	ldr	r0, [r3, #0]
 8016408:	460c      	mov	r4, r1
 801640a:	b118      	cbz	r0, 8016414 <__swsetup_r+0x14>
 801640c:	6a03      	ldr	r3, [r0, #32]
 801640e:	b90b      	cbnz	r3, 8016414 <__swsetup_r+0x14>
 8016410:	f7ff f996 	bl	8015740 <__sinit>
 8016414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016418:	0719      	lsls	r1, r3, #28
 801641a:	d422      	bmi.n	8016462 <__swsetup_r+0x62>
 801641c:	06da      	lsls	r2, r3, #27
 801641e:	d407      	bmi.n	8016430 <__swsetup_r+0x30>
 8016420:	2209      	movs	r2, #9
 8016422:	602a      	str	r2, [r5, #0]
 8016424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016428:	81a3      	strh	r3, [r4, #12]
 801642a:	f04f 30ff 	mov.w	r0, #4294967295
 801642e:	e033      	b.n	8016498 <__swsetup_r+0x98>
 8016430:	0758      	lsls	r0, r3, #29
 8016432:	d512      	bpl.n	801645a <__swsetup_r+0x5a>
 8016434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016436:	b141      	cbz	r1, 801644a <__swsetup_r+0x4a>
 8016438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801643c:	4299      	cmp	r1, r3
 801643e:	d002      	beq.n	8016446 <__swsetup_r+0x46>
 8016440:	4628      	mov	r0, r5
 8016442:	f7ff fb11 	bl	8015a68 <_free_r>
 8016446:	2300      	movs	r3, #0
 8016448:	6363      	str	r3, [r4, #52]	@ 0x34
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016450:	81a3      	strh	r3, [r4, #12]
 8016452:	2300      	movs	r3, #0
 8016454:	6063      	str	r3, [r4, #4]
 8016456:	6923      	ldr	r3, [r4, #16]
 8016458:	6023      	str	r3, [r4, #0]
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	f043 0308 	orr.w	r3, r3, #8
 8016460:	81a3      	strh	r3, [r4, #12]
 8016462:	6923      	ldr	r3, [r4, #16]
 8016464:	b94b      	cbnz	r3, 801647a <__swsetup_r+0x7a>
 8016466:	89a3      	ldrh	r3, [r4, #12]
 8016468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801646c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016470:	d003      	beq.n	801647a <__swsetup_r+0x7a>
 8016472:	4621      	mov	r1, r4
 8016474:	4628      	mov	r0, r5
 8016476:	f000 f856 	bl	8016526 <__smakebuf_r>
 801647a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801647e:	f013 0201 	ands.w	r2, r3, #1
 8016482:	d00a      	beq.n	801649a <__swsetup_r+0x9a>
 8016484:	2200      	movs	r2, #0
 8016486:	60a2      	str	r2, [r4, #8]
 8016488:	6962      	ldr	r2, [r4, #20]
 801648a:	4252      	negs	r2, r2
 801648c:	61a2      	str	r2, [r4, #24]
 801648e:	6922      	ldr	r2, [r4, #16]
 8016490:	b942      	cbnz	r2, 80164a4 <__swsetup_r+0xa4>
 8016492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016496:	d1c5      	bne.n	8016424 <__swsetup_r+0x24>
 8016498:	bd38      	pop	{r3, r4, r5, pc}
 801649a:	0799      	lsls	r1, r3, #30
 801649c:	bf58      	it	pl
 801649e:	6962      	ldrpl	r2, [r4, #20]
 80164a0:	60a2      	str	r2, [r4, #8]
 80164a2:	e7f4      	b.n	801648e <__swsetup_r+0x8e>
 80164a4:	2000      	movs	r0, #0
 80164a6:	e7f7      	b.n	8016498 <__swsetup_r+0x98>
 80164a8:	24000040 	.word	0x24000040

080164ac <_sbrk_r>:
 80164ac:	b538      	push	{r3, r4, r5, lr}
 80164ae:	4d06      	ldr	r5, [pc, #24]	@ (80164c8 <_sbrk_r+0x1c>)
 80164b0:	2300      	movs	r3, #0
 80164b2:	4604      	mov	r4, r0
 80164b4:	4608      	mov	r0, r1
 80164b6:	602b      	str	r3, [r5, #0]
 80164b8:	f7eb fada 	bl	8001a70 <_sbrk>
 80164bc:	1c43      	adds	r3, r0, #1
 80164be:	d102      	bne.n	80164c6 <_sbrk_r+0x1a>
 80164c0:	682b      	ldr	r3, [r5, #0]
 80164c2:	b103      	cbz	r3, 80164c6 <_sbrk_r+0x1a>
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	240107f0 	.word	0x240107f0

080164cc <abort>:
 80164cc:	b508      	push	{r3, lr}
 80164ce:	2006      	movs	r0, #6
 80164d0:	f000 f88e 	bl	80165f0 <raise>
 80164d4:	2001      	movs	r0, #1
 80164d6:	f7eb fa53 	bl	8001980 <_exit>

080164da <__swhatbuf_r>:
 80164da:	b570      	push	{r4, r5, r6, lr}
 80164dc:	460c      	mov	r4, r1
 80164de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164e2:	2900      	cmp	r1, #0
 80164e4:	b096      	sub	sp, #88	@ 0x58
 80164e6:	4615      	mov	r5, r2
 80164e8:	461e      	mov	r6, r3
 80164ea:	da0d      	bge.n	8016508 <__swhatbuf_r+0x2e>
 80164ec:	89a3      	ldrh	r3, [r4, #12]
 80164ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80164f2:	f04f 0100 	mov.w	r1, #0
 80164f6:	bf14      	ite	ne
 80164f8:	2340      	movne	r3, #64	@ 0x40
 80164fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80164fe:	2000      	movs	r0, #0
 8016500:	6031      	str	r1, [r6, #0]
 8016502:	602b      	str	r3, [r5, #0]
 8016504:	b016      	add	sp, #88	@ 0x58
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	466a      	mov	r2, sp
 801650a:	f000 f879 	bl	8016600 <_fstat_r>
 801650e:	2800      	cmp	r0, #0
 8016510:	dbec      	blt.n	80164ec <__swhatbuf_r+0x12>
 8016512:	9901      	ldr	r1, [sp, #4]
 8016514:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016518:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801651c:	4259      	negs	r1, r3
 801651e:	4159      	adcs	r1, r3
 8016520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016524:	e7eb      	b.n	80164fe <__swhatbuf_r+0x24>

08016526 <__smakebuf_r>:
 8016526:	898b      	ldrh	r3, [r1, #12]
 8016528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801652a:	079d      	lsls	r5, r3, #30
 801652c:	4606      	mov	r6, r0
 801652e:	460c      	mov	r4, r1
 8016530:	d507      	bpl.n	8016542 <__smakebuf_r+0x1c>
 8016532:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016536:	6023      	str	r3, [r4, #0]
 8016538:	6123      	str	r3, [r4, #16]
 801653a:	2301      	movs	r3, #1
 801653c:	6163      	str	r3, [r4, #20]
 801653e:	b003      	add	sp, #12
 8016540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016542:	ab01      	add	r3, sp, #4
 8016544:	466a      	mov	r2, sp
 8016546:	f7ff ffc8 	bl	80164da <__swhatbuf_r>
 801654a:	9f00      	ldr	r7, [sp, #0]
 801654c:	4605      	mov	r5, r0
 801654e:	4639      	mov	r1, r7
 8016550:	4630      	mov	r0, r6
 8016552:	f7ff fafd 	bl	8015b50 <_malloc_r>
 8016556:	b948      	cbnz	r0, 801656c <__smakebuf_r+0x46>
 8016558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801655c:	059a      	lsls	r2, r3, #22
 801655e:	d4ee      	bmi.n	801653e <__smakebuf_r+0x18>
 8016560:	f023 0303 	bic.w	r3, r3, #3
 8016564:	f043 0302 	orr.w	r3, r3, #2
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	e7e2      	b.n	8016532 <__smakebuf_r+0xc>
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	6020      	str	r0, [r4, #0]
 8016570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016574:	81a3      	strh	r3, [r4, #12]
 8016576:	9b01      	ldr	r3, [sp, #4]
 8016578:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801657c:	b15b      	cbz	r3, 8016596 <__smakebuf_r+0x70>
 801657e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016582:	4630      	mov	r0, r6
 8016584:	f000 f84e 	bl	8016624 <_isatty_r>
 8016588:	b128      	cbz	r0, 8016596 <__smakebuf_r+0x70>
 801658a:	89a3      	ldrh	r3, [r4, #12]
 801658c:	f023 0303 	bic.w	r3, r3, #3
 8016590:	f043 0301 	orr.w	r3, r3, #1
 8016594:	81a3      	strh	r3, [r4, #12]
 8016596:	89a3      	ldrh	r3, [r4, #12]
 8016598:	431d      	orrs	r5, r3
 801659a:	81a5      	strh	r5, [r4, #12]
 801659c:	e7cf      	b.n	801653e <__smakebuf_r+0x18>

0801659e <_raise_r>:
 801659e:	291f      	cmp	r1, #31
 80165a0:	b538      	push	{r3, r4, r5, lr}
 80165a2:	4605      	mov	r5, r0
 80165a4:	460c      	mov	r4, r1
 80165a6:	d904      	bls.n	80165b2 <_raise_r+0x14>
 80165a8:	2316      	movs	r3, #22
 80165aa:	6003      	str	r3, [r0, #0]
 80165ac:	f04f 30ff 	mov.w	r0, #4294967295
 80165b0:	bd38      	pop	{r3, r4, r5, pc}
 80165b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80165b4:	b112      	cbz	r2, 80165bc <_raise_r+0x1e>
 80165b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165ba:	b94b      	cbnz	r3, 80165d0 <_raise_r+0x32>
 80165bc:	4628      	mov	r0, r5
 80165be:	f000 f853 	bl	8016668 <_getpid_r>
 80165c2:	4622      	mov	r2, r4
 80165c4:	4601      	mov	r1, r0
 80165c6:	4628      	mov	r0, r5
 80165c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165cc:	f000 b83a 	b.w	8016644 <_kill_r>
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d00a      	beq.n	80165ea <_raise_r+0x4c>
 80165d4:	1c59      	adds	r1, r3, #1
 80165d6:	d103      	bne.n	80165e0 <_raise_r+0x42>
 80165d8:	2316      	movs	r3, #22
 80165da:	6003      	str	r3, [r0, #0]
 80165dc:	2001      	movs	r0, #1
 80165de:	e7e7      	b.n	80165b0 <_raise_r+0x12>
 80165e0:	2100      	movs	r1, #0
 80165e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80165e6:	4620      	mov	r0, r4
 80165e8:	4798      	blx	r3
 80165ea:	2000      	movs	r0, #0
 80165ec:	e7e0      	b.n	80165b0 <_raise_r+0x12>
	...

080165f0 <raise>:
 80165f0:	4b02      	ldr	r3, [pc, #8]	@ (80165fc <raise+0xc>)
 80165f2:	4601      	mov	r1, r0
 80165f4:	6818      	ldr	r0, [r3, #0]
 80165f6:	f7ff bfd2 	b.w	801659e <_raise_r>
 80165fa:	bf00      	nop
 80165fc:	24000040 	.word	0x24000040

08016600 <_fstat_r>:
 8016600:	b538      	push	{r3, r4, r5, lr}
 8016602:	4d07      	ldr	r5, [pc, #28]	@ (8016620 <_fstat_r+0x20>)
 8016604:	2300      	movs	r3, #0
 8016606:	4604      	mov	r4, r0
 8016608:	4608      	mov	r0, r1
 801660a:	4611      	mov	r1, r2
 801660c:	602b      	str	r3, [r5, #0]
 801660e:	f7eb fa07 	bl	8001a20 <_fstat>
 8016612:	1c43      	adds	r3, r0, #1
 8016614:	d102      	bne.n	801661c <_fstat_r+0x1c>
 8016616:	682b      	ldr	r3, [r5, #0]
 8016618:	b103      	cbz	r3, 801661c <_fstat_r+0x1c>
 801661a:	6023      	str	r3, [r4, #0]
 801661c:	bd38      	pop	{r3, r4, r5, pc}
 801661e:	bf00      	nop
 8016620:	240107f0 	.word	0x240107f0

08016624 <_isatty_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	4d06      	ldr	r5, [pc, #24]	@ (8016640 <_isatty_r+0x1c>)
 8016628:	2300      	movs	r3, #0
 801662a:	4604      	mov	r4, r0
 801662c:	4608      	mov	r0, r1
 801662e:	602b      	str	r3, [r5, #0]
 8016630:	f7eb fa06 	bl	8001a40 <_isatty>
 8016634:	1c43      	adds	r3, r0, #1
 8016636:	d102      	bne.n	801663e <_isatty_r+0x1a>
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	b103      	cbz	r3, 801663e <_isatty_r+0x1a>
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	bd38      	pop	{r3, r4, r5, pc}
 8016640:	240107f0 	.word	0x240107f0

08016644 <_kill_r>:
 8016644:	b538      	push	{r3, r4, r5, lr}
 8016646:	4d07      	ldr	r5, [pc, #28]	@ (8016664 <_kill_r+0x20>)
 8016648:	2300      	movs	r3, #0
 801664a:	4604      	mov	r4, r0
 801664c:	4608      	mov	r0, r1
 801664e:	4611      	mov	r1, r2
 8016650:	602b      	str	r3, [r5, #0]
 8016652:	f7eb f983 	bl	800195c <_kill>
 8016656:	1c43      	adds	r3, r0, #1
 8016658:	d102      	bne.n	8016660 <_kill_r+0x1c>
 801665a:	682b      	ldr	r3, [r5, #0]
 801665c:	b103      	cbz	r3, 8016660 <_kill_r+0x1c>
 801665e:	6023      	str	r3, [r4, #0]
 8016660:	bd38      	pop	{r3, r4, r5, pc}
 8016662:	bf00      	nop
 8016664:	240107f0 	.word	0x240107f0

08016668 <_getpid_r>:
 8016668:	f7eb b970 	b.w	800194c <_getpid>

0801666c <_init>:
 801666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801666e:	bf00      	nop
 8016670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016672:	bc08      	pop	{r3}
 8016674:	469e      	mov	lr, r3
 8016676:	4770      	bx	lr

08016678 <_fini>:
 8016678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801667a:	bf00      	nop
 801667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801667e:	bc08      	pop	{r3}
 8016680:	469e      	mov	lr, r3
 8016682:	4770      	bx	lr
