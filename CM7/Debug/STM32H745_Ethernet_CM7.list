
STM32H745_Ethernet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bbe0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003500  0801be80  0801be80  0002be80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f380  0801f380  0002f380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f388  0801f388  0002f388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f38c  0801f38c  0002f38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0801f390  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077a0  2400009c  0801f42c  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400783c  0801f42c  0003783c  2**0
                  ALLOC
  9 .lwip_sec     00001a00  30040000  0801f42c  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00039a07  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000086f0  00000000  00000000  00069ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027a0  00000000  00000000  000721c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000024f0  00000000  00000000  00074968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004d0bf  00000000  00000000  00076e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040a9d  00000000  00000000  000c3f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a4a94  00000000  00000000  001049b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002a9448  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000abc4  00000000  00000000  002a9498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400009c 	.word	0x2400009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801be68 	.word	0x0801be68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a0 	.word	0x240000a0
 80002dc:	0801be68 	.word	0x0801be68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <SystemInit+0xc4>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <SystemInit+0xc4>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemInit+0xc4>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <SystemInit+0xc4>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemInit+0xc8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <SystemInit+0xc8>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemInit+0xc8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemInit+0xc8>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4924      	ldr	r1, [pc, #144]	; (800075c <SystemInit+0xc8>)
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <SystemInit+0xcc>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemInit+0xc8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <SystemInit+0xc8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemInit+0xc8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <SystemInit+0xc8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <SystemInit+0xc8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <SystemInit+0xc8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <SystemInit+0xc8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <SystemInit+0xc8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <SystemInit+0xc8>)
 8000704:	2200      	movs	r2, #0
 8000706:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <SystemInit+0xc8>)
 800070a:	2200      	movs	r2, #0
 800070c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <SystemInit+0xc8>)
 8000710:	2200      	movs	r2, #0
 8000712:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <SystemInit+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <SystemInit+0xc8>)
 800071a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <SystemInit+0xc8>)
 8000722:	2200      	movs	r2, #0
 8000724:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <SystemInit+0xd0>)
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <SystemInit+0xd0>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd4>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <SystemInit+0xd8>)
 8000738:	4013      	ands	r3, r2
 800073a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073e:	d202      	bcs.n	8000746 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <SystemInit+0xdc>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SystemInit+0xc4>)
 8000748:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800074c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00
 800075c:	58024400 	.word	0x58024400
 8000760:	eaf6ed7f 	.word	0xeaf6ed7f
 8000764:	580000c0 	.word	0x580000c0
 8000768:	5c001000 	.word	0x5c001000
 800076c:	ffff0000 	.word	0xffff0000
 8000770:	51008108 	.word	0x51008108

08000774 <_write>:
#include "main.h"
#include "usart.h"


int _write(int file, char *ptr, int len)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <vApplicationGetIdleTaskMemory+0x2c>)
 80007a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <vApplicationGetIdleTaskMemory+0x30>)
 80007a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	240000c0 	.word	0x240000c0
 80007c0:	24000114 	.word	0x24000114

080007c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_FREERTOS_Init+0x58>)
 80007cc:	f107 041c 	add.w	r4, r7, #28
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 fcee 	bl	800a1c6 <osThreadCreate>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_FREERTOS_Init+0x5c>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkTask */
  osThreadDef(BlinkTask, StartBlinkTask, osPriorityLow, 0, 256);
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_FREERTOS_Init+0x60>)
 80007f2:	463c      	mov	r4, r7
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkTaskHandle = osThreadCreate(osThread(BlinkTask), NULL);
 8000802:	463b      	mov	r3, r7
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f009 fcdd 	bl	800a1c6 <osThreadCreate>
 800080c:	4603      	mov	r3, r0
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <MX_FREERTOS_Init+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000812:	bf00      	nop
 8000814:	3738      	adds	r7, #56	; 0x38
 8000816:	46bd      	mov	sp, r7
 8000818:	bdb0      	pop	{r4, r5, r7, pc}
 800081a:	bf00      	nop
 800081c:	0801be98 	.word	0x0801be98
 8000820:	240000b8 	.word	0x240000b8
 8000824:	0801beb4 	.word	0x0801beb4
 8000828:	240000bc 	.word	0x240000bc

0800082c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000834:	f008 ff82 	bl	800973c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  http_server_netconn_init();
 8000838:	f000 f9b6 	bl	8000ba8 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f009 fd0e 	bl	800a25e <osDelay>
 8000842:	e7fb      	b.n	800083c <StartDefaultTask+0x10>

08000844 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	b0ad      	sub	sp, #180	; 0xb4
 8000848:	af06      	add	r7, sp, #24
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */

	uint32_t id0 = HAL_GetUIDw0();
 800084c:	f001 f842 	bl	80018d4 <HAL_GetUIDw0>
 8000850:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	uint8_t mac[6];

	// first 3 bytes are ST specific max prefixes
	mac[0] = 0x00;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	mac[1] = 0x80;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	mac[2] = 0xE1;
 8000860:	23e1      	movs	r3, #225	; 0xe1
 8000862:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

	// last 3 bytes are used to set unique mac based on UID
	mac[3] = (id0 >> 16) & 0x000000FF;
 8000866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	b2db      	uxtb	r3, r3
 800086e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	mac[4] = (id0 >> 8) & 0x000000FF;
 8000872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	mac[5] = (id0 >> 0) & 0x000000FF;
 800087e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	uint8_t msg[128];
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000888:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 800088c:	461e      	mov	r6, r3
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800088e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000892:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8000896:	f897 108b 	ldrb.w	r1, [r7, #139]	; 0x8b
 800089a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 800089e:	4604      	mov	r4, r0
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 80008a0:	f897 008d 	ldrb.w	r0, [r7, #141]	; 0x8d
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 80008a4:	4605      	mov	r5, r0
 80008a6:	f107 0008 	add.w	r0, r7, #8
 80008aa:	9504      	str	r5, [sp, #16]
 80008ac:	9403      	str	r4, [sp, #12]
 80008ae:	9102      	str	r1, [sp, #8]
 80008b0:	9201      	str	r2, [sp, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4633      	mov	r3, r6
 80008b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008ba:	490c      	ldr	r1, [pc, #48]	; (80008ec <StartBlinkTask+0xa8>)
 80008bc:	f01a f8f8 	bl	801aab0 <siprintf>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	HAL_UART_Transmit(&huart3, msg, len, HAL_MAX_DELAY);
 80008c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f107 0108 	add.w	r1, r7, #8
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <StartBlinkTask+0xac>)
 80008d6:	f006 f861 	bl	800699c <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008da:	2102      	movs	r1, #2
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <StartBlinkTask+0xb0>)
 80008de:	f003 f9f8 	bl	8003cd2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80008e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e6:	f009 fcba 	bl	800a25e <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008ea:	e7f6      	b.n	80008da <StartBlinkTask+0x96>
 80008ec:	0801bed0 	.word	0x0801bed0
 80008f0:	24000598 	.word	0x24000598
 80008f4:	58021000 	.word	0x58021000

080008f8 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092c:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <MX_GPIO_Init+0x164>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	4a4a      	ldr	r2, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093c:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <MX_GPIO_Init+0x164>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <MX_GPIO_Init+0x164>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a42      	ldr	r2, [pc, #264]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <MX_GPIO_Init+0x164>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <MX_GPIO_Init+0x164>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a3b      	ldr	r2, [pc, #236]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <MX_GPIO_Init+0x164>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <MX_GPIO_Init+0x164>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_GPIO_Init+0x164>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a2c      	ldr	r2, [pc, #176]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_GPIO_Init+0x164>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_GPIO_Init+0x168>)
 80009e8:	f003 f95a 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2102      	movs	r1, #2
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_GPIO_Init+0x16c>)
 80009f2:	f003 f955 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <MX_GPIO_Init+0x168>)
 8000a10:	f002 ff96 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a14:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_GPIO_Init+0x170>)
 8000a32:	f002 ff85 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_GPIO_Init+0x16c>)
 8000a4e:	f002 ff77 	bl	8003940 <HAL_GPIO_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58020400 	.word	0x58020400
 8000a64:	58021000 	.word	0x58021000
 8000a68:	58020000 	.word	0x58020000

08000a6c <http_server_netconn_serve>:
static const char http_404_html[] = "<html><head><title>Error</title></head><body><h1>LWIP Error</h1><p>These are not the droids you're looking for</body></html>";


/** Serve one HTTP connection accepted in the http thread */
static void http_server_netconn_serve(struct netconn *conn)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]
	u16_t buflen;
	err_t err;

	/* Read the data from the port, blocking if nothing yet there.
	 We assume the request (the part we care about) is in one netbuf */
	err = netconn_recv(conn, &inbuf);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f00c fdae 	bl	800d5dc <netconn_recv>
 8000a80:	4603      	mov	r3, r0
 8000a82:	75fb      	strb	r3, [r7, #23]

	if (err == ERR_OK)
 8000a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d131      	bne.n	8000af0 <http_server_netconn_serve+0x84>
	{
		netbuf_data(inbuf, (void**) &buf, &buflen);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	f107 020a 	add.w	r2, r7, #10
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00e fb22 	bl	800f0e0 <netbuf_data>

		/* Is this an HTTP GET command? (only check the first 5 chars, since
		 there are other formats for GET, and we're keeping it very simple )*/
		if(strncmp((char const *)buf,"GET /index.html ", 16) == 0)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	4919      	ldr	r1, [pc, #100]	; (8000b08 <http_server_netconn_serve+0x9c>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f01a f824 	bl	801aaf0 <strncmp>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d110      	bne.n	8000ad0 <http_server_netconn_serve+0x64>
		{
			/* Send the HTML header
			 * subtract 1 from the size, since we dont send the \0 in the string
			 * NETCONN_NOCOPY: our data is const static, so no need to copy it
			 */
			netconn_write(conn, http_html_hdr, sizeof(http_html_hdr) - 1, NETCONN_NOCOPY);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	222c      	movs	r2, #44	; 0x2c
 8000ab6:	4915      	ldr	r1, [pc, #84]	; (8000b0c <http_server_netconn_serve+0xa0>)
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f00c fe07 	bl	800d6cc <netconn_write_partly>

			/* Send our HTML page */
			netconn_write(conn, http_index_html, sizeof(http_index_html) - 1, NETCONN_NOCOPY);
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	22a3      	movs	r2, #163	; 0xa3
 8000ac6:	4912      	ldr	r1, [pc, #72]	; (8000b10 <http_server_netconn_serve+0xa4>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f00c fdff 	bl	800d6cc <netconn_write_partly>
 8000ace:	e00f      	b.n	8000af0 <http_server_netconn_serve+0x84>
		}
		else
		{
			netconn_write(conn, http_404_hdr, sizeof(http_404_hdr) - 1, NETCONN_NOCOPY);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	222f      	movs	r2, #47	; 0x2f
 8000ad8:	490e      	ldr	r1, [pc, #56]	; (8000b14 <http_server_netconn_serve+0xa8>)
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f00c fdf6 	bl	800d6cc <netconn_write_partly>
			netconn_write(conn, http_404_html, sizeof(http_404_html) - 1, NETCONN_NOCOPY);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	227c      	movs	r2, #124	; 0x7c
 8000ae8:	490b      	ldr	r1, [pc, #44]	; (8000b18 <http_server_netconn_serve+0xac>)
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f00c fdee 	bl	800d6cc <netconn_write_partly>
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f00c fe93 	bl	800d81c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
	 so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00e fad1 	bl	800f0a0 <netbuf_delete>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	0801bf10 	.word	0x0801bf10
 8000b0c:	0801ef68 	.word	0x0801ef68
 8000b10:	0801ef98 	.word	0x0801ef98
 8000b14:	0801f03c 	.word	0x0801f03c
 8000b18:	0801f06c 	.word	0x0801f06c

08000b1c <http_server_netconn_thread>:


/** The main function, never returns! */
static void http_server_netconn_thread(void *arg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	err_t err;
	LWIP_UNUSED_ARG(arg);

	/* Create a new TCP connection handle */
	/* Bind to port 80 (HTTP) with default IP address */
	conn = netconn_new(NETCONN_TCP);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f00c fb05 	bl	800d138 <netconn_new_with_proto_and_callback>
 8000b2e:	6178      	str	r0, [r7, #20]
	netconn_bind(conn, IP_ADDR_ANY, 80);
 8000b30:	2250      	movs	r2, #80	; 0x50
 8000b32:	4919      	ldr	r1, [pc, #100]	; (8000b98 <http_server_netconn_thread+0x7c>)
 8000b34:	6978      	ldr	r0, [r7, #20]
 8000b36:	f00c fb9f 	bl	800d278 <netconn_bind>
	LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d106      	bne.n	8000b4e <http_server_netconn_thread+0x32>
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <http_server_netconn_thread+0x80>)
 8000b42:	224e      	movs	r2, #78	; 0x4e
 8000b44:	4916      	ldr	r1, [pc, #88]	; (8000ba0 <http_server_netconn_thread+0x84>)
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <http_server_netconn_thread+0x88>)
 8000b48:	f019 ff5c 	bl	801aa04 <iprintf>
 8000b4c:	e021      	b.n	8000b92 <http_server_netconn_thread+0x76>

	/* Put the connection into LISTEN state */
	netconn_listen(conn);
 8000b4e:	21ff      	movs	r1, #255	; 0xff
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	f00c fbc9 	bl	800d2e8 <netconn_listen_with_backlog>

	do
	{
		err = netconn_accept(conn, &newconn);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6978      	ldr	r0, [r7, #20]
 8000b5e:	f00c fbef 	bl	800d340 <netconn_accept>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		if (err == ERR_OK)
 8000b66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d107      	bne.n	8000b7e <http_server_netconn_thread+0x62>
		{
			http_server_netconn_serve(newconn);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff7b 	bl	8000a6c <http_server_netconn_serve>
			netconn_delete(newconn);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00c fb57 	bl	800d22c <netconn_delete>
		}
	} while (err == ERR_OK);
 8000b7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0e7      	beq.n	8000b56 <http_server_netconn_thread+0x3a>

	LWIP_DEBUGF(HTTPD_DEBUG, ("http_server_netconn_thread: netconn_accept received error %d, shutting down", err));
	netconn_close(conn);
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f00c fe48 	bl	800d81c <netconn_close>
	netconn_delete(conn);
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f00c fb4d 	bl	800d22c <netconn_delete>
}
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0801f218 	.word	0x0801f218
 8000b9c:	0801bf24 	.word	0x0801bf24
 8000ba0:	0801bf40 	.word	0x0801bf40
 8000ba4:	0801bf5c 	.word	0x0801bf5c

08000ba8 <http_server_netconn_init>:


/** Initialize the HTTP server (start its thread) */
void http_server_netconn_init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000bae:	2304      	movs	r3, #4
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <http_server_netconn_init+0x20>)
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <http_server_netconn_init+0x24>)
 8000bbc:	f019 fe94 	bl	801a8e8 <sys_thread_new>
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08000b1d 	.word	0x08000b1d
 8000bcc:	0801bf84 	.word	0x0801bf84

08000bd0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bda:	f3bf 8f6f 	isb	sy
}
 8000bde:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <SCB_EnableICache+0x48>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
}
 8000bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bee:	f3bf 8f6f 	isb	sy
}
 8000bf2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SCB_EnableICache+0x48>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <SCB_EnableICache+0x48>)
 8000bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c00:	f3bf 8f4f 	dsb	sy
}
 8000c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c06:	f3bf 8f6f 	isb	sy
}
 8000c0a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <SCB_EnableDCache+0x84>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c2a:	f3bf 8f4f 	dsb	sy
}
 8000c2e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <SCB_EnableDCache+0x84>)
 8000c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c36:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	0b5b      	lsrs	r3, r3, #13
 8000c3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c40:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c4a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	015a      	lsls	r2, r3, #5
 8000c50:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000c54:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c5a:	4911      	ldr	r1, [pc, #68]	; (8000ca0 <SCB_EnableDCache+0x84>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	60ba      	str	r2, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1ef      	bne.n	8000c4c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	1e5a      	subs	r2, r3, #1
 8000c70:	60fa      	str	r2, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1e5      	bne.n	8000c42 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SCB_EnableDCache+0x84>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <SCB_EnableDCache+0x84>)
 8000c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c88:	f3bf 8f4f 	dsb	sy
}
 8000c8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c8e:	f3bf 8f6f 	isb	sy
}
 8000c92:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <SCB_CleanInvalidateDCache+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb2:	f3bf 8f4f 	dsb	sy
}
 8000cb6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <SCB_CleanInvalidateDCache+0x74>)
 8000cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cbe:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0b5b      	lsrs	r3, r3, #13
 8000cc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cc8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cd2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	015a      	lsls	r2, r3, #5
 8000cd8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cdc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <SCB_CleanInvalidateDCache+0x74>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1e5a      	subs	r2, r3, #1
 8000cee:	60ba      	str	r2, [r7, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1ef      	bne.n	8000cd4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	60fa      	str	r2, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1e5      	bne.n	8000cca <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cfe:	f3bf 8f4f 	dsb	sy
}
 8000d02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d04:	f3bf 8f6f 	isb	sy
}
 8000d08:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d22:	f000 f93b 	bl	8000f9c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d26:	f7ff ff53 	bl	8000bd0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d2a:	f7ff ff77 	bl	8000c1c <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d34:	bf00      	nop
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <main+0xe8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <main+0x30>
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	637a      	str	r2, [r7, #52]	; 0x34
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dcf4      	bgt.n	8000d36 <main+0x1a>
  if ( timeout < 0 )
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da01      	bge.n	8000d56 <main+0x3a>
  {
  Error_Handler();
 8000d52:	f000 f97f 	bl	8001054 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fd55 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f85b 	bl	8000e14 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <main+0xe8>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <main+0xe8>)
 8000d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <main+0xe8>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f002 ffc3 	bl	8003d08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2000      	movs	r0, #0
 8000d86:	f002 ffd9 	bl	8003d3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d90:	bf00      	nop
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <main+0xe8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d104      	bne.n	8000da8 <main+0x8c>
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	637a      	str	r2, [r7, #52]	; 0x34
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dcf4      	bgt.n	8000d92 <main+0x76>
if ( timeout < 0 )
 8000da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da01      	bge.n	8000db2 <main+0x96>
{
Error_Handler();
 8000dae:	f000 f951 	bl	8001054 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f7ff fda1 	bl	80008f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000db6:	f000 fb05 	bl	80013c4 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000dba:	f000 fab7 	bl	800132c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <main+0xec>)
 8000dc4:	f002 ff6c 	bl	8003ca0 <HAL_GPIO_WritePin>

  uint8_t msg[] = "\r\n----\r\nBuild: "  __DATE__  " @ "   __TIME__   "\r\n----\r\n";
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <main+0xf0>)
 8000dca:	1d3c      	adds	r4, r7, #4
 8000dcc:	461d      	mov	r5, r3
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dda:	c407      	stmia	r4!, {r0, r1, r2}
 8000ddc:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, msg, strlen((char *)msg), HAL_MAX_DELAY);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa7d 	bl	80002e0 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	1d39      	adds	r1, r7, #4
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <main+0xf4>)
 8000df2:	f005 fdd3 	bl	800699c <HAL_UART_Transmit>
//  HAL_TIM_Base_Start_IT(&htim13);

  // seems to work without this addition too
  SCB_CleanInvalidateDCache();
 8000df6:	f7ff ff55 	bl	8000ca4 <SCB_CleanInvalidateDCache>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000dfa:	f7ff fce3 	bl	80007c4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000dfe:	f009 f9cb 	bl	800a198 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <main+0xe6>
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58021000 	.word	0x58021000
 8000e0c:	0801bf98 	.word	0x0801bf98
 8000e10:	24000598 	.word	0x24000598

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0cc      	sub	sp, #304	; 0x130
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e1e:	224c      	movs	r2, #76	; 0x4c
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f019 fde6 	bl	801a9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f019 fddf 	bl	801a9f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e3e:	4618      	mov	r0, r3
 8000e40:	23bc      	movs	r3, #188	; 0xbc
 8000e42:	461a      	mov	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f019 fdd5 	bl	801a9f4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e4a:	2004      	movs	r0, #4
 8000e4c:	f002 ff8a 	bl	8003d64 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <SystemClock_Config+0x180>)
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <SystemClock_Config+0x180>)
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <SystemClock_Config+0x180>)
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f003 0201 	and.w	r2, r3, #1
 8000e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <SystemClock_Config+0x184>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e82:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <SystemClock_Config+0x184>)
 8000e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <SystemClock_Config+0x184>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ea4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea6:	bf00      	nop
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <SystemClock_Config+0x184>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb4:	d1f8      	bne.n	8000ea8 <SystemClock_Config+0x94>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ebc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000ed6:	234b      	movs	r3, #75	; 0x4b
 8000ed8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 ff87 	bl	8003e18 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000f10:	f000 f8a0 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	233f      	movs	r3, #63	; 0x3f
 8000f16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f26:	2308      	movs	r3, #8
 8000f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f2c:	2340      	movs	r3, #64	; 0x40
 8000f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fb3f 	bl	80045d0 <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000f58:	f000 f87c 	bl	8001054 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f64:	2202      	movs	r2, #2
 8000f66:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f70:	2200      	movs	r2, #0
 8000f72:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fef7 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x174>
  {
    Error_Handler();
 8000f84:	f000 f866 	bl	8001054 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58000400 	.word	0x58000400
 8000f98:	58024800 	.word	0x58024800

08000f9c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fae:	f000 fd91 	bl	8001ad4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MPU_Config+0x8c>)
 8000fbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fdaf 	bl	8001b44 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MPU_Config+0x90>)
 8000ff0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ff2:	230d      	movs	r3, #13
 8000ff4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ffe:	2303      	movs	r3, #3
 8001000:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001006:	2301      	movs	r3, #1
 8001008:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001012:	463b      	mov	r3, r7
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fd95 	bl	8001b44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800101a:	2004      	movs	r0, #4
 800101c:	f000 fd72 	bl	8001b04 <HAL_MPU_Enable>

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	30040000 	.word	0x30040000
 800102c:	30044000 	.word	0x30044000

08001030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001042:	f000 fc1b 	bl	800187c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40001400 	.word	0x40001400

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  HAL_TIM_Base_Stop_IT(&htim13);
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <Error_Handler+0x18>)
 800105a:	f005 fa25 	bl	80064a8 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2102      	movs	r1, #2
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <Error_Handler+0x1c>)
 8001064:	f002 fe1c 	bl	8003ca0 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000558 	.word	0x24000558
 8001070:	58021000 	.word	0x58021000

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x38>)
 800107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_MspInit+0x38>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_MspInit+0x38>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	210f      	movs	r1, #15
 800109c:	f06f 0001 	mvn.w	r0, #1
 80010a0:	f000 fcf0 	bl	8001a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	58024400 	.word	0x58024400

080010b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2037      	movs	r0, #55	; 0x37
 80010c6:	f000 fcdd 	bl	8001a84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80010ca:	2037      	movs	r0, #55	; 0x37
 80010cc:	f000 fcf4 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_InitTick+0xa8>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d6:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_InitTick+0xa8>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_InitTick+0xa8>)
 80010e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fdf5 	bl	8004ce8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010fe:	f003 fdc7 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8001102:	4603      	mov	r3, r0
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_InitTick+0xac>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	0c9b      	lsrs	r3, r3, #18
 8001112:	3b01      	subs	r3, #1
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0xb0>)
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_InitTick+0xb4>)
 800111a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_InitTick+0xb0>)
 800111e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001122:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_InitTick+0xb0>)
 8001126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001128:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_InitTick+0xb0>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_InitTick+0xb0>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <HAL_InitTick+0xb0>)
 8001138:	f005 f960 	bl	80063fc <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d104      	bne.n	800114c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_InitTick+0xb0>)
 8001144:	f005 f986 	bl	8006454 <HAL_TIM_Base_Start_IT>
 8001148:	4603      	mov	r3, r0
 800114a:	e000      	b.n	800114e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	3738      	adds	r7, #56	; 0x38
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58024400 	.word	0x58024400
 800115c:	431bde83 	.word	0x431bde83
 8001160:	24000514 	.word	0x24000514
 8001164:	40001400 	.word	0x40001400

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80011a2:	f005 f9ac 	bl	80064fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011a6:	2102      	movs	r1, #2
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 80011aa:	f002 fd92 	bl	8003cd2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000558 	.word	0x24000558
 80011b8:	58021000 	.word	0x58021000

080011bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM7_IRQHandler+0x10>)
 80011c2:	f005 f99c 	bl	80064fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000514 	.word	0x24000514

080011d0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <ETH_IRQHandler+0x10>)
 80011d6:	f001 f9eb 	bl	80025b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24000674 	.word	0x24000674

080011e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	return 1;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_kill>:

int _kill(int pid, int sig)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <_kill+0x20>)
 8001200:	2216      	movs	r2, #22
 8001202:	601a      	str	r2, [r3, #0]
	return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	24007828 	.word	0x24007828

08001218 <_exit>:

void _exit (int status)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe5 	bl	80011f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800122a:	e7fe      	b.n	800122a <_exit+0x12>

0800122c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
	}

return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128e:	605a      	str	r2, [r3, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_isatty>:

int _isatty(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x50>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x16>
		heap_end = &end;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <_sbrk+0x50>)
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <_sbrk+0x54>)
 80012e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <_sbrk+0x50>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <_sbrk+0x50>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	466a      	mov	r2, sp
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d905      	bls.n	8001306 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <_sbrk+0x58>)
 80012fc:	220c      	movs	r2, #12
 80012fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e006      	b.n	8001314 <_sbrk+0x44>
	}

	heap_end += incr;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <_sbrk+0x50>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <_sbrk+0x50>)
 8001310:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	24000554 	.word	0x24000554
 8001324:	24007840 	.word	0x24007840
 8001328:	24007828 	.word	0x24007828

0800132c <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_TIM13_Init+0x40>)
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <MX_TIM13_Init+0x44>)
 8001334:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 599;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_TIM13_Init+0x40>)
 8001338:	f240 2257 	movw	r2, #599	; 0x257
 800133c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_TIM13_Init+0x40>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62499;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_TIM13_Init+0x40>)
 8001346:	f24f 4223 	movw	r2, #62499	; 0xf423
 800134a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_TIM13_Init+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_TIM13_Init+0x40>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_TIM13_Init+0x40>)
 800135a:	f005 f84f 	bl	80063fc <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001364:	f7ff fe76 	bl	8001054 <Error_Handler>
  }

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000558 	.word	0x24000558
 8001370:	40001c00 	.word	0x40001c00

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_Base_MspInit+0x48>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d116      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <HAL_TIM_Base_MspInit+0x4c>)
 800138e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2105      	movs	r1, #5
 80013a8:	202c      	movs	r0, #44	; 0x2c
 80013aa:	f000 fb6b 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013ae:	202c      	movs	r0, #44	; 0x2c
 80013b0:	f000 fb82 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40001c00 	.word	0x40001c00
 80013c0:	58024400 	.word	0x58024400

080013c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_USART3_UART_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_USART3_UART_Init+0x90>)
 800140e:	f005 fa75 	bl	80068fc <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001418:	f7ff fe1c 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001420:	f008 f867 	bl	80094f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800142a:	f7ff fe13 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001432:	f008 f89c 	bl	800956e <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800143c:	f7ff fe0a 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001442:	f008 f81d 	bl	8009480 <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800144c:	f7ff fe02 	bl	8001054 <Error_Handler>
  }

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	24000598 	.word	0x24000598
 8001458:	40004800 	.word	0x40004800

0800145c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <HAL_UART_MspInit+0x88>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12e      	bne.n	80014dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 8001486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014cc:	2307      	movs	r3, #7
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x90>)
 80014d8:	f002 fa32 	bl	8003940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004800 	.word	0x40004800
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014f6:	e003      	b.n	8001500 <LoopCopyDataInit>

080014f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014fe:	3104      	adds	r1, #4

08001500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001508:	d3f6      	bcc.n	80014f8 <CopyDataInit>
  ldr  r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800150c:	e002      	b.n	8001514 <LoopFillZerobss>

0800150e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800150e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001510:	f842 3b04 	str.w	r3, [r2], #4

08001514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001518:	d3f9      	bcc.n	800150e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800151a:	f7ff f8bb 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f019 fa27 	bl	801a970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fbfb 	bl	8000d1c <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800152c:	0801f390 	.word	0x0801f390
  ldr  r0, =_sdata
 8001530:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001534:	2400009c 	.word	0x2400009c
  ldr  r2, =_sbss
 8001538:	2400009c 	.word	0x2400009c
  ldr  r3, = _ebss
 800153c:	2400783c 	.word	0x2400783c

08001540 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC3_IRQHandler>

08001542 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <LAN8742_RegisterBusIO+0x28>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <LAN8742_RegisterBusIO+0x28>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <LAN8742_RegisterBusIO+0x28>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e014      	b.n	800159a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d17c      	bne.n	80016c0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2220      	movs	r2, #32
 80015d8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e01c      	b.n	800161a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	2112      	movs	r1, #18
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	4798      	blx	r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da03      	bge.n	80015fc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80015f4:	f06f 0304 	mvn.w	r3, #4
 80015f8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80015fa:	e00b      	b.n	8001614 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	d105      	bne.n	8001614 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
         break;
 8001612:	e005      	b.n	8001620 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b1f      	cmp	r3, #31
 800161e:	d9df      	bls.n	80015e0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b1f      	cmp	r3, #31
 8001626:	d902      	bls.n	800162e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001628:	f06f 0302 	mvn.w	r3, #2
 800162c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d145      	bne.n	80016c0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6810      	ldr	r0, [r2, #0]
 800163c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001640:	2100      	movs	r1, #0
 8001642:	4798      	blx	r3
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	db37      	blt.n	80016ba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6810      	ldr	r0, [r2, #0]
 8001652:	f107 0208 	add.w	r2, r7, #8
 8001656:	2100      	movs	r1, #0
 8001658:	4798      	blx	r3
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	db28      	blt.n	80016b2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4798      	blx	r3
 8001666:	4603      	mov	r3, r0
 8001668:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800166a:	e01c      	b.n	80016a6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4798      	blx	r3
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800167e:	d80e      	bhi.n	800169e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6810      	ldr	r0, [r2, #0]
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2100      	movs	r1, #0
 800168e:	4798      	blx	r3
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	da07      	bge.n	80016a6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001696:	f06f 0304 	mvn.w	r3, #4
 800169a:	613b      	str	r3, [r7, #16]
                 break;
 800169c:	e010      	b.n	80016c0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800169e:	f06f 0301 	mvn.w	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
               break;
 80016a4:	e00c      	b.n	80016c0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1dd      	bne.n	800166c <LAN8742_Init+0xc6>
 80016b0:	e006      	b.n	80016c0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80016b2:	f06f 0304 	mvn.w	r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	e002      	b.n	80016c0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80016ba:	f06f 0303 	mvn.w	r3, #3
 80016be:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d112      	bne.n	80016ec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4798      	blx	r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80016d0:	bf00      	nop
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4798      	blx	r3
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016e4:	d9f5      	bls.n	80016d2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80016ec:	693b      	ldr	r3, [r7, #16]
 }
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6810      	ldr	r0, [r2, #0]
 800170a:	f107 020c 	add.w	r2, r7, #12
 800170e:	2101      	movs	r1, #1
 8001710:	4798      	blx	r3
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	da02      	bge.n	800171e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001718:	f06f 0304 	mvn.w	r3, #4
 800171c:	e06e      	b.n	80017fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6810      	ldr	r0, [r2, #0]
 8001726:	f107 020c 	add.w	r2, r7, #12
 800172a:	2101      	movs	r1, #1
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	da02      	bge.n	800173a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001734:	f06f 0304 	mvn.w	r3, #4
 8001738:	e060      	b.n	80017fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001744:	2301      	movs	r3, #1
 8001746:	e059      	b.n	80017fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6810      	ldr	r0, [r2, #0]
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	2100      	movs	r1, #0
 8001756:	4798      	blx	r3
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	da02      	bge.n	8001764 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800175e:	f06f 0304 	mvn.w	r3, #4
 8001762:	e04b      	b.n	80017fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d11b      	bne.n	80017a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <LAN8742_GetLinkState+0x90>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001782:	2302      	movs	r3, #2
 8001784:	e03a      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001790:	2303      	movs	r3, #3
 8001792:	e033      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800179e:	2304      	movs	r3, #4
 80017a0:	e02c      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017a2:	2305      	movs	r3, #5
 80017a4:	e02a      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6810      	ldr	r0, [r2, #0]
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	211f      	movs	r1, #31
 80017b4:	4798      	blx	r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da02      	bge.n	80017c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80017bc:	f06f 0304 	mvn.w	r3, #4
 80017c0:	e01c      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017cc:	2306      	movs	r3, #6
 80017ce:	e015      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 031c 	and.w	r3, r3, #28
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	d101      	bne.n	80017de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017da:	2302      	movs	r3, #2
 80017dc:	e00e      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 031c 	and.w	r3, r3, #28
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d101      	bne.n	80017ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e007      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 031c 	and.w	r3, r3, #28
 80017f2:	2b14      	cmp	r3, #20
 80017f4:	d101      	bne.n	80017fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017f6:	2304      	movs	r3, #4
 80017f8:	e000      	b.n	80017fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017fa:	2305      	movs	r3, #5
    }				
  }
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f92f 	bl	8001a6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001810:	f003 f894 	bl	800493c <HAL_RCC_GetSysClockFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_Init+0x68>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	4913      	ldr	r1, [pc, #76]	; (8001870 <HAL_Init+0x6c>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_Init+0x68>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_Init+0x6c>)
 8001838:	5cd3      	ldrb	r3, [r2, r3]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x70>)
 8001846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_Init+0x74>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fc2e 	bl	80010b0 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e002      	b.n	8001864 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800185e:	f7ff fc09 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	58024400 	.word	0x58024400
 8001870:	0801ef58 	.word	0x0801ef58
 8001874:	24000004 	.word	0x24000004
 8001878:	24000000 	.word	0x24000000

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2400000c 	.word	0x2400000c
 80018a0:	24000624 	.word	0x24000624

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	24000624 	.word	0x24000624

080018bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetREVID+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	5c001000 	.word	0x5c001000

080018d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetUIDw0+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	1ff1e800 	.word	0x1ff1e800

080018ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	58000400 	.word	0x58000400

08001914 <__NVIC_SetPriorityGrouping>:
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <__NVIC_SetPriorityGrouping+0x40>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x40>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00
 8001958:	05fa0000 	.word	0x05fa0000

0800195c <__NVIC_GetPriorityGrouping>:
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff4c 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a92:	f7ff ff63 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001a96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f7ff ffb3 	bl	8001a08 <NVIC_EncodePriority>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff82 	bl	80019b4 <__NVIC_SetPriority>
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff56 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ad8:	f3bf 8f5f 	dmb	sy
}
 8001adc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_MPU_Disable+0x28>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_MPU_Disable+0x28>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_MPU_Disable+0x2c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	e000ed90 	.word	0xe000ed90

08001b04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_MPU_Enable+0x38>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_MPU_Enable+0x3c>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_MPU_Enable+0x3c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b22:	f3bf 8f4f 	dsb	sy
}
 8001b26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b28:	f3bf 8f6f 	isb	sy
}
 8001b2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed90 	.word	0xe000ed90
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	785a      	ldrb	r2, [r3, #1]
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_MPU_ConfigRegion+0x84>)
 8001b52:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d029      	beq.n	8001bb0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_MPU_ConfigRegion+0x84>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7b1b      	ldrb	r3, [r3, #12]
 8001b68:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7adb      	ldrb	r3, [r3, #11]
 8001b6e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7a9b      	ldrb	r3, [r3, #10]
 8001b76:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b5b      	ldrb	r3, [r3, #13]
 8001b7e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b9b      	ldrb	r3, [r3, #14]
 8001b86:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7bdb      	ldrb	r3, [r3, #15]
 8001b8e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7a5b      	ldrb	r3, [r3, #9]
 8001b96:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ba0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001baa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001bae:	e005      	b.n	8001bbc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_MPU_ConfigRegion+0x84>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_MPU_ConfigRegion+0x84>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed90 	.word	0xe000ed90

08001bcc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_GetCurrentCPUID+0x24>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d101      	bne.n	8001be2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e000      	b.n	8001be4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001be2:	2301      	movs	r3, #1
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0c8      	b.n	8001d98 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f007 fe40 	bl	8009894 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2223      	movs	r2, #35	; 0x23
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_ETH_Init+0x1ac>)
 8001c1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c20:	4a5f      	ldr	r2, [pc, #380]	; (8001da0 <HAL_ETH_Init+0x1ac>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_ETH_Init+0x1ac>)
 8001c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7a1b      	ldrb	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fe53 	bl	80018ec <HAL_SYSCFG_ETHInterfaceSelect>
 8001c46:	e003      	b.n	8001c50 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c4c:	f7ff fe4e 	bl	80018ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c68:	f7ff fe1c 	bl	80018a4 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c6e:	e00f      	b.n	8001c90 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001c70:	f7ff fe18 	bl	80018a4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c7e:	d907      	bls.n	8001c90 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	22e0      	movs	r2, #224	; 0xe0
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e083      	b.n	8001d98 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e6      	bne.n	8001c70 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 faf8 	bl	8003298 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ca8:	f002 ffc2 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <HAL_ETH_Init+0x1b0>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9a      	lsrs	r2, r3, #18
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 fa4b 	bl	800315c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cd2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ce2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	22e0      	movs	r2, #224	; 0xe0
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e04a      	b.n	8001d98 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_ETH_Init+0x1b4>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6952      	ldr	r2, [r2, #20]
 8001d16:	0051      	lsls	r1, r2, #1
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d22:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f001 fb0e 	bl	8003348 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f001 fb54 	bl	80033da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	3305      	adds	r3, #5
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	3303      	adds	r3, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	3302      	adds	r3, #2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	041b      	lsls	r3, r3, #16
 8001d64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d7e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2210      	movs	r2, #16
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58024400 	.word	0x58024400
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	ffff8001 	.word	0xffff8001

08001dac <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	330a      	adds	r3, #10
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_ETH_DescAssignMemory+0x28>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d904      	bls.n	8001dde <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e021      	b.n	8001e22 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d17f      	bne.n	8001f50 <HAL_ETH_Start_IT+0x122>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2223      	movs	r2, #35	; 0x23
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e018      	b.n	8001e8e <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d902      	bls.n	8001e7a <HAL_ETH_Start_IT+0x4c>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3b04      	subs	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	330a      	adds	r3, #10
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d9e3      	bls.n	8001e5c <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0202 	orr.w	r2, r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ee6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f02:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001f1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2210      	movs	r2, #16
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2222      	movs	r2, #34	; 0x22
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f24d 0341 	movw	r3, #53313	; 0xd041
 8001f42:	430b      	orrs	r3, r1
 8001f44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f48:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_ETH_Start_IT+0x124>
  }
  else
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	60bb      	str	r3, [r7, #8]
  uint32_t index;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d060      	beq.n	8002038 <HAL_ETH_Stop_IT+0xd8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2223      	movs	r2, #35	; 0x23
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt     */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_ETH_Stop_IT+0xe8>)
 8001f8e:	400b      	ands	r3, r1
 8001f90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f94:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fcc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0202 	bic.w	r2, r2, #2
 8002002:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e008      	b.n	800201c <HAL_ETH_Stop_IT+0xbc>
    {
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	60da      	str	r2, [r3, #12]
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d9f3      	bls.n	800200a <HAL_ETH_Stop_IT+0xaa>
    }

    heth->RxDescList.ItMode = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2210      	movs	r2, #16
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2210      	movs	r2, #16
 8002032:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_ETH_Stop_IT+0xda>
  }
  else
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	ffff7fbe 	.word	0xffff7fbe

0800204c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e079      	b.n	8002162 <HAL_ETH_Transmit+0x116>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	2b10      	cmp	r3, #16
 8002074:	d174      	bne.n	8002160 <HAL_ETH_Transmit+0x114>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002076:	2200      	movs	r2, #0
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f001 fa0c 	bl	8003498 <ETH_Prepare_Tx_Descriptors>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e065      	b.n	8002162 <HAL_ETH_Transmit+0x116>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3206      	adds	r2, #6
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d904      	bls.n	80020c0 <HAL_ETH_Transmit+0x74>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	1f1a      	subs	r2, r3, #4
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3106      	adds	r1, #6
 80020cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80020d8:	f7ff fbe4 	bl	80018a4 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80020de:	e036      	b.n	800214e <HAL_ETH_Transmit+0x102>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_ETH_Transmit+0xce>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f043 0208 	orr.w	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002108:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	22e0      	movs	r2, #224	; 0xe0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e023      	b.n	8002162 <HAL_ETH_Transmit+0x116>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d015      	beq.n	800214e <HAL_ETH_Transmit+0x102>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002122:	f7ff fbbf 	bl	80018a4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <HAL_ETH_Transmit+0xec>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <HAL_ETH_Transmit+0x102>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	f043 0204 	orr.w	r2, r3, #4
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2210      	movs	r2, #16
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e009      	b.n	8002162 <HAL_ETH_Transmit+0x116>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dbc4      	blt.n	80020e0 <HAL_ETH_Transmit+0x94>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_ETH_Transmit+0x116>
  }
  else
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800216a:	b480      	push	{r7}
 800216c:	b089      	sub	sp, #36	; 0x24
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	332c      	adds	r3, #44	; 0x2c
 8002176:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d06b      	beq.n	8002274 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800219c:	2300      	movs	r3, #0
 800219e:	e0bc      	b.n	800231a <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d036      	beq.n	8002220 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	3301      	adds	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d902      	bls.n	80021d4 <HAL_ETH_IsRxDataAvailable+0x6a>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b04      	subs	r3, #4
 80021d2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db11      	blt.n	800220a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2201      	movs	r2, #1
 80021f6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d902      	bls.n	800220a <HAL_ETH_IsRxDataAvailable+0xa0>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3b04      	subs	r3, #4
 8002208:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800221c:	2301      	movs	r3, #1
 800221e:	e07c      	b.n	800231a <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d902      	bls.n	8002246 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3b04      	subs	r3, #4
 8002244:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e010      	b.n	8002274 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3301      	adds	r3, #1
 8002256:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d902      	bls.n	800226a <HAL_ETH_IsRxDataAvailable+0x100>
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3b04      	subs	r3, #4
 8002268:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db02      	blt.n	8002282 <HAL_ETH_IsRxDataAvailable+0x118>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d98e      	bls.n	80021a0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d044      	beq.n	8002312 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e036      	b.n	800230a <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022aa:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d902      	bls.n	80022fa <HAL_ETH_IsRxDataAvailable+0x190>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3b04      	subs	r3, #4
 80022f8:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3c4      	bcc.n	800229c <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]

  return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b08a      	sub	sp, #40	; 0x28
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	332c      	adds	r3, #44	; 0x2c
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07d      	b.n	800245a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff feff 	bl	800216a <HAL_ETH_IsRxDataAvailable>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e071      	b.n	800245a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002384:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	e031      	b.n	80023f0 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	461a      	mov	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	461a      	mov	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023c6:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	3301      	adds	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d902      	bls.n	80023da <HAL_ETH_GetRxDataBuffer+0xb4>
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3b04      	subs	r3, #4
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	3301      	adds	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6a3a      	ldr	r2, [r7, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3c7      	bcc.n	800238c <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	461a      	mov	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	429a      	cmp	r2, r3
 800241c:	d803      	bhi.n	8002426 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	e018      	b.n	8002458 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	461a      	mov	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	1ad2      	subs	r2, r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e001      	b.n	8002458 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3728      	adds	r7, #40	; 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	332c      	adds	r3, #44	; 0x2c
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe72 	bl	800216a <HAL_ETH_IsRxDataAvailable>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e017      	b.n	80024c0 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4413      	add	r3, r2
 8002498:	3b01      	subs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d902      	bls.n	80024a8 <HAL_ETH_GetRxDataLength+0x46>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3b04      	subs	r3, #4
 80024a6:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	332c      	adds	r3, #44	; 0x2c
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e055      	b.n	80025a4 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	e03c      	b.n	8002586 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800251a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	3b01      	subs	r3, #1
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	429a      	cmp	r2, r3
 8002562:	d20d      	bcs.n	8002580 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	3301      	adds	r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d902      	bls.n	8002576 <HAL_ETH_BuildRxDescriptors+0xae>
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	3b04      	subs	r3, #4
 8002574:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	3301      	adds	r3, #1
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3be      	bcc.n	800250c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002598:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3724      	adds	r7, #36	; 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d115      	bne.n	80025f8 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d10b      	bne.n	80025f8 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f007 fa2d 	bl	8009a40 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ee:	461a      	mov	r2, r3
 80025f0:	f248 0340 	movw	r3, #32832	; 0x8040
 80025f4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10b      	bne.n	8002638 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8cf 	bl	80027c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262e:	461a      	mov	r2, r3
 8002630:	f248 0301 	movw	r3, #32769	; 0x8001
 8002634:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264c:	d14e      	bne.n	80026ec <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002662:	d143      	bne.n	80026ec <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f043 0208 	orr.w	r2, r3, #8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d11c      	bne.n	80026c0 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002692:	f241 1302 	movw	r3, #4354	; 0x1102
 8002696:	4013      	ands	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	22e0      	movs	r2, #224	; 0xe0
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
 80026be:	e012      	b.n	80026e6 <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026cc:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80026e2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f876 	bl	80027d8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80026f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80026fc:	d10e      	bne.n	800271c <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	22e0      	movs	r2, #224	; 0xe0
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f86b 	bl	80027ec <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d10d      	bne.n	8002748 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002734:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f85f 	bl	8002800 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b20      	cmp	r3, #32
 8002756:	d10d      	bne.n	8002774 <HAL_ETH_IRQHandler+0x1c4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f853 	bl	8002814 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002774:	f7ff fa2a 	bl	8001bcc <HAL_GetCurrentCPUID>
 8002778:	4603      	mov	r3, r0
 800277a:	2b03      	cmp	r3, #3
 800277c:	d10d      	bne.n	800279a <HAL_ETH_IRQHandler+0x1ea>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_ETH_IRQHandler+0x20c>)
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d014      	beq.n	80027b4 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_ETH_IRQHandler+0x20c>)
 800278c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f848 	bl	8002828 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8002798:	e00c      	b.n	80027b4 <HAL_ETH_IRQHandler+0x204>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_ETH_IRQHandler+0x210>)
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_ETH_IRQHandler+0x210>)
 80027a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f83a 	bl	8002828 <HAL_ETH_WakeUpCallback>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	58000080 	.word	0x58000080
 80027c0:	580000c0 	.word	0x580000c0

080027c4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e03e      	b.n	80028dc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002866:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	055b      	lsls	r3, r3, #21
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f043 030c 	orr.w	r3, r3, #12
 800288a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800289e:	f7ff f801 	bl	80018a4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028a4:	e009      	b.n	80028ba <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80028a6:	f7fe fffd 	bl	80018a4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d901      	bls.n	80028ba <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e010      	b.n	80028dc <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ed      	bne.n	80028a6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e03c      	b.n	8002980 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	055b      	lsls	r3, r3, #21
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 030c 	bic.w	r3, r3, #12
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_ETH_WritePHYRegister+0xa4>)
 8002946:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_ETH_WritePHYRegister+0xa4>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002952:	f7fe ffa7 	bl	80018a4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002958:	e009      	b.n	800296e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800295a:	f7fe ffa3 	bl	80018a4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002968:	d901      	bls.n	800296e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e008      	b.n	8002980 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ed      	bne.n	800295a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40028000 	.word	0x40028000

0800298c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e1c3      	b.n	8002d28 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0e5b      	lsrs	r3, r3, #25
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002cb4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cc4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e00a      	b.n	8002d5e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d105      	bne.n	8002d5c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f860 	bl	8002e18 <ETH_SetMACConfig>

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d78:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d80:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d82:	f001 ff55 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8002d86:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d908      	bls.n	8002da2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d804      	bhi.n	8002da2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e027      	b.n	8002df2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d908      	bls.n	8002dbc <HAL_ETH_SetMDIOClockRange+0x54>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d204      	bcs.n	8002dbc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e01a      	b.n	8002df2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d303      	bcc.n	8002dcc <HAL_ETH_SetMDIOClockRange+0x64>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d911      	bls.n	8002df0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d908      	bls.n	8002de6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d804      	bhi.n	8002de6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e005      	b.n	8002df2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e000      	b.n	8002df2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002df0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	01312cff 	.word	0x01312cff
 8002e08:	02160ebf 	.word	0x02160ebf
 8002e0c:	03938700 	.word	0x03938700
 8002e10:	05f5e0ff 	.word	0x05f5e0ff
 8002e14:	08f0d17f 	.word	0x08f0d17f

08002e18 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002e2a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002e32:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	7b1b      	ldrb	r3, [r3, #12]
 8002e38:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e3a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	7b5b      	ldrb	r3, [r3, #13]
 8002e40:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e42:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	7b9b      	ldrb	r3, [r3, #14]
 8002e48:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7bdb      	ldrb	r3, [r3, #15]
 8002e50:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e52:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	7c12      	ldrb	r2, [r2, #16]
 8002e58:	2a00      	cmp	r2, #0
 8002e5a:	d102      	bne.n	8002e62 <ETH_SetMACConfig+0x4a>
 8002e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e60:	e000      	b.n	8002e64 <ETH_SetMACConfig+0x4c>
 8002e62:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e64:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	7c52      	ldrb	r2, [r2, #17]
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d102      	bne.n	8002e74 <ETH_SetMACConfig+0x5c>
 8002e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e72:	e000      	b.n	8002e76 <ETH_SetMACConfig+0x5e>
 8002e74:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e76:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7c9b      	ldrb	r3, [r3, #18]
 8002e7c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e7e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e84:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002e8a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	7f1b      	ldrb	r3, [r3, #28]
 8002e90:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002e92:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	7f5b      	ldrb	r3, [r3, #29]
 8002e98:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002e9a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	7f92      	ldrb	r2, [r2, #30]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d102      	bne.n	8002eaa <ETH_SetMACConfig+0x92>
 8002ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea8:	e000      	b.n	8002eac <ETH_SetMACConfig+0x94>
 8002eaa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002eac:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7fdb      	ldrb	r3, [r3, #31]
 8002eb2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002eb4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d102      	bne.n	8002ec6 <ETH_SetMACConfig+0xae>
 8002ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec4:	e000      	b.n	8002ec8 <ETH_SetMACConfig+0xb0>
 8002ec6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002ec8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002ece:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ed8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b56      	ldr	r3, [pc, #344]	; (8003044 <ETH_SetMACConfig+0x22c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f02:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f04:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f0c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f0e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f16:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f18:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d102      	bne.n	8002f2a <ETH_SetMACConfig+0x112>
 8002f24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f28:	e000      	b.n	8002f2c <ETH_SetMACConfig+0x114>
 8002f2a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f2c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <ETH_SetMACConfig+0x230>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f50:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <ETH_SetMACConfig+0x234>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f74:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f7a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d101      	bne.n	8002f8a <ETH_SetMACConfig+0x172>
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	e000      	b.n	8002f8c <ETH_SetMACConfig+0x174>
 8002f8a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f8c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f9e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	430b      	orrs	r3, r1
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002fb4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002fbc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f023 0103 	bic.w	r1, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002fe2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d101      	bne.n	8003006 <ETH_SetMACConfig+0x1ee>
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	e000      	b.n	8003008 <ETH_SetMACConfig+0x1f0>
 8003006:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003008:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003010:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003012:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800301a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003028:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	430a      	orrs	r2, r1
 8003034:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	00048083 	.word	0x00048083
 8003048:	c0f88000 	.word	0xc0f88000
 800304c:	fffffef0 	.word	0xfffffef0

08003050 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b38      	ldr	r3, [pc, #224]	; (8003148 <ETH_SetDMAConfig+0xf8>)
 8003066:	4013      	ands	r3, r2
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003076:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	791b      	ldrb	r3, [r3, #4]
 800307c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003082:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	7b1b      	ldrb	r3, [r3, #12]
 8003088:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <ETH_SetDMAConfig+0xfc>)
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030a8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7b5b      	ldrb	r3, [r3, #13]
 80030ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <ETH_SetDMAConfig+0x100>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	430b      	orrs	r3, r1
 80030d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	7d1b      	ldrb	r3, [r3, #20]
 80030e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80030e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	7f5b      	ldrb	r3, [r3, #29]
 80030e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <ETH_SetDMAConfig+0x104>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	430b      	orrs	r3, r1
 8003106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	7f1b      	ldrb	r3, [r3, #28]
 8003112:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <ETH_SetDMAConfig+0x108>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	430b      	orrs	r3, r1
 8003134:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003138:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	ffff87fd 	.word	0xffff87fd
 800314c:	ffff2ffe 	.word	0xffff2ffe
 8003150:	fffec000 	.word	0xfffec000
 8003154:	ffc0efef 	.word	0xffc0efef
 8003158:	7fc0ffff 	.word	0x7fc0ffff

0800315c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b0a4      	sub	sp, #144	; 0x90
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800316a:	2300      	movs	r3, #0
 800316c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80031b4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80031b8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80031c0:	2300      	movs	r3, #0
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80031d6:	2300      	movs	r3, #0
 80031d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80031da:	2300      	movs	r3, #0
 80031dc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80031de:	2300      	movs	r3, #0
 80031e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80031f4:	2320      	movs	r3, #32
 80031f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003206:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800320c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003210:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003218:	2302      	movs	r3, #2
 800321a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003236:	2300      	movs	r3, #0
 8003238:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fde6 	bl	8002e18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003250:	2301      	movs	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003266:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800326a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003274:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800327c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fee1 	bl	8003050 <ETH_SetDMAConfig>
}
 800328e:	bf00      	nop
 8003290:	3790      	adds	r7, #144	; 0x90
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032b2:	f001 fcbd 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 80032b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d908      	bls.n	80032d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d804      	bhi.n	80032d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e027      	b.n	8003322 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d908      	bls.n	80032ec <ETH_MAC_MDIO_ClkConfig+0x54>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d204      	bcs.n	80032ec <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e01a      	b.n	8003322 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d303      	bcc.n	80032fc <ETH_MAC_MDIO_ClkConfig+0x64>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d911      	bls.n	8003320 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d908      	bls.n	8003316 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d804      	bhi.n	8003316 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e005      	b.n	8003322 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e000      	b.n	8003322 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003320:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	01312cff 	.word	0x01312cff
 8003338:	02160ebf 	.word	0x02160ebf
 800333c:	03938700 	.word	0x03938700
 8003340:	05f5e0ff 	.word	0x05f5e0ff
 8003344:	08f0d17f 	.word	0x08f0d17f

08003348 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e01d      	b.n	8003392 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68d9      	ldr	r1, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	3206      	adds	r2, #6
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d9de      	bls.n	8003356 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a6:	461a      	mov	r2, r3
 80033a8:	2303      	movs	r3, #3
 80033aa:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e024      	b.n	8003432 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6919      	ldr	r1, [r3, #16]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	330a      	adds	r3, #10
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d9d7      	bls.n	80033e8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345e:	461a      	mov	r2, r3
 8003460:	2303      	movs	r3, #3
 8003462:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003472:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f503 62d8 	add.w	r2, r3, #1728	; 0x6c0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003486:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003498:	b480      	push	{r7}
 800349a:	b08d      	sub	sp, #52	; 0x34
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3318      	adds	r3, #24
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d6:	d101      	bne.n	80034dc <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80034d8:	2302      	movs	r3, #2
 80034da:	e22b      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x49c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d044      	beq.n	8003572 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <ETH_Prepare_Tx_Descriptors+0x220>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003514:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d027      	beq.n	8003572 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	b29a      	uxth	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	431a      	orrs	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003560:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003570:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	4b4e      	ldr	r3, [pc, #312]	; (80036bc <ETH_Prepare_Tx_Descriptors+0x224>)
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	6992      	ldr	r2, [r2, #24]
 800358a:	431a      	orrs	r2, r3
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <ETH_Prepare_Tx_Descriptors+0x11c>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d030      	beq.n	8003616 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	3301      	adds	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d902      	bls.n	80035de <ETH_Prepare_Tx_Descriptors+0x146>
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	3b04      	subs	r3, #4
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	3301      	adds	r3, #1
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035fa:	d10c      	bne.n	8003616 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003612:	2302      	movs	r3, #2
 8003614:	e18e      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x49c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	3301      	adds	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <ETH_Prepare_Tx_Descriptors+0x224>)
 800362c:	4013      	ands	r3, r2
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	6852      	ldr	r2, [r2, #4]
 8003632:	431a      	orrs	r2, r3
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003656:	4013      	ands	r3, r2
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	6852      	ldr	r2, [r2, #4]
 800365c:	0412      	lsls	r2, r2, #16
 800365e:	431a      	orrs	r2, r3
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e008      	b.n	8003678 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003672:	4013      	ands	r3, r2
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	04db      	lsls	r3, r3, #19
 8003692:	431a      	orrs	r2, r3
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	69d2      	ldr	r2, [r2, #28]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e02e      	b.n	8003716 <ETH_Prepare_Tx_Descriptors+0x27e>
 80036b8:	ffff0000 	.word	0xffff0000
 80036bc:	ffffc000 	.word	0xffffc000
 80036c0:	c000ffff 	.word	0xc000ffff
 80036c4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <ETH_Prepare_Tx_Descriptors+0x46c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	431a      	orrs	r2, r3
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80c0 	beq.w	80038e6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	431a      	orrs	r2, r3
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003778:	e0b5      	b.n	80038e6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	3301      	adds	r3, #1
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	2b03      	cmp	r3, #3
 8003790:	d902      	bls.n	8003798 <ETH_Prepare_Tx_Descriptors+0x300>
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	3b04      	subs	r3, #4
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ba:	d126      	bne.n	800380a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	e016      	b.n	80037fe <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	3301      	adds	r3, #1
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d902      	bls.n	80037ee <ETH_Prepare_Tx_Descriptors+0x356>
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	3b04      	subs	r3, #4
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	429a      	cmp	r2, r3
 8003804:	d3e4      	bcc.n	80037d0 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003806:	2302      	movs	r3, #2
 8003808:	e094      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x49c>
    }

    descnbr += 1U;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	3301      	adds	r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	4b38      	ldr	r3, [pc, #224]	; (8003908 <ETH_Prepare_Tx_Descriptors+0x470>)
 8003826:	4013      	ands	r3, r2
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	6852      	ldr	r2, [r2, #4]
 800382c:	431a      	orrs	r2, r3
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <ETH_Prepare_Tx_Descriptors+0x474>)
 8003850:	4013      	ands	r3, r2
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	6852      	ldr	r2, [r2, #4]
 8003856:	0412      	lsls	r2, r2, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e008      	b.n	8003872 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <ETH_Prepare_Tx_Descriptors+0x474>)
 800386c:	4013      	ands	r3, r2
 800386e:	6a3a      	ldr	r2, [r7, #32]
 8003870:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00f      	beq.n	800389e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <ETH_Prepare_Tx_Descriptors+0x478>)
 8003884:	4013      	ands	r3, r2
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	69d2      	ldr	r2, [r2, #28]
 800388a:	431a      	orrs	r2, r3
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e017      	b.n	80038ce <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <ETH_Prepare_Tx_Descriptors+0x46c>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f47f af45 	bne.w	800377a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <ETH_Prepare_Tx_Descriptors+0x47c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	e00d      	b.n	8003920 <ETH_Prepare_Tx_Descriptors+0x488>
 8003904:	ffff8000 	.word	0xffff8000
 8003908:	ffffc000 	.word	0xffffc000
 800390c:	c000ffff 	.word	0xc000ffff
 8003910:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003930:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3734      	adds	r7, #52	; 0x34
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800394e:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_GPIO_Init+0x234>)
 8003950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003952:	e194      	b.n	8003c7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8186 	beq.w	8003c78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d00b      	beq.n	800398c <HAL_GPIO_Init+0x4c>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d007      	beq.n	800398c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003980:	2b11      	cmp	r3, #17
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b12      	cmp	r3, #18
 800398a:	d130      	bne.n	80039ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2203      	movs	r2, #3
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039c2:	2201      	movs	r2, #1
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0201 	and.w	r2, r3, #1
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0xee>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b12      	cmp	r3, #18
 8003a2c:	d123      	bne.n	8003a76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	69b9      	ldr	r1, [r7, #24]
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80e0 	beq.w	8003c78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003abe:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_GPIO_Init+0x23c>)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <HAL_GPIO_Init+0x240>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d052      	beq.n	8003ba8 <HAL_GPIO_Init+0x268>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_GPIO_Init+0x244>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_GPIO_Init+0x22e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_GPIO_Init+0x248>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02b      	beq.n	8003b6a <HAL_GPIO_Init+0x22a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_GPIO_Init+0x24c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x226>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_GPIO_Init+0x250>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x222>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_GPIO_Init+0x254>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x21e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_GPIO_Init+0x258>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x21a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_GPIO_Init+0x25c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x216>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_GPIO_Init+0x260>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x212>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_GPIO_Init+0x264>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x20e>
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	e02d      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b4e:	230a      	movs	r3, #10
 8003b50:	e02b      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b52:	2308      	movs	r3, #8
 8003b54:	e029      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b56:	2307      	movs	r3, #7
 8003b58:	e027      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	e025      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b5e:	2305      	movs	r3, #5
 8003b60:	e023      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b62:	2304      	movs	r3, #4
 8003b64:	e021      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e01f      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e01d      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e01b      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b72:	bf00      	nop
 8003b74:	58000080 	.word	0x58000080
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58000400 	.word	0x58000400
 8003b80:	58020000 	.word	0x58020000
 8003b84:	58020400 	.word	0x58020400
 8003b88:	58020800 	.word	0x58020800
 8003b8c:	58020c00 	.word	0x58020c00
 8003b90:	58021000 	.word	0x58021000
 8003b94:	58021400 	.word	0x58021400
 8003b98:	58021800 	.word	0x58021800
 8003b9c:	58021c00 	.word	0x58021c00
 8003ba0:	58022000 	.word	0x58022000
 8003ba4:	58022400 	.word	0x58022400
 8003ba8:	2300      	movs	r3, #0
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	f002 0203 	and.w	r2, r2, #3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4093      	lsls	r3, r2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bba:	4938      	ldr	r1, [pc, #224]	; (8003c9c <HAL_GPIO_Init+0x35c>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f47f ae63 	bne.w	8003954 <HAL_GPIO_Init+0x14>
  }
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	3724      	adds	r7, #36	; 0x24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	58000400 	.word	0x58000400

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	887b      	ldrh	r3, [r7, #2]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d104      	bne.n	8003cf6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cec:	887b      	ldrh	r3, [r7, #2]
 8003cee:	041a      	lsls	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003cf4:	e002      	b.n	8003cfc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <HAL_HSEM_FastTake+0x2c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3320      	adds	r3, #32
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <HAL_HSEM_FastTake+0x30>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	58026400 	.word	0x58026400
 8003d38:	80000300 	.word	0x80000300

08003d3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003d46:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_HSEM_Release+0x24>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	58026400 	.word	0x58026400

08003d64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d00a      	beq.n	8003d8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d78:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e040      	b.n	8003e0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e03e      	b.n	8003e0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d8e:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d96:	491f      	ldr	r1, [pc, #124]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d9e:	f7fd fd81 	bl	80018a4 <HAL_GetTick>
 8003da2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003da4:	e009      	b.n	8003dba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003da6:	f7fd fd7d 	bl	80018a4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db4:	d901      	bls.n	8003dba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e028      	b.n	8003e0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d1ee      	bne.n	8003da6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b1e      	cmp	r3, #30
 8003dcc:	d008      	beq.n	8003de0 <HAL_PWREx_ConfigSupply+0x7c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d005      	beq.n	8003de0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b1d      	cmp	r3, #29
 8003dd8:	d002      	beq.n	8003de0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8003dde:	d114      	bne.n	8003e0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003de0:	f7fd fd60 	bl	80018a4 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003de6:	e009      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003de8:	f7fd fd5c 	bl	80018a4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d901      	bls.n	8003dfc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e007      	b.n	8003e0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d1ee      	bne.n	8003de8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	58024800 	.word	0x58024800

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	; 0x30
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e3cb      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8087 	beq.w	8003f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e38:	4b8c      	ldr	r3, [pc, #560]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e42:	4b8a      	ldr	r3, [pc, #552]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCC_OscConfig+0x46>
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b18      	cmp	r3, #24
 8003e52:	d110      	bne.n	8003e76 <HAL_RCC_OscConfig+0x5e>
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5e:	4b83      	ldr	r3, [pc, #524]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d06c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x12c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d168      	bne.n	8003f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e3a5      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x76>
 8003e80:	4b7a      	ldr	r3, [pc, #488]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a79      	ldr	r2, [pc, #484]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	e02e      	b.n	8003eec <HAL_RCC_OscConfig+0xd4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x98>
 8003e96:	4b75      	ldr	r3, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a74      	ldr	r2, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b72      	ldr	r3, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a71      	ldr	r2, [pc, #452]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e01d      	b.n	8003eec <HAL_RCC_OscConfig+0xd4>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xbc>
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6b      	ldr	r2, [pc, #428]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a68      	ldr	r2, [pc, #416]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0xd4>
 8003ed4:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a64      	ldr	r2, [pc, #400]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b62      	ldr	r3, [pc, #392]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a61      	ldr	r2, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fcd6 	bl	80018a4 <HAL_GetTick>
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fd fcd2 	bl	80018a4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e359      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f0e:	4b57      	ldr	r3, [pc, #348]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0xe4>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fcc2 	bl	80018a4 <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fd fcbe 	bl	80018a4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e345      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f36:	4b4d      	ldr	r3, [pc, #308]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x10c>
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8094 	beq.w	800407c <HAL_RCC_OscConfig+0x264>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f54:	4b45      	ldr	r3, [pc, #276]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f5e:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_RCC_OscConfig+0x162>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2b18      	cmp	r3, #24
 8003f6e:	d12d      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1b4>
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d128      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7a:	4b3c      	ldr	r3, [pc, #240]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCC_OscConfig+0x17a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e317      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	f7fd fc93 	bl	80018bc <HAL_GetREVID>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d80a      	bhi.n	8003fb6 <HAL_RCC_OscConfig+0x19e>
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	031b      	lsls	r3, r3, #12
 8003fae:	492f      	ldr	r1, [pc, #188]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb4:	e062      	b.n	800407c <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	4929      	ldr	r1, [pc, #164]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fca:	e057      	b.n	800407c <HAL_RCC_OscConfig+0x264>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d038      	beq.n	8004046 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 0219 	bic.w	r2, r3, #25
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4922      	ldr	r1, [pc, #136]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fd fc5d 	bl	80018a4 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fd fc59 	bl	80018a4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e2e0      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	f7fd fc56 	bl	80018bc <HAL_GetREVID>
 8004010:	4603      	mov	r3, r0
 8004012:	f241 0203 	movw	r2, #4099	; 0x1003
 8004016:	4293      	cmp	r3, r2
 8004018:	d80a      	bhi.n	8004030 <HAL_RCC_OscConfig+0x218>
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_RCC_OscConfig+0x254>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	4910      	ldr	r1, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x254>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e025      	b.n	800407c <HAL_RCC_OscConfig+0x264>
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	490b      	ldr	r1, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	e01a      	b.n	800407c <HAL_RCC_OscConfig+0x264>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_OscConfig+0x254>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a08      	ldr	r2, [pc, #32]	; (800406c <HAL_RCC_OscConfig+0x254>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd fc27 	bl	80018a4 <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004058:	e00a      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405a:	f7fd fc23 	bl	80018a4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d903      	bls.n	8004070 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e2aa      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
 800406c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004070:	4b97      	ldr	r3, [pc, #604]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ee      	bne.n	800405a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 808f 	beq.w	80041a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004094:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d007      	beq.n	80040b0 <HAL_RCC_OscConfig+0x298>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b18      	cmp	r3, #24
 80040a4:	d12d      	bne.n	8004102 <HAL_RCC_OscConfig+0x2ea>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d128      	bne.n	8004102 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040b0:	4b87      	ldr	r3, [pc, #540]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2b0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e27c      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c8:	f7fd fbf8 	bl	80018bc <HAL_GetREVID>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d80a      	bhi.n	80040ec <HAL_RCC_OscConfig+0x2d4>
 80040d6:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	069b      	lsls	r3, r3, #26
 80040e4:	497a      	ldr	r1, [pc, #488]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ea:	e05d      	b.n	80041a8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ec:	4b78      	ldr	r3, [pc, #480]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	4975      	ldr	r1, [pc, #468]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004100:	e052      	b.n	80041a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d035      	beq.n	8004176 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800410a:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a70      	ldr	r2, [pc, #448]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd fbc5 	bl	80018a4 <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800411e:	f7fd fbc1 	bl	80018a4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e248      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004130:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800413c:	f7fd fbbe 	bl	80018bc <HAL_GetREVID>
 8004140:	4603      	mov	r3, r0
 8004142:	f241 0203 	movw	r2, #4099	; 0x1003
 8004146:	4293      	cmp	r3, r2
 8004148:	d80a      	bhi.n	8004160 <HAL_RCC_OscConfig+0x348>
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	495d      	ldr	r1, [pc, #372]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
 800415e:	e023      	b.n	80041a8 <HAL_RCC_OscConfig+0x390>
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4958      	ldr	r1, [pc, #352]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]
 8004174:	e018      	b.n	80041a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004176:	4b56      	ldr	r3, [pc, #344]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a55      	ldr	r2, [pc, #340]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fd fb8f 	bl	80018a4 <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800418a:	f7fd fb8b 	bl	80018a4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e212      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d036      	beq.n	8004222 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d019      	beq.n	80041f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041bc:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	4a43      	ldr	r2, [pc, #268]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fb6c 	bl	80018a4 <HAL_GetTick>
 80041cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fd fb68 	bl	80018a4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1ef      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041e2:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x3b8>
 80041ee:	e018      	b.n	8004222 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f4:	4a36      	ldr	r2, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fb52 	bl	80018a4 <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004204:	f7fd fb4e 	bl	80018a4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1d5      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004216:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004236:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800423c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004242:	f7fd fb2f 	bl	80018a4 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800424a:	f7fd fb2b 	bl	80018a4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1b2      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x432>
 8004268:	e018      	b.n	800429c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004276:	f7fd fb15 	bl	80018a4 <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800427e:	f7fd fb11 	bl	80018a4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e198      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCC_OscConfig+0x4b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8085 	beq.w	80043b4 <HAL_RCC_OscConfig+0x59c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_RCC_OscConfig+0x4bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_RCC_OscConfig+0x4bc>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b6:	f7fd faf5 	bl	80018a4 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042bc:	e00c      	b.n	80042d8 <HAL_RCC_OscConfig+0x4c0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fd faf1 	bl	80018a4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b64      	cmp	r3, #100	; 0x64
 80042ca:	d905      	bls.n	80042d8 <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e178      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042d8:	4b96      	ldr	r3, [pc, #600]	; (8004534 <HAL_RCC_OscConfig+0x71c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ec      	beq.n	80042be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x4e2>
 80042ec:	4b92      	ldr	r3, [pc, #584]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a91      	ldr	r2, [pc, #580]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	e02d      	b.n	8004356 <HAL_RCC_OscConfig+0x53e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x504>
 8004302:	4b8d      	ldr	r3, [pc, #564]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a8c      	ldr	r2, [pc, #560]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	4b8a      	ldr	r3, [pc, #552]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a89      	ldr	r2, [pc, #548]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e01c      	b.n	8004356 <HAL_RCC_OscConfig+0x53e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x526>
 8004324:	4b84      	ldr	r3, [pc, #528]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a83      	ldr	r2, [pc, #524]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	4b81      	ldr	r3, [pc, #516]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a80      	ldr	r2, [pc, #512]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0x53e>
 800433e:	4b7e      	ldr	r3, [pc, #504]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a7d      	ldr	r2, [pc, #500]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a7a      	ldr	r2, [pc, #488]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x572>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd faa1 	bl	80018a4 <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fa9d 	bl	80018a4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e122      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437c:	4b6e      	ldr	r3, [pc, #440]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x54e>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x59c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fd fa8b 	bl	80018a4 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x590>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fa87 	bl	80018a4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e10c      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a8:	4b63      	ldr	r3, [pc, #396]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x57a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8101 	beq.w	80045c0 <HAL_RCC_OscConfig+0x7a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043be:	4b5e      	ldr	r3, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c6:	2b18      	cmp	r3, #24
 80043c8:	f000 80bc 	beq.w	8004544 <HAL_RCC_OscConfig+0x72c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f040 8095 	bne.w	8004500 <HAL_RCC_OscConfig+0x6e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b58      	ldr	r3, [pc, #352]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd fa5f 	bl	80018a4 <HAL_GetTick>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fa5b 	bl	80018a4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0e2      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043fc:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x5d2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800440a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_RCC_OscConfig+0x724>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	430a      	orrs	r2, r1
 800441c:	4946      	ldr	r1, [pc, #280]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800441e:	4313      	orrs	r3, r2
 8004420:	628b      	str	r3, [r1, #40]	; 0x28
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	3b01      	subs	r3, #1
 8004428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	3b01      	subs	r3, #1
 8004432:	025b      	lsls	r3, r3, #9
 8004434:	b29b      	uxth	r3, r3
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	3b01      	subs	r3, #1
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	3b01      	subs	r3, #1
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004452:	4939      	ldr	r1, [pc, #228]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004454:	4313      	orrs	r3, r2
 8004456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004458:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4a36      	ldr	r2, [pc, #216]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004464:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_RCC_OscConfig+0x728>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004470:	00d2      	lsls	r2, r2, #3
 8004472:	4931      	ldr	r1, [pc, #196]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004474:	4313      	orrs	r3, r2
 8004476:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004478:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f023 020c 	bic.w	r2, r3, #12
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	492c      	ldr	r1, [pc, #176]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004486:	4313      	orrs	r3, r2
 8004488:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f023 0202 	bic.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4928      	ldr	r1, [pc, #160]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004498:	4313      	orrs	r3, r2
 800449a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd f9e4 	bl	80018a4 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x6da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd f9e0 	bl	80018a4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x6da>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e067      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x6c8>
 80044fe:	e05f      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd f9ca 	bl	80018a4 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd f9c6 	bl	80018a4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04d      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004526:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCC_OscConfig+0x720>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x6fc>
 8004532:	e045      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
 8004534:	58024800 	.word	0x58024800
 8004538:	58024400 	.word	0x58024400
 800453c:	fffffc0c 	.word	0xfffffc0c
 8004540:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b01      	cmp	r3, #1
 8004556:	d031      	beq.n	80045bc <HAL_RCC_OscConfig+0x7a4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0203 	and.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d12a      	bne.n	80045bc <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0x7a4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d11a      	bne.n	80045bc <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d111      	bne.n	80045bc <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x7aa>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3730      	adds	r7, #48	; 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400

080045d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e19c      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e4:	4b8a      	ldr	r3, [pc, #552]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d910      	bls.n	8004614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 020f 	bic.w	r2, r3, #15
 80045fa:	4985      	ldr	r1, [pc, #532]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e184      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d010      	beq.n	8004642 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800462c:	429a      	cmp	r2, r3
 800462e:	d908      	bls.n	8004642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004630:	4b78      	ldr	r3, [pc, #480]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	4975      	ldr	r1, [pc, #468]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800463e:	4313      	orrs	r3, r2
 8004640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d010      	beq.n	8004670 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	4b70      	ldr	r3, [pc, #448]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465a:	429a      	cmp	r2, r3
 800465c:	d908      	bls.n	8004670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800465e:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	496a      	ldr	r1, [pc, #424]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004688:	429a      	cmp	r2, r3
 800468a:	d908      	bls.n	800469e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	495e      	ldr	r1, [pc, #376]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800469a:	4313      	orrs	r3, r2
 800469c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d908      	bls.n	80046cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046ba:	4b56      	ldr	r3, [pc, #344]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4953      	ldr	r1, [pc, #332]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d908      	bls.n	80046fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f023 020f 	bic.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4947      	ldr	r1, [pc, #284]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d055      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004706:	4b43      	ldr	r3, [pc, #268]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4940      	ldr	r1, [pc, #256]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004714:	4313      	orrs	r3, r2
 8004716:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d107      	bne.n	8004730 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004720:	4b3c      	ldr	r3, [pc, #240]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d121      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0f6      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004738:	4b36      	ldr	r3, [pc, #216]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d115      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0ea      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0de      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004760:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0d6      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f023 0207 	bic.w	r2, r3, #7
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4925      	ldr	r1, [pc, #148]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fd f88f 	bl	80018a4 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478a:	f7fd f88b 	bl	80018a4 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0be      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d1eb      	bne.n	800478a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d010      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d208      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	490e      	ldr	r1, [pc, #56]	; (8004814 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d214      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 020f 	bic.w	r2, r3, #15
 80047f6:	4906      	ldr	r1, [pc, #24]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <HAL_RCC_ClockConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e086      	b.n	800491e <HAL_RCC_ClockConfig+0x34e>
 8004810:	52002000 	.word	0x52002000
 8004814:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004830:	429a      	cmp	r2, r3
 8004832:	d208      	bcs.n	8004846 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004834:	4b3c      	ldr	r3, [pc, #240]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	4939      	ldr	r1, [pc, #228]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004842:	4313      	orrs	r3, r2
 8004844:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800485e:	429a      	cmp	r2, r3
 8004860:	d208      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	492e      	ldr	r1, [pc, #184]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004870:	4313      	orrs	r3, r2
 8004872:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488c:	429a      	cmp	r2, r3
 800488e:	d208      	bcs.n	80048a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4922      	ldr	r1, [pc, #136]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d208      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048be:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	4917      	ldr	r1, [pc, #92]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048d0:	f000 f834 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	4912      	ldr	r1, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <HAL_RCC_ClockConfig+0x358>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x360>)
 8004906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x364>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x368>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fbcc 	bl	80010b0 <HAL_InitTick>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	58024400 	.word	0x58024400
 800492c:	0801ef58 	.word	0x0801ef58
 8004930:	24000004 	.word	0x24000004
 8004934:	24000000 	.word	0x24000000
 8004938:	24000008 	.word	0x24000008

0800493c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004942:	4bb3      	ldr	r3, [pc, #716]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800494a:	2b18      	cmp	r3, #24
 800494c:	f200 8155 	bhi.w	8004bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	080049bd 	.word	0x080049bd
 800495c:	08004bfb 	.word	0x08004bfb
 8004960:	08004bfb 	.word	0x08004bfb
 8004964:	08004bfb 	.word	0x08004bfb
 8004968:	08004bfb 	.word	0x08004bfb
 800496c:	08004bfb 	.word	0x08004bfb
 8004970:	08004bfb 	.word	0x08004bfb
 8004974:	08004bfb 	.word	0x08004bfb
 8004978:	080049e3 	.word	0x080049e3
 800497c:	08004bfb 	.word	0x08004bfb
 8004980:	08004bfb 	.word	0x08004bfb
 8004984:	08004bfb 	.word	0x08004bfb
 8004988:	08004bfb 	.word	0x08004bfb
 800498c:	08004bfb 	.word	0x08004bfb
 8004990:	08004bfb 	.word	0x08004bfb
 8004994:	08004bfb 	.word	0x08004bfb
 8004998:	080049e9 	.word	0x080049e9
 800499c:	08004bfb 	.word	0x08004bfb
 80049a0:	08004bfb 	.word	0x08004bfb
 80049a4:	08004bfb 	.word	0x08004bfb
 80049a8:	08004bfb 	.word	0x08004bfb
 80049ac:	08004bfb 	.word	0x08004bfb
 80049b0:	08004bfb 	.word	0x08004bfb
 80049b4:	08004bfb 	.word	0x08004bfb
 80049b8:	080049ef 	.word	0x080049ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049bc:	4b94      	ldr	r3, [pc, #592]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049c8:	4b91      	ldr	r3, [pc, #580]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	4a90      	ldr	r2, [pc, #576]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049da:	e111      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049dc:	4b8d      	ldr	r3, [pc, #564]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049de:	61bb      	str	r3, [r7, #24]
    break;
 80049e0:	e10e      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049e2:	4b8d      	ldr	r3, [pc, #564]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049e4:	61bb      	str	r3, [r7, #24]
    break;
 80049e6:	e10b      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049e8:	4b8c      	ldr	r3, [pc, #560]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049ea:	61bb      	str	r3, [r7, #24]
    break;
 80049ec:	e108      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049f8:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a04:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a0e:	4b80      	ldr	r3, [pc, #512]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	08db      	lsrs	r3, r3, #3
 8004a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80e1 	beq.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	f000 8083 	beq.w	8004b40 <HAL_RCC_GetSysClockFreq+0x204>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f200 80a1 	bhi.w	8004b84 <HAL_RCC_GetSysClockFreq+0x248>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x114>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d056      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a4e:	e099      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a50:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02d      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a5c:	4b6c      	ldr	r3, [pc, #432]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	4a6b      	ldr	r2, [pc, #428]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a86:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ab6:	e087      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aca:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afa:	e065      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3e:	e043      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	e021      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	0a5b      	lsrs	r3, r3, #9
 8004bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 3a90 	vmov	r3, s15
 8004bf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bf2:	e005      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
    break;
 8004bf8:	e002      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bfc:	61bb      	str	r3, [r7, #24]
    break;
 8004bfe:	bf00      	nop
  }

  return sysclockfreq;
 8004c00:	69bb      	ldr	r3, [r7, #24]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3724      	adds	r7, #36	; 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	58024400 	.word	0x58024400
 8004c14:	03d09000 	.word	0x03d09000
 8004c18:	003d0900 	.word	0x003d0900
 8004c1c:	007a1200 	.word	0x007a1200
 8004c20:	46000000 	.word	0x46000000
 8004c24:	4c742400 	.word	0x4c742400
 8004c28:	4a742400 	.word	0x4a742400
 8004c2c:	4af42400 	.word	0x4af42400

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c36:	f7ff fe81 	bl	800493c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490f      	ldr	r1, [pc, #60]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	58024400 	.word	0x58024400
 8004c84:	0801ef58 	.word	0x0801ef58
 8004c88:	24000004 	.word	0x24000004
 8004c8c:	24000000 	.word	0x24000000

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c94:	f7ff ffcc 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	0801ef58 	.word	0x0801ef58

08004cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004cc0:	f7ff ffb6 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	0801ef58 	.word	0x0801ef58

08004ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	223f      	movs	r2, #63	; 0x3f
 8004cf6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0207 	and.w	r2, r3, #7
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004d04:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004d10:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_RCC_GetClockConfig+0x7c>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCC_GetClockConfig+0x80>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	601a      	str	r2, [r3, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	58024400 	.word	0x58024400
 8004d68:	52002000 	.word	0x52002000

08004d6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03f      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d90:	d02a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d96:	d824      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d9c:	d018      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da2:	d81e      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dae:	e018      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4ba3      	ldr	r3, [pc, #652]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4aa2      	ldr	r2, [pc, #648]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dbc:	e015      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 f9b5 	bl	8006134 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dce:	e00c      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fa5e 	bl	8006298 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004de0:	e003      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004df0:	4b93      	ldr	r3, [pc, #588]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	4990      	ldr	r1, [pc, #576]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	650b      	str	r3, [r1, #80]	; 0x50
 8004e02:	e001      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d03d      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d826      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e39 	.word	0x08004e39
 8004e28:	08004e47 	.word	0x08004e47
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e71 	.word	0x08004e71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e38:	4b81      	ldr	r3, [pc, #516]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a80      	ldr	r2, [pc, #512]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e44:	e015      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f971 	bl	8006134 <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e56:	e00c      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fa1a 	bl	8006298 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e78:	4b71      	ldr	r3, [pc, #452]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	496e      	ldr	r1, [pc, #440]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	650b      	str	r3, [r1, #80]	; 0x50
 8004e8a:	e001      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d042      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea4:	d02b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	d825      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004eac:	2bc0      	cmp	r3, #192	; 0xc0
 8004eae:	d028      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb2:	d821      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d016      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d81d      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ec4:	e018      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec6:	4b5e      	ldr	r3, [pc, #376]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	4a5d      	ldr	r2, [pc, #372]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ed2:	e017      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 f92a 	bl	8006134 <RCCEx_PLL2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ee4:	e00e      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 f9d3 	bl	8006298 <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ef6:	e005      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	e002      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f0a:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	494a      	ldr	r1, [pc, #296]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8004f1c:	e001      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d049      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f38:	d030      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f3e:	d82a      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f44:	d02c      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f4a:	d824      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f50:	d018      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f56:	d81e      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f60:	d007      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f62:	e018      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a35      	ldr	r2, [pc, #212]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f70:	e017      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f8db 	bl	8006134 <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f82:	e00e      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3324      	adds	r3, #36	; 0x24
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f984 	bl	8006298 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fb6:	4922      	ldr	r1, [pc, #136]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	658b      	str	r3, [r1, #88]	; 0x58
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04b      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd8:	d030      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fde:	d82a      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fe4:	d02e      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fea:	d824      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff0:	d018      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff6:	d81e      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005000:	d007      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005002:	e018      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800500a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005010:	e019      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f88b 	bl	8006134 <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005022:	e010      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f001 f934 	bl	8006298 <RCCEx_PLL3_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005034:	e007      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
      break;
 800503a:	e004      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800503c:	bf00      	nop
 800503e:	e002      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005040:	58024400 	.word	0x58024400
      break;
 8005044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800504c:	4b99      	ldr	r3, [pc, #612]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800505a:	4996      	ldr	r1, [pc, #600]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800505c:	4313      	orrs	r3, r2
 800505e:	658b      	str	r3, [r1, #88]	; 0x58
 8005060:	e001      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d032      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d01c      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800507a:	2b30      	cmp	r3, #48	; 0x30
 800507c:	d817      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800507e:	2b20      	cmp	r3, #32
 8005080:	d00c      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005082:	2b20      	cmp	r3, #32
 8005084:	d813      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800508a:	2b10      	cmp	r3, #16
 800508c:	d10f      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508e:	4b89      	ldr	r3, [pc, #548]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	4a88      	ldr	r2, [pc, #544]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800509a:	e00e      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f846 	bl	8006134 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050ac:	e005      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80050b4:	bf00      	nop
 80050b6:	e000      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80050b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050c0:	4b7c      	ldr	r3, [pc, #496]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	4979      	ldr	r1, [pc, #484]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d047      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ec:	d030      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f2:	d82a      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80050f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050f8:	d02c      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80050fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fe:	d824      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d018      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510a:	d81e      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005114:	d007      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005116:	e018      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b66      	ldr	r3, [pc, #408]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a65      	ldr	r2, [pc, #404]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005124:	e017      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f801 	bl	8006134 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005136:	e00e      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f8aa 	bl	8006298 <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005148:	e005      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800515c:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	4952      	ldr	r1, [pc, #328]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800516a:	4313      	orrs	r3, r2
 800516c:	650b      	str	r3, [r1, #80]	; 0x50
 800516e:	e001      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d049      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005188:	d02e      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800518a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800518e:	d828      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005194:	d02a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005196:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800519a:	d822      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800519c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a0:	d026      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80051a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a6:	d81c      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ac:	d010      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80051ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b2:	d816      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051bc:	d111      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 ffb5 	bl	8006134 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051ce:	e012      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f85e 	bl	8006298 <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051e0:	e009      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e006      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80051e8:	bf00      	nop
 80051ea:	e004      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80051ec:	bf00      	nop
 80051ee:	e002      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80051f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005208:	492a      	ldr	r1, [pc, #168]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800520a:	4313      	orrs	r3, r2
 800520c:	650b      	str	r3, [r1, #80]	; 0x50
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04d      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005230:	d828      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d02a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d822      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800523e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005242:	d026      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005248:	d81c      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524e:	d010      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d816      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525e:	d111      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2101      	movs	r1, #1
 8005266:	4618      	mov	r0, r3
 8005268:	f000 ff64 	bl	8006134 <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005270:	e012      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f001 f80d 	bl	8006298 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005282:	e009      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ac:	4901      	ldr	r1, [pc, #4]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	658b      	str	r3, [r1, #88]	; 0x58
 80052b2:	e003      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80052b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d0:	d00e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d6:	d814      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80052dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e0:	d10f      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e2:	4baf      	ldr	r3, [pc, #700]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4aae      	ldr	r2, [pc, #696]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052ee:	e00c      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2101      	movs	r1, #1
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ff1c 	bl	8006134 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
      break;
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005310:	4ba3      	ldr	r3, [pc, #652]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531c:	49a0      	ldr	r1, [pc, #640]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800531e:	4313      	orrs	r3, r2
 8005320:	650b      	str	r3, [r1, #80]	; 0x50
 8005322:	e001      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d032      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	2b03      	cmp	r3, #3
 800533a:	d81b      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	0800537b 	.word	0x0800537b
 8005348:	08005355 	.word	0x08005355
 800534c:	08005363 	.word	0x08005363
 8005350:	0800537b 	.word	0x0800537b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005354:	4b92      	ldr	r3, [pc, #584]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	4a91      	ldr	r2, [pc, #580]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800535a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005360:	e00c      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fee3 	bl	8006134 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005372:	e003      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
      break;
 8005378:	e000      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800537a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005382:	4b87      	ldr	r3, [pc, #540]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4984      	ldr	r1, [pc, #528]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005390:	4313      	orrs	r3, r2
 8005392:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005394:	e001      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8086 	beq.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a8:	4b7e      	ldr	r3, [pc, #504]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a7d      	ldr	r2, [pc, #500]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053b4:	f7fc fa76 	bl	80018a4 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ba:	e009      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053bc:	f7fc fa72 	bl	80018a4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d902      	bls.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	75fb      	strb	r3, [r7, #23]
        break;
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d0:	4b74      	ldr	r3, [pc, #464]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d166      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053e2:	4b6f      	ldr	r3, [pc, #444]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053ec:	4053      	eors	r3, r2
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d013      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f6:	4b6a      	ldr	r3, [pc, #424]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005400:	4b67      	ldr	r3, [pc, #412]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	4a66      	ldr	r2, [pc, #408]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800540c:	4b64      	ldr	r3, [pc, #400]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	4a63      	ldr	r2, [pc, #396]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005418:	4a61      	ldr	r2, [pc, #388]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d115      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fc fa3b 	bl	80018a4 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005430:	e00b      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fc fa37 	bl	80018a4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d902      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	75fb      	strb	r3, [r7, #23]
            break;
 8005448:	e005      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800544a:	4b55      	ldr	r3, [pc, #340]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0ed      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d126      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546a:	d10d      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800546c:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800547a:	0919      	lsrs	r1, r3, #4
 800547c:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800547e:	400b      	ands	r3, r1
 8005480:	4947      	ldr	r1, [pc, #284]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
 8005486:	e005      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005488:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4a44      	ldr	r2, [pc, #272]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800548e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005492:	6113      	str	r3, [r2, #16]
 8005494:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800549e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a2:	493f      	ldr	r1, [pc, #252]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	670b      	str	r3, [r1, #112]	; 0x70
 80054a8:	e004      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	75bb      	strb	r3, [r7, #22]
 80054ae:	e001      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8085 	beq.w	80055cc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	2b28      	cmp	r3, #40	; 0x28
 80054c8:	d866      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080055ad 	.word	0x080055ad
 80054d4:	08005599 	.word	0x08005599
 80054d8:	08005599 	.word	0x08005599
 80054dc:	08005599 	.word	0x08005599
 80054e0:	08005599 	.word	0x08005599
 80054e4:	08005599 	.word	0x08005599
 80054e8:	08005599 	.word	0x08005599
 80054ec:	08005599 	.word	0x08005599
 80054f0:	08005575 	.word	0x08005575
 80054f4:	08005599 	.word	0x08005599
 80054f8:	08005599 	.word	0x08005599
 80054fc:	08005599 	.word	0x08005599
 8005500:	08005599 	.word	0x08005599
 8005504:	08005599 	.word	0x08005599
 8005508:	08005599 	.word	0x08005599
 800550c:	08005599 	.word	0x08005599
 8005510:	08005587 	.word	0x08005587
 8005514:	08005599 	.word	0x08005599
 8005518:	08005599 	.word	0x08005599
 800551c:	08005599 	.word	0x08005599
 8005520:	08005599 	.word	0x08005599
 8005524:	08005599 	.word	0x08005599
 8005528:	08005599 	.word	0x08005599
 800552c:	08005599 	.word	0x08005599
 8005530:	080055ad 	.word	0x080055ad
 8005534:	08005599 	.word	0x08005599
 8005538:	08005599 	.word	0x08005599
 800553c:	08005599 	.word	0x08005599
 8005540:	08005599 	.word	0x08005599
 8005544:	08005599 	.word	0x08005599
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	080055ad 	.word	0x080055ad
 8005554:	08005599 	.word	0x08005599
 8005558:	08005599 	.word	0x08005599
 800555c:	08005599 	.word	0x08005599
 8005560:	08005599 	.word	0x08005599
 8005564:	08005599 	.word	0x08005599
 8005568:	08005599 	.word	0x08005599
 800556c:	08005599 	.word	0x08005599
 8005570:	080055ad 	.word	0x080055ad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fdda 	bl	8006134 <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005584:	e013      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe83 	bl	8006298 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005596:	e00a      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e007      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
 80055a4:	58024800 	.word	0x58024800
 80055a8:	00ffffcf 	.word	0x00ffffcf
      break;
 80055ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055b4:	4b96      	ldr	r3, [pc, #600]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c0:	4993      	ldr	r1, [pc, #588]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	654b      	str	r3, [r1, #84]	; 0x54
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d038      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	2b05      	cmp	r3, #5
 80055de:	d821      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800562b 	.word	0x0800562b
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005613 	.word	0x08005613
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	0800562b 	.word	0x0800562b
 80055fc:	0800562b 	.word	0x0800562b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd94 	bl	8006134 <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005610:	e00c      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3324      	adds	r3, #36	; 0x24
 8005616:	2101      	movs	r1, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe3d 	bl	8006298 <RCCEx_PLL3_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800562a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005632:	4b77      	ldr	r3, [pc, #476]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f023 0207 	bic.w	r2, r3, #7
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	4974      	ldr	r1, [pc, #464]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005640:	4313      	orrs	r3, r2
 8005642:	654b      	str	r3, [r1, #84]	; 0x54
 8005644:	e001      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	2b05      	cmp	r3, #5
 800565e:	d821      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	080056ab 	.word	0x080056ab
 800566c:	08005681 	.word	0x08005681
 8005670:	08005693 	.word	0x08005693
 8005674:	080056ab 	.word	0x080056ab
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056ab 	.word	0x080056ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd54 	bl	8006134 <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005690:	e00c      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3324      	adds	r3, #36	; 0x24
 8005696:	2101      	movs	r1, #1
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fdfd 	bl	8006298 <RCCEx_PLL3_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056a2:	e003      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	75fb      	strb	r3, [r7, #23]
      break;
 80056a8:	e000      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80056aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056b2:	4b57      	ldr	r3, [pc, #348]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f023 0207 	bic.w	r2, r3, #7
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	4953      	ldr	r1, [pc, #332]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	658b      	str	r3, [r1, #88]	; 0x58
 80056c6:	e001      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d04b      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056e2:	d02e      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80056e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056e8:	d828      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80056ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ee:	d02a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d822      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80056f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056fa:	d026      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80056fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005700:	d81c      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005706:	d010      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800570c:	d816      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01d      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005716:	d111      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fd08 	bl	8006134 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005728:	e012      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fdb1 	bl	8006298 <RCCEx_PLL3_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800573a:	e009      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e006      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800574e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005756:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005764:	492a      	ldr	r1, [pc, #168]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	654b      	str	r3, [r1, #84]	; 0x54
 800576a:	e001      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d04d      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005782:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005786:	d02e      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005788:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800578c:	d828      	bhi.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d02a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d822      	bhi.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800579a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800579e:	d026      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80057a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057a4:	d81c      	bhi.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057aa:	d010      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	d816      	bhi.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01d      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ba:	d111      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fcb6 	bl	8006134 <RCCEx_PLL2_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057cc:	e012      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3324      	adds	r3, #36	; 0x24
 80057d2:	2102      	movs	r1, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd5f 	bl	8006298 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057de:	e009      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
      break;
 80057e4:	e006      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80057e6:	bf00      	nop
 80057e8:	e004      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80057f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005808:	4901      	ldr	r1, [pc, #4]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	658b      	str	r3, [r1, #88]	; 0x58
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d04b      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800582a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800582e:	d02e      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005830:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005834:	d828      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583a:	d02a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005840:	d822      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005842:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005846:	d026      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005848:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800584c:	d81c      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800584e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005852:	d010      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005858:	d816      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01d      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005862:	d111      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fc62 	bl	8006134 <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005874:	e012      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3324      	adds	r3, #36	; 0x24
 800587a:	2102      	movs	r1, #2
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fd0b 	bl	8006298 <RCCEx_PLL3_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005886:	e009      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
      break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800588e:	bf00      	nop
 8005890:	e004      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800589a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058a2:	4b9d      	ldr	r3, [pc, #628]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b0:	4999      	ldr	r1, [pc, #612]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	658b      	str	r3, [r1, #88]	; 0x58
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d10a      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	2102      	movs	r1, #2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fcdc 	bl	8006298 <RCCEx_PLL3_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058ea:	4b8b      	ldr	r3, [pc, #556]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f8:	4987      	ldr	r1, [pc, #540]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005914:	d10a      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fcbb 	bl	8006298 <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800592c:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593a:	4977      	ldr	r1, [pc, #476]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800593c:	4313      	orrs	r3, r2
 800593e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d034      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005956:	d01d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800595c:	d817      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005966:	d009      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005968:	e011      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fbdf 	bl	8006134 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800597a:	e00c      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3324      	adds	r3, #36	; 0x24
 8005980:	2102      	movs	r1, #2
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fc88 	bl	8006298 <RCCEx_PLL3_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
      break;
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800599c:	4b5e      	ldr	r3, [pc, #376]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059aa:	495b      	ldr	r1, [pc, #364]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	658b      	str	r3, [r1, #88]	; 0x58
 80059b0:	e001      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d033      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059cc:	d01c      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80059ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059d2:	d816      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80059d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d8:	d003      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80059da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059de:	d007      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80059e0:	e00f      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e2:	4b4d      	ldr	r3, [pc, #308]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4a4c      	ldr	r2, [pc, #304]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80059ee:	e00c      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	2101      	movs	r1, #1
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc4e 	bl	8006298 <RCCEx_PLL3_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
      break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a10:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1e:	493e      	ldr	r1, [pc, #248]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	654b      	str	r3, [r1, #84]	; 0x54
 8005a24:	e001      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d029      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a42:	d007      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005a44:	e00f      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a52:	e00b      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fb6a 	bl	8006134 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a64:	e002      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a72:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	4926      	ldr	r1, [pc, #152]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a84:	e001      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3324      	adds	r3, #36	; 0x24
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fbfb 	bl	8006298 <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d033      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac0:	d017      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac6:	d811      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d013      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad2:	d80b      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005adc:	d106      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005aea:	e007      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
      break;
 8005af0:	e004      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005af2:	bf00      	nop
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	4902      	ldr	r1, [pc, #8]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	654b      	str	r3, [r1, #84]	; 0x54
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	491e      	ldr	r1, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	4917      	ldr	r1, [pc, #92]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xe18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b72:	6113      	str	r3, [r2, #16]
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b7e:	490d      	ldr	r1, [pc, #52]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da08      	bge.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xe32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b98:	4906      	ldr	r1, [pc, #24]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005b9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
  {
    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xe3e>
  }
  return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400

08005bb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bbc:	f7ff f838 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4904      	ldr	r1, [pc, #16]	; (8005be0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	0801ef58 	.word	0x0801ef58

08005be4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	; 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bec:	4ba1      	ldr	r3, [pc, #644]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005bf6:	4b9f      	ldr	r3, [pc, #636]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	0b1b      	lsrs	r3, r3, #12
 8005bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c02:	4b9c      	ldr	r3, [pc, #624]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c0e:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8111 	beq.w	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f000 8083 	beq.w	8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f200 80a1 	bhi.w	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d056      	beq.n	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c4e:	e099      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c50:	4b88      	ldr	r3, [pc, #544]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02d      	beq.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c5c:	4b85      	ldr	r3, [pc, #532]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	4a84      	ldr	r2, [pc, #528]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cb6:	e087      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b6a      	ldr	r3, [pc, #424]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cfa:	e065      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3e:	e043      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b48      	ldr	r3, [pc, #288]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d82:	e021      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b37      	ldr	r3, [pc, #220]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	0a5b      	lsrs	r3, r3, #9
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005df6:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	ee17 2a90 	vmov	r2, s15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	0e1b      	lsrs	r3, r3, #24
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4a:	ee17 2a90 	vmov	r2, s15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
}
 8005e66:	bf00      	nop
 8005e68:	3724      	adds	r7, #36	; 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
 8005e78:	03d09000 	.word	0x03d09000
 8005e7c:	46000000 	.word	0x46000000
 8005e80:	4c742400 	.word	0x4c742400
 8005e84:	4a742400 	.word	0x4a742400
 8005e88:	4af42400 	.word	0x4af42400

08005e8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e94:	4ba1      	ldr	r3, [pc, #644]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e9e:	4b9f      	ldr	r3, [pc, #636]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	0d1b      	lsrs	r3, r3, #20
 8005ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005eaa:	4b9c      	ldr	r3, [pc, #624]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005eb6:	4b99      	ldr	r3, [pc, #612]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8111 	beq.w	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	f000 8083 	beq.w	8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f200 80a1 	bhi.w	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d056      	beq.n	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ef6:	e099      	b.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef8:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02d      	beq.n	8005f60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f04:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	08db      	lsrs	r3, r3, #3
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	4a84      	ldr	r2, [pc, #528]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2e:	4b7b      	ldr	r3, [pc, #492]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f5e:	e087      	b.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f72:	4b6a      	ldr	r3, [pc, #424]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa2:	e065      	b.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fe6:	e043      	b.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b48      	ldr	r3, [pc, #288]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	ed97 6a03 	vldr	s12, [r7, #12]
 800600e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602a:	e021      	b.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800603a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006052:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800606e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	0a5b      	lsrs	r3, r3, #9
 8006076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800608a:	edd7 6a07 	vldr	s13, [r7, #28]
 800608e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006096:	ee17 2a90 	vmov	r2, s15
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800609e:	4b1f      	ldr	r3, [pc, #124]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	0c1b      	lsrs	r3, r3, #16
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	ee17 2a90 	vmov	r2, s15
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80060cc:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	0e1b      	lsrs	r3, r3, #24
 80060d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f2:	ee17 2a90 	vmov	r2, s15
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060fa:	e008      	b.n	800610e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	609a      	str	r2, [r3, #8]
}
 800610e:	bf00      	nop
 8006110:	3724      	adds	r7, #36	; 0x24
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
 8006120:	03d09000 	.word	0x03d09000
 8006124:	46000000 	.word	0x46000000
 8006128:	4c742400 	.word	0x4c742400
 800612c:	4a742400 	.word	0x4a742400
 8006130:	4af42400 	.word	0x4af42400

08006134 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006142:	4b53      	ldr	r3, [pc, #332]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d101      	bne.n	8006152 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e099      	b.n	8006286 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006152:	4b4f      	ldr	r3, [pc, #316]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4e      	ldr	r2, [pc, #312]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800615c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615e:	f7fb fba1 	bl	80018a4 <HAL_GetTick>
 8006162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006164:	e008      	b.n	8006178 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006166:	f7fb fb9d 	bl	80018a4 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e086      	b.n	8006286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006178:	4b45      	ldr	r3, [pc, #276]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006184:	4b42      	ldr	r3, [pc, #264]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	493f      	ldr	r1, [pc, #252]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006194:	4313      	orrs	r3, r2
 8006196:	628b      	str	r3, [r1, #40]	; 0x28
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	025b      	lsls	r3, r3, #9
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	061b      	lsls	r3, r3, #24
 80061c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061c8:	4931      	ldr	r1, [pc, #196]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061ce:	4b30      	ldr	r3, [pc, #192]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	492d      	ldr	r1, [pc, #180]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	f023 0220 	bic.w	r2, r3, #32
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4928      	ldr	r1, [pc, #160]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061f2:	4b27      	ldr	r3, [pc, #156]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	4a26      	ldr	r2, [pc, #152]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061fe:	4b24      	ldr	r3, [pc, #144]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006202:	4b24      	ldr	r3, [pc, #144]	; (8006294 <RCCEx_PLL2_Config+0x160>)
 8006204:	4013      	ands	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	69d2      	ldr	r2, [r2, #28]
 800620a:	00d2      	lsls	r2, r2, #3
 800620c:	4920      	ldr	r1, [pc, #128]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006212:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006218:	f043 0310 	orr.w	r3, r3, #16
 800621c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	4a19      	ldr	r2, [pc, #100]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800622a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006230:	e00f      	b.n	8006252 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d106      	bne.n	8006246 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006244:	e005      	b.n	8006252 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006246:	4b12      	ldr	r3, [pc, #72]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a0e      	ldr	r2, [pc, #56]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 8006258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800625c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625e:	f7fb fb21 	bl	80018a4 <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006264:	e008      	b.n	8006278 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006266:	f7fb fb1d 	bl	80018a4 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e006      	b.n	8006286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <RCCEx_PLL2_Config+0x15c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	58024400 	.word	0x58024400
 8006294:	ffff0007 	.word	0xffff0007

08006298 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062a6:	4b53      	ldr	r3, [pc, #332]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d101      	bne.n	80062b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e099      	b.n	80063ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062b6:	4b4f      	ldr	r3, [pc, #316]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4e      	ldr	r2, [pc, #312]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fb faef 	bl	80018a4 <HAL_GetTick>
 80062c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062c8:	e008      	b.n	80062dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062ca:	f7fb faeb 	bl	80018a4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e086      	b.n	80063ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062dc:	4b45      	ldr	r3, [pc, #276]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062e8:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	051b      	lsls	r3, r3, #20
 80062f6:	493f      	ldr	r1, [pc, #252]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	628b      	str	r3, [r1, #40]	; 0x28
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	3b01      	subs	r3, #1
 800630c:	025b      	lsls	r3, r3, #9
 800630e:	b29b      	uxth	r3, r3
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	3b01      	subs	r3, #1
 8006318:	041b      	lsls	r3, r3, #16
 800631a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	3b01      	subs	r3, #1
 8006326:	061b      	lsls	r3, r3, #24
 8006328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800632c:	4931      	ldr	r1, [pc, #196]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800632e:	4313      	orrs	r3, r2
 8006330:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006332:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	492d      	ldr	r1, [pc, #180]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006340:	4313      	orrs	r3, r2
 8006342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	4928      	ldr	r1, [pc, #160]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006352:	4313      	orrs	r3, r2
 8006354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	4a26      	ldr	r2, [pc, #152]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800635c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <RCCEx_PLL3_Config+0x160>)
 8006368:	4013      	ands	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	69d2      	ldr	r2, [r2, #28]
 800636e:	00d2      	lsls	r2, r2, #3
 8006370:	4920      	ldr	r1, [pc, #128]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006376:	4b1f      	ldr	r3, [pc, #124]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006388:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800638e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006394:	e00f      	b.n	80063b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d106      	bne.n	80063aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800639c:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063a8:	e005      	b.n	80063b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063aa:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0e      	ldr	r2, [pc, #56]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c2:	f7fb fa6f 	bl	80018a4 <HAL_GetTick>
 80063c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063c8:	e008      	b.n	80063dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063ca:	f7fb fa6b 	bl	80018a4 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e006      	b.n	80063ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <RCCEx_PLL3_Config+0x15c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0f0      	beq.n	80063ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
 80063f8:	ffff0007 	.word	0xffff0007

080063fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e01d      	b.n	800644a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fa ffa6 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f000 f9a6 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <HAL_TIM_Base_Start_IT+0x50>)
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b06      	cmp	r3, #6
 800647c:	d00b      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x42>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006484:	d007      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00010007 	.word	0x00010007

080064a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10f      	bne.n	80064f0 <HAL_TIM_Base_Stop_IT+0x48>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a1a      	ldr	r2, [r3, #32]
 80064d6:	f240 4344 	movw	r3, #1092	; 0x444
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_Base_Stop_IT+0x48>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d122      	bne.n	800655a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d11b      	bne.n	800655a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0202 	mvn.w	r2, #2
 800652a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f905 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006546:	e005      	b.n	8006554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8f7 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f908 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d122      	bne.n	80065ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d11b      	bne.n	80065ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f06f 0204 	mvn.w	r2, #4
 800657e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f8db 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 800659a:	e005      	b.n	80065a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8cd 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8de 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d122      	bne.n	8006602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d11b      	bne.n	8006602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0208 	mvn.w	r2, #8
 80065d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2204      	movs	r2, #4
 80065d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8b1 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 80065ee:	e005      	b.n	80065fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8a3 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8b4 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d122      	bne.n	8006656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d11b      	bne.n	8006656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0210 	mvn.w	r2, #16
 8006626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2208      	movs	r2, #8
 800662c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f887 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006642:	e005      	b.n	8006650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f879 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f88a 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10e      	bne.n	8006682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f06f 0201 	mvn.w	r2, #1
 800667a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fa fcd7 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f913 	bl	80068d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f906 	bl	80068e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e6:	2b40      	cmp	r3, #64	; 0x40
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f838 	bl	8006778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b20      	cmp	r3, #32
 8006714:	d10e      	bne.n	8006734 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0220 	mvn.w	r2, #32
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f8c6 	bl	80068c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a40      	ldr	r2, [pc, #256]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d00f      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3d      	ldr	r2, [pc, #244]	; (80068a4 <TIM_Base_SetConfig+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a3c      	ldr	r2, [pc, #240]	; (80068a8 <TIM_Base_SetConfig+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a3b      	ldr	r2, [pc, #236]	; (80068ac <TIM_Base_SetConfig+0x120>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2f      	ldr	r2, [pc, #188]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01f      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d01b      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	; (80068a4 <TIM_Base_SetConfig+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d017      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2b      	ldr	r2, [pc, #172]	; (80068a8 <TIM_Base_SetConfig+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <TIM_Base_SetConfig+0x120>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00f      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00b      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <TIM_Base_SetConfig+0x128>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d007      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <TIM_Base_SetConfig+0x130>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <TIM_Base_SetConfig+0x114>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <TIM_Base_SetConfig+0x124>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a11      	ldr	r2, [pc, #68]	; (80068b4 <TIM_Base_SetConfig+0x128>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a0f      	ldr	r2, [pc, #60]	; (80068bc <TIM_Base_SetConfig+0x130>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d103      	bne.n	800688c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	615a      	str	r2, [r3, #20]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40010400 	.word	0x40010400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800

080068c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e042      	b.n	8006994 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fa fd9b 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2224      	movs	r2, #36	; 0x24
 800692a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8c2 	bl	8006ac8 <UART_SetConfig>
 8006944:	4603      	mov	r3, r0
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e022      	b.n	8006994 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f002 fc28 	bl	80091ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800696a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800697a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f002 fcaf 	bl	80092f0 <UART_CheckIdleState>
 8006992:	4603      	mov	r3, r0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	f040 8083 	bne.w	8006abe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_UART_Transmit+0x28>
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e07b      	b.n	8006ac0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Transmit+0x3a>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e074      	b.n	8006ac0 <HAL_UART_Transmit+0x124>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2221      	movs	r2, #33	; 0x21
 80069ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069ee:	f7fa ff59 	bl	80018a4 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	88fa      	ldrh	r2, [r7, #6]
 80069f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0c:	d108      	bne.n	8006a20 <HAL_UART_Transmit+0x84>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	e003      	b.n	8006a28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a28:	e02c      	b.n	8006a84 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f002 fca3 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e03d      	b.n	8006ac0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	e007      	b.n	8006a72 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1cc      	bne.n	8006a2a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	2140      	movs	r1, #64	; 0x40
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f002 fc70 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e00a      	b.n	8006ac0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006acc:	b0bc      	sub	sp, #240	; 0xf0
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	49c9      	ldr	r1, [pc, #804]	; (8006e48 <UART_SetConfig+0x380>)
 8006b22:	4019      	ands	r1, r3
 8006b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b42:	68d9      	ldr	r1, [r3, #12]
 8006b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	ea40 0301 	orr.w	r3, r0, r1
 8006b4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4bba      	ldr	r3, [pc, #744]	; (8006e4c <UART_SetConfig+0x384>)
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d007      	beq.n	8006b76 <UART_SetConfig+0xae>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b6a:	6a1a      	ldr	r2, [r3, #32]
 8006b6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	49b4      	ldr	r1, [pc, #720]	; (8006e50 <UART_SetConfig+0x388>)
 8006b80:	4019      	ands	r1, r3
 8006b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	f023 000f 	bic.w	r0, r3, #15
 8006b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ba0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	ea40 0301 	orr.w	r3, r0, r1
 8006bac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4ba7      	ldr	r3, [pc, #668]	; (8006e54 <UART_SetConfig+0x38c>)
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d176      	bne.n	8006ca8 <UART_SetConfig+0x1e0>
 8006bba:	4ba7      	ldr	r3, [pc, #668]	; (8006e58 <UART_SetConfig+0x390>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc2:	2b28      	cmp	r3, #40	; 0x28
 8006bc4:	d86c      	bhi.n	8006ca0 <UART_SetConfig+0x1d8>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x104>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006ca1 	.word	0x08006ca1
 8006bd4:	08006ca1 	.word	0x08006ca1
 8006bd8:	08006ca1 	.word	0x08006ca1
 8006bdc:	08006ca1 	.word	0x08006ca1
 8006be0:	08006ca1 	.word	0x08006ca1
 8006be4:	08006ca1 	.word	0x08006ca1
 8006be8:	08006ca1 	.word	0x08006ca1
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006ca1 	.word	0x08006ca1
 8006bf4:	08006ca1 	.word	0x08006ca1
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006ca1 	.word	0x08006ca1
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006ca1 	.word	0x08006ca1
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c76:	e232      	b.n	80070de <UART_SetConfig+0x616>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c7e:	e22e      	b.n	80070de <UART_SetConfig+0x616>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c86:	e22a      	b.n	80070de <UART_SetConfig+0x616>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c8e:	e226      	b.n	80070de <UART_SetConfig+0x616>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c96:	e222      	b.n	80070de <UART_SetConfig+0x616>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c9e:	e21e      	b.n	80070de <UART_SetConfig+0x616>
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006ca6:	e21a      	b.n	80070de <UART_SetConfig+0x616>
 8006ca8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <UART_SetConfig+0x394>)
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d131      	bne.n	8006d18 <UART_SetConfig+0x250>
 8006cb4:	4b68      	ldr	r3, [pc, #416]	; (8006e58 <UART_SetConfig+0x390>)
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d827      	bhi.n	8006d10 <UART_SetConfig+0x248>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x200>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ce1 	.word	0x08006ce1
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006cf1 	.word	0x08006cf1
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006ce6:	e1fa      	b.n	80070de <UART_SetConfig+0x616>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006cee:	e1f6      	b.n	80070de <UART_SetConfig+0x616>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006cf6:	e1f2      	b.n	80070de <UART_SetConfig+0x616>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006cfe:	e1ee      	b.n	80070de <UART_SetConfig+0x616>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d06:	e1ea      	b.n	80070de <UART_SetConfig+0x616>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d0e:	e1e6      	b.n	80070de <UART_SetConfig+0x616>
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d16:	e1e2      	b.n	80070de <UART_SetConfig+0x616>
 8006d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b50      	ldr	r3, [pc, #320]	; (8006e60 <UART_SetConfig+0x398>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d131      	bne.n	8006d88 <UART_SetConfig+0x2c0>
 8006d24:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <UART_SetConfig+0x390>)
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d827      	bhi.n	8006d80 <UART_SetConfig+0x2b8>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x270>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d56:	e1c2      	b.n	80070de <UART_SetConfig+0x616>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d5e:	e1be      	b.n	80070de <UART_SetConfig+0x616>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d66:	e1ba      	b.n	80070de <UART_SetConfig+0x616>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d6e:	e1b6      	b.n	80070de <UART_SetConfig+0x616>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d76:	e1b2      	b.n	80070de <UART_SetConfig+0x616>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d7e:	e1ae      	b.n	80070de <UART_SetConfig+0x616>
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006d86:	e1aa      	b.n	80070de <UART_SetConfig+0x616>
 8006d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <UART_SetConfig+0x39c>)
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d131      	bne.n	8006df8 <UART_SetConfig+0x330>
 8006d94:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <UART_SetConfig+0x390>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d827      	bhi.n	8006df0 <UART_SetConfig+0x328>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x2e0>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dc6:	e18a      	b.n	80070de <UART_SetConfig+0x616>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dce:	e186      	b.n	80070de <UART_SetConfig+0x616>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dd6:	e182      	b.n	80070de <UART_SetConfig+0x616>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dde:	e17e      	b.n	80070de <UART_SetConfig+0x616>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006de6:	e17a      	b.n	80070de <UART_SetConfig+0x616>
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dee:	e176      	b.n	80070de <UART_SetConfig+0x616>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006df6:	e172      	b.n	80070de <UART_SetConfig+0x616>
 8006df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <UART_SetConfig+0x3a0>)
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d143      	bne.n	8006e8c <UART_SetConfig+0x3c4>
 8006e04:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <UART_SetConfig+0x390>)
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d839      	bhi.n	8006e84 <UART_SetConfig+0x3bc>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x350>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e6d 	.word	0x08006e6d
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e36:	e152      	b.n	80070de <UART_SetConfig+0x616>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e3e:	e14e      	b.n	80070de <UART_SetConfig+0x616>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e46:	e14a      	b.n	80070de <UART_SetConfig+0x616>
 8006e48:	cfff69f3 	.word	0xcfff69f3
 8006e4c:	58000c00 	.word	0x58000c00
 8006e50:	11fff4ff 	.word	0x11fff4ff
 8006e54:	40011000 	.word	0x40011000
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e72:	e134      	b.n	80070de <UART_SetConfig+0x616>
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e7a:	e130      	b.n	80070de <UART_SetConfig+0x616>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e82:	e12c      	b.n	80070de <UART_SetConfig+0x616>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006e8a:	e128      	b.n	80070de <UART_SetConfig+0x616>
 8006e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4bbe      	ldr	r3, [pc, #760]	; (800718c <UART_SetConfig+0x6c4>)
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d177      	bne.n	8006f88 <UART_SetConfig+0x4c0>
 8006e98:	4bbd      	ldr	r3, [pc, #756]	; (8007190 <UART_SetConfig+0x6c8>)
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea0:	2b28      	cmp	r3, #40	; 0x28
 8006ea2:	d86d      	bhi.n	8006f80 <UART_SetConfig+0x4b8>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x3e4>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006f51 	.word	0x08006f51
 8006eb0:	08006f81 	.word	0x08006f81
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08006f81 	.word	0x08006f81
 8006ec0:	08006f81 	.word	0x08006f81
 8006ec4:	08006f81 	.word	0x08006f81
 8006ec8:	08006f81 	.word	0x08006f81
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f81 	.word	0x08006f81
 8006ed4:	08006f81 	.word	0x08006f81
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006f81 	.word	0x08006f81
 8006ee0:	08006f81 	.word	0x08006f81
 8006ee4:	08006f81 	.word	0x08006f81
 8006ee8:	08006f81 	.word	0x08006f81
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f81 	.word	0x08006f81
 8006f04:	08006f81 	.word	0x08006f81
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f81 	.word	0x08006f81
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006f81 	.word	0x08006f81
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f56:	e0c2      	b.n	80070de <UART_SetConfig+0x616>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f5e:	e0be      	b.n	80070de <UART_SetConfig+0x616>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f66:	e0ba      	b.n	80070de <UART_SetConfig+0x616>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f6e:	e0b6      	b.n	80070de <UART_SetConfig+0x616>
 8006f70:	2320      	movs	r3, #32
 8006f72:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f76:	e0b2      	b.n	80070de <UART_SetConfig+0x616>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f7e:	e0ae      	b.n	80070de <UART_SetConfig+0x616>
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006f86:	e0aa      	b.n	80070de <UART_SetConfig+0x616>
 8006f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b81      	ldr	r3, [pc, #516]	; (8007194 <UART_SetConfig+0x6cc>)
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d131      	bne.n	8006ff8 <UART_SetConfig+0x530>
 8006f94:	4b7e      	ldr	r3, [pc, #504]	; (8007190 <UART_SetConfig+0x6c8>)
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	d827      	bhi.n	8006ff0 <UART_SetConfig+0x528>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x4e0>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fc6:	e08a      	b.n	80070de <UART_SetConfig+0x616>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fce:	e086      	b.n	80070de <UART_SetConfig+0x616>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fd6:	e082      	b.n	80070de <UART_SetConfig+0x616>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fde:	e07e      	b.n	80070de <UART_SetConfig+0x616>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fe6:	e07a      	b.n	80070de <UART_SetConfig+0x616>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006fee:	e076      	b.n	80070de <UART_SetConfig+0x616>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006ff6:	e072      	b.n	80070de <UART_SetConfig+0x616>
 8006ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b66      	ldr	r3, [pc, #408]	; (8007198 <UART_SetConfig+0x6d0>)
 8007000:	429a      	cmp	r2, r3
 8007002:	d131      	bne.n	8007068 <UART_SetConfig+0x5a0>
 8007004:	4b62      	ldr	r3, [pc, #392]	; (8007190 <UART_SetConfig+0x6c8>)
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	2b05      	cmp	r3, #5
 800700e:	d827      	bhi.n	8007060 <UART_SetConfig+0x598>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x550>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007031 	.word	0x08007031
 800701c:	08007039 	.word	0x08007039
 8007020:	08007041 	.word	0x08007041
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	2300      	movs	r3, #0
 8007032:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8007036:	e052      	b.n	80070de <UART_SetConfig+0x616>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800703e:	e04e      	b.n	80070de <UART_SetConfig+0x616>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8007046:	e04a      	b.n	80070de <UART_SetConfig+0x616>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800704e:	e046      	b.n	80070de <UART_SetConfig+0x616>
 8007050:	2320      	movs	r3, #32
 8007052:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8007056:	e042      	b.n	80070de <UART_SetConfig+0x616>
 8007058:	2340      	movs	r3, #64	; 0x40
 800705a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 800705e:	e03e      	b.n	80070de <UART_SetConfig+0x616>
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8007066:	e03a      	b.n	80070de <UART_SetConfig+0x616>
 8007068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b4b      	ldr	r3, [pc, #300]	; (800719c <UART_SetConfig+0x6d4>)
 8007070:	429a      	cmp	r2, r3
 8007072:	d131      	bne.n	80070d8 <UART_SetConfig+0x610>
 8007074:	4b46      	ldr	r3, [pc, #280]	; (8007190 <UART_SetConfig+0x6c8>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	2b05      	cmp	r3, #5
 800707e:	d827      	bhi.n	80070d0 <UART_SetConfig+0x608>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x5c0>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070b1 	.word	0x080070b1
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070a6:	e01a      	b.n	80070de <UART_SetConfig+0x616>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070ae:	e016      	b.n	80070de <UART_SetConfig+0x616>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070b6:	e012      	b.n	80070de <UART_SetConfig+0x616>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070be:	e00e      	b.n	80070de <UART_SetConfig+0x616>
 80070c0:	2320      	movs	r3, #32
 80070c2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070c6:	e00a      	b.n	80070de <UART_SetConfig+0x616>
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070ce:	e006      	b.n	80070de <UART_SetConfig+0x616>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80070d6:	e002      	b.n	80070de <UART_SetConfig+0x616>
 80070d8:	2380      	movs	r3, #128	; 0x80
 80070da:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b2d      	ldr	r3, [pc, #180]	; (800719c <UART_SetConfig+0x6d4>)
 80070e6:	429a      	cmp	r2, r3
 80070e8:	f041 808a 	bne.w	8008200 <UART_SetConfig+0x1738>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ec:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	dc47      	bgt.n	8007184 <UART_SetConfig+0x6bc>
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f2c0 82fa 	blt.w	80076ee <UART_SetConfig+0xc26>
 80070fa:	3b02      	subs	r3, #2
 80070fc:	2b1e      	cmp	r3, #30
 80070fe:	f200 82f6 	bhi.w	80076ee <UART_SetConfig+0xc26>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x640>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	080071a1 	.word	0x080071a1
 800710c:	080076ef 	.word	0x080076ef
 8007110:	0800725d 	.word	0x0800725d
 8007114:	080076ef 	.word	0x080076ef
 8007118:	080076ef 	.word	0x080076ef
 800711c:	080076ef 	.word	0x080076ef
 8007120:	08007321 	.word	0x08007321
 8007124:	080076ef 	.word	0x080076ef
 8007128:	080076ef 	.word	0x080076ef
 800712c:	080076ef 	.word	0x080076ef
 8007130:	080076ef 	.word	0x080076ef
 8007134:	080076ef 	.word	0x080076ef
 8007138:	080076ef 	.word	0x080076ef
 800713c:	080076ef 	.word	0x080076ef
 8007140:	080073e5 	.word	0x080073e5
 8007144:	080076ef 	.word	0x080076ef
 8007148:	080076ef 	.word	0x080076ef
 800714c:	080076ef 	.word	0x080076ef
 8007150:	080076ef 	.word	0x080076ef
 8007154:	080076ef 	.word	0x080076ef
 8007158:	080076ef 	.word	0x080076ef
 800715c:	080076ef 	.word	0x080076ef
 8007160:	080076ef 	.word	0x080076ef
 8007164:	080076ef 	.word	0x080076ef
 8007168:	080076ef 	.word	0x080076ef
 800716c:	080076ef 	.word	0x080076ef
 8007170:	080076ef 	.word	0x080076ef
 8007174:	080076ef 	.word	0x080076ef
 8007178:	080076ef 	.word	0x080076ef
 800717c:	080076ef 	.word	0x080076ef
 8007180:	0800756f 	.word	0x0800756f
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	f000 8255 	beq.w	8007634 <UART_SetConfig+0xb6c>
 800718a:	e2b0      	b.n	80076ee <UART_SetConfig+0xc26>
 800718c:	40011400 	.word	0x40011400
 8007190:	58024400 	.word	0x58024400
 8007194:	40007800 	.word	0x40007800
 8007198:	40007c00 	.word	0x40007c00
 800719c:	58000c00 	.word	0x58000c00
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071a0:	f7fe fd0a 	bl	8005bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 80071a4:	4602      	mov	r2, r0
 80071a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d04f      	beq.n	8007250 <UART_SetConfig+0x788>
 80071b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d048      	beq.n	800724c <UART_SetConfig+0x784>
 80071ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d041      	beq.n	8007248 <UART_SetConfig+0x780>
 80071c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d03a      	beq.n	8007244 <UART_SetConfig+0x77c>
 80071ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d033      	beq.n	8007240 <UART_SetConfig+0x778>
 80071d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d02c      	beq.n	800723c <UART_SetConfig+0x774>
 80071e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b06      	cmp	r3, #6
 80071ea:	d025      	beq.n	8007238 <UART_SetConfig+0x770>
 80071ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	2b07      	cmp	r3, #7
 80071f4:	d01e      	beq.n	8007234 <UART_SetConfig+0x76c>
 80071f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d017      	beq.n	8007230 <UART_SetConfig+0x768>
 8007200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b09      	cmp	r3, #9
 8007208:	d010      	beq.n	800722c <UART_SetConfig+0x764>
 800720a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b0a      	cmp	r3, #10
 8007212:	d009      	beq.n	8007228 <UART_SetConfig+0x760>
 8007214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2b0b      	cmp	r3, #11
 800721c:	d102      	bne.n	8007224 <UART_SetConfig+0x75c>
 800721e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007222:	e016      	b.n	8007252 <UART_SetConfig+0x78a>
 8007224:	2301      	movs	r3, #1
 8007226:	e014      	b.n	8007252 <UART_SetConfig+0x78a>
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	e012      	b.n	8007252 <UART_SetConfig+0x78a>
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	e010      	b.n	8007252 <UART_SetConfig+0x78a>
 8007230:	2320      	movs	r3, #32
 8007232:	e00e      	b.n	8007252 <UART_SetConfig+0x78a>
 8007234:	2310      	movs	r3, #16
 8007236:	e00c      	b.n	8007252 <UART_SetConfig+0x78a>
 8007238:	230c      	movs	r3, #12
 800723a:	e00a      	b.n	8007252 <UART_SetConfig+0x78a>
 800723c:	230a      	movs	r3, #10
 800723e:	e008      	b.n	8007252 <UART_SetConfig+0x78a>
 8007240:	2308      	movs	r3, #8
 8007242:	e006      	b.n	8007252 <UART_SetConfig+0x78a>
 8007244:	2306      	movs	r3, #6
 8007246:	e004      	b.n	8007252 <UART_SetConfig+0x78a>
 8007248:	2304      	movs	r3, #4
 800724a:	e002      	b.n	8007252 <UART_SetConfig+0x78a>
 800724c:	2302      	movs	r3, #2
 800724e:	e000      	b.n	8007252 <UART_SetConfig+0x78a>
 8007250:	2301      	movs	r3, #1
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800725a:	e24c      	b.n	80076f6 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fcbf 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007266:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800726a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d04f      	beq.n	8007314 <UART_SetConfig+0x84c>
 8007274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b01      	cmp	r3, #1
 800727c:	d048      	beq.n	8007310 <UART_SetConfig+0x848>
 800727e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b02      	cmp	r3, #2
 8007286:	d041      	beq.n	800730c <UART_SetConfig+0x844>
 8007288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b03      	cmp	r3, #3
 8007290:	d03a      	beq.n	8007308 <UART_SetConfig+0x840>
 8007292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b04      	cmp	r3, #4
 800729a:	d033      	beq.n	8007304 <UART_SetConfig+0x83c>
 800729c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d02c      	beq.n	8007300 <UART_SetConfig+0x838>
 80072a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d025      	beq.n	80072fc <UART_SetConfig+0x834>
 80072b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b07      	cmp	r3, #7
 80072b8:	d01e      	beq.n	80072f8 <UART_SetConfig+0x830>
 80072ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d017      	beq.n	80072f4 <UART_SetConfig+0x82c>
 80072c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d010      	beq.n	80072f0 <UART_SetConfig+0x828>
 80072ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b0a      	cmp	r3, #10
 80072d6:	d009      	beq.n	80072ec <UART_SetConfig+0x824>
 80072d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b0b      	cmp	r3, #11
 80072e0:	d102      	bne.n	80072e8 <UART_SetConfig+0x820>
 80072e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072e6:	e016      	b.n	8007316 <UART_SetConfig+0x84e>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e014      	b.n	8007316 <UART_SetConfig+0x84e>
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x84e>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	e010      	b.n	8007316 <UART_SetConfig+0x84e>
 80072f4:	2320      	movs	r3, #32
 80072f6:	e00e      	b.n	8007316 <UART_SetConfig+0x84e>
 80072f8:	2310      	movs	r3, #16
 80072fa:	e00c      	b.n	8007316 <UART_SetConfig+0x84e>
 80072fc:	230c      	movs	r3, #12
 80072fe:	e00a      	b.n	8007316 <UART_SetConfig+0x84e>
 8007300:	230a      	movs	r3, #10
 8007302:	e008      	b.n	8007316 <UART_SetConfig+0x84e>
 8007304:	2308      	movs	r3, #8
 8007306:	e006      	b.n	8007316 <UART_SetConfig+0x84e>
 8007308:	2306      	movs	r3, #6
 800730a:	e004      	b.n	8007316 <UART_SetConfig+0x84e>
 800730c:	2304      	movs	r3, #4
 800730e:	e002      	b.n	8007316 <UART_SetConfig+0x84e>
 8007310:	2302      	movs	r3, #2
 8007312:	e000      	b.n	8007316 <UART_SetConfig+0x84e>
 8007314:	2301      	movs	r3, #1
 8007316:	fbb2 f3f3 	udiv	r3, r2, r3
 800731a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800731e:	e1ea      	b.n	80076f6 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007320:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fdb1 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800732a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800732e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	d04f      	beq.n	80073d8 <UART_SetConfig+0x910>
 8007338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2b01      	cmp	r3, #1
 8007340:	d048      	beq.n	80073d4 <UART_SetConfig+0x90c>
 8007342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b02      	cmp	r3, #2
 800734a:	d041      	beq.n	80073d0 <UART_SetConfig+0x908>
 800734c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b03      	cmp	r3, #3
 8007354:	d03a      	beq.n	80073cc <UART_SetConfig+0x904>
 8007356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b04      	cmp	r3, #4
 800735e:	d033      	beq.n	80073c8 <UART_SetConfig+0x900>
 8007360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b05      	cmp	r3, #5
 8007368:	d02c      	beq.n	80073c4 <UART_SetConfig+0x8fc>
 800736a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b06      	cmp	r3, #6
 8007372:	d025      	beq.n	80073c0 <UART_SetConfig+0x8f8>
 8007374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b07      	cmp	r3, #7
 800737c:	d01e      	beq.n	80073bc <UART_SetConfig+0x8f4>
 800737e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b08      	cmp	r3, #8
 8007386:	d017      	beq.n	80073b8 <UART_SetConfig+0x8f0>
 8007388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b09      	cmp	r3, #9
 8007390:	d010      	beq.n	80073b4 <UART_SetConfig+0x8ec>
 8007392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b0a      	cmp	r3, #10
 800739a:	d009      	beq.n	80073b0 <UART_SetConfig+0x8e8>
 800739c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b0b      	cmp	r3, #11
 80073a4:	d102      	bne.n	80073ac <UART_SetConfig+0x8e4>
 80073a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073aa:	e016      	b.n	80073da <UART_SetConfig+0x912>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e014      	b.n	80073da <UART_SetConfig+0x912>
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	e012      	b.n	80073da <UART_SetConfig+0x912>
 80073b4:	2340      	movs	r3, #64	; 0x40
 80073b6:	e010      	b.n	80073da <UART_SetConfig+0x912>
 80073b8:	2320      	movs	r3, #32
 80073ba:	e00e      	b.n	80073da <UART_SetConfig+0x912>
 80073bc:	2310      	movs	r3, #16
 80073be:	e00c      	b.n	80073da <UART_SetConfig+0x912>
 80073c0:	230c      	movs	r3, #12
 80073c2:	e00a      	b.n	80073da <UART_SetConfig+0x912>
 80073c4:	230a      	movs	r3, #10
 80073c6:	e008      	b.n	80073da <UART_SetConfig+0x912>
 80073c8:	2308      	movs	r3, #8
 80073ca:	e006      	b.n	80073da <UART_SetConfig+0x912>
 80073cc:	2306      	movs	r3, #6
 80073ce:	e004      	b.n	80073da <UART_SetConfig+0x912>
 80073d0:	2304      	movs	r3, #4
 80073d2:	e002      	b.n	80073da <UART_SetConfig+0x912>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e000      	b.n	80073da <UART_SetConfig+0x912>
 80073d8:	2301      	movs	r3, #1
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 80073e2:	e188      	b.n	80076f6 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e4:	4b90      	ldr	r3, [pc, #576]	; (8007628 <UART_SetConfig+0xb60>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d062      	beq.n	80074b6 <UART_SetConfig+0x9ee>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073f0:	4b8d      	ldr	r3, [pc, #564]	; (8007628 <UART_SetConfig+0xb60>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	08db      	lsrs	r3, r3, #3
 80073f6:	f003 0203 	and.w	r2, r3, #3
 80073fa:	4b8c      	ldr	r3, [pc, #560]	; (800762c <UART_SetConfig+0xb64>)
 80073fc:	fa23 f202 	lsr.w	r2, r3, r2
 8007400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d04f      	beq.n	80074aa <UART_SetConfig+0x9e2>
 800740a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b01      	cmp	r3, #1
 8007412:	d048      	beq.n	80074a6 <UART_SetConfig+0x9de>
 8007414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b02      	cmp	r3, #2
 800741c:	d041      	beq.n	80074a2 <UART_SetConfig+0x9da>
 800741e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b03      	cmp	r3, #3
 8007426:	d03a      	beq.n	800749e <UART_SetConfig+0x9d6>
 8007428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b04      	cmp	r3, #4
 8007430:	d033      	beq.n	800749a <UART_SetConfig+0x9d2>
 8007432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	2b05      	cmp	r3, #5
 800743a:	d02c      	beq.n	8007496 <UART_SetConfig+0x9ce>
 800743c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b06      	cmp	r3, #6
 8007444:	d025      	beq.n	8007492 <UART_SetConfig+0x9ca>
 8007446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	2b07      	cmp	r3, #7
 800744e:	d01e      	beq.n	800748e <UART_SetConfig+0x9c6>
 8007450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b08      	cmp	r3, #8
 8007458:	d017      	beq.n	800748a <UART_SetConfig+0x9c2>
 800745a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2b09      	cmp	r3, #9
 8007462:	d010      	beq.n	8007486 <UART_SetConfig+0x9be>
 8007464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b0a      	cmp	r3, #10
 800746c:	d009      	beq.n	8007482 <UART_SetConfig+0x9ba>
 800746e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b0b      	cmp	r3, #11
 8007476:	d102      	bne.n	800747e <UART_SetConfig+0x9b6>
 8007478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800747c:	e016      	b.n	80074ac <UART_SetConfig+0x9e4>
 800747e:	2301      	movs	r3, #1
 8007480:	e014      	b.n	80074ac <UART_SetConfig+0x9e4>
 8007482:	2380      	movs	r3, #128	; 0x80
 8007484:	e012      	b.n	80074ac <UART_SetConfig+0x9e4>
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	e010      	b.n	80074ac <UART_SetConfig+0x9e4>
 800748a:	2320      	movs	r3, #32
 800748c:	e00e      	b.n	80074ac <UART_SetConfig+0x9e4>
 800748e:	2310      	movs	r3, #16
 8007490:	e00c      	b.n	80074ac <UART_SetConfig+0x9e4>
 8007492:	230c      	movs	r3, #12
 8007494:	e00a      	b.n	80074ac <UART_SetConfig+0x9e4>
 8007496:	230a      	movs	r3, #10
 8007498:	e008      	b.n	80074ac <UART_SetConfig+0x9e4>
 800749a:	2308      	movs	r3, #8
 800749c:	e006      	b.n	80074ac <UART_SetConfig+0x9e4>
 800749e:	2306      	movs	r3, #6
 80074a0:	e004      	b.n	80074ac <UART_SetConfig+0x9e4>
 80074a2:	2304      	movs	r3, #4
 80074a4:	e002      	b.n	80074ac <UART_SetConfig+0x9e4>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e000      	b.n	80074ac <UART_SetConfig+0x9e4>
 80074aa:	2301      	movs	r3, #1
 80074ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80074b4:	e11f      	b.n	80076f6 <UART_SetConfig+0xc2e>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d04f      	beq.n	8007560 <UART_SetConfig+0xa98>
 80074c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d048      	beq.n	800755c <UART_SetConfig+0xa94>
 80074ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d041      	beq.n	8007558 <UART_SetConfig+0xa90>
 80074d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d03a      	beq.n	8007554 <UART_SetConfig+0xa8c>
 80074de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d033      	beq.n	8007550 <UART_SetConfig+0xa88>
 80074e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d02c      	beq.n	800754c <UART_SetConfig+0xa84>
 80074f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	2b06      	cmp	r3, #6
 80074fa:	d025      	beq.n	8007548 <UART_SetConfig+0xa80>
 80074fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b07      	cmp	r3, #7
 8007504:	d01e      	beq.n	8007544 <UART_SetConfig+0xa7c>
 8007506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b08      	cmp	r3, #8
 800750e:	d017      	beq.n	8007540 <UART_SetConfig+0xa78>
 8007510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2b09      	cmp	r3, #9
 8007518:	d010      	beq.n	800753c <UART_SetConfig+0xa74>
 800751a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	2b0a      	cmp	r3, #10
 8007522:	d009      	beq.n	8007538 <UART_SetConfig+0xa70>
 8007524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b0b      	cmp	r3, #11
 800752c:	d102      	bne.n	8007534 <UART_SetConfig+0xa6c>
 800752e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007532:	e016      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007534:	2201      	movs	r2, #1
 8007536:	e014      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	e012      	b.n	8007562 <UART_SetConfig+0xa9a>
 800753c:	2240      	movs	r2, #64	; 0x40
 800753e:	e010      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007540:	2220      	movs	r2, #32
 8007542:	e00e      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007544:	2210      	movs	r2, #16
 8007546:	e00c      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007548:	220c      	movs	r2, #12
 800754a:	e00a      	b.n	8007562 <UART_SetConfig+0xa9a>
 800754c:	220a      	movs	r2, #10
 800754e:	e008      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007550:	2208      	movs	r2, #8
 8007552:	e006      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007554:	2206      	movs	r2, #6
 8007556:	e004      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007558:	2204      	movs	r2, #4
 800755a:	e002      	b.n	8007562 <UART_SetConfig+0xa9a>
 800755c:	2202      	movs	r2, #2
 800755e:	e000      	b.n	8007562 <UART_SetConfig+0xa9a>
 8007560:	2201      	movs	r2, #1
 8007562:	4b32      	ldr	r3, [pc, #200]	; (800762c <UART_SetConfig+0xb64>)
 8007564:	fbb3 f3f2 	udiv	r3, r3, r2
 8007568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 800756c:	e0c3      	b.n	80076f6 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800756e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d04f      	beq.n	8007618 <UART_SetConfig+0xb50>
 8007578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b01      	cmp	r3, #1
 8007580:	d048      	beq.n	8007614 <UART_SetConfig+0xb4c>
 8007582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b02      	cmp	r3, #2
 800758a:	d041      	beq.n	8007610 <UART_SetConfig+0xb48>
 800758c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	2b03      	cmp	r3, #3
 8007594:	d03a      	beq.n	800760c <UART_SetConfig+0xb44>
 8007596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b04      	cmp	r3, #4
 800759e:	d033      	beq.n	8007608 <UART_SetConfig+0xb40>
 80075a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d02c      	beq.n	8007604 <UART_SetConfig+0xb3c>
 80075aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b06      	cmp	r3, #6
 80075b2:	d025      	beq.n	8007600 <UART_SetConfig+0xb38>
 80075b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b07      	cmp	r3, #7
 80075bc:	d01e      	beq.n	80075fc <UART_SetConfig+0xb34>
 80075be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d017      	beq.n	80075f8 <UART_SetConfig+0xb30>
 80075c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d010      	beq.n	80075f4 <UART_SetConfig+0xb2c>
 80075d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b0a      	cmp	r3, #10
 80075da:	d009      	beq.n	80075f0 <UART_SetConfig+0xb28>
 80075dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b0b      	cmp	r3, #11
 80075e4:	d102      	bne.n	80075ec <UART_SetConfig+0xb24>
 80075e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ea:	e016      	b.n	800761a <UART_SetConfig+0xb52>
 80075ec:	2201      	movs	r2, #1
 80075ee:	e014      	b.n	800761a <UART_SetConfig+0xb52>
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	e012      	b.n	800761a <UART_SetConfig+0xb52>
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	e010      	b.n	800761a <UART_SetConfig+0xb52>
 80075f8:	2220      	movs	r2, #32
 80075fa:	e00e      	b.n	800761a <UART_SetConfig+0xb52>
 80075fc:	2210      	movs	r2, #16
 80075fe:	e00c      	b.n	800761a <UART_SetConfig+0xb52>
 8007600:	220c      	movs	r2, #12
 8007602:	e00a      	b.n	800761a <UART_SetConfig+0xb52>
 8007604:	220a      	movs	r2, #10
 8007606:	e008      	b.n	800761a <UART_SetConfig+0xb52>
 8007608:	2208      	movs	r2, #8
 800760a:	e006      	b.n	800761a <UART_SetConfig+0xb52>
 800760c:	2206      	movs	r2, #6
 800760e:	e004      	b.n	800761a <UART_SetConfig+0xb52>
 8007610:	2204      	movs	r2, #4
 8007612:	e002      	b.n	800761a <UART_SetConfig+0xb52>
 8007614:	2202      	movs	r2, #2
 8007616:	e000      	b.n	800761a <UART_SetConfig+0xb52>
 8007618:	2201      	movs	r2, #1
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <UART_SetConfig+0xb68>)
 800761c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 8007624:	e067      	b.n	80076f6 <UART_SetConfig+0xc2e>
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
 800762c:	03d09000 	.word	0x03d09000
 8007630:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <UART_SetConfig+0xc16>
 800763e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b01      	cmp	r3, #1
 8007646:	d048      	beq.n	80076da <UART_SetConfig+0xc12>
 8007648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b02      	cmp	r3, #2
 8007650:	d041      	beq.n	80076d6 <UART_SetConfig+0xc0e>
 8007652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b03      	cmp	r3, #3
 800765a:	d03a      	beq.n	80076d2 <UART_SetConfig+0xc0a>
 800765c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b04      	cmp	r3, #4
 8007664:	d033      	beq.n	80076ce <UART_SetConfig+0xc06>
 8007666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b05      	cmp	r3, #5
 800766e:	d02c      	beq.n	80076ca <UART_SetConfig+0xc02>
 8007670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b06      	cmp	r3, #6
 8007678:	d025      	beq.n	80076c6 <UART_SetConfig+0xbfe>
 800767a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b07      	cmp	r3, #7
 8007682:	d01e      	beq.n	80076c2 <UART_SetConfig+0xbfa>
 8007684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	2b08      	cmp	r3, #8
 800768c:	d017      	beq.n	80076be <UART_SetConfig+0xbf6>
 800768e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b09      	cmp	r3, #9
 8007696:	d010      	beq.n	80076ba <UART_SetConfig+0xbf2>
 8007698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	2b0a      	cmp	r3, #10
 80076a0:	d009      	beq.n	80076b6 <UART_SetConfig+0xbee>
 80076a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	2b0b      	cmp	r3, #11
 80076aa:	d102      	bne.n	80076b2 <UART_SetConfig+0xbea>
 80076ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b0:	e016      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076b2:	2201      	movs	r2, #1
 80076b4:	e014      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	e012      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	e010      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076be:	2220      	movs	r2, #32
 80076c0:	e00e      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076c2:	2210      	movs	r2, #16
 80076c4:	e00c      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076c6:	220c      	movs	r2, #12
 80076c8:	e00a      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076ca:	220a      	movs	r2, #10
 80076cc:	e008      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076ce:	2208      	movs	r2, #8
 80076d0:	e006      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076d2:	2206      	movs	r2, #6
 80076d4:	e004      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076d6:	2204      	movs	r2, #4
 80076d8:	e002      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076da:	2202      	movs	r2, #2
 80076dc:	e000      	b.n	80076e0 <UART_SetConfig+0xc18>
 80076de:	2201      	movs	r2, #1
 80076e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        break;
 80076ec:	e003      	b.n	80076f6 <UART_SetConfig+0xc2e>
      default:
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80076f4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f001 853d 	beq.w	800917a <UART_SetConfig+0x26b2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	441a      	add	r2, r3
 800770c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007710:	4293      	cmp	r3, r2
 8007712:	d307      	bcc.n	8007724 <UART_SetConfig+0xc5c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007720:	4293      	cmp	r3, r2
 8007722:	d904      	bls.n	800772e <UART_SetConfig+0xc66>
      {
        ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800772a:	f001 bd26 	b.w	800917a <UART_SetConfig+0x26b2>
      }
      else
      {
        switch (clocksource)
 800772e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8007732:	2b20      	cmp	r3, #32
 8007734:	dc48      	bgt.n	80077c8 <UART_SetConfig+0xd00>
 8007736:	2b02      	cmp	r3, #2
 8007738:	f2c0 8547 	blt.w	80081ca <UART_SetConfig+0x1702>
 800773c:	3b02      	subs	r3, #2
 800773e:	2b1e      	cmp	r3, #30
 8007740:	f200 8543 	bhi.w	80081ca <UART_SetConfig+0x1702>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <UART_SetConfig+0xc84>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	080077d3 	.word	0x080077d3
 8007750:	080081cb 	.word	0x080081cb
 8007754:	08007953 	.word	0x08007953
 8007758:	080081cb 	.word	0x080081cb
 800775c:	080081cb 	.word	0x080081cb
 8007760:	080081cb 	.word	0x080081cb
 8007764:	08007acb 	.word	0x08007acb
 8007768:	080081cb 	.word	0x080081cb
 800776c:	080081cb 	.word	0x080081cb
 8007770:	080081cb 	.word	0x080081cb
 8007774:	080081cb 	.word	0x080081cb
 8007778:	080081cb 	.word	0x080081cb
 800777c:	080081cb 	.word	0x080081cb
 8007780:	080081cb 	.word	0x080081cb
 8007784:	08007c35 	.word	0x08007c35
 8007788:	080081cb 	.word	0x080081cb
 800778c:	080081cb 	.word	0x080081cb
 8007790:	080081cb 	.word	0x080081cb
 8007794:	080081cb 	.word	0x080081cb
 8007798:	080081cb 	.word	0x080081cb
 800779c:	080081cb 	.word	0x080081cb
 80077a0:	080081cb 	.word	0x080081cb
 80077a4:	080081cb 	.word	0x080081cb
 80077a8:	080081cb 	.word	0x080081cb
 80077ac:	080081cb 	.word	0x080081cb
 80077b0:	080081cb 	.word	0x080081cb
 80077b4:	080081cb 	.word	0x080081cb
 80077b8:	080081cb 	.word	0x080081cb
 80077bc:	080081cb 	.word	0x080081cb
 80077c0:	080081cb 	.word	0x080081cb
 80077c4:	08007f1d 	.word	0x08007f1d
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	f000 8453 	beq.w	8008074 <UART_SetConfig+0x15ac>
 80077ce:	f000 bcfc 	b.w	80081ca <UART_SetConfig+0x1702>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077d2:	f7fe f9f1 	bl	8005bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 80077d6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d072      	beq.n	80078d8 <UART_SetConfig+0xe10>
 80077f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d068      	beq.n	80078ce <UART_SetConfig+0xe06>
 80077fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b02      	cmp	r3, #2
 8007804:	d05e      	beq.n	80078c4 <UART_SetConfig+0xdfc>
 8007806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	2b03      	cmp	r3, #3
 800780e:	d054      	beq.n	80078ba <UART_SetConfig+0xdf2>
 8007810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b04      	cmp	r3, #4
 8007818:	d04a      	beq.n	80078b0 <UART_SetConfig+0xde8>
 800781a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2b05      	cmp	r3, #5
 8007822:	d040      	beq.n	80078a6 <UART_SetConfig+0xdde>
 8007824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b06      	cmp	r3, #6
 800782c:	d036      	beq.n	800789c <UART_SetConfig+0xdd4>
 800782e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b07      	cmp	r3, #7
 8007836:	d02c      	beq.n	8007892 <UART_SetConfig+0xdca>
 8007838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b08      	cmp	r3, #8
 8007840:	d022      	beq.n	8007888 <UART_SetConfig+0xdc0>
 8007842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b09      	cmp	r3, #9
 800784a:	d018      	beq.n	800787e <UART_SetConfig+0xdb6>
 800784c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b0a      	cmp	r3, #10
 8007854:	d00e      	beq.n	8007874 <UART_SetConfig+0xdac>
 8007856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d104      	bne.n	800786a <UART_SetConfig+0xda2>
 8007860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e03a      	b.n	80078e0 <UART_SetConfig+0xe18>
 800786a:	f04f 0201 	mov.w	r2, #1
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e035      	b.n	80078e0 <UART_SetConfig+0xe18>
 8007874:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	e030      	b.n	80078e0 <UART_SetConfig+0xe18>
 800787e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	e02b      	b.n	80078e0 <UART_SetConfig+0xe18>
 8007888:	f04f 0220 	mov.w	r2, #32
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e026      	b.n	80078e0 <UART_SetConfig+0xe18>
 8007892:	f04f 0210 	mov.w	r2, #16
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	e021      	b.n	80078e0 <UART_SetConfig+0xe18>
 800789c:	f04f 020c 	mov.w	r2, #12
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	e01c      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078a6:	f04f 020a 	mov.w	r2, #10
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	e017      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078b0:	f04f 0208 	mov.w	r2, #8
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	e012      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078ba:	f04f 0206 	mov.w	r2, #6
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	e00d      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078c4:	f04f 0204 	mov.w	r2, #4
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	e008      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078ce:	f04f 0202 	mov.w	r2, #2
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	e003      	b.n	80078e0 <UART_SetConfig+0xe18>
 80078d8:	f04f 0201 	mov.w	r2, #1
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80078e4:	f7f8 fd54 	bl	8000390 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	020b      	lsls	r3, r1, #8
 80078fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078fe:	0202      	lsls	r2, r0, #8
 8007900:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007904:	6849      	ldr	r1, [r1, #4]
 8007906:	0849      	lsrs	r1, r1, #1
 8007908:	2000      	movs	r0, #0
 800790a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800790e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8007912:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8007916:	4621      	mov	r1, r4
 8007918:	1851      	adds	r1, r2, r1
 800791a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800791e:	4629      	mov	r1, r5
 8007920:	eb43 0101 	adc.w	r1, r3, r1
 8007924:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8007928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007934:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007938:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800793c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007940:	f7f8 fd26 	bl	8000390 <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 800794e:	f000 bc40 	b.w	80081d2 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007952:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe f944 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007960:	2200      	movs	r2, #0
 8007962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007966:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800796a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	d072      	beq.n	8007a5a <UART_SetConfig+0xf92>
 8007974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	2b01      	cmp	r3, #1
 800797c:	d068      	beq.n	8007a50 <UART_SetConfig+0xf88>
 800797e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b02      	cmp	r3, #2
 8007986:	d05e      	beq.n	8007a46 <UART_SetConfig+0xf7e>
 8007988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b03      	cmp	r3, #3
 8007990:	d054      	beq.n	8007a3c <UART_SetConfig+0xf74>
 8007992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	2b04      	cmp	r3, #4
 800799a:	d04a      	beq.n	8007a32 <UART_SetConfig+0xf6a>
 800799c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d040      	beq.n	8007a28 <UART_SetConfig+0xf60>
 80079a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	d036      	beq.n	8007a1e <UART_SetConfig+0xf56>
 80079b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b07      	cmp	r3, #7
 80079b8:	d02c      	beq.n	8007a14 <UART_SetConfig+0xf4c>
 80079ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d022      	beq.n	8007a0a <UART_SetConfig+0xf42>
 80079c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d018      	beq.n	8007a00 <UART_SetConfig+0xf38>
 80079ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b0a      	cmp	r3, #10
 80079d6:	d00e      	beq.n	80079f6 <UART_SetConfig+0xf2e>
 80079d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	2b0b      	cmp	r3, #11
 80079e0:	d104      	bne.n	80079ec <UART_SetConfig+0xf24>
 80079e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	e03a      	b.n	8007a62 <UART_SetConfig+0xf9a>
 80079ec:	f04f 0201 	mov.w	r2, #1
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e035      	b.n	8007a62 <UART_SetConfig+0xf9a>
 80079f6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	e030      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a00:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e02b      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a0a:	f04f 0220 	mov.w	r2, #32
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e026      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a14:	f04f 0210 	mov.w	r2, #16
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	e021      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a1e:	f04f 020c 	mov.w	r2, #12
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	e01c      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a28:	f04f 020a 	mov.w	r2, #10
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	e017      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a32:	f04f 0208 	mov.w	r2, #8
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	e012      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a3c:	f04f 0206 	mov.w	r2, #6
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e00d      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a46:	f04f 0204 	mov.w	r2, #4
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	e008      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a50:	f04f 0202 	mov.w	r2, #2
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	e003      	b.n	8007a62 <UART_SetConfig+0xf9a>
 8007a5a:	f04f 0201 	mov.w	r2, #1
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007a66:	f7f8 fc93 	bl	8000390 <__aeabi_uldivmod>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	020b      	lsls	r3, r1, #8
 8007a7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a80:	0202      	lsls	r2, r0, #8
 8007a82:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007a86:	6849      	ldr	r1, [r1, #4]
 8007a88:	0849      	lsrs	r1, r1, #1
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007a90:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8007a94:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8007a98:	4621      	mov	r1, r4
 8007a9a:	1851      	adds	r1, r2, r1
 8007a9c:	67b9      	str	r1, [r7, #120]	; 0x78
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	eb43 0101 	adc.w	r1, r3, r1
 8007aa4:	67f9      	str	r1, [r7, #124]	; 0x7c
 8007aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	673b      	str	r3, [r7, #112]	; 0x70
 8007ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ab2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ab6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007aba:	f7f8 fc69 	bl	8000390 <__aeabi_uldivmod>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 8007ac8:	e383      	b.n	80081d2 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe f9dc 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8007adc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d072      	beq.n	8007bce <UART_SetConfig+0x1106>
 8007ae8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d068      	beq.n	8007bc4 <UART_SetConfig+0x10fc>
 8007af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d05e      	beq.n	8007bba <UART_SetConfig+0x10f2>
 8007afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d054      	beq.n	8007bb0 <UART_SetConfig+0x10e8>
 8007b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d04a      	beq.n	8007ba6 <UART_SetConfig+0x10de>
 8007b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	d040      	beq.n	8007b9c <UART_SetConfig+0x10d4>
 8007b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b06      	cmp	r3, #6
 8007b22:	d036      	beq.n	8007b92 <UART_SetConfig+0x10ca>
 8007b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2b07      	cmp	r3, #7
 8007b2c:	d02c      	beq.n	8007b88 <UART_SetConfig+0x10c0>
 8007b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d022      	beq.n	8007b7e <UART_SetConfig+0x10b6>
 8007b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d018      	beq.n	8007b74 <UART_SetConfig+0x10ac>
 8007b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b0a      	cmp	r3, #10
 8007b4a:	d00e      	beq.n	8007b6a <UART_SetConfig+0x10a2>
 8007b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	2b0b      	cmp	r3, #11
 8007b54:	d104      	bne.n	8007b60 <UART_SetConfig+0x1098>
 8007b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	e03a      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b60:	f04f 0201 	mov.w	r2, #1
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e035      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b6a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e030      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b74:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e02b      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b7e:	f04f 0220 	mov.w	r2, #32
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	e026      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b88:	f04f 0210 	mov.w	r2, #16
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	e021      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b92:	f04f 020c 	mov.w	r2, #12
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	e01c      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007b9c:	f04f 020a 	mov.w	r2, #10
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	e017      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007ba6:	f04f 0208 	mov.w	r2, #8
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	e012      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007bb0:	f04f 0206 	mov.w	r2, #6
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007bba:	f04f 0204 	mov.w	r2, #4
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	e008      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007bc4:	f04f 0202 	mov.w	r2, #2
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	e003      	b.n	8007bd6 <UART_SetConfig+0x110e>
 8007bce:	f04f 0201 	mov.w	r2, #1
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bda:	f7f8 fbd9 	bl	8000390 <__aeabi_uldivmod>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4610      	mov	r0, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	020b      	lsls	r3, r1, #8
 8007bf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bf4:	0202      	lsls	r2, r0, #8
 8007bf6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007bfa:	6849      	ldr	r1, [r1, #4]
 8007bfc:	0849      	lsrs	r1, r1, #1
 8007bfe:	2000      	movs	r0, #0
 8007c00:	468a      	mov	sl, r1
 8007c02:	4683      	mov	fp, r0
 8007c04:	eb12 010a 	adds.w	r1, r2, sl
 8007c08:	6639      	str	r1, [r7, #96]	; 0x60
 8007c0a:	eb43 030b 	adc.w	r3, r3, fp
 8007c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c24:	f7f8 fbb4 	bl	8000390 <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 8007c32:	e2ce      	b.n	80081d2 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c34:	4bb7      	ldr	r3, [pc, #732]	; (8007f14 <UART_SetConfig+0x144c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80b9 	beq.w	8007db4 <UART_SetConfig+0x12ec>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c42:	4bb4      	ldr	r3, [pc, #720]	; (8007f14 <UART_SetConfig+0x144c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	08db      	lsrs	r3, r3, #3
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	4ab2      	ldr	r2, [pc, #712]	; (8007f18 <UART_SetConfig+0x1450>)
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	2200      	movs	r2, #0
 8007c54:	653b      	str	r3, [r7, #80]	; 0x50
 8007c56:	657a      	str	r2, [r7, #84]	; 0x54
 8007c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d072      	beq.n	8007d48 <UART_SetConfig+0x1280>
 8007c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d068      	beq.n	8007d3e <UART_SetConfig+0x1276>
 8007c6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d05e      	beq.n	8007d34 <UART_SetConfig+0x126c>
 8007c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d054      	beq.n	8007d2a <UART_SetConfig+0x1262>
 8007c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d04a      	beq.n	8007d20 <UART_SetConfig+0x1258>
 8007c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d040      	beq.n	8007d16 <UART_SetConfig+0x124e>
 8007c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2b06      	cmp	r3, #6
 8007c9c:	d036      	beq.n	8007d0c <UART_SetConfig+0x1244>
 8007c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b07      	cmp	r3, #7
 8007ca6:	d02c      	beq.n	8007d02 <UART_SetConfig+0x123a>
 8007ca8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d022      	beq.n	8007cf8 <UART_SetConfig+0x1230>
 8007cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d018      	beq.n	8007cee <UART_SetConfig+0x1226>
 8007cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b0a      	cmp	r3, #10
 8007cc4:	d00e      	beq.n	8007ce4 <UART_SetConfig+0x121c>
 8007cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2b0b      	cmp	r3, #11
 8007cce:	d104      	bne.n	8007cda <UART_SetConfig+0x1212>
 8007cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e03a      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007cda:	f04f 0201 	mov.w	r2, #1
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	e035      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007ce4:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e030      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007cee:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	e02b      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007cf8:	f04f 0220 	mov.w	r2, #32
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e026      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d02:	f04f 0210 	mov.w	r2, #16
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	e021      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d0c:	f04f 020c 	mov.w	r2, #12
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e01c      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d16:	f04f 020a 	mov.w	r2, #10
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	e017      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d20:	f04f 0208 	mov.w	r2, #8
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e012      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d2a:	f04f 0206 	mov.w	r2, #6
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	e00d      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d34:	f04f 0204 	mov.w	r2, #4
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e008      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d3e:	f04f 0202 	mov.w	r2, #2
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	e003      	b.n	8007d50 <UART_SetConfig+0x1288>
 8007d48:	f04f 0201 	mov.w	r2, #1
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d54:	f7f8 fb1c 	bl	8000390 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	020b      	lsls	r3, r1, #8
 8007d6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d6e:	0202      	lsls	r2, r0, #8
 8007d70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007d74:	6849      	ldr	r1, [r1, #4]
 8007d76:	0849      	lsrs	r1, r1, #1
 8007d78:	2000      	movs	r0, #0
 8007d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d7c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007d7e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007d82:	4621      	mov	r1, r4
 8007d84:	1851      	adds	r1, r2, r1
 8007d86:	6439      	str	r1, [r7, #64]	; 0x40
 8007d88:	4629      	mov	r1, r5
 8007d8a:	eb43 0101 	adc.w	r1, r3, r1
 8007d8e:	6479      	str	r1, [r7, #68]	; 0x44
 8007d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007da0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007da4:	f7f8 faf4 	bl	8000390 <__aeabi_uldivmod>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4613      	mov	r3, r2
 8007dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007db2:	e20e      	b.n	80081d2 <UART_SetConfig+0x170a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d072      	beq.n	8007ea4 <UART_SetConfig+0x13dc>
 8007dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d068      	beq.n	8007e9a <UART_SetConfig+0x13d2>
 8007dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d05e      	beq.n	8007e90 <UART_SetConfig+0x13c8>
 8007dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d054      	beq.n	8007e86 <UART_SetConfig+0x13be>
 8007ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d04a      	beq.n	8007e7c <UART_SetConfig+0x13b4>
 8007de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d040      	beq.n	8007e72 <UART_SetConfig+0x13aa>
 8007df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d036      	beq.n	8007e68 <UART_SetConfig+0x13a0>
 8007dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b07      	cmp	r3, #7
 8007e02:	d02c      	beq.n	8007e5e <UART_SetConfig+0x1396>
 8007e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d022      	beq.n	8007e54 <UART_SetConfig+0x138c>
 8007e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b09      	cmp	r3, #9
 8007e16:	d018      	beq.n	8007e4a <UART_SetConfig+0x1382>
 8007e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b0a      	cmp	r3, #10
 8007e20:	d00e      	beq.n	8007e40 <UART_SetConfig+0x1378>
 8007e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b0b      	cmp	r3, #11
 8007e2a:	d104      	bne.n	8007e36 <UART_SetConfig+0x136e>
 8007e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	e03a      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e36:	f04f 0201 	mov.w	r2, #1
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	e035      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e40:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	e030      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e4a:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	e02b      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e54:	f04f 0220 	mov.w	r2, #32
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	e026      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e5e:	f04f 0210 	mov.w	r2, #16
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e021      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e68:	f04f 020c 	mov.w	r2, #12
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	e01c      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e72:	f04f 020a 	mov.w	r2, #10
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e017      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e7c:	f04f 0208 	mov.w	r2, #8
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e012      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e86:	f04f 0206 	mov.w	r2, #6
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e00d      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e90:	f04f 0204 	mov.w	r2, #4
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e008      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007e9a:	f04f 0202 	mov.w	r2, #2
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e003      	b.n	8007eac <UART_SetConfig+0x13e4>
 8007ea4:	f04f 0201 	mov.w	r2, #1
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	481a      	ldr	r0, [pc, #104]	; (8007f18 <UART_SetConfig+0x1450>)
 8007eae:	f04f 0100 	mov.w	r1, #0
 8007eb2:	f7f8 fa6d 	bl	8000390 <__aeabi_uldivmod>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	020b      	lsls	r3, r1, #8
 8007ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ecc:	0202      	lsls	r2, r0, #8
 8007ece:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007ed2:	6849      	ldr	r1, [r1, #4]
 8007ed4:	0849      	lsrs	r1, r1, #1
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8007eda:	6378      	str	r0, [r7, #52]	; 0x34
 8007edc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	1851      	adds	r1, r2, r1
 8007ee4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	eb43 0101 	adc.w	r1, r3, r1
 8007eec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	623b      	str	r3, [r7, #32]
 8007ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8007efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f02:	f7f8 fa45 	bl	8000390 <__aeabi_uldivmod>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 8007f10:	e15f      	b.n	80081d2 <UART_SetConfig+0x170a>
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d072      	beq.n	800800c <UART_SetConfig+0x1544>
 8007f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d068      	beq.n	8008002 <UART_SetConfig+0x153a>
 8007f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d05e      	beq.n	8007ff8 <UART_SetConfig+0x1530>
 8007f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d054      	beq.n	8007fee <UART_SetConfig+0x1526>
 8007f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d04a      	beq.n	8007fe4 <UART_SetConfig+0x151c>
 8007f4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d040      	beq.n	8007fda <UART_SetConfig+0x1512>
 8007f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d036      	beq.n	8007fd0 <UART_SetConfig+0x1508>
 8007f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d02c      	beq.n	8007fc6 <UART_SetConfig+0x14fe>
 8007f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d022      	beq.n	8007fbc <UART_SetConfig+0x14f4>
 8007f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d018      	beq.n	8007fb2 <UART_SetConfig+0x14ea>
 8007f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b0a      	cmp	r3, #10
 8007f88:	d00e      	beq.n	8007fa8 <UART_SetConfig+0x14e0>
 8007f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	2b0b      	cmp	r3, #11
 8007f92:	d104      	bne.n	8007f9e <UART_SetConfig+0x14d6>
 8007f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	e03a      	b.n	8008014 <UART_SetConfig+0x154c>
 8007f9e:	f04f 0201 	mov.w	r2, #1
 8007fa2:	f04f 0300 	mov.w	r3, #0
 8007fa6:	e035      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fa8:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e030      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fb2:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	e02b      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fbc:	f04f 0220 	mov.w	r2, #32
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e026      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fc6:	f04f 0210 	mov.w	r2, #16
 8007fca:	f04f 0300 	mov.w	r3, #0
 8007fce:	e021      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fd0:	f04f 020c 	mov.w	r2, #12
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e01c      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fda:	f04f 020a 	mov.w	r2, #10
 8007fde:	f04f 0300 	mov.w	r3, #0
 8007fe2:	e017      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fe4:	f04f 0208 	mov.w	r2, #8
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e012      	b.n	8008014 <UART_SetConfig+0x154c>
 8007fee:	f04f 0206 	mov.w	r2, #6
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	e00d      	b.n	8008014 <UART_SetConfig+0x154c>
 8007ff8:	f04f 0204 	mov.w	r2, #4
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e008      	b.n	8008014 <UART_SetConfig+0x154c>
 8008002:	f04f 0202 	mov.w	r2, #2
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	e003      	b.n	8008014 <UART_SetConfig+0x154c>
 800800c:	f04f 0201 	mov.w	r2, #1
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	48a7      	ldr	r0, [pc, #668]	; (80082b4 <UART_SetConfig+0x17ec>)
 8008016:	f04f 0100 	mov.w	r1, #0
 800801a:	f7f8 f9b9 	bl	8000390 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	020b      	lsls	r3, r1, #8
 8008030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008034:	0202      	lsls	r2, r0, #8
 8008036:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800803a:	6849      	ldr	r1, [r1, #4]
 800803c:	0849      	lsrs	r1, r1, #1
 800803e:	2000      	movs	r0, #0
 8008040:	4688      	mov	r8, r1
 8008042:	4681      	mov	r9, r0
 8008044:	eb12 0108 	adds.w	r1, r2, r8
 8008048:	61b9      	str	r1, [r7, #24]
 800804a:	eb43 0309 	adc.w	r3, r3, r9
 800804e:	61fb      	str	r3, [r7, #28]
 8008050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	617a      	str	r2, [r7, #20]
 800805c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008060:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008064:	f7f8 f994 	bl	8000390 <__aeabi_uldivmod>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4613      	mov	r3, r2
 800806e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 8008072:	e0ae      	b.n	80081d2 <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d072      	beq.n	8008164 <UART_SetConfig+0x169c>
 800807e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b01      	cmp	r3, #1
 8008086:	d068      	beq.n	800815a <UART_SetConfig+0x1692>
 8008088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b02      	cmp	r3, #2
 8008090:	d05e      	beq.n	8008150 <UART_SetConfig+0x1688>
 8008092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b03      	cmp	r3, #3
 800809a:	d054      	beq.n	8008146 <UART_SetConfig+0x167e>
 800809c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d04a      	beq.n	800813c <UART_SetConfig+0x1674>
 80080a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	d040      	beq.n	8008132 <UART_SetConfig+0x166a>
 80080b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d036      	beq.n	8008128 <UART_SetConfig+0x1660>
 80080ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	d02c      	beq.n	800811e <UART_SetConfig+0x1656>
 80080c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d022      	beq.n	8008114 <UART_SetConfig+0x164c>
 80080ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b09      	cmp	r3, #9
 80080d6:	d018      	beq.n	800810a <UART_SetConfig+0x1642>
 80080d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b0a      	cmp	r3, #10
 80080e0:	d00e      	beq.n	8008100 <UART_SetConfig+0x1638>
 80080e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b0b      	cmp	r3, #11
 80080ea:	d104      	bne.n	80080f6 <UART_SetConfig+0x162e>
 80080ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	e03a      	b.n	800816c <UART_SetConfig+0x16a4>
 80080f6:	f04f 0201 	mov.w	r2, #1
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	e035      	b.n	800816c <UART_SetConfig+0x16a4>
 8008100:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e030      	b.n	800816c <UART_SetConfig+0x16a4>
 800810a:	f04f 0240 	mov.w	r2, #64	; 0x40
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	e02b      	b.n	800816c <UART_SetConfig+0x16a4>
 8008114:	f04f 0220 	mov.w	r2, #32
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e026      	b.n	800816c <UART_SetConfig+0x16a4>
 800811e:	f04f 0210 	mov.w	r2, #16
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e021      	b.n	800816c <UART_SetConfig+0x16a4>
 8008128:	f04f 020c 	mov.w	r2, #12
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	e01c      	b.n	800816c <UART_SetConfig+0x16a4>
 8008132:	f04f 020a 	mov.w	r2, #10
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	e017      	b.n	800816c <UART_SetConfig+0x16a4>
 800813c:	f04f 0208 	mov.w	r2, #8
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	e012      	b.n	800816c <UART_SetConfig+0x16a4>
 8008146:	f04f 0206 	mov.w	r2, #6
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	e00d      	b.n	800816c <UART_SetConfig+0x16a4>
 8008150:	f04f 0204 	mov.w	r2, #4
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e008      	b.n	800816c <UART_SetConfig+0x16a4>
 800815a:	f04f 0202 	mov.w	r2, #2
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e003      	b.n	800816c <UART_SetConfig+0x16a4>
 8008164:	f04f 0201 	mov.w	r2, #1
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008170:	f04f 0100 	mov.w	r1, #0
 8008174:	f7f8 f90c 	bl	8000390 <__aeabi_uldivmod>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	020b      	lsls	r3, r1, #8
 800818a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800818e:	0202      	lsls	r2, r0, #8
 8008190:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008194:	6849      	ldr	r1, [r1, #4]
 8008196:	0849      	lsrs	r1, r1, #1
 8008198:	2000      	movs	r0, #0
 800819a:	460c      	mov	r4, r1
 800819c:	4605      	mov	r5, r0
 800819e:	1911      	adds	r1, r2, r4
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	416b      	adcs	r3, r5
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081ba:	f7f8 f8e9 	bl	8000390 <__aeabi_uldivmod>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4613      	mov	r3, r2
 80081c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            break;
 80081c8:	e003      	b.n	80081d2 <UART_SetConfig+0x170a>
          default:
            ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80081d0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081da:	d30c      	bcc.n	80081f6 <UART_SetConfig+0x172e>
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e4:	d207      	bcs.n	80081f6 <UART_SetConfig+0x172e>
        {
          huart->Instance->BRR = usartdiv;
 80081e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	f000 bfc2 	b.w	800917a <UART_SetConfig+0x26b2>
        }
        else
        {
          ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80081fc:	f000 bfbd 	b.w	800917a <UART_SetConfig+0x26b2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820a:	f040 83e9 	bne.w	80089e0 <UART_SetConfig+0x1f18>
  {
    switch (clocksource)
 800820e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8008212:	2b20      	cmp	r3, #32
 8008214:	dc4a      	bgt.n	80082ac <UART_SetConfig+0x17e4>
 8008216:	2b00      	cmp	r3, #0
 8008218:	f2c0 83b7 	blt.w	800898a <UART_SetConfig+0x1ec2>
 800821c:	2b20      	cmp	r3, #32
 800821e:	f200 83b4 	bhi.w	800898a <UART_SetConfig+0x1ec2>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x1760>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	080082b9 	.word	0x080082b9
 800822c:	08008393 	.word	0x08008393
 8008230:	0800898b 	.word	0x0800898b
 8008234:	0800898b 	.word	0x0800898b
 8008238:	0800846d 	.word	0x0800846d
 800823c:	0800898b 	.word	0x0800898b
 8008240:	0800898b 	.word	0x0800898b
 8008244:	0800898b 	.word	0x0800898b
 8008248:	08008549 	.word	0x08008549
 800824c:	0800898b 	.word	0x0800898b
 8008250:	0800898b 	.word	0x0800898b
 8008254:	0800898b 	.word	0x0800898b
 8008258:	0800898b 	.word	0x0800898b
 800825c:	0800898b 	.word	0x0800898b
 8008260:	0800898b 	.word	0x0800898b
 8008264:	0800898b 	.word	0x0800898b
 8008268:	08008625 	.word	0x08008625
 800826c:	0800898b 	.word	0x0800898b
 8008270:	0800898b 	.word	0x0800898b
 8008274:	0800898b 	.word	0x0800898b
 8008278:	0800898b 	.word	0x0800898b
 800827c:	0800898b 	.word	0x0800898b
 8008280:	0800898b 	.word	0x0800898b
 8008284:	0800898b 	.word	0x0800898b
 8008288:	0800898b 	.word	0x0800898b
 800828c:	0800898b 	.word	0x0800898b
 8008290:	0800898b 	.word	0x0800898b
 8008294:	0800898b 	.word	0x0800898b
 8008298:	0800898b 	.word	0x0800898b
 800829c:	0800898b 	.word	0x0800898b
 80082a0:	0800898b 	.word	0x0800898b
 80082a4:	0800898b 	.word	0x0800898b
 80082a8:	080087dd 	.word	0x080087dd
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	f000 8303 	beq.w	80088b8 <UART_SetConfig+0x1df0>
 80082b2:	e36a      	b.n	800898a <UART_SetConfig+0x1ec2>
 80082b4:	003d0900 	.word	0x003d0900
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b8:	f7fc fcea 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 80082bc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d04f      	beq.n	800836a <UART_SetConfig+0x18a2>
 80082ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d048      	beq.n	8008366 <UART_SetConfig+0x189e>
 80082d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d041      	beq.n	8008362 <UART_SetConfig+0x189a>
 80082de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d03a      	beq.n	800835e <UART_SetConfig+0x1896>
 80082e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d033      	beq.n	800835a <UART_SetConfig+0x1892>
 80082f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b05      	cmp	r3, #5
 80082fa:	d02c      	beq.n	8008356 <UART_SetConfig+0x188e>
 80082fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b06      	cmp	r3, #6
 8008304:	d025      	beq.n	8008352 <UART_SetConfig+0x188a>
 8008306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b07      	cmp	r3, #7
 800830e:	d01e      	beq.n	800834e <UART_SetConfig+0x1886>
 8008310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b08      	cmp	r3, #8
 8008318:	d017      	beq.n	800834a <UART_SetConfig+0x1882>
 800831a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b09      	cmp	r3, #9
 8008322:	d010      	beq.n	8008346 <UART_SetConfig+0x187e>
 8008324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b0a      	cmp	r3, #10
 800832c:	d009      	beq.n	8008342 <UART_SetConfig+0x187a>
 800832e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	2b0b      	cmp	r3, #11
 8008336:	d102      	bne.n	800833e <UART_SetConfig+0x1876>
 8008338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800833c:	e016      	b.n	800836c <UART_SetConfig+0x18a4>
 800833e:	2301      	movs	r3, #1
 8008340:	e014      	b.n	800836c <UART_SetConfig+0x18a4>
 8008342:	2380      	movs	r3, #128	; 0x80
 8008344:	e012      	b.n	800836c <UART_SetConfig+0x18a4>
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	e010      	b.n	800836c <UART_SetConfig+0x18a4>
 800834a:	2320      	movs	r3, #32
 800834c:	e00e      	b.n	800836c <UART_SetConfig+0x18a4>
 800834e:	2310      	movs	r3, #16
 8008350:	e00c      	b.n	800836c <UART_SetConfig+0x18a4>
 8008352:	230c      	movs	r3, #12
 8008354:	e00a      	b.n	800836c <UART_SetConfig+0x18a4>
 8008356:	230a      	movs	r3, #10
 8008358:	e008      	b.n	800836c <UART_SetConfig+0x18a4>
 800835a:	2308      	movs	r3, #8
 800835c:	e006      	b.n	800836c <UART_SetConfig+0x18a4>
 800835e:	2306      	movs	r3, #6
 8008360:	e004      	b.n	800836c <UART_SetConfig+0x18a4>
 8008362:	2304      	movs	r3, #4
 8008364:	e002      	b.n	800836c <UART_SetConfig+0x18a4>
 8008366:	2302      	movs	r3, #2
 8008368:	e000      	b.n	800836c <UART_SetConfig+0x18a4>
 800836a:	2301      	movs	r3, #1
 800836c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	005a      	lsls	r2, r3, #1
 8008376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	441a      	add	r2, r3
 8008380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	b29b      	uxth	r3, r3
 800838c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008390:	e2ff      	b.n	8008992 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008392:	f7fc fc93 	bl	8004cbc <HAL_RCC_GetPCLK2Freq>
 8008396:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d04f      	beq.n	8008444 <UART_SetConfig+0x197c>
 80083a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d048      	beq.n	8008440 <UART_SetConfig+0x1978>
 80083ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d041      	beq.n	800843c <UART_SetConfig+0x1974>
 80083b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d03a      	beq.n	8008438 <UART_SetConfig+0x1970>
 80083c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d033      	beq.n	8008434 <UART_SetConfig+0x196c>
 80083cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	d02c      	beq.n	8008430 <UART_SetConfig+0x1968>
 80083d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d025      	beq.n	800842c <UART_SetConfig+0x1964>
 80083e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b07      	cmp	r3, #7
 80083e8:	d01e      	beq.n	8008428 <UART_SetConfig+0x1960>
 80083ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d017      	beq.n	8008424 <UART_SetConfig+0x195c>
 80083f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d010      	beq.n	8008420 <UART_SetConfig+0x1958>
 80083fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b0a      	cmp	r3, #10
 8008406:	d009      	beq.n	800841c <UART_SetConfig+0x1954>
 8008408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	2b0b      	cmp	r3, #11
 8008410:	d102      	bne.n	8008418 <UART_SetConfig+0x1950>
 8008412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008416:	e016      	b.n	8008446 <UART_SetConfig+0x197e>
 8008418:	2301      	movs	r3, #1
 800841a:	e014      	b.n	8008446 <UART_SetConfig+0x197e>
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	e012      	b.n	8008446 <UART_SetConfig+0x197e>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	e010      	b.n	8008446 <UART_SetConfig+0x197e>
 8008424:	2320      	movs	r3, #32
 8008426:	e00e      	b.n	8008446 <UART_SetConfig+0x197e>
 8008428:	2310      	movs	r3, #16
 800842a:	e00c      	b.n	8008446 <UART_SetConfig+0x197e>
 800842c:	230c      	movs	r3, #12
 800842e:	e00a      	b.n	8008446 <UART_SetConfig+0x197e>
 8008430:	230a      	movs	r3, #10
 8008432:	e008      	b.n	8008446 <UART_SetConfig+0x197e>
 8008434:	2308      	movs	r3, #8
 8008436:	e006      	b.n	8008446 <UART_SetConfig+0x197e>
 8008438:	2306      	movs	r3, #6
 800843a:	e004      	b.n	8008446 <UART_SetConfig+0x197e>
 800843c:	2304      	movs	r3, #4
 800843e:	e002      	b.n	8008446 <UART_SetConfig+0x197e>
 8008440:	2302      	movs	r3, #2
 8008442:	e000      	b.n	8008446 <UART_SetConfig+0x197e>
 8008444:	2301      	movs	r3, #1
 8008446:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800844a:	fbb2 f3f3 	udiv	r3, r2, r3
 800844e:	005a      	lsls	r2, r3, #1
 8008450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	441a      	add	r2, r3
 800845a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	b29b      	uxth	r3, r3
 8008466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800846a:	e292      	b.n	8008992 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008470:	4618      	mov	r0, r3
 8008472:	f7fd fbb7 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008476:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800847a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	d04f      	beq.n	8008524 <UART_SetConfig+0x1a5c>
 8008484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2b01      	cmp	r3, #1
 800848c:	d048      	beq.n	8008520 <UART_SetConfig+0x1a58>
 800848e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b02      	cmp	r3, #2
 8008496:	d041      	beq.n	800851c <UART_SetConfig+0x1a54>
 8008498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d03a      	beq.n	8008518 <UART_SetConfig+0x1a50>
 80084a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d033      	beq.n	8008514 <UART_SetConfig+0x1a4c>
 80084ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d02c      	beq.n	8008510 <UART_SetConfig+0x1a48>
 80084b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b06      	cmp	r3, #6
 80084be:	d025      	beq.n	800850c <UART_SetConfig+0x1a44>
 80084c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b07      	cmp	r3, #7
 80084c8:	d01e      	beq.n	8008508 <UART_SetConfig+0x1a40>
 80084ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d017      	beq.n	8008504 <UART_SetConfig+0x1a3c>
 80084d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b09      	cmp	r3, #9
 80084dc:	d010      	beq.n	8008500 <UART_SetConfig+0x1a38>
 80084de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	2b0a      	cmp	r3, #10
 80084e6:	d009      	beq.n	80084fc <UART_SetConfig+0x1a34>
 80084e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b0b      	cmp	r3, #11
 80084f0:	d102      	bne.n	80084f8 <UART_SetConfig+0x1a30>
 80084f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084f6:	e016      	b.n	8008526 <UART_SetConfig+0x1a5e>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e014      	b.n	8008526 <UART_SetConfig+0x1a5e>
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	e012      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008500:	2340      	movs	r3, #64	; 0x40
 8008502:	e010      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008504:	2320      	movs	r3, #32
 8008506:	e00e      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008508:	2310      	movs	r3, #16
 800850a:	e00c      	b.n	8008526 <UART_SetConfig+0x1a5e>
 800850c:	230c      	movs	r3, #12
 800850e:	e00a      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008510:	230a      	movs	r3, #10
 8008512:	e008      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008514:	2308      	movs	r3, #8
 8008516:	e006      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008518:	2306      	movs	r3, #6
 800851a:	e004      	b.n	8008526 <UART_SetConfig+0x1a5e>
 800851c:	2304      	movs	r3, #4
 800851e:	e002      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008520:	2302      	movs	r3, #2
 8008522:	e000      	b.n	8008526 <UART_SetConfig+0x1a5e>
 8008524:	2301      	movs	r3, #1
 8008526:	fbb2 f3f3 	udiv	r3, r2, r3
 800852a:	005a      	lsls	r2, r3, #1
 800852c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	441a      	add	r2, r3
 8008536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	b29b      	uxth	r3, r3
 8008542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008546:	e224      	b.n	8008992 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008548:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800854c:	4618      	mov	r0, r3
 800854e:	f7fd fc9d 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008552:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d04f      	beq.n	8008600 <UART_SetConfig+0x1b38>
 8008560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b01      	cmp	r3, #1
 8008568:	d048      	beq.n	80085fc <UART_SetConfig+0x1b34>
 800856a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b02      	cmp	r3, #2
 8008572:	d041      	beq.n	80085f8 <UART_SetConfig+0x1b30>
 8008574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	2b03      	cmp	r3, #3
 800857c:	d03a      	beq.n	80085f4 <UART_SetConfig+0x1b2c>
 800857e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	2b04      	cmp	r3, #4
 8008586:	d033      	beq.n	80085f0 <UART_SetConfig+0x1b28>
 8008588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b05      	cmp	r3, #5
 8008590:	d02c      	beq.n	80085ec <UART_SetConfig+0x1b24>
 8008592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b06      	cmp	r3, #6
 800859a:	d025      	beq.n	80085e8 <UART_SetConfig+0x1b20>
 800859c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b07      	cmp	r3, #7
 80085a4:	d01e      	beq.n	80085e4 <UART_SetConfig+0x1b1c>
 80085a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d017      	beq.n	80085e0 <UART_SetConfig+0x1b18>
 80085b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d010      	beq.n	80085dc <UART_SetConfig+0x1b14>
 80085ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b0a      	cmp	r3, #10
 80085c2:	d009      	beq.n	80085d8 <UART_SetConfig+0x1b10>
 80085c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b0b      	cmp	r3, #11
 80085cc:	d102      	bne.n	80085d4 <UART_SetConfig+0x1b0c>
 80085ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d2:	e016      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e014      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	e012      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	e010      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085e0:	2320      	movs	r3, #32
 80085e2:	e00e      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085e4:	2310      	movs	r3, #16
 80085e6:	e00c      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085e8:	230c      	movs	r3, #12
 80085ea:	e00a      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085ec:	230a      	movs	r3, #10
 80085ee:	e008      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085f0:	2308      	movs	r3, #8
 80085f2:	e006      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085f4:	2306      	movs	r3, #6
 80085f6:	e004      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085f8:	2304      	movs	r3, #4
 80085fa:	e002      	b.n	8008602 <UART_SetConfig+0x1b3a>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e000      	b.n	8008602 <UART_SetConfig+0x1b3a>
 8008600:	2301      	movs	r3, #1
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	005a      	lsls	r2, r3, #1
 8008608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	441a      	add	r2, r3
 8008612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	fbb2 f3f3 	udiv	r3, r2, r3
 800861c:	b29b      	uxth	r3, r3
 800861e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008622:	e1b6      	b.n	8008992 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008624:	4ba1      	ldr	r3, [pc, #644]	; (80088ac <UART_SetConfig+0x1de4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d06d      	beq.n	800870c <UART_SetConfig+0x1c44>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008630:	4b9e      	ldr	r3, [pc, #632]	; (80088ac <UART_SetConfig+0x1de4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	08db      	lsrs	r3, r3, #3
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	4a9d      	ldr	r2, [pc, #628]	; (80088b0 <UART_SetConfig+0x1de8>)
 800863c:	40da      	lsrs	r2, r3
 800863e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	d04f      	beq.n	80086e8 <UART_SetConfig+0x1c20>
 8008648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	2b01      	cmp	r3, #1
 8008650:	d048      	beq.n	80086e4 <UART_SetConfig+0x1c1c>
 8008652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b02      	cmp	r3, #2
 800865a:	d041      	beq.n	80086e0 <UART_SetConfig+0x1c18>
 800865c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b03      	cmp	r3, #3
 8008664:	d03a      	beq.n	80086dc <UART_SetConfig+0x1c14>
 8008666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b04      	cmp	r3, #4
 800866e:	d033      	beq.n	80086d8 <UART_SetConfig+0x1c10>
 8008670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2b05      	cmp	r3, #5
 8008678:	d02c      	beq.n	80086d4 <UART_SetConfig+0x1c0c>
 800867a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b06      	cmp	r3, #6
 8008682:	d025      	beq.n	80086d0 <UART_SetConfig+0x1c08>
 8008684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b07      	cmp	r3, #7
 800868c:	d01e      	beq.n	80086cc <UART_SetConfig+0x1c04>
 800868e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b08      	cmp	r3, #8
 8008696:	d017      	beq.n	80086c8 <UART_SetConfig+0x1c00>
 8008698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d010      	beq.n	80086c4 <UART_SetConfig+0x1bfc>
 80086a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	2b0a      	cmp	r3, #10
 80086aa:	d009      	beq.n	80086c0 <UART_SetConfig+0x1bf8>
 80086ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b0b      	cmp	r3, #11
 80086b4:	d102      	bne.n	80086bc <UART_SetConfig+0x1bf4>
 80086b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ba:	e016      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086bc:	2301      	movs	r3, #1
 80086be:	e014      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	e012      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	e010      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086c8:	2320      	movs	r3, #32
 80086ca:	e00e      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086cc:	2310      	movs	r3, #16
 80086ce:	e00c      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086d0:	230c      	movs	r3, #12
 80086d2:	e00a      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086d4:	230a      	movs	r3, #10
 80086d6:	e008      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086d8:	2308      	movs	r3, #8
 80086da:	e006      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086dc:	2306      	movs	r3, #6
 80086de:	e004      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086e0:	2304      	movs	r3, #4
 80086e2:	e002      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e000      	b.n	80086ea <UART_SetConfig+0x1c22>
 80086e8:	2301      	movs	r3, #1
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	005a      	lsls	r2, r3, #1
 80086f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	441a      	add	r2, r3
 80086fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
 8008704:	b29b      	uxth	r3, r3
 8008706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800870a:	e142      	b.n	8008992 <UART_SetConfig+0x1eca>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d04f      	beq.n	80087b6 <UART_SetConfig+0x1cee>
 8008716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b01      	cmp	r3, #1
 800871e:	d048      	beq.n	80087b2 <UART_SetConfig+0x1cea>
 8008720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b02      	cmp	r3, #2
 8008728:	d041      	beq.n	80087ae <UART_SetConfig+0x1ce6>
 800872a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b03      	cmp	r3, #3
 8008732:	d03a      	beq.n	80087aa <UART_SetConfig+0x1ce2>
 8008734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	2b04      	cmp	r3, #4
 800873c:	d033      	beq.n	80087a6 <UART_SetConfig+0x1cde>
 800873e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b05      	cmp	r3, #5
 8008746:	d02c      	beq.n	80087a2 <UART_SetConfig+0x1cda>
 8008748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	2b06      	cmp	r3, #6
 8008750:	d025      	beq.n	800879e <UART_SetConfig+0x1cd6>
 8008752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b07      	cmp	r3, #7
 800875a:	d01e      	beq.n	800879a <UART_SetConfig+0x1cd2>
 800875c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	2b08      	cmp	r3, #8
 8008764:	d017      	beq.n	8008796 <UART_SetConfig+0x1cce>
 8008766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b09      	cmp	r3, #9
 800876e:	d010      	beq.n	8008792 <UART_SetConfig+0x1cca>
 8008770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	2b0a      	cmp	r3, #10
 8008778:	d009      	beq.n	800878e <UART_SetConfig+0x1cc6>
 800877a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b0b      	cmp	r3, #11
 8008782:	d102      	bne.n	800878a <UART_SetConfig+0x1cc2>
 8008784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008788:	e016      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 800878a:	2301      	movs	r3, #1
 800878c:	e014      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 800878e:	2380      	movs	r3, #128	; 0x80
 8008790:	e012      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	e010      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 8008796:	2320      	movs	r3, #32
 8008798:	e00e      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 800879a:	2310      	movs	r3, #16
 800879c:	e00c      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 800879e:	230c      	movs	r3, #12
 80087a0:	e00a      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087a2:	230a      	movs	r3, #10
 80087a4:	e008      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087a6:	2308      	movs	r3, #8
 80087a8:	e006      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087aa:	2306      	movs	r3, #6
 80087ac:	e004      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087ae:	2304      	movs	r3, #4
 80087b0:	e002      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e000      	b.n	80087b8 <UART_SetConfig+0x1cf0>
 80087b6:	2301      	movs	r3, #1
 80087b8:	4a3d      	ldr	r2, [pc, #244]	; (80088b0 <UART_SetConfig+0x1de8>)
 80087ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80087be:	005a      	lsls	r2, r3, #1
 80087c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	441a      	add	r2, r3
 80087ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 80087da:	e0da      	b.n	8008992 <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d04f      	beq.n	8008886 <UART_SetConfig+0x1dbe>
 80087e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d048      	beq.n	8008882 <UART_SetConfig+0x1dba>
 80087f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d041      	beq.n	800887e <UART_SetConfig+0x1db6>
 80087fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b03      	cmp	r3, #3
 8008802:	d03a      	beq.n	800887a <UART_SetConfig+0x1db2>
 8008804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b04      	cmp	r3, #4
 800880c:	d033      	beq.n	8008876 <UART_SetConfig+0x1dae>
 800880e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	2b05      	cmp	r3, #5
 8008816:	d02c      	beq.n	8008872 <UART_SetConfig+0x1daa>
 8008818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b06      	cmp	r3, #6
 8008820:	d025      	beq.n	800886e <UART_SetConfig+0x1da6>
 8008822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b07      	cmp	r3, #7
 800882a:	d01e      	beq.n	800886a <UART_SetConfig+0x1da2>
 800882c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	2b08      	cmp	r3, #8
 8008834:	d017      	beq.n	8008866 <UART_SetConfig+0x1d9e>
 8008836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	2b09      	cmp	r3, #9
 800883e:	d010      	beq.n	8008862 <UART_SetConfig+0x1d9a>
 8008840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b0a      	cmp	r3, #10
 8008848:	d009      	beq.n	800885e <UART_SetConfig+0x1d96>
 800884a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b0b      	cmp	r3, #11
 8008852:	d102      	bne.n	800885a <UART_SetConfig+0x1d92>
 8008854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008858:	e016      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800885a:	2301      	movs	r3, #1
 800885c:	e014      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	e012      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008862:	2340      	movs	r3, #64	; 0x40
 8008864:	e010      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008866:	2320      	movs	r3, #32
 8008868:	e00e      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800886a:	2310      	movs	r3, #16
 800886c:	e00c      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800886e:	230c      	movs	r3, #12
 8008870:	e00a      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008872:	230a      	movs	r3, #10
 8008874:	e008      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008876:	2308      	movs	r3, #8
 8008878:	e006      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800887a:	2306      	movs	r3, #6
 800887c:	e004      	b.n	8008888 <UART_SetConfig+0x1dc0>
 800887e:	2304      	movs	r3, #4
 8008880:	e002      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008882:	2302      	movs	r3, #2
 8008884:	e000      	b.n	8008888 <UART_SetConfig+0x1dc0>
 8008886:	2301      	movs	r3, #1
 8008888:	4a0a      	ldr	r2, [pc, #40]	; (80088b4 <UART_SetConfig+0x1dec>)
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	005a      	lsls	r2, r3, #1
 8008890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	441a      	add	r2, r3
 800889a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 80088aa:	e072      	b.n	8008992 <UART_SetConfig+0x1eca>
 80088ac:	58024400 	.word	0x58024400
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04f      	beq.n	8008962 <UART_SetConfig+0x1e9a>
 80088c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d048      	beq.n	800895e <UART_SetConfig+0x1e96>
 80088cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d041      	beq.n	800895a <UART_SetConfig+0x1e92>
 80088d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d03a      	beq.n	8008956 <UART_SetConfig+0x1e8e>
 80088e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d033      	beq.n	8008952 <UART_SetConfig+0x1e8a>
 80088ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b05      	cmp	r3, #5
 80088f2:	d02c      	beq.n	800894e <UART_SetConfig+0x1e86>
 80088f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d025      	beq.n	800894a <UART_SetConfig+0x1e82>
 80088fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b07      	cmp	r3, #7
 8008906:	d01e      	beq.n	8008946 <UART_SetConfig+0x1e7e>
 8008908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b08      	cmp	r3, #8
 8008910:	d017      	beq.n	8008942 <UART_SetConfig+0x1e7a>
 8008912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b09      	cmp	r3, #9
 800891a:	d010      	beq.n	800893e <UART_SetConfig+0x1e76>
 800891c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	2b0a      	cmp	r3, #10
 8008924:	d009      	beq.n	800893a <UART_SetConfig+0x1e72>
 8008926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b0b      	cmp	r3, #11
 800892e:	d102      	bne.n	8008936 <UART_SetConfig+0x1e6e>
 8008930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008934:	e016      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008936:	2301      	movs	r3, #1
 8008938:	e014      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	e012      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	e010      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008942:	2320      	movs	r3, #32
 8008944:	e00e      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008946:	2310      	movs	r3, #16
 8008948:	e00c      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800894a:	230c      	movs	r3, #12
 800894c:	e00a      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800894e:	230a      	movs	r3, #10
 8008950:	e008      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008952:	2308      	movs	r3, #8
 8008954:	e006      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008956:	2306      	movs	r3, #6
 8008958:	e004      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800895a:	2304      	movs	r3, #4
 800895c:	e002      	b.n	8008964 <UART_SetConfig+0x1e9c>
 800895e:	2302      	movs	r3, #2
 8008960:	e000      	b.n	8008964 <UART_SetConfig+0x1e9c>
 8008962:	2301      	movs	r3, #1
 8008964:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008968:	fbb2 f3f3 	udiv	r3, r2, r3
 800896c:	005a      	lsls	r2, r3, #1
 800896e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	441a      	add	r2, r3
 8008978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008982:	b29b      	uxth	r3, r3
 8008984:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008988:	e003      	b.n	8008992 <UART_SetConfig+0x1eca>
      default:
        ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008996:	2b0f      	cmp	r3, #15
 8008998:	d91e      	bls.n	80089d8 <UART_SetConfig+0x1f10>
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a2:	d219      	bcs.n	80089d8 <UART_SetConfig+0x1f10>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f023 030f 	bic.w	r3, r3, #15
 80089ae:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      huart->Instance->BRR = brrtemp;
 80089ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	e3d0      	b.n	800917a <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80089de:	e3cc      	b.n	800917a <UART_SetConfig+0x26b2>
    }
  }
  else
  {
    switch (clocksource)
 80089e0:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	dc4b      	bgt.n	8008a80 <UART_SetConfig+0x1fb8>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f2c0 83af 	blt.w	800914c <UART_SetConfig+0x2684>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	f200 83ac 	bhi.w	800914c <UART_SetConfig+0x2684>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x1f34>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a89 	.word	0x08008a89
 8008a00:	08008b61 	.word	0x08008b61
 8008a04:	0800914d 	.word	0x0800914d
 8008a08:	0800914d 	.word	0x0800914d
 8008a0c:	08008c39 	.word	0x08008c39
 8008a10:	0800914d 	.word	0x0800914d
 8008a14:	0800914d 	.word	0x0800914d
 8008a18:	0800914d 	.word	0x0800914d
 8008a1c:	08008d13 	.word	0x08008d13
 8008a20:	0800914d 	.word	0x0800914d
 8008a24:	0800914d 	.word	0x0800914d
 8008a28:	0800914d 	.word	0x0800914d
 8008a2c:	0800914d 	.word	0x0800914d
 8008a30:	0800914d 	.word	0x0800914d
 8008a34:	0800914d 	.word	0x0800914d
 8008a38:	0800914d 	.word	0x0800914d
 8008a3c:	08008ded 	.word	0x08008ded
 8008a40:	0800914d 	.word	0x0800914d
 8008a44:	0800914d 	.word	0x0800914d
 8008a48:	0800914d 	.word	0x0800914d
 8008a4c:	0800914d 	.word	0x0800914d
 8008a50:	0800914d 	.word	0x0800914d
 8008a54:	0800914d 	.word	0x0800914d
 8008a58:	0800914d 	.word	0x0800914d
 8008a5c:	0800914d 	.word	0x0800914d
 8008a60:	0800914d 	.word	0x0800914d
 8008a64:	0800914d 	.word	0x0800914d
 8008a68:	0800914d 	.word	0x0800914d
 8008a6c:	0800914d 	.word	0x0800914d
 8008a70:	0800914d 	.word	0x0800914d
 8008a74:	0800914d 	.word	0x0800914d
 8008a78:	0800914d 	.word	0x0800914d
 8008a7c:	08008fa1 	.word	0x08008fa1
 8008a80:	2b40      	cmp	r3, #64	; 0x40
 8008a82:	f000 82fb 	beq.w	800907c <UART_SetConfig+0x25b4>
 8008a86:	e361      	b.n	800914c <UART_SetConfig+0x2684>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fc f902 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8008a8c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d04f      	beq.n	8008b3a <UART_SetConfig+0x2072>
 8008a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d048      	beq.n	8008b36 <UART_SetConfig+0x206e>
 8008aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d041      	beq.n	8008b32 <UART_SetConfig+0x206a>
 8008aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d03a      	beq.n	8008b2e <UART_SetConfig+0x2066>
 8008ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d033      	beq.n	8008b2a <UART_SetConfig+0x2062>
 8008ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	2b05      	cmp	r3, #5
 8008aca:	d02c      	beq.n	8008b26 <UART_SetConfig+0x205e>
 8008acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	d025      	beq.n	8008b22 <UART_SetConfig+0x205a>
 8008ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	d01e      	beq.n	8008b1e <UART_SetConfig+0x2056>
 8008ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	d017      	beq.n	8008b1a <UART_SetConfig+0x2052>
 8008aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d010      	beq.n	8008b16 <UART_SetConfig+0x204e>
 8008af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	2b0a      	cmp	r3, #10
 8008afc:	d009      	beq.n	8008b12 <UART_SetConfig+0x204a>
 8008afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b0b      	cmp	r3, #11
 8008b06:	d102      	bne.n	8008b0e <UART_SetConfig+0x2046>
 8008b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b0c:	e016      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e014      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	e012      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b16:	2340      	movs	r3, #64	; 0x40
 8008b18:	e010      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	e00e      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b1e:	2310      	movs	r3, #16
 8008b20:	e00c      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b22:	230c      	movs	r3, #12
 8008b24:	e00a      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b26:	230a      	movs	r3, #10
 8008b28:	e008      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	e006      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b2e:	2306      	movs	r3, #6
 8008b30:	e004      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b32:	2304      	movs	r3, #4
 8008b34:	e002      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e000      	b.n	8008b3c <UART_SetConfig+0x2074>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	085b      	lsrs	r3, r3, #1
 8008b4c:	441a      	add	r2, r3
 8008b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008b5e:	e2f9      	b.n	8009154 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b60:	f7fc f8ac 	bl	8004cbc <HAL_RCC_GetPCLK2Freq>
 8008b64:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d04f      	beq.n	8008c12 <UART_SetConfig+0x214a>
 8008b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d048      	beq.n	8008c0e <UART_SetConfig+0x2146>
 8008b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d041      	beq.n	8008c0a <UART_SetConfig+0x2142>
 8008b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d03a      	beq.n	8008c06 <UART_SetConfig+0x213e>
 8008b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d033      	beq.n	8008c02 <UART_SetConfig+0x213a>
 8008b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	d02c      	beq.n	8008bfe <UART_SetConfig+0x2136>
 8008ba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d025      	beq.n	8008bfa <UART_SetConfig+0x2132>
 8008bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	2b07      	cmp	r3, #7
 8008bb6:	d01e      	beq.n	8008bf6 <UART_SetConfig+0x212e>
 8008bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d017      	beq.n	8008bf2 <UART_SetConfig+0x212a>
 8008bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b09      	cmp	r3, #9
 8008bca:	d010      	beq.n	8008bee <UART_SetConfig+0x2126>
 8008bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2b0a      	cmp	r3, #10
 8008bd4:	d009      	beq.n	8008bea <UART_SetConfig+0x2122>
 8008bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b0b      	cmp	r3, #11
 8008bde:	d102      	bne.n	8008be6 <UART_SetConfig+0x211e>
 8008be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be4:	e016      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e014      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bea:	2380      	movs	r3, #128	; 0x80
 8008bec:	e012      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bee:	2340      	movs	r3, #64	; 0x40
 8008bf0:	e010      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	e00e      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	e00c      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	e00a      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008bfe:	230a      	movs	r3, #10
 8008c00:	e008      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008c02:	2308      	movs	r3, #8
 8008c04:	e006      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008c06:	2306      	movs	r3, #6
 8008c08:	e004      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008c0a:	2304      	movs	r3, #4
 8008c0c:	e002      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e000      	b.n	8008c14 <UART_SetConfig+0x214c>
 8008c12:	2301      	movs	r3, #1
 8008c14:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	441a      	add	r2, r3
 8008c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008c36:	e28d      	b.n	8009154 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c38:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fc ffd1 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d04f      	beq.n	8008cf0 <UART_SetConfig+0x2228>
 8008c50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d048      	beq.n	8008cec <UART_SetConfig+0x2224>
 8008c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d041      	beq.n	8008ce8 <UART_SetConfig+0x2220>
 8008c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d03a      	beq.n	8008ce4 <UART_SetConfig+0x221c>
 8008c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d033      	beq.n	8008ce0 <UART_SetConfig+0x2218>
 8008c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d02c      	beq.n	8008cdc <UART_SetConfig+0x2214>
 8008c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	2b06      	cmp	r3, #6
 8008c8a:	d025      	beq.n	8008cd8 <UART_SetConfig+0x2210>
 8008c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	d01e      	beq.n	8008cd4 <UART_SetConfig+0x220c>
 8008c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d017      	beq.n	8008cd0 <UART_SetConfig+0x2208>
 8008ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b09      	cmp	r3, #9
 8008ca8:	d010      	beq.n	8008ccc <UART_SetConfig+0x2204>
 8008caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b0a      	cmp	r3, #10
 8008cb2:	d009      	beq.n	8008cc8 <UART_SetConfig+0x2200>
 8008cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b0b      	cmp	r3, #11
 8008cbc:	d102      	bne.n	8008cc4 <UART_SetConfig+0x21fc>
 8008cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc2:	e016      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e014      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	e012      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	e010      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	e00e      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	e00c      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	e00a      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cdc:	230a      	movs	r3, #10
 8008cde:	e008      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	e006      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008ce4:	2306      	movs	r3, #6
 8008ce6:	e004      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	e002      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e000      	b.n	8008cf2 <UART_SetConfig+0x222a>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	085b      	lsrs	r3, r3, #1
 8008cfe:	441a      	add	r2, r3
 8008d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008d10:	e220      	b.n	8009154 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d12:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fd f8b8 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d04f      	beq.n	8008dca <UART_SetConfig+0x2302>
 8008d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d048      	beq.n	8008dc6 <UART_SetConfig+0x22fe>
 8008d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d041      	beq.n	8008dc2 <UART_SetConfig+0x22fa>
 8008d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d03a      	beq.n	8008dbe <UART_SetConfig+0x22f6>
 8008d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d033      	beq.n	8008dba <UART_SetConfig+0x22f2>
 8008d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b05      	cmp	r3, #5
 8008d5a:	d02c      	beq.n	8008db6 <UART_SetConfig+0x22ee>
 8008d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d025      	beq.n	8008db2 <UART_SetConfig+0x22ea>
 8008d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	2b07      	cmp	r3, #7
 8008d6e:	d01e      	beq.n	8008dae <UART_SetConfig+0x22e6>
 8008d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d017      	beq.n	8008daa <UART_SetConfig+0x22e2>
 8008d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2b09      	cmp	r3, #9
 8008d82:	d010      	beq.n	8008da6 <UART_SetConfig+0x22de>
 8008d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b0a      	cmp	r3, #10
 8008d8c:	d009      	beq.n	8008da2 <UART_SetConfig+0x22da>
 8008d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b0b      	cmp	r3, #11
 8008d96:	d102      	bne.n	8008d9e <UART_SetConfig+0x22d6>
 8008d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9c:	e016      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e014      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008da2:	2380      	movs	r3, #128	; 0x80
 8008da4:	e012      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008da6:	2340      	movs	r3, #64	; 0x40
 8008da8:	e010      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008daa:	2320      	movs	r3, #32
 8008dac:	e00e      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dae:	2310      	movs	r3, #16
 8008db0:	e00c      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008db2:	230c      	movs	r3, #12
 8008db4:	e00a      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008db6:	230a      	movs	r3, #10
 8008db8:	e008      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dba:	2308      	movs	r3, #8
 8008dbc:	e006      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dbe:	2306      	movs	r3, #6
 8008dc0:	e004      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	e002      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e000      	b.n	8008dcc <UART_SetConfig+0x2304>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	441a      	add	r2, r3
 8008dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008dea:	e1b3      	b.n	8009154 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dec:	4ba0      	ldr	r3, [pc, #640]	; (8009070 <UART_SetConfig+0x25a8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d06c      	beq.n	8008ed2 <UART_SetConfig+0x240a>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df8:	4b9d      	ldr	r3, [pc, #628]	; (8009070 <UART_SetConfig+0x25a8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	08db      	lsrs	r3, r3, #3
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	4a9c      	ldr	r2, [pc, #624]	; (8009074 <UART_SetConfig+0x25ac>)
 8008e04:	40da      	lsrs	r2, r3
 8008e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d04f      	beq.n	8008eb0 <UART_SetConfig+0x23e8>
 8008e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d048      	beq.n	8008eac <UART_SetConfig+0x23e4>
 8008e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d041      	beq.n	8008ea8 <UART_SetConfig+0x23e0>
 8008e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d03a      	beq.n	8008ea4 <UART_SetConfig+0x23dc>
 8008e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d033      	beq.n	8008ea0 <UART_SetConfig+0x23d8>
 8008e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d02c      	beq.n	8008e9c <UART_SetConfig+0x23d4>
 8008e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b06      	cmp	r3, #6
 8008e4a:	d025      	beq.n	8008e98 <UART_SetConfig+0x23d0>
 8008e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	2b07      	cmp	r3, #7
 8008e54:	d01e      	beq.n	8008e94 <UART_SetConfig+0x23cc>
 8008e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d017      	beq.n	8008e90 <UART_SetConfig+0x23c8>
 8008e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b09      	cmp	r3, #9
 8008e68:	d010      	beq.n	8008e8c <UART_SetConfig+0x23c4>
 8008e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b0a      	cmp	r3, #10
 8008e72:	d009      	beq.n	8008e88 <UART_SetConfig+0x23c0>
 8008e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2b0b      	cmp	r3, #11
 8008e7c:	d102      	bne.n	8008e84 <UART_SetConfig+0x23bc>
 8008e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e82:	e016      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e014      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e88:	2380      	movs	r3, #128	; 0x80
 8008e8a:	e012      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e8c:	2340      	movs	r3, #64	; 0x40
 8008e8e:	e010      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e90:	2320      	movs	r3, #32
 8008e92:	e00e      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e94:	2310      	movs	r3, #16
 8008e96:	e00c      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	e00a      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008e9c:	230a      	movs	r3, #10
 8008e9e:	e008      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	e006      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008ea4:	2306      	movs	r3, #6
 8008ea6:	e004      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	e002      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e000      	b.n	8008eb2 <UART_SetConfig+0x23ea>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	085b      	lsrs	r3, r3, #1
 8008ebe:	441a      	add	r2, r3
 8008ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008ed0:	e140      	b.n	8009154 <UART_SetConfig+0x268c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d04f      	beq.n	8008f7c <UART_SetConfig+0x24b4>
 8008edc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d048      	beq.n	8008f78 <UART_SetConfig+0x24b0>
 8008ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d041      	beq.n	8008f74 <UART_SetConfig+0x24ac>
 8008ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d03a      	beq.n	8008f70 <UART_SetConfig+0x24a8>
 8008efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d033      	beq.n	8008f6c <UART_SetConfig+0x24a4>
 8008f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d02c      	beq.n	8008f68 <UART_SetConfig+0x24a0>
 8008f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d025      	beq.n	8008f64 <UART_SetConfig+0x249c>
 8008f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	d01e      	beq.n	8008f60 <UART_SetConfig+0x2498>
 8008f22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d017      	beq.n	8008f5c <UART_SetConfig+0x2494>
 8008f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d010      	beq.n	8008f58 <UART_SetConfig+0x2490>
 8008f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b0a      	cmp	r3, #10
 8008f3e:	d009      	beq.n	8008f54 <UART_SetConfig+0x248c>
 8008f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	2b0b      	cmp	r3, #11
 8008f48:	d102      	bne.n	8008f50 <UART_SetConfig+0x2488>
 8008f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f4e:	e016      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e014      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f54:	2380      	movs	r3, #128	; 0x80
 8008f56:	e012      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	e010      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	e00e      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f60:	2310      	movs	r3, #16
 8008f62:	e00c      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f64:	230c      	movs	r3, #12
 8008f66:	e00a      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f68:	230a      	movs	r3, #10
 8008f6a:	e008      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	e006      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f70:	2306      	movs	r3, #6
 8008f72:	e004      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f74:	2304      	movs	r3, #4
 8008f76:	e002      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e000      	b.n	8008f7e <UART_SetConfig+0x24b6>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4a3d      	ldr	r2, [pc, #244]	; (8009074 <UART_SetConfig+0x25ac>)
 8008f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	441a      	add	r2, r3
 8008f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 8008f9e:	e0d9      	b.n	8009154 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d04f      	beq.n	800904a <UART_SetConfig+0x2582>
 8008faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d048      	beq.n	8009046 <UART_SetConfig+0x257e>
 8008fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d041      	beq.n	8009042 <UART_SetConfig+0x257a>
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d03a      	beq.n	800903e <UART_SetConfig+0x2576>
 8008fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d033      	beq.n	800903a <UART_SetConfig+0x2572>
 8008fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	d02c      	beq.n	8009036 <UART_SetConfig+0x256e>
 8008fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	2b06      	cmp	r3, #6
 8008fe4:	d025      	beq.n	8009032 <UART_SetConfig+0x256a>
 8008fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	2b07      	cmp	r3, #7
 8008fee:	d01e      	beq.n	800902e <UART_SetConfig+0x2566>
 8008ff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d017      	beq.n	800902a <UART_SetConfig+0x2562>
 8008ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b09      	cmp	r3, #9
 8009002:	d010      	beq.n	8009026 <UART_SetConfig+0x255e>
 8009004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	2b0a      	cmp	r3, #10
 800900c:	d009      	beq.n	8009022 <UART_SetConfig+0x255a>
 800900e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	2b0b      	cmp	r3, #11
 8009016:	d102      	bne.n	800901e <UART_SetConfig+0x2556>
 8009018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800901c:	e016      	b.n	800904c <UART_SetConfig+0x2584>
 800901e:	2301      	movs	r3, #1
 8009020:	e014      	b.n	800904c <UART_SetConfig+0x2584>
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	e012      	b.n	800904c <UART_SetConfig+0x2584>
 8009026:	2340      	movs	r3, #64	; 0x40
 8009028:	e010      	b.n	800904c <UART_SetConfig+0x2584>
 800902a:	2320      	movs	r3, #32
 800902c:	e00e      	b.n	800904c <UART_SetConfig+0x2584>
 800902e:	2310      	movs	r3, #16
 8009030:	e00c      	b.n	800904c <UART_SetConfig+0x2584>
 8009032:	230c      	movs	r3, #12
 8009034:	e00a      	b.n	800904c <UART_SetConfig+0x2584>
 8009036:	230a      	movs	r3, #10
 8009038:	e008      	b.n	800904c <UART_SetConfig+0x2584>
 800903a:	2308      	movs	r3, #8
 800903c:	e006      	b.n	800904c <UART_SetConfig+0x2584>
 800903e:	2306      	movs	r3, #6
 8009040:	e004      	b.n	800904c <UART_SetConfig+0x2584>
 8009042:	2304      	movs	r3, #4
 8009044:	e002      	b.n	800904c <UART_SetConfig+0x2584>
 8009046:	2302      	movs	r3, #2
 8009048:	e000      	b.n	800904c <UART_SetConfig+0x2584>
 800904a:	2301      	movs	r3, #1
 800904c:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <UART_SetConfig+0x25b0>)
 800904e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	085b      	lsrs	r3, r3, #1
 800905a:	441a      	add	r2, r3
 800905c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	fbb2 f3f3 	udiv	r3, r2, r3
 8009066:	b29b      	uxth	r3, r3
 8009068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800906c:	e072      	b.n	8009154 <UART_SetConfig+0x268c>
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04f      	beq.n	8009126 <UART_SetConfig+0x265e>
 8009086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	2b01      	cmp	r3, #1
 800908e:	d048      	beq.n	8009122 <UART_SetConfig+0x265a>
 8009090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b02      	cmp	r3, #2
 8009098:	d041      	beq.n	800911e <UART_SetConfig+0x2656>
 800909a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d03a      	beq.n	800911a <UART_SetConfig+0x2652>
 80090a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d033      	beq.n	8009116 <UART_SetConfig+0x264e>
 80090ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	2b05      	cmp	r3, #5
 80090b6:	d02c      	beq.n	8009112 <UART_SetConfig+0x264a>
 80090b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b06      	cmp	r3, #6
 80090c0:	d025      	beq.n	800910e <UART_SetConfig+0x2646>
 80090c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b07      	cmp	r3, #7
 80090ca:	d01e      	beq.n	800910a <UART_SetConfig+0x2642>
 80090cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	d017      	beq.n	8009106 <UART_SetConfig+0x263e>
 80090d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d010      	beq.n	8009102 <UART_SetConfig+0x263a>
 80090e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2b0a      	cmp	r3, #10
 80090e8:	d009      	beq.n	80090fe <UART_SetConfig+0x2636>
 80090ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	2b0b      	cmp	r3, #11
 80090f2:	d102      	bne.n	80090fa <UART_SetConfig+0x2632>
 80090f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090f8:	e016      	b.n	8009128 <UART_SetConfig+0x2660>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e014      	b.n	8009128 <UART_SetConfig+0x2660>
 80090fe:	2380      	movs	r3, #128	; 0x80
 8009100:	e012      	b.n	8009128 <UART_SetConfig+0x2660>
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	e010      	b.n	8009128 <UART_SetConfig+0x2660>
 8009106:	2320      	movs	r3, #32
 8009108:	e00e      	b.n	8009128 <UART_SetConfig+0x2660>
 800910a:	2310      	movs	r3, #16
 800910c:	e00c      	b.n	8009128 <UART_SetConfig+0x2660>
 800910e:	230c      	movs	r3, #12
 8009110:	e00a      	b.n	8009128 <UART_SetConfig+0x2660>
 8009112:	230a      	movs	r3, #10
 8009114:	e008      	b.n	8009128 <UART_SetConfig+0x2660>
 8009116:	2308      	movs	r3, #8
 8009118:	e006      	b.n	8009128 <UART_SetConfig+0x2660>
 800911a:	2306      	movs	r3, #6
 800911c:	e004      	b.n	8009128 <UART_SetConfig+0x2660>
 800911e:	2304      	movs	r3, #4
 8009120:	e002      	b.n	8009128 <UART_SetConfig+0x2660>
 8009122:	2302      	movs	r3, #2
 8009124:	e000      	b.n	8009128 <UART_SetConfig+0x2660>
 8009126:	2301      	movs	r3, #1
 8009128:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800912c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	441a      	add	r2, r3
 800913a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	fbb2 f3f3 	udiv	r3, r2, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        break;
 800914a:	e003      	b.n	8009154 <UART_SetConfig+0x268c>
      default:
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009152:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009158:	2b0f      	cmp	r3, #15
 800915a:	d90b      	bls.n	8009174 <UART_SetConfig+0x26ac>
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009164:	d206      	bcs.n	8009174 <UART_SetConfig+0x26ac>
    {
      huart->Instance->BRR = usartdiv;
 8009166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e002      	b.n	800917a <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800917a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800917e:	2201      	movs	r2, #1
 8009180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009188:	2201      	movs	r2, #1
 800918a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800918e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009192:	2200      	movs	r2, #0
 8009194:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800919a:	2200      	movs	r2, #0
 800919c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800919e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	37f0      	adds	r7, #240	; 0xf0
 80091a6:	46bd      	mov	sp, r7
 80091a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092aa:	d10a      	bne.n	80092c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009300:	f7f8 fad0 	bl	80018a4 <HAL_GetTick>
 8009304:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b08      	cmp	r3, #8
 8009312:	d10e      	bne.n	8009332 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f82c 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e022      	b.n	8009378 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b04      	cmp	r3, #4
 800933e:	d10e      	bne.n	800935e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f816 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e00c      	b.n	8009378 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	4613      	mov	r3, r2
 800938e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009390:	e062      	b.n	8009458 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d05e      	beq.n	8009458 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800939a:	f7f8 fa83 	bl	80018a4 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d302      	bcc.n	80093b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d11d      	bne.n	80093ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0201 	bic.w	r2, r2, #1
 80093ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e045      	b.n	8009478 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d02e      	beq.n	8009458 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009408:	d126      	bne.n	8009458 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009412:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009422:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e00f      	b.n	8009478 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69da      	ldr	r2, [r3, #28]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	4013      	ands	r3, r2
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	429a      	cmp	r2, r3
 8009466:	bf0c      	ite	eq
 8009468:	2301      	moveq	r3, #1
 800946a:	2300      	movne	r3, #0
 800946c:	b2db      	uxtb	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	429a      	cmp	r2, r3
 8009474:	d08d      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800948e:	2b01      	cmp	r3, #1
 8009490:	d101      	bne.n	8009496 <HAL_UARTEx_DisableFifoMode+0x16>
 8009492:	2302      	movs	r3, #2
 8009494:	e027      	b.n	80094e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2224      	movs	r2, #36	; 0x24
 80094a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0201 	bic.w	r2, r2, #1
 80094bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009506:	2302      	movs	r3, #2
 8009508:	e02d      	b.n	8009566 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2224      	movs	r2, #36	; 0x24
 8009516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0201 	bic.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f850 	bl	80095ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009582:	2302      	movs	r3, #2
 8009584:	e02d      	b.n	80095e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2224      	movs	r2, #36	; 0x24
 8009592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0201 	bic.w	r2, r2, #1
 80095ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f812 	bl	80095ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80095f4:	4a2d      	ldr	r2, [pc, #180]	; (80096ac <UARTEx_SetNbDataToProcess+0xc0>)
 80095f6:	f107 0314 	add.w	r3, r7, #20
 80095fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009602:	4a2b      	ldr	r2, [pc, #172]	; (80096b0 <UARTEx_SetNbDataToProcess+0xc4>)
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800960c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009614:	2b00      	cmp	r3, #0
 8009616:	d108      	bne.n	800962a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009628:	e039      	b.n	800969e <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800962a:	2308      	movs	r3, #8
 800962c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800962e:	2308      	movs	r3, #8
 8009630:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	0e5b      	lsrs	r3, r3, #25
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	0f5b      	lsrs	r3, r3, #29
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 0307 	and.w	r3, r3, #7
 8009650:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009652:	7fbb      	ldrb	r3, [r7, #30]
 8009654:	7f3a      	ldrb	r2, [r7, #28]
 8009656:	3220      	adds	r2, #32
 8009658:	443a      	add	r2, r7
 800965a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800965e:	fb02 f303 	mul.w	r3, r2, r3
 8009662:	7f3a      	ldrb	r2, [r7, #28]
 8009664:	3220      	adds	r2, #32
 8009666:	443a      	add	r2, r7
 8009668:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800966c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009678:	7ffb      	ldrb	r3, [r7, #31]
 800967a:	7f7a      	ldrb	r2, [r7, #29]
 800967c:	3220      	adds	r2, #32
 800967e:	443a      	add	r2, r7
 8009680:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	7f7a      	ldrb	r2, [r7, #29]
 800968a:	3220      	adds	r2, #32
 800968c:	443a      	add	r2, r7
 800968e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009692:	fb93 f3f2 	sdiv	r3, r3, r2
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800969e:	bf00      	nop
 80096a0:	3724      	adds	r7, #36	; 0x24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	0801bfc8 	.word	0x0801bfc8
 80096b0:	0801bfd0 	.word	0x0801bfd0

080096b4 <ethernet_status_callback>:
ip4_addr_t gw;

/* USER CODE BEGIN 2 */

void ethernet_status_callback(struct netif *netif)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b094      	sub	sp, #80	; 0x50
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	uint8_t msg[48];
	size_t msg_len;

	if (netif_is_up(netif))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d012      	beq.n	80096f2 <ethernet_status_callback+0x3e>
	{
		uint8_t msg_ip[20];
		ipaddr_ntoa_r(&netif->ip_addr, (char* )msg_ip, 20);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3304      	adds	r3, #4
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	2214      	movs	r2, #20
 80096d6:	4618      	mov	r0, r3
 80096d8:	f010 f824 	bl	8019724 <ip4addr_ntoa_r>
		msg_len = sprintf((char*) msg, "STATUS connected @ %s\r\n", (char*) msg_ip);
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	f107 031c 	add.w	r3, r7, #28
 80096e4:	4911      	ldr	r1, [pc, #68]	; (800972c <ethernet_status_callback+0x78>)
 80096e6:	4618      	mov	r0, r3
 80096e8:	f011 f9e2 	bl	801aab0 <siprintf>
 80096ec:	4603      	mov	r3, r0
 80096ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096f0:	e00e      	b.n	8009710 <ethernet_status_callback+0x5c>
	}
	else
	{
		 msg_len = sprintf((char *)msg, "STATUS down @ %lu\r\n", HAL_GetTick()/1000);
 80096f2:	f7f8 f8d7 	bl	80018a4 <HAL_GetTick>
 80096f6:	4603      	mov	r3, r0
 80096f8:	4a0d      	ldr	r2, [pc, #52]	; (8009730 <ethernet_status_callback+0x7c>)
 80096fa:	fba2 2303 	umull	r2, r3, r2, r3
 80096fe:	099a      	lsrs	r2, r3, #6
 8009700:	f107 031c 	add.w	r3, r7, #28
 8009704:	490b      	ldr	r1, [pc, #44]	; (8009734 <ethernet_status_callback+0x80>)
 8009706:	4618      	mov	r0, r3
 8009708:	f011 f9d2 	bl	801aab0 <siprintf>
 800970c:	4603      	mov	r3, r0
 800970e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	HAL_UART_Transmit(&huart3, msg, msg_len, HAL_MAX_DELAY);
 8009710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009712:	b29a      	uxth	r2, r3
 8009714:	f107 011c 	add.w	r1, r7, #28
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	4806      	ldr	r0, [pc, #24]	; (8009738 <ethernet_status_callback+0x84>)
 800971e:	f7fd f93d 	bl	800699c <HAL_UART_Transmit>
}
 8009722:	bf00      	nop
 8009724:	3750      	adds	r7, #80	; 0x50
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	0801bfe0 	.word	0x0801bfe0
 8009730:	10624dd3 	.word	0x10624dd3
 8009734:	0801bff8 	.word	0x0801bff8
 8009738:	24000598 	.word	0x24000598

0800973c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800973c:	b5b0      	push	{r4, r5, r7, lr}
 800973e:	b08c      	sub	sp, #48	; 0x30
 8009740:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009742:	2100      	movs	r1, #0
 8009744:	2000      	movs	r0, #0
 8009746:	f005 fea5 	bl	800f494 <tcpip_init>

  /* Set static IP addresses */
  IP4_ADDR(&ipaddr, 192, 168, 1, 3);
 800974a:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <MX_LWIP_Init+0x80>)
 800974c:	4a1c      	ldr	r2, [pc, #112]	; (80097c0 <MX_LWIP_Init+0x84>)
 800974e:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask, 255, 255, 255, 0);
 8009750:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <MX_LWIP_Init+0x88>)
 8009752:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009756:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw, 192, 168, 1, 1);
 8009758:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <MX_LWIP_Init+0x8c>)
 800975a:	4a1c      	ldr	r2, [pc, #112]	; (80097cc <MX_LWIP_Init+0x90>)
 800975c:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800975e:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <MX_LWIP_Init+0x94>)
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <MX_LWIP_Init+0x98>)
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2300      	movs	r3, #0
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4b17      	ldr	r3, [pc, #92]	; (80097c8 <MX_LWIP_Init+0x8c>)
 800976c:	4a15      	ldr	r2, [pc, #84]	; (80097c4 <MX_LWIP_Init+0x88>)
 800976e:	4913      	ldr	r1, [pc, #76]	; (80097bc <MX_LWIP_Init+0x80>)
 8009770:	4819      	ldr	r0, [pc, #100]	; (80097d8 <MX_LWIP_Init+0x9c>)
 8009772:	f006 fb8d 	bl	800fe90 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009776:	4818      	ldr	r0, [pc, #96]	; (80097d8 <MX_LWIP_Init+0x9c>)
 8009778:	f006 fc80 	bl	801007c <netif_set_default>

  /* Set the network interface up */
  netif_set_up(&gnetif);
 800977c:	4816      	ldr	r0, [pc, #88]	; (80097d8 <MX_LWIP_Init+0x9c>)
 800977e:	f006 fc8d 	bl	801009c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status */
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009782:	4916      	ldr	r1, [pc, #88]	; (80097dc <MX_LWIP_Init+0xa0>)
 8009784:	4814      	ldr	r0, [pc, #80]	; (80097d8 <MX_LWIP_Init+0x9c>)
 8009786:	f006 fd5e 	bl	8010246 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <MX_LWIP_Init+0xa4>)
 800978c:	1d3c      	adds	r4, r7, #4
 800978e:	461d      	mov	r5, r3
 8009790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(EthLink), &gnetif);
 800979c:	1d3b      	adds	r3, r7, #4
 800979e:	490e      	ldr	r1, [pc, #56]	; (80097d8 <MX_LWIP_Init+0x9c>)
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fd10 	bl	800a1c6 <osThreadCreate>

  /* Add status callback for future status updates */
  netif_set_status_callback(&gnetif, ethernet_status_callback);
 80097a6:	490f      	ldr	r1, [pc, #60]	; (80097e4 <MX_LWIP_Init+0xa8>)
 80097a8:	480b      	ldr	r0, [pc, #44]	; (80097d8 <MX_LWIP_Init+0x9c>)
 80097aa:	f006 fced 	bl	8010188 <netif_set_status_callback>

  // Check the link status initially
  ethernet_link_status_updated(&gnetif);
 80097ae:	480a      	ldr	r0, [pc, #40]	; (80097d8 <MX_LWIP_Init+0x9c>)
 80097b0:	f000 f81a 	bl	80097e8 <ethernet_link_status_updated>
}
 80097b4:	bf00      	nop
 80097b6:	3720      	adds	r7, #32
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bdb0      	pop	{r4, r5, r7, pc}
 80097bc:	24000664 	.word	0x24000664
 80097c0:	0301a8c0 	.word	0x0301a8c0
 80097c4:	24000668 	.word	0x24000668
 80097c8:	2400066c 	.word	0x2400066c
 80097cc:	0101a8c0 	.word	0x0101a8c0
 80097d0:	0800f361 	.word	0x0800f361
 80097d4:	08009f01 	.word	0x08009f01
 80097d8:	24000628 	.word	0x24000628
 80097dc:	080097e9 	.word	0x080097e9
 80097e0:	0801c044 	.word	0x0801c044
 80097e4:	080096b5 	.word	0x080096b5

080097e8 <ethernet_link_status_updated>:

static void ethernet_link_status_updated(struct netif *netif) 
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <ethernet_link_status_updated+0x20>
  {
    /* USER CODE BEGIN 5 */

    // Do we have an IP?
    if (netif->ip_addr.addr != 0)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	e00e      	b.n	8009826 <ethernet_link_status_updated+0x3e>
  {
    /* USER CODE BEGIN 6 */

    // Ethernet cable disconnected
    // Release IP
    ipaddr.addr = 0;
 8009808:	4b08      	ldr	r3, [pc, #32]	; (800982c <ethernet_link_status_updated+0x44>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
    netmask.addr = 0;
 800980e:	4b08      	ldr	r3, [pc, #32]	; (8009830 <ethernet_link_status_updated+0x48>)
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]
    gw.addr = 0;
 8009814:	4b07      	ldr	r3, [pc, #28]	; (8009834 <ethernet_link_status_updated+0x4c>)
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
    netifapi_netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <ethernet_link_status_updated+0x4c>)
 800981c:	4a04      	ldr	r2, [pc, #16]	; (8009830 <ethernet_link_status_updated+0x48>)
 800981e:	4903      	ldr	r1, [pc, #12]	; (800982c <ethernet_link_status_updated+0x44>)
 8009820:	4805      	ldr	r0, [pc, #20]	; (8009838 <ethernet_link_status_updated+0x50>)
 8009822:	f005 fcbd 	bl	800f1a0 <netifapi_netif_set_addr>

    /* USER CODE END 6 */
  }
}
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	24000664 	.word	0x24000664
 8009830:	24000668 	.word	0x24000668
 8009834:	2400066c 	.word	0x2400066c
 8009838:	24000628 	.word	0x24000628

0800983c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800984e:	2320      	movs	r3, #32
 8009850:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009852:	f3bf 8f4f 	dsb	sy
}
 8009856:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009858:	e00b      	b.n	8009872 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800985a:	4a0d      	ldr	r2, [pc, #52]	; (8009890 <SCB_InvalidateDCache_by_Addr+0x54>)
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4413      	add	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	dcf0      	bgt.n	800985a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009878:	f3bf 8f4f 	dsb	sy
}
 800987c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800987e:	f3bf 8f6f 	isb	sy
}
 8009882:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08e      	sub	sp, #56	; 0x38
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800989c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	609a      	str	r2, [r3, #8]
 80098a8:	60da      	str	r2, [r3, #12]
 80098aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a5d      	ldr	r2, [pc, #372]	; (8009a28 <HAL_ETH_MspInit+0x194>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	f040 80b3 	bne.w	8009a1e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80098b8:	4b5c      	ldr	r3, [pc, #368]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098be:	4a5b      	ldr	r2, [pc, #364]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80098c8:	4b58      	ldr	r3, [pc, #352]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098d2:	623b      	str	r3, [r7, #32]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80098d6:	4b55      	ldr	r3, [pc, #340]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098dc:	4a53      	ldr	r2, [pc, #332]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80098e6:	4b51      	ldr	r3, [pc, #324]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80098f4:	4b4d      	ldr	r3, [pc, #308]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098fa:	4a4c      	ldr	r2, [pc, #304]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 80098fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009900:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009904:	4b49      	ldr	r3, [pc, #292]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800990a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990e:	61bb      	str	r3, [r7, #24]
 8009910:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009912:	4b46      	ldr	r3, [pc, #280]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009918:	4a44      	ldr	r2, [pc, #272]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 800991a:	f043 0304 	orr.w	r3, r3, #4
 800991e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009922:	4b42      	ldr	r3, [pc, #264]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	617b      	str	r3, [r7, #20]
 800992e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009930:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009936:	4a3d      	ldr	r2, [pc, #244]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009938:	f043 0301 	orr.w	r3, r3, #1
 800993c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009940:	4b3a      	ldr	r3, [pc, #232]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800994e:	4b37      	ldr	r3, [pc, #220]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009954:	4a35      	ldr	r2, [pc, #212]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009956:	f043 0302 	orr.w	r3, r3, #2
 800995a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800995e:	4b33      	ldr	r3, [pc, #204]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800996c:	4b2f      	ldr	r3, [pc, #188]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 800996e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009972:	4a2e      	ldr	r2, [pc, #184]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 8009974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800997c:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <HAL_ETH_MspInit+0x198>)
 800997e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800998a:	2332      	movs	r3, #50	; 0x32
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800998e:	2302      	movs	r3, #2
 8009990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009992:	2300      	movs	r3, #0
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009996:	2300      	movs	r3, #0
 8009998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800999a:	230b      	movs	r3, #11
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800999e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099a2:	4619      	mov	r1, r3
 80099a4:	4822      	ldr	r0, [pc, #136]	; (8009a30 <HAL_ETH_MspInit+0x19c>)
 80099a6:	f7f9 ffcb 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80099aa:	2386      	movs	r3, #134	; 0x86
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ae:	2302      	movs	r3, #2
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099b6:	2300      	movs	r3, #0
 80099b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099ba:	230b      	movs	r3, #11
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c2:	4619      	mov	r1, r3
 80099c4:	481b      	ldr	r0, [pc, #108]	; (8009a34 <HAL_ETH_MspInit+0x1a0>)
 80099c6:	f7f9 ffbb 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80099ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d0:	2302      	movs	r3, #2
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d4:	2300      	movs	r3, #0
 80099d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099d8:	2300      	movs	r3, #0
 80099da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099dc:	230b      	movs	r3, #11
 80099de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e4:	4619      	mov	r1, r3
 80099e6:	4814      	ldr	r0, [pc, #80]	; (8009a38 <HAL_ETH_MspInit+0x1a4>)
 80099e8:	f7f9 ffaa 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80099ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099f2:	2302      	movs	r3, #2
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099fa:	2300      	movs	r3, #0
 80099fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099fe:	230b      	movs	r3, #11
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a06:	4619      	mov	r1, r3
 8009a08:	480c      	ldr	r0, [pc, #48]	; (8009a3c <HAL_ETH_MspInit+0x1a8>)
 8009a0a:	f7f9 ff99 	bl	8003940 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2105      	movs	r1, #5
 8009a12:	203d      	movs	r0, #61	; 0x3d
 8009a14:	f7f8 f836 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009a18:	203d      	movs	r0, #61	; 0x3d
 8009a1a:	f7f8 f84d 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3738      	adds	r7, #56	; 0x38
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40028000 	.word	0x40028000
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	58020800 	.word	0x58020800
 8009a34:	58020000 	.word	0x58020000
 8009a38:	58020400 	.word	0x58020400
 8009a3c:	58021800 	.word	0x58021800

08009a40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009a48:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <HAL_ETH_RxCpltCallback+0x1c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fd37 	bl	800a4c0 <osSemaphoreRelease>
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	24000670 	.word	0x24000670

08009a60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009a60:	b5b0      	push	{r4, r5, r7, lr}
 8009a62:	b0ae      	sub	sp, #184	; 0xb8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009a74:	4ba1      	ldr	r3, [pc, #644]	; (8009cfc <low_level_init+0x29c>)
 8009a76:	4aa2      	ldr	r2, [pc, #648]	; (8009d00 <low_level_init+0x2a0>)
 8009a78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x80;
 8009a80:	2380      	movs	r3, #128	; 0x80
 8009a82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0xE1;
 8009a86:	23e1      	movs	r3, #225	; 0xe1
 8009a88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x00;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0x00;
 8009a92:	2300      	movs	r3, #0
 8009a94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0x00;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8009a9e:	4a97      	ldr	r2, [pc, #604]	; (8009cfc <low_level_init+0x29c>)
 8009aa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009aa4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009aa6:	4b95      	ldr	r3, [pc, #596]	; (8009cfc <low_level_init+0x29c>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009aac:	4b93      	ldr	r3, [pc, #588]	; (8009cfc <low_level_init+0x29c>)
 8009aae:	4a95      	ldr	r2, [pc, #596]	; (8009d04 <low_level_init+0x2a4>)
 8009ab0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009ab2:	4b92      	ldr	r3, [pc, #584]	; (8009cfc <low_level_init+0x29c>)
 8009ab4:	4a94      	ldr	r2, [pc, #592]	; (8009d08 <low_level_init+0x2a8>)
 8009ab6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8009ab8:	4b90      	ldr	r3, [pc, #576]	; (8009cfc <low_level_init+0x29c>)
 8009aba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009abe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
	uint32_t id0 = HAL_GetUIDw0();
 8009ac0:	f7f7 ff08 	bl	80018d4 <HAL_GetUIDw0>
 8009ac4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

	uint8_t mac[6];

	// first 3 bytes are ST specific max prefixes
	mac[0] = 0x00;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	mac[1] = 0x80;
 8009ace:	2380      	movs	r3, #128	; 0x80
 8009ad0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	mac[2] = 0xE1;
 8009ad4:	23e1      	movs	r3, #225	; 0xe1
 8009ad6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	// last 3 bytes are used to set unique mac based on UID
	mac[3] = (id0 >> 16) & 0x000000FF;
 8009ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	mac[4] = (id0 >> 8) & 0x000000FF;
 8009ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	mac[5] = (id0 >> 0) & 0x000000FF;
 8009af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	heth.Init.MACAddr = &mac[0];
 8009afc:	4a7f      	ldr	r2, [pc, #508]	; (8009cfc <low_level_init+0x29c>)
 8009afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b02:	6053      	str	r3, [r2, #4]

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009b04:	487d      	ldr	r0, [pc, #500]	; (8009cfc <low_level_init+0x29c>)
 8009b06:	f7f8 f875 	bl	8001bf4 <HAL_ETH_Init>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009b10:	2234      	movs	r2, #52	; 0x34
 8009b12:	2100      	movs	r1, #0
 8009b14:	487d      	ldr	r0, [pc, #500]	; (8009d0c <low_level_init+0x2ac>)
 8009b16:	f010 ff6d 	bl	801a9f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009b1a:	4b7c      	ldr	r3, [pc, #496]	; (8009d0c <low_level_init+0x2ac>)
 8009b1c:	2221      	movs	r2, #33	; 0x21
 8009b1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009b20:	4b7a      	ldr	r3, [pc, #488]	; (8009d0c <low_level_init+0x2ac>)
 8009b22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009b26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009b28:	4b78      	ldr	r3, [pc, #480]	; (8009d0c <low_level_init+0x2ac>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009b2e:	4878      	ldr	r0, [pc, #480]	; (8009d10 <low_level_init+0x2b0>)
 8009b30:	f006 f868 	bl	800fc04 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2206      	movs	r2, #6
 8009b38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009b3c:	4b6f      	ldr	r3, [pc, #444]	; (8009cfc <low_level_init+0x29c>)
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	781a      	ldrb	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009b48:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <low_level_init+0x29c>)
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	785a      	ldrb	r2, [r3, #1]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009b54:	4b69      	ldr	r3, [pc, #420]	; (8009cfc <low_level_init+0x29c>)
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	789a      	ldrb	r2, [r3, #2]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009b60:	4b66      	ldr	r3, [pc, #408]	; (8009cfc <low_level_init+0x29c>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	78da      	ldrb	r2, [r3, #3]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009b6c:	4b63      	ldr	r3, [pc, #396]	; (8009cfc <low_level_init+0x29c>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	791a      	ldrb	r2, [r3, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009b78:	4b60      	ldr	r3, [pc, #384]	; (8009cfc <low_level_init+0x29c>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	795a      	ldrb	r2, [r3, #5]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009b8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009b92:	f043 030a 	orr.w	r3, r3, #10
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ba4:	e012      	b.n	8009bcc <low_level_init+0x16c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009baa:	4613      	mov	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	025b      	lsls	r3, r3, #9
 8009bb2:	4a58      	ldr	r2, [pc, #352]	; (8009d14 <low_level_init+0x2b4>)
 8009bb4:	441a      	add	r2, r3
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009bbc:	484f      	ldr	r0, [pc, #316]	; (8009cfc <low_level_init+0x29c>)
 8009bbe:	f7f8 f8f5 	bl	8001dac <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d9e8      	bls.n	8009ba6 <low_level_init+0x146>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd8:	2300      	movs	r3, #0
 8009bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fbec 	bl	800a3c0 <osSemaphoreCreate>
 8009be8:	4603      	mov	r3, r0
 8009bea:	4a4b      	ldr	r2, [pc, #300]	; (8009d18 <low_level_init+0x2b8>)
 8009bec:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009bee:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <low_level_init+0x2bc>)
 8009bf0:	f107 0408 	add.w	r4, r7, #8
 8009bf4:	461d      	mov	r5, r3
 8009bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fadc 	bl	800a1c6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009c0e:	4944      	ldr	r1, [pc, #272]	; (8009d20 <low_level_init+0x2c0>)
 8009c10:	4844      	ldr	r0, [pc, #272]	; (8009d24 <low_level_init+0x2c4>)
 8009c12:	f7f7 fc96 	bl	8001542 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009c16:	4843      	ldr	r0, [pc, #268]	; (8009d24 <low_level_init+0x2c4>)
 8009c18:	f7f7 fcc5 	bl	80015a6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009c1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d164      	bne.n	8009cee <low_level_init+0x28e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009c24:	483f      	ldr	r0, [pc, #252]	; (8009d24 <low_level_init+0x2c4>)
 8009c26:	f7f7 fd66 	bl	80016f6 <LAN8742_GetLinkState>
 8009c2a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	dc06      	bgt.n	8009c44 <low_level_init+0x1e4>
    {
      netif_set_link_down(netif);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f006 fae5 	bl	8010206 <netif_set_link_down>
      netif_set_down(netif);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f006 fa79 	bl	8010134 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009c42:	e056      	b.n	8009cf2 <low_level_init+0x292>
      switch (PHYLinkState)
 8009c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c48:	3b02      	subs	r3, #2
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d82a      	bhi.n	8009ca4 <low_level_init+0x244>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <low_level_init+0x1f4>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c77 	.word	0x08009c77
 8009c5c:	08009c87 	.word	0x08009c87
 8009c60:	08009c97 	.word	0x08009c97
        duplex = ETH_FULLDUPLEX_MODE;
 8009c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        speed = ETH_SPEED_100M;
 8009c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        break;
 8009c74:	e01f      	b.n	8009cb6 <low_level_init+0x256>
        duplex = ETH_HALFDUPLEX_MODE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        speed = ETH_SPEED_100M;
 8009c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        break;
 8009c84:	e017      	b.n	8009cb6 <low_level_init+0x256>
        duplex = ETH_FULLDUPLEX_MODE;
 8009c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        speed = ETH_SPEED_10M;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        break;
 8009c94:	e00f      	b.n	8009cb6 <low_level_init+0x256>
        duplex = ETH_HALFDUPLEX_MODE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        speed = ETH_SPEED_10M;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        break;
 8009ca2:	e008      	b.n	8009cb6 <low_level_init+0x256>
        duplex = ETH_FULLDUPLEX_MODE;
 8009ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        speed = ETH_SPEED_100M;
 8009cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        break;      
 8009cb4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 8009cb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cba:	4619      	mov	r1, r3
 8009cbc:	480f      	ldr	r0, [pc, #60]	; (8009cfc <low_level_init+0x29c>)
 8009cbe:	f7f8 fe65 	bl	800298c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009cc6:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8009cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ccc:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009cce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4809      	ldr	r0, [pc, #36]	; (8009cfc <low_level_init+0x29c>)
 8009cd6:	f7f9 f82d 	bl	8002d34 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8009cda:	4808      	ldr	r0, [pc, #32]	; (8009cfc <low_level_init+0x29c>)
 8009cdc:	f7f8 f8a7 	bl	8001e2e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f006 f9db 	bl	801009c <netif_set_up>
    netif_set_link_up(netif);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f006 fa5f 	bl	80101aa <netif_set_link_up>
}
 8009cec:	e001      	b.n	8009cf2 <low_level_init+0x292>
    Error_Handler();
 8009cee:	f7f7 f9b1 	bl	8001054 <Error_Handler>
}
 8009cf2:	bf00      	nop
 8009cf4:	37b8      	adds	r7, #184	; 0xb8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	24000674 	.word	0x24000674
 8009d00:	40028000 	.word	0x40028000
 8009d04:	30040060 	.word	0x30040060
 8009d08:	30040000 	.word	0x30040000
 8009d0c:	240006e4 	.word	0x240006e4
 8009d10:	0801f0ec 	.word	0x0801f0ec
 8009d14:	30040200 	.word	0x30040200
 8009d18:	24000670 	.word	0x24000670
 8009d1c:	0801c068 	.word	0x0801c068
 8009d20:	24000010 	.word	0x24000010
 8009d24:	240007e8 	.word	0x240007e8

08009d28 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b092      	sub	sp, #72	; 0x48
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	647b      	str	r3, [r7, #68]	; 0x44
 8009d36:	2300      	movs	r3, #0
 8009d38:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009d40:	f107 0308 	add.w	r3, r7, #8
 8009d44:	2230      	movs	r2, #48	; 0x30
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f010 fe53 	bl	801a9f4 <memset>
  
  for(q = p; q != NULL; q = q->next)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d52:	e04b      	b.n	8009dec <low_level_output+0xc4>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8009d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d902      	bls.n	8009d60 <low_level_output+0x38>
      return ERR_IF;
 8009d5a:	f06f 030b 	mvn.w	r3, #11
 8009d5e:	e056      	b.n	8009e0e <low_level_output+0xe6>
    
    Txbuffer[i].buffer = q->payload;
 8009d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d62:	6859      	ldr	r1, [r3, #4]
 8009d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d66:	4613      	mov	r3, r2
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	3348      	adds	r3, #72	; 0x48
 8009d70:	443b      	add	r3, r7
 8009d72:	3b40      	subs	r3, #64	; 0x40
 8009d74:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d78:	895b      	ldrh	r3, [r3, #10]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d7e:	4613      	mov	r3, r2
 8009d80:	005b      	lsls	r3, r3, #1
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	3348      	adds	r3, #72	; 0x48
 8009d88:	443b      	add	r3, r7
 8009d8a:	3b3c      	subs	r3, #60	; 0x3c
 8009d8c:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8009d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d90:	895b      	ldrh	r3, [r3, #10]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d96:	4413      	add	r3, r2
 8009d98:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8009d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d011      	beq.n	8009dc4 <low_level_output+0x9c>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da2:	1e5a      	subs	r2, r3, #1
 8009da4:	f107 0008 	add.w	r0, r7, #8
 8009da8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009daa:	460b      	mov	r3, r1
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	440b      	add	r3, r1
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	18c1      	adds	r1, r0, r3
 8009db4:	4613      	mov	r3, r2
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	3348      	adds	r3, #72	; 0x48
 8009dbe:	443b      	add	r3, r7
 8009dc0:	3b38      	subs	r3, #56	; 0x38
 8009dc2:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d109      	bne.n	8009de0 <low_level_output+0xb8>
    {
      Txbuffer[i].next = NULL;
 8009dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dce:	4613      	mov	r3, r2
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	3348      	adds	r3, #72	; 0x48
 8009dd8:	443b      	add	r3, r7
 8009dda:	3b38      	subs	r3, #56	; 0x38
 8009ddc:	2200      	movs	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de2:	3301      	adds	r3, #1
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1b0      	bne.n	8009d54 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8009df2:	4a09      	ldr	r2, [pc, #36]	; (8009e18 <low_level_output+0xf0>)
 8009df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009df8:	4a07      	ldr	r2, [pc, #28]	; (8009e18 <low_level_output+0xf0>)
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009e00:	2214      	movs	r2, #20
 8009e02:	4905      	ldr	r1, [pc, #20]	; (8009e18 <low_level_output+0xf0>)
 8009e04:	4805      	ldr	r0, [pc, #20]	; (8009e1c <low_level_output+0xf4>)
 8009e06:	f7f8 f921 	bl	800204c <HAL_ETH_Transmit>
  
  return errval;
 8009e0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3748      	adds	r7, #72	; 0x48
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	240006e4 	.word	0x240006e4
 8009e1c:	24000674 	.word	0x24000674

08009e20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	; 0x28
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009e30:	f107 030c 	add.w	r3, r7, #12
 8009e34:	4619      	mov	r1, r3
 8009e36:	4817      	ldr	r0, [pc, #92]	; (8009e94 <low_level_input+0x74>)
 8009e38:	f7f8 fa75 	bl	8002326 <HAL_ETH_GetRxDataBuffer>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d122      	bne.n	8009e88 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4619      	mov	r1, r3
 8009e48:	4812      	ldr	r0, [pc, #72]	; (8009e94 <low_level_input+0x74>)
 8009e4a:	f7f8 fb0a 	bl	8002462 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009e4e:	4811      	ldr	r0, [pc, #68]	; (8009e94 <low_level_input+0x74>)
 8009e50:	f7f8 fb3a 	bl	80024c8 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff fcee 	bl	800983c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009e60:	480d      	ldr	r0, [pc, #52]	; (8009e98 <low_level_input+0x78>)
 8009e62:	f005 ff4b 	bl	800fcfc <memp_malloc_pool>
 8009e66:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	4a0c      	ldr	r2, [pc, #48]	; (8009e9c <low_level_input+0x7c>)
 8009e6c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	b299      	uxth	r1, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009e78:	9201      	str	r2, [sp, #4]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	2004      	movs	r0, #4
 8009e82:	f006 fbeb 	bl	801065c <pbuf_alloced_custom>
 8009e86:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8009e88:	69fb      	ldr	r3, [r7, #28]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	24000674 	.word	0x24000674
 8009e98:	0801f0ec 	.word	0x0801f0ec
 8009e9c:	08009f5d 	.word	0x08009f5d

08009ea0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009eac:	4b12      	ldr	r3, [pc, #72]	; (8009ef8 <ethernetif_input+0x58>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fab5 	bl	800a424 <osSemaphoreWait>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1f5      	bne.n	8009eac <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009ec0:	480e      	ldr	r0, [pc, #56]	; (8009efc <ethernetif_input+0x5c>)
 8009ec2:	f010 fcf5 	bl	801a8b0 <sys_mutex_lock>
        p = low_level_input( netif );
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff ffaa 	bl	8009e20 <low_level_input>
 8009ecc:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	68b8      	ldr	r0, [r7, #8]
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f006 fd97 	bl	8010a18 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009eea:	4804      	ldr	r0, [pc, #16]	; (8009efc <ethernetif_input+0x5c>)
 8009eec:	f010 fcef 	bl	801a8ce <sys_mutex_unlock>
      } while(p!=NULL);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e4      	bne.n	8009ec0 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009ef6:	e7d9      	b.n	8009eac <ethernetif_input+0xc>
 8009ef8:	24000670 	.word	0x24000670
 8009efc:	240045a4 	.word	0x240045a4

08009f00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <ethernetif_init+0x1c>
 8009f0e:	4b0e      	ldr	r3, [pc, #56]	; (8009f48 <ethernetif_init+0x48>)
 8009f10:	f240 2251 	movw	r2, #593	; 0x251
 8009f14:	490d      	ldr	r1, [pc, #52]	; (8009f4c <ethernetif_init+0x4c>)
 8009f16:	480e      	ldr	r0, [pc, #56]	; (8009f50 <ethernetif_init+0x50>)
 8009f18:	f010 fd74 	bl	801aa04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2273      	movs	r2, #115	; 0x73
 8009f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->name[1] = IFNAME1;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2274      	movs	r2, #116	; 0x74
 8009f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <ethernetif_init+0x54>)
 8009f30:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a08      	ldr	r2, [pc, #32]	; (8009f58 <ethernetif_init+0x58>)
 8009f36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff fd91 	bl	8009a60 <low_level_init>

  return ERR_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	0801c084 	.word	0x0801c084
 8009f4c:	0801c0a0 	.word	0x0801c0a0
 8009f50:	0801c0b0 	.word	0x0801c0b0
 8009f54:	08018865 	.word	0x08018865
 8009f58:	08009d29 	.word	0x08009d29

08009f5c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	891b      	ldrh	r3, [r3, #8]
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7ff fc62 	bl	800983c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f78:	68f9      	ldr	r1, [r7, #12]
 8009f7a:	4803      	ldr	r0, [pc, #12]	; (8009f88 <pbuf_free_custom+0x2c>)
 8009f7c:	f005 ff32 	bl	800fde4 <memp_free_pool>
}
 8009f80:	bf00      	nop
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	0801f0ec 	.word	0x0801f0ec

08009f8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009f90:	f7f7 fc88 	bl	80018a4 <HAL_GetTick>
 8009f94:	4603      	mov	r3, r0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009fa0:	4802      	ldr	r0, [pc, #8]	; (8009fac <ETH_PHY_IO_Init+0x10>)
 8009fa2:	f7f8 fee1 	bl	8002d68 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	24000674 	.word	0x24000674

08009fb0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  return 0;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	68f9      	ldr	r1, [r7, #12]
 8009fd2:	4807      	ldr	r0, [pc, #28]	; (8009ff0 <ETH_PHY_IO_ReadReg+0x30>)
 8009fd4:	f7f8 fc32 	bl	800283c <HAL_ETH_ReadPHYRegister>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	e000      	b.n	8009fe6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	24000674 	.word	0x24000674

08009ff4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	68f9      	ldr	r1, [r7, #12]
 800a006:	4807      	ldr	r0, [pc, #28]	; (800a024 <ETH_PHY_IO_WriteReg+0x30>)
 800a008:	f7f8 fc6c 	bl	80028e4 <HAL_ETH_WritePHYRegister>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	e000      	b.n	800a01a <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	24000674 	.word	0x24000674

0800a028 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a02c:	f7f7 fc3a 	bl	80018a4 <HAL_GetTick>
 800a030:	4603      	mov	r3, r0
}
 800a032:	4618      	mov	r0, r3
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */
 
void ethernet_link_thread(void const * argument)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b0a0      	sub	sp, #128	; 0x80
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a040:	2300      	movs	r3, #0
 800a042:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a044:	2300      	movs	r3, #0
 800a046:	67bb      	str	r3, [r7, #120]	; 0x78
 800a048:	2300      	movs	r3, #0
 800a04a:	677b      	str	r3, [r7, #116]	; 0x74
  
  struct netif *netif = (struct netif *) argument;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */
  
  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a050:	483a      	ldr	r0, [pc, #232]	; (800a13c <ethernet_link_thread+0x104>)
 800a052:	f7f7 fb50 	bl	80016f6 <LAN8742_GetLinkState>
 800a056:	4603      	mov	r3, r0
 800a058:	66fb      	str	r3, [r7, #108]	; 0x6c
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a05a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a05c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a060:	089b      	lsrs	r3, r3, #2
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <ethernet_link_thread+0x4e>
 800a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d809      	bhi.n	800a086 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a072:	4833      	ldr	r0, [pc, #204]	; (800a140 <ethernet_link_thread+0x108>)
 800a074:	f7f7 ff74 	bl	8001f60 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a078:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a07a:	f006 f85b 	bl	8010134 <netif_set_down>
    netif_set_link_down(netif);
 800a07e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a080:	f006 f8c1 	bl	8010206 <netif_set_link_down>
 800a084:	e055      	b.n	800a132 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a088:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d14e      	bne.n	800a132 <ethernet_link_thread+0xfa>
 800a094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a096:	2b01      	cmp	r3, #1
 800a098:	d94b      	bls.n	800a132 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800a09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a09c:	3b02      	subs	r3, #2
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d82a      	bhi.n	800a0f8 <ethernet_link_thread+0xc0>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <ethernet_link_thread+0x70>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0cb 	.word	0x0800a0cb
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0eb 	.word	0x0800a0eb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a0b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0c8:	e017      	b.n	800a0fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0d8:	e00f      	b.n	800a0fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a0da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0e8:	e007      	b.n	800a0fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0f6:	e000      	b.n	800a0fa <ethernet_link_thread+0xc2>
    default:
      break;      
 800a0f8:	bf00      	nop
    }
    
    if(linkchanged)
 800a0fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d018      	beq.n	800a132 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800a100:	f107 0308 	add.w	r3, r7, #8
 800a104:	4619      	mov	r1, r3
 800a106:	480e      	ldr	r0, [pc, #56]	; (800a140 <ethernet_link_thread+0x108>)
 800a108:	f7f8 fc40 	bl	800298c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a10c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a10e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a112:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4619      	mov	r1, r3
 800a11a:	4809      	ldr	r0, [pc, #36]	; (800a140 <ethernet_link_thread+0x108>)
 800a11c:	f7f8 fe0a 	bl	8002d34 <HAL_ETH_SetMACConfig>
      
      HAL_ETH_Start_IT(&heth);
 800a120:	4807      	ldr	r0, [pc, #28]	; (800a140 <ethernet_link_thread+0x108>)
 800a122:	f7f7 fe84 	bl	8001e2e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a126:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a128:	f005 ffb8 	bl	801009c <netif_set_up>
      netif_set_link_up(netif);
 800a12c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a12e:	f006 f83c 	bl	80101aa <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a132:	2064      	movs	r0, #100	; 0x64
 800a134:	f000 f893 	bl	800a25e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a138:	e78a      	b.n	800a050 <ethernet_link_thread+0x18>
 800a13a:	bf00      	nop
 800a13c:	240007e8 	.word	0x240007e8
 800a140:	24000674 	.word	0x24000674

0800a144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a14e:	2300      	movs	r3, #0
 800a150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a156:	2b84      	cmp	r3, #132	; 0x84
 800a158:	d005      	beq.n	800a166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a15a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4413      	add	r3, r2
 800a162:	3303      	adds	r3, #3
 800a164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a17a:	f3ef 8305 	mrs	r3, IPSR
 800a17e:	607b      	str	r3, [r7, #4]
  return(result);
 800a180:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a182:	2b00      	cmp	r3, #0
 800a184:	bf14      	ite	ne
 800a186:	2301      	movne	r3, #1
 800a188:	2300      	moveq	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a19c:	f001 fd2a 	bl	800bbf4 <vTaskStartScheduler>
  
  return osOK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a1aa:	f7ff ffe3 	bl	800a174 <inHandlerMode>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a1b4:	f001 fe38 	bl	800be28 <xTaskGetTickCountFromISR>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	e002      	b.n	800a1c2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a1bc:	f001 fe24 	bl	800be08 <xTaskGetTickCount>
 800a1c0:	4603      	mov	r3, r0
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a1c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c8:	b089      	sub	sp, #36	; 0x24
 800a1ca:	af04      	add	r7, sp, #16
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d020      	beq.n	800a21a <osThreadCreate+0x54>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01c      	beq.n	800a21a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685c      	ldr	r4, [r3, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681d      	ldr	r5, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691e      	ldr	r6, [r3, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff ffa6 	bl	800a144 <makeFreeRtosPriority>
 800a1f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	9100      	str	r1, [sp, #0]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	4632      	mov	r2, r6
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f001 fb28 	bl	800b864 <xTaskCreateStatic>
 800a214:	4603      	mov	r3, r0
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e01c      	b.n	800a254 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685c      	ldr	r4, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a226:	b29e      	uxth	r6, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff ff88 	bl	800a144 <makeFreeRtosPriority>
 800a234:	4602      	mov	r2, r0
 800a236:	f107 030c 	add.w	r3, r7, #12
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	9200      	str	r2, [sp, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	4632      	mov	r2, r6
 800a242:	4629      	mov	r1, r5
 800a244:	4620      	mov	r0, r4
 800a246:	f001 fb6a 	bl	800b91e <xTaskCreate>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d001      	beq.n	800a254 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	e000      	b.n	800a256 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a254:	68fb      	ldr	r3, [r7, #12]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a25e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <osDelay+0x16>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	e000      	b.n	800a276 <osDelay+0x18>
 800a274:	2301      	movs	r3, #1
 800a276:	4618      	mov	r0, r3
 800a278:	f001 fc88 	bl	800bb8c <vTaskDelay>
  
  return osOK;
 800a27c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	4619      	mov	r1, r3
 800a29c:	2001      	movs	r0, #1
 800a29e:	f000 fc84 	bl	800abaa <xQueueCreateMutexStatic>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	e003      	b.n	800a2ae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	f000 fc67 	bl	800ab7a <xQueueCreateMutex>
 800a2ac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <osMutexWait+0x18>
    return osErrorParameter;
 800a2cc:	2380      	movs	r3, #128	; 0x80
 800a2ce:	e03a      	b.n	800a346 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d103      	bne.n	800a2e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e009      	b.n	800a2f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <osMutexWait+0x40>
      ticks = 1;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a2f8:	f7ff ff3c 	bl	800a174 <inHandlerMode>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d017      	beq.n	800a332 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a302:	f107 0308 	add.w	r3, r7, #8
 800a306:	461a      	mov	r2, r3
 800a308:	2100      	movs	r1, #0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 f878 	bl	800b400 <xQueueReceiveFromISR>
 800a310:	4603      	mov	r3, r0
 800a312:	2b01      	cmp	r3, #1
 800a314:	d001      	beq.n	800a31a <osMutexWait+0x62>
      return osErrorOS;
 800a316:	23ff      	movs	r3, #255	; 0xff
 800a318:	e015      	b.n	800a346 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d011      	beq.n	800a344 <osMutexWait+0x8c>
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <osMutexWait+0x98>)
 800a322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	e008      	b.n	800a344 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 ff57 	bl	800b1e8 <xQueueSemaphoreTake>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d001      	beq.n	800a344 <osMutexWait+0x8c>
    return osErrorOS;
 800a340:	23ff      	movs	r3, #255	; 0xff
 800a342:	e000      	b.n	800a346 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a360:	2300      	movs	r3, #0
 800a362:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a364:	f7ff ff06 	bl	800a174 <inHandlerMode>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d016      	beq.n	800a39c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a36e:	f107 0308 	add.w	r3, r7, #8
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fdc9 	bl	800af0c <xQueueGiveFromISR>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d001      	beq.n	800a384 <osMutexRelease+0x30>
      return osErrorOS;
 800a380:	23ff      	movs	r3, #255	; 0xff
 800a382:	e017      	b.n	800a3b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d013      	beq.n	800a3b2 <osMutexRelease+0x5e>
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <osMutexRelease+0x68>)
 800a38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	e00a      	b.n	800a3b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a39c:	2300      	movs	r3, #0
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fc1c 	bl	800abe0 <xQueueGenericSend>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d001      	beq.n	800a3b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a3ae:	23ff      	movs	r3, #255	; 0xff
 800a3b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	e000ed04 	.word	0xe000ed04

0800a3c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af02      	add	r7, sp, #8
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00f      	beq.n	800a3f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d10a      	bne.n	800a3ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	9200      	str	r2, [sp, #0]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f000 fad7 	bl	800a998 <xQueueGenericCreateStatic>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	e016      	b.n	800a41c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e014      	b.n	800a41c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d110      	bne.n	800a41a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	f000 fb43 	bl	800aa88 <xQueueGenericCreate>
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <osSemaphoreCreate+0x56>
 800a40a:	2300      	movs	r3, #0
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fbe5 	bl	800abe0 <xQueueGenericSend>
      return sema;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	e000      	b.n	800a41c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a41a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a438:	2380      	movs	r3, #128	; 0x80
 800a43a:	e03a      	b.n	800a4b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d103      	bne.n	800a450 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a448:	f04f 33ff 	mov.w	r3, #4294967295
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e009      	b.n	800a464 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <osSemaphoreWait+0x40>
      ticks = 1;
 800a460:	2301      	movs	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a464:	f7ff fe86 	bl	800a174 <inHandlerMode>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d017      	beq.n	800a49e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a46e:	f107 0308 	add.w	r3, r7, #8
 800a472:	461a      	mov	r2, r3
 800a474:	2100      	movs	r1, #0
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 ffc2 	bl	800b400 <xQueueReceiveFromISR>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d001      	beq.n	800a486 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a482:	23ff      	movs	r3, #255	; 0xff
 800a484:	e015      	b.n	800a4b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d011      	beq.n	800a4b0 <osSemaphoreWait+0x8c>
 800a48c:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <osSemaphoreWait+0x98>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	e008      	b.n	800a4b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fea1 	bl	800b1e8 <xQueueSemaphoreTake>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d001      	beq.n	800a4b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a4ac:	23ff      	movs	r3, #255	; 0xff
 800a4ae:	e000      	b.n	800a4b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	e000ed04 	.word	0xe000ed04

0800a4c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a4d0:	f7ff fe50 	bl	800a174 <inHandlerMode>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d016      	beq.n	800a508 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a4da:	f107 0308 	add.w	r3, r7, #8
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fd13 	bl	800af0c <xQueueGiveFromISR>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d001      	beq.n	800a4f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a4ec:	23ff      	movs	r3, #255	; 0xff
 800a4ee:	e017      	b.n	800a520 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d013      	beq.n	800a51e <osSemaphoreRelease+0x5e>
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <osSemaphoreRelease+0x68>)
 800a4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	e00a      	b.n	800a51e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a508:	2300      	movs	r3, #0
 800a50a:	2200      	movs	r2, #0
 800a50c:	2100      	movs	r1, #0
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fb66 	bl	800abe0 <xQueueGenericSend>
 800a514:	4603      	mov	r3, r0
 800a516:	2b01      	cmp	r3, #1
 800a518:	d001      	beq.n	800a51e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a51a:	23ff      	movs	r3, #255	; 0xff
 800a51c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a51e:	68fb      	ldr	r3, [r7, #12]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a534:	f7ff fe1e 	bl	800a174 <inHandlerMode>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a53e:	2382      	movs	r3, #130	; 0x82
 800a540:	e003      	b.n	800a54a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 f818 	bl	800b578 <vQueueDelete>

  return osOK; 
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a552:	b590      	push	{r4, r7, lr}
 800a554:	b085      	sub	sp, #20
 800a556:	af02      	add	r7, sp, #8
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d011      	beq.n	800a588 <osMessageCreate+0x36>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00d      	beq.n	800a588 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6859      	ldr	r1, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	2400      	movs	r4, #0
 800a57e:	9400      	str	r4, [sp, #0]
 800a580:	f000 fa0a 	bl	800a998 <xQueueGenericCreateStatic>
 800a584:	4603      	mov	r3, r0
 800a586:	e008      	b.n	800a59a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	4619      	mov	r1, r3
 800a594:	f000 fa78 	bl	800aa88 <xQueueGenericCreate>
 800a598:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd90      	pop	{r4, r7, pc}
	...

0800a5a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <osMessagePut+0x1e>
    ticks = 1;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a5c2:	f7ff fdd7 	bl	800a174 <inHandlerMode>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d018      	beq.n	800a5fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a5cc:	f107 0210 	add.w	r2, r7, #16
 800a5d0:	f107 0108 	add.w	r1, r7, #8
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fc00 	bl	800addc <xQueueGenericSendFromISR>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d001      	beq.n	800a5e6 <osMessagePut+0x42>
      return osErrorOS;
 800a5e2:	23ff      	movs	r3, #255	; 0xff
 800a5e4:	e018      	b.n	800a618 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d014      	beq.n	800a616 <osMessagePut+0x72>
 800a5ec:	4b0c      	ldr	r3, [pc, #48]	; (800a620 <osMessagePut+0x7c>)
 800a5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	e00b      	b.n	800a616 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a5fe:	f107 0108 	add.w	r1, r7, #8
 800a602:	2300      	movs	r3, #0
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 faea 	bl	800abe0 <xQueueGenericSend>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d001      	beq.n	800a616 <osMessagePut+0x72>
      return osErrorOS;
 800a612:	23ff      	movs	r3, #255	; 0xff
 800a614:	e000      	b.n	800a618 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	e000ed04 	.word	0xe000ed04

0800a624 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b08b      	sub	sp, #44	; 0x2c
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a63e:	2380      	movs	r3, #128	; 0x80
 800a640:	617b      	str	r3, [r7, #20]
    return event;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	461c      	mov	r4, r3
 800a646:	f107 0314 	add.w	r3, r7, #20
 800a64a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a64e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a652:	e054      	b.n	800a6fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a654:	2300      	movs	r3, #0
 800a656:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d103      	bne.n	800a66c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
 800a66a:	e009      	b.n	800a680 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d006      	beq.n	800a680 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <osMessageGet+0x5c>
      ticks = 1;
 800a67c:	2301      	movs	r3, #1
 800a67e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a680:	f7ff fd78 	bl	800a174 <inHandlerMode>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01c      	beq.n	800a6c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a68a:	f107 0220 	add.w	r2, r7, #32
 800a68e:	f107 0314 	add.w	r3, r7, #20
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	68b8      	ldr	r0, [r7, #8]
 800a698:	f000 feb2 	bl	800b400 <xQueueReceiveFromISR>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d102      	bne.n	800a6a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	e001      	b.n	800a6ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01d      	beq.n	800a6ee <osMessageGet+0xca>
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <osMessageGet+0xe4>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	e014      	b.n	800a6ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a6c4:	f107 0314 	add.w	r3, r7, #20
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	68b8      	ldr	r0, [r7, #8]
 800a6d0:	f000 fcaa 	bl	800b028 <xQueueReceive>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d102      	bne.n	800a6e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a6da:	2310      	movs	r3, #16
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e006      	b.n	800a6ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <osMessageGet+0xc6>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e000      	b.n	800a6ec <osMessageGet+0xc8>
 800a6ea:	2340      	movs	r3, #64	; 0x40
 800a6ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	461c      	mov	r4, r3
 800a6f2:	f107 0314 	add.w	r3, r7, #20
 800a6f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	372c      	adds	r7, #44	; 0x2c
 800a702:	46bd      	mov	sp, r7
 800a704:	bd90      	pop	{r4, r7, pc}
 800a706:	bf00      	nop
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a714:	f7ff fd2e 	bl	800a174 <inHandlerMode>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d004      	beq.n	800a728 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 ff0c 	bl	800b53c <uxQueueMessagesWaitingFromISR>
 800a724:	4603      	mov	r3, r0
 800a726:	e003      	b.n	800a730 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fee9 	bl	800b500 <uxQueueMessagesWaiting>
 800a72e:	4603      	mov	r3, r0
  }
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a740:	f7ff fd18 	bl	800a174 <inHandlerMode>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <osMessageDelete+0x16>
    return osErrorISR;
 800a74a:	2382      	movs	r3, #130	; 0x82
 800a74c:	e003      	b.n	800a756 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 ff12 	bl	800b578 <vQueueDelete>

  return osOK; 
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f103 0208 	add.w	r2, r3, #8
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f103 0208 	add.w	r2, r3, #8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f103 0208 	add.w	r2, r3, #8
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d103      	bne.n	800a820 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	e00c      	b.n	800a83a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3308      	adds	r3, #8
 800a824:	60fb      	str	r3, [r7, #12]
 800a826:	e002      	b.n	800a82e <vListInsert+0x2e>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	429a      	cmp	r2, r3
 800a838:	d2f6      	bcs.n	800a828 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6892      	ldr	r2, [r2, #8]
 800a888:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6852      	ldr	r2, [r2, #4]
 800a892:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d103      	bne.n	800a8a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	1e5a      	subs	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a8f2:	f002 f907 	bl	800cb04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a922:	3b01      	subs	r3, #1
 800a924:	68f9      	ldr	r1, [r7, #12]
 800a926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	441a      	add	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	22ff      	movs	r2, #255	; 0xff
 800a936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	22ff      	movs	r2, #255	; 0xff
 800a93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d114      	bne.n	800a972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01a      	beq.n	800a986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3310      	adds	r3, #16
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fbb1 	bl	800c0bc <xTaskRemoveFromEventList>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d012      	beq.n	800a986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a960:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <xQueueGenericReset+0xcc>)
 800a962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	e009      	b.n	800a986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3310      	adds	r3, #16
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff fef1 	bl	800a75e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3324      	adds	r3, #36	; 0x24
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff feec 	bl	800a75e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a986:	f002 f8ed 	bl	800cb64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a98a:	2301      	movs	r3, #1
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	e000ed04 	.word	0xe000ed04

0800a998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08e      	sub	sp, #56	; 0x38
 800a99c:	af02      	add	r7, sp, #8
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <xQueueGenericCreateStatic+0x52>
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <xQueueGenericCreateStatic+0x56>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueGenericCreateStatic+0x58>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	623b      	str	r3, [r7, #32]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <xQueueGenericCreateStatic+0x7e>
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <xQueueGenericCreateStatic+0x82>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <xQueueGenericCreateStatic+0x84>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10a      	bne.n	800aa36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	61fb      	str	r3, [r7, #28]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa36:	2348      	movs	r3, #72	; 0x48
 800aa38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b48      	cmp	r3, #72	; 0x48
 800aa3e:	d00a      	beq.n	800aa56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	61bb      	str	r3, [r7, #24]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00d      	beq.n	800aa7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	4613      	mov	r3, r2
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f845 	bl	800ab08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3730      	adds	r7, #48	; 0x30
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08a      	sub	sp, #40	; 0x28
 800aa8c:	af02      	add	r7, sp, #8
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10a      	bne.n	800aab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	613b      	str	r3, [r7, #16]
}
 800aaae:	bf00      	nop
 800aab0:	e7fe      	b.n	800aab0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	61fb      	str	r3, [r7, #28]
 800aabc:	e004      	b.n	800aac8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	fb02 f303 	mul.w	r3, r2, r3
 800aac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	3348      	adds	r3, #72	; 0x48
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 f93b 	bl	800cd48 <pvPortMalloc>
 800aad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d011      	beq.n	800aafe <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	3348      	adds	r3, #72	; 0x48
 800aae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aaec:	79fa      	ldrb	r2, [r7, #7]
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f805 	bl	800ab08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aafe:	69bb      	ldr	r3, [r7, #24]
	}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	e002      	b.n	800ab2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab36:	2101      	movs	r1, #1
 800ab38:	69b8      	ldr	r0, [r7, #24]
 800ab3a:	f7ff fec5 	bl	800a8c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ab66:	2300      	movs	r3, #0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f837 	bl	800abe0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b086      	sub	sp, #24
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	4603      	mov	r3, r0
 800ab82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ab84:	2301      	movs	r3, #1
 800ab86:	617b      	str	r3, [r7, #20]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ab8c:	79fb      	ldrb	r3, [r7, #7]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6939      	ldr	r1, [r7, #16]
 800ab92:	6978      	ldr	r0, [r7, #20]
 800ab94:	f7ff ff78 	bl	800aa88 <xQueueGenericCreate>
 800ab98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff ffd3 	bl	800ab46 <prvInitialiseMutex>

		return xNewQueue;
 800aba0:	68fb      	ldr	r3, [r7, #12]
	}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b088      	sub	sp, #32
 800abae:	af02      	add	r7, sp, #8
 800abb0:	4603      	mov	r3, r0
 800abb2:	6039      	str	r1, [r7, #0]
 800abb4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	2300      	movs	r3, #0
 800abbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2200      	movs	r2, #0
 800abc6:	6939      	ldr	r1, [r7, #16]
 800abc8:	6978      	ldr	r0, [r7, #20]
 800abca:	f7ff fee5 	bl	800a998 <xQueueGenericCreateStatic>
 800abce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff ffb8 	bl	800ab46 <prvInitialiseMutex>

		return xNewQueue;
 800abd6:	68fb      	ldr	r3, [r7, #12]
	}
 800abd8:	4618      	mov	r0, r3
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08e      	sub	sp, #56	; 0x38
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
 800abec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800abee:	2300      	movs	r3, #0
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueGenericSend+0x32>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <xQueueGenericSend+0x40>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <xQueueGenericSend+0x44>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e000      	b.n	800ac26 <xQueueGenericSend+0x46>
 800ac24:	2300      	movs	r3, #0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <xQueueGenericSend+0x60>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d103      	bne.n	800ac4e <xQueueGenericSend+0x6e>
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <xQueueGenericSend+0x72>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <xQueueGenericSend+0x74>
 800ac52:	2300      	movs	r3, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xQueueGenericSend+0x8e>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	623b      	str	r3, [r7, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac6e:	f001 fbe1 	bl	800c434 <xTaskGetSchedulerState>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <xQueueGenericSend+0x9e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <xQueueGenericSend+0xa2>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <xQueueGenericSend+0xa4>
 800ac82:	2300      	movs	r3, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueGenericSend+0xbe>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	61fb      	str	r3, [r7, #28]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac9e:	f001 ff31 	bl	800cb04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acaa:	429a      	cmp	r2, r3
 800acac:	d302      	bcc.n	800acb4 <xQueueGenericSend+0xd4>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d129      	bne.n	800ad08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acba:	f000 fc98 	bl	800b5ee <prvCopyDataToQueue>
 800acbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d010      	beq.n	800acea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	3324      	adds	r3, #36	; 0x24
 800accc:	4618      	mov	r0, r3
 800acce:	f001 f9f5 	bl	800c0bc <xTaskRemoveFromEventList>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d013      	beq.n	800ad00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acd8:	4b3f      	ldr	r3, [pc, #252]	; (800add8 <xQueueGenericSend+0x1f8>)
 800acda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	e00a      	b.n	800ad00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d007      	beq.n	800ad00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800acf0:	4b39      	ldr	r3, [pc, #228]	; (800add8 <xQueueGenericSend+0x1f8>)
 800acf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad00:	f001 ff30 	bl	800cb64 <vPortExitCritical>
				return pdPASS;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e063      	b.n	800add0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad0e:	f001 ff29 	bl	800cb64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	e05c      	b.n	800add0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d106      	bne.n	800ad2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad1c:	f107 0314 	add.w	r3, r7, #20
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 fa2d 	bl	800c180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad2a:	f001 ff1b 	bl	800cb64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad2e:	f000 ffc1 	bl	800bcb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad32:	f001 fee7 	bl	800cb04 <vPortEnterCritical>
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3c:	b25b      	sxtb	r3, r3
 800ad3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad42:	d103      	bne.n	800ad4c <xQueueGenericSend+0x16c>
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad52:	b25b      	sxtb	r3, r3
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad58:	d103      	bne.n	800ad62 <xQueueGenericSend+0x182>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad62:	f001 feff 	bl	800cb64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad66:	1d3a      	adds	r2, r7, #4
 800ad68:	f107 0314 	add.w	r3, r7, #20
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f001 fa1c 	bl	800c1ac <xTaskCheckForTimeOut>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d124      	bne.n	800adc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad7c:	f000 fd2f 	bl	800b7de <prvIsQueueFull>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d018      	beq.n	800adb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	3310      	adds	r3, #16
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f001 f970 	bl	800c074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad96:	f000 fcba 	bl	800b70e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad9a:	f000 ff99 	bl	800bcd0 <xTaskResumeAll>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f af7c 	bne.w	800ac9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <xQueueGenericSend+0x1f8>)
 800ada8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	e772      	b.n	800ac9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800adb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adba:	f000 fca8 	bl	800b70e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adbe:	f000 ff87 	bl	800bcd0 <xTaskResumeAll>
 800adc2:	e76c      	b.n	800ac9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800adc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adc6:	f000 fca2 	bl	800b70e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adca:	f000 ff81 	bl	800bcd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800adce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800add0:	4618      	mov	r0, r3
 800add2:	3738      	adds	r7, #56	; 0x38
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	; 0x38
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <xQueueGenericSendFromISR+0x3c>
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <xQueueGenericSendFromISR+0x40>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <xQueueGenericSendFromISR+0x42>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10a      	bne.n	800ae38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	623b      	str	r3, [r7, #32]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d103      	bne.n	800ae46 <xQueueGenericSendFromISR+0x6a>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d101      	bne.n	800ae4a <xQueueGenericSendFromISR+0x6e>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xQueueGenericSendFromISR+0x70>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	61fb      	str	r3, [r7, #28]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae66:	f001 ff2f 	bl	800ccc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	61ba      	str	r2, [r7, #24]
 800ae80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d302      	bcc.n	800ae98 <xQueueGenericSendFromISR+0xbc>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d12c      	bne.n	800aef2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea8:	f000 fba1 	bl	800b5ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aeac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d112      	bne.n	800aedc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d016      	beq.n	800aeec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f8fa 	bl	800c0bc <xTaskRemoveFromEventList>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00e      	beq.n	800aeec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e007      	b.n	800aeec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aedc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aee0:	3301      	adds	r3, #1
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	b25a      	sxtb	r2, r3
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aeec:	2301      	movs	r3, #1
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aef0:	e001      	b.n	800aef6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af04:	4618      	mov	r0, r3
 800af06:	3738      	adds	r7, #56	; 0x38
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08e      	sub	sp, #56	; 0x38
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10a      	bne.n	800af36 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	623b      	str	r3, [r7, #32]
}
 800af32:	bf00      	nop
 800af34:	e7fe      	b.n	800af34 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <xQueueGiveFromISR+0x48>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	61fb      	str	r3, [r7, #28]
}
 800af50:	bf00      	nop
 800af52:	e7fe      	b.n	800af52 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <xQueueGiveFromISR+0x58>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <xQueueGiveFromISR+0x5c>
 800af64:	2301      	movs	r3, #1
 800af66:	e000      	b.n	800af6a <xQueueGiveFromISR+0x5e>
 800af68:	2300      	movs	r3, #0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <xQueueGiveFromISR+0x78>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	61bb      	str	r3, [r7, #24]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af84:	f001 fea0 	bl	800ccc8 <vPortValidateInterruptPriority>
	__asm volatile
 800af88:	f3ef 8211 	mrs	r2, BASEPRI
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	617a      	str	r2, [r7, #20]
 800af9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800afa0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d22b      	bcs.n	800b00c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afce:	d112      	bne.n	800aff6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d016      	beq.n	800b006 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	3324      	adds	r3, #36	; 0x24
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 f86d 	bl	800c0bc <xTaskRemoveFromEventList>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00e      	beq.n	800b006 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2201      	movs	r2, #1
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	e007      	b.n	800b006 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800affa:	3301      	adds	r3, #1
 800affc:	b2db      	uxtb	r3, r3
 800affe:	b25a      	sxtb	r2, r3
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b006:	2301      	movs	r3, #1
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
 800b00a:	e001      	b.n	800b010 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f383 8811 	msr	BASEPRI, r3
}
 800b01a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3738      	adds	r7, #56	; 0x38
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08c      	sub	sp, #48	; 0x30
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b034:	2300      	movs	r3, #0
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10a      	bne.n	800b058 <xQueueReceive+0x30>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	623b      	str	r3, [r7, #32]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <xQueueReceive+0x3e>
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <xQueueReceive+0x42>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <xQueueReceive+0x44>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10a      	bne.n	800b086 <xQueueReceive+0x5e>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	61fb      	str	r3, [r7, #28]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b086:	f001 f9d5 	bl	800c434 <xTaskGetSchedulerState>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d102      	bne.n	800b096 <xQueueReceive+0x6e>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <xQueueReceive+0x72>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <xQueueReceive+0x74>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <xQueueReceive+0x8e>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	61bb      	str	r3, [r7, #24]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0b6:	f001 fd25 	bl	800cb04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01f      	beq.n	800b106 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ca:	f000 fafa 	bl	800b6c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	1e5a      	subs	r2, r3, #1
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00f      	beq.n	800b0fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	3310      	adds	r3, #16
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 ffea 	bl	800c0bc <xTaskRemoveFromEventList>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d007      	beq.n	800b0fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0ee:	4b3d      	ldr	r3, [pc, #244]	; (800b1e4 <xQueueReceive+0x1bc>)
 800b0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0fe:	f001 fd31 	bl	800cb64 <vPortExitCritical>
				return pdPASS;
 800b102:	2301      	movs	r3, #1
 800b104:	e069      	b.n	800b1da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b10c:	f001 fd2a 	bl	800cb64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b110:	2300      	movs	r3, #0
 800b112:	e062      	b.n	800b1da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b11a:	f107 0310 	add.w	r3, r7, #16
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 f82e 	bl	800c180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b128:	f001 fd1c 	bl	800cb64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b12c:	f000 fdc2 	bl	800bcb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b130:	f001 fce8 	bl	800cb04 <vPortEnterCritical>
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d103      	bne.n	800b14a <xQueueReceive+0x122>
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b150:	b25b      	sxtb	r3, r3
 800b152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b156:	d103      	bne.n	800b160 <xQueueReceive+0x138>
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b160:	f001 fd00 	bl	800cb64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b164:	1d3a      	adds	r2, r7, #4
 800b166:	f107 0310 	add.w	r3, r7, #16
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 f81d 	bl	800c1ac <xTaskCheckForTimeOut>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d123      	bne.n	800b1c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17a:	f000 fb1a 	bl	800b7b2 <prvIsQueueEmpty>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d017      	beq.n	800b1b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	3324      	adds	r3, #36	; 0x24
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 ff71 	bl	800c074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b194:	f000 fabb 	bl	800b70e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b198:	f000 fd9a 	bl	800bcd0 <xTaskResumeAll>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d189      	bne.n	800b0b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1a2:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <xQueueReceive+0x1bc>)
 800b1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	e780      	b.n	800b0b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b6:	f000 faaa 	bl	800b70e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1ba:	f000 fd89 	bl	800bcd0 <xTaskResumeAll>
 800b1be:	e77a      	b.n	800b0b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c2:	f000 faa4 	bl	800b70e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1c6:	f000 fd83 	bl	800bcd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	f000 faf1 	bl	800b7b2 <prvIsQueueEmpty>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f43f af6f 	beq.w	800b0b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3730      	adds	r7, #48	; 0x30
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08e      	sub	sp, #56	; 0x38
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	623b      	str	r3, [r7, #32]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00a      	beq.n	800b238 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	61fb      	str	r3, [r7, #28]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b238:	f001 f8fc 	bl	800c434 <xTaskGetSchedulerState>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d102      	bne.n	800b248 <xQueueSemaphoreTake+0x60>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <xQueueSemaphoreTake+0x64>
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <xQueueSemaphoreTake+0x66>
 800b24c:	2300      	movs	r3, #0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	61bb      	str	r3, [r7, #24]
}
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b268:	f001 fc4c 	bl	800cb04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	2b00      	cmp	r3, #0
 800b276:	d024      	beq.n	800b2c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	1e5a      	subs	r2, r3, #1
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b288:	f001 fa92 	bl	800c7b0 <pvTaskIncrementMutexHeldCount>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00f      	beq.n	800b2ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	3310      	adds	r3, #16
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 ff0c 	bl	800c0bc <xTaskRemoveFromEventList>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2aa:	4b54      	ldr	r3, [pc, #336]	; (800b3fc <xQueueSemaphoreTake+0x214>)
 800b2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2ba:	f001 fc53 	bl	800cb64 <vPortExitCritical>
				return pdPASS;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e097      	b.n	800b3f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d111      	bne.n	800b2ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	617b      	str	r3, [r7, #20]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b2e4:	f001 fc3e 	bl	800cb64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e082      	b.n	800b3f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2f2:	f107 030c 	add.w	r3, r7, #12
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 ff42 	bl	800c180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b300:	f001 fc30 	bl	800cb64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b304:	f000 fcd6 	bl	800bcb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b308:	f001 fbfc 	bl	800cb04 <vPortEnterCritical>
 800b30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b312:	b25b      	sxtb	r3, r3
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d103      	bne.n	800b322 <xQueueSemaphoreTake+0x13a>
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b328:	b25b      	sxtb	r3, r3
 800b32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32e:	d103      	bne.n	800b338 <xQueueSemaphoreTake+0x150>
 800b330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b338:	f001 fc14 	bl	800cb64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b33c:	463a      	mov	r2, r7
 800b33e:	f107 030c 	add.w	r3, r7, #12
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f000 ff31 	bl	800c1ac <xTaskCheckForTimeOut>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d132      	bne.n	800b3b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b352:	f000 fa2e 	bl	800b7b2 <prvIsQueueEmpty>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d026      	beq.n	800b3aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b364:	f001 fbce 	bl	800cb04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 f87f 	bl	800c470 <xTaskPriorityInherit>
 800b372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b374:	f001 fbf6 	bl	800cb64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	3324      	adds	r3, #36	; 0x24
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	4611      	mov	r1, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fe77 	bl	800c074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b388:	f000 f9c1 	bl	800b70e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b38c:	f000 fca0 	bl	800bcd0 <xTaskResumeAll>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	f47f af68 	bne.w	800b268 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b398:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <xQueueSemaphoreTake+0x214>)
 800b39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	e75e      	b.n	800b268 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3ac:	f000 f9af 	bl	800b70e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3b0:	f000 fc8e 	bl	800bcd0 <xTaskResumeAll>
 800b3b4:	e758      	b.n	800b268 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3b8:	f000 f9a9 	bl	800b70e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3bc:	f000 fc88 	bl	800bcd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3c2:	f000 f9f6 	bl	800b7b2 <prvIsQueueEmpty>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f43f af4d 	beq.w	800b268 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00d      	beq.n	800b3f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b3d4:	f001 fb96 	bl	800cb04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3da:	f000 f8f0 	bl	800b5be <prvGetDisinheritPriorityAfterTimeout>
 800b3de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 f948 	bl	800c67c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b3ec:	f001 fbba 	bl	800cb64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3738      	adds	r7, #56	; 0x38
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	e000ed04 	.word	0xe000ed04

0800b400 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08e      	sub	sp, #56	; 0x38
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10a      	bne.n	800b42c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	623b      	str	r3, [r7, #32]
}
 800b428:	bf00      	nop
 800b42a:	e7fe      	b.n	800b42a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d103      	bne.n	800b43a <xQueueReceiveFromISR+0x3a>
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <xQueueReceiveFromISR+0x3e>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <xQueueReceiveFromISR+0x40>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	61fb      	str	r3, [r7, #28]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b45a:	f001 fc35 	bl	800ccc8 <vPortValidateInterruptPriority>
	__asm volatile
 800b45e:	f3ef 8211 	mrs	r2, BASEPRI
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61ba      	str	r2, [r7, #24]
 800b474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b482:	2b00      	cmp	r3, #0
 800b484:	d02f      	beq.n	800b4e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b494:	f000 f915 	bl	800b6c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	1e5a      	subs	r2, r3, #1
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a8:	d112      	bne.n	800b4d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d016      	beq.n	800b4e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	3310      	adds	r3, #16
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fe00 	bl	800c0bc <xTaskRemoveFromEventList>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00e      	beq.n	800b4e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e007      	b.n	800b4e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	b25a      	sxtb	r2, r3
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e4:	e001      	b.n	800b4ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f383 8811 	msr	BASEPRI, r3
}
 800b4f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3738      	adds	r7, #56	; 0x38
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60bb      	str	r3, [r7, #8]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b524:	f001 faee 	bl	800cb04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b52e:	f001 fb19 	bl	800cb64 <vPortExitCritical>

	return uxReturn;
 800b532:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60fb      	str	r3, [r7, #12]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b568:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b56a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b56c:	4618      	mov	r0, r3
 800b56e:	371c      	adds	r7, #28
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <vQueueDelete+0x28>
	__asm volatile
 800b58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58e:	f383 8811 	msr	BASEPRI, r3
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	60bb      	str	r3, [r7, #8]
}
 800b59c:	bf00      	nop
 800b59e:	e7fe      	b.n	800b59e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 f935 	bl	800b810 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f001 fc8d 	bl	800ced0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b5b6:	bf00      	nop
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d006      	beq.n	800b5dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f1c3 0307 	rsb	r3, r3, #7
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	e001      	b.n	800b5e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
	}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10d      	bne.n	800b628 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d14d      	bne.n	800b6b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 ffa9 	bl	800c570 <xTaskPriorityDisinherit>
 800b61e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	609a      	str	r2, [r3, #8]
 800b626:	e043      	b.n	800b6b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d119      	bne.n	800b662 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6858      	ldr	r0, [r3, #4]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	461a      	mov	r2, r3
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	f00f f9cd 	bl	801a9d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	441a      	add	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	429a      	cmp	r2, r3
 800b656:	d32b      	bcc.n	800b6b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	605a      	str	r2, [r3, #4]
 800b660:	e026      	b.n	800b6b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	68d8      	ldr	r0, [r3, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	461a      	mov	r2, r3
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	f00f f9b3 	bl	801a9d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	425b      	negs	r3, r3
 800b67c:	441a      	add	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d207      	bcs.n	800b69e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	425b      	negs	r3, r3
 800b698:	441a      	add	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d105      	bne.n	800b6b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6b8:	697b      	ldr	r3, [r7, #20]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d018      	beq.n	800b706 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68da      	ldr	r2, [r3, #12]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6dc:	441a      	add	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d303      	bcc.n	800b6f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68d9      	ldr	r1, [r3, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	461a      	mov	r2, r3
 800b700:	6838      	ldr	r0, [r7, #0]
 800b702:	f00f f969 	bl	801a9d8 <memcpy>
	}
}
 800b706:	bf00      	nop
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b716:	f001 f9f5 	bl	800cb04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b720:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b722:	e011      	b.n	800b748 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d012      	beq.n	800b752 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3324      	adds	r3, #36	; 0x24
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fcc3 	bl	800c0bc <xTaskRemoveFromEventList>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b73c:	f000 fd98 	bl	800c270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	3b01      	subs	r3, #1
 800b744:	b2db      	uxtb	r3, r3
 800b746:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dce9      	bgt.n	800b724 <prvUnlockQueue+0x16>
 800b750:	e000      	b.n	800b754 <prvUnlockQueue+0x46>
					break;
 800b752:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	22ff      	movs	r2, #255	; 0xff
 800b758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b75c:	f001 fa02 	bl	800cb64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b760:	f001 f9d0 	bl	800cb04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b76a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b76c:	e011      	b.n	800b792 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d012      	beq.n	800b79c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3310      	adds	r3, #16
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fc9e 	bl	800c0bc <xTaskRemoveFromEventList>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b786:	f000 fd73 	bl	800c270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b796:	2b00      	cmp	r3, #0
 800b798:	dce9      	bgt.n	800b76e <prvUnlockQueue+0x60>
 800b79a:	e000      	b.n	800b79e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b79c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	22ff      	movs	r2, #255	; 0xff
 800b7a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7a6:	f001 f9dd 	bl	800cb64 <vPortExitCritical>
}
 800b7aa:	bf00      	nop
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7ba:	f001 f9a3 	bl	800cb04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	e001      	b.n	800b7d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7d0:	f001 f9c8 	bl	800cb64 <vPortExitCritical>

	return xReturn;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7e6:	f001 f98d 	bl	800cb04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d102      	bne.n	800b7fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e001      	b.n	800b800 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b800:	f001 f9b0 	bl	800cb64 <vPortExitCritical>

	return xReturn;
 800b804:	68fb      	ldr	r3, [r7, #12]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e016      	b.n	800b84c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b81e:	4a10      	ldr	r2, [pc, #64]	; (800b860 <vQueueUnregisterQueue+0x50>)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	4413      	add	r3, r2
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d10b      	bne.n	800b846 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b82e:	4a0c      	ldr	r2, [pc, #48]	; (800b860 <vQueueUnregisterQueue+0x50>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2100      	movs	r1, #0
 800b834:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <vQueueUnregisterQueue+0x50>)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	4413      	add	r3, r2
 800b840:	2200      	movs	r2, #0
 800b842:	605a      	str	r2, [r3, #4]
				break;
 800b844:	e006      	b.n	800b854 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b07      	cmp	r3, #7
 800b850:	d9e5      	bls.n	800b81e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	24000808 	.word	0x24000808

0800b864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08e      	sub	sp, #56	; 0x38
 800b868:	af04      	add	r7, sp, #16
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	623b      	str	r3, [r7, #32]
}
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <xTaskCreateStatic+0x46>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	61fb      	str	r3, [r7, #28]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8aa:	2354      	movs	r3, #84	; 0x54
 800b8ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2b54      	cmp	r3, #84	; 0x54
 800b8b2:	d00a      	beq.n	800b8ca <xTaskCreateStatic+0x66>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	61bb      	str	r3, [r7, #24]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d01e      	beq.n	800b910 <xTaskCreateStatic+0xac>
 800b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01b      	beq.n	800b910 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	9302      	str	r3, [sp, #8]
 800b8f2:	f107 0314 	add.w	r3, r7, #20
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f850 	bl	800b9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b90a:	f000 f8d5 	bl	800bab8 <prvAddNewTaskToReadyList>
 800b90e:	e001      	b.n	800b914 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b914:	697b      	ldr	r3, [r7, #20]
	}
 800b916:	4618      	mov	r0, r3
 800b918:	3728      	adds	r7, #40	; 0x28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b08c      	sub	sp, #48	; 0x30
 800b922:	af04      	add	r7, sp, #16
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	603b      	str	r3, [r7, #0]
 800b92a:	4613      	mov	r3, r2
 800b92c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b92e:	88fb      	ldrh	r3, [r7, #6]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4618      	mov	r0, r3
 800b934:	f001 fa08 	bl	800cd48 <pvPortMalloc>
 800b938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00e      	beq.n	800b95e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b940:	2054      	movs	r0, #84	; 0x54
 800b942:	f001 fa01 	bl	800cd48 <pvPortMalloc>
 800b946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	631a      	str	r2, [r3, #48]	; 0x30
 800b954:	e005      	b.n	800b962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b956:	6978      	ldr	r0, [r7, #20]
 800b958:	f001 faba 	bl	800ced0 <vPortFree>
 800b95c:	e001      	b.n	800b962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b95e:	2300      	movs	r3, #0
 800b960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d017      	beq.n	800b998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b970:	88fa      	ldrh	r2, [r7, #6]
 800b972:	2300      	movs	r3, #0
 800b974:	9303      	str	r3, [sp, #12]
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	9302      	str	r3, [sp, #8]
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f80e 	bl	800b9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b98c:	69f8      	ldr	r0, [r7, #28]
 800b98e:	f000 f893 	bl	800bab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b992:	2301      	movs	r3, #1
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	e002      	b.n	800b99e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b998:	f04f 33ff 	mov.w	r3, #4294967295
 800b99c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b99e:	69bb      	ldr	r3, [r7, #24]
	}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b088      	sub	sp, #32
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9c0:	440b      	add	r3, r1
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	f023 0307 	bic.w	r3, r3, #7
 800b9ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	617b      	str	r3, [r7, #20]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01f      	beq.n	800ba36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61fb      	str	r3, [r7, #28]
 800b9fa:	e012      	b.n	800ba22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	4413      	add	r3, r2
 800ba02:	7819      	ldrb	r1, [r3, #0]
 800ba04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3334      	adds	r3, #52	; 0x34
 800ba0c:	460a      	mov	r2, r1
 800ba0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	2b0f      	cmp	r3, #15
 800ba26:	d9e9      	bls.n	800b9fc <prvInitialiseNewTask+0x54>
 800ba28:	e000      	b.n	800ba2c <prvInitialiseNewTask+0x84>
			{
				break;
 800ba2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba34:	e003      	b.n	800ba3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	2b06      	cmp	r3, #6
 800ba42:	d901      	bls.n	800ba48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba44:	2306      	movs	r3, #6
 800ba46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	2200      	movs	r2, #0
 800ba58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fe9d 	bl	800a79e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	3318      	adds	r3, #24
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe fe98 	bl	800a79e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	f1c3 0207 	rsb	r2, r3, #7
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	2200      	movs	r2, #0
 800ba88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	69b8      	ldr	r0, [r7, #24]
 800ba98:	f000 ff04 	bl	800c8a4 <pxPortInitialiseStack>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baae:	bf00      	nop
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bac0:	f001 f820 	bl	800cb04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bac4:	4b2a      	ldr	r3, [pc, #168]	; (800bb70 <prvAddNewTaskToReadyList+0xb8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	4a29      	ldr	r2, [pc, #164]	; (800bb70 <prvAddNewTaskToReadyList+0xb8>)
 800bacc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bace:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <prvAddNewTaskToReadyList+0xbc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bad6:	4a27      	ldr	r2, [pc, #156]	; (800bb74 <prvAddNewTaskToReadyList+0xbc>)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800badc:	4b24      	ldr	r3, [pc, #144]	; (800bb70 <prvAddNewTaskToReadyList+0xb8>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d110      	bne.n	800bb06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bae4:	f000 fbe8 	bl	800c2b8 <prvInitialiseTaskLists>
 800bae8:	e00d      	b.n	800bb06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baea:	4b23      	ldr	r3, [pc, #140]	; (800bb78 <prvAddNewTaskToReadyList+0xc0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d109      	bne.n	800bb06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800baf2:	4b20      	ldr	r3, [pc, #128]	; (800bb74 <prvAddNewTaskToReadyList+0xbc>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d802      	bhi.n	800bb06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb00:	4a1c      	ldr	r2, [pc, #112]	; (800bb74 <prvAddNewTaskToReadyList+0xbc>)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb06:	4b1d      	ldr	r3, [pc, #116]	; (800bb7c <prvAddNewTaskToReadyList+0xc4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	4a1b      	ldr	r2, [pc, #108]	; (800bb7c <prvAddNewTaskToReadyList+0xc4>)
 800bb0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb14:	2201      	movs	r2, #1
 800bb16:	409a      	lsls	r2, r3
 800bb18:	4b19      	ldr	r3, [pc, #100]	; (800bb80 <prvAddNewTaskToReadyList+0xc8>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	4a18      	ldr	r2, [pc, #96]	; (800bb80 <prvAddNewTaskToReadyList+0xc8>)
 800bb20:	6013      	str	r3, [r2, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4a15      	ldr	r2, [pc, #84]	; (800bb84 <prvAddNewTaskToReadyList+0xcc>)
 800bb30:	441a      	add	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3304      	adds	r3, #4
 800bb36:	4619      	mov	r1, r3
 800bb38:	4610      	mov	r0, r2
 800bb3a:	f7fe fe3d 	bl	800a7b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb3e:	f001 f811 	bl	800cb64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb42:	4b0d      	ldr	r3, [pc, #52]	; (800bb78 <prvAddNewTaskToReadyList+0xc0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00e      	beq.n	800bb68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb4a:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <prvAddNewTaskToReadyList+0xbc>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d207      	bcs.n	800bb68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb58:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <prvAddNewTaskToReadyList+0xd0>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	24000948 	.word	0x24000948
 800bb74:	24000848 	.word	0x24000848
 800bb78:	24000954 	.word	0x24000954
 800bb7c:	24000964 	.word	0x24000964
 800bb80:	24000950 	.word	0x24000950
 800bb84:	2400084c 	.word	0x2400084c
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d017      	beq.n	800bbce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <vTaskDelay+0x60>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <vTaskDelay+0x30>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbbc:	f000 f87a 	bl	800bcb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fe08 	bl	800c7d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbc8:	f000 f882 	bl	800bcd0 <xTaskResumeAll>
 800bbcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d107      	bne.n	800bbe4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bbd4:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <vTaskDelay+0x64>)
 800bbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbe4:	bf00      	nop
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	24000970 	.word	0x24000970
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc02:	463a      	mov	r2, r7
 800bc04:	1d39      	adds	r1, r7, #4
 800bc06:	f107 0308 	add.w	r3, r7, #8
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f4 fdc0 	bl	8000790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	9202      	str	r2, [sp, #8]
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	460a      	mov	r2, r1
 800bc22:	491e      	ldr	r1, [pc, #120]	; (800bc9c <vTaskStartScheduler+0xa8>)
 800bc24:	481e      	ldr	r0, [pc, #120]	; (800bca0 <vTaskStartScheduler+0xac>)
 800bc26:	f7ff fe1d 	bl	800b864 <xTaskCreateStatic>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4a1d      	ldr	r2, [pc, #116]	; (800bca4 <vTaskStartScheduler+0xb0>)
 800bc2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc30:	4b1c      	ldr	r3, [pc, #112]	; (800bca4 <vTaskStartScheduler+0xb0>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d002      	beq.n	800bc3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e001      	b.n	800bc42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d116      	bne.n	800bc76 <vTaskStartScheduler+0x82>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	613b      	str	r3, [r7, #16]
}
 800bc5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc5c:	4b12      	ldr	r3, [pc, #72]	; (800bca8 <vTaskStartScheduler+0xb4>)
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc64:	4b11      	ldr	r3, [pc, #68]	; (800bcac <vTaskStartScheduler+0xb8>)
 800bc66:	2201      	movs	r2, #1
 800bc68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc6a:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <vTaskStartScheduler+0xbc>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc70:	f000 fea6 	bl	800c9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc74:	e00e      	b.n	800bc94 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7c:	d10a      	bne.n	800bc94 <vTaskStartScheduler+0xa0>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	60fb      	str	r3, [r7, #12]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <vTaskStartScheduler+0x9e>
}
 800bc94:	bf00      	nop
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	0801c0d8 	.word	0x0801c0d8
 800bca0:	0800c289 	.word	0x0800c289
 800bca4:	2400096c 	.word	0x2400096c
 800bca8:	24000968 	.word	0x24000968
 800bcac:	24000954 	.word	0x24000954
 800bcb0:	2400094c 	.word	0x2400094c

0800bcb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bcb8:	4b04      	ldr	r3, [pc, #16]	; (800bccc <vTaskSuspendAll+0x18>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a03      	ldr	r2, [pc, #12]	; (800bccc <vTaskSuspendAll+0x18>)
 800bcc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bcc2:	bf00      	nop
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	24000970 	.word	0x24000970

0800bcd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcde:	4b41      	ldr	r3, [pc, #260]	; (800bde4 <xTaskResumeAll+0x114>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10a      	bne.n	800bcfc <xTaskResumeAll+0x2c>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	603b      	str	r3, [r7, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	e7fe      	b.n	800bcfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcfc:	f000 ff02 	bl	800cb04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd00:	4b38      	ldr	r3, [pc, #224]	; (800bde4 <xTaskResumeAll+0x114>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	4a37      	ldr	r2, [pc, #220]	; (800bde4 <xTaskResumeAll+0x114>)
 800bd08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd0a:	4b36      	ldr	r3, [pc, #216]	; (800bde4 <xTaskResumeAll+0x114>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d161      	bne.n	800bdd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd12:	4b35      	ldr	r3, [pc, #212]	; (800bde8 <xTaskResumeAll+0x118>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d05d      	beq.n	800bdd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd1a:	e02e      	b.n	800bd7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1c:	4b33      	ldr	r3, [pc, #204]	; (800bdec <xTaskResumeAll+0x11c>)
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3318      	adds	r3, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fda2 	bl	800a872 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3304      	adds	r3, #4
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe fd9d 	bl	800a872 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	409a      	lsls	r2, r3
 800bd40:	4b2b      	ldr	r3, [pc, #172]	; (800bdf0 <xTaskResumeAll+0x120>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	4a2a      	ldr	r2, [pc, #168]	; (800bdf0 <xTaskResumeAll+0x120>)
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4a27      	ldr	r2, [pc, #156]	; (800bdf4 <xTaskResumeAll+0x124>)
 800bd58:	441a      	add	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7fe fd29 	bl	800a7b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	4b23      	ldr	r3, [pc, #140]	; (800bdf8 <xTaskResumeAll+0x128>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d302      	bcc.n	800bd7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bd74:	4b21      	ldr	r3, [pc, #132]	; (800bdfc <xTaskResumeAll+0x12c>)
 800bd76:	2201      	movs	r2, #1
 800bd78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd7a:	4b1c      	ldr	r3, [pc, #112]	; (800bdec <xTaskResumeAll+0x11c>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1cc      	bne.n	800bd1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd88:	f000 fb34 	bl	800c3f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd8c:	4b1c      	ldr	r3, [pc, #112]	; (800be00 <xTaskResumeAll+0x130>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d010      	beq.n	800bdba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd98:	f000 f858 	bl	800be4c <xTaskIncrementTick>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bda2:	4b16      	ldr	r3, [pc, #88]	; (800bdfc <xTaskResumeAll+0x12c>)
 800bda4:	2201      	movs	r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1f1      	bne.n	800bd98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bdb4:	4b12      	ldr	r3, [pc, #72]	; (800be00 <xTaskResumeAll+0x130>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdba:	4b10      	ldr	r3, [pc, #64]	; (800bdfc <xTaskResumeAll+0x12c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <xTaskResumeAll+0x134>)
 800bdc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdd6:	f000 fec5 	bl	800cb64 <vPortExitCritical>

	return xAlreadyYielded;
 800bdda:	68bb      	ldr	r3, [r7, #8]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	24000970 	.word	0x24000970
 800bde8:	24000948 	.word	0x24000948
 800bdec:	24000908 	.word	0x24000908
 800bdf0:	24000950 	.word	0x24000950
 800bdf4:	2400084c 	.word	0x2400084c
 800bdf8:	24000848 	.word	0x24000848
 800bdfc:	2400095c 	.word	0x2400095c
 800be00:	24000958 	.word	0x24000958
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be0e:	4b05      	ldr	r3, [pc, #20]	; (800be24 <xTaskGetTickCount+0x1c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be14:	687b      	ldr	r3, [r7, #4]
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	2400094c 	.word	0x2400094c

0800be28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be2e:	f000 ff4b 	bl	800ccc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be32:	2300      	movs	r3, #0
 800be34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be36:	4b04      	ldr	r3, [pc, #16]	; (800be48 <xTaskGetTickCountFromISR+0x20>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be3c:	683b      	ldr	r3, [r7, #0]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2400094c 	.word	0x2400094c

0800be4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be56:	4b4e      	ldr	r3, [pc, #312]	; (800bf90 <xTaskIncrementTick+0x144>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f040 8088 	bne.w	800bf70 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be60:	4b4c      	ldr	r3, [pc, #304]	; (800bf94 <xTaskIncrementTick+0x148>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3301      	adds	r3, #1
 800be66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be68:	4a4a      	ldr	r2, [pc, #296]	; (800bf94 <xTaskIncrementTick+0x148>)
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d120      	bne.n	800beb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be74:	4b48      	ldr	r3, [pc, #288]	; (800bf98 <xTaskIncrementTick+0x14c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <xTaskIncrementTick+0x48>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	603b      	str	r3, [r7, #0]
}
 800be90:	bf00      	nop
 800be92:	e7fe      	b.n	800be92 <xTaskIncrementTick+0x46>
 800be94:	4b40      	ldr	r3, [pc, #256]	; (800bf98 <xTaskIncrementTick+0x14c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	4b40      	ldr	r3, [pc, #256]	; (800bf9c <xTaskIncrementTick+0x150>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a3e      	ldr	r2, [pc, #248]	; (800bf98 <xTaskIncrementTick+0x14c>)
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	4a3e      	ldr	r2, [pc, #248]	; (800bf9c <xTaskIncrementTick+0x150>)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	4b3d      	ldr	r3, [pc, #244]	; (800bfa0 <xTaskIncrementTick+0x154>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3301      	adds	r3, #1
 800beae:	4a3c      	ldr	r2, [pc, #240]	; (800bfa0 <xTaskIncrementTick+0x154>)
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	f000 fa9f 	bl	800c3f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beb6:	4b3b      	ldr	r3, [pc, #236]	; (800bfa4 <xTaskIncrementTick+0x158>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d348      	bcc.n	800bf52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec0:	4b35      	ldr	r3, [pc, #212]	; (800bf98 <xTaskIncrementTick+0x14c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d104      	bne.n	800bed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beca:	4b36      	ldr	r3, [pc, #216]	; (800bfa4 <xTaskIncrementTick+0x158>)
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	601a      	str	r2, [r3, #0]
					break;
 800bed2:	e03e      	b.n	800bf52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed4:	4b30      	ldr	r3, [pc, #192]	; (800bf98 <xTaskIncrementTick+0x14c>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d203      	bcs.n	800bef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800beec:	4a2d      	ldr	r2, [pc, #180]	; (800bfa4 <xTaskIncrementTick+0x158>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bef2:	e02e      	b.n	800bf52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fcba 	bl	800a872 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d004      	beq.n	800bf10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	3318      	adds	r3, #24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fcb1 	bl	800a872 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	2201      	movs	r2, #1
 800bf16:	409a      	lsls	r2, r3
 800bf18:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <xTaskIncrementTick+0x15c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	4a22      	ldr	r2, [pc, #136]	; (800bfa8 <xTaskIncrementTick+0x15c>)
 800bf20:	6013      	str	r3, [r2, #0]
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4a1f      	ldr	r2, [pc, #124]	; (800bfac <xTaskIncrementTick+0x160>)
 800bf30:	441a      	add	r2, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4619      	mov	r1, r3
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7fe fc3d 	bl	800a7b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4b1b      	ldr	r3, [pc, #108]	; (800bfb0 <xTaskIncrementTick+0x164>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d3b9      	bcc.n	800bec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf50:	e7b6      	b.n	800bec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf52:	4b17      	ldr	r3, [pc, #92]	; (800bfb0 <xTaskIncrementTick+0x164>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf58:	4914      	ldr	r1, [pc, #80]	; (800bfac <xTaskIncrementTick+0x160>)
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	440b      	add	r3, r1
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d907      	bls.n	800bf7a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	e004      	b.n	800bf7a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf70:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <xTaskIncrementTick+0x168>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	4a0f      	ldr	r2, [pc, #60]	; (800bfb4 <xTaskIncrementTick+0x168>)
 800bf78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf7a:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <xTaskIncrementTick+0x16c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bf82:	2301      	movs	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf86:	697b      	ldr	r3, [r7, #20]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	24000970 	.word	0x24000970
 800bf94:	2400094c 	.word	0x2400094c
 800bf98:	24000900 	.word	0x24000900
 800bf9c:	24000904 	.word	0x24000904
 800bfa0:	24000960 	.word	0x24000960
 800bfa4:	24000968 	.word	0x24000968
 800bfa8:	24000950 	.word	0x24000950
 800bfac:	2400084c 	.word	0x2400084c
 800bfb0:	24000848 	.word	0x24000848
 800bfb4:	24000958 	.word	0x24000958
 800bfb8:	2400095c 	.word	0x2400095c

0800bfbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfc2:	4b27      	ldr	r3, [pc, #156]	; (800c060 <vTaskSwitchContext+0xa4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d003      	beq.n	800bfd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfca:	4b26      	ldr	r3, [pc, #152]	; (800c064 <vTaskSwitchContext+0xa8>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfd0:	e03f      	b.n	800c052 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bfd2:	4b24      	ldr	r3, [pc, #144]	; (800c064 <vTaskSwitchContext+0xa8>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd8:	4b23      	ldr	r3, [pc, #140]	; (800c068 <vTaskSwitchContext+0xac>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	fab3 f383 	clz	r3, r3
 800bfe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bfe6:	7afb      	ldrb	r3, [r7, #11]
 800bfe8:	f1c3 031f 	rsb	r3, r3, #31
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	491f      	ldr	r1, [pc, #124]	; (800c06c <vTaskSwitchContext+0xb0>)
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	440b      	add	r3, r1
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	607b      	str	r3, [r7, #4]
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <vTaskSwitchContext+0x5a>
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4a12      	ldr	r2, [pc, #72]	; (800c06c <vTaskSwitchContext+0xb0>)
 800c024:	4413      	add	r3, r2
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	3308      	adds	r3, #8
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d104      	bne.n	800c048 <vTaskSwitchContext+0x8c>
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	605a      	str	r2, [r3, #4]
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	4a08      	ldr	r2, [pc, #32]	; (800c070 <vTaskSwitchContext+0xb4>)
 800c050:	6013      	str	r3, [r2, #0]
}
 800c052:	bf00      	nop
 800c054:	371c      	adds	r7, #28
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	24000970 	.word	0x24000970
 800c064:	2400095c 	.word	0x2400095c
 800c068:	24000950 	.word	0x24000950
 800c06c:	2400084c 	.word	0x2400084c
 800c070:	24000848 	.word	0x24000848

0800c074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10a      	bne.n	800c09a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	60fb      	str	r3, [r7, #12]
}
 800c096:	bf00      	nop
 800c098:	e7fe      	b.n	800c098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c09a:	4b07      	ldr	r3, [pc, #28]	; (800c0b8 <vTaskPlaceOnEventList+0x44>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3318      	adds	r3, #24
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7fe fbac 	bl	800a800 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	6838      	ldr	r0, [r7, #0]
 800c0ac:	f000 fb94 	bl	800c7d8 <prvAddCurrentTaskToDelayedList>
}
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	24000848 	.word	0x24000848

0800c0bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10a      	bne.n	800c0e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	60fb      	str	r3, [r7, #12]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	3318      	adds	r3, #24
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fbc0 	bl	800a872 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f2:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <xTaskRemoveFromEventList+0xac>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d11c      	bne.n	800c134 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fbb7 	bl	800a872 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	2201      	movs	r2, #1
 800c10a:	409a      	lsls	r2, r3
 800c10c:	4b17      	ldr	r3, [pc, #92]	; (800c16c <xTaskRemoveFromEventList+0xb0>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4313      	orrs	r3, r2
 800c112:	4a16      	ldr	r2, [pc, #88]	; (800c16c <xTaskRemoveFromEventList+0xb0>)
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4a13      	ldr	r2, [pc, #76]	; (800c170 <xTaskRemoveFromEventList+0xb4>)
 800c124:	441a      	add	r2, r3
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3304      	adds	r3, #4
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f7fe fb43 	bl	800a7b8 <vListInsertEnd>
 800c132:	e005      	b.n	800c140 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3318      	adds	r3, #24
 800c138:	4619      	mov	r1, r3
 800c13a:	480e      	ldr	r0, [pc, #56]	; (800c174 <xTaskRemoveFromEventList+0xb8>)
 800c13c:	f7fe fb3c 	bl	800a7b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <xTaskRemoveFromEventList+0xbc>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d905      	bls.n	800c15a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c14e:	2301      	movs	r3, #1
 800c150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c152:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <xTaskRemoveFromEventList+0xc0>)
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e001      	b.n	800c15e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c15e:	697b      	ldr	r3, [r7, #20]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	24000970 	.word	0x24000970
 800c16c:	24000950 	.word	0x24000950
 800c170:	2400084c 	.word	0x2400084c
 800c174:	24000908 	.word	0x24000908
 800c178:	24000848 	.word	0x24000848
 800c17c:	2400095c 	.word	0x2400095c

0800c180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c188:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <vTaskInternalSetTimeOutState+0x24>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <vTaskInternalSetTimeOutState+0x28>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	605a      	str	r2, [r3, #4]
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	24000960 	.word	0x24000960
 800c1a8:	2400094c 	.word	0x2400094c

0800c1ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	613b      	str	r3, [r7, #16]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c1ee:	f000 fc89 	bl	800cb04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1f2:	4b1d      	ldr	r3, [pc, #116]	; (800c268 <xTaskCheckForTimeOut+0xbc>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	69ba      	ldr	r2, [r7, #24]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d102      	bne.n	800c212 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
 800c210:	e023      	b.n	800c25a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b15      	ldr	r3, [pc, #84]	; (800c26c <xTaskCheckForTimeOut+0xc0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d007      	beq.n	800c22e <xTaskCheckForTimeOut+0x82>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	69ba      	ldr	r2, [r7, #24]
 800c224:	429a      	cmp	r2, r3
 800c226:	d302      	bcc.n	800c22e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c228:	2301      	movs	r3, #1
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	e015      	b.n	800c25a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	429a      	cmp	r2, r3
 800c236:	d20b      	bcs.n	800c250 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff ff9b 	bl	800c180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	e004      	b.n	800c25a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c256:	2301      	movs	r3, #1
 800c258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c25a:	f000 fc83 	bl	800cb64 <vPortExitCritical>

	return xReturn;
 800c25e:	69fb      	ldr	r3, [r7, #28]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3720      	adds	r7, #32
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	2400094c 	.word	0x2400094c
 800c26c:	24000960 	.word	0x24000960

0800c270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c274:	4b03      	ldr	r3, [pc, #12]	; (800c284 <vTaskMissedYield+0x14>)
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
}
 800c27a:	bf00      	nop
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	2400095c 	.word	0x2400095c

0800c288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c290:	f000 f852 	bl	800c338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c294:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <prvIdleTask+0x28>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d9f9      	bls.n	800c290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <prvIdleTask+0x2c>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2ac:	e7f0      	b.n	800c290 <prvIdleTask+0x8>
 800c2ae:	bf00      	nop
 800c2b0:	2400084c 	.word	0x2400084c
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2be:	2300      	movs	r3, #0
 800c2c0:	607b      	str	r3, [r7, #4]
 800c2c2:	e00c      	b.n	800c2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4a12      	ldr	r2, [pc, #72]	; (800c318 <prvInitialiseTaskLists+0x60>)
 800c2d0:	4413      	add	r3, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fa43 	bl	800a75e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b06      	cmp	r3, #6
 800c2e2:	d9ef      	bls.n	800c2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2e4:	480d      	ldr	r0, [pc, #52]	; (800c31c <prvInitialiseTaskLists+0x64>)
 800c2e6:	f7fe fa3a 	bl	800a75e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2ea:	480d      	ldr	r0, [pc, #52]	; (800c320 <prvInitialiseTaskLists+0x68>)
 800c2ec:	f7fe fa37 	bl	800a75e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2f0:	480c      	ldr	r0, [pc, #48]	; (800c324 <prvInitialiseTaskLists+0x6c>)
 800c2f2:	f7fe fa34 	bl	800a75e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2f6:	480c      	ldr	r0, [pc, #48]	; (800c328 <prvInitialiseTaskLists+0x70>)
 800c2f8:	f7fe fa31 	bl	800a75e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2fc:	480b      	ldr	r0, [pc, #44]	; (800c32c <prvInitialiseTaskLists+0x74>)
 800c2fe:	f7fe fa2e 	bl	800a75e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c302:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <prvInitialiseTaskLists+0x78>)
 800c304:	4a05      	ldr	r2, [pc, #20]	; (800c31c <prvInitialiseTaskLists+0x64>)
 800c306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <prvInitialiseTaskLists+0x7c>)
 800c30a:	4a05      	ldr	r2, [pc, #20]	; (800c320 <prvInitialiseTaskLists+0x68>)
 800c30c:	601a      	str	r2, [r3, #0]
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2400084c 	.word	0x2400084c
 800c31c:	240008d8 	.word	0x240008d8
 800c320:	240008ec 	.word	0x240008ec
 800c324:	24000908 	.word	0x24000908
 800c328:	2400091c 	.word	0x2400091c
 800c32c:	24000934 	.word	0x24000934
 800c330:	24000900 	.word	0x24000900
 800c334:	24000904 	.word	0x24000904

0800c338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c33e:	e019      	b.n	800c374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c340:	f000 fbe0 	bl	800cb04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c344:	4b10      	ldr	r3, [pc, #64]	; (800c388 <prvCheckTasksWaitingTermination+0x50>)
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3304      	adds	r3, #4
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fa8e 	bl	800a872 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c356:	4b0d      	ldr	r3, [pc, #52]	; (800c38c <prvCheckTasksWaitingTermination+0x54>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	4a0b      	ldr	r2, [pc, #44]	; (800c38c <prvCheckTasksWaitingTermination+0x54>)
 800c35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <prvCheckTasksWaitingTermination+0x58>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3b01      	subs	r3, #1
 800c366:	4a0a      	ldr	r2, [pc, #40]	; (800c390 <prvCheckTasksWaitingTermination+0x58>)
 800c368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c36a:	f000 fbfb 	bl	800cb64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f810 	bl	800c394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <prvCheckTasksWaitingTermination+0x58>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e1      	bne.n	800c340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c37c:	bf00      	nop
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2400091c 	.word	0x2400091c
 800c38c:	24000948 	.word	0x24000948
 800c390:	24000930 	.word	0x24000930

0800c394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d108      	bne.n	800c3b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fd90 	bl	800ced0 <vPortFree>
				vPortFree( pxTCB );
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fd8d 	bl	800ced0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3b6:	e018      	b.n	800c3ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d103      	bne.n	800c3ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fd84 	bl	800ced0 <vPortFree>
	}
 800c3c8:	e00f      	b.n	800c3ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d00a      	beq.n	800c3ea <prvDeleteTCB+0x56>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60fb      	str	r3, [r7, #12]
}
 800c3e6:	bf00      	nop
 800c3e8:	e7fe      	b.n	800c3e8 <prvDeleteTCB+0x54>
	}
 800c3ea:	bf00      	nop
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <prvResetNextTaskUnblockTime+0x38>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c404:	4b0a      	ldr	r3, [pc, #40]	; (800c430 <prvResetNextTaskUnblockTime+0x3c>)
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c40c:	e008      	b.n	800c420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c40e:	4b07      	ldr	r3, [pc, #28]	; (800c42c <prvResetNextTaskUnblockTime+0x38>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4a04      	ldr	r2, [pc, #16]	; (800c430 <prvResetNextTaskUnblockTime+0x3c>)
 800c41e:	6013      	str	r3, [r2, #0]
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	24000900 	.word	0x24000900
 800c430:	24000968 	.word	0x24000968

0800c434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <xTaskGetSchedulerState+0x34>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d102      	bne.n	800c448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c442:	2301      	movs	r3, #1
 800c444:	607b      	str	r3, [r7, #4]
 800c446:	e008      	b.n	800c45a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c448:	4b08      	ldr	r3, [pc, #32]	; (800c46c <xTaskGetSchedulerState+0x38>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c450:	2302      	movs	r3, #2
 800c452:	607b      	str	r3, [r7, #4]
 800c454:	e001      	b.n	800c45a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c456:	2300      	movs	r3, #0
 800c458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c45a:	687b      	ldr	r3, [r7, #4]
	}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	24000954 	.word	0x24000954
 800c46c:	24000970 	.word	0x24000970

0800c470 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d069      	beq.n	800c55a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48a:	4b36      	ldr	r3, [pc, #216]	; (800c564 <xTaskPriorityInherit+0xf4>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	429a      	cmp	r2, r3
 800c492:	d259      	bcs.n	800c548 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	db06      	blt.n	800c4aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49c:	4b31      	ldr	r3, [pc, #196]	; (800c564 <xTaskPriorityInherit+0xf4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a2:	f1c3 0207 	rsb	r2, r3, #7
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	6959      	ldr	r1, [r3, #20]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4a2b      	ldr	r2, [pc, #172]	; (800c568 <xTaskPriorityInherit+0xf8>)
 800c4bc:	4413      	add	r3, r2
 800c4be:	4299      	cmp	r1, r3
 800c4c0:	d13a      	bne.n	800c538 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe f9d3 	bl	800a872 <uxListRemove>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d115      	bne.n	800c4fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	4924      	ldr	r1, [pc, #144]	; (800c568 <xTaskPriorityInherit+0xf8>)
 800c4d8:	4613      	mov	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	440b      	add	r3, r1
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10a      	bne.n	800c4fe <xTaskPriorityInherit+0x8e>
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f2:	43da      	mvns	r2, r3
 800c4f4:	4b1d      	ldr	r3, [pc, #116]	; (800c56c <xTaskPriorityInherit+0xfc>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	4a1c      	ldr	r2, [pc, #112]	; (800c56c <xTaskPriorityInherit+0xfc>)
 800c4fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4fe:	4b19      	ldr	r3, [pc, #100]	; (800c564 <xTaskPriorityInherit+0xf4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50c:	2201      	movs	r2, #1
 800c50e:	409a      	lsls	r2, r3
 800c510:	4b16      	ldr	r3, [pc, #88]	; (800c56c <xTaskPriorityInherit+0xfc>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4313      	orrs	r3, r2
 800c516:	4a15      	ldr	r2, [pc, #84]	; (800c56c <xTaskPriorityInherit+0xfc>)
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51e:	4613      	mov	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4a10      	ldr	r2, [pc, #64]	; (800c568 <xTaskPriorityInherit+0xf8>)
 800c528:	441a      	add	r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fe f941 	bl	800a7b8 <vListInsertEnd>
 800c536:	e004      	b.n	800c542 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <xTaskPriorityInherit+0xf4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c542:	2301      	movs	r3, #1
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e008      	b.n	800c55a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c54c:	4b05      	ldr	r3, [pc, #20]	; (800c564 <xTaskPriorityInherit+0xf4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c552:	429a      	cmp	r2, r3
 800c554:	d201      	bcs.n	800c55a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c55a:	68fb      	ldr	r3, [r7, #12]
	}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	24000848 	.word	0x24000848
 800c568:	2400084c 	.word	0x2400084c
 800c56c:	24000950 	.word	0x24000950

0800c570 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d06e      	beq.n	800c664 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c586:	4b3a      	ldr	r3, [pc, #232]	; (800c670 <xTaskPriorityDisinherit+0x100>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d00a      	beq.n	800c5a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60fb      	str	r3, [r7, #12]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	60bb      	str	r3, [r7, #8]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5c8:	1e5a      	subs	r2, r3, #1
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d044      	beq.n	800c664 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d140      	bne.n	800c664 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe f943 	bl	800a872 <uxListRemove>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d115      	bne.n	800c61e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f6:	491f      	ldr	r1, [pc, #124]	; (800c674 <xTaskPriorityDisinherit+0x104>)
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	440b      	add	r3, r1
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <xTaskPriorityDisinherit+0xae>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60c:	2201      	movs	r2, #1
 800c60e:	fa02 f303 	lsl.w	r3, r2, r3
 800c612:	43da      	mvns	r2, r3
 800c614:	4b18      	ldr	r3, [pc, #96]	; (800c678 <xTaskPriorityDisinherit+0x108>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4013      	ands	r3, r2
 800c61a:	4a17      	ldr	r2, [pc, #92]	; (800c678 <xTaskPriorityDisinherit+0x108>)
 800c61c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	f1c3 0207 	rsb	r2, r3, #7
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	2201      	movs	r2, #1
 800c638:	409a      	lsls	r2, r3
 800c63a:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <xTaskPriorityDisinherit+0x108>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4313      	orrs	r3, r2
 800c640:	4a0d      	ldr	r2, [pc, #52]	; (800c678 <xTaskPriorityDisinherit+0x108>)
 800c642:	6013      	str	r3, [r2, #0]
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4a08      	ldr	r2, [pc, #32]	; (800c674 <xTaskPriorityDisinherit+0x104>)
 800c652:	441a      	add	r2, r3
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	3304      	adds	r3, #4
 800c658:	4619      	mov	r1, r3
 800c65a:	4610      	mov	r0, r2
 800c65c:	f7fe f8ac 	bl	800a7b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c660:	2301      	movs	r3, #1
 800c662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c664:	697b      	ldr	r3, [r7, #20]
	}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	24000848 	.word	0x24000848
 800c674:	2400084c 	.word	0x2400084c
 800c678:	24000950 	.word	0x24000950

0800c67c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c68a:	2301      	movs	r3, #1
 800c68c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 8083 	beq.w	800c79c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10a      	bne.n	800c6b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	60fb      	str	r3, [r7, #12]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d902      	bls.n	800c6c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	e002      	b.n	800c6ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	69fa      	ldr	r2, [r7, #28]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d063      	beq.n	800c79c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d15e      	bne.n	800c79c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6de:	4b31      	ldr	r3, [pc, #196]	; (800c7a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	69ba      	ldr	r2, [r7, #24]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d10a      	bne.n	800c6fe <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60bb      	str	r3, [r7, #8]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	69fa      	ldr	r2, [r7, #28]
 800c708:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	db04      	blt.n	800c71c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f1c3 0207 	rsb	r2, r3, #7
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	6959      	ldr	r1, [r3, #20]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4a1f      	ldr	r2, [pc, #124]	; (800c7a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c72c:	4413      	add	r3, r2
 800c72e:	4299      	cmp	r1, r3
 800c730:	d134      	bne.n	800c79c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	3304      	adds	r3, #4
 800c736:	4618      	mov	r0, r3
 800c738:	f7fe f89b 	bl	800a872 <uxListRemove>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d115      	bne.n	800c76e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c746:	4918      	ldr	r1, [pc, #96]	; (800c7a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c748:	4613      	mov	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	440b      	add	r3, r1
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	2201      	movs	r2, #1
 800c75e:	fa02 f303 	lsl.w	r3, r2, r3
 800c762:	43da      	mvns	r2, r3
 800c764:	4b11      	ldr	r3, [pc, #68]	; (800c7ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4013      	ands	r3, r2
 800c76a:	4a10      	ldr	r2, [pc, #64]	; (800c7ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c76c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c772:	2201      	movs	r2, #1
 800c774:	409a      	lsls	r2, r3
 800c776:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	4a0b      	ldr	r2, [pc, #44]	; (800c7ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c784:	4613      	mov	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4a06      	ldr	r2, [pc, #24]	; (800c7a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c78e:	441a      	add	r2, r3
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fe f80e 	bl	800a7b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c79c:	bf00      	nop
 800c79e:	3720      	adds	r7, #32
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	24000848 	.word	0x24000848
 800c7a8:	2400084c 	.word	0x2400084c
 800c7ac:	24000950 	.word	0x24000950

0800c7b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c7b0:	b480      	push	{r7}
 800c7b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7b4:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d004      	beq.n	800c7c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7bc:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7c2:	3201      	adds	r2, #1
 800c7c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c7c6:	4b03      	ldr	r3, [pc, #12]	; (800c7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
	}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	24000848 	.word	0x24000848

0800c7d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7e2:	4b29      	ldr	r3, [pc, #164]	; (800c888 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7e8:	4b28      	ldr	r3, [pc, #160]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe f83f 	bl	800a872 <uxListRemove>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7fa:	4b24      	ldr	r3, [pc, #144]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	2201      	movs	r2, #1
 800c802:	fa02 f303 	lsl.w	r3, r2, r3
 800c806:	43da      	mvns	r2, r3
 800c808:	4b21      	ldr	r3, [pc, #132]	; (800c890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4013      	ands	r3, r2
 800c80e:	4a20      	ldr	r2, [pc, #128]	; (800c890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c810:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c818:	d10a      	bne.n	800c830 <prvAddCurrentTaskToDelayedList+0x58>
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c820:	4b1a      	ldr	r3, [pc, #104]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	481a      	ldr	r0, [pc, #104]	; (800c894 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c82a:	f7fd ffc5 	bl	800a7b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c82e:	e026      	b.n	800c87e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4413      	add	r3, r2
 800c836:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c838:	4b14      	ldr	r3, [pc, #80]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	429a      	cmp	r2, r3
 800c846:	d209      	bcs.n	800c85c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c848:	4b13      	ldr	r3, [pc, #76]	; (800c898 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3304      	adds	r3, #4
 800c852:	4619      	mov	r1, r3
 800c854:	4610      	mov	r0, r2
 800c856:	f7fd ffd3 	bl	800a800 <vListInsert>
}
 800c85a:	e010      	b.n	800c87e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3304      	adds	r3, #4
 800c866:	4619      	mov	r1, r3
 800c868:	4610      	mov	r0, r2
 800c86a:	f7fd ffc9 	bl	800a800 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c86e:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	429a      	cmp	r2, r3
 800c876:	d202      	bcs.n	800c87e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c878:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	6013      	str	r3, [r2, #0]
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	2400094c 	.word	0x2400094c
 800c88c:	24000848 	.word	0x24000848
 800c890:	24000950 	.word	0x24000950
 800c894:	24000934 	.word	0x24000934
 800c898:	24000904 	.word	0x24000904
 800c89c:	24000900 	.word	0x24000900
 800c8a0:	24000968 	.word	0x24000968

0800c8a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3b04      	subs	r3, #4
 800c8b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3b04      	subs	r3, #4
 800c8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f023 0201 	bic.w	r2, r3, #1
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3b04      	subs	r3, #4
 800c8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <pxPortInitialiseStack+0x64>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3b14      	subs	r3, #20
 800c8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3b04      	subs	r3, #4
 800c8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f06f 0202 	mvn.w	r2, #2
 800c8f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3b20      	subs	r3, #32
 800c8f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	0800c90d 	.word	0x0800c90d

0800c90c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c916:	4b12      	ldr	r3, [pc, #72]	; (800c960 <prvTaskExitError+0x54>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91e:	d00a      	beq.n	800c936 <prvTaskExitError+0x2a>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60fb      	str	r3, [r7, #12]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <prvTaskExitError+0x28>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60bb      	str	r3, [r7, #8]
}
 800c948:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c94a:	bf00      	nop
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0fc      	beq.n	800c94c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c952:	bf00      	nop
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	24000024 	.word	0x24000024
	...

0800c970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c970:	4b07      	ldr	r3, [pc, #28]	; (800c990 <pxCurrentTCBConst2>)
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	6808      	ldr	r0, [r1, #0]
 800c976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97a:	f380 8809 	msr	PSP, r0
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8811 	msr	BASEPRI, r0
 800c98a:	4770      	bx	lr
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst2>:
 800c990:	24000848 	.word	0x24000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c998:	4808      	ldr	r0, [pc, #32]	; (800c9bc <prvPortStartFirstTask+0x24>)
 800c99a:	6800      	ldr	r0, [r0, #0]
 800c99c:	6800      	ldr	r0, [r0, #0]
 800c99e:	f380 8808 	msr	MSP, r0
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8814 	msr	CONTROL, r0
 800c9aa:	b662      	cpsie	i
 800c9ac:	b661      	cpsie	f
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	df00      	svc	0
 800c9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9ba:	bf00      	nop
 800c9bc:	e000ed08 	.word	0xe000ed08

0800c9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9c6:	4b46      	ldr	r3, [pc, #280]	; (800cae0 <xPortStartScheduler+0x120>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a46      	ldr	r2, [pc, #280]	; (800cae4 <xPortStartScheduler+0x124>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d10a      	bne.n	800c9e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	613b      	str	r3, [r7, #16]
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9e6:	4b3e      	ldr	r3, [pc, #248]	; (800cae0 <xPortStartScheduler+0x120>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a3f      	ldr	r2, [pc, #252]	; (800cae8 <xPortStartScheduler+0x128>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d10a      	bne.n	800ca06 <xPortStartScheduler+0x46>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	60fb      	str	r3, [r7, #12]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca06:	4b39      	ldr	r3, [pc, #228]	; (800caec <xPortStartScheduler+0x12c>)
 800ca08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	22ff      	movs	r2, #255	; 0xff
 800ca16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca20:	78fb      	ldrb	r3, [r7, #3]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	4b31      	ldr	r3, [pc, #196]	; (800caf0 <xPortStartScheduler+0x130>)
 800ca2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca2e:	4b31      	ldr	r3, [pc, #196]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca30:	2207      	movs	r2, #7
 800ca32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca34:	e009      	b.n	800ca4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca36:	4b2f      	ldr	r3, [pc, #188]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	4a2d      	ldr	r2, [pc, #180]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca52:	2b80      	cmp	r3, #128	; 0x80
 800ca54:	d0ef      	beq.n	800ca36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca56:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1c3 0307 	rsb	r3, r3, #7
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d00a      	beq.n	800ca78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	60bb      	str	r3, [r7, #8]
}
 800ca74:	bf00      	nop
 800ca76:	e7fe      	b.n	800ca76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	021b      	lsls	r3, r3, #8
 800ca7e:	4a1d      	ldr	r2, [pc, #116]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca82:	4b1c      	ldr	r3, [pc, #112]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca8a:	4a1a      	ldr	r2, [pc, #104]	; (800caf4 <xPortStartScheduler+0x134>)
 800ca8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca96:	4b18      	ldr	r3, [pc, #96]	; (800caf8 <xPortStartScheduler+0x138>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a17      	ldr	r2, [pc, #92]	; (800caf8 <xPortStartScheduler+0x138>)
 800ca9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800caa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800caa2:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <xPortStartScheduler+0x138>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a14      	ldr	r2, [pc, #80]	; (800caf8 <xPortStartScheduler+0x138>)
 800caa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800caac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800caae:	f000 f8dd 	bl	800cc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cab2:	4b12      	ldr	r3, [pc, #72]	; (800cafc <xPortStartScheduler+0x13c>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cab8:	f000 f8fc 	bl	800ccb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cabc:	4b10      	ldr	r3, [pc, #64]	; (800cb00 <xPortStartScheduler+0x140>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a0f      	ldr	r2, [pc, #60]	; (800cb00 <xPortStartScheduler+0x140>)
 800cac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cac8:	f7ff ff66 	bl	800c998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cacc:	f7ff fa76 	bl	800bfbc <vTaskSwitchContext>
	prvTaskExitError();
 800cad0:	f7ff ff1c 	bl	800c90c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	e000ed00 	.word	0xe000ed00
 800cae4:	410fc271 	.word	0x410fc271
 800cae8:	410fc270 	.word	0x410fc270
 800caec:	e000e400 	.word	0xe000e400
 800caf0:	24000974 	.word	0x24000974
 800caf4:	24000978 	.word	0x24000978
 800caf8:	e000ed20 	.word	0xe000ed20
 800cafc:	24000024 	.word	0x24000024
 800cb00:	e000ef34 	.word	0xe000ef34

0800cb04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	607b      	str	r3, [r7, #4]
}
 800cb1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <vPortEnterCritical+0x58>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	4a0d      	ldr	r2, [pc, #52]	; (800cb5c <vPortEnterCritical+0x58>)
 800cb26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <vPortEnterCritical+0x58>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d10f      	bne.n	800cb50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb30:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <vPortEnterCritical+0x5c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	603b      	str	r3, [r7, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <vPortEnterCritical+0x4a>
	}
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	24000024 	.word	0x24000024
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb6a:	4b12      	ldr	r3, [pc, #72]	; (800cbb4 <vPortExitCritical+0x50>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <vPortExitCritical+0x24>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	607b      	str	r3, [r7, #4]
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb88:	4b0a      	ldr	r3, [pc, #40]	; (800cbb4 <vPortExitCritical+0x50>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	4a09      	ldr	r2, [pc, #36]	; (800cbb4 <vPortExitCritical+0x50>)
 800cb90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb92:	4b08      	ldr	r3, [pc, #32]	; (800cbb4 <vPortExitCritical+0x50>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <vPortExitCritical+0x42>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	f383 8811 	msr	BASEPRI, r3
}
 800cba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cba6:	bf00      	nop
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	24000024 	.word	0x24000024
	...

0800cbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbc0:	f3ef 8009 	mrs	r0, PSP
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <pxCurrentTCBConst>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	f01e 0f10 	tst.w	lr, #16
 800cbd0:	bf08      	it	eq
 800cbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbda:	6010      	str	r0, [r2, #0]
 800cbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbe4:	f380 8811 	msr	BASEPRI, r0
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f7ff f9e4 	bl	800bfbc <vTaskSwitchContext>
 800cbf4:	f04f 0000 	mov.w	r0, #0
 800cbf8:	f380 8811 	msr	BASEPRI, r0
 800cbfc:	bc09      	pop	{r0, r3}
 800cbfe:	6819      	ldr	r1, [r3, #0]
 800cc00:	6808      	ldr	r0, [r1, #0]
 800cc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc06:	f01e 0f10 	tst.w	lr, #16
 800cc0a:	bf08      	it	eq
 800cc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc10:	f380 8809 	msr	PSP, r0
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst>:
 800cc20:	24000848 	.word	0x24000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	607b      	str	r3, [r7, #4]
}
 800cc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc42:	f7ff f903 	bl	800be4c <xTaskIncrementTick>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc4c:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <SysTick_Handler+0x40>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f383 8811 	msr	BASEPRI, r3
}
 800cc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc70:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <vPortSetupTimerInterrupt+0x34>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <vPortSetupTimerInterrupt+0x38>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc7c:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <vPortSetupTimerInterrupt+0x3c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <vPortSetupTimerInterrupt+0x40>)
 800cc82:	fba2 2303 	umull	r2, r3, r2, r3
 800cc86:	099b      	lsrs	r3, r3, #6
 800cc88:	4a09      	ldr	r2, [pc, #36]	; (800ccb0 <vPortSetupTimerInterrupt+0x44>)
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc8e:	4b04      	ldr	r3, [pc, #16]	; (800cca0 <vPortSetupTimerInterrupt+0x34>)
 800cc90:	2207      	movs	r2, #7
 800cc92:	601a      	str	r2, [r3, #0]
}
 800cc94:	bf00      	nop
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	e000e010 	.word	0xe000e010
 800cca4:	e000e018 	.word	0xe000e018
 800cca8:	24000000 	.word	0x24000000
 800ccac:	10624dd3 	.word	0x10624dd3
 800ccb0:	e000e014 	.word	0xe000e014

0800ccb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ccb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ccc4 <vPortEnableVFP+0x10>
 800ccb8:	6801      	ldr	r1, [r0, #0]
 800ccba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ccbe:	6001      	str	r1, [r0, #0]
 800ccc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ccc2:	bf00      	nop
 800ccc4:	e000ed88 	.word	0xe000ed88

0800ccc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccce:	f3ef 8305 	mrs	r3, IPSR
 800ccd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2b0f      	cmp	r3, #15
 800ccd8:	d914      	bls.n	800cd04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <vPortValidateInterruptPriority+0x70>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4413      	add	r3, r2
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cce4:	4b15      	ldr	r3, [pc, #84]	; (800cd3c <vPortValidateInterruptPriority+0x74>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	7afa      	ldrb	r2, [r7, #11]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d20a      	bcs.n	800cd04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	607b      	str	r3, [r7, #4]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd04:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <vPortValidateInterruptPriority+0x78>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd0c:	4b0d      	ldr	r3, [pc, #52]	; (800cd44 <vPortValidateInterruptPriority+0x7c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d90a      	bls.n	800cd2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd18:	f383 8811 	msr	BASEPRI, r3
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	f3bf 8f4f 	dsb	sy
 800cd24:	603b      	str	r3, [r7, #0]
}
 800cd26:	bf00      	nop
 800cd28:	e7fe      	b.n	800cd28 <vPortValidateInterruptPriority+0x60>
	}
 800cd2a:	bf00      	nop
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	e000e3f0 	.word	0xe000e3f0
 800cd3c:	24000974 	.word	0x24000974
 800cd40:	e000ed0c 	.word	0xe000ed0c
 800cd44:	24000978 	.word	0x24000978

0800cd48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd50:	2300      	movs	r3, #0
 800cd52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd54:	f7fe ffae 	bl	800bcb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd58:	4b58      	ldr	r3, [pc, #352]	; (800cebc <pvPortMalloc+0x174>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd60:	f000 f910 	bl	800cf84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd64:	4b56      	ldr	r3, [pc, #344]	; (800cec0 <pvPortMalloc+0x178>)
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f040 808e 	bne.w	800ce8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d01d      	beq.n	800cdb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd78:	2208      	movs	r2, #8
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f003 0307 	and.w	r3, r3, #7
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d014      	beq.n	800cdb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f023 0307 	bic.w	r3, r3, #7
 800cd90:	3308      	adds	r3, #8
 800cd92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00a      	beq.n	800cdb4 <pvPortMalloc+0x6c>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	617b      	str	r3, [r7, #20]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d069      	beq.n	800ce8e <pvPortMalloc+0x146>
 800cdba:	4b42      	ldr	r3, [pc, #264]	; (800cec4 <pvPortMalloc+0x17c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d864      	bhi.n	800ce8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cdc4:	4b40      	ldr	r3, [pc, #256]	; (800cec8 <pvPortMalloc+0x180>)
 800cdc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdc8:	4b3f      	ldr	r3, [pc, #252]	; (800cec8 <pvPortMalloc+0x180>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdce:	e004      	b.n	800cdda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d903      	bls.n	800cdec <pvPortMalloc+0xa4>
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1f1      	bne.n	800cdd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdec:	4b33      	ldr	r3, [pc, #204]	; (800cebc <pvPortMalloc+0x174>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d04b      	beq.n	800ce8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdf6:	6a3b      	ldr	r3, [r7, #32]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2208      	movs	r2, #8
 800cdfc:	4413      	add	r3, r2
 800cdfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	1ad2      	subs	r2, r2, r3
 800ce10:	2308      	movs	r3, #8
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d91f      	bls.n	800ce58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <pvPortMalloc+0xf8>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	613b      	str	r3, [r7, #16]
}
 800ce3c:	bf00      	nop
 800ce3e:	e7fe      	b.n	800ce3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	1ad2      	subs	r2, r2, r3
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce52:	69b8      	ldr	r0, [r7, #24]
 800ce54:	f000 f8f8 	bl	800d048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce58:	4b1a      	ldr	r3, [pc, #104]	; (800cec4 <pvPortMalloc+0x17c>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	4a18      	ldr	r2, [pc, #96]	; (800cec4 <pvPortMalloc+0x17c>)
 800ce64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce66:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <pvPortMalloc+0x17c>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	4b18      	ldr	r3, [pc, #96]	; (800cecc <pvPortMalloc+0x184>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d203      	bcs.n	800ce7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce72:	4b14      	ldr	r3, [pc, #80]	; (800cec4 <pvPortMalloc+0x17c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a15      	ldr	r2, [pc, #84]	; (800cecc <pvPortMalloc+0x184>)
 800ce78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <pvPortMalloc+0x178>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	431a      	orrs	r2, r3
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce8e:	f7fe ff1f 	bl	800bcd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00a      	beq.n	800ceb2 <pvPortMalloc+0x16a>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	60fb      	str	r3, [r7, #12]
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <pvPortMalloc+0x168>
	return pvReturn;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3728      	adds	r7, #40	; 0x28
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	24004584 	.word	0x24004584
 800cec0:	24004590 	.word	0x24004590
 800cec4:	24004588 	.word	0x24004588
 800cec8:	2400457c 	.word	0x2400457c
 800cecc:	2400458c 	.word	0x2400458c

0800ced0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d048      	beq.n	800cf74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cee2:	2308      	movs	r3, #8
 800cee4:	425b      	negs	r3, r3
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	4413      	add	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	4b21      	ldr	r3, [pc, #132]	; (800cf7c <vPortFree+0xac>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4013      	ands	r3, r2
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10a      	bne.n	800cf14 <vPortFree+0x44>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	60fb      	str	r3, [r7, #12]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <vPortFree+0x62>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	60bb      	str	r3, [r7, #8]
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	4b11      	ldr	r3, [pc, #68]	; (800cf7c <vPortFree+0xac>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d019      	beq.n	800cf74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d115      	bne.n	800cf74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	4b0b      	ldr	r3, [pc, #44]	; (800cf7c <vPortFree+0xac>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	43db      	mvns	r3, r3
 800cf52:	401a      	ands	r2, r3
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf58:	f7fe feac 	bl	800bcb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	685a      	ldr	r2, [r3, #4]
 800cf60:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <vPortFree+0xb0>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4413      	add	r3, r2
 800cf66:	4a06      	ldr	r2, [pc, #24]	; (800cf80 <vPortFree+0xb0>)
 800cf68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf6a:	6938      	ldr	r0, [r7, #16]
 800cf6c:	f000 f86c 	bl	800d048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf70:	f7fe feae 	bl	800bcd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf74:	bf00      	nop
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	24004590 	.word	0x24004590
 800cf80:	24004588 	.word	0x24004588

0800cf84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf90:	4b27      	ldr	r3, [pc, #156]	; (800d030 <prvHeapInit+0xac>)
 800cf92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00c      	beq.n	800cfb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3307      	adds	r3, #7
 800cfa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f023 0307 	bic.w	r3, r3, #7
 800cfaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	4a1f      	ldr	r2, [pc, #124]	; (800d030 <prvHeapInit+0xac>)
 800cfb4:	4413      	add	r3, r2
 800cfb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfbc:	4a1d      	ldr	r2, [pc, #116]	; (800d034 <prvHeapInit+0xb0>)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfc2:	4b1c      	ldr	r3, [pc, #112]	; (800d034 <prvHeapInit+0xb0>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	4413      	add	r3, r2
 800cfce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfd0:	2208      	movs	r2, #8
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	1a9b      	subs	r3, r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 0307 	bic.w	r3, r3, #7
 800cfde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	4a15      	ldr	r2, [pc, #84]	; (800d038 <prvHeapInit+0xb4>)
 800cfe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfe6:	4b14      	ldr	r3, [pc, #80]	; (800d038 <prvHeapInit+0xb4>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2200      	movs	r2, #0
 800cfec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfee:	4b12      	ldr	r3, [pc, #72]	; (800d038 <prvHeapInit+0xb4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2200      	movs	r2, #0
 800cff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d004:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <prvHeapInit+0xb4>)
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <prvHeapInit+0xb8>)
 800d012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	4a09      	ldr	r2, [pc, #36]	; (800d040 <prvHeapInit+0xbc>)
 800d01a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <prvHeapInit+0xc0>)
 800d01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d022:	601a      	str	r2, [r3, #0]
}
 800d024:	bf00      	nop
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	2400097c 	.word	0x2400097c
 800d034:	2400457c 	.word	0x2400457c
 800d038:	24004584 	.word	0x24004584
 800d03c:	2400458c 	.word	0x2400458c
 800d040:	24004588 	.word	0x24004588
 800d044:	24004590 	.word	0x24004590

0800d048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d050:	4b28      	ldr	r3, [pc, #160]	; (800d0f4 <prvInsertBlockIntoFreeList+0xac>)
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	e002      	b.n	800d05c <prvInsertBlockIntoFreeList+0x14>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	429a      	cmp	r2, r3
 800d064:	d8f7      	bhi.n	800d056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	4413      	add	r3, r2
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	429a      	cmp	r2, r3
 800d076:	d108      	bne.n	800d08a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	441a      	add	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	441a      	add	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d118      	bne.n	800d0d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d00d      	beq.n	800d0c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	441a      	add	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	e008      	b.n	800d0d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	e003      	b.n	800d0d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d002      	beq.n	800d0e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0e6:	bf00      	nop
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	2400457c 	.word	0x2400457c
 800d0f8:	24004584 	.word	0x24004584

0800d0fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	330c      	adds	r3, #12
 800d10c:	461a      	mov	r2, r3
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f002 f991 	bl	800f438 <tcpip_send_msg_wait_sem>
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d128:	e001      	b.n	800d12e <netconn_apimsg+0x32>
  }
  return err;
 800d12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08a      	sub	sp, #40	; 0x28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	603a      	str	r2, [r7, #0]
 800d142:	71fb      	strb	r3, [r7, #7]
 800d144:	460b      	mov	r3, r1
 800d146:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 ff83 	bl	800e058 <netconn_alloc>
 800d152:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d054      	beq.n	800d204 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d15a:	79bb      	ldrb	r3, [r7, #6]
 800d15c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4619      	mov	r1, r3
 800d168:	4829      	ldr	r0, [pc, #164]	; (800d210 <netconn_new_with_proto_and_callback+0xd8>)
 800d16a:	f7ff ffc7 	bl	800d0fc <netconn_apimsg>
 800d16e:	4603      	mov	r3, r0
 800d170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800d174:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d043      	beq.n	800d204 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d005      	beq.n	800d190 <netconn_new_with_proto_and_callback+0x58>
 800d184:	4b23      	ldr	r3, [pc, #140]	; (800d214 <netconn_new_with_proto_and_callback+0xdc>)
 800d186:	2289      	movs	r2, #137	; 0x89
 800d188:	4923      	ldr	r1, [pc, #140]	; (800d218 <netconn_new_with_proto_and_callback+0xe0>)
 800d18a:	4824      	ldr	r0, [pc, #144]	; (800d21c <netconn_new_with_proto_and_callback+0xe4>)
 800d18c:	f00d fc3a 	bl	801aa04 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	3310      	adds	r3, #16
 800d194:	4618      	mov	r0, r3
 800d196:	f00d fab2 	bl	801a6fe <sys_mbox_valid>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d105      	bne.n	800d1ac <netconn_new_with_proto_and_callback+0x74>
 800d1a0:	4b1c      	ldr	r3, [pc, #112]	; (800d214 <netconn_new_with_proto_and_callback+0xdc>)
 800d1a2:	228a      	movs	r2, #138	; 0x8a
 800d1a4:	491e      	ldr	r1, [pc, #120]	; (800d220 <netconn_new_with_proto_and_callback+0xe8>)
 800d1a6:	481d      	ldr	r0, [pc, #116]	; (800d21c <netconn_new_with_proto_and_callback+0xe4>)
 800d1a8:	f00d fc2c 	bl	801aa04 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	3314      	adds	r3, #20
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f00d faa4 	bl	801a6fe <sys_mbox_valid>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d005      	beq.n	800d1c8 <netconn_new_with_proto_and_callback+0x90>
 800d1bc:	4b15      	ldr	r3, [pc, #84]	; (800d214 <netconn_new_with_proto_and_callback+0xdc>)
 800d1be:	228c      	movs	r2, #140	; 0x8c
 800d1c0:	4918      	ldr	r1, [pc, #96]	; (800d224 <netconn_new_with_proto_and_callback+0xec>)
 800d1c2:	4816      	ldr	r0, [pc, #88]	; (800d21c <netconn_new_with_proto_and_callback+0xe4>)
 800d1c4:	f00d fc1e 	bl	801aa04 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	330c      	adds	r3, #12
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f00d fb27 	bl	801a820 <sys_sem_valid>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d105      	bne.n	800d1e4 <netconn_new_with_proto_and_callback+0xac>
 800d1d8:	4b0e      	ldr	r3, [pc, #56]	; (800d214 <netconn_new_with_proto_and_callback+0xdc>)
 800d1da:	228f      	movs	r2, #143	; 0x8f
 800d1dc:	4912      	ldr	r1, [pc, #72]	; (800d228 <netconn_new_with_proto_and_callback+0xf0>)
 800d1de:	480f      	ldr	r0, [pc, #60]	; (800d21c <netconn_new_with_proto_and_callback+0xe4>)
 800d1e0:	f00d fc10 	bl	801aa04 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f00d fb0c 	bl	801a806 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	3310      	adds	r3, #16
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f00d f9e6 	bl	801a5c4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1fa:	2007      	movs	r0, #7
 800d1fc:	f002 fe16 	bl	800fe2c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d200:	2300      	movs	r3, #0
 800d202:	e000      	b.n	800d206 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d206:	4618      	mov	r0, r3
 800d208:	3728      	adds	r7, #40	; 0x28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	0800e001 	.word	0x0800e001
 800d214:	0801c0e0 	.word	0x0801c0e0
 800d218:	0801c138 	.word	0x0801c138
 800d21c:	0801c15c 	.word	0x0801c15c
 800d220:	0801c184 	.word	0x0801c184
 800d224:	0801c19c 	.word	0x0801c19c
 800d228:	0801c1c0 	.word	0x0801c1c0

0800d22c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <netconn_delete+0x12>
    return ERR_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e016      	b.n	800d26c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d242:	2329      	movs	r3, #41	; 0x29
 800d244:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d246:	f107 0308 	add.w	r3, r7, #8
 800d24a:	4619      	mov	r1, r3
 800d24c:	4809      	ldr	r0, [pc, #36]	; (800d274 <netconn_delete+0x48>)
 800d24e:	f7ff ff55 	bl	800d0fc <netconn_apimsg>
 800d252:	4603      	mov	r3, r0
 800d254:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d256:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d002      	beq.n	800d264 <netconn_delete+0x38>
    return err;
 800d25e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d262:	e003      	b.n	800d26c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 ff67 	bl	800e138 <netconn_free>

  return ERR_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3720      	adds	r7, #32
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	0800e5c5 	.word	0x0800e5c5

0800d278 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	4613      	mov	r3, r2
 800d284:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d108      	bne.n	800d29e <netconn_bind+0x26>
 800d28c:	4b11      	ldr	r3, [pc, #68]	; (800d2d4 <netconn_bind+0x5c>)
 800d28e:	22ff      	movs	r2, #255	; 0xff
 800d290:	4911      	ldr	r1, [pc, #68]	; (800d2d8 <netconn_bind+0x60>)
 800d292:	4812      	ldr	r0, [pc, #72]	; (800d2dc <netconn_bind+0x64>)
 800d294:	f00d fbb6 	bl	801aa04 <iprintf>
 800d298:	f06f 030f 	mvn.w	r3, #15
 800d29c:	e015      	b.n	800d2ca <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <netconn_bind+0x68>)
 800d2a6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d2b0:	88fb      	ldrh	r3, [r7, #6]
 800d2b2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d2b4:	f107 0310 	add.w	r3, r7, #16
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	480a      	ldr	r0, [pc, #40]	; (800d2e4 <netconn_bind+0x6c>)
 800d2bc:	f7ff ff1e 	bl	800d0fc <netconn_apimsg>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800d2c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3728      	adds	r7, #40	; 0x28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	0801c0e0 	.word	0x0801c0e0
 800d2d8:	0801c23c 	.word	0x0801c23c
 800d2dc:	0801c15c 	.word	0x0801c15c
 800d2e0:	0801f218 	.word	0x0801f218
 800d2e4:	0800e7c9 	.word	0x0800e7c9

0800d2e8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b088      	sub	sp, #32
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d109      	bne.n	800d30e <netconn_listen_with_backlog+0x26>
 800d2fa:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <netconn_listen_with_backlog+0x48>)
 800d2fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d300:	490c      	ldr	r1, [pc, #48]	; (800d334 <netconn_listen_with_backlog+0x4c>)
 800d302:	480d      	ldr	r0, [pc, #52]	; (800d338 <netconn_listen_with_backlog+0x50>)
 800d304:	f00d fb7e 	bl	801aa04 <iprintf>
 800d308:	f06f 030f 	mvn.w	r3, #15
 800d30c:	e00b      	b.n	800d326 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d312:	f107 0308 	add.w	r3, r7, #8
 800d316:	4619      	mov	r1, r3
 800d318:	4808      	ldr	r0, [pc, #32]	; (800d33c <netconn_listen_with_backlog+0x54>)
 800d31a:	f7ff feef 	bl	800d0fc <netconn_apimsg>
 800d31e:	4603      	mov	r3, r0
 800d320:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d322:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d326:	4618      	mov	r0, r3
 800d328:	3720      	adds	r7, #32
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	0801c0e0 	.word	0x0801c0e0
 800d334:	0801c29c 	.word	0x0801c29c
 800d338:	0801c15c 	.word	0x0801c15c
 800d33c:	0800e88d 	.word	0x0800e88d

0800d340 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d109      	bne.n	800d364 <netconn_accept+0x24>
 800d350:	4b34      	ldr	r3, [pc, #208]	; (800d424 <netconn_accept+0xe4>)
 800d352:	f240 128d 	movw	r2, #397	; 0x18d
 800d356:	4934      	ldr	r1, [pc, #208]	; (800d428 <netconn_accept+0xe8>)
 800d358:	4834      	ldr	r0, [pc, #208]	; (800d42c <netconn_accept+0xec>)
 800d35a:	f00d fb53 	bl	801aa04 <iprintf>
 800d35e:	f06f 030f 	mvn.w	r3, #15
 800d362:	e05b      	b.n	800d41c <netconn_accept+0xdc>
  *new_conn = NULL;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2200      	movs	r2, #0
 800d368:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d109      	bne.n	800d384 <netconn_accept+0x44>
 800d370:	4b2c      	ldr	r3, [pc, #176]	; (800d424 <netconn_accept+0xe4>)
 800d372:	f240 128f 	movw	r2, #399	; 0x18f
 800d376:	492e      	ldr	r1, [pc, #184]	; (800d430 <netconn_accept+0xf0>)
 800d378:	482c      	ldr	r0, [pc, #176]	; (800d42c <netconn_accept+0xec>)
 800d37a:	f00d fb43 	bl	801aa04 <iprintf>
 800d37e:	f06f 030f 	mvn.w	r3, #15
 800d382:	e04b      	b.n	800d41c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d38a:	f113 0f0c 	cmn.w	r3, #12
 800d38e:	da03      	bge.n	800d398 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d396:	e041      	b.n	800d41c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	3314      	adds	r3, #20
 800d39c:	4618      	mov	r0, r3
 800d39e:	f00d f9ae 	bl	801a6fe <sys_mbox_valid>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d102      	bne.n	800d3ae <netconn_accept+0x6e>
    return ERR_CLSD;
 800d3a8:	f06f 030e 	mvn.w	r3, #14
 800d3ac:	e036      	b.n	800d41c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3314      	adds	r3, #20
 800d3b2:	f107 010c 	add.w	r1, r7, #12
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f00d f945 	bl	801a648 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d005      	beq.n	800d3d6 <netconn_accept+0x96>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4a16      	ldr	r2, [pc, #88]	; (800d434 <netconn_accept+0xf4>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d102      	bne.n	800d3e4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800d3de:	f06f 030c 	mvn.w	r3, #12
 800d3e2:	e01b      	b.n	800d41c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d114      	bne.n	800d414 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00e      	beq.n	800d40e <netconn_accept+0xce>
 800d3f0:	f00d faa0 	bl	801a934 <sys_arch_protect>
 800d3f4:	6138      	str	r0, [r7, #16]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d3fc:	f113 0f0c 	cmn.w	r3, #12
 800d400:	db02      	blt.n	800d408 <netconn_accept+0xc8>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	22f1      	movs	r2, #241	; 0xf1
 800d406:	721a      	strb	r2, [r3, #8]
 800d408:	6938      	ldr	r0, [r7, #16]
 800d40a:	f00d faa1 	bl	801a950 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800d40e:	f06f 030e 	mvn.w	r3, #14
 800d412:	e003      	b.n	800d41c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d41a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	0801c0e0 	.word	0x0801c0e0
 800d428:	0801c2bc 	.word	0x0801c2bc
 800d42c:	0801c15c 	.word	0x0801c15c
 800d430:	0801c2dc 	.word	0x0801c2dc
 800d434:	24004594 	.word	0x24004594

0800d438 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	; 0x28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d109      	bne.n	800d460 <netconn_recv_data+0x28>
 800d44c:	4b5c      	ldr	r3, [pc, #368]	; (800d5c0 <netconn_recv_data+0x188>)
 800d44e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d452:	495c      	ldr	r1, [pc, #368]	; (800d5c4 <netconn_recv_data+0x18c>)
 800d454:	485c      	ldr	r0, [pc, #368]	; (800d5c8 <netconn_recv_data+0x190>)
 800d456:	f00d fad5 	bl	801aa04 <iprintf>
 800d45a:	f06f 030f 	mvn.w	r3, #15
 800d45e:	e0aa      	b.n	800d5b6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d109      	bne.n	800d480 <netconn_recv_data+0x48>
 800d46c:	4b54      	ldr	r3, [pc, #336]	; (800d5c0 <netconn_recv_data+0x188>)
 800d46e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800d472:	4956      	ldr	r1, [pc, #344]	; (800d5cc <netconn_recv_data+0x194>)
 800d474:	4854      	ldr	r0, [pc, #336]	; (800d5c8 <netconn_recv_data+0x190>)
 800d476:	f00d fac5 	bl	801aa04 <iprintf>
 800d47a:	f06f 030f 	mvn.w	r3, #15
 800d47e:	e09a      	b.n	800d5b6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d488:	2b10      	cmp	r3, #16
 800d48a:	d115      	bne.n	800d4b8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3310      	adds	r3, #16
 800d490:	4618      	mov	r0, r3
 800d492:	f00d f934 	bl	801a6fe <sys_mbox_valid>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10d      	bne.n	800d4b8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3314      	adds	r3, #20
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f00d f92c 	bl	801a6fe <sys_mbox_valid>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <netconn_recv_data+0x7a>
 800d4ac:	f06f 030a 	mvn.w	r3, #10
 800d4b0:	e081      	b.n	800d5b6 <netconn_recv_data+0x17e>
 800d4b2:	f06f 030e 	mvn.w	r3, #14
 800d4b6:	e07e      	b.n	800d5b6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3310      	adds	r3, #16
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f00d f91e 	bl	801a6fe <sys_mbox_valid>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d109      	bne.n	800d4dc <netconn_recv_data+0xa4>
 800d4c8:	4b3d      	ldr	r3, [pc, #244]	; (800d5c0 <netconn_recv_data+0x188>)
 800d4ca:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d4ce:	4940      	ldr	r1, [pc, #256]	; (800d5d0 <netconn_recv_data+0x198>)
 800d4d0:	483d      	ldr	r0, [pc, #244]	; (800d5c8 <netconn_recv_data+0x190>)
 800d4d2:	f00d fa97 	bl	801aa04 <iprintf>
 800d4d6:	f06f 030a 	mvn.w	r3, #10
 800d4da:	e06c      	b.n	800d5b6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4e2:	f113 0f0c 	cmn.w	r3, #12
 800d4e6:	da03      	bge.n	800d4f0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4ee:	e062      	b.n	800d5b6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3310      	adds	r3, #16
 800d4f4:	f107 0120 	add.w	r1, r7, #32
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f00d f8a4 	bl	801a648 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d508:	2b10      	cmp	r3, #16
 800d50a:	d138      	bne.n	800d57e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d003      	beq.n	800d51e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	891b      	ldrh	r3, [r3, #8]
 800d51a:	617b      	str	r3, [r7, #20]
 800d51c:	e001      	b.n	800d522 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d51e:	2301      	movs	r3, #1
 800d520:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d522:	f107 030c 	add.w	r3, r7, #12
 800d526:	4619      	mov	r1, r3
 800d528:	482a      	ldr	r0, [pc, #168]	; (800d5d4 <netconn_recv_data+0x19c>)
 800d52a:	f7ff fde7 	bl	800d0fc <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d120      	bne.n	800d576 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <netconn_recv_data+0x110>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d540:	2200      	movs	r2, #0
 800d542:	2101      	movs	r1, #1
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10b      	bne.n	800d568 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <netconn_recv_data+0x12a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d560:	e029      	b.n	800d5b6 <netconn_recv_data+0x17e>
 800d562:	f06f 030d 	mvn.w	r3, #13
 800d566:	e026      	b.n	800d5b6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d568:	2101      	movs	r1, #1
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f926 	bl	800d7bc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d570:	f06f 030e 	mvn.w	r3, #14
 800d574:	e01f      	b.n	800d5b6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	891b      	ldrh	r3, [r3, #8]
 800d57a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d57c:	e00d      	b.n	800d59a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <netconn_recv_data+0x15a>
 800d584:	4b0e      	ldr	r3, [pc, #56]	; (800d5c0 <netconn_recv_data+0x188>)
 800d586:	f240 223e 	movw	r2, #574	; 0x23e
 800d58a:	4913      	ldr	r1, [pc, #76]	; (800d5d8 <netconn_recv_data+0x1a0>)
 800d58c:	480e      	ldr	r0, [pc, #56]	; (800d5c8 <netconn_recv_data+0x190>)
 800d58e:	f00d fa39 	bl	801aa04 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	891b      	ldrh	r3, [r3, #8]
 800d598:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <netconn_recv_data+0x176>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d5ae:	6a3a      	ldr	r2, [r7, #32]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3728      	adds	r7, #40	; 0x28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0801c0e0 	.word	0x0801c0e0
 800d5c4:	0801c2fc 	.word	0x0801c2fc
 800d5c8:	0801c15c 	.word	0x0801c15c
 800d5cc:	0801c31c 	.word	0x0801c31c
 800d5d0:	0801c338 	.word	0x0801c338
 800d5d4:	0800ea11 	.word	0x0800ea11
 800d5d8:	0801c358 	.word	0x0801c358

0800d5dc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d109      	bne.n	800d604 <netconn_recv+0x28>
 800d5f0:	4b31      	ldr	r3, [pc, #196]	; (800d6b8 <netconn_recv+0xdc>)
 800d5f2:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d5f6:	4931      	ldr	r1, [pc, #196]	; (800d6bc <netconn_recv+0xe0>)
 800d5f8:	4831      	ldr	r0, [pc, #196]	; (800d6c0 <netconn_recv+0xe4>)
 800d5fa:	f00d fa03 	bl	801aa04 <iprintf>
 800d5fe:	f06f 030f 	mvn.w	r3, #15
 800d602:	e054      	b.n	800d6ae <netconn_recv+0xd2>
  *new_buf = NULL;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2200      	movs	r2, #0
 800d608:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d109      	bne.n	800d624 <netconn_recv+0x48>
 800d610:	4b29      	ldr	r3, [pc, #164]	; (800d6b8 <netconn_recv+0xdc>)
 800d612:	f240 2276 	movw	r2, #630	; 0x276
 800d616:	492b      	ldr	r1, [pc, #172]	; (800d6c4 <netconn_recv+0xe8>)
 800d618:	4829      	ldr	r0, [pc, #164]	; (800d6c0 <netconn_recv+0xe4>)
 800d61a:	f00d f9f3 	bl	801aa04 <iprintf>
 800d61e:	f06f 030f 	mvn.w	r3, #15
 800d622:	e044      	b.n	800d6ae <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	d139      	bne.n	800d6a4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d634:	2006      	movs	r0, #6
 800d636:	f002 fb83 	bl	800fd40 <memp_malloc>
 800d63a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <netconn_recv+0x6c>
      return ERR_MEM;
 800d642:	f04f 33ff 	mov.w	r3, #4294967295
 800d646:	e032      	b.n	800d6ae <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d648:	f107 030c 	add.w	r3, r7, #12
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fef2 	bl	800d438 <netconn_recv_data>
 800d654:	4603      	mov	r3, r0
 800d656:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d006      	beq.n	800d66e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d660:	6979      	ldr	r1, [r7, #20]
 800d662:	2006      	movs	r0, #6
 800d664:	f002 fbe2 	bl	800fe2c <memp_free>
      return err;
 800d668:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d66c:	e01f      	b.n	800d6ae <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d106      	bne.n	800d682 <netconn_recv+0xa6>
 800d674:	4b10      	ldr	r3, [pc, #64]	; (800d6b8 <netconn_recv+0xdc>)
 800d676:	f240 228a 	movw	r2, #650	; 0x28a
 800d67a:	4913      	ldr	r1, [pc, #76]	; (800d6c8 <netconn_recv+0xec>)
 800d67c:	4810      	ldr	r0, [pc, #64]	; (800d6c0 <netconn_recv+0xe4>)
 800d67e:	f00d f9c1 	bl	801aa04 <iprintf>

    buf->p = p;
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2200      	movs	r2, #0
 800d692:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2200      	movs	r2, #0
 800d698:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e004      	b.n	800d6ae <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fec6 	bl	800d438 <netconn_recv_data>
 800d6ac:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	0801c0e0 	.word	0x0801c0e0
 800d6bc:	0801c2fc 	.word	0x0801c2fc
 800d6c0:	0801c15c 	.word	0x0801c15c
 800d6c4:	0801c31c 	.word	0x0801c31c
 800d6c8:	0801c364 	.word	0x0801c364

0800d6cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08a      	sub	sp, #40	; 0x28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d109      	bne.n	800d6f4 <netconn_write_partly+0x28>
 800d6e0:	4b31      	ldr	r3, [pc, #196]	; (800d7a8 <netconn_write_partly+0xdc>)
 800d6e2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d6e6:	4931      	ldr	r1, [pc, #196]	; (800d7ac <netconn_write_partly+0xe0>)
 800d6e8:	4831      	ldr	r0, [pc, #196]	; (800d7b0 <netconn_write_partly+0xe4>)
 800d6ea:	f00d f98b 	bl	801aa04 <iprintf>
 800d6ee:	f06f 030f 	mvn.w	r3, #15
 800d6f2:	e054      	b.n	800d79e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6fc:	2b10      	cmp	r3, #16
 800d6fe:	d009      	beq.n	800d714 <netconn_write_partly+0x48>
 800d700:	4b29      	ldr	r3, [pc, #164]	; (800d7a8 <netconn_write_partly+0xdc>)
 800d702:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d706:	492b      	ldr	r1, [pc, #172]	; (800d7b4 <netconn_write_partly+0xe8>)
 800d708:	4829      	ldr	r0, [pc, #164]	; (800d7b0 <netconn_write_partly+0xe4>)
 800d70a:	f00d f97b 	bl	801aa04 <iprintf>
 800d70e:	f06f 0305 	mvn.w	r3, #5
 800d712:	e044      	b.n	800d79e <netconn_write_partly+0xd2>
  if (size == 0) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <netconn_write_partly+0x52>
    return ERR_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e03f      	b.n	800d79e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	7f1b      	ldrb	r3, [r3, #28]
 800d722:	f003 0302 	and.w	r3, r3, #2
 800d726:	2b00      	cmp	r3, #0
 800d728:	d104      	bne.n	800d734 <netconn_write_partly+0x68>
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <netconn_write_partly+0x6c>
 800d734:	2301      	movs	r3, #1
 800d736:	e000      	b.n	800d73a <netconn_write_partly+0x6e>
 800d738:	2300      	movs	r3, #0
 800d73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d742:	2b00      	cmp	r3, #0
 800d744:	d005      	beq.n	800d752 <netconn_write_partly+0x86>
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d74c:	f06f 0305 	mvn.w	r3, #5
 800d750:	e025      	b.n	800d79e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d764:	f107 0310 	add.w	r3, r7, #16
 800d768:	4619      	mov	r1, r3
 800d76a:	4813      	ldr	r0, [pc, #76]	; (800d7b8 <netconn_write_partly+0xec>)
 800d76c:	f7ff fcc6 	bl	800d0fc <netconn_apimsg>
 800d770:	4603      	mov	r3, r0
 800d772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d776:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10d      	bne.n	800d79a <netconn_write_partly+0xce>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00a      	beq.n	800d79a <netconn_write_partly+0xce>
    if (dontblock) {
 800d784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d78c:	69fa      	ldr	r2, [r7, #28]
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	e002      	b.n	800d79a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d79a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3728      	adds	r7, #40	; 0x28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0801c0e0 	.word	0x0801c0e0
 800d7ac:	0801c38c 	.word	0x0801c38c
 800d7b0:	0801c15c 	.word	0x0801c15c
 800d7b4:	0801c3a8 	.word	0x0801c3a8
 800d7b8:	0800edf1 	.word	0x0800edf1

0800d7bc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d109      	bne.n	800d7e2 <netconn_close_shutdown+0x26>
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <netconn_close_shutdown+0x50>)
 800d7d0:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d7d4:	490e      	ldr	r1, [pc, #56]	; (800d810 <netconn_close_shutdown+0x54>)
 800d7d6:	480f      	ldr	r0, [pc, #60]	; (800d814 <netconn_close_shutdown+0x58>)
 800d7d8:	f00d f914 	bl	801aa04 <iprintf>
 800d7dc:	f06f 030f 	mvn.w	r3, #15
 800d7e0:	e00f      	b.n	800d802 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d7e6:	78fb      	ldrb	r3, [r7, #3]
 800d7e8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d7ea:	2329      	movs	r3, #41	; 0x29
 800d7ec:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d7ee:	f107 0308 	add.w	r3, r7, #8
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4808      	ldr	r0, [pc, #32]	; (800d818 <netconn_close_shutdown+0x5c>)
 800d7f6:	f7ff fc81 	bl	800d0fc <netconn_apimsg>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d7fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3720      	adds	r7, #32
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	0801c0e0 	.word	0x0801c0e0
 800d810:	0801c3cc 	.word	0x0801c3cc
 800d814:	0801c15c 	.word	0x0801c15c
 800d818:	0800ef51 	.word	0x0800ef51

0800d81c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d824:	2103      	movs	r1, #3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff ffc8 	bl	800d7bc <netconn_close_shutdown>
 800d82c:	4603      	mov	r3, r0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b088      	sub	sp, #32
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d105      	bne.n	800d858 <recv_udp+0x20>
 800d84c:	4b34      	ldr	r3, [pc, #208]	; (800d920 <recv_udp+0xe8>)
 800d84e:	22b1      	movs	r2, #177	; 0xb1
 800d850:	4934      	ldr	r1, [pc, #208]	; (800d924 <recv_udp+0xec>)
 800d852:	4835      	ldr	r0, [pc, #212]	; (800d928 <recv_udp+0xf0>)
 800d854:	f00d f8d6 	bl	801aa04 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d105      	bne.n	800d86a <recv_udp+0x32>
 800d85e:	4b30      	ldr	r3, [pc, #192]	; (800d920 <recv_udp+0xe8>)
 800d860:	22b2      	movs	r2, #178	; 0xb2
 800d862:	4932      	ldr	r1, [pc, #200]	; (800d92c <recv_udp+0xf4>)
 800d864:	4830      	ldr	r0, [pc, #192]	; (800d928 <recv_udp+0xf0>)
 800d866:	f00d f8cd 	bl	801aa04 <iprintf>
  conn = (struct netconn *)arg;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d103      	bne.n	800d87c <recv_udp+0x44>
    pbuf_free(p);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f003 f8cf 	bl	8010a18 <pbuf_free>
    return;
 800d87a:	e04d      	b.n	800d918 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	429a      	cmp	r2, r3
 800d884:	d005      	beq.n	800d892 <recv_udp+0x5a>
 800d886:	4b26      	ldr	r3, [pc, #152]	; (800d920 <recv_udp+0xe8>)
 800d888:	22ba      	movs	r2, #186	; 0xba
 800d88a:	4929      	ldr	r1, [pc, #164]	; (800d930 <recv_udp+0xf8>)
 800d88c:	4826      	ldr	r0, [pc, #152]	; (800d928 <recv_udp+0xf0>)
 800d88e:	f00d f8b9 	bl	801aa04 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	3310      	adds	r3, #16
 800d896:	4618      	mov	r0, r3
 800d898:	f00c ff31 	bl	801a6fe <sys_mbox_valid>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f003 f8b8 	bl	8010a18 <pbuf_free>
    return;
 800d8a8:	e036      	b.n	800d918 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d8aa:	2006      	movs	r0, #6
 800d8ac:	f002 fa48 	bl	800fd40 <memp_malloc>
 800d8b0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d103      	bne.n	800d8c0 <recv_udp+0x88>
    pbuf_free(p);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f003 f8ad 	bl	8010a18 <pbuf_free>
    return;
 800d8be:	e02b      	b.n	800d918 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <recv_udp+0xa0>
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	e000      	b.n	800d8da <recv_udp+0xa2>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	69ba      	ldr	r2, [r7, #24]
 800d8dc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d8e2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	891b      	ldrh	r3, [r3, #8]
 800d8e8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	3310      	adds	r3, #16
 800d8ee:	69b9      	ldr	r1, [r7, #24]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f00c fe8f 	bl	801a614 <sys_mbox_trypost>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d8fc:	69b8      	ldr	r0, [r7, #24]
 800d8fe:	f001 fbcf 	bl	800f0a0 <netbuf_delete>
    return;
 800d902:	e009      	b.n	800d918 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d005      	beq.n	800d918 <recv_udp+0xe0>
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d910:	8afa      	ldrh	r2, [r7, #22]
 800d912:	2100      	movs	r1, #0
 800d914:	69f8      	ldr	r0, [r7, #28]
 800d916:	4798      	blx	r3
  }
}
 800d918:	3720      	adds	r7, #32
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	0801c3e8 	.word	0x0801c3e8
 800d924:	0801c440 	.word	0x0801c440
 800d928:	0801c464 	.word	0x0801c464
 800d92c:	0801c48c 	.word	0x0801c48c
 800d930:	0801c4ac 	.word	0x0801c4ac

0800d934 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d105      	bne.n	800d954 <recv_tcp+0x20>
 800d948:	4b39      	ldr	r3, [pc, #228]	; (800da30 <recv_tcp+0xfc>)
 800d94a:	22f9      	movs	r2, #249	; 0xf9
 800d94c:	4939      	ldr	r1, [pc, #228]	; (800da34 <recv_tcp+0x100>)
 800d94e:	483a      	ldr	r0, [pc, #232]	; (800da38 <recv_tcp+0x104>)
 800d950:	f00d f858 	bl	801aa04 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d105      	bne.n	800d966 <recv_tcp+0x32>
 800d95a:	4b35      	ldr	r3, [pc, #212]	; (800da30 <recv_tcp+0xfc>)
 800d95c:	22fa      	movs	r2, #250	; 0xfa
 800d95e:	4937      	ldr	r1, [pc, #220]	; (800da3c <recv_tcp+0x108>)
 800d960:	4835      	ldr	r0, [pc, #212]	; (800da38 <recv_tcp+0x104>)
 800d962:	f00d f84f 	bl	801aa04 <iprintf>
  conn = (struct netconn *)arg;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d102      	bne.n	800d976 <recv_tcp+0x42>
    return ERR_VAL;
 800d970:	f06f 0305 	mvn.w	r3, #5
 800d974:	e057      	b.n	800da26 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d006      	beq.n	800d98e <recv_tcp+0x5a>
 800d980:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <recv_tcp+0xfc>)
 800d982:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d986:	492e      	ldr	r1, [pc, #184]	; (800da40 <recv_tcp+0x10c>)
 800d988:	482b      	ldr	r0, [pc, #172]	; (800da38 <recv_tcp+0x104>)
 800d98a:	f00d f83b 	bl	801aa04 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	3310      	adds	r3, #16
 800d992:	4618      	mov	r0, r3
 800d994:	f00c feb3 	bl	801a6fe <sys_mbox_valid>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10d      	bne.n	800d9ba <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d008      	beq.n	800d9b6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	891b      	ldrh	r3, [r3, #8]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	68b8      	ldr	r0, [r7, #8]
 800d9ac:	f003 ff28 	bl	8011800 <tcp_recved>
      pbuf_free(p);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f003 f831 	bl	8010a18 <pbuf_free>
    }
    return ERR_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e035      	b.n	800da26 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800d9ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d011      	beq.n	800d9e6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00e      	beq.n	800d9e6 <recv_tcp+0xb2>
 800d9c8:	f00c ffb4 	bl	801a934 <sys_arch_protect>
 800d9cc:	6178      	str	r0, [r7, #20]
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d9d4:	f113 0f0c 	cmn.w	r3, #12
 800d9d8:	db02      	blt.n	800d9e0 <recv_tcp+0xac>
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	78fa      	ldrb	r2, [r7, #3]
 800d9de:	721a      	strb	r2, [r3, #8]
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f00c ffb5 	bl	801a950 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d003      	beq.n	800d9f4 <recv_tcp+0xc0>
    len = p->tot_len;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	891b      	ldrh	r3, [r3, #8]
 800d9f0:	83fb      	strh	r3, [r7, #30]
 800d9f2:	e001      	b.n	800d9f8 <recv_tcp+0xc4>
  } else {
    len = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	3310      	adds	r3, #16
 800d9fc:	6879      	ldr	r1, [r7, #4]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f00c fe08 	bl	801a614 <sys_mbox_trypost>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295
 800da0e:	e00a      	b.n	800da26 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da14:	2b00      	cmp	r3, #0
 800da16:	d005      	beq.n	800da24 <recv_tcp+0xf0>
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1c:	8bfa      	ldrh	r2, [r7, #30]
 800da1e:	2100      	movs	r1, #0
 800da20:	69b8      	ldr	r0, [r7, #24]
 800da22:	4798      	blx	r3
  }

  return ERR_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3720      	adds	r7, #32
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	0801c3e8 	.word	0x0801c3e8
 800da34:	0801c4cc 	.word	0x0801c4cc
 800da38:	0801c464 	.word	0x0801c464
 800da3c:	0801c4f0 	.word	0x0801c4f0
 800da40:	0801c510 	.word	0x0801c510

0800da44 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d106      	bne.n	800da66 <poll_tcp+0x22>
 800da58:	4b29      	ldr	r3, [pc, #164]	; (800db00 <poll_tcp+0xbc>)
 800da5a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800da5e:	4929      	ldr	r1, [pc, #164]	; (800db04 <poll_tcp+0xc0>)
 800da60:	4829      	ldr	r0, [pc, #164]	; (800db08 <poll_tcp+0xc4>)
 800da62:	f00c ffcf 	bl	801aa04 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	785b      	ldrb	r3, [r3, #1]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d104      	bne.n	800da78 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800da6e:	2101      	movs	r1, #1
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f001 f819 	bl	800eaa8 <lwip_netconn_do_writemore>
 800da76:	e016      	b.n	800daa6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	785b      	ldrb	r3, [r3, #1]
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d112      	bne.n	800daa6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00a      	beq.n	800da9e <poll_tcp+0x5a>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	7a5b      	ldrb	r3, [r3, #9]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d005      	beq.n	800da9e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da96:	7a5a      	ldrb	r2, [r3, #9]
 800da98:	3a01      	subs	r2, #1
 800da9a:	b2d2      	uxtb	r2, r2
 800da9c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800da9e:	2101      	movs	r1, #1
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 fc13 	bl	800e2cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	7f1b      	ldrb	r3, [r3, #28]
 800daaa:	f003 0310 	and.w	r3, r3, #16
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d021      	beq.n	800daf6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d01d      	beq.n	800daf6 <poll_tcp+0xb2>
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dac2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dac6:	d316      	bcc.n	800daf6 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dad0:	2b04      	cmp	r3, #4
 800dad2:	d810      	bhi.n	800daf6 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	7f1b      	ldrb	r3, [r3, #28]
 800dad8:	f023 0310 	bic.w	r3, r3, #16
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d005      	beq.n	800daf6 <poll_tcp+0xb2>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daee:	2200      	movs	r2, #0
 800daf0:	2102      	movs	r1, #2
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	0801c3e8 	.word	0x0801c3e8
 800db04:	0801c530 	.word	0x0801c530
 800db08:	0801c464 	.word	0x0801c464

0800db0c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	4613      	mov	r3, r2
 800db18:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <sent_tcp+0x26>
 800db24:	4b20      	ldr	r3, [pc, #128]	; (800dba8 <sent_tcp+0x9c>)
 800db26:	f240 1261 	movw	r2, #353	; 0x161
 800db2a:	4920      	ldr	r1, [pc, #128]	; (800dbac <sent_tcp+0xa0>)
 800db2c:	4820      	ldr	r0, [pc, #128]	; (800dbb0 <sent_tcp+0xa4>)
 800db2e:	f00c ff69 	bl	801aa04 <iprintf>

  if (conn) {
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d032      	beq.n	800db9e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	785b      	ldrb	r3, [r3, #1]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d104      	bne.n	800db4a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800db40:	2101      	movs	r1, #1
 800db42:	6978      	ldr	r0, [r7, #20]
 800db44:	f000 ffb0 	bl	800eaa8 <lwip_netconn_do_writemore>
 800db48:	e007      	b.n	800db5a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	785b      	ldrb	r3, [r3, #1]
 800db4e:	2b04      	cmp	r3, #4
 800db50:	d103      	bne.n	800db5a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800db52:	2101      	movs	r1, #1
 800db54:	6978      	ldr	r0, [r7, #20]
 800db56:	f000 fbb9 	bl	800e2cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d01d      	beq.n	800db9e <sent_tcp+0x92>
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db6a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800db6e:	d316      	bcc.n	800db9e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db78:	2b04      	cmp	r3, #4
 800db7a:	d810      	bhi.n	800db9e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	7f1b      	ldrb	r3, [r3, #28]
 800db80:	f023 0310 	bic.w	r3, r3, #16
 800db84:	b2da      	uxtb	r2, r3
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d005      	beq.n	800db9e <sent_tcp+0x92>
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db96:	88fa      	ldrh	r2, [r7, #6]
 800db98:	2102      	movs	r1, #2
 800db9a:	6978      	ldr	r0, [r7, #20]
 800db9c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	0801c3e8 	.word	0x0801c3e8
 800dbac:	0801c530 	.word	0x0801c530
 800dbb0:	0801c464 	.word	0x0801c464

0800dbb4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <err_tcp+0x24>
 800dbca:	4b6c      	ldr	r3, [pc, #432]	; (800dd7c <err_tcp+0x1c8>)
 800dbcc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800dbd0:	496b      	ldr	r1, [pc, #428]	; (800dd80 <err_tcp+0x1cc>)
 800dbd2:	486c      	ldr	r0, [pc, #432]	; (800dd84 <err_tcp+0x1d0>)
 800dbd4:	f00c ff16 	bl	801aa04 <iprintf>

  conn->pcb.tcp = NULL;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	2200      	movs	r2, #0
 800dbdc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe8:	2200      	movs	r2, #0
 800dbea:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800dbec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbf0:	2b04      	cmp	r3, #4
 800dbf2:	d114      	bne.n	800dc1e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d018      	beq.n	800dc30 <err_tcp+0x7c>
 800dbfe:	f00c fe99 	bl	801a934 <sys_arch_protect>
 800dc02:	61b8      	str	r0, [r7, #24]
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dc0a:	f113 0f0c 	cmn.w	r3, #12
 800dc0e:	db02      	blt.n	800dc16 <err_tcp+0x62>
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	2200      	movs	r2, #0
 800dc14:	721a      	strb	r2, [r3, #8]
 800dc16:	69b8      	ldr	r0, [r7, #24]
 800dc18:	f00c fe9a 	bl	801a950 <sys_arch_unprotect>
 800dc1c:	e008      	b.n	800dc30 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800dc1e:	f00c fe89 	bl	801a934 <sys_arch_protect>
 800dc22:	61f8      	str	r0, [r7, #28]
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	78fa      	ldrb	r2, [r7, #3]
 800dc28:	721a      	strb	r2, [r3, #8]
 800dc2a:	69f8      	ldr	r0, [r7, #28]
 800dc2c:	f00c fe90 	bl	801a950 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <err_tcp+0x90>
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2104      	movs	r1, #4
 800dc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc42:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <err_tcp+0xa4>
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	2200      	movs	r2, #0
 800dc52:	2100      	movs	r1, #0
 800dc54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc56:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <err_tcp+0xb8>
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc64:	2200      	movs	r2, #0
 800dc66:	2102      	movs	r1, #2
 800dc68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc6a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	3310      	adds	r3, #16
 800dc70:	4618      	mov	r0, r3
 800dc72:	f00c fd44 	bl	801a6fe <sys_mbox_valid>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	3310      	adds	r3, #16
 800dc80:	2100      	movs	r1, #0
 800dc82:	4618      	mov	r0, r3
 800dc84:	f00c fcc6 	bl	801a614 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	3314      	adds	r3, #20
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f00c fd36 	bl	801a6fe <sys_mbox_valid>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9a:	3314      	adds	r3, #20
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f00c fcb8 	bl	801a614 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800dca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d007      	beq.n	800dcbc <err_tcp+0x108>
 800dcac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d003      	beq.n	800dcbc <err_tcp+0x108>
 800dcb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d14d      	bne.n	800dd58 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	7f1b      	ldrb	r3, [r3, #28]
 800dcc0:	f003 0304 	and.w	r3, r3, #4
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	bf14      	ite	ne
 800dcc8:	2301      	movne	r3, #1
 800dcca:	2300      	moveq	r3, #0
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	7f1b      	ldrb	r3, [r3, #28]
 800dcd4:	f023 0304 	bic.w	r3, r3, #4
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d145      	bne.n	800dd70 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d106      	bne.n	800dcfa <err_tcp+0x146>
 800dcec:	4b23      	ldr	r3, [pc, #140]	; (800dd7c <err_tcp+0x1c8>)
 800dcee:	f240 12b3 	movw	r2, #435	; 0x1b3
 800dcf2:	4925      	ldr	r1, [pc, #148]	; (800dd88 <err_tcp+0x1d4>)
 800dcf4:	4823      	ldr	r0, [pc, #140]	; (800dd84 <err_tcp+0x1d0>)
 800dcf6:	f00c fe85 	bl	801aa04 <iprintf>
      conn->current_msg->err = err;
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfe:	78fa      	ldrb	r2, [r7, #3]
 800dd00:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	330c      	adds	r3, #12
 800dd0a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800dd0c:	6938      	ldr	r0, [r7, #16]
 800dd0e:	f00c fd87 	bl	801a820 <sys_sem_valid>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d106      	bne.n	800dd26 <err_tcp+0x172>
 800dd18:	4b18      	ldr	r3, [pc, #96]	; (800dd7c <err_tcp+0x1c8>)
 800dd1a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dd1e:	491b      	ldr	r1, [pc, #108]	; (800dd8c <err_tcp+0x1d8>)
 800dd20:	4818      	ldr	r0, [pc, #96]	; (800dd84 <err_tcp+0x1d0>)
 800dd22:	f00c fe6f 	bl	801aa04 <iprintf>
      conn->current_msg = NULL;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	2200      	movs	r2, #0
 800dd2a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00e      	beq.n	800dd50 <err_tcp+0x19c>
 800dd32:	f00c fdff 	bl	801a934 <sys_arch_protect>
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dd3e:	f113 0f0c 	cmn.w	r3, #12
 800dd42:	db02      	blt.n	800dd4a <err_tcp+0x196>
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	78fa      	ldrb	r2, [r7, #3]
 800dd48:	721a      	strb	r2, [r3, #8]
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f00c fe00 	bl	801a950 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800dd50:	6938      	ldr	r0, [r7, #16]
 800dd52:	f00c fd4b 	bl	801a7ec <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800dd56:	e00b      	b.n	800dd70 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d008      	beq.n	800dd72 <err_tcp+0x1be>
 800dd60:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <err_tcp+0x1c8>)
 800dd62:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dd66:	490a      	ldr	r1, [pc, #40]	; (800dd90 <err_tcp+0x1dc>)
 800dd68:	4806      	ldr	r0, [pc, #24]	; (800dd84 <err_tcp+0x1d0>)
 800dd6a:	f00c fe4b 	bl	801aa04 <iprintf>
  }
}
 800dd6e:	e000      	b.n	800dd72 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800dd70:	bf00      	nop
}
 800dd72:	bf00      	nop
 800dd74:	3728      	adds	r7, #40	; 0x28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0801c3e8 	.word	0x0801c3e8
 800dd80:	0801c530 	.word	0x0801c530
 800dd84:	0801c464 	.word	0x0801c464
 800dd88:	0801c540 	.word	0x0801c540
 800dd8c:	0801c55c 	.word	0x0801c55c
 800dd90:	0801c578 	.word	0x0801c578

0800dd94 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f004 fb0f 	bl	80123c8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ddaa:	490a      	ldr	r1, [pc, #40]	; (800ddd4 <setup_tcp+0x40>)
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f004 fb1d 	bl	80123ec <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ddb2:	4909      	ldr	r1, [pc, #36]	; (800ddd8 <setup_tcp+0x44>)
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f004 fb3b 	bl	8012430 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ddba:	2202      	movs	r2, #2
 800ddbc:	4907      	ldr	r1, [pc, #28]	; (800dddc <setup_tcp+0x48>)
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f004 fb90 	bl	80124e4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ddc4:	4906      	ldr	r1, [pc, #24]	; (800dde0 <setup_tcp+0x4c>)
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f004 fb52 	bl	8012470 <tcp_err>
}
 800ddcc:	bf00      	nop
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	0800d935 	.word	0x0800d935
 800ddd8:	0800db0d 	.word	0x0800db0d
 800dddc:	0800da45 	.word	0x0800da45
 800dde0:	0800dbb5 	.word	0x0800dbb5

0800dde4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <accept_function+0x1e>
    return ERR_VAL;
 800ddfc:	f06f 0305 	mvn.w	r3, #5
 800de00:	e08d      	b.n	800df1e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	3314      	adds	r3, #20
 800de06:	4618      	mov	r0, r3
 800de08:	f00c fc79 	bl	801a6fe <sys_mbox_valid>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800de12:	f06f 0305 	mvn.w	r3, #5
 800de16:	e082      	b.n	800df1e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d115      	bne.n	800de4a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	3314      	adds	r3, #20
 800de22:	4941      	ldr	r1, [pc, #260]	; (800df28 <accept_function+0x144>)
 800de24:	4618      	mov	r0, r3
 800de26:	f00c fbf5 	bl	801a614 <sys_mbox_trypost>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d109      	bne.n	800de44 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de34:	2b00      	cmp	r3, #0
 800de36:	d005      	beq.n	800de44 <accept_function+0x60>
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de3c:	2200      	movs	r2, #0
 800de3e:	2100      	movs	r1, #0
 800de40:	69f8      	ldr	r0, [r7, #28]
 800de42:	4798      	blx	r3
    }
    return ERR_VAL;
 800de44:	f06f 0305 	mvn.w	r3, #5
 800de48:	e069      	b.n	800df1e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	4619      	mov	r1, r3
 800de54:	4610      	mov	r0, r2
 800de56:	f000 f8ff 	bl	800e058 <netconn_alloc>
 800de5a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d115      	bne.n	800de8e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	3314      	adds	r3, #20
 800de66:	4930      	ldr	r1, [pc, #192]	; (800df28 <accept_function+0x144>)
 800de68:	4618      	mov	r0, r3
 800de6a:	f00c fbd3 	bl	801a614 <sys_mbox_trypost>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d109      	bne.n	800de88 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d005      	beq.n	800de88 <accept_function+0xa4>
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de80:	2200      	movs	r2, #0
 800de82:	2100      	movs	r1, #0
 800de84:	69f8      	ldr	r0, [r7, #28]
 800de86:	4798      	blx	r3
    }
    return ERR_MEM;
 800de88:	f04f 33ff 	mov.w	r3, #4294967295
 800de8c:	e047      	b.n	800df1e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800de94:	69b8      	ldr	r0, [r7, #24]
 800de96:	f7ff ff7d 	bl	800dd94 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	79fa      	ldrb	r2, [r7, #7]
 800de9e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	3314      	adds	r3, #20
 800dea4:	69b9      	ldr	r1, [r7, #24]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f00c fbb4 	bl	801a614 <sys_mbox_trypost>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d02a      	beq.n	800df08 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800deb8:	2100      	movs	r1, #0
 800deba:	6978      	ldr	r0, [r7, #20]
 800debc:	f004 fa84 	bl	80123c8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800dec0:	2100      	movs	r1, #0
 800dec2:	6978      	ldr	r0, [r7, #20]
 800dec4:	f004 fa92 	bl	80123ec <tcp_recv>
    tcp_sent(pcb, NULL);
 800dec8:	2100      	movs	r1, #0
 800deca:	6978      	ldr	r0, [r7, #20]
 800decc:	f004 fab0 	bl	8012430 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ded0:	2200      	movs	r2, #0
 800ded2:	2100      	movs	r1, #0
 800ded4:	6978      	ldr	r0, [r7, #20]
 800ded6:	f004 fb05 	bl	80124e4 <tcp_poll>
    tcp_err(pcb, NULL);
 800deda:	2100      	movs	r1, #0
 800dedc:	6978      	ldr	r0, [r7, #20]
 800dede:	f004 fac7 	bl	8012470 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	2200      	movs	r2, #0
 800dee6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	3310      	adds	r3, #16
 800deec:	4618      	mov	r0, r3
 800deee:	f00c fb69 	bl	801a5c4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	3310      	adds	r3, #16
 800def6:	4618      	mov	r0, r3
 800def8:	f00c fc12 	bl	801a720 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800defc:	69b8      	ldr	r0, [r7, #24]
 800defe:	f000 f91b 	bl	800e138 <netconn_free>
    return ERR_MEM;
 800df02:	f04f 33ff 	mov.w	r3, #4294967295
 800df06:	e00a      	b.n	800df1e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d005      	beq.n	800df1c <accept_function+0x138>
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df14:	2200      	movs	r2, #0
 800df16:	2100      	movs	r1, #0
 800df18:	69f8      	ldr	r0, [r7, #28]
 800df1a:	4798      	blx	r3
  }

  return ERR_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3720      	adds	r7, #32
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	24004594 	.word	0x24004594

0800df2c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800df2c:	b590      	push	{r4, r7, lr}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d006      	beq.n	800df50 <pcb_new+0x24>
 800df42:	4b2b      	ldr	r3, [pc, #172]	; (800dff0 <pcb_new+0xc4>)
 800df44:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800df48:	492a      	ldr	r1, [pc, #168]	; (800dff4 <pcb_new+0xc8>)
 800df4a:	482b      	ldr	r0, [pc, #172]	; (800dff8 <pcb_new+0xcc>)
 800df4c:	f00c fd5a 	bl	801aa04 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df5a:	2b10      	cmp	r3, #16
 800df5c:	d022      	beq.n	800dfa4 <pcb_new+0x78>
 800df5e:	2b20      	cmp	r3, #32
 800df60:	d133      	bne.n	800dfca <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681c      	ldr	r4, [r3, #0]
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	4618      	mov	r0, r3
 800df6a:	f008 fe90 	bl	8016c8e <udp_new_ip_type>
 800df6e:	4603      	mov	r3, r0
 800df70:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d02a      	beq.n	800dfd2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b22      	cmp	r3, #34	; 0x22
 800df84:	d104      	bne.n	800df90 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6858      	ldr	r0, [r3, #4]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	4917      	ldr	r1, [pc, #92]	; (800dffc <pcb_new+0xd0>)
 800df9e:	f008 fe1b 	bl	8016bd8 <udp_recv>
    }
    break;
 800dfa2:	e016      	b.n	800dfd2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681c      	ldr	r4, [r3, #0]
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f004 f9fe 	bl	80123ac <tcp_new_ip_type>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00b      	beq.n	800dfd6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fee6 	bl	800dd94 <setup_tcp>
    }
    break;
 800dfc8:	e005      	b.n	800dfd6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	22fa      	movs	r2, #250	; 0xfa
 800dfce:	711a      	strb	r2, [r3, #4]
    return;
 800dfd0:	e00a      	b.n	800dfe8 <pcb_new+0xbc>
    break;
 800dfd2:	bf00      	nop
 800dfd4:	e000      	b.n	800dfd8 <pcb_new+0xac>
    break;
 800dfd6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d102      	bne.n	800dfe8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	22ff      	movs	r2, #255	; 0xff
 800dfe6:	711a      	strb	r2, [r3, #4]
  }
}
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd90      	pop	{r4, r7, pc}
 800dfee:	bf00      	nop
 800dff0:	0801c3e8 	.word	0x0801c3e8
 800dff4:	0801c594 	.word	0x0801c594
 800dff8:	0801c464 	.word	0x0801c464
 800dffc:	0800d839 	.word	0x0800d839

0800e000 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f7ff ff85 	bl	800df2c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d012      	beq.n	800e050 <lwip_netconn_do_newconn+0x50>
 800e02a:	f00c fc83 	bl	801a934 <sys_arch_protect>
 800e02e:	60b8      	str	r0, [r7, #8]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e038:	f113 0f0c 	cmn.w	r3, #12
 800e03c:	db05      	blt.n	800e04a <lwip_netconn_do_newconn+0x4a>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e048:	721a      	strb	r2, [r3, #8]
 800e04a:	68b8      	ldr	r0, [r7, #8]
 800e04c:	f00c fc80 	bl	801a950 <sys_arch_unprotect>
}
 800e050:	bf00      	nop
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e064:	2007      	movs	r0, #7
 800e066:	f001 fe6b 	bl	800fd40 <memp_malloc>
 800e06a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <netconn_alloc+0x1e>
    return NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	e055      	b.n	800e122 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	2200      	movs	r2, #0
 800e07a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	79fa      	ldrb	r2, [r7, #7]
 800e080:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2200      	movs	r2, #0
 800e086:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e08e:	2b10      	cmp	r3, #16
 800e090:	d004      	beq.n	800e09c <netconn_alloc+0x44>
 800e092:	2b20      	cmp	r3, #32
 800e094:	d105      	bne.n	800e0a2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e096:	2306      	movs	r3, #6
 800e098:	60fb      	str	r3, [r7, #12]
    break;
 800e09a:	e00a      	b.n	800e0b2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e09c:	2306      	movs	r3, #6
 800e09e:	60fb      	str	r3, [r7, #12]
    break;
 800e0a0:	e007      	b.n	800e0b2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e0a2:	4b22      	ldr	r3, [pc, #136]	; (800e12c <netconn_alloc+0xd4>)
 800e0a4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e0a8:	4921      	ldr	r1, [pc, #132]	; (800e130 <netconn_alloc+0xd8>)
 800e0aa:	4822      	ldr	r0, [pc, #136]	; (800e134 <netconn_alloc+0xdc>)
 800e0ac:	f00c fcaa 	bl	801aa04 <iprintf>
    goto free_and_return;
 800e0b0:	e032      	b.n	800e118 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	3310      	adds	r3, #16
 800e0b6:	68f9      	ldr	r1, [r7, #12]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f00c fa61 	bl	801a580 <sys_mbox_new>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d128      	bne.n	800e116 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	330c      	adds	r3, #12
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f00c fb35 	bl	801a73a <sys_sem_new>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d005      	beq.n	800e0e2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	3310      	adds	r3, #16
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f00c fa72 	bl	801a5c4 <sys_mbox_free>
    goto free_and_return;
 800e0e0:	e01a      	b.n	800e118 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	3314      	adds	r3, #20
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f00c fb1a 	bl	801a720 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2200      	movs	r2, #0
 800e104:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2200      	movs	r2, #0
 800e10a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2200      	movs	r2, #0
 800e110:	771a      	strb	r2, [r3, #28]
  return conn;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	e005      	b.n	800e122 <netconn_alloc+0xca>
    goto free_and_return;
 800e116:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	2007      	movs	r0, #7
 800e11c:	f001 fe86 	bl	800fe2c <memp_free>
  return NULL;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	0801c3e8 	.word	0x0801c3e8
 800e130:	0801c5b4 	.word	0x0801c5b4
 800e134:	0801c464 	.word	0x0801c464

0800e138 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d006      	beq.n	800e156 <netconn_free+0x1e>
 800e148:	4b1b      	ldr	r3, [pc, #108]	; (800e1b8 <netconn_free+0x80>)
 800e14a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e14e:	491b      	ldr	r1, [pc, #108]	; (800e1bc <netconn_free+0x84>)
 800e150:	481b      	ldr	r0, [pc, #108]	; (800e1c0 <netconn_free+0x88>)
 800e152:	f00c fc57 	bl	801aa04 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	3310      	adds	r3, #16
 800e15a:	4618      	mov	r0, r3
 800e15c:	f00c facf 	bl	801a6fe <sys_mbox_valid>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d006      	beq.n	800e174 <netconn_free+0x3c>
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <netconn_free+0x80>)
 800e168:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e16c:	4915      	ldr	r1, [pc, #84]	; (800e1c4 <netconn_free+0x8c>)
 800e16e:	4814      	ldr	r0, [pc, #80]	; (800e1c0 <netconn_free+0x88>)
 800e170:	f00c fc48 	bl	801aa04 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3314      	adds	r3, #20
 800e178:	4618      	mov	r0, r3
 800e17a:	f00c fac0 	bl	801a6fe <sys_mbox_valid>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d006      	beq.n	800e192 <netconn_free+0x5a>
 800e184:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <netconn_free+0x80>)
 800e186:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e18a:	490f      	ldr	r1, [pc, #60]	; (800e1c8 <netconn_free+0x90>)
 800e18c:	480c      	ldr	r0, [pc, #48]	; (800e1c0 <netconn_free+0x88>)
 800e18e:	f00c fc39 	bl	801aa04 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	330c      	adds	r3, #12
 800e196:	4618      	mov	r0, r3
 800e198:	f00c fb35 	bl	801a806 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	330c      	adds	r3, #12
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f00c fb4e 	bl	801a842 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	2007      	movs	r0, #7
 800e1aa:	f001 fe3f 	bl	800fe2c <memp_free>
}
 800e1ae:	bf00      	nop
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	0801c3e8 	.word	0x0801c3e8
 800e1bc:	0801c5dc 	.word	0x0801c5dc
 800e1c0:	0801c464 	.word	0x0801c464
 800e1c4:	0801c60c 	.word	0x0801c60c
 800e1c8:	0801c648 	.word	0x0801c648

0800e1cc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3310      	adds	r3, #16
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f00c fa90 	bl	801a6fe <sys_mbox_valid>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d035      	beq.n	800e250 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e1e4:	e01e      	b.n	800e224 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1ee:	2b10      	cmp	r3, #16
 800e1f0:	d114      	bne.n	800e21c <netconn_drain+0x50>
        if (mem != NULL) {
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d015      	beq.n	800e224 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d007      	beq.n	800e214 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685a      	ldr	r2, [r3, #4]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	891b      	ldrh	r3, [r3, #8]
 800e20c:	4619      	mov	r1, r3
 800e20e:	4610      	mov	r0, r2
 800e210:	f003 faf6 	bl	8011800 <tcp_recved>
          }
          pbuf_free(p);
 800e214:	6978      	ldr	r0, [r7, #20]
 800e216:	f002 fbff 	bl	8010a18 <pbuf_free>
 800e21a:	e003      	b.n	800e224 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 ff3e 	bl	800f0a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3310      	adds	r3, #16
 800e228:	f107 020c 	add.w	r2, r7, #12
 800e22c:	4611      	mov	r1, r2
 800e22e:	4618      	mov	r0, r3
 800e230:	f00c fa49 	bl	801a6c6 <sys_arch_mbox_tryfetch>
 800e234:	4603      	mov	r3, r0
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d1d4      	bne.n	800e1e6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3310      	adds	r3, #16
 800e240:	4618      	mov	r0, r3
 800e242:	f00c f9bf 	bl	801a5c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3310      	adds	r3, #16
 800e24a:	4618      	mov	r0, r3
 800e24c:	f00c fa68 	bl	801a720 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3314      	adds	r3, #20
 800e254:	4618      	mov	r0, r3
 800e256:	f00c fa52 	bl	801a6fe <sys_mbox_valid>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02e      	beq.n	800e2be <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e260:	e017      	b.n	800e292 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <netconn_drain+0xfc>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d013      	beq.n	800e292 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800e26e:	6938      	ldr	r0, [r7, #16]
 800e270:	f7ff ffac 	bl	800e1cc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d007      	beq.n	800e28c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	4618      	mov	r0, r3
 800e282:	f003 f929 	bl	80114d8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	2200      	movs	r2, #0
 800e28a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800e28c:	6938      	ldr	r0, [r7, #16]
 800e28e:	f7ff ff53 	bl	800e138 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3314      	adds	r3, #20
 800e296:	f107 020c 	add.w	r2, r7, #12
 800e29a:	4611      	mov	r1, r2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f00c fa12 	bl	801a6c6 <sys_arch_mbox_tryfetch>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a8:	d1db      	bne.n	800e262 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3314      	adds	r3, #20
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f00c f988 	bl	801a5c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3314      	adds	r3, #20
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f00c fa31 	bl	801a720 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e2be:	bf00      	nop
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	24004594 	.word	0x24004594

0800e2cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <lwip_netconn_do_close_internal+0x24>
 800e2e2:	4b90      	ldr	r3, [pc, #576]	; (800e524 <lwip_netconn_do_close_internal+0x258>)
 800e2e4:	f240 3243 	movw	r2, #835	; 0x343
 800e2e8:	498f      	ldr	r1, [pc, #572]	; (800e528 <lwip_netconn_do_close_internal+0x25c>)
 800e2ea:	4890      	ldr	r0, [pc, #576]	; (800e52c <lwip_netconn_do_close_internal+0x260>)
 800e2ec:	f00c fb8a 	bl	801aa04 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2f8:	2b10      	cmp	r3, #16
 800e2fa:	d006      	beq.n	800e30a <lwip_netconn_do_close_internal+0x3e>
 800e2fc:	4b89      	ldr	r3, [pc, #548]	; (800e524 <lwip_netconn_do_close_internal+0x258>)
 800e2fe:	f44f 7251 	mov.w	r2, #836	; 0x344
 800e302:	498b      	ldr	r1, [pc, #556]	; (800e530 <lwip_netconn_do_close_internal+0x264>)
 800e304:	4889      	ldr	r0, [pc, #548]	; (800e52c <lwip_netconn_do_close_internal+0x260>)
 800e306:	f00c fb7d 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	785b      	ldrb	r3, [r3, #1]
 800e30e:	2b04      	cmp	r3, #4
 800e310:	d006      	beq.n	800e320 <lwip_netconn_do_close_internal+0x54>
 800e312:	4b84      	ldr	r3, [pc, #528]	; (800e524 <lwip_netconn_do_close_internal+0x258>)
 800e314:	f240 3245 	movw	r2, #837	; 0x345
 800e318:	4986      	ldr	r1, [pc, #536]	; (800e534 <lwip_netconn_do_close_internal+0x268>)
 800e31a:	4884      	ldr	r0, [pc, #528]	; (800e52c <lwip_netconn_do_close_internal+0x260>)
 800e31c:	f00c fb72 	bl	801aa04 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d106      	bne.n	800e336 <lwip_netconn_do_close_internal+0x6a>
 800e328:	4b7e      	ldr	r3, [pc, #504]	; (800e524 <lwip_netconn_do_close_internal+0x258>)
 800e32a:	f240 3246 	movw	r2, #838	; 0x346
 800e32e:	4982      	ldr	r1, [pc, #520]	; (800e538 <lwip_netconn_do_close_internal+0x26c>)
 800e330:	487e      	ldr	r0, [pc, #504]	; (800e52c <lwip_netconn_do_close_internal+0x260>)
 800e332:	f00c fb67 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d106      	bne.n	800e34c <lwip_netconn_do_close_internal+0x80>
 800e33e:	4b79      	ldr	r3, [pc, #484]	; (800e524 <lwip_netconn_do_close_internal+0x258>)
 800e340:	f240 3247 	movw	r2, #839	; 0x347
 800e344:	497d      	ldr	r1, [pc, #500]	; (800e53c <lwip_netconn_do_close_internal+0x270>)
 800e346:	4879      	ldr	r0, [pc, #484]	; (800e52c <lwip_netconn_do_close_internal+0x260>)
 800e348:	f00c fb5c 	bl	801aa04 <iprintf>

  tpcb = conn->pcb.tcp;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e356:	7a1b      	ldrb	r3, [r3, #8]
 800e358:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e35a:	7dfb      	ldrb	r3, [r7, #23]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e36a:	7dfb      	ldrb	r3, [r7, #23]
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d102      	bne.n	800e376 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800e370:	2301      	movs	r3, #1
 800e372:	77bb      	strb	r3, [r7, #30]
 800e374:	e01f      	b.n	800e3b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e376:	7dbb      	ldrb	r3, [r7, #22]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00e      	beq.n	800e39a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e380:	2b05      	cmp	r3, #5
 800e382:	d007      	beq.n	800e394 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e388:	2b06      	cmp	r3, #6
 800e38a:	d003      	beq.n	800e394 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e390:	2b08      	cmp	r3, #8
 800e392:	d102      	bne.n	800e39a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800e394:	2301      	movs	r3, #1
 800e396:	77bb      	strb	r3, [r7, #30]
 800e398:	e00d      	b.n	800e3b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e39a:	7d7b      	ldrb	r3, [r7, #21]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d008      	beq.n	800e3b2 <lwip_netconn_do_close_internal+0xe6>
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	7e9b      	ldrb	r3, [r3, #26]
 800e3a4:	f003 0310 	and.w	r3, r3, #16
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	77bb      	strb	r3, [r7, #30]
 800e3b0:	e001      	b.n	800e3b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800e3b6:	7fbb      	ldrb	r3, [r7, #30]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e3bc:	2100      	movs	r1, #0
 800e3be:	69b8      	ldr	r0, [r7, #24]
 800e3c0:	f004 f802 	bl	80123c8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	7d1b      	ldrb	r3, [r3, #20]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d104      	bne.n	800e3d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	69b8      	ldr	r0, [r7, #24]
 800e3d0:	f004 f870 	bl	80124b4 <tcp_accept>
 800e3d4:	e01d      	b.n	800e412 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e3d6:	7dbb      	ldrb	r3, [r7, #22]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d007      	beq.n	800e3ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e3dc:	2100      	movs	r1, #0
 800e3de:	69b8      	ldr	r0, [r7, #24]
 800e3e0:	f004 f804 	bl	80123ec <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	69b8      	ldr	r0, [r7, #24]
 800e3e8:	f004 f864 	bl	80124b4 <tcp_accept>
    }
    if (shut_tx) {
 800e3ec:	7d7b      	ldrb	r3, [r7, #21]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d003      	beq.n	800e3fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	69b8      	ldr	r0, [r7, #24]
 800e3f6:	f004 f81b 	bl	8012430 <tcp_sent>
    }
    if (close) {
 800e3fa:	7fbb      	ldrb	r3, [r7, #30]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d008      	beq.n	800e412 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e400:	2200      	movs	r2, #0
 800e402:	2100      	movs	r1, #0
 800e404:	69b8      	ldr	r0, [r7, #24]
 800e406:	f004 f86d 	bl	80124e4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800e40a:	2100      	movs	r1, #0
 800e40c:	69b8      	ldr	r0, [r7, #24]
 800e40e:	f004 f82f 	bl	8012470 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800e412:	7fbb      	ldrb	r3, [r7, #30]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e418:	69b8      	ldr	r0, [r7, #24]
 800e41a:	f002 ff4b 	bl	80112b4 <tcp_close>
 800e41e:	4603      	mov	r3, r0
 800e420:	77fb      	strb	r3, [r7, #31]
 800e422:	e007      	b.n	800e434 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e424:	7dbb      	ldrb	r3, [r7, #22]
 800e426:	7d7a      	ldrb	r2, [r7, #21]
 800e428:	4619      	mov	r1, r3
 800e42a:	69b8      	ldr	r0, [r7, #24]
 800e42c:	f002 ff5a 	bl	80112e4 <tcp_shutdown>
 800e430:	4603      	mov	r3, r0
 800e432:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800e434:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e43c:	2301      	movs	r3, #1
 800e43e:	777b      	strb	r3, [r7, #29]
 800e440:	e016      	b.n	800e470 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e442:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44a:	d10f      	bne.n	800e46c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e450:	7a5b      	ldrb	r3, [r3, #9]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10c      	bne.n	800e470 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e456:	2301      	movs	r3, #1
 800e458:	777b      	strb	r3, [r7, #29]
        if (close) {
 800e45a:	7fbb      	ldrb	r3, [r7, #30]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e460:	69b8      	ldr	r0, [r7, #24]
 800e462:	f003 f839 	bl	80114d8 <tcp_abort>
          err = ERR_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	77fb      	strb	r3, [r7, #31]
 800e46a:	e001      	b.n	800e470 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e46c:	2301      	movs	r3, #1
 800e46e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800e470:	7f7b      	ldrb	r3, [r7, #29]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d064      	beq.n	800e540 <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	330c      	adds	r3, #12
 800e47e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e484:	7ffa      	ldrb	r2, [r7, #31]
 800e486:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e494:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d129      	bne.n	800e4f0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800e49c:	7fbb      	ldrb	r3, [r7, #30]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00c      	beq.n	800e4bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d005      	beq.n	800e4bc <lwip_netconn_do_close_internal+0x1f0>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	2104      	movs	r1, #4
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	4798      	blx	r3
      }
      if (shut_rx) {
 800e4bc:	7dbb      	ldrb	r3, [r7, #22]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d009      	beq.n	800e4d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d005      	beq.n	800e4d6 <lwip_netconn_do_close_internal+0x20a>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	4798      	blx	r3
      }
      if (shut_tx) {
 800e4d6:	7d7b      	ldrb	r3, [r7, #21]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d009      	beq.n	800e4f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d005      	beq.n	800e4f0 <lwip_netconn_do_close_internal+0x224>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2102      	movs	r1, #2
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00e      	beq.n	800e514 <lwip_netconn_do_close_internal+0x248>
 800e4f6:	f00c fa1d 	bl	801a934 <sys_arch_protect>
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e502:	f113 0f0c 	cmn.w	r3, #12
 800e506:	db02      	blt.n	800e50e <lwip_netconn_do_close_internal+0x242>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	7ffa      	ldrb	r2, [r7, #31]
 800e50c:	721a      	strb	r2, [r3, #8]
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f00c fa1e 	bl	801a950 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e51a:	6938      	ldr	r0, [r7, #16]
 800e51c:	f00c f966 	bl	801a7ec <sys_sem_signal>
    }
    return ERR_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	e03c      	b.n	800e59e <lwip_netconn_do_close_internal+0x2d2>
 800e524:	0801c3e8 	.word	0x0801c3e8
 800e528:	0801c684 	.word	0x0801c684
 800e52c:	0801c464 	.word	0x0801c464
 800e530:	0801c694 	.word	0x0801c694
 800e534:	0801c6b4 	.word	0x0801c6b4
 800e538:	0801c6d8 	.word	0x0801c6d8
 800e53c:	0801c540 	.word	0x0801c540
  }
  if (!close_finished) {
 800e540:	7f7b      	ldrb	r3, [r7, #29]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d11e      	bne.n	800e584 <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	7d1b      	ldrb	r3, [r3, #20]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d106      	bne.n	800e55c <lwip_netconn_do_close_internal+0x290>
 800e54e:	4b16      	ldr	r3, [pc, #88]	; (800e5a8 <lwip_netconn_do_close_internal+0x2dc>)
 800e550:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e554:	4915      	ldr	r1, [pc, #84]	; (800e5ac <lwip_netconn_do_close_internal+0x2e0>)
 800e556:	4816      	ldr	r0, [pc, #88]	; (800e5b0 <lwip_netconn_do_close_internal+0x2e4>)
 800e558:	f00c fa54 	bl	801aa04 <iprintf>
    if (shut_tx) {
 800e55c:	7d7b      	ldrb	r3, [r7, #21]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d003      	beq.n	800e56a <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 800e562:	4914      	ldr	r1, [pc, #80]	; (800e5b4 <lwip_netconn_do_close_internal+0x2e8>)
 800e564:	69b8      	ldr	r0, [r7, #24]
 800e566:	f003 ff63 	bl	8012430 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e56a:	2201      	movs	r2, #1
 800e56c:	4912      	ldr	r1, [pc, #72]	; (800e5b8 <lwip_netconn_do_close_internal+0x2ec>)
 800e56e:	69b8      	ldr	r0, [r7, #24]
 800e570:	f003 ffb8 	bl	80124e4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e574:	4911      	ldr	r1, [pc, #68]	; (800e5bc <lwip_netconn_do_close_internal+0x2f0>)
 800e576:	69b8      	ldr	r0, [r7, #24]
 800e578:	f003 ff7a 	bl	8012470 <tcp_err>
    tcp_arg(tpcb, conn);
 800e57c:	6879      	ldr	r1, [r7, #4]
 800e57e:	69b8      	ldr	r0, [r7, #24]
 800e580:	f003 ff22 	bl	80123c8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e584:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d106      	bne.n	800e59a <lwip_netconn_do_close_internal+0x2ce>
 800e58c:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <lwip_netconn_do_close_internal+0x2dc>)
 800e58e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e592:	490b      	ldr	r1, [pc, #44]	; (800e5c0 <lwip_netconn_do_close_internal+0x2f4>)
 800e594:	4806      	ldr	r0, [pc, #24]	; (800e5b0 <lwip_netconn_do_close_internal+0x2e4>)
 800e596:	f00c fa35 	bl	801aa04 <iprintf>
  return err;
 800e59a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3720      	adds	r7, #32
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	0801c3e8 	.word	0x0801c3e8
 800e5ac:	0801c6ec 	.word	0x0801c6ec
 800e5b0:	0801c464 	.word	0x0801c464
 800e5b4:	0800db0d 	.word	0x0800db0d
 800e5b8:	0800da45 	.word	0x0800da45
 800e5bc:	0800dbb5 	.word	0x0800dbb5
 800e5c0:	0801c710 	.word	0x0801c710

0800e5c4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	785b      	ldrb	r3, [r3, #1]
 800e5d6:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e5d8:	7cfb      	ldrb	r3, [r7, #19]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00d      	beq.n	800e5fa <lwip_netconn_do_delconn+0x36>
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5e8:	2b10      	cmp	r3, #16
 800e5ea:	d006      	beq.n	800e5fa <lwip_netconn_do_delconn+0x36>
 800e5ec:	4b6f      	ldr	r3, [pc, #444]	; (800e7ac <lwip_netconn_do_delconn+0x1e8>)
 800e5ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e5f2:	496f      	ldr	r1, [pc, #444]	; (800e7b0 <lwip_netconn_do_delconn+0x1ec>)
 800e5f4:	486f      	ldr	r0, [pc, #444]	; (800e7b4 <lwip_netconn_do_delconn+0x1f0>)
 800e5f6:	f00c fa05 	bl	801aa04 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e5fa:	7cfb      	ldrb	r3, [r7, #19]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d005      	beq.n	800e60c <lwip_netconn_do_delconn+0x48>
 800e600:	7cfb      	ldrb	r3, [r7, #19]
 800e602:	2b02      	cmp	r3, #2
 800e604:	d002      	beq.n	800e60c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e606:	7cfb      	ldrb	r3, [r7, #19]
 800e608:	2b03      	cmp	r3, #3
 800e60a:	d109      	bne.n	800e620 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e60c:	7cfb      	ldrb	r3, [r7, #19]
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d10a      	bne.n	800e628 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	7f1b      	ldrb	r3, [r3, #28]
 800e618:	f003 0304 	and.w	r3, r3, #4
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d103      	bne.n	800e628 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	22fb      	movs	r2, #251	; 0xfb
 800e624:	711a      	strb	r2, [r3, #4]
 800e626:	e09c      	b.n	800e762 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e628:	7cfb      	ldrb	r3, [r7, #19]
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d10d      	bne.n	800e64a <lwip_netconn_do_delconn+0x86>
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	7f1b      	ldrb	r3, [r3, #28]
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <lwip_netconn_do_delconn+0x86>
 800e63c:	4b5b      	ldr	r3, [pc, #364]	; (800e7ac <lwip_netconn_do_delconn+0x1e8>)
 800e63e:	f240 421e 	movw	r2, #1054	; 0x41e
 800e642:	495d      	ldr	r1, [pc, #372]	; (800e7b8 <lwip_netconn_do_delconn+0x1f4>)
 800e644:	485b      	ldr	r0, [pc, #364]	; (800e7b4 <lwip_netconn_do_delconn+0x1f0>)
 800e646:	f00c f9dd 	bl	801aa04 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2200      	movs	r2, #0
 800e64e:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4618      	mov	r0, r3
 800e656:	f7ff fdb9 	bl	800e1cc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d064      	beq.n	800e72e <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e66e:	2b10      	cmp	r3, #16
 800e670:	d00d      	beq.n	800e68e <lwip_netconn_do_delconn+0xca>
 800e672:	2b20      	cmp	r3, #32
 800e674:	d156      	bne.n	800e724 <lwip_netconn_do_delconn+0x160>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	4618      	mov	r0, r3
 800e688:	f008 fab8 	bl	8016bfc <udp_remove>
        break;
 800e68c:	e04b      	b.n	800e726 <lwip_netconn_do_delconn+0x162>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e694:	2b00      	cmp	r3, #0
 800e696:	d104      	bne.n	800e6a2 <lwip_netconn_do_delconn+0xde>
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d006      	beq.n	800e6b0 <lwip_netconn_do_delconn+0xec>
 800e6a2:	4b42      	ldr	r3, [pc, #264]	; (800e7ac <lwip_netconn_do_delconn+0x1e8>)
 800e6a4:	f240 4234 	movw	r2, #1076	; 0x434
 800e6a8:	4944      	ldr	r1, [pc, #272]	; (800e7bc <lwip_netconn_do_delconn+0x1f8>)
 800e6aa:	4842      	ldr	r0, [pc, #264]	; (800e7b4 <lwip_netconn_do_delconn+0x1f0>)
 800e6ac:	f00c f9aa 	bl	801aa04 <iprintf>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2204      	movs	r2, #4
 800e6b6:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2203      	movs	r2, #3
 800e6bc:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff fdfd 	bl	800e2cc <lwip_netconn_do_close_internal>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d065      	beq.n	800e7a4 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	785b      	ldrb	r3, [r3, #1]
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	d006      	beq.n	800e6f0 <lwip_netconn_do_delconn+0x12c>
 800e6e2:	4b32      	ldr	r3, [pc, #200]	; (800e7ac <lwip_netconn_do_delconn+0x1e8>)
 800e6e4:	f240 423b 	movw	r2, #1083	; 0x43b
 800e6e8:	4935      	ldr	r1, [pc, #212]	; (800e7c0 <lwip_netconn_do_delconn+0x1fc>)
 800e6ea:	4832      	ldr	r0, [pc, #200]	; (800e7b4 <lwip_netconn_do_delconn+0x1f0>)
 800e6ec:	f00c f98a 	bl	801aa04 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e6f0:	4834      	ldr	r0, [pc, #208]	; (800e7c4 <lwip_netconn_do_delconn+0x200>)
 800e6f2:	f00c f8ec 	bl	801a8ce <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	330c      	adds	r3, #12
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	4618      	mov	r0, r3
 800e700:	f00c f843 	bl	801a78a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e704:	482f      	ldr	r0, [pc, #188]	; (800e7c4 <lwip_netconn_do_delconn+0x200>)
 800e706:	f00c f8d3 	bl	801a8b0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d047      	beq.n	800e7a4 <lwip_netconn_do_delconn+0x1e0>
 800e714:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <lwip_netconn_do_delconn+0x1e8>)
 800e716:	f240 423f 	movw	r2, #1087	; 0x43f
 800e71a:	4929      	ldr	r1, [pc, #164]	; (800e7c0 <lwip_netconn_do_delconn+0x1fc>)
 800e71c:	4825      	ldr	r0, [pc, #148]	; (800e7b4 <lwip_netconn_do_delconn+0x1f0>)
 800e71e:	f00c f971 	bl	801aa04 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 800e722:	e03f      	b.n	800e7a4 <lwip_netconn_do_delconn+0x1e0>
#endif /* LWIP_TCP */
      default:
        break;
 800e724:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2200      	movs	r2, #0
 800e72c:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e734:	2b00      	cmp	r3, #0
 800e736:	d007      	beq.n	800e748 <lwip_netconn_do_delconn+0x184>
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	6810      	ldr	r0, [r2, #0]
 800e742:	2200      	movs	r2, #0
 800e744:	2100      	movs	r1, #0
 800e746:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <lwip_netconn_do_delconn+0x19e>
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e758:	697a      	ldr	r2, [r7, #20]
 800e75a:	6810      	ldr	r0, [r2, #0]
 800e75c:	2200      	movs	r2, #0
 800e75e:	2102      	movs	r1, #2
 800e760:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	330c      	adds	r3, #12
 800e768:	4618      	mov	r0, r3
 800e76a:	f00c f859 	bl	801a820 <sys_sem_valid>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d018      	beq.n	800e7a6 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d014      	beq.n	800e7a6 <lwip_netconn_do_delconn+0x1e2>
 800e77c:	f00c f8da 	bl	801a934 <sys_arch_protect>
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e78a:	f113 0f0c 	cmn.w	r3, #12
 800e78e:	db05      	blt.n	800e79c <lwip_netconn_do_delconn+0x1d8>
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e79a:	721a      	strb	r2, [r3, #8]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f00c f8d7 	bl	801a950 <sys_arch_unprotect>
 800e7a2:	e000      	b.n	800e7a6 <lwip_netconn_do_delconn+0x1e2>
        return;
 800e7a4:	bf00      	nop
  }
}
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	0801c3e8 	.word	0x0801c3e8
 800e7b0:	0801c720 	.word	0x0801c720
 800e7b4:	0801c464 	.word	0x0801c464
 800e7b8:	0801c734 	.word	0x0801c734
 800e7bc:	0801c754 	.word	0x0801c754
 800e7c0:	0801c770 	.word	0x0801c770
 800e7c4:	240045a4 	.word	0x240045a4

0800e7c8 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e7dc:	f113 0f0c 	cmn.w	r3, #12
 800e7e0:	da06      	bge.n	800e7f0 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	711a      	strb	r2, [r3, #4]
 800e7ee:	e031      	b.n	800e854 <lwip_netconn_do_bind+0x8c>
  } else {
    msg->err = ERR_VAL;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	22fa      	movs	r2, #250	; 0xfa
 800e7f4:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d026      	beq.n	800e84e <lwip_netconn_do_bind+0x86>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e80a:	2b10      	cmp	r3, #16
 800e80c:	d010      	beq.n	800e830 <lwip_netconn_do_bind+0x68>
 800e80e:	2b20      	cmp	r3, #32
 800e810:	d11f      	bne.n	800e852 <lwip_netconn_do_bind+0x8a>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6858      	ldr	r0, [r3, #4]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6899      	ldr	r1, [r3, #8]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	899b      	ldrh	r3, [r3, #12]
 800e820:	461a      	mov	r2, r3
 800e822:	f008 f969 	bl	8016af8 <udp_bind>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	711a      	strb	r2, [r3, #4]
        break;
 800e82e:	e011      	b.n	800e854 <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6858      	ldr	r0, [r3, #4]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6899      	ldr	r1, [r3, #8]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	899b      	ldrh	r3, [r3, #12]
 800e83e:	461a      	mov	r2, r3
 800e840:	f002 fe56 	bl	80114f0 <tcp_bind>
 800e844:	4603      	mov	r3, r0
 800e846:	461a      	mov	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	711a      	strb	r2, [r3, #4]
        break;
 800e84c:	e002      	b.n	800e854 <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_TCP */
      default:
        break;
      }
    }
 800e84e:	bf00      	nop
 800e850:	e000      	b.n	800e854 <lwip_netconn_do_bind+0x8c>
        break;
 800e852:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d012      	beq.n	800e882 <lwip_netconn_do_bind+0xba>
 800e85c:	f00c f86a 	bl	801a934 <sys_arch_protect>
 800e860:	60b8      	str	r0, [r7, #8]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e86a:	f113 0f0c 	cmn.w	r3, #12
 800e86e:	db05      	blt.n	800e87c <lwip_netconn_do_bind+0xb4>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e87a:	721a      	strb	r2, [r3, #8]
 800e87c:	68b8      	ldr	r0, [r7, #8]
 800e87e:	f00c f867 	bl	801a950 <sys_arch_unprotect>
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e8a0:	f113 0f0c 	cmn.w	r3, #12
 800e8a4:	da06      	bge.n	800e8b4 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	711a      	strb	r2, [r3, #4]
 800e8b2:	e090      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	22f5      	movs	r2, #245	; 0xf5
 800e8b8:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 8088 	beq.w	800e9d6 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8d0:	2b10      	cmp	r3, #16
 800e8d2:	d17d      	bne.n	800e9d0 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	785b      	ldrb	r3, [r3, #1]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d16f      	bne.n	800e9be <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	7d1b      	ldrb	r3, [r3, #20]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d003      	beq.n	800e8f2 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	22fa      	movs	r2, #250	; 0xfa
 800e8ee:	711a      	strb	r2, [r3, #4]
 800e8f0:	e071      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e8f2:	23ff      	movs	r3, #255	; 0xff
 800e8f4:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	f107 020f 	add.w	r2, r7, #15
 800e900:	7ef9      	ldrb	r1, [r7, #27]
 800e902:	4618      	mov	r0, r3
 800e904:	f002 fe96 	bl	8011634 <tcp_listen_with_backlog_and_err>
 800e908:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d104      	bne.n	800e91a <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800e910:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	711a      	strb	r2, [r3, #4]
 800e918:	e05d      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3310      	adds	r3, #16
 800e920:	4618      	mov	r0, r3
 800e922:	f00b feec 	bl	801a6fe <sys_mbox_valid>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00b      	beq.n	800e944 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3310      	adds	r3, #16
 800e932:	4618      	mov	r0, r3
 800e934:	f00b fe46 	bl	801a5c4 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	3310      	adds	r3, #16
 800e93e:	4618      	mov	r0, r3
 800e940:	f00b feee 	bl	801a720 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	2200      	movs	r2, #0
 800e948:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3314      	adds	r3, #20
 800e950:	4618      	mov	r0, r3
 800e952:	f00b fed4 	bl	801a6fe <sys_mbox_valid>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10a      	bne.n	800e972 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3314      	adds	r3, #20
 800e962:	2106      	movs	r1, #6
 800e964:	4618      	mov	r0, r3
 800e966:	f00b fe0b 	bl	801a580 <sys_mbox_new>
 800e96a:	4603      	mov	r3, r0
 800e96c:	461a      	mov	r2, r3
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d118      	bne.n	800e9ae <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2202      	movs	r2, #2
 800e982:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4619      	mov	r1, r3
 800e998:	4610      	mov	r0, r2
 800e99a:	f003 fd15 	bl	80123c8 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	4919      	ldr	r1, [pc, #100]	; (800ea0c <lwip_netconn_do_listen+0x180>)
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f003 fd84 	bl	80124b4 <tcp_accept>
 800e9ac:	e013      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800e9ae:	6978      	ldr	r0, [r7, #20]
 800e9b0:	f002 fc80 	bl	80112b4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	605a      	str	r2, [r3, #4]
 800e9bc:	e00b      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	785b      	ldrb	r3, [r3, #1]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d106      	bne.n	800e9d6 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	711a      	strb	r2, [r3, #4]
 800e9ce:	e002      	b.n	800e9d6 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	22f0      	movs	r2, #240	; 0xf0
 800e9d4:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d012      	beq.n	800ea04 <lwip_netconn_do_listen+0x178>
 800e9de:	f00b ffa9 	bl	801a934 <sys_arch_protect>
 800e9e2:	6138      	str	r0, [r7, #16]
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9ec:	f113 0f0c 	cmn.w	r3, #12
 800e9f0:	db05      	blt.n	800e9fe <lwip_netconn_do_listen+0x172>
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	69fa      	ldr	r2, [r7, #28]
 800e9f8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e9fc:	721a      	strb	r2, [r3, #8]
 800e9fe:	6938      	ldr	r0, [r7, #16]
 800ea00:	f00b ffa6 	bl	801a950 <sys_arch_unprotect>
}
 800ea04:	bf00      	nop
 800ea06:	3720      	adds	r7, #32
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	0800dde5 	.word	0x0800dde5

0800ea10 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d022      	beq.n	800ea72 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea36:	2b10      	cmp	r3, #16
 800ea38:	d11b      	bne.n	800ea72 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea46:	d202      	bcs.n	800ea4e <lwip_netconn_do_recv+0x3e>
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	e001      	b.n	800ea52 <lwip_netconn_do_recv+0x42>
 800ea4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea52:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	89fa      	ldrh	r2, [r7, #14]
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f002 fece 	bl	8011800 <tcp_recved>
        remaining -= recved;
 800ea64:	89fb      	ldrh	r3, [r7, #14]
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e6      	bne.n	800ea40 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d012      	beq.n	800eaa0 <lwip_netconn_do_recv+0x90>
 800ea7a:	f00b ff5b 	bl	801a934 <sys_arch_protect>
 800ea7e:	60b8      	str	r0, [r7, #8]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea88:	f113 0f0c 	cmn.w	r3, #12
 800ea8c:	db05      	blt.n	800ea9a <lwip_netconn_do_recv+0x8a>
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	693a      	ldr	r2, [r7, #16]
 800ea94:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ea98:	721a      	strb	r2, [r3, #8]
 800ea9a:	68b8      	ldr	r0, [r7, #8]
 800ea9c:	f00b ff58 	bl	801a950 <sys_arch_unprotect>
}
 800eaa0:	bf00      	nop
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	; 0x28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d106      	bne.n	800eace <lwip_netconn_do_writemore+0x26>
 800eac0:	4b9b      	ldr	r3, [pc, #620]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800eac2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800eac6:	499b      	ldr	r1, [pc, #620]	; (800ed34 <lwip_netconn_do_writemore+0x28c>)
 800eac8:	489b      	ldr	r0, [pc, #620]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800eaca:	f00b ff9b 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	785b      	ldrb	r3, [r3, #1]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d006      	beq.n	800eae4 <lwip_netconn_do_writemore+0x3c>
 800ead6:	4b96      	ldr	r3, [pc, #600]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800ead8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800eadc:	4997      	ldr	r1, [pc, #604]	; (800ed3c <lwip_netconn_do_writemore+0x294>)
 800eade:	4896      	ldr	r0, [pc, #600]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800eae0:	f00b ff90 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d106      	bne.n	800eafa <lwip_netconn_do_writemore+0x52>
 800eaec:	4b90      	ldr	r3, [pc, #576]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800eaee:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800eaf2:	4993      	ldr	r1, [pc, #588]	; (800ed40 <lwip_netconn_do_writemore+0x298>)
 800eaf4:	4890      	ldr	r0, [pc, #576]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800eaf6:	f00b ff85 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <lwip_netconn_do_writemore+0x68>
 800eb02:	4b8b      	ldr	r3, [pc, #556]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800eb04:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800eb08:	498e      	ldr	r1, [pc, #568]	; (800ed44 <lwip_netconn_do_writemore+0x29c>)
 800eb0a:	488b      	ldr	r0, [pc, #556]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800eb0c:	f00b ff7a 	bl	801aa04 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a1a      	ldr	r2, [r3, #32]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d306      	bcc.n	800eb2c <lwip_netconn_do_writemore+0x84>
 800eb1e:	4b84      	ldr	r3, [pc, #528]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800eb20:	f240 52e7 	movw	r2, #1511	; 0x5e7
 800eb24:	4988      	ldr	r1, [pc, #544]	; (800ed48 <lwip_netconn_do_writemore+0x2a0>)
 800eb26:	4884      	ldr	r0, [pc, #528]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800eb28:	f00b ff6c 	bl	801aa04 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb30:	7c1b      	ldrb	r3, [r3, #16]
 800eb32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7f1b      	ldrb	r3, [r3, #28]
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <lwip_netconn_do_writemore+0xa6>
 800eb42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eb46:	f003 0304 	and.w	r3, r3, #4
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <lwip_netconn_do_writemore+0xaa>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e000      	b.n	800eb54 <lwip_netconn_do_writemore+0xac>
 800eb52:	2300      	movs	r3, #0
 800eb54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5c:	689a      	ldr	r2, [r3, #8]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a1b      	ldr	r3, [r3, #32]
 800eb62:	4413      	add	r3, r2
 800eb64:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6a:	68da      	ldr	r2, [r3, #12]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a1b      	ldr	r3, [r3, #32]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb7a:	d309      	bcc.n	800eb90 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800eb7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb80:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800eb82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eb86:	f043 0302 	orr.w	r3, r3, #2
 800eb8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb8e:	e001      	b.n	800eb94 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb9c:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800eb9e:	8afa      	ldrh	r2, [r7, #22]
 800eba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d212      	bcs.n	800ebcc <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800eba6:	8afb      	ldrh	r3, [r7, #22]
 800eba8:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800ebaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d006      	beq.n	800ebc0 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800ebb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d109      	bne.n	800ebcc <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800ebb8:	23f9      	movs	r3, #249	; 0xf9
 800ebba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800ebbe:	e02a      	b.n	800ec16 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ebc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebc4:	f043 0302 	orr.w	r3, r3, #2
 800ebc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a1a      	ldr	r2, [r3, #32]
 800ebd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebd2:	441a      	add	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d906      	bls.n	800ebec <lwip_netconn_do_writemore+0x144>
 800ebde:	4b54      	ldr	r3, [pc, #336]	; (800ed30 <lwip_netconn_do_writemore+0x288>)
 800ebe0:	f240 6213 	movw	r2, #1555	; 0x613
 800ebe4:	4959      	ldr	r1, [pc, #356]	; (800ed4c <lwip_netconn_do_writemore+0x2a4>)
 800ebe6:	4854      	ldr	r0, [pc, #336]	; (800ed38 <lwip_netconn_do_writemore+0x290>)
 800ebe8:	f00b ff0c 	bl	801aa04 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6858      	ldr	r0, [r3, #4]
 800ebf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebf6:	69f9      	ldr	r1, [r7, #28]
 800ebf8:	f006 fa26 	bl	8015048 <tcp_write>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ec02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d004      	beq.n	800ec14 <lwip_netconn_do_writemore+0x16c>
 800ec0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d133      	bne.n	800ec7c <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800ec14:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800ec16:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d017      	beq.n	800ec4e <lwip_netconn_do_writemore+0x1a6>
 800ec1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d211      	bcs.n	800ec4e <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d005      	beq.n	800ec3e <lwip_netconn_do_writemore+0x196>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec38:	2103      	movs	r1, #3
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	7f1b      	ldrb	r3, [r3, #28]
 800ec42:	f043 0310 	orr.w	r3, r3, #16
 800ec46:	b2da      	uxtb	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	771a      	strb	r2, [r3, #28]
 800ec4c:	e016      	b.n	800ec7c <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec56:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ec5a:	d305      	bcc.n	800ec68 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ec64:	2b04      	cmp	r3, #4
 800ec66:	d909      	bls.n	800ec7c <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d005      	beq.n	800ec7c <lwip_netconn_do_writemore+0x1d4>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec76:	2103      	movs	r1, #3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ec7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d134      	bne.n	800ecee <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a1a      	ldr	r2, [r3, #32]
 800ec88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec8a:	441a      	add	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a1a      	ldr	r2, [r3, #32]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d003      	beq.n	800eca6 <lwip_netconn_do_writemore+0x1fe>
 800ec9e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d007      	beq.n	800ecb6 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	6a12      	ldr	r2, [r2, #32]
 800ecae:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f006 fe76 	bl	80159ac <tcp_output>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ecc4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ecc8:	f113 0f0c 	cmn.w	r3, #12
 800eccc:	db04      	blt.n	800ecd8 <lwip_netconn_do_writemore+0x230>
 800ecce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ecd2:	f113 0f04 	cmn.w	r3, #4
 800ecd6:	d151      	bne.n	800ed7c <lwip_netconn_do_writemore+0x2d4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ecd8:	7d3b      	ldrb	r3, [r7, #20]
 800ecda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ecde:	2301      	movs	r3, #1
 800ece0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece8:	2200      	movs	r2, #0
 800ecea:	60da      	str	r2, [r3, #12]
 800ecec:	e046      	b.n	800ed7c <lwip_netconn_do_writemore+0x2d4>
      }
    } else if (err == ERR_MEM) {
 800ecee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf6:	d13a      	bne.n	800ed6e <lwip_netconn_do_writemore+0x2c6>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f006 fe55 	bl	80159ac <tcp_output>
 800ed02:	4603      	mov	r3, r0
 800ed04:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ed06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ed0a:	f113 0f0c 	cmn.w	r3, #12
 800ed0e:	db04      	blt.n	800ed1a <lwip_netconn_do_writemore+0x272>
 800ed10:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ed14:	f113 0f04 	cmn.w	r3, #4
 800ed18:	d11a      	bne.n	800ed50 <lwip_netconn_do_writemore+0x2a8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ed1a:	7d7b      	ldrb	r3, [r7, #21]
 800ed1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ed20:	2301      	movs	r3, #1
 800ed22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	60da      	str	r2, [r3, #12]
 800ed2e:	e025      	b.n	800ed7c <lwip_netconn_do_writemore+0x2d4>
 800ed30:	0801c3e8 	.word	0x0801c3e8
 800ed34:	0801c530 	.word	0x0801c530
 800ed38:	0801c464 	.word	0x0801c464
 800ed3c:	0801c810 	.word	0x0801c810
 800ed40:	0801c540 	.word	0x0801c540
 800ed44:	0801c830 	.word	0x0801c830
 800ed48:	0801c848 	.word	0x0801c848
 800ed4c:	0801c87c 	.word	0x0801c87c
      } else if (dontblock) {
 800ed50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d011      	beq.n	800ed7c <lwip_netconn_do_writemore+0x2d4>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800ed58:	23f9      	movs	r3, #249	; 0xf9
 800ed5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	2200      	movs	r2, #0
 800ed6a:	60da      	str	r2, [r3, #12]
 800ed6c:	e006      	b.n	800ed7c <lwip_netconn_do_writemore+0x2d4>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	2200      	movs	r2, #0
 800ed7a:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800ed7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d02c      	beq.n	800edde <lwip_netconn_do_writemore+0x336>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	330c      	adds	r3, #12
 800ed8c:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed96:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00f      	beq.n	800edd0 <lwip_netconn_do_writemore+0x328>
 800edb0:	f00b fdc0 	bl	801a934 <sys_arch_protect>
 800edb4:	60f8      	str	r0, [r7, #12]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800edbc:	f113 0f0c 	cmn.w	r3, #12
 800edc0:	db03      	blt.n	800edca <lwip_netconn_do_writemore+0x322>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800edc8:	721a      	strb	r2, [r3, #8]
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f00b fdc0 	bl	801a950 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800edd0:	78fb      	ldrb	r3, [r7, #3]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d006      	beq.n	800ede4 <lwip_netconn_do_writemore+0x33c>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800edd6:	6938      	ldr	r0, [r7, #16]
 800edd8:	f00b fd08 	bl	801a7ec <sys_sem_signal>
 800eddc:	e002      	b.n	800ede4 <lwip_netconn_do_writemore+0x33c>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800edde:	f04f 33ff 	mov.w	r3, #4294967295
 800ede2:	e000      	b.n	800ede6 <lwip_netconn_do_writemore+0x33e>
  }
#endif
  return ERR_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3728      	adds	r7, #40	; 0x28
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop

0800edf0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ee04:	f113 0f0c 	cmn.w	r3, #12
 800ee08:	da06      	bge.n	800ee18 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	711a      	strb	r2, [r3, #4]
 800ee16:	e072      	b.n	800eefe <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee22:	2b10      	cmp	r3, #16
 800ee24:	d168      	bne.n	800eef8 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	785b      	ldrb	r3, [r3, #1]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d003      	beq.n	800ee38 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	22fb      	movs	r2, #251	; 0xfb
 800ee34:	711a      	strb	r2, [r3, #4]
 800ee36:	e062      	b.n	800eefe <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d056      	beq.n	800eef0 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2201      	movs	r2, #1
 800ee48:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d104      	bne.n	800ee5e <lwip_netconn_do_write+0x6e>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d006      	beq.n	800ee6c <lwip_netconn_do_write+0x7c>
 800ee5e:	4b36      	ldr	r3, [pc, #216]	; (800ef38 <lwip_netconn_do_write+0x148>)
 800ee60:	f240 6282 	movw	r2, #1666	; 0x682
 800ee64:	4935      	ldr	r1, [pc, #212]	; (800ef3c <lwip_netconn_do_write+0x14c>)
 800ee66:	4836      	ldr	r0, [pc, #216]	; (800ef40 <lwip_netconn_do_write+0x150>)
 800ee68:	f00b fdcc 	bl	801aa04 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d106      	bne.n	800ee82 <lwip_netconn_do_write+0x92>
 800ee74:	4b30      	ldr	r3, [pc, #192]	; (800ef38 <lwip_netconn_do_write+0x148>)
 800ee76:	f240 6284 	movw	r2, #1668	; 0x684
 800ee7a:	4932      	ldr	r1, [pc, #200]	; (800ef44 <lwip_netconn_do_write+0x154>)
 800ee7c:	4830      	ldr	r0, [pc, #192]	; (800ef40 <lwip_netconn_do_write+0x150>)
 800ee7e:	f00b fdc1 	bl	801aa04 <iprintf>
        msg->conn->current_msg = msg;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff fe05 	bl	800eaa8 <lwip_netconn_do_writemore>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d044      	beq.n	800ef2e <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	785b      	ldrb	r3, [r3, #1]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d006      	beq.n	800eebc <lwip_netconn_do_write+0xcc>
 800eeae:	4b22      	ldr	r3, [pc, #136]	; (800ef38 <lwip_netconn_do_write+0x148>)
 800eeb0:	f240 6289 	movw	r2, #1673	; 0x689
 800eeb4:	4924      	ldr	r1, [pc, #144]	; (800ef48 <lwip_netconn_do_write+0x158>)
 800eeb6:	4822      	ldr	r0, [pc, #136]	; (800ef40 <lwip_netconn_do_write+0x150>)
 800eeb8:	f00b fda4 	bl	801aa04 <iprintf>
          UNLOCK_TCPIP_CORE();
 800eebc:	4823      	ldr	r0, [pc, #140]	; (800ef4c <lwip_netconn_do_write+0x15c>)
 800eebe:	f00b fd06 	bl	801a8ce <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	330c      	adds	r3, #12
 800eec8:	2100      	movs	r1, #0
 800eeca:	4618      	mov	r0, r3
 800eecc:	f00b fc5d 	bl	801a78a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800eed0:	481e      	ldr	r0, [pc, #120]	; (800ef4c <lwip_netconn_do_write+0x15c>)
 800eed2:	f00b fced 	bl	801a8b0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	785b      	ldrb	r3, [r3, #1]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d126      	bne.n	800ef2e <lwip_netconn_do_write+0x13e>
 800eee0:	4b15      	ldr	r3, [pc, #84]	; (800ef38 <lwip_netconn_do_write+0x148>)
 800eee2:	f240 628d 	movw	r2, #1677	; 0x68d
 800eee6:	4918      	ldr	r1, [pc, #96]	; (800ef48 <lwip_netconn_do_write+0x158>)
 800eee8:	4815      	ldr	r0, [pc, #84]	; (800ef40 <lwip_netconn_do_write+0x150>)
 800eeea:	f00b fd8b 	bl	801aa04 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800eeee:	e01e      	b.n	800ef2e <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	22f5      	movs	r2, #245	; 0xf5
 800eef4:	711a      	strb	r2, [r3, #4]
 800eef6:	e002      	b.n	800eefe <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	22fa      	movs	r2, #250	; 0xfa
 800eefc:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d014      	beq.n	800ef30 <lwip_netconn_do_write+0x140>
 800ef06:	f00b fd15 	bl	801a934 <sys_arch_protect>
 800ef0a:	60b8      	str	r0, [r7, #8]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ef14:	f113 0f0c 	cmn.w	r3, #12
 800ef18:	db05      	blt.n	800ef26 <lwip_netconn_do_write+0x136>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ef24:	721a      	strb	r2, [r3, #8]
 800ef26:	68b8      	ldr	r0, [r7, #8]
 800ef28:	f00b fd12 	bl	801a950 <sys_arch_unprotect>
 800ef2c:	e000      	b.n	800ef30 <lwip_netconn_do_write+0x140>
        return;
 800ef2e:	bf00      	nop
}
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	0801c3e8 	.word	0x0801c3e8
 800ef3c:	0801c754 	.word	0x0801c754
 800ef40:	0801c464 	.word	0x0801c464
 800ef44:	0801c8a8 	.word	0x0801c8a8
 800ef48:	0801c770 	.word	0x0801c770
 800ef4c:	240045a4 	.word	0x240045a4

0800ef50 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	785b      	ldrb	r3, [r3, #1]
 800ef62:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d06e      	beq.n	800f04c <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef78:	2b10      	cmp	r3, #16
 800ef7a:	d167      	bne.n	800f04c <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef80:	2b03      	cmp	r3, #3
 800ef82:	d002      	beq.n	800ef8a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef84:	7cfb      	ldrb	r3, [r7, #19]
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d060      	beq.n	800f04c <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ef8a:	7cfb      	ldrb	r3, [r7, #19]
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d103      	bne.n	800ef98 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	22f5      	movs	r2, #245	; 0xf5
 800ef94:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef96:	e05c      	b.n	800f052 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800ef98:	7cfb      	ldrb	r3, [r7, #19]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d103      	bne.n	800efa6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	22fb      	movs	r2, #251	; 0xfb
 800efa2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800efa4:	e055      	b.n	800f052 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	7a1b      	ldrb	r3, [r3, #8]
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d004      	beq.n	800efbc <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff f908 	bl	800e1cc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d104      	bne.n	800efd0 <lwip_netconn_do_close+0x80>
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6a1b      	ldr	r3, [r3, #32]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d006      	beq.n	800efde <lwip_netconn_do_close+0x8e>
 800efd0:	4b2e      	ldr	r3, [pc, #184]	; (800f08c <lwip_netconn_do_close+0x13c>)
 800efd2:	f240 721b 	movw	r2, #1819	; 0x71b
 800efd6:	492e      	ldr	r1, [pc, #184]	; (800f090 <lwip_netconn_do_close+0x140>)
 800efd8:	482e      	ldr	r0, [pc, #184]	; (800f094 <lwip_netconn_do_close+0x144>)
 800efda:	f00b fd13 	bl	801aa04 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2204      	movs	r2, #4
 800efe4:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	697a      	ldr	r2, [r7, #20]
 800efec:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff f969 	bl	800e2cc <lwip_netconn_do_close_internal>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d040      	beq.n	800f082 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	785b      	ldrb	r3, [r3, #1]
 800f006:	2b04      	cmp	r3, #4
 800f008:	d006      	beq.n	800f018 <lwip_netconn_do_close+0xc8>
 800f00a:	4b20      	ldr	r3, [pc, #128]	; (800f08c <lwip_netconn_do_close+0x13c>)
 800f00c:	f240 7221 	movw	r2, #1825	; 0x721
 800f010:	4921      	ldr	r1, [pc, #132]	; (800f098 <lwip_netconn_do_close+0x148>)
 800f012:	4820      	ldr	r0, [pc, #128]	; (800f094 <lwip_netconn_do_close+0x144>)
 800f014:	f00b fcf6 	bl	801aa04 <iprintf>
        UNLOCK_TCPIP_CORE();
 800f018:	4820      	ldr	r0, [pc, #128]	; (800f09c <lwip_netconn_do_close+0x14c>)
 800f01a:	f00b fc58 	bl	801a8ce <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	330c      	adds	r3, #12
 800f024:	2100      	movs	r1, #0
 800f026:	4618      	mov	r0, r3
 800f028:	f00b fbaf 	bl	801a78a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800f02c:	481b      	ldr	r0, [pc, #108]	; (800f09c <lwip_netconn_do_close+0x14c>)
 800f02e:	f00b fc3f 	bl	801a8b0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	785b      	ldrb	r3, [r3, #1]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d022      	beq.n	800f082 <lwip_netconn_do_close+0x132>
 800f03c:	4b13      	ldr	r3, [pc, #76]	; (800f08c <lwip_netconn_do_close+0x13c>)
 800f03e:	f240 7225 	movw	r2, #1829	; 0x725
 800f042:	4915      	ldr	r1, [pc, #84]	; (800f098 <lwip_netconn_do_close+0x148>)
 800f044:	4813      	ldr	r0, [pc, #76]	; (800f094 <lwip_netconn_do_close+0x144>)
 800f046:	f00b fcdd 	bl	801aa04 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800f04a:	e01a      	b.n	800f082 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	22f5      	movs	r2, #245	; 0xf5
 800f050:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d014      	beq.n	800f084 <lwip_netconn_do_close+0x134>
 800f05a:	f00b fc6b 	bl	801a934 <sys_arch_protect>
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f068:	f113 0f0c 	cmn.w	r3, #12
 800f06c:	db05      	blt.n	800f07a <lwip_netconn_do_close+0x12a>
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f078:	721a      	strb	r2, [r3, #8]
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f00b fc68 	bl	801a950 <sys_arch_unprotect>
 800f080:	e000      	b.n	800f084 <lwip_netconn_do_close+0x134>
      return;
 800f082:	bf00      	nop
}
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	0801c3e8 	.word	0x0801c3e8
 800f090:	0801c754 	.word	0x0801c754
 800f094:	0801c464 	.word	0x0801c464
 800f098:	0801c770 	.word	0x0801c770
 800f09c:	240045a4 	.word	0x240045a4

0800f0a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d013      	beq.n	800f0d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f001 fcac 	bl	8010a18 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	605a      	str	r2, [r3, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f0ce:	6879      	ldr	r1, [r7, #4]
 800f0d0:	2006      	movs	r0, #6
 800f0d2:	f000 feab 	bl	800fe2c <memp_free>
  }
}
 800f0d6:	bf00      	nop
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
	...

0800f0e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d108      	bne.n	800f104 <netbuf_data+0x24>
 800f0f2:	4b1b      	ldr	r3, [pc, #108]	; (800f160 <netbuf_data+0x80>)
 800f0f4:	22c2      	movs	r2, #194	; 0xc2
 800f0f6:	491b      	ldr	r1, [pc, #108]	; (800f164 <netbuf_data+0x84>)
 800f0f8:	481b      	ldr	r0, [pc, #108]	; (800f168 <netbuf_data+0x88>)
 800f0fa:	f00b fc83 	bl	801aa04 <iprintf>
 800f0fe:	f06f 030f 	mvn.w	r3, #15
 800f102:	e029      	b.n	800f158 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d108      	bne.n	800f11c <netbuf_data+0x3c>
 800f10a:	4b15      	ldr	r3, [pc, #84]	; (800f160 <netbuf_data+0x80>)
 800f10c:	22c3      	movs	r2, #195	; 0xc3
 800f10e:	4917      	ldr	r1, [pc, #92]	; (800f16c <netbuf_data+0x8c>)
 800f110:	4815      	ldr	r0, [pc, #84]	; (800f168 <netbuf_data+0x88>)
 800f112:	f00b fc77 	bl	801aa04 <iprintf>
 800f116:	f06f 030f 	mvn.w	r3, #15
 800f11a:	e01d      	b.n	800f158 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d108      	bne.n	800f134 <netbuf_data+0x54>
 800f122:	4b0f      	ldr	r3, [pc, #60]	; (800f160 <netbuf_data+0x80>)
 800f124:	22c4      	movs	r2, #196	; 0xc4
 800f126:	4912      	ldr	r1, [pc, #72]	; (800f170 <netbuf_data+0x90>)
 800f128:	480f      	ldr	r0, [pc, #60]	; (800f168 <netbuf_data+0x88>)
 800f12a:	f00b fc6b 	bl	801aa04 <iprintf>
 800f12e:	f06f 030f 	mvn.w	r3, #15
 800f132:	e011      	b.n	800f158 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d102      	bne.n	800f142 <netbuf_data+0x62>
    return ERR_BUF;
 800f13c:	f06f 0301 	mvn.w	r3, #1
 800f140:	e00a      	b.n	800f158 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	685a      	ldr	r2, [r3, #4]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	895a      	ldrh	r2, [r3, #10]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	0801c8d4 	.word	0x0801c8d4
 800f164:	0801ca00 	.word	0x0801ca00
 800f168:	0801c948 	.word	0x0801c948
 800f16c:	0801ca1c 	.word	0x0801ca1c
 800f170:	0801ca3c 	.word	0x0801ca3c

0800f174 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	60fb      	str	r3, [r7, #12]

  netif_set_addr( msg->netif,
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6858      	ldr	r0, [r3, #4]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6899      	ldr	r1, [r3, #8]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	68da      	ldr	r2, [r3, #12]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	f000 fee0 	bl	800ff54 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08e      	sub	sp, #56	; 0x38
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d101      	bne.n	800f1b8 <netifapi_netif_set_addr+0x18>
    ipaddr = IP4_ADDR_ANY4;
 800f1b4:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <netifapi_netif_set_addr+0x5c>)
 800f1b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <netifapi_netif_set_addr+0x22>
    netmask = IP4_ADDR_ANY4;
 800f1be:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <netifapi_netif_set_addr+0x5c>)
 800f1c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <netifapi_netif_set_addr+0x2c>
    gw = IP4_ADDR_ANY4;
 800f1c8:	4b0c      	ldr	r3, [pc, #48]	; (800f1fc <netifapi_netif_set_addr+0x5c>)
 800f1ca:	603b      	str	r3, [r7, #0]
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	623b      	str	r3, [r7, #32]
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 800f1dc:	f107 0314 	add.w	r3, r7, #20
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4807      	ldr	r0, [pc, #28]	; (800f200 <netifapi_netif_set_addr+0x60>)
 800f1e4:	f000 f93e 	bl	800f464 <tcpip_api_call>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800f1ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3738      	adds	r7, #56	; 0x38
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	0801f218 	.word	0x0801f218
 800f200:	0800f175 	.word	0x0800f175

0800f204 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800f20c:	4b2b      	ldr	r3, [pc, #172]	; (800f2bc <tcpip_thread+0xb8>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d005      	beq.n	800f220 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800f214:	4b29      	ldr	r3, [pc, #164]	; (800f2bc <tcpip_thread+0xb8>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a29      	ldr	r2, [pc, #164]	; (800f2c0 <tcpip_thread+0xbc>)
 800f21a:	6812      	ldr	r2, [r2, #0]
 800f21c:	4610      	mov	r0, r2
 800f21e:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800f220:	4828      	ldr	r0, [pc, #160]	; (800f2c4 <tcpip_thread+0xc0>)
 800f222:	f00b fb45 	bl	801a8b0 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800f226:	4827      	ldr	r0, [pc, #156]	; (800f2c4 <tcpip_thread+0xc0>)
 800f228:	f00b fb51 	bl	801a8ce <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800f22c:	f107 030c 	add.w	r3, r7, #12
 800f230:	4619      	mov	r1, r3
 800f232:	4825      	ldr	r0, [pc, #148]	; (800f2c8 <tcpip_thread+0xc4>)
 800f234:	f007 fa00 	bl	8016638 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f238:	4822      	ldr	r0, [pc, #136]	; (800f2c4 <tcpip_thread+0xc0>)
 800f23a:	f00b fb39 	bl	801a8b0 <sys_mutex_lock>
    if (msg == NULL) {
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f244:	4b21      	ldr	r3, [pc, #132]	; (800f2cc <tcpip_thread+0xc8>)
 800f246:	2269      	movs	r2, #105	; 0x69
 800f248:	4921      	ldr	r1, [pc, #132]	; (800f2d0 <tcpip_thread+0xcc>)
 800f24a:	4822      	ldr	r0, [pc, #136]	; (800f2d4 <tcpip_thread+0xd0>)
 800f24c:	f00b fbda 	bl	801aa04 <iprintf>
      continue;
 800f250:	e032      	b.n	800f2b8 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b04      	cmp	r3, #4
 800f258:	d020      	beq.n	800f29c <tcpip_thread+0x98>
 800f25a:	2b04      	cmp	r3, #4
 800f25c:	dc25      	bgt.n	800f2aa <tcpip_thread+0xa6>
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d002      	beq.n	800f268 <tcpip_thread+0x64>
 800f262:	2b03      	cmp	r3, #3
 800f264:	d00e      	beq.n	800f284 <tcpip_thread+0x80>
 800f266:	e020      	b.n	800f2aa <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	6850      	ldr	r0, [r2, #4]
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	6892      	ldr	r2, [r2, #8]
 800f274:	4611      	mov	r1, r2
 800f276:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	4619      	mov	r1, r3
 800f27c:	2009      	movs	r0, #9
 800f27e:	f000 fdd5 	bl	800fe2c <memp_free>
      break;
 800f282:	e019      	b.n	800f2b8 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	6892      	ldr	r2, [r2, #8]
 800f28c:	4610      	mov	r0, r2
 800f28e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4619      	mov	r1, r3
 800f294:	2008      	movs	r0, #8
 800f296:	f000 fdc9 	bl	800fe2c <memp_free>
      break;
 800f29a:	e00d      	b.n	800f2b8 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	6892      	ldr	r2, [r2, #8]
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	4798      	blx	r3
      break;
 800f2a8:	e006      	b.n	800f2b8 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f2aa:	4b08      	ldr	r3, [pc, #32]	; (800f2cc <tcpip_thread+0xc8>)
 800f2ac:	229b      	movs	r2, #155	; 0x9b
 800f2ae:	4908      	ldr	r1, [pc, #32]	; (800f2d0 <tcpip_thread+0xcc>)
 800f2b0:	4808      	ldr	r0, [pc, #32]	; (800f2d4 <tcpip_thread+0xd0>)
 800f2b2:	f00b fba7 	bl	801aa04 <iprintf>
      break;
 800f2b6:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800f2b8:	e7b5      	b.n	800f226 <tcpip_thread+0x22>
 800f2ba:	bf00      	nop
 800f2bc:	24004598 	.word	0x24004598
 800f2c0:	2400459c 	.word	0x2400459c
 800f2c4:	240045a4 	.word	0x240045a4
 800f2c8:	240045a0 	.word	0x240045a0
 800f2cc:	0801ca90 	.word	0x0801ca90
 800f2d0:	0801cae8 	.word	0x0801cae8
 800f2d4:	0801cb08 	.word	0x0801cb08

0800f2d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b086      	sub	sp, #24
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f2e4:	481a      	ldr	r0, [pc, #104]	; (800f350 <tcpip_inpkt+0x78>)
 800f2e6:	f00b fa0a 	bl	801a6fe <sys_mbox_valid>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d105      	bne.n	800f2fc <tcpip_inpkt+0x24>
 800f2f0:	4b18      	ldr	r3, [pc, #96]	; (800f354 <tcpip_inpkt+0x7c>)
 800f2f2:	22b5      	movs	r2, #181	; 0xb5
 800f2f4:	4918      	ldr	r1, [pc, #96]	; (800f358 <tcpip_inpkt+0x80>)
 800f2f6:	4819      	ldr	r0, [pc, #100]	; (800f35c <tcpip_inpkt+0x84>)
 800f2f8:	f00b fb84 	bl	801aa04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f2fc:	2009      	movs	r0, #9
 800f2fe:	f000 fd1f 	bl	800fd40 <memp_malloc>
 800f302:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d102      	bne.n	800f310 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f30a:	f04f 33ff 	mov.w	r3, #4294967295
 800f30e:	e01a      	b.n	800f346 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	2202      	movs	r2, #2
 800f314:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f328:	6979      	ldr	r1, [r7, #20]
 800f32a:	4809      	ldr	r0, [pc, #36]	; (800f350 <tcpip_inpkt+0x78>)
 800f32c:	f00b f972 	bl	801a614 <sys_mbox_trypost>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d006      	beq.n	800f344 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f336:	6979      	ldr	r1, [r7, #20]
 800f338:	2009      	movs	r0, #9
 800f33a:	f000 fd77 	bl	800fe2c <memp_free>
    return ERR_MEM;
 800f33e:	f04f 33ff 	mov.w	r3, #4294967295
 800f342:	e000      	b.n	800f346 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f344:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f346:	4618      	mov	r0, r3
 800f348:	3718      	adds	r7, #24
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	240045a0 	.word	0x240045a0
 800f354:	0801ca90 	.word	0x0801ca90
 800f358:	0801cb30 	.word	0x0801cb30
 800f35c:	0801cb08 	.word	0x0801cb08

0800f360 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f370:	f003 0318 	and.w	r3, r3, #24
 800f374:	2b00      	cmp	r3, #0
 800f376:	d006      	beq.n	800f386 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f378:	4a08      	ldr	r2, [pc, #32]	; (800f39c <tcpip_input+0x3c>)
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ffab 	bl	800f2d8 <tcpip_inpkt>
 800f382:	4603      	mov	r3, r0
 800f384:	e005      	b.n	800f392 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800f386:	4a06      	ldr	r2, [pc, #24]	; (800f3a0 <tcpip_input+0x40>)
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff ffa4 	bl	800f2d8 <tcpip_inpkt>
 800f390:	4603      	mov	r3, r0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	0801a3c5 	.word	0x0801a3c5
 800f3a0:	08019241 	.word	0x08019241

0800f3a4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f3b2:	481d      	ldr	r0, [pc, #116]	; (800f428 <tcpip_callback_with_block+0x84>)
 800f3b4:	f00b f9a3 	bl	801a6fe <sys_mbox_valid>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d105      	bne.n	800f3ca <tcpip_callback_with_block+0x26>
 800f3be:	4b1b      	ldr	r3, [pc, #108]	; (800f42c <tcpip_callback_with_block+0x88>)
 800f3c0:	22ee      	movs	r2, #238	; 0xee
 800f3c2:	491b      	ldr	r1, [pc, #108]	; (800f430 <tcpip_callback_with_block+0x8c>)
 800f3c4:	481b      	ldr	r0, [pc, #108]	; (800f434 <tcpip_callback_with_block+0x90>)
 800f3c6:	f00b fb1d 	bl	801aa04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f3ca:	2008      	movs	r0, #8
 800f3cc:	f000 fcb8 	bl	800fd40 <memp_malloc>
 800f3d0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3dc:	e01f      	b.n	800f41e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2203      	movs	r2, #3
 800f3e2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	609a      	str	r2, [r3, #8]
  if (block) {
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800f3f6:	6979      	ldr	r1, [r7, #20]
 800f3f8:	480b      	ldr	r0, [pc, #44]	; (800f428 <tcpip_callback_with_block+0x84>)
 800f3fa:	f00b f8f5 	bl	801a5e8 <sys_mbox_post>
 800f3fe:	e00d      	b.n	800f41c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f400:	6979      	ldr	r1, [r7, #20]
 800f402:	4809      	ldr	r0, [pc, #36]	; (800f428 <tcpip_callback_with_block+0x84>)
 800f404:	f00b f906 	bl	801a614 <sys_mbox_trypost>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d006      	beq.n	800f41c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f40e:	6979      	ldr	r1, [r7, #20]
 800f410:	2008      	movs	r0, #8
 800f412:	f000 fd0b 	bl	800fe2c <memp_free>
      return ERR_MEM;
 800f416:	f04f 33ff 	mov.w	r3, #4294967295
 800f41a:	e000      	b.n	800f41e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3718      	adds	r7, #24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	240045a0 	.word	0x240045a0
 800f42c:	0801ca90 	.word	0x0801ca90
 800f430:	0801cb30 	.word	0x0801cb30
 800f434:	0801cb08 	.word	0x0801cb08

0800f438 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f444:	4806      	ldr	r0, [pc, #24]	; (800f460 <tcpip_send_msg_wait_sem+0x28>)
 800f446:	f00b fa33 	bl	801a8b0 <sys_mutex_lock>
  fn(apimsg);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	68b8      	ldr	r0, [r7, #8]
 800f44e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f450:	4803      	ldr	r0, [pc, #12]	; (800f460 <tcpip_send_msg_wait_sem+0x28>)
 800f452:	f00b fa3c 	bl	801a8ce <sys_mutex_unlock>
  return ERR_OK;
 800f456:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	240045a4 	.word	0x240045a4

0800f464 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800f46e:	4808      	ldr	r0, [pc, #32]	; (800f490 <tcpip_api_call+0x2c>)
 800f470:	f00b fa1e 	bl	801a8b0 <sys_mutex_lock>
  err = fn(call);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6838      	ldr	r0, [r7, #0]
 800f478:	4798      	blx	r3
 800f47a:	4603      	mov	r3, r0
 800f47c:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800f47e:	4804      	ldr	r0, [pc, #16]	; (800f490 <tcpip_api_call+0x2c>)
 800f480:	f00b fa25 	bl	801a8ce <sys_mutex_unlock>
  return err;
 800f484:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	240045a4 	.word	0x240045a4

0800f494 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f49e:	f000 f86a 	bl	800f576 <lwip_init>

  tcpip_init_done = initfunc;
 800f4a2:	4a17      	ldr	r2, [pc, #92]	; (800f500 <tcpip_init+0x6c>)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f4a8:	4a16      	ldr	r2, [pc, #88]	; (800f504 <tcpip_init+0x70>)
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f4ae:	2106      	movs	r1, #6
 800f4b0:	4815      	ldr	r0, [pc, #84]	; (800f508 <tcpip_init+0x74>)
 800f4b2:	f00b f865 	bl	801a580 <sys_mbox_new>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d006      	beq.n	800f4ca <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f4bc:	4b13      	ldr	r3, [pc, #76]	; (800f50c <tcpip_init+0x78>)
 800f4be:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f4c2:	4913      	ldr	r1, [pc, #76]	; (800f510 <tcpip_init+0x7c>)
 800f4c4:	4813      	ldr	r0, [pc, #76]	; (800f514 <tcpip_init+0x80>)
 800f4c6:	f00b fa9d 	bl	801aa04 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f4ca:	4813      	ldr	r0, [pc, #76]	; (800f518 <tcpip_init+0x84>)
 800f4cc:	f00b f9d4 	bl	801a878 <sys_mutex_new>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d006      	beq.n	800f4e4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f4d6:	4b0d      	ldr	r3, [pc, #52]	; (800f50c <tcpip_init+0x78>)
 800f4d8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800f4dc:	490f      	ldr	r1, [pc, #60]	; (800f51c <tcpip_init+0x88>)
 800f4de:	480d      	ldr	r0, [pc, #52]	; (800f514 <tcpip_init+0x80>)
 800f4e0:	f00b fa90 	bl	801aa04 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	490c      	ldr	r1, [pc, #48]	; (800f520 <tcpip_init+0x8c>)
 800f4f0:	480c      	ldr	r0, [pc, #48]	; (800f524 <tcpip_init+0x90>)
 800f4f2:	f00b f9f9 	bl	801a8e8 <sys_thread_new>
}
 800f4f6:	bf00      	nop
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	24004598 	.word	0x24004598
 800f504:	2400459c 	.word	0x2400459c
 800f508:	240045a0 	.word	0x240045a0
 800f50c:	0801ca90 	.word	0x0801ca90
 800f510:	0801cb40 	.word	0x0801cb40
 800f514:	0801cb08 	.word	0x0801cb08
 800f518:	240045a4 	.word	0x240045a4
 800f51c:	0801cb64 	.word	0x0801cb64
 800f520:	0800f205 	.word	0x0800f205
 800f524:	0801cb88 	.word	0x0801cb88

0800f528 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	4603      	mov	r3, r0
 800f530:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800f532:	88fb      	ldrh	r3, [r7, #6]
 800f534:	ba5b      	rev16	r3, r3
 800f536:	b29b      	uxth	r3, r3
}
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	061a      	lsls	r2, r3, #24
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	021b      	lsls	r3, r3, #8
 800f554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f558:	431a      	orrs	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	0a1b      	lsrs	r3, r3, #8
 800f55e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f562:	431a      	orrs	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	0e1b      	lsrs	r3, r3, #24
 800f568:	4313      	orrs	r3, r2
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f580:	f00b f96c 	bl	801a85c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f584:	f000 f8a6 	bl	800f6d4 <mem_init>
  memp_init();
 800f588:	f000 fb6c 	bl	800fc64 <memp_init>
  pbuf_init();
  netif_init();
 800f58c:	f000 fc78 	bl	800fe80 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f590:	f007 f878 	bl	8016684 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f594:	f001 fcc6 	bl	8010f24 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f598:	f006 ff0a 	bl	80163b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f5ac:	4b40      	ldr	r3, [pc, #256]	; (800f6b0 <plug_holes+0x10c>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d206      	bcs.n	800f5c4 <plug_holes+0x20>
 800f5b6:	4b3f      	ldr	r3, [pc, #252]	; (800f6b4 <plug_holes+0x110>)
 800f5b8:	f240 125d 	movw	r2, #349	; 0x15d
 800f5bc:	493e      	ldr	r1, [pc, #248]	; (800f6b8 <plug_holes+0x114>)
 800f5be:	483f      	ldr	r0, [pc, #252]	; (800f6bc <plug_holes+0x118>)
 800f5c0:	f00b fa20 	bl	801aa04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f5c4:	4b3e      	ldr	r3, [pc, #248]	; (800f6c0 <plug_holes+0x11c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	687a      	ldr	r2, [r7, #4]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d306      	bcc.n	800f5dc <plug_holes+0x38>
 800f5ce:	4b39      	ldr	r3, [pc, #228]	; (800f6b4 <plug_holes+0x110>)
 800f5d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f5d4:	493b      	ldr	r1, [pc, #236]	; (800f6c4 <plug_holes+0x120>)
 800f5d6:	4839      	ldr	r0, [pc, #228]	; (800f6bc <plug_holes+0x118>)
 800f5d8:	f00b fa14 	bl	801aa04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	791b      	ldrb	r3, [r3, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d006      	beq.n	800f5f2 <plug_holes+0x4e>
 800f5e4:	4b33      	ldr	r3, [pc, #204]	; (800f6b4 <plug_holes+0x110>)
 800f5e6:	f240 125f 	movw	r2, #351	; 0x15f
 800f5ea:	4937      	ldr	r1, [pc, #220]	; (800f6c8 <plug_holes+0x124>)
 800f5ec:	4833      	ldr	r0, [pc, #204]	; (800f6bc <plug_holes+0x118>)
 800f5ee:	f00b fa09 	bl	801aa04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5fa:	d906      	bls.n	800f60a <plug_holes+0x66>
 800f5fc:	4b2d      	ldr	r3, [pc, #180]	; (800f6b4 <plug_holes+0x110>)
 800f5fe:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f602:	4932      	ldr	r1, [pc, #200]	; (800f6cc <plug_holes+0x128>)
 800f604:	482d      	ldr	r0, [pc, #180]	; (800f6bc <plug_holes+0x118>)
 800f606:	f00b f9fd 	bl	801aa04 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f60a:	4b29      	ldr	r3, [pc, #164]	; (800f6b0 <plug_holes+0x10c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	8812      	ldrh	r2, [r2, #0]
 800f612:	4413      	add	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d01f      	beq.n	800f65e <plug_holes+0xba>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	791b      	ldrb	r3, [r3, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d11b      	bne.n	800f65e <plug_holes+0xba>
 800f626:	4b26      	ldr	r3, [pc, #152]	; (800f6c0 <plug_holes+0x11c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d016      	beq.n	800f65e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f630:	4b27      	ldr	r3, [pc, #156]	; (800f6d0 <plug_holes+0x12c>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	429a      	cmp	r2, r3
 800f638:	d102      	bne.n	800f640 <plug_holes+0x9c>
      lfree = mem;
 800f63a:	4a25      	ldr	r2, [pc, #148]	; (800f6d0 <plug_holes+0x12c>)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	881a      	ldrh	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f648:	4b19      	ldr	r3, [pc, #100]	; (800f6b0 <plug_holes+0x10c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	1ad1      	subs	r1, r2, r3
 800f650:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <plug_holes+0x10c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	8812      	ldrh	r2, [r2, #0]
 800f658:	4413      	add	r3, r2
 800f65a:	b28a      	uxth	r2, r1
 800f65c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f65e:	4b14      	ldr	r3, [pc, #80]	; (800f6b0 <plug_holes+0x10c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	8852      	ldrh	r2, [r2, #2]
 800f666:	4413      	add	r3, r2
 800f668:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d01a      	beq.n	800f6a8 <plug_holes+0x104>
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	791b      	ldrb	r3, [r3, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d116      	bne.n	800f6a8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f67a:	4b15      	ldr	r3, [pc, #84]	; (800f6d0 <plug_holes+0x12c>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	429a      	cmp	r2, r3
 800f682:	d102      	bne.n	800f68a <plug_holes+0xe6>
      lfree = pmem;
 800f684:	4a12      	ldr	r2, [pc, #72]	; (800f6d0 <plug_holes+0x12c>)
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	881a      	ldrh	r2, [r3, #0]
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f692:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <plug_holes+0x10c>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68ba      	ldr	r2, [r7, #8]
 800f698:	1ad1      	subs	r1, r2, r3
 800f69a:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <plug_holes+0x10c>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	8812      	ldrh	r2, [r2, #0]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	b28a      	uxth	r2, r1
 800f6a6:	805a      	strh	r2, [r3, #2]
  }
}
 800f6a8:	bf00      	nop
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	240045c0 	.word	0x240045c0
 800f6b4:	0801cb98 	.word	0x0801cb98
 800f6b8:	0801cbf0 	.word	0x0801cbf0
 800f6bc:	0801cc08 	.word	0x0801cc08
 800f6c0:	240045c4 	.word	0x240045c4
 800f6c4:	0801cc30 	.word	0x0801cc30
 800f6c8:	0801cc4c 	.word	0x0801cc4c
 800f6cc:	0801cc68 	.word	0x0801cc68
 800f6d0:	240045c8 	.word	0x240045c8

0800f6d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f6da:	4b1c      	ldr	r3, [pc, #112]	; (800f74c <mem_init+0x78>)
 800f6dc:	4a1c      	ldr	r2, [pc, #112]	; (800f750 <mem_init+0x7c>)
 800f6de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f6e0:	4b1a      	ldr	r3, [pc, #104]	; (800f74c <mem_init+0x78>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f6ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f6fa:	4b14      	ldr	r3, [pc, #80]	; (800f74c <mem_init+0x78>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f702:	4a14      	ldr	r2, [pc, #80]	; (800f754 <mem_init+0x80>)
 800f704:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f706:	4b13      	ldr	r3, [pc, #76]	; (800f754 <mem_init+0x80>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2201      	movs	r2, #1
 800f70c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f70e:	4b11      	ldr	r3, [pc, #68]	; (800f754 <mem_init+0x80>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f716:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f718:	4b0e      	ldr	r3, [pc, #56]	; (800f754 <mem_init+0x80>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f720:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f722:	4b0a      	ldr	r3, [pc, #40]	; (800f74c <mem_init+0x78>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a0c      	ldr	r2, [pc, #48]	; (800f758 <mem_init+0x84>)
 800f728:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f72a:	480c      	ldr	r0, [pc, #48]	; (800f75c <mem_init+0x88>)
 800f72c:	f00b f8a4 	bl	801a878 <sys_mutex_new>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d006      	beq.n	800f744 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f736:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <mem_init+0x8c>)
 800f738:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f73c:	4909      	ldr	r1, [pc, #36]	; (800f764 <mem_init+0x90>)
 800f73e:	480a      	ldr	r0, [pc, #40]	; (800f768 <mem_init+0x94>)
 800f740:	f00b f960 	bl	801aa04 <iprintf>
  }
}
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	240045c0 	.word	0x240045c0
 800f750:	30044000 	.word	0x30044000
 800f754:	240045c4 	.word	0x240045c4
 800f758:	240045c8 	.word	0x240045c8
 800f75c:	240045cc 	.word	0x240045cc
 800f760:	0801cb98 	.word	0x0801cb98
 800f764:	0801cc94 	.word	0x0801cc94
 800f768:	0801cc08 	.word	0x0801cc08

0800f76c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d050      	beq.n	800f81c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f003 0303 	and.w	r3, r3, #3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <mem_free+0x26>
 800f784:	4b27      	ldr	r3, [pc, #156]	; (800f824 <mem_free+0xb8>)
 800f786:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f78a:	4927      	ldr	r1, [pc, #156]	; (800f828 <mem_free+0xbc>)
 800f78c:	4827      	ldr	r0, [pc, #156]	; (800f82c <mem_free+0xc0>)
 800f78e:	f00b f939 	bl	801aa04 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f792:	4b27      	ldr	r3, [pc, #156]	; (800f830 <mem_free+0xc4>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d304      	bcc.n	800f7a6 <mem_free+0x3a>
 800f79c:	4b25      	ldr	r3, [pc, #148]	; (800f834 <mem_free+0xc8>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d306      	bcc.n	800f7b4 <mem_free+0x48>
 800f7a6:	4b1f      	ldr	r3, [pc, #124]	; (800f824 <mem_free+0xb8>)
 800f7a8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800f7ac:	4922      	ldr	r1, [pc, #136]	; (800f838 <mem_free+0xcc>)
 800f7ae:	481f      	ldr	r0, [pc, #124]	; (800f82c <mem_free+0xc0>)
 800f7b0:	f00b f928 	bl	801aa04 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f7b4:	4b1e      	ldr	r3, [pc, #120]	; (800f830 <mem_free+0xc4>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d304      	bcc.n	800f7c8 <mem_free+0x5c>
 800f7be:	4b1d      	ldr	r3, [pc, #116]	; (800f834 <mem_free+0xc8>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d306      	bcc.n	800f7d6 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f7c8:	f00b f8b4 	bl	801a934 <sys_arch_protect>
 800f7cc:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f7ce:	68b8      	ldr	r0, [r7, #8]
 800f7d0:	f00b f8be 	bl	801a950 <sys_arch_unprotect>
    return;
 800f7d4:	e023      	b.n	800f81e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f7d6:	4819      	ldr	r0, [pc, #100]	; (800f83c <mem_free+0xd0>)
 800f7d8:	f00b f86a 	bl	801a8b0 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3b08      	subs	r3, #8
 800f7e0:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	791b      	ldrb	r3, [r3, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d106      	bne.n	800f7f8 <mem_free+0x8c>
 800f7ea:	4b0e      	ldr	r3, [pc, #56]	; (800f824 <mem_free+0xb8>)
 800f7ec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f7f0:	4913      	ldr	r1, [pc, #76]	; (800f840 <mem_free+0xd4>)
 800f7f2:	480e      	ldr	r0, [pc, #56]	; (800f82c <mem_free+0xc0>)
 800f7f4:	f00b f906 	bl	801aa04 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f7fe:	4b11      	ldr	r3, [pc, #68]	; (800f844 <mem_free+0xd8>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	429a      	cmp	r2, r3
 800f806:	d202      	bcs.n	800f80e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f808:	4a0e      	ldr	r2, [pc, #56]	; (800f844 <mem_free+0xd8>)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7ff fec8 	bl	800f5a4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f814:	4809      	ldr	r0, [pc, #36]	; (800f83c <mem_free+0xd0>)
 800f816:	f00b f85a 	bl	801a8ce <sys_mutex_unlock>
 800f81a:	e000      	b.n	800f81e <mem_free+0xb2>
    return;
 800f81c:	bf00      	nop
}
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	0801cb98 	.word	0x0801cb98
 800f828:	0801ccb0 	.word	0x0801ccb0
 800f82c:	0801cc08 	.word	0x0801cc08
 800f830:	240045c0 	.word	0x240045c0
 800f834:	240045c4 	.word	0x240045c4
 800f838:	0801ccd4 	.word	0x0801ccd4
 800f83c:	240045cc 	.word	0x240045cc
 800f840:	0801ccec 	.word	0x0801ccec
 800f844:	240045c8 	.word	0x240045c8

0800f848 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b088      	sub	sp, #32
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	460b      	mov	r3, r1
 800f852:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f854:	887b      	ldrh	r3, [r7, #2]
 800f856:	3303      	adds	r3, #3
 800f858:	b29b      	uxth	r3, r3
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f860:	887b      	ldrh	r3, [r7, #2]
 800f862:	2b0b      	cmp	r3, #11
 800f864:	d801      	bhi.n	800f86a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f866:	230c      	movs	r3, #12
 800f868:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f86a:	887b      	ldrh	r3, [r7, #2]
 800f86c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f870:	d901      	bls.n	800f876 <mem_trim+0x2e>
    return NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	e0bd      	b.n	800f9f2 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f876:	4b61      	ldr	r3, [pc, #388]	; (800f9fc <mem_trim+0x1b4>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d304      	bcc.n	800f88a <mem_trim+0x42>
 800f880:	4b5f      	ldr	r3, [pc, #380]	; (800fa00 <mem_trim+0x1b8>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	429a      	cmp	r2, r3
 800f888:	d306      	bcc.n	800f898 <mem_trim+0x50>
 800f88a:	4b5e      	ldr	r3, [pc, #376]	; (800fa04 <mem_trim+0x1bc>)
 800f88c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800f890:	495d      	ldr	r1, [pc, #372]	; (800fa08 <mem_trim+0x1c0>)
 800f892:	485e      	ldr	r0, [pc, #376]	; (800fa0c <mem_trim+0x1c4>)
 800f894:	f00b f8b6 	bl	801aa04 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f898:	4b58      	ldr	r3, [pc, #352]	; (800f9fc <mem_trim+0x1b4>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d304      	bcc.n	800f8ac <mem_trim+0x64>
 800f8a2:	4b57      	ldr	r3, [pc, #348]	; (800fa00 <mem_trim+0x1b8>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d307      	bcc.n	800f8bc <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f8ac:	f00b f842 	bl	801a934 <sys_arch_protect>
 800f8b0:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f00b f84c 	bl	801a950 <sys_arch_unprotect>
    return rmem;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	e09a      	b.n	800f9f2 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3b08      	subs	r3, #8
 800f8c0:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800f8c2:	4b4e      	ldr	r3, [pc, #312]	; (800f9fc <mem_trim+0x1b4>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	69fa      	ldr	r2, [r7, #28]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	881a      	ldrh	r2, [r3, #0]
 800f8d0:	8b7b      	ldrh	r3, [r7, #26]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	3b08      	subs	r3, #8
 800f8d8:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f8da:	887a      	ldrh	r2, [r7, #2]
 800f8dc:	8b3b      	ldrh	r3, [r7, #24]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d906      	bls.n	800f8f0 <mem_trim+0xa8>
 800f8e2:	4b48      	ldr	r3, [pc, #288]	; (800fa04 <mem_trim+0x1bc>)
 800f8e4:	f240 2206 	movw	r2, #518	; 0x206
 800f8e8:	4949      	ldr	r1, [pc, #292]	; (800fa10 <mem_trim+0x1c8>)
 800f8ea:	4848      	ldr	r0, [pc, #288]	; (800fa0c <mem_trim+0x1c4>)
 800f8ec:	f00b f88a 	bl	801aa04 <iprintf>
  if (newsize > size) {
 800f8f0:	887a      	ldrh	r2, [r7, #2]
 800f8f2:	8b3b      	ldrh	r3, [r7, #24]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d901      	bls.n	800f8fc <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	e07a      	b.n	800f9f2 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800f8fc:	887a      	ldrh	r2, [r7, #2]
 800f8fe:	8b3b      	ldrh	r3, [r7, #24]
 800f900:	429a      	cmp	r2, r3
 800f902:	d101      	bne.n	800f908 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	e074      	b.n	800f9f2 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f908:	4842      	ldr	r0, [pc, #264]	; (800fa14 <mem_trim+0x1cc>)
 800f90a:	f00a ffd1 	bl	801a8b0 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800f90e:	4b3b      	ldr	r3, [pc, #236]	; (800f9fc <mem_trim+0x1b4>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	8812      	ldrh	r2, [r2, #0]
 800f916:	4413      	add	r3, r2
 800f918:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	791b      	ldrb	r3, [r3, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d131      	bne.n	800f986 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	881b      	ldrh	r3, [r3, #0]
 800f926:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f928:	8b7a      	ldrh	r2, [r7, #26]
 800f92a:	887b      	ldrh	r3, [r7, #2]
 800f92c:	4413      	add	r3, r2
 800f92e:	b29b      	uxth	r3, r3
 800f930:	3308      	adds	r3, #8
 800f932:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800f934:	4b38      	ldr	r3, [pc, #224]	; (800fa18 <mem_trim+0x1d0>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d105      	bne.n	800f94a <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800f93e:	4b2f      	ldr	r3, [pc, #188]	; (800f9fc <mem_trim+0x1b4>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	8a7b      	ldrh	r3, [r7, #18]
 800f944:	4413      	add	r3, r2
 800f946:	4a34      	ldr	r2, [pc, #208]	; (800fa18 <mem_trim+0x1d0>)
 800f948:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f94a:	4b2c      	ldr	r3, [pc, #176]	; (800f9fc <mem_trim+0x1b4>)
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	8a7b      	ldrh	r3, [r7, #18]
 800f950:	4413      	add	r3, r2
 800f952:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2200      	movs	r2, #0
 800f958:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	8a3a      	ldrh	r2, [r7, #16]
 800f95e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	8b7a      	ldrh	r2, [r7, #26]
 800f964:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	8a7a      	ldrh	r2, [r7, #18]
 800f96a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f974:	d039      	beq.n	800f9ea <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f976:	4b21      	ldr	r3, [pc, #132]	; (800f9fc <mem_trim+0x1b4>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	8812      	ldrh	r2, [r2, #0]
 800f97e:	4413      	add	r3, r2
 800f980:	8a7a      	ldrh	r2, [r7, #18]
 800f982:	805a      	strh	r2, [r3, #2]
 800f984:	e031      	b.n	800f9ea <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f986:	887b      	ldrh	r3, [r7, #2]
 800f988:	f103 0214 	add.w	r2, r3, #20
 800f98c:	8b3b      	ldrh	r3, [r7, #24]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d82b      	bhi.n	800f9ea <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f992:	8b7a      	ldrh	r2, [r7, #26]
 800f994:	887b      	ldrh	r3, [r7, #2]
 800f996:	4413      	add	r3, r2
 800f998:	b29b      	uxth	r3, r3
 800f99a:	3308      	adds	r3, #8
 800f99c:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f99e:	4b17      	ldr	r3, [pc, #92]	; (800f9fc <mem_trim+0x1b4>)
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	8a7b      	ldrh	r3, [r7, #18]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800f9a8:	4b1b      	ldr	r3, [pc, #108]	; (800fa18 <mem_trim+0x1d0>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d202      	bcs.n	800f9b8 <mem_trim+0x170>
      lfree = mem2;
 800f9b2:	4a19      	ldr	r2, [pc, #100]	; (800fa18 <mem_trim+0x1d0>)
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	881a      	ldrh	r2, [r3, #0]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	8b7a      	ldrh	r2, [r7, #26]
 800f9ca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	8a7a      	ldrh	r2, [r7, #18]
 800f9d0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f9da:	d006      	beq.n	800f9ea <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f9dc:	4b07      	ldr	r3, [pc, #28]	; (800f9fc <mem_trim+0x1b4>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	8812      	ldrh	r2, [r2, #0]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	8a7a      	ldrh	r2, [r7, #18]
 800f9e8:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f9ea:	480a      	ldr	r0, [pc, #40]	; (800fa14 <mem_trim+0x1cc>)
 800f9ec:	f00a ff6f 	bl	801a8ce <sys_mutex_unlock>
  return rmem;
 800f9f0:	687b      	ldr	r3, [r7, #4]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3720      	adds	r7, #32
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	240045c0 	.word	0x240045c0
 800fa00:	240045c4 	.word	0x240045c4
 800fa04:	0801cb98 	.word	0x0801cb98
 800fa08:	0801cd00 	.word	0x0801cd00
 800fa0c:	0801cc08 	.word	0x0801cc08
 800fa10:	0801cd18 	.word	0x0801cd18
 800fa14:	240045cc 	.word	0x240045cc
 800fa18:	240045c8 	.word	0x240045c8

0800fa1c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b088      	sub	sp, #32
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	4603      	mov	r3, r0
 800fa24:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800fa26:	88fb      	ldrh	r3, [r7, #6]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <mem_malloc+0x14>
    return NULL;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e0d0      	b.n	800fbd2 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800fa30:	88fb      	ldrh	r3, [r7, #6]
 800fa32:	3303      	adds	r3, #3
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	f023 0303 	bic.w	r3, r3, #3
 800fa3a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800fa3c:	88fb      	ldrh	r3, [r7, #6]
 800fa3e:	2b0b      	cmp	r3, #11
 800fa40:	d801      	bhi.n	800fa46 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fa42:	230c      	movs	r3, #12
 800fa44:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800fa46:	88fb      	ldrh	r3, [r7, #6]
 800fa48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa4c:	d901      	bls.n	800fa52 <mem_malloc+0x36>
    return NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e0bf      	b.n	800fbd2 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fa52:	4862      	ldr	r0, [pc, #392]	; (800fbdc <mem_malloc+0x1c0>)
 800fa54:	f00a ff2c 	bl	801a8b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fa58:	4b61      	ldr	r3, [pc, #388]	; (800fbe0 <mem_malloc+0x1c4>)
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	4b61      	ldr	r3, [pc, #388]	; (800fbe4 <mem_malloc+0x1c8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	1ad3      	subs	r3, r2, r3
 800fa62:	83fb      	strh	r3, [r7, #30]
 800fa64:	e0aa      	b.n	800fbbc <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800fa66:	4b5f      	ldr	r3, [pc, #380]	; (800fbe4 <mem_malloc+0x1c8>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	8bfb      	ldrh	r3, [r7, #30]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	791b      	ldrb	r3, [r3, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f040 809b 	bne.w	800fbb0 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	8bfb      	ldrh	r3, [r7, #30]
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	f1a3 0208 	sub.w	r2, r3, #8
 800fa88:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	f0c0 8090 	bcc.w	800fbb0 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	881b      	ldrh	r3, [r3, #0]
 800fa94:	461a      	mov	r2, r3
 800fa96:	8bfb      	ldrh	r3, [r7, #30]
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	f1a3 0208 	sub.w	r2, r3, #8
 800fa9e:	88fb      	ldrh	r3, [r7, #6]
 800faa0:	3314      	adds	r3, #20
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d327      	bcc.n	800faf6 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800faa6:	8bfa      	ldrh	r2, [r7, #30]
 800faa8:	88fb      	ldrh	r3, [r7, #6]
 800faaa:	4413      	add	r3, r2
 800faac:	b29b      	uxth	r3, r3
 800faae:	3308      	adds	r3, #8
 800fab0:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800fab2:	4b4c      	ldr	r3, [pc, #304]	; (800fbe4 <mem_malloc+0x1c8>)
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	8a7b      	ldrh	r3, [r7, #18]
 800fab8:	4413      	add	r3, r2
 800faba:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	881a      	ldrh	r2, [r3, #0]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	8bfa      	ldrh	r2, [r7, #30]
 800face:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	8a7a      	ldrh	r2, [r7, #18]
 800fad4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	2201      	movs	r2, #1
 800fada:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fae4:	d00a      	beq.n	800fafc <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fae6:	4b3f      	ldr	r3, [pc, #252]	; (800fbe4 <mem_malloc+0x1c8>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	8812      	ldrh	r2, [r2, #0]
 800faee:	4413      	add	r3, r2
 800faf0:	8a7a      	ldrh	r2, [r7, #18]
 800faf2:	805a      	strh	r2, [r3, #2]
 800faf4:	e002      	b.n	800fafc <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2201      	movs	r2, #1
 800fafa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fafc:	4b38      	ldr	r3, [pc, #224]	; (800fbe0 <mem_malloc+0x1c4>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d127      	bne.n	800fb56 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800fb06:	4b36      	ldr	r3, [pc, #216]	; (800fbe0 <mem_malloc+0x1c4>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fb0c:	e005      	b.n	800fb1a <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800fb0e:	4b35      	ldr	r3, [pc, #212]	; (800fbe4 <mem_malloc+0x1c8>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	69ba      	ldr	r2, [r7, #24]
 800fb14:	8812      	ldrh	r2, [r2, #0]
 800fb16:	4413      	add	r3, r2
 800fb18:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	791b      	ldrb	r3, [r3, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d004      	beq.n	800fb2c <mem_malloc+0x110>
 800fb22:	4b31      	ldr	r3, [pc, #196]	; (800fbe8 <mem_malloc+0x1cc>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	69ba      	ldr	r2, [r7, #24]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d1f0      	bne.n	800fb0e <mem_malloc+0xf2>
          }
          lfree = cur;
 800fb2c:	4a2c      	ldr	r2, [pc, #176]	; (800fbe0 <mem_malloc+0x1c4>)
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fb32:	4b2b      	ldr	r3, [pc, #172]	; (800fbe0 <mem_malloc+0x1c4>)
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	4b2c      	ldr	r3, [pc, #176]	; (800fbe8 <mem_malloc+0x1cc>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d00b      	beq.n	800fb56 <mem_malloc+0x13a>
 800fb3e:	4b28      	ldr	r3, [pc, #160]	; (800fbe0 <mem_malloc+0x1c4>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	791b      	ldrb	r3, [r3, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d006      	beq.n	800fb56 <mem_malloc+0x13a>
 800fb48:	4b28      	ldr	r3, [pc, #160]	; (800fbec <mem_malloc+0x1d0>)
 800fb4a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fb4e:	4928      	ldr	r1, [pc, #160]	; (800fbf0 <mem_malloc+0x1d4>)
 800fb50:	4828      	ldr	r0, [pc, #160]	; (800fbf4 <mem_malloc+0x1d8>)
 800fb52:	f00a ff57 	bl	801aa04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fb56:	4821      	ldr	r0, [pc, #132]	; (800fbdc <mem_malloc+0x1c0>)
 800fb58:	f00a feb9 	bl	801a8ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fb5c:	88fa      	ldrh	r2, [r7, #6]
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	4413      	add	r3, r2
 800fb62:	3308      	adds	r3, #8
 800fb64:	4a20      	ldr	r2, [pc, #128]	; (800fbe8 <mem_malloc+0x1cc>)
 800fb66:	6812      	ldr	r2, [r2, #0]
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d906      	bls.n	800fb7a <mem_malloc+0x15e>
 800fb6c:	4b1f      	ldr	r3, [pc, #124]	; (800fbec <mem_malloc+0x1d0>)
 800fb6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800fb72:	4921      	ldr	r1, [pc, #132]	; (800fbf8 <mem_malloc+0x1dc>)
 800fb74:	481f      	ldr	r0, [pc, #124]	; (800fbf4 <mem_malloc+0x1d8>)
 800fb76:	f00a ff45 	bl	801aa04 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	f003 0303 	and.w	r3, r3, #3
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d006      	beq.n	800fb92 <mem_malloc+0x176>
 800fb84:	4b19      	ldr	r3, [pc, #100]	; (800fbec <mem_malloc+0x1d0>)
 800fb86:	f240 22d5 	movw	r2, #725	; 0x2d5
 800fb8a:	491c      	ldr	r1, [pc, #112]	; (800fbfc <mem_malloc+0x1e0>)
 800fb8c:	4819      	ldr	r0, [pc, #100]	; (800fbf4 <mem_malloc+0x1d8>)
 800fb8e:	f00a ff39 	bl	801aa04 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f003 0303 	and.w	r3, r3, #3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <mem_malloc+0x18e>
 800fb9c:	4b13      	ldr	r3, [pc, #76]	; (800fbec <mem_malloc+0x1d0>)
 800fb9e:	f240 22d7 	movw	r2, #727	; 0x2d7
 800fba2:	4917      	ldr	r1, [pc, #92]	; (800fc00 <mem_malloc+0x1e4>)
 800fba4:	4813      	ldr	r0, [pc, #76]	; (800fbf4 <mem_malloc+0x1d8>)
 800fba6:	f00a ff2d 	bl	801aa04 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	3308      	adds	r3, #8
 800fbae:	e010      	b.n	800fbd2 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800fbb0:	4b0c      	ldr	r3, [pc, #48]	; (800fbe4 <mem_malloc+0x1c8>)
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	8bfb      	ldrh	r3, [r7, #30]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fbbc:	8bfa      	ldrh	r2, [r7, #30]
 800fbbe:	88fb      	ldrh	r3, [r7, #6]
 800fbc0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	f4ff af4e 	bcc.w	800fa66 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fbca:	4804      	ldr	r0, [pc, #16]	; (800fbdc <mem_malloc+0x1c0>)
 800fbcc:	f00a fe7f 	bl	801a8ce <sys_mutex_unlock>
  return NULL;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3720      	adds	r7, #32
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	240045cc 	.word	0x240045cc
 800fbe0:	240045c8 	.word	0x240045c8
 800fbe4:	240045c0 	.word	0x240045c0
 800fbe8:	240045c4 	.word	0x240045c4
 800fbec:	0801cb98 	.word	0x0801cb98
 800fbf0:	0801cd38 	.word	0x0801cd38
 800fbf4:	0801cc08 	.word	0x0801cc08
 800fbf8:	0801cd54 	.word	0x0801cd54
 800fbfc:	0801cd84 	.word	0x0801cd84
 800fc00:	0801cdb4 	.word	0x0801cdb4

0800fc04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	2200      	movs	r2, #0
 800fc12:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	3303      	adds	r3, #3
 800fc1a:	f023 0303 	bic.w	r3, r3, #3
 800fc1e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e011      	b.n	800fc4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	68ba      	ldr	r2, [r7, #8]
 800fc36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	3301      	adds	r3, #1
 800fc48:	60fb      	str	r3, [r7, #12]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	885b      	ldrh	r3, [r3, #2]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4293      	cmp	r3, r2
 800fc54:	dbe7      	blt.n	800fc26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fc56:	bf00      	nop
 800fc58:	bf00      	nop
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	80fb      	strh	r3, [r7, #6]
 800fc6e:	e009      	b.n	800fc84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fc70:	88fb      	ldrh	r3, [r7, #6]
 800fc72:	4a08      	ldr	r2, [pc, #32]	; (800fc94 <memp_init+0x30>)
 800fc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff ffc3 	bl	800fc04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc7e:	88fb      	ldrh	r3, [r7, #6]
 800fc80:	3301      	adds	r3, #1
 800fc82:	80fb      	strh	r3, [r7, #6]
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	2b0c      	cmp	r3, #12
 800fc88:	d9f2      	bls.n	800fc70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fc8a:	bf00      	nop
 800fc8c:	bf00      	nop
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	0801f194 	.word	0x0801f194

0800fc98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fca0:	f00a fe48 	bl	801a934 <sys_arch_protect>
 800fca4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d015      	beq.n	800fce0 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	6812      	ldr	r2, [r2, #0]
 800fcbc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d006      	beq.n	800fcd6 <do_memp_malloc_pool+0x3e>
 800fcc8:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <do_memp_malloc_pool+0x58>)
 800fcca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800fcce:	4909      	ldr	r1, [pc, #36]	; (800fcf4 <do_memp_malloc_pool+0x5c>)
 800fcd0:	4809      	ldr	r0, [pc, #36]	; (800fcf8 <do_memp_malloc_pool+0x60>)
 800fcd2:	f00a fe97 	bl	801aa04 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f00a fe3a 	bl	801a950 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	e003      	b.n	800fce8 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f00a fe35 	bl	801a950 <sys_arch_unprotect>
  return NULL;
 800fce6:	2300      	movs	r3, #0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	0801cdd8 	.word	0x0801cdd8
 800fcf4:	0801ce30 	.word	0x0801ce30
 800fcf8:	0801ce54 	.word	0x0801ce54

0800fcfc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d106      	bne.n	800fd18 <memp_malloc_pool+0x1c>
 800fd0a:	4b0a      	ldr	r3, [pc, #40]	; (800fd34 <memp_malloc_pool+0x38>)
 800fd0c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fd10:	4909      	ldr	r1, [pc, #36]	; (800fd38 <memp_malloc_pool+0x3c>)
 800fd12:	480a      	ldr	r0, [pc, #40]	; (800fd3c <memp_malloc_pool+0x40>)
 800fd14:	f00a fe76 	bl	801aa04 <iprintf>
  if (desc == NULL) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d101      	bne.n	800fd22 <memp_malloc_pool+0x26>
    return NULL;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	e003      	b.n	800fd2a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7ff ffb8 	bl	800fc98 <do_memp_malloc_pool>
 800fd28:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	0801cdd8 	.word	0x0801cdd8
 800fd38:	0801ce7c 	.word	0x0801ce7c
 800fd3c:	0801ce54 	.word	0x0801ce54

0800fd40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	4603      	mov	r3, r0
 800fd48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fd4a:	79fb      	ldrb	r3, [r7, #7]
 800fd4c:	2b0c      	cmp	r3, #12
 800fd4e:	d908      	bls.n	800fd62 <memp_malloc+0x22>
 800fd50:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <memp_malloc+0x3c>)
 800fd52:	f240 1287 	movw	r2, #391	; 0x187
 800fd56:	490a      	ldr	r1, [pc, #40]	; (800fd80 <memp_malloc+0x40>)
 800fd58:	480a      	ldr	r0, [pc, #40]	; (800fd84 <memp_malloc+0x44>)
 800fd5a:	f00a fe53 	bl	801aa04 <iprintf>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e008      	b.n	800fd74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	4a08      	ldr	r2, [pc, #32]	; (800fd88 <memp_malloc+0x48>)
 800fd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7ff ff94 	bl	800fc98 <do_memp_malloc_pool>
 800fd70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fd72:	68fb      	ldr	r3, [r7, #12]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	0801cdd8 	.word	0x0801cdd8
 800fd80:	0801ce90 	.word	0x0801ce90
 800fd84:	0801ce54 	.word	0x0801ce54
 800fd88:	0801f194 	.word	0x0801f194

0800fd8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	f003 0303 	and.w	r3, r3, #3
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d006      	beq.n	800fdae <do_memp_free_pool+0x22>
 800fda0:	4b0d      	ldr	r3, [pc, #52]	; (800fdd8 <do_memp_free_pool+0x4c>)
 800fda2:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fda6:	490d      	ldr	r1, [pc, #52]	; (800fddc <do_memp_free_pool+0x50>)
 800fda8:	480d      	ldr	r0, [pc, #52]	; (800fde0 <do_memp_free_pool+0x54>)
 800fdaa:	f00a fe2b 	bl	801aa04 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fdb2:	f00a fdbf 	bl	801a934 <sys_arch_protect>
 800fdb6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	689b      	ldr	r3, [r3, #8]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fdca:	68b8      	ldr	r0, [r7, #8]
 800fdcc:	f00a fdc0 	bl	801a950 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	0801cdd8 	.word	0x0801cdd8
 800fddc:	0801ceb0 	.word	0x0801ceb0
 800fde0:	0801ce54 	.word	0x0801ce54

0800fde4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d106      	bne.n	800fe02 <memp_free_pool+0x1e>
 800fdf4:	4b0a      	ldr	r3, [pc, #40]	; (800fe20 <memp_free_pool+0x3c>)
 800fdf6:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800fdfa:	490a      	ldr	r1, [pc, #40]	; (800fe24 <memp_free_pool+0x40>)
 800fdfc:	480a      	ldr	r0, [pc, #40]	; (800fe28 <memp_free_pool+0x44>)
 800fdfe:	f00a fe01 	bl	801aa04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d007      	beq.n	800fe18 <memp_free_pool+0x34>
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d004      	beq.n	800fe18 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fe0e:	6839      	ldr	r1, [r7, #0]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7ff ffbb 	bl	800fd8c <do_memp_free_pool>
 800fe16:	e000      	b.n	800fe1a <memp_free_pool+0x36>
    return;
 800fe18:	bf00      	nop
}
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	0801cdd8 	.word	0x0801cdd8
 800fe24:	0801ce7c 	.word	0x0801ce7c
 800fe28:	0801ce54 	.word	0x0801ce54

0800fe2c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	6039      	str	r1, [r7, #0]
 800fe36:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	2b0c      	cmp	r3, #12
 800fe3c:	d907      	bls.n	800fe4e <memp_free+0x22>
 800fe3e:	4b0c      	ldr	r3, [pc, #48]	; (800fe70 <memp_free+0x44>)
 800fe40:	f240 12db 	movw	r2, #475	; 0x1db
 800fe44:	490b      	ldr	r1, [pc, #44]	; (800fe74 <memp_free+0x48>)
 800fe46:	480c      	ldr	r0, [pc, #48]	; (800fe78 <memp_free+0x4c>)
 800fe48:	f00a fddc 	bl	801aa04 <iprintf>
 800fe4c:	e00c      	b.n	800fe68 <memp_free+0x3c>

  if (mem == NULL) {
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d008      	beq.n	800fe66 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fe54:	79fb      	ldrb	r3, [r7, #7]
 800fe56:	4a09      	ldr	r2, [pc, #36]	; (800fe7c <memp_free+0x50>)
 800fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff ff94 	bl	800fd8c <do_memp_free_pool>
 800fe64:	e000      	b.n	800fe68 <memp_free+0x3c>
    return;
 800fe66:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	0801cdd8 	.word	0x0801cdd8
 800fe74:	0801ced0 	.word	0x0801ced0
 800fe78:	0801ce54 	.word	0x0801ce54
 800fe7c:	0801f194 	.word	0x0801f194

0800fe80 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fe80:	b480      	push	{r7}
 800fe82:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fe84:	bf00      	nop
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
	...

0800fe90 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
 800fe9c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d105      	bne.n	800feb0 <netif_add+0x20>
 800fea4:	4b26      	ldr	r3, [pc, #152]	; (800ff40 <netif_add+0xb0>)
 800fea6:	22fb      	movs	r2, #251	; 0xfb
 800fea8:	4926      	ldr	r1, [pc, #152]	; (800ff44 <netif_add+0xb4>)
 800feaa:	4827      	ldr	r0, [pc, #156]	; (800ff48 <netif_add+0xb8>)
 800feac:	f00a fdaa 	bl	801aa04 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2200      	movs	r2, #0
 800feba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2200      	movs	r2, #0
 800fec0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3328      	adds	r3, #40	; 0x28
 800fece:	2204      	movs	r2, #4
 800fed0:	2100      	movs	r1, #0
 800fed2:	4618      	mov	r0, r3
 800fed4:	f00a fd8e 	bl	801a9f4 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2203      	movs	r2, #3
 800fedc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2200      	movs	r2, #0
 800fee4:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2200      	movs	r2, #0
 800feea:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800fef2:	4b16      	ldr	r3, [pc, #88]	; (800ff4c <netif_add+0xbc>)
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	b2d1      	uxtb	r1, r2
 800fefa:	4a14      	ldr	r2, [pc, #80]	; (800ff4c <netif_add+0xbc>)
 800fefc:	7011      	strb	r1, [r2, #0]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  netif->input = input;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6a3a      	ldr	r2, [r7, #32]
 800ff08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	68b9      	ldr	r1, [r7, #8]
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f000 f81f 	bl	800ff54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	4798      	blx	r3
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <netif_add+0x96>
    return NULL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e007      	b.n	800ff36 <netif_add+0xa6>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ff26:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <netif_add+0xc0>)
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ff2e:	4a08      	ldr	r2, [pc, #32]	; (800ff50 <netif_add+0xc0>)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800ff34:	68fb      	ldr	r3, [r7, #12]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	0801ceec 	.word	0x0801ceec
 800ff44:	0801cf44 	.word	0x0801cf44
 800ff48:	0801cf5c 	.word	0x0801cf5c
 800ff4c:	240076c0 	.word	0x240076c0
 800ff50:	240076b8 	.word	0x240076b8

0800ff54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d003      	beq.n	800ff70 <netif_set_addr+0x1c>
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10c      	bne.n	800ff8a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f000 f81a 	bl	800ffac <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f000 f86a 	bl	8010054 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ff80:	6839      	ldr	r1, [r7, #0]
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f000 f852 	bl	801002c <netif_set_gw>
 800ff88:	e00c      	b.n	800ffa4 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	f000 f861 	bl	8010054 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f000 f849 	bl	801002c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800ff9a:	68b9      	ldr	r1, [r7, #8]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 f805 	bl	800ffac <netif_set_ipaddr>
  }
}
 800ffa2:	bf00      	nop
 800ffa4:	bf00      	nop
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d003      	beq.n	800ffc4 <netif_set_ipaddr+0x18>
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	e002      	b.n	800ffca <netif_set_ipaddr+0x1e>
 800ffc4:	4b18      	ldr	r3, [pc, #96]	; (8010028 <netif_set_ipaddr+0x7c>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	3304      	adds	r3, #4
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d024      	beq.n	8010020 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	3304      	adds	r3, #4
 800ffda:	f107 020c 	add.w	r2, r7, #12
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f002 fbbf 	bl	8012764 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3304      	adds	r3, #4
 800ffea:	f107 020c 	add.w	r2, r7, #12
 800ffee:	4611      	mov	r1, r2
 800fff0:	4618      	mov	r0, r3
 800fff2:	f006 fe59 	bl	8016ca8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <netif_set_ipaddr+0x56>
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	e000      	b.n	8010004 <netif_set_ipaddr+0x58>
 8010002:	2300      	movs	r3, #0
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010008:	2101      	movs	r1, #1
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f871 	bl	80100f2 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d003      	beq.n	8010020 <netif_set_ipaddr+0x74>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8010020:	bf00      	nop
 8010022:	3710      	adds	r7, #16
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	0801f218 	.word	0x0801f218

0801002c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <netif_set_gw+0x16>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	e000      	b.n	8010044 <netif_set_gw+0x18>
 8010042:	2300      	movs	r3, #0
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <netif_set_netmask+0x16>
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	e000      	b.n	801006c <netif_set_netmask+0x18>
 801006a:	2300      	movs	r3, #0
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010084:	4a04      	ldr	r2, [pc, #16]	; (8010098 <netif_set_default+0x1c>)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	240076bc 	.word	0x240076bc

0801009c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d11b      	bne.n	80100ea <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80100b8:	f043 0301 	orr.w	r3, r3, #1
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	69db      	ldr	r3, [r3, #28]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d003      	beq.n	80100d4 <netif_set_up+0x38>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	69db      	ldr	r3, [r3, #28]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80100da:	f003 0304 	and.w	r3, r3, #4
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d003      	beq.n	80100ea <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80100e2:	2103      	movs	r1, #3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f804 	bl	80100f2 <netif_issue_reports>
    }
  }
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	460b      	mov	r3, r1
 80100fc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	f003 0301 	and.w	r3, r3, #1
 8010104:	2b00      	cmp	r3, #0
 8010106:	d011      	beq.n	801012c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3304      	adds	r3, #4
 801010c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00c      	beq.n	801012c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010118:	f003 0308 	and.w	r3, r3, #8
 801011c:	2b00      	cmp	r3, #0
 801011e:	d005      	beq.n	801012c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3304      	adds	r3, #4
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f008 fe80 	bl	8018e2c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801012c:	bf00      	nop
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	d01a      	beq.n	8010180 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010150:	f023 0301 	bic.w	r3, r3, #1
 8010154:	b2da      	uxtb	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010162:	f003 0308 	and.w	r3, r3, #8
 8010166:	2b00      	cmp	r3, #0
 8010168:	d002      	beq.n	8010170 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f008 fa20 	bl	80185b0 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	69db      	ldr	r3, [r3, #28]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d003      	beq.n	8010180 <netif_set_down+0x4c>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	69db      	ldr	r3, [r3, #28]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	4798      	blx	r3
  }
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  if (netif) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <netif_set_status_callback+0x16>
    netif->status_callback = status_callback;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	61da      	str	r2, [r3, #28]
  }
}
 801019e:	bf00      	nop
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b082      	sub	sp, #8
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80101b8:	f003 0304 	and.w	r3, r3, #4
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d11e      	bne.n	80101fe <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80101c6:	f043 0304 	orr.w	r3, r3, #4
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f006 ffa3 	bl	801711e <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d003      	beq.n	80101ee <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80101e6:	2103      	movs	r1, #3
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff ff82 	bl	80100f2 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d003      	beq.n	80101fe <netif_set_link_up+0x54>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a1b      	ldr	r3, [r3, #32]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	4798      	blx	r3
  }
}
 80101fe:	bf00      	nop
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b082      	sub	sp, #8
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010214:	f003 0304 	and.w	r3, r3, #4
 8010218:	2b00      	cmp	r3, #0
 801021a:	d010      	beq.n	801023e <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010222:	f023 0304 	bic.w	r3, r3, #4
 8010226:	b2da      	uxtb	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    NETIF_LINK_CALLBACK(netif);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6a1b      	ldr	r3, [r3, #32]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <netif_set_link_down+0x38>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	4798      	blx	r3
  }
}
 801023e:	bf00      	nop
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010246:	b480      	push	{r7}
 8010248:	b083      	sub	sp, #12
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	6039      	str	r1, [r7, #0]
  if (netif) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	683a      	ldr	r2, [r7, #0]
 801025a:	621a      	str	r2, [r3, #32]
  }
}
 801025c:	bf00      	nop
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801026e:	f00a fb61 	bl	801a934 <sys_arch_protect>
 8010272:	6038      	str	r0, [r7, #0]
 8010274:	4b0f      	ldr	r3, [pc, #60]	; (80102b4 <pbuf_free_ooseq+0x4c>)
 8010276:	2200      	movs	r2, #0
 8010278:	701a      	strb	r2, [r3, #0]
 801027a:	6838      	ldr	r0, [r7, #0]
 801027c:	f00a fb68 	bl	801a950 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010280:	4b0d      	ldr	r3, [pc, #52]	; (80102b8 <pbuf_free_ooseq+0x50>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	607b      	str	r3, [r7, #4]
 8010286:	e00f      	b.n	80102a8 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028c:	2b00      	cmp	r3, #0
 801028e:	d008      	beq.n	80102a2 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010294:	4618      	mov	r0, r3
 8010296:	f001 fee0 	bl	801205a <tcp_segs_free>
      pcb->ooseq = NULL;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80102a0:	e005      	b.n	80102ae <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	607b      	str	r3, [r7, #4]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d1ec      	bne.n	8010288 <pbuf_free_ooseq+0x20>
    }
  }
}
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	240076c1 	.word	0x240076c1
 80102b8:	240076d0 	.word	0x240076d0

080102bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80102c4:	f7ff ffd0 	bl	8010268 <pbuf_free_ooseq>
}
 80102c8:	bf00      	nop
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80102d6:	f00a fb2d 	bl	801a934 <sys_arch_protect>
 80102da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <pbuf_pool_is_empty+0x50>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80102e2:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <pbuf_pool_is_empty+0x50>)
 80102e4:	2201      	movs	r2, #1
 80102e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f00a fb31 	bl	801a950 <sys_arch_unprotect>

  if (!queued) {
 80102ee:	78fb      	ldrb	r3, [r7, #3]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d110      	bne.n	8010316 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80102f4:	2200      	movs	r2, #0
 80102f6:	2100      	movs	r1, #0
 80102f8:	480a      	ldr	r0, [pc, #40]	; (8010324 <pbuf_pool_is_empty+0x54>)
 80102fa:	f7ff f853 	bl	800f3a4 <tcpip_callback_with_block>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d008      	beq.n	8010316 <pbuf_pool_is_empty+0x46>
 8010304:	f00a fb16 	bl	801a934 <sys_arch_protect>
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	4b05      	ldr	r3, [pc, #20]	; (8010320 <pbuf_pool_is_empty+0x50>)
 801030c:	2200      	movs	r2, #0
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f00a fb1d 	bl	801a950 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010316:	bf00      	nop
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	240076c1 	.word	0x240076c1
 8010324:	080102bd 	.word	0x080102bd

08010328 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	71fb      	strb	r3, [r7, #7]
 8010332:	460b      	mov	r3, r1
 8010334:	80bb      	strh	r3, [r7, #4]
 8010336:	4613      	mov	r3, r2
 8010338:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	2b04      	cmp	r3, #4
 801033e:	d81c      	bhi.n	801037a <pbuf_alloc+0x52>
 8010340:	a201      	add	r2, pc, #4	; (adr r2, 8010348 <pbuf_alloc+0x20>)
 8010342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010346:	bf00      	nop
 8010348:	0801035d 	.word	0x0801035d
 801034c:	08010363 	.word	0x08010363
 8010350:	08010369 	.word	0x08010369
 8010354:	0801036f 	.word	0x0801036f
 8010358:	08010375 	.word	0x08010375
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801035c:	2336      	movs	r3, #54	; 0x36
 801035e:	82fb      	strh	r3, [r7, #22]
    break;
 8010360:	e014      	b.n	801038c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010362:	2322      	movs	r3, #34	; 0x22
 8010364:	82fb      	strh	r3, [r7, #22]
    break;
 8010366:	e011      	b.n	801038c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010368:	230e      	movs	r3, #14
 801036a:	82fb      	strh	r3, [r7, #22]
    break;
 801036c:	e00e      	b.n	801038c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801036e:	2300      	movs	r3, #0
 8010370:	82fb      	strh	r3, [r7, #22]
    break;
 8010372:	e00b      	b.n	801038c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010374:	2300      	movs	r3, #0
 8010376:	82fb      	strh	r3, [r7, #22]
    break;
 8010378:	e008      	b.n	801038c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801037a:	4ba1      	ldr	r3, [pc, #644]	; (8010600 <pbuf_alloc+0x2d8>)
 801037c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8010380:	49a0      	ldr	r1, [pc, #640]	; (8010604 <pbuf_alloc+0x2dc>)
 8010382:	48a1      	ldr	r0, [pc, #644]	; (8010608 <pbuf_alloc+0x2e0>)
 8010384:	f00a fb3e 	bl	801aa04 <iprintf>
    return NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	e15c      	b.n	8010646 <pbuf_alloc+0x31e>
  }

  switch (type) {
 801038c:	79bb      	ldrb	r3, [r7, #6]
 801038e:	2b03      	cmp	r3, #3
 8010390:	d00d      	beq.n	80103ae <pbuf_alloc+0x86>
 8010392:	2b03      	cmp	r3, #3
 8010394:	f300 8146 	bgt.w	8010624 <pbuf_alloc+0x2fc>
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 80d0 	beq.w	801053e <pbuf_alloc+0x216>
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f2c0 8140 	blt.w	8010624 <pbuf_alloc+0x2fc>
 80103a4:	3b01      	subs	r3, #1
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	f200 813c 	bhi.w	8010624 <pbuf_alloc+0x2fc>
 80103ac:	e10d      	b.n	80105ca <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80103ae:	200c      	movs	r0, #12
 80103b0:	f7ff fcc6 	bl	800fd40 <memp_malloc>
 80103b4:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d103      	bne.n	80103c4 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80103bc:	f7ff ff88 	bl	80102d0 <pbuf_pool_is_empty>
      return NULL;
 80103c0:	2300      	movs	r3, #0
 80103c2:	e140      	b.n	8010646 <pbuf_alloc+0x31e>
    }
    p->type = type;
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	79ba      	ldrb	r2, [r7, #6]
 80103c8:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80103d0:	8afb      	ldrh	r3, [r7, #22]
 80103d2:	3310      	adds	r3, #16
 80103d4:	69fa      	ldr	r2, [r7, #28]
 80103d6:	4413      	add	r3, r2
 80103d8:	3303      	adds	r3, #3
 80103da:	f023 0303 	bic.w	r3, r3, #3
 80103de:	461a      	mov	r2, r3
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	f003 0303 	and.w	r3, r3, #3
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d006      	beq.n	80103fe <pbuf_alloc+0xd6>
 80103f0:	4b83      	ldr	r3, [pc, #524]	; (8010600 <pbuf_alloc+0x2d8>)
 80103f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80103f6:	4985      	ldr	r1, [pc, #532]	; (801060c <pbuf_alloc+0x2e4>)
 80103f8:	4883      	ldr	r0, [pc, #524]	; (8010608 <pbuf_alloc+0x2e0>)
 80103fa:	f00a fb03 	bl	801aa04 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	88ba      	ldrh	r2, [r7, #4]
 8010402:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8010404:	8afb      	ldrh	r3, [r7, #22]
 8010406:	3303      	adds	r3, #3
 8010408:	f023 0303 	bic.w	r3, r3, #3
 801040c:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8010410:	88bb      	ldrh	r3, [r7, #4]
 8010412:	4293      	cmp	r3, r2
 8010414:	bf28      	it	cs
 8010416:	4613      	movcs	r3, r2
 8010418:	b29a      	uxth	r2, r3
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	69fa      	ldr	r2, [r7, #28]
 8010424:	8952      	ldrh	r2, [r2, #10]
 8010426:	441a      	add	r2, r3
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801042e:	429a      	cmp	r2, r3
 8010430:	d906      	bls.n	8010440 <pbuf_alloc+0x118>
 8010432:	4b73      	ldr	r3, [pc, #460]	; (8010600 <pbuf_alloc+0x2d8>)
 8010434:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010438:	4975      	ldr	r1, [pc, #468]	; (8010610 <pbuf_alloc+0x2e8>)
 801043a:	4873      	ldr	r0, [pc, #460]	; (8010608 <pbuf_alloc+0x2e0>)
 801043c:	f00a fae2 	bl	801aa04 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010440:	8afb      	ldrh	r3, [r7, #22]
 8010442:	3303      	adds	r3, #3
 8010444:	f023 0303 	bic.w	r3, r3, #3
 8010448:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801044c:	d106      	bne.n	801045c <pbuf_alloc+0x134>
 801044e:	4b6c      	ldr	r3, [pc, #432]	; (8010600 <pbuf_alloc+0x2d8>)
 8010450:	f240 1231 	movw	r2, #305	; 0x131
 8010454:	496f      	ldr	r1, [pc, #444]	; (8010614 <pbuf_alloc+0x2ec>)
 8010456:	486c      	ldr	r0, [pc, #432]	; (8010608 <pbuf_alloc+0x2e0>)
 8010458:	f00a fad4 	bl	801aa04 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	2201      	movs	r2, #1
 8010460:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8010466:	88bb      	ldrh	r3, [r7, #4]
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	8952      	ldrh	r2, [r2, #10]
 801046c:	1a9b      	subs	r3, r3, r2
 801046e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8010470:	e061      	b.n	8010536 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010472:	200c      	movs	r0, #12
 8010474:	f7ff fc64 	bl	800fd40 <memp_malloc>
 8010478:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d106      	bne.n	801048e <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8010480:	f7ff ff26 	bl	80102d0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8010484:	69f8      	ldr	r0, [r7, #28]
 8010486:	f000 fac7 	bl	8010a18 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	e0db      	b.n	8010646 <pbuf_alloc+0x31e>
      }
      q->type = type;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	79ba      	ldrb	r2, [r7, #6]
 8010492:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2200      	movs	r2, #0
 8010498:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80104ac:	4293      	cmp	r3, r2
 80104ae:	dd06      	ble.n	80104be <pbuf_alloc+0x196>
 80104b0:	4b53      	ldr	r3, [pc, #332]	; (8010600 <pbuf_alloc+0x2d8>)
 80104b2:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80104b6:	4958      	ldr	r1, [pc, #352]	; (8010618 <pbuf_alloc+0x2f0>)
 80104b8:	4853      	ldr	r0, [pc, #332]	; (8010608 <pbuf_alloc+0x2e0>)
 80104ba:	f00a faa3 	bl	801aa04 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80104ce:	bf28      	it	cs
 80104d0:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f103 0210 	add.w	r2, r3, #16
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	f003 0303 	and.w	r3, r3, #3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d006      	beq.n	80104fe <pbuf_alloc+0x1d6>
 80104f0:	4b43      	ldr	r3, [pc, #268]	; (8010600 <pbuf_alloc+0x2d8>)
 80104f2:	f240 1251 	movw	r2, #337	; 0x151
 80104f6:	4949      	ldr	r1, [pc, #292]	; (801061c <pbuf_alloc+0x2f4>)
 80104f8:	4843      	ldr	r0, [pc, #268]	; (8010608 <pbuf_alloc+0x2e0>)
 80104fa:	f00a fa83 	bl	801aa04 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	69fa      	ldr	r2, [r7, #28]
 8010504:	8952      	ldrh	r2, [r2, #10]
 8010506:	441a      	add	r2, r3
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801050e:	429a      	cmp	r2, r3
 8010510:	d906      	bls.n	8010520 <pbuf_alloc+0x1f8>
 8010512:	4b3b      	ldr	r3, [pc, #236]	; (8010600 <pbuf_alloc+0x2d8>)
 8010514:	f240 1253 	movw	r2, #339	; 0x153
 8010518:	493d      	ldr	r1, [pc, #244]	; (8010610 <pbuf_alloc+0x2e8>)
 801051a:	483b      	ldr	r0, [pc, #236]	; (8010608 <pbuf_alloc+0x2e0>)
 801051c:	f00a fa72 	bl	801aa04 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2201      	movs	r2, #1
 8010524:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	895b      	ldrh	r3, [r3, #10]
 801052a:	461a      	mov	r2, r3
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	1a9b      	subs	r3, r3, r2
 8010530:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dc9a      	bgt.n	8010472 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801053c:	e07c      	b.n	8010638 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801053e:	8afb      	ldrh	r3, [r7, #22]
 8010540:	3313      	adds	r3, #19
 8010542:	b29b      	uxth	r3, r3
 8010544:	f023 0303 	bic.w	r3, r3, #3
 8010548:	b29a      	uxth	r2, r3
 801054a:	88bb      	ldrh	r3, [r7, #4]
 801054c:	3303      	adds	r3, #3
 801054e:	b29b      	uxth	r3, r3
 8010550:	f023 0303 	bic.w	r3, r3, #3
 8010554:	b29b      	uxth	r3, r3
 8010556:	4413      	add	r3, r2
 8010558:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801055a:	897a      	ldrh	r2, [r7, #10]
 801055c:	88bb      	ldrh	r3, [r7, #4]
 801055e:	3303      	adds	r3, #3
 8010560:	f023 0303 	bic.w	r3, r3, #3
 8010564:	429a      	cmp	r2, r3
 8010566:	d201      	bcs.n	801056c <pbuf_alloc+0x244>
        return NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	e06c      	b.n	8010646 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801056c:	897b      	ldrh	r3, [r7, #10]
 801056e:	4618      	mov	r0, r3
 8010570:	f7ff fa54 	bl	800fa1c <mem_malloc>
 8010574:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d101      	bne.n	8010580 <pbuf_alloc+0x258>
      return NULL;
 801057c:	2300      	movs	r3, #0
 801057e:	e062      	b.n	8010646 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8010580:	8afb      	ldrh	r3, [r7, #22]
 8010582:	3310      	adds	r3, #16
 8010584:	69fa      	ldr	r2, [r7, #28]
 8010586:	4413      	add	r3, r2
 8010588:	3303      	adds	r3, #3
 801058a:	f023 0303 	bic.w	r3, r3, #3
 801058e:	461a      	mov	r2, r3
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	88ba      	ldrh	r2, [r7, #4]
 8010598:	811a      	strh	r2, [r3, #8]
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	891a      	ldrh	r2, [r3, #8]
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80105a2:	69fb      	ldr	r3, [r7, #28]
 80105a4:	2200      	movs	r2, #0
 80105a6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	79ba      	ldrb	r2, [r7, #6]
 80105ac:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d03d      	beq.n	8010636 <pbuf_alloc+0x30e>
 80105ba:	4b11      	ldr	r3, [pc, #68]	; (8010600 <pbuf_alloc+0x2d8>)
 80105bc:	f44f 72bb 	mov.w	r2, #374	; 0x176
 80105c0:	4917      	ldr	r1, [pc, #92]	; (8010620 <pbuf_alloc+0x2f8>)
 80105c2:	4811      	ldr	r0, [pc, #68]	; (8010608 <pbuf_alloc+0x2e0>)
 80105c4:	f00a fa1e 	bl	801aa04 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80105c8:	e035      	b.n	8010636 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80105ca:	200b      	movs	r0, #11
 80105cc:	f7ff fbb8 	bl	800fd40 <memp_malloc>
 80105d0:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80105d8:	2300      	movs	r3, #0
 80105da:	e034      	b.n	8010646 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	2200      	movs	r2, #0
 80105e0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	88ba      	ldrh	r2, [r7, #4]
 80105e6:	811a      	strh	r2, [r3, #8]
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	891a      	ldrh	r2, [r3, #8]
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
    p->type = type;
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	79ba      	ldrb	r2, [r7, #6]
 80105fa:	731a      	strb	r2, [r3, #12]
    break;
 80105fc:	e01c      	b.n	8010638 <pbuf_alloc+0x310>
 80105fe:	bf00      	nop
 8010600:	0801cf84 	.word	0x0801cf84
 8010604:	0801cfdc 	.word	0x0801cfdc
 8010608:	0801cff8 	.word	0x0801cff8
 801060c:	0801d020 	.word	0x0801d020
 8010610:	0801d050 	.word	0x0801d050
 8010614:	0801d084 	.word	0x0801d084
 8010618:	0801d0b8 	.word	0x0801d0b8
 801061c:	0801d0cc 	.word	0x0801d0cc
 8010620:	0801d0fc 	.word	0x0801d0fc
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010624:	4b0a      	ldr	r3, [pc, #40]	; (8010650 <pbuf_alloc+0x328>)
 8010626:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801062a:	490a      	ldr	r1, [pc, #40]	; (8010654 <pbuf_alloc+0x32c>)
 801062c:	480a      	ldr	r0, [pc, #40]	; (8010658 <pbuf_alloc+0x330>)
 801062e:	f00a f9e9 	bl	801aa04 <iprintf>
    return NULL;
 8010632:	2300      	movs	r3, #0
 8010634:	e007      	b.n	8010646 <pbuf_alloc+0x31e>
    break;
 8010636:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	2201      	movs	r2, #1
 801063c:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	2200      	movs	r2, #0
 8010642:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	0801cf84 	.word	0x0801cf84
 8010654:	0801d128 	.word	0x0801d128
 8010658:	0801cff8 	.word	0x0801cff8

0801065c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	603b      	str	r3, [r7, #0]
 8010664:	4603      	mov	r3, r0
 8010666:	71fb      	strb	r3, [r7, #7]
 8010668:	460b      	mov	r3, r1
 801066a:	80bb      	strh	r3, [r7, #4]
 801066c:	4613      	mov	r3, r2
 801066e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	2b04      	cmp	r3, #4
 8010674:	d81b      	bhi.n	80106ae <pbuf_alloced_custom+0x52>
 8010676:	a201      	add	r2, pc, #4	; (adr r2, 801067c <pbuf_alloced_custom+0x20>)
 8010678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801067c:	08010691 	.word	0x08010691
 8010680:	08010697 	.word	0x08010697
 8010684:	0801069d 	.word	0x0801069d
 8010688:	080106a3 	.word	0x080106a3
 801068c:	080106a9 	.word	0x080106a9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010690:	2336      	movs	r3, #54	; 0x36
 8010692:	81fb      	strh	r3, [r7, #14]
    break;
 8010694:	e014      	b.n	80106c0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010696:	2322      	movs	r3, #34	; 0x22
 8010698:	81fb      	strh	r3, [r7, #14]
    break;
 801069a:	e011      	b.n	80106c0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801069c:	230e      	movs	r3, #14
 801069e:	81fb      	strh	r3, [r7, #14]
    break;
 80106a0:	e00e      	b.n	80106c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80106a2:	2300      	movs	r3, #0
 80106a4:	81fb      	strh	r3, [r7, #14]
    break;
 80106a6:	e00b      	b.n	80106c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80106a8:	2300      	movs	r3, #0
 80106aa:	81fb      	strh	r3, [r7, #14]
    break;
 80106ac:	e008      	b.n	80106c0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80106ae:	4b1d      	ldr	r3, [pc, #116]	; (8010724 <pbuf_alloced_custom+0xc8>)
 80106b0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80106b4:	491c      	ldr	r1, [pc, #112]	; (8010728 <pbuf_alloced_custom+0xcc>)
 80106b6:	481d      	ldr	r0, [pc, #116]	; (801072c <pbuf_alloced_custom+0xd0>)
 80106b8:	f00a f9a4 	bl	801aa04 <iprintf>
    return NULL;
 80106bc:	2300      	movs	r3, #0
 80106be:	e02d      	b.n	801071c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80106c0:	89fb      	ldrh	r3, [r7, #14]
 80106c2:	3303      	adds	r3, #3
 80106c4:	f023 0203 	bic.w	r2, r3, #3
 80106c8:	88bb      	ldrh	r3, [r7, #4]
 80106ca:	441a      	add	r2, r3
 80106cc:	8bbb      	ldrh	r3, [r7, #28]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d901      	bls.n	80106d6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	e022      	b.n	801071c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	2200      	movs	r2, #0
 80106da:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d008      	beq.n	80106f4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80106e2:	89fb      	ldrh	r3, [r7, #14]
 80106e4:	3303      	adds	r3, #3
 80106e6:	f023 0303 	bic.w	r3, r3, #3
 80106ea:	69ba      	ldr	r2, [r7, #24]
 80106ec:	441a      	add	r2, r3
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	605a      	str	r2, [r3, #4]
 80106f2:	e002      	b.n	80106fa <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	2200      	movs	r2, #0
 80106f8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2202      	movs	r2, #2
 80106fe:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	88ba      	ldrh	r2, [r7, #4]
 8010704:	811a      	strh	r2, [r3, #8]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	891a      	ldrh	r2, [r3, #8]
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	79ba      	ldrb	r2, [r7, #6]
 8010712:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2201      	movs	r2, #1
 8010718:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801071a:	683b      	ldr	r3, [r7, #0]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	0801cf84 	.word	0x0801cf84
 8010728:	0801d144 	.word	0x0801d144
 801072c:	0801cff8 	.word	0x0801cff8

08010730 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	460b      	mov	r3, r1
 801073a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d106      	bne.n	8010750 <pbuf_realloc+0x20>
 8010742:	4b4b      	ldr	r3, [pc, #300]	; (8010870 <pbuf_realloc+0x140>)
 8010744:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010748:	494a      	ldr	r1, [pc, #296]	; (8010874 <pbuf_realloc+0x144>)
 801074a:	484b      	ldr	r0, [pc, #300]	; (8010878 <pbuf_realloc+0x148>)
 801074c:	f00a f95a 	bl	801aa04 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	7b1b      	ldrb	r3, [r3, #12]
 8010754:	2b03      	cmp	r3, #3
 8010756:	d012      	beq.n	801077e <pbuf_realloc+0x4e>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	7b1b      	ldrb	r3, [r3, #12]
 801075c:	2b01      	cmp	r3, #1
 801075e:	d00e      	beq.n	801077e <pbuf_realloc+0x4e>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	7b1b      	ldrb	r3, [r3, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00a      	beq.n	801077e <pbuf_realloc+0x4e>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	7b1b      	ldrb	r3, [r3, #12]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d006      	beq.n	801077e <pbuf_realloc+0x4e>
 8010770:	4b3f      	ldr	r3, [pc, #252]	; (8010870 <pbuf_realloc+0x140>)
 8010772:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010776:	4941      	ldr	r1, [pc, #260]	; (801087c <pbuf_realloc+0x14c>)
 8010778:	483f      	ldr	r0, [pc, #252]	; (8010878 <pbuf_realloc+0x148>)
 801077a:	f00a f943 	bl	801aa04 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	891b      	ldrh	r3, [r3, #8]
 8010782:	887a      	ldrh	r2, [r7, #2]
 8010784:	429a      	cmp	r2, r3
 8010786:	d26e      	bcs.n	8010866 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010788:	887b      	ldrh	r3, [r7, #2]
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	8912      	ldrh	r2, [r2, #8]
 801078e:	1a9b      	subs	r3, r3, r2
 8010790:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010792:	887b      	ldrh	r3, [r7, #2]
 8010794:	827b      	strh	r3, [r7, #18]
  q = p;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801079a:	e025      	b.n	80107e8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	895b      	ldrh	r3, [r3, #10]
 80107a0:	8a7a      	ldrh	r2, [r7, #18]
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80107ac:	4293      	cmp	r3, r2
 80107ae:	dd06      	ble.n	80107be <pbuf_realloc+0x8e>
 80107b0:	4b2f      	ldr	r3, [pc, #188]	; (8010870 <pbuf_realloc+0x140>)
 80107b2:	f240 220b 	movw	r2, #523	; 0x20b
 80107b6:	4932      	ldr	r1, [pc, #200]	; (8010880 <pbuf_realloc+0x150>)
 80107b8:	482f      	ldr	r0, [pc, #188]	; (8010878 <pbuf_realloc+0x148>)
 80107ba:	f00a f923 	bl	801aa04 <iprintf>
    q->tot_len += (u16_t)grow;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	891a      	ldrh	r2, [r3, #8]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	4413      	add	r3, r2
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <pbuf_realloc+0xb8>
 80107da:	4b25      	ldr	r3, [pc, #148]	; (8010870 <pbuf_realloc+0x140>)
 80107dc:	f240 220f 	movw	r2, #527	; 0x20f
 80107e0:	4928      	ldr	r1, [pc, #160]	; (8010884 <pbuf_realloc+0x154>)
 80107e2:	4825      	ldr	r0, [pc, #148]	; (8010878 <pbuf_realloc+0x148>)
 80107e4:	f00a f90e 	bl	801aa04 <iprintf>
  while (rem_len > q->len) {
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	895b      	ldrh	r3, [r3, #10]
 80107ec:	8a7a      	ldrh	r2, [r7, #18]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d8d4      	bhi.n	801079c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	7b1b      	ldrb	r3, [r3, #12]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d121      	bne.n	801083e <pbuf_realloc+0x10e>
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	895b      	ldrh	r3, [r3, #10]
 80107fe:	8a7a      	ldrh	r2, [r7, #18]
 8010800:	429a      	cmp	r2, r3
 8010802:	d01c      	beq.n	801083e <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	7b5b      	ldrb	r3, [r3, #13]
 8010808:	f003 0302 	and.w	r3, r3, #2
 801080c:	2b00      	cmp	r3, #0
 801080e:	d116      	bne.n	801083e <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	685a      	ldr	r2, [r3, #4]
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	b29a      	uxth	r2, r3
 801081a:	8a7b      	ldrh	r3, [r7, #18]
 801081c:	4413      	add	r3, r2
 801081e:	b29b      	uxth	r3, r3
 8010820:	4619      	mov	r1, r3
 8010822:	6978      	ldr	r0, [r7, #20]
 8010824:	f7ff f810 	bl	800f848 <mem_trim>
 8010828:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d106      	bne.n	801083e <pbuf_realloc+0x10e>
 8010830:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <pbuf_realloc+0x140>)
 8010832:	f240 221d 	movw	r2, #541	; 0x21d
 8010836:	4914      	ldr	r1, [pc, #80]	; (8010888 <pbuf_realloc+0x158>)
 8010838:	480f      	ldr	r0, [pc, #60]	; (8010878 <pbuf_realloc+0x148>)
 801083a:	f00a f8e3 	bl	801aa04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	8a7a      	ldrh	r2, [r7, #18]
 8010842:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	895a      	ldrh	r2, [r3, #10]
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d004      	beq.n	801085e <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4618      	mov	r0, r3
 801085a:	f000 f8dd 	bl	8010a18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	2200      	movs	r2, #0
 8010862:	601a      	str	r2, [r3, #0]
 8010864:	e000      	b.n	8010868 <pbuf_realloc+0x138>
    return;
 8010866:	bf00      	nop

}
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0801cf84 	.word	0x0801cf84
 8010874:	0801d168 	.word	0x0801d168
 8010878:	0801cff8 	.word	0x0801cff8
 801087c:	0801d180 	.word	0x0801d180
 8010880:	0801d19c 	.word	0x0801d19c
 8010884:	0801d1b0 	.word	0x0801d1b0
 8010888:	0801d1c8 	.word	0x0801d1c8

0801088c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	460b      	mov	r3, r1
 8010896:	807b      	strh	r3, [r7, #2]
 8010898:	4613      	mov	r3, r2
 801089a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d106      	bne.n	80108b0 <pbuf_header_impl+0x24>
 80108a2:	4b46      	ldr	r3, [pc, #280]	; (80109bc <pbuf_header_impl+0x130>)
 80108a4:	f240 223f 	movw	r2, #575	; 0x23f
 80108a8:	4945      	ldr	r1, [pc, #276]	; (80109c0 <pbuf_header_impl+0x134>)
 80108aa:	4846      	ldr	r0, [pc, #280]	; (80109c4 <pbuf_header_impl+0x138>)
 80108ac:	f00a f8aa 	bl	801aa04 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80108b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <pbuf_header_impl+0x32>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <pbuf_header_impl+0x36>
    return 0;
 80108be:	2300      	movs	r3, #0
 80108c0:	e078      	b.n	80109b4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80108c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	da10      	bge.n	80108ec <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80108ca:	887b      	ldrh	r3, [r7, #2]
 80108cc:	425b      	negs	r3, r3
 80108ce:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	895b      	ldrh	r3, [r3, #10]
 80108d4:	89fa      	ldrh	r2, [r7, #14]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d90a      	bls.n	80108f0 <pbuf_header_impl+0x64>
 80108da:	4b38      	ldr	r3, [pc, #224]	; (80109bc <pbuf_header_impl+0x130>)
 80108dc:	f240 2247 	movw	r2, #583	; 0x247
 80108e0:	4939      	ldr	r1, [pc, #228]	; (80109c8 <pbuf_header_impl+0x13c>)
 80108e2:	4838      	ldr	r0, [pc, #224]	; (80109c4 <pbuf_header_impl+0x138>)
 80108e4:	f00a f88e 	bl	801aa04 <iprintf>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e063      	b.n	80109b4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80108ec:	887b      	ldrh	r3, [r7, #2]
 80108ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	7b1b      	ldrb	r3, [r3, #12]
 80108f4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80108fc:	89bb      	ldrh	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d002      	beq.n	8010908 <pbuf_header_impl+0x7c>
 8010902:	89bb      	ldrh	r3, [r7, #12]
 8010904:	2b03      	cmp	r3, #3
 8010906:	d112      	bne.n	801092e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010910:	425b      	negs	r3, r3
 8010912:	441a      	add	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	685a      	ldr	r2, [r3, #4]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3310      	adds	r3, #16
 8010920:	429a      	cmp	r2, r3
 8010922:	d238      	bcs.n	8010996 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801092a:	2301      	movs	r3, #1
 801092c:	e042      	b.n	80109b4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801092e:	89bb      	ldrh	r3, [r7, #12]
 8010930:	2b02      	cmp	r3, #2
 8010932:	d002      	beq.n	801093a <pbuf_header_impl+0xae>
 8010934:	89bb      	ldrh	r3, [r7, #12]
 8010936:	2b01      	cmp	r3, #1
 8010938:	d124      	bne.n	8010984 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801093a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801093e:	2b00      	cmp	r3, #0
 8010940:	da0d      	bge.n	801095e <pbuf_header_impl+0xd2>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	895b      	ldrh	r3, [r3, #10]
 8010946:	89fa      	ldrh	r2, [r7, #14]
 8010948:	429a      	cmp	r2, r3
 801094a:	d808      	bhi.n	801095e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	685a      	ldr	r2, [r3, #4]
 8010950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010954:	425b      	negs	r3, r3
 8010956:	441a      	add	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	605a      	str	r2, [r3, #4]
 801095c:	e011      	b.n	8010982 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801095e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010962:	2b00      	cmp	r3, #0
 8010964:	dd0b      	ble.n	801097e <pbuf_header_impl+0xf2>
 8010966:	787b      	ldrb	r3, [r7, #1]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d008      	beq.n	801097e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010974:	425b      	negs	r3, r3
 8010976:	441a      	add	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	605a      	str	r2, [r3, #4]
 801097c:	e001      	b.n	8010982 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801097e:	2301      	movs	r3, #1
 8010980:	e018      	b.n	80109b4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010982:	e008      	b.n	8010996 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010984:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <pbuf_header_impl+0x130>)
 8010986:	f240 2277 	movw	r2, #631	; 0x277
 801098a:	4910      	ldr	r1, [pc, #64]	; (80109cc <pbuf_header_impl+0x140>)
 801098c:	480d      	ldr	r0, [pc, #52]	; (80109c4 <pbuf_header_impl+0x138>)
 801098e:	f00a f839 	bl	801aa04 <iprintf>
    return 1;
 8010992:	2301      	movs	r3, #1
 8010994:	e00e      	b.n	80109b4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	895a      	ldrh	r2, [r3, #10]
 801099a:	887b      	ldrh	r3, [r7, #2]
 801099c:	4413      	add	r3, r2
 801099e:	b29a      	uxth	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	891a      	ldrh	r2, [r3, #8]
 80109a8:	887b      	ldrh	r3, [r7, #2]
 80109aa:	4413      	add	r3, r2
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80109b2:	2300      	movs	r3, #0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	0801cf84 	.word	0x0801cf84
 80109c0:	0801d1e4 	.word	0x0801d1e4
 80109c4:	0801cff8 	.word	0x0801cff8
 80109c8:	0801d1f0 	.word	0x0801d1f0
 80109cc:	0801d210 	.word	0x0801d210

080109d0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80109dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109e0:	2200      	movs	r2, #0
 80109e2:	4619      	mov	r1, r3
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7ff ff51 	bl	801088c <pbuf_header_impl>
 80109ea:	4603      	mov	r3, r0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	460b      	mov	r3, r1
 80109fe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010a00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a04:	2201      	movs	r2, #1
 8010a06:	4619      	mov	r1, r3
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ff3f 	bl	801088c <pbuf_header_impl>
 8010a0e:	4603      	mov	r3, r0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b088      	sub	sp, #32
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d10b      	bne.n	8010a3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <pbuf_free+0x22>
 8010a2c:	4b41      	ldr	r3, [pc, #260]	; (8010b34 <pbuf_free+0x11c>)
 8010a2e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010a32:	4941      	ldr	r1, [pc, #260]	; (8010b38 <pbuf_free+0x120>)
 8010a34:	4841      	ldr	r0, [pc, #260]	; (8010b3c <pbuf_free+0x124>)
 8010a36:	f009 ffe5 	bl	801aa04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	e076      	b.n	8010b2c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	7b1b      	ldrb	r3, [r3, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d012      	beq.n	8010a6c <pbuf_free+0x54>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7b1b      	ldrb	r3, [r3, #12]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d00e      	beq.n	8010a6c <pbuf_free+0x54>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	7b1b      	ldrb	r3, [r3, #12]
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d00a      	beq.n	8010a6c <pbuf_free+0x54>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	7b1b      	ldrb	r3, [r3, #12]
 8010a5a:	2b03      	cmp	r3, #3
 8010a5c:	d006      	beq.n	8010a6c <pbuf_free+0x54>
 8010a5e:	4b35      	ldr	r3, [pc, #212]	; (8010b34 <pbuf_free+0x11c>)
 8010a60:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010a64:	4936      	ldr	r1, [pc, #216]	; (8010b40 <pbuf_free+0x128>)
 8010a66:	4835      	ldr	r0, [pc, #212]	; (8010b3c <pbuf_free+0x124>)
 8010a68:	f009 ffcc 	bl	801aa04 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010a70:	e058      	b.n	8010b24 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010a72:	f009 ff5f 	bl	801a934 <sys_arch_protect>
 8010a76:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	89db      	ldrh	r3, [r3, #14]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d106      	bne.n	8010a8e <pbuf_free+0x76>
 8010a80:	4b2c      	ldr	r3, [pc, #176]	; (8010b34 <pbuf_free+0x11c>)
 8010a82:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010a86:	492f      	ldr	r1, [pc, #188]	; (8010b44 <pbuf_free+0x12c>)
 8010a88:	482c      	ldr	r0, [pc, #176]	; (8010b3c <pbuf_free+0x124>)
 8010a8a:	f009 ffbb 	bl	801aa04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	89db      	ldrh	r3, [r3, #14]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	81da      	strh	r2, [r3, #14]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	89db      	ldrh	r3, [r3, #14]
 8010a9e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010aa0:	69b8      	ldr	r0, [r7, #24]
 8010aa2:	f009 ff55 	bl	801a950 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010aa6:	8afb      	ldrh	r3, [r7, #22]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d139      	bne.n	8010b20 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	7b1b      	ldrb	r3, [r3, #12]
 8010ab6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	7b5b      	ldrb	r3, [r3, #13]
 8010abc:	f003 0302 	and.w	r3, r3, #2
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d011      	beq.n	8010ae8 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d106      	bne.n	8010ade <pbuf_free+0xc6>
 8010ad0:	4b18      	ldr	r3, [pc, #96]	; (8010b34 <pbuf_free+0x11c>)
 8010ad2:	f240 22f9 	movw	r2, #761	; 0x2f9
 8010ad6:	491c      	ldr	r1, [pc, #112]	; (8010b48 <pbuf_free+0x130>)
 8010ad8:	4818      	ldr	r0, [pc, #96]	; (8010b3c <pbuf_free+0x124>)
 8010ada:	f009 ff93 	bl	801aa04 <iprintf>
        pc->custom_free_function(p);
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	691b      	ldr	r3, [r3, #16]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	4798      	blx	r3
 8010ae6:	e015      	b.n	8010b14 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010ae8:	89fb      	ldrh	r3, [r7, #14]
 8010aea:	2b03      	cmp	r3, #3
 8010aec:	d104      	bne.n	8010af8 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	200c      	movs	r0, #12
 8010af2:	f7ff f99b 	bl	800fe2c <memp_free>
 8010af6:	e00d      	b.n	8010b14 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010af8:	89fb      	ldrh	r3, [r7, #14]
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d002      	beq.n	8010b04 <pbuf_free+0xec>
 8010afe:	89fb      	ldrh	r3, [r7, #14]
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d104      	bne.n	8010b0e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010b04:	6879      	ldr	r1, [r7, #4]
 8010b06:	200b      	movs	r0, #11
 8010b08:	f7ff f990 	bl	800fe2c <memp_free>
 8010b0c:	e002      	b.n	8010b14 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f7fe fe2c 	bl	800f76c <mem_free>
        }
      }
      count++;
 8010b14:	7ffb      	ldrb	r3, [r7, #31]
 8010b16:	3301      	adds	r3, #1
 8010b18:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	607b      	str	r3, [r7, #4]
 8010b1e:	e001      	b.n	8010b24 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010b20:	2300      	movs	r3, #0
 8010b22:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d1a3      	bne.n	8010a72 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3720      	adds	r7, #32
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	0801cf84 	.word	0x0801cf84
 8010b38:	0801d1e4 	.word	0x0801d1e4
 8010b3c:	0801cff8 	.word	0x0801cff8
 8010b40:	0801d220 	.word	0x0801d220
 8010b44:	0801d238 	.word	0x0801d238
 8010b48:	0801d250 	.word	0x0801d250

08010b4c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010b54:	2300      	movs	r3, #0
 8010b56:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010b58:	e005      	b.n	8010b66 <pbuf_clen+0x1a>
    ++len;
 8010b5a:	89fb      	ldrh	r3, [r7, #14]
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1f6      	bne.n	8010b5a <pbuf_clen+0xe>
  }
  return len;
 8010b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3714      	adds	r7, #20
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
	...

08010b7c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d016      	beq.n	8010bb8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010b8a:	f009 fed3 	bl	801a934 <sys_arch_protect>
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	89db      	ldrh	r3, [r3, #14]
 8010b94:	3301      	adds	r3, #1
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	81da      	strh	r2, [r3, #14]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f009 fed7 	bl	801a950 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	89db      	ldrh	r3, [r3, #14]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d106      	bne.n	8010bb8 <pbuf_ref+0x3c>
 8010baa:	4b05      	ldr	r3, [pc, #20]	; (8010bc0 <pbuf_ref+0x44>)
 8010bac:	f240 3239 	movw	r2, #825	; 0x339
 8010bb0:	4904      	ldr	r1, [pc, #16]	; (8010bc4 <pbuf_ref+0x48>)
 8010bb2:	4805      	ldr	r0, [pc, #20]	; (8010bc8 <pbuf_ref+0x4c>)
 8010bb4:	f009 ff26 	bl	801aa04 <iprintf>
  }
}
 8010bb8:	bf00      	nop
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}
 8010bc0:	0801cf84 	.word	0x0801cf84
 8010bc4:	0801d274 	.word	0x0801d274
 8010bc8:	0801cff8 	.word	0x0801cff8

08010bcc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <pbuf_cat+0x16>
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d107      	bne.n	8010bf2 <pbuf_cat+0x26>
 8010be2:	4b20      	ldr	r3, [pc, #128]	; (8010c64 <pbuf_cat+0x98>)
 8010be4:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010be8:	491f      	ldr	r1, [pc, #124]	; (8010c68 <pbuf_cat+0x9c>)
 8010bea:	4820      	ldr	r0, [pc, #128]	; (8010c6c <pbuf_cat+0xa0>)
 8010bec:	f009 ff0a 	bl	801aa04 <iprintf>
 8010bf0:	e034      	b.n	8010c5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	60fb      	str	r3, [r7, #12]
 8010bf6:	e00a      	b.n	8010c0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	891a      	ldrh	r2, [r3, #8]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	891b      	ldrh	r3, [r3, #8]
 8010c00:	4413      	add	r3, r2
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1f0      	bne.n	8010bf8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	891a      	ldrh	r2, [r3, #8]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	895b      	ldrh	r3, [r3, #10]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d006      	beq.n	8010c30 <pbuf_cat+0x64>
 8010c22:	4b10      	ldr	r3, [pc, #64]	; (8010c64 <pbuf_cat+0x98>)
 8010c24:	f240 3255 	movw	r2, #853	; 0x355
 8010c28:	4911      	ldr	r1, [pc, #68]	; (8010c70 <pbuf_cat+0xa4>)
 8010c2a:	4810      	ldr	r0, [pc, #64]	; (8010c6c <pbuf_cat+0xa0>)
 8010c2c:	f009 feea 	bl	801aa04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d006      	beq.n	8010c46 <pbuf_cat+0x7a>
 8010c38:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <pbuf_cat+0x98>)
 8010c3a:	f240 3256 	movw	r2, #854	; 0x356
 8010c3e:	490d      	ldr	r1, [pc, #52]	; (8010c74 <pbuf_cat+0xa8>)
 8010c40:	480a      	ldr	r0, [pc, #40]	; (8010c6c <pbuf_cat+0xa0>)
 8010c42:	f009 fedf 	bl	801aa04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	891a      	ldrh	r2, [r3, #8]
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	891b      	ldrh	r3, [r3, #8]
 8010c4e:	4413      	add	r3, r2
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	683a      	ldr	r2, [r7, #0]
 8010c5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	0801cf84 	.word	0x0801cf84
 8010c68:	0801d288 	.word	0x0801d288
 8010c6c:	0801cff8 	.word	0x0801cff8
 8010c70:	0801d2c0 	.word	0x0801d2c0
 8010c74:	0801d2f0 	.word	0x0801d2f0

08010c78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff ffa1 	bl	8010bcc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010c8a:	6838      	ldr	r0, [r7, #0]
 8010c8c:	f7ff ff76 	bl	8010b7c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	81fb      	strh	r3, [r7, #14]
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d008      	beq.n	8010cc2 <pbuf_copy+0x2a>
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d005      	beq.n	8010cc2 <pbuf_copy+0x2a>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	891a      	ldrh	r2, [r3, #8]
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	891b      	ldrh	r3, [r3, #8]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d209      	bcs.n	8010cd6 <pbuf_copy+0x3e>
 8010cc2:	4b54      	ldr	r3, [pc, #336]	; (8010e14 <pbuf_copy+0x17c>)
 8010cc4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8010cc8:	4953      	ldr	r1, [pc, #332]	; (8010e18 <pbuf_copy+0x180>)
 8010cca:	4854      	ldr	r0, [pc, #336]	; (8010e1c <pbuf_copy+0x184>)
 8010ccc:	f009 fe9a 	bl	801aa04 <iprintf>
 8010cd0:	f06f 030f 	mvn.w	r3, #15
 8010cd4:	e099      	b.n	8010e0a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	895b      	ldrh	r3, [r3, #10]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	89fb      	ldrh	r3, [r7, #14]
 8010cde:	1ad2      	subs	r2, r2, r3
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	895b      	ldrh	r3, [r3, #10]
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	89bb      	ldrh	r3, [r7, #12]
 8010ce8:	1acb      	subs	r3, r1, r3
 8010cea:	429a      	cmp	r2, r3
 8010cec:	db05      	blt.n	8010cfa <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	895a      	ldrh	r2, [r3, #10]
 8010cf2:	89bb      	ldrh	r3, [r7, #12]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	817b      	strh	r3, [r7, #10]
 8010cf8:	e004      	b.n	8010d04 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	895a      	ldrh	r2, [r3, #10]
 8010cfe:	89fb      	ldrh	r3, [r7, #14]
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	89fb      	ldrh	r3, [r7, #14]
 8010d0a:	18d0      	adds	r0, r2, r3
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	89bb      	ldrh	r3, [r7, #12]
 8010d12:	4413      	add	r3, r2
 8010d14:	897a      	ldrh	r2, [r7, #10]
 8010d16:	4619      	mov	r1, r3
 8010d18:	f009 fe5e 	bl	801a9d8 <memcpy>
    offset_to += len;
 8010d1c:	89fa      	ldrh	r2, [r7, #14]
 8010d1e:	897b      	ldrh	r3, [r7, #10]
 8010d20:	4413      	add	r3, r2
 8010d22:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010d24:	89ba      	ldrh	r2, [r7, #12]
 8010d26:	897b      	ldrh	r3, [r7, #10]
 8010d28:	4413      	add	r3, r2
 8010d2a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	895b      	ldrh	r3, [r3, #10]
 8010d30:	89fa      	ldrh	r2, [r7, #14]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d906      	bls.n	8010d44 <pbuf_copy+0xac>
 8010d36:	4b37      	ldr	r3, [pc, #220]	; (8010e14 <pbuf_copy+0x17c>)
 8010d38:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010d3c:	4938      	ldr	r1, [pc, #224]	; (8010e20 <pbuf_copy+0x188>)
 8010d3e:	4837      	ldr	r0, [pc, #220]	; (8010e1c <pbuf_copy+0x184>)
 8010d40:	f009 fe60 	bl	801aa04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	895b      	ldrh	r3, [r3, #10]
 8010d48:	89ba      	ldrh	r2, [r7, #12]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d906      	bls.n	8010d5c <pbuf_copy+0xc4>
 8010d4e:	4b31      	ldr	r3, [pc, #196]	; (8010e14 <pbuf_copy+0x17c>)
 8010d50:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010d54:	4933      	ldr	r1, [pc, #204]	; (8010e24 <pbuf_copy+0x18c>)
 8010d56:	4831      	ldr	r0, [pc, #196]	; (8010e1c <pbuf_copy+0x184>)
 8010d58:	f009 fe54 	bl	801aa04 <iprintf>
    if (offset_from >= p_from->len) {
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	895b      	ldrh	r3, [r3, #10]
 8010d60:	89ba      	ldrh	r2, [r7, #12]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d304      	bcc.n	8010d70 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	895b      	ldrh	r3, [r3, #10]
 8010d74:	89fa      	ldrh	r2, [r7, #14]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d114      	bne.n	8010da4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10c      	bne.n	8010da4 <pbuf_copy+0x10c>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d009      	beq.n	8010da4 <pbuf_copy+0x10c>
 8010d90:	4b20      	ldr	r3, [pc, #128]	; (8010e14 <pbuf_copy+0x17c>)
 8010d92:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d96:	4924      	ldr	r1, [pc, #144]	; (8010e28 <pbuf_copy+0x190>)
 8010d98:	4820      	ldr	r0, [pc, #128]	; (8010e1c <pbuf_copy+0x184>)
 8010d9a:	f009 fe33 	bl	801aa04 <iprintf>
 8010d9e:	f06f 030f 	mvn.w	r3, #15
 8010da2:	e032      	b.n	8010e0a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d013      	beq.n	8010dd2 <pbuf_copy+0x13a>
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	895a      	ldrh	r2, [r3, #10]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	891b      	ldrh	r3, [r3, #8]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d10d      	bne.n	8010dd2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d009      	beq.n	8010dd2 <pbuf_copy+0x13a>
 8010dbe:	4b15      	ldr	r3, [pc, #84]	; (8010e14 <pbuf_copy+0x17c>)
 8010dc0:	f240 32dd 	movw	r2, #989	; 0x3dd
 8010dc4:	4919      	ldr	r1, [pc, #100]	; (8010e2c <pbuf_copy+0x194>)
 8010dc6:	4815      	ldr	r0, [pc, #84]	; (8010e1c <pbuf_copy+0x184>)
 8010dc8:	f009 fe1c 	bl	801aa04 <iprintf>
 8010dcc:	f06f 0305 	mvn.w	r3, #5
 8010dd0:	e01b      	b.n	8010e0a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d013      	beq.n	8010e00 <pbuf_copy+0x168>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	895a      	ldrh	r2, [r3, #10]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	891b      	ldrh	r3, [r3, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d10d      	bne.n	8010e00 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d009      	beq.n	8010e00 <pbuf_copy+0x168>
 8010dec:	4b09      	ldr	r3, [pc, #36]	; (8010e14 <pbuf_copy+0x17c>)
 8010dee:	f240 32e2 	movw	r2, #994	; 0x3e2
 8010df2:	490e      	ldr	r1, [pc, #56]	; (8010e2c <pbuf_copy+0x194>)
 8010df4:	4809      	ldr	r0, [pc, #36]	; (8010e1c <pbuf_copy+0x184>)
 8010df6:	f009 fe05 	bl	801aa04 <iprintf>
 8010dfa:	f06f 0305 	mvn.w	r3, #5
 8010dfe:	e004      	b.n	8010e0a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f af67 	bne.w	8010cd6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	0801cf84 	.word	0x0801cf84
 8010e18:	0801d33c 	.word	0x0801d33c
 8010e1c:	0801cff8 	.word	0x0801cff8
 8010e20:	0801d36c 	.word	0x0801d36c
 8010e24:	0801d384 	.word	0x0801d384
 8010e28:	0801d3a0 	.word	0x0801d3a0
 8010e2c:	0801d3b0 	.word	0x0801d3b0

08010e30 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b088      	sub	sp, #32
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	460b      	mov	r3, r1
 8010e40:	80fb      	strh	r3, [r7, #6]
 8010e42:	4613      	mov	r3, r2
 8010e44:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d108      	bne.n	8010e62 <pbuf_copy_partial+0x32>
 8010e50:	4b30      	ldr	r3, [pc, #192]	; (8010f14 <pbuf_copy_partial+0xe4>)
 8010e52:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010e56:	4930      	ldr	r1, [pc, #192]	; (8010f18 <pbuf_copy_partial+0xe8>)
 8010e58:	4830      	ldr	r0, [pc, #192]	; (8010f1c <pbuf_copy_partial+0xec>)
 8010e5a:	f009 fdd3 	bl	801aa04 <iprintf>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	e054      	b.n	8010f0c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d108      	bne.n	8010e7a <pbuf_copy_partial+0x4a>
 8010e68:	4b2a      	ldr	r3, [pc, #168]	; (8010f14 <pbuf_copy_partial+0xe4>)
 8010e6a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010e6e:	492c      	ldr	r1, [pc, #176]	; (8010f20 <pbuf_copy_partial+0xf0>)
 8010e70:	482a      	ldr	r0, [pc, #168]	; (8010f1c <pbuf_copy_partial+0xec>)
 8010e72:	f009 fdc7 	bl	801aa04 <iprintf>
 8010e76:	2300      	movs	r3, #0
 8010e78:	e048      	b.n	8010f0c <pbuf_copy_partial+0xdc>

  left = 0;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <pbuf_copy_partial+0x5a>
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d101      	bne.n	8010e8e <pbuf_copy_partial+0x5e>
    return 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e03e      	b.n	8010f0c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	61fb      	str	r3, [r7, #28]
 8010e92:	e034      	b.n	8010efe <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010e94:	88bb      	ldrh	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00a      	beq.n	8010eb0 <pbuf_copy_partial+0x80>
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	895b      	ldrh	r3, [r3, #10]
 8010e9e:	88ba      	ldrh	r2, [r7, #4]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d305      	bcc.n	8010eb0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	895b      	ldrh	r3, [r3, #10]
 8010ea8:	88ba      	ldrh	r2, [r7, #4]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	80bb      	strh	r3, [r7, #4]
 8010eae:	e023      	b.n	8010ef8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	895a      	ldrh	r2, [r3, #10]
 8010eb4:	88bb      	ldrh	r3, [r7, #4]
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010eba:	8b3a      	ldrh	r2, [r7, #24]
 8010ebc:	88fb      	ldrh	r3, [r7, #6]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d901      	bls.n	8010ec6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010ec2:	88fb      	ldrh	r3, [r7, #6]
 8010ec4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8010ec6:	8b7b      	ldrh	r3, [r7, #26]
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	18d0      	adds	r0, r2, r3
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	685a      	ldr	r2, [r3, #4]
 8010ed0:	88bb      	ldrh	r3, [r7, #4]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	8b3a      	ldrh	r2, [r7, #24]
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	f009 fd7e 	bl	801a9d8 <memcpy>
      copied_total += buf_copy_len;
 8010edc:	8afa      	ldrh	r2, [r7, #22]
 8010ede:	8b3b      	ldrh	r3, [r7, #24]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010ee4:	8b7a      	ldrh	r2, [r7, #26]
 8010ee6:	8b3b      	ldrh	r3, [r7, #24]
 8010ee8:	4413      	add	r3, r2
 8010eea:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010eec:	88fa      	ldrh	r2, [r7, #6]
 8010eee:	8b3b      	ldrh	r3, [r7, #24]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	61fb      	str	r3, [r7, #28]
 8010efe:	88fb      	ldrh	r3, [r7, #6]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <pbuf_copy_partial+0xda>
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1c4      	bne.n	8010e94 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8010f0a:	8afb      	ldrh	r3, [r7, #22]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3720      	adds	r7, #32
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	0801cf84 	.word	0x0801cf84
 8010f18:	0801d3dc 	.word	0x0801d3dc
 8010f1c:	0801cff8 	.word	0x0801cff8
 8010f20:	0801d3fc 	.word	0x0801d3fc

08010f24 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010f24:	b480      	push	{r7}
 8010f26:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010f28:	bf00      	nop
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
	...

08010f34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010f38:	f000 ffc2 	bl	8011ec0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010f3c:	4b07      	ldr	r3, [pc, #28]	; (8010f5c <tcp_tmr+0x28>)
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	3301      	adds	r3, #1
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <tcp_tmr+0x28>)
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	4b04      	ldr	r3, [pc, #16]	; (8010f5c <tcp_tmr+0x28>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010f54:	f000 fcf2 	bl	801193c <tcp_slowtmr>
  }
}
 8010f58:	bf00      	nop
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	240076d9 	.word	0x240076d9

08010f60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	60fb      	str	r3, [r7, #12]
 8010f6e:	e00a      	b.n	8010f86 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f74:	683a      	ldr	r2, [r7, #0]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d102      	bne.n	8010f80 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	60fb      	str	r3, [r7, #12]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1f1      	bne.n	8010f70 <tcp_remove_listener+0x10>
      }
   }
}
 8010f8c:	bf00      	nop
 8010f8e:	bf00      	nop
 8010f90:	3714      	adds	r7, #20
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
	...

08010f9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d105      	bne.n	8010fb6 <tcp_listen_closed+0x1a>
 8010faa:	4b13      	ldr	r3, [pc, #76]	; (8010ff8 <tcp_listen_closed+0x5c>)
 8010fac:	22c0      	movs	r2, #192	; 0xc0
 8010fae:	4913      	ldr	r1, [pc, #76]	; (8010ffc <tcp_listen_closed+0x60>)
 8010fb0:	4813      	ldr	r0, [pc, #76]	; (8011000 <tcp_listen_closed+0x64>)
 8010fb2:	f009 fd27 	bl	801aa04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	7d1b      	ldrb	r3, [r3, #20]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d005      	beq.n	8010fca <tcp_listen_closed+0x2e>
 8010fbe:	4b0e      	ldr	r3, [pc, #56]	; (8010ff8 <tcp_listen_closed+0x5c>)
 8010fc0:	22c1      	movs	r2, #193	; 0xc1
 8010fc2:	4910      	ldr	r1, [pc, #64]	; (8011004 <tcp_listen_closed+0x68>)
 8010fc4:	480e      	ldr	r0, [pc, #56]	; (8011000 <tcp_listen_closed+0x64>)
 8010fc6:	f009 fd1d 	bl	801aa04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010fca:	2301      	movs	r3, #1
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	e00b      	b.n	8010fe8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8010fd0:	4a0d      	ldr	r2, [pc, #52]	; (8011008 <tcp_listen_closed+0x6c>)
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6879      	ldr	r1, [r7, #4]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ffbf 	bl	8010f60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d9f0      	bls.n	8010fd0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010fee:	bf00      	nop
 8010ff0:	bf00      	nop
 8010ff2:	3710      	adds	r7, #16
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	0801d530 	.word	0x0801d530
 8010ffc:	0801d588 	.word	0x0801d588
 8011000:	0801d594 	.word	0x0801d594
 8011004:	0801d5bc 	.word	0x0801d5bc
 8011008:	0801f1e0 	.word	0x0801f1e0

0801100c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801100c:	b5b0      	push	{r4, r5, r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af02      	add	r7, sp, #8
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	460b      	mov	r3, r1
 8011016:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011018:	78fb      	ldrb	r3, [r7, #3]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d075      	beq.n	801110a <tcp_close_shutdown+0xfe>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	7d1b      	ldrb	r3, [r3, #20]
 8011022:	2b04      	cmp	r3, #4
 8011024:	d003      	beq.n	801102e <tcp_close_shutdown+0x22>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	7d1b      	ldrb	r3, [r3, #20]
 801102a:	2b07      	cmp	r3, #7
 801102c:	d16d      	bne.n	801110a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011032:	2b00      	cmp	r3, #0
 8011034:	d104      	bne.n	8011040 <tcp_close_shutdown+0x34>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801103a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801103e:	d064      	beq.n	801110a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7e9b      	ldrb	r3, [r3, #26]
 8011044:	f003 0310 	and.w	r3, r3, #16
 8011048:	2b00      	cmp	r3, #0
 801104a:	d106      	bne.n	801105a <tcp_close_shutdown+0x4e>
 801104c:	4b5b      	ldr	r3, [pc, #364]	; (80111bc <tcp_close_shutdown+0x1b0>)
 801104e:	f240 120f 	movw	r2, #271	; 0x10f
 8011052:	495b      	ldr	r1, [pc, #364]	; (80111c0 <tcp_close_shutdown+0x1b4>)
 8011054:	485b      	ldr	r0, [pc, #364]	; (80111c4 <tcp_close_shutdown+0x1b8>)
 8011056:	f009 fcd5 	bl	801aa04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011062:	687c      	ldr	r4, [r7, #4]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	1d1d      	adds	r5, r3, #4
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	8adb      	ldrh	r3, [r3, #22]
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	8b12      	ldrh	r2, [r2, #24]
 8011070:	9201      	str	r2, [sp, #4]
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	462b      	mov	r3, r5
 8011076:	4622      	mov	r2, r4
 8011078:	f004 ff1c 	bl	8015eb4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f001 fa55 	bl	801252c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011082:	4b51      	ldr	r3, [pc, #324]	; (80111c8 <tcp_close_shutdown+0x1bc>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	429a      	cmp	r2, r3
 801108a:	d105      	bne.n	8011098 <tcp_close_shutdown+0x8c>
 801108c:	4b4e      	ldr	r3, [pc, #312]	; (80111c8 <tcp_close_shutdown+0x1bc>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	4a4d      	ldr	r2, [pc, #308]	; (80111c8 <tcp_close_shutdown+0x1bc>)
 8011094:	6013      	str	r3, [r2, #0]
 8011096:	e013      	b.n	80110c0 <tcp_close_shutdown+0xb4>
 8011098:	4b4b      	ldr	r3, [pc, #300]	; (80111c8 <tcp_close_shutdown+0x1bc>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60fb      	str	r3, [r7, #12]
 801109e:	e00c      	b.n	80110ba <tcp_close_shutdown+0xae>
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d104      	bne.n	80110b4 <tcp_close_shutdown+0xa8>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	68da      	ldr	r2, [r3, #12]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	60da      	str	r2, [r3, #12]
 80110b2:	e005      	b.n	80110c0 <tcp_close_shutdown+0xb4>
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	60fb      	str	r3, [r7, #12]
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d1ef      	bne.n	80110a0 <tcp_close_shutdown+0x94>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	60da      	str	r2, [r3, #12]
 80110c6:	4b41      	ldr	r3, [pc, #260]	; (80111cc <tcp_close_shutdown+0x1c0>)
 80110c8:	2201      	movs	r2, #1
 80110ca:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	7d1b      	ldrb	r3, [r3, #20]
 80110d0:	2b04      	cmp	r3, #4
 80110d2:	d10c      	bne.n	80110ee <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	220a      	movs	r2, #10
 80110d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80110da:	4b3d      	ldr	r3, [pc, #244]	; (80111d0 <tcp_close_shutdown+0x1c4>)
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	60da      	str	r2, [r3, #12]
 80110e2:	4a3b      	ldr	r2, [pc, #236]	; (80111d0 <tcp_close_shutdown+0x1c4>)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6013      	str	r3, [r2, #0]
 80110e8:	f005 f92c 	bl	8016344 <tcp_timer_needed>
 80110ec:	e00b      	b.n	8011106 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80110ee:	4b39      	ldr	r3, [pc, #228]	; (80111d4 <tcp_close_shutdown+0x1c8>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d102      	bne.n	80110fe <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80110f8:	f003 fd7c 	bl	8014bf4 <tcp_trigger_input_pcb_close>
 80110fc:	e003      	b.n	8011106 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80110fe:	6879      	ldr	r1, [r7, #4]
 8011100:	2001      	movs	r0, #1
 8011102:	f7fe fe93 	bl	800fe2c <memp_free>
        }
      }
      return ERR_OK;
 8011106:	2300      	movs	r3, #0
 8011108:	e053      	b.n	80111b2 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	7d1b      	ldrb	r3, [r3, #20]
 801110e:	2b02      	cmp	r3, #2
 8011110:	d03d      	beq.n	801118e <tcp_close_shutdown+0x182>
 8011112:	2b02      	cmp	r3, #2
 8011114:	dc47      	bgt.n	80111a6 <tcp_close_shutdown+0x19a>
 8011116:	2b00      	cmp	r3, #0
 8011118:	d002      	beq.n	8011120 <tcp_close_shutdown+0x114>
 801111a:	2b01      	cmp	r3, #1
 801111c:	d02b      	beq.n	8011176 <tcp_close_shutdown+0x16a>
 801111e:	e042      	b.n	80111a6 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	8adb      	ldrh	r3, [r3, #22]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d021      	beq.n	801116c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011128:	4b2b      	ldr	r3, [pc, #172]	; (80111d8 <tcp_close_shutdown+0x1cc>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	429a      	cmp	r2, r3
 8011130:	d105      	bne.n	801113e <tcp_close_shutdown+0x132>
 8011132:	4b29      	ldr	r3, [pc, #164]	; (80111d8 <tcp_close_shutdown+0x1cc>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	4a27      	ldr	r2, [pc, #156]	; (80111d8 <tcp_close_shutdown+0x1cc>)
 801113a:	6013      	str	r3, [r2, #0]
 801113c:	e013      	b.n	8011166 <tcp_close_shutdown+0x15a>
 801113e:	4b26      	ldr	r3, [pc, #152]	; (80111d8 <tcp_close_shutdown+0x1cc>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60bb      	str	r3, [r7, #8]
 8011144:	e00c      	b.n	8011160 <tcp_close_shutdown+0x154>
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	429a      	cmp	r2, r3
 801114e:	d104      	bne.n	801115a <tcp_close_shutdown+0x14e>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68da      	ldr	r2, [r3, #12]
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	60da      	str	r2, [r3, #12]
 8011158:	e005      	b.n	8011166 <tcp_close_shutdown+0x15a>
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	60bb      	str	r3, [r7, #8]
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1ef      	bne.n	8011146 <tcp_close_shutdown+0x13a>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2200      	movs	r2, #0
 801116a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801116c:	6879      	ldr	r1, [r7, #4]
 801116e:	2001      	movs	r0, #1
 8011170:	f7fe fe5c 	bl	800fe2c <memp_free>
    break;
 8011174:	e01c      	b.n	80111b0 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7ff ff10 	bl	8010f9c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801117c:	6879      	ldr	r1, [r7, #4]
 801117e:	4817      	ldr	r0, [pc, #92]	; (80111dc <tcp_close_shutdown+0x1d0>)
 8011180:	f001 fa16 	bl	80125b0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011184:	6879      	ldr	r1, [r7, #4]
 8011186:	2002      	movs	r0, #2
 8011188:	f7fe fe50 	bl	800fe2c <memp_free>
    break;
 801118c:	e010      	b.n	80111b0 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801118e:	6879      	ldr	r1, [r7, #4]
 8011190:	480d      	ldr	r0, [pc, #52]	; (80111c8 <tcp_close_shutdown+0x1bc>)
 8011192:	f001 fa0d 	bl	80125b0 <tcp_pcb_remove>
 8011196:	4b0d      	ldr	r3, [pc, #52]	; (80111cc <tcp_close_shutdown+0x1c0>)
 8011198:	2201      	movs	r2, #1
 801119a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801119c:	6879      	ldr	r1, [r7, #4]
 801119e:	2001      	movs	r0, #1
 80111a0:	f7fe fe44 	bl	800fe2c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80111a4:	e004      	b.n	80111b0 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 f81a 	bl	80111e0 <tcp_close_shutdown_fin>
 80111ac:	4603      	mov	r3, r0
 80111ae:	e000      	b.n	80111b2 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bdb0      	pop	{r4, r5, r7, pc}
 80111ba:	bf00      	nop
 80111bc:	0801d530 	.word	0x0801d530
 80111c0:	0801d5d4 	.word	0x0801d5d4
 80111c4:	0801d594 	.word	0x0801d594
 80111c8:	240076d0 	.word	0x240076d0
 80111cc:	240076d8 	.word	0x240076d8
 80111d0:	240076d4 	.word	0x240076d4
 80111d4:	24007710 	.word	0x24007710
 80111d8:	240076c8 	.word	0x240076c8
 80111dc:	240076cc 	.word	0x240076cc

080111e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d106      	bne.n	80111fc <tcp_close_shutdown_fin+0x1c>
 80111ee:	4b2e      	ldr	r3, [pc, #184]	; (80112a8 <tcp_close_shutdown_fin+0xc8>)
 80111f0:	f240 124d 	movw	r2, #333	; 0x14d
 80111f4:	492d      	ldr	r1, [pc, #180]	; (80112ac <tcp_close_shutdown_fin+0xcc>)
 80111f6:	482e      	ldr	r0, [pc, #184]	; (80112b0 <tcp_close_shutdown_fin+0xd0>)
 80111f8:	f009 fc04 	bl	801aa04 <iprintf>

  switch (pcb->state) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
 8011200:	2b07      	cmp	r3, #7
 8011202:	d020      	beq.n	8011246 <tcp_close_shutdown_fin+0x66>
 8011204:	2b07      	cmp	r3, #7
 8011206:	dc2b      	bgt.n	8011260 <tcp_close_shutdown_fin+0x80>
 8011208:	2b03      	cmp	r3, #3
 801120a:	d002      	beq.n	8011212 <tcp_close_shutdown_fin+0x32>
 801120c:	2b04      	cmp	r3, #4
 801120e:	d00d      	beq.n	801122c <tcp_close_shutdown_fin+0x4c>
 8011210:	e026      	b.n	8011260 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f003 fd78 	bl	8014d08 <tcp_send_fin>
 8011218:	4603      	mov	r3, r0
 801121a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d11f      	bne.n	8011264 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2205      	movs	r2, #5
 8011228:	751a      	strb	r2, [r3, #20]
    }
    break;
 801122a:	e01b      	b.n	8011264 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f003 fd6b 	bl	8014d08 <tcp_send_fin>
 8011232:	4603      	mov	r3, r0
 8011234:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d114      	bne.n	8011268 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2205      	movs	r2, #5
 8011242:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011244:	e010      	b.n	8011268 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f003 fd5e 	bl	8014d08 <tcp_send_fin>
 801124c:	4603      	mov	r3, r0
 801124e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d109      	bne.n	801126c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2209      	movs	r2, #9
 801125c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801125e:	e005      	b.n	801126c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	e01c      	b.n	801129e <tcp_close_shutdown_fin+0xbe>
    break;
 8011264:	bf00      	nop
 8011266:	e002      	b.n	801126e <tcp_close_shutdown_fin+0x8e>
    break;
 8011268:	bf00      	nop
 801126a:	e000      	b.n	801126e <tcp_close_shutdown_fin+0x8e>
    break;
 801126c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d103      	bne.n	801127e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f004 fb98 	bl	80159ac <tcp_output>
 801127c:	e00d      	b.n	801129a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011286:	d108      	bne.n	801129a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7e9b      	ldrb	r3, [r3, #26]
 801128c:	f043 0308 	orr.w	r3, r3, #8
 8011290:	b2da      	uxtb	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	e001      	b.n	801129e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	0801d530 	.word	0x0801d530
 80112ac:	0801d588 	.word	0x0801d588
 80112b0:	0801d594 	.word	0x0801d594

080112b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	7d1b      	ldrb	r3, [r3, #20]
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d006      	beq.n	80112d2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	7e9b      	ldrb	r3, [r3, #26]
 80112c8:	f043 0310 	orr.w	r3, r3, #16
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80112d2:	2101      	movs	r1, #1
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff fe99 	bl	801100c <tcp_close_shutdown>
 80112da:	4603      	mov	r3, r0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	7d1b      	ldrb	r3, [r3, #20]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d102      	bne.n	80112fe <tcp_shutdown+0x1a>
    return ERR_CONN;
 80112f8:	f06f 030a 	mvn.w	r3, #10
 80112fc:	e036      	b.n	801136c <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d01b      	beq.n	801133c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	7e9b      	ldrb	r3, [r3, #26]
 8011308:	f043 0310 	orr.w	r3, r3, #16
 801130c:	b2da      	uxtb	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d005      	beq.n	8011324 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011318:	2101      	movs	r1, #1
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	f7ff fe76 	bl	801100c <tcp_close_shutdown>
 8011320:	4603      	mov	r3, r0
 8011322:	e023      	b.n	801136c <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011328:	2b00      	cmp	r3, #0
 801132a:	d007      	beq.n	801133c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff fb71 	bl	8010a18 <pbuf_free>
      pcb->refused_data = NULL;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2200      	movs	r2, #0
 801133a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d013      	beq.n	801136a <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	7d1b      	ldrb	r3, [r3, #20]
 8011346:	2b04      	cmp	r3, #4
 8011348:	dc02      	bgt.n	8011350 <tcp_shutdown+0x6c>
 801134a:	2b03      	cmp	r3, #3
 801134c:	da02      	bge.n	8011354 <tcp_shutdown+0x70>
 801134e:	e009      	b.n	8011364 <tcp_shutdown+0x80>
 8011350:	2b07      	cmp	r3, #7
 8011352:	d107      	bne.n	8011364 <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	4619      	mov	r1, r3
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f7ff fe56 	bl	801100c <tcp_close_shutdown>
 8011360:	4603      	mov	r3, r0
 8011362:	e003      	b.n	801136c <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 8011364:	f06f 030a 	mvn.w	r3, #10
 8011368:	e000      	b.n	801136c <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08c      	sub	sp, #48	; 0x30
 8011378:	af02      	add	r7, sp, #8
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	7d1b      	ldrb	r3, [r3, #20]
 8011382:	2b01      	cmp	r3, #1
 8011384:	d106      	bne.n	8011394 <tcp_abandon+0x20>
 8011386:	4b4d      	ldr	r3, [pc, #308]	; (80114bc <tcp_abandon+0x148>)
 8011388:	f240 12df 	movw	r2, #479	; 0x1df
 801138c:	494c      	ldr	r1, [pc, #304]	; (80114c0 <tcp_abandon+0x14c>)
 801138e:	484d      	ldr	r0, [pc, #308]	; (80114c4 <tcp_abandon+0x150>)
 8011390:	f009 fb38 	bl	801aa04 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	7d1b      	ldrb	r3, [r3, #20]
 8011398:	2b0a      	cmp	r3, #10
 801139a:	d108      	bne.n	80113ae <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801139c:	6879      	ldr	r1, [r7, #4]
 801139e:	484a      	ldr	r0, [pc, #296]	; (80114c8 <tcp_abandon+0x154>)
 80113a0:	f001 f906 	bl	80125b0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80113a4:	6879      	ldr	r1, [r7, #4]
 80113a6:	2001      	movs	r0, #1
 80113a8:	f7fe fd40 	bl	800fe2c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80113ac:	e081      	b.n	80114b2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80113b2:	2300      	movs	r3, #0
 80113b4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113c8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	7d1b      	ldrb	r3, [r3, #20]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d126      	bne.n	8011426 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	8adb      	ldrh	r3, [r3, #22]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d02e      	beq.n	801143e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80113e0:	4b3a      	ldr	r3, [pc, #232]	; (80114cc <tcp_abandon+0x158>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d105      	bne.n	80113f6 <tcp_abandon+0x82>
 80113ea:	4b38      	ldr	r3, [pc, #224]	; (80114cc <tcp_abandon+0x158>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	4a36      	ldr	r2, [pc, #216]	; (80114cc <tcp_abandon+0x158>)
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	e013      	b.n	801141e <tcp_abandon+0xaa>
 80113f6:	4b35      	ldr	r3, [pc, #212]	; (80114cc <tcp_abandon+0x158>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	61fb      	str	r3, [r7, #28]
 80113fc:	e00c      	b.n	8011418 <tcp_abandon+0xa4>
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	429a      	cmp	r2, r3
 8011406:	d104      	bne.n	8011412 <tcp_abandon+0x9e>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68da      	ldr	r2, [r3, #12]
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	60da      	str	r2, [r3, #12]
 8011410:	e005      	b.n	801141e <tcp_abandon+0xaa>
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	61fb      	str	r3, [r7, #28]
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1ef      	bne.n	80113fe <tcp_abandon+0x8a>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	60da      	str	r2, [r3, #12]
 8011424:	e00b      	b.n	801143e <tcp_abandon+0xca>
      send_rst = reset;
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	8adb      	ldrh	r3, [r3, #22]
 801142e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011430:	6879      	ldr	r1, [r7, #4]
 8011432:	4827      	ldr	r0, [pc, #156]	; (80114d0 <tcp_abandon+0x15c>)
 8011434:	f001 f8bc 	bl	80125b0 <tcp_pcb_remove>
 8011438:	4b26      	ldr	r3, [pc, #152]	; (80114d4 <tcp_abandon+0x160>)
 801143a:	2201      	movs	r2, #1
 801143c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d004      	beq.n	8011450 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801144a:	4618      	mov	r0, r3
 801144c:	f000 fe05 	bl	801205a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011454:	2b00      	cmp	r3, #0
 8011456:	d004      	beq.n	8011462 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801145c:	4618      	mov	r0, r3
 801145e:	f000 fdfc 	bl	801205a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011466:	2b00      	cmp	r3, #0
 8011468:	d004      	beq.n	8011474 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801146e:	4618      	mov	r0, r3
 8011470:	f000 fdf3 	bl	801205a <tcp_segs_free>
    if (send_rst) {
 8011474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00c      	beq.n	8011494 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	1d19      	adds	r1, r3, #4
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	8b1b      	ldrh	r3, [r3, #24]
 8011484:	9301      	str	r3, [sp, #4]
 8011486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	460b      	mov	r3, r1
 801148c:	6979      	ldr	r1, [r7, #20]
 801148e:	69b8      	ldr	r0, [r7, #24]
 8011490:	f004 fd10 	bl	8015eb4 <tcp_rst>
    last_state = pcb->state;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801149a:	6879      	ldr	r1, [r7, #4]
 801149c:	2001      	movs	r0, #1
 801149e:	f7fe fcc5 	bl	800fe2c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d004      	beq.n	80114b2 <tcp_abandon+0x13e>
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	f06f 010c 	mvn.w	r1, #12
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	4798      	blx	r3
}
 80114b2:	bf00      	nop
 80114b4:	3728      	adds	r7, #40	; 0x28
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	0801d530 	.word	0x0801d530
 80114c0:	0801d5f0 	.word	0x0801d5f0
 80114c4:	0801d594 	.word	0x0801d594
 80114c8:	240076d4 	.word	0x240076d4
 80114cc:	240076c8 	.word	0x240076c8
 80114d0:	240076d0 	.word	0x240076d0
 80114d4:	240076d8 	.word	0x240076d8

080114d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80114e0:	2101      	movs	r1, #1
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff ff46 	bl	8011374 <tcp_abandon>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b088      	sub	sp, #32
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	4613      	mov	r3, r2
 80114fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80114fe:	2304      	movs	r3, #4
 8011500:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d101      	bne.n	801150c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011508:	4b3c      	ldr	r3, [pc, #240]	; (80115fc <tcp_bind+0x10c>)
 801150a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d002      	beq.n	8011518 <tcp_bind+0x28>
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d102      	bne.n	801151e <tcp_bind+0x2e>
    return ERR_VAL;
 8011518:	f06f 0305 	mvn.w	r3, #5
 801151c:	e06a      	b.n	80115f4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	7d1b      	ldrb	r3, [r3, #20]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d009      	beq.n	801153a <tcp_bind+0x4a>
 8011526:	4b36      	ldr	r3, [pc, #216]	; (8011600 <tcp_bind+0x110>)
 8011528:	f44f 7211 	mov.w	r2, #580	; 0x244
 801152c:	4935      	ldr	r1, [pc, #212]	; (8011604 <tcp_bind+0x114>)
 801152e:	4836      	ldr	r0, [pc, #216]	; (8011608 <tcp_bind+0x118>)
 8011530:	f009 fa68 	bl	801aa04 <iprintf>
 8011534:	f06f 0305 	mvn.w	r3, #5
 8011538:	e05c      	b.n	80115f4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801153a:	88fb      	ldrh	r3, [r7, #6]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d109      	bne.n	8011554 <tcp_bind+0x64>
    port = tcp_new_port();
 8011540:	f000 f9b8 	bl	80118b4 <tcp_new_port>
 8011544:	4603      	mov	r3, r0
 8011546:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011548:	88fb      	ldrh	r3, [r7, #6]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d135      	bne.n	80115ba <tcp_bind+0xca>
      return ERR_BUF;
 801154e:	f06f 0301 	mvn.w	r3, #1
 8011552:	e04f      	b.n	80115f4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011554:	2300      	movs	r3, #0
 8011556:	61fb      	str	r3, [r7, #28]
 8011558:	e02b      	b.n	80115b2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801155a:	4a2c      	ldr	r2, [pc, #176]	; (801160c <tcp_bind+0x11c>)
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	61bb      	str	r3, [r7, #24]
 8011566:	e01e      	b.n	80115a6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	8adb      	ldrh	r3, [r3, #22]
 801156c:	88fa      	ldrh	r2, [r7, #6]
 801156e:	429a      	cmp	r2, r3
 8011570:	d116      	bne.n	80115a0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011572:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011574:	2b00      	cmp	r3, #0
 8011576:	d010      	beq.n	801159a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d00c      	beq.n	801159a <tcp_bind+0xaa>
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d009      	beq.n	801159a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d005      	beq.n	801159a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011596:	429a      	cmp	r2, r3
 8011598:	d102      	bne.n	80115a0 <tcp_bind+0xb0>
              return ERR_USE;
 801159a:	f06f 0307 	mvn.w	r3, #7
 801159e:	e029      	b.n	80115f4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	61bb      	str	r3, [r7, #24]
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d1dd      	bne.n	8011568 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	3301      	adds	r3, #1
 80115b0:	61fb      	str	r3, [r7, #28]
 80115b2:	69fa      	ldr	r2, [r7, #28]
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	dbcf      	blt.n	801155a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d00c      	beq.n	80115da <tcp_bind+0xea>
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d008      	beq.n	80115da <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <tcp_bind+0xe4>
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	e000      	b.n	80115d6 <tcp_bind+0xe6>
 80115d4:	2300      	movs	r3, #0
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	88fa      	ldrh	r2, [r7, #6]
 80115de:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80115e0:	4b0b      	ldr	r3, [pc, #44]	; (8011610 <tcp_bind+0x120>)
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	60da      	str	r2, [r3, #12]
 80115e8:	4a09      	ldr	r2, [pc, #36]	; (8011610 <tcp_bind+0x120>)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	6013      	str	r3, [r2, #0]
 80115ee:	f004 fea9 	bl	8016344 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3720      	adds	r7, #32
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	0801f218 	.word	0x0801f218
 8011600:	0801d530 	.word	0x0801d530
 8011604:	0801d624 	.word	0x0801d624
 8011608:	0801d594 	.word	0x0801d594
 801160c:	0801f1e0 	.word	0x0801f1e0
 8011610:	240076c8 	.word	0x240076c8

08011614 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4613      	mov	r3, r2
 8011620:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8011622:	68b8      	ldr	r0, [r7, #8]
 8011624:	f7ff ff58 	bl	80114d8 <tcp_abort>

  return ERR_ABRT;
 8011628:	f06f 030c 	mvn.w	r3, #12
}
 801162c:	4618      	mov	r0, r3
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b088      	sub	sp, #32
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	460b      	mov	r3, r1
 801163e:	607a      	str	r2, [r7, #4]
 8011640:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011642:	2300      	movs	r3, #0
 8011644:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	7d1b      	ldrb	r3, [r3, #20]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d009      	beq.n	8011662 <tcp_listen_with_backlog_and_err+0x2e>
 801164e:	4b3f      	ldr	r3, [pc, #252]	; (801174c <tcp_listen_with_backlog_and_err+0x118>)
 8011650:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011654:	493e      	ldr	r1, [pc, #248]	; (8011750 <tcp_listen_with_backlog_and_err+0x11c>)
 8011656:	483f      	ldr	r0, [pc, #252]	; (8011754 <tcp_listen_with_backlog_and_err+0x120>)
 8011658:	f009 f9d4 	bl	801aa04 <iprintf>
 801165c:	23f1      	movs	r3, #241	; 0xf1
 801165e:	76fb      	strb	r3, [r7, #27]
 8011660:	e069      	b.n	8011736 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	7d1b      	ldrb	r3, [r3, #20]
 8011666:	2b01      	cmp	r3, #1
 8011668:	d104      	bne.n	8011674 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801166e:	23f7      	movs	r3, #247	; 0xf7
 8011670:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011672:	e060      	b.n	8011736 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011674:	2002      	movs	r0, #2
 8011676:	f7fe fb63 	bl	800fd40 <memp_malloc>
 801167a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d102      	bne.n	8011688 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8011682:	23ff      	movs	r3, #255	; 0xff
 8011684:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011686:	e056      	b.n	8011736 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	691a      	ldr	r2, [r3, #16]
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	8ada      	ldrh	r2, [r3, #22]
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	2201      	movs	r2, #1
 801169c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	7d5a      	ldrb	r2, [r3, #21]
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	7a1a      	ldrb	r2, [r3, #8]
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	7a9a      	ldrb	r2, [r3, #10]
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	7a5a      	ldrb	r2, [r3, #9]
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	8adb      	ldrh	r3, [r3, #22]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d021      	beq.n	8011712 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80116ce:	4b22      	ldr	r3, [pc, #136]	; (8011758 <tcp_listen_with_backlog_and_err+0x124>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d105      	bne.n	80116e4 <tcp_listen_with_backlog_and_err+0xb0>
 80116d8:	4b1f      	ldr	r3, [pc, #124]	; (8011758 <tcp_listen_with_backlog_and_err+0x124>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	4a1e      	ldr	r2, [pc, #120]	; (8011758 <tcp_listen_with_backlog_and_err+0x124>)
 80116e0:	6013      	str	r3, [r2, #0]
 80116e2:	e013      	b.n	801170c <tcp_listen_with_backlog_and_err+0xd8>
 80116e4:	4b1c      	ldr	r3, [pc, #112]	; (8011758 <tcp_listen_with_backlog_and_err+0x124>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	617b      	str	r3, [r7, #20]
 80116ea:	e00c      	b.n	8011706 <tcp_listen_with_backlog_and_err+0xd2>
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d104      	bne.n	8011700 <tcp_listen_with_backlog_and_err+0xcc>
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	68da      	ldr	r2, [r3, #12]
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	60da      	str	r2, [r3, #12]
 80116fe:	e005      	b.n	801170c <tcp_listen_with_backlog_and_err+0xd8>
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	617b      	str	r3, [r7, #20]
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1ef      	bne.n	80116ec <tcp_listen_with_backlog_and_err+0xb8>
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8011712:	68f9      	ldr	r1, [r7, #12]
 8011714:	2001      	movs	r0, #1
 8011716:	f7fe fb89 	bl	800fe2c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	4a0f      	ldr	r2, [pc, #60]	; (801175c <tcp_listen_with_backlog_and_err+0x128>)
 801171e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011720:	4b0f      	ldr	r3, [pc, #60]	; (8011760 <tcp_listen_with_backlog_and_err+0x12c>)
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	60da      	str	r2, [r3, #12]
 8011728:	4a0d      	ldr	r2, [pc, #52]	; (8011760 <tcp_listen_with_backlog_and_err+0x12c>)
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	6013      	str	r3, [r2, #0]
 801172e:	f004 fe09 	bl	8016344 <tcp_timer_needed>
  res = ERR_OK;
 8011732:	2300      	movs	r3, #0
 8011734:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d002      	beq.n	8011742 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	7efa      	ldrb	r2, [r7, #27]
 8011740:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011742:	69fb      	ldr	r3, [r7, #28]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3720      	adds	r7, #32
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	0801d530 	.word	0x0801d530
 8011750:	0801d64c 	.word	0x0801d64c
 8011754:	0801d594 	.word	0x0801d594
 8011758:	240076c8 	.word	0x240076c8
 801175c:	08011615 	.word	0x08011615
 8011760:	240076cc 	.word	0x240076cc

08011764 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011774:	4413      	add	r3, r2
 8011776:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011780:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011784:	bf28      	it	cs
 8011786:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801178a:	b292      	uxth	r2, r2
 801178c:	4413      	add	r3, r2
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	db08      	blt.n	80117a8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	e020      	b.n	80117ea <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	dd03      	ble.n	80117be <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80117bc:	e014      	b.n	80117e8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117d0:	d306      	bcc.n	80117e0 <tcp_update_rcv_ann_wnd+0x7c>
 80117d2:	4b08      	ldr	r3, [pc, #32]	; (80117f4 <tcp_update_rcv_ann_wnd+0x90>)
 80117d4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80117d8:	4907      	ldr	r1, [pc, #28]	; (80117f8 <tcp_update_rcv_ann_wnd+0x94>)
 80117da:	4808      	ldr	r0, [pc, #32]	; (80117fc <tcp_update_rcv_ann_wnd+0x98>)
 80117dc:	f009 f912 	bl	801aa04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80117e8:	2300      	movs	r3, #0
  }
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	0801d530 	.word	0x0801d530
 80117f8:	0801d670 	.word	0x0801d670
 80117fc:	0801d594 	.word	0x0801d594

08011800 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	460b      	mov	r3, r1
 801180a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	7d1b      	ldrb	r3, [r3, #20]
 8011810:	2b01      	cmp	r3, #1
 8011812:	d106      	bne.n	8011822 <tcp_recved+0x22>
 8011814:	4b23      	ldr	r3, [pc, #140]	; (80118a4 <tcp_recved+0xa4>)
 8011816:	f240 321f 	movw	r2, #799	; 0x31f
 801181a:	4923      	ldr	r1, [pc, #140]	; (80118a8 <tcp_recved+0xa8>)
 801181c:	4823      	ldr	r0, [pc, #140]	; (80118ac <tcp_recved+0xac>)
 801181e:	f009 f8f1 	bl	801aa04 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011826:	887b      	ldrh	r3, [r7, #2]
 8011828:	4413      	add	r3, r2
 801182a:	b29a      	uxth	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011834:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011838:	d904      	bls.n	8011844 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011840:	851a      	strh	r2, [r3, #40]	; 0x28
 8011842:	e017      	b.n	8011874 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011848:	2b00      	cmp	r3, #0
 801184a:	d113      	bne.n	8011874 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	7d1b      	ldrb	r3, [r3, #20]
 8011850:	2b07      	cmp	r3, #7
 8011852:	d003      	beq.n	801185c <tcp_recved+0x5c>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7d1b      	ldrb	r3, [r3, #20]
 8011858:	2b09      	cmp	r3, #9
 801185a:	d104      	bne.n	8011866 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011862:	851a      	strh	r2, [r3, #40]	; 0x28
 8011864:	e006      	b.n	8011874 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011866:	4b0f      	ldr	r3, [pc, #60]	; (80118a4 <tcp_recved+0xa4>)
 8011868:	f240 322d 	movw	r2, #813	; 0x32d
 801186c:	4910      	ldr	r1, [pc, #64]	; (80118b0 <tcp_recved+0xb0>)
 801186e:	480f      	ldr	r0, [pc, #60]	; (80118ac <tcp_recved+0xac>)
 8011870:	f009 f8c8 	bl	801aa04 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7ff ff75 	bl	8011764 <tcp_update_rcv_ann_wnd>
 801187a:	4603      	mov	r3, r0
 801187c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011884:	db09      	blt.n	801189a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	7e9b      	ldrb	r3, [r3, #26]
 801188a:	f043 0302 	orr.w	r3, r3, #2
 801188e:	b2da      	uxtb	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f004 f889 	bl	80159ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801189a:	bf00      	nop
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	0801d530 	.word	0x0801d530
 80118a8:	0801d68c 	.word	0x0801d68c
 80118ac:	0801d594 	.word	0x0801d594
 80118b0:	0801d6b4 	.word	0x0801d6b4

080118b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80118be:	4b1d      	ldr	r3, [pc, #116]	; (8011934 <tcp_new_port+0x80>)
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	1c5a      	adds	r2, r3, #1
 80118c4:	b291      	uxth	r1, r2
 80118c6:	4a1b      	ldr	r2, [pc, #108]	; (8011934 <tcp_new_port+0x80>)
 80118c8:	8011      	strh	r1, [r2, #0]
 80118ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d103      	bne.n	80118da <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80118d2:	4b18      	ldr	r3, [pc, #96]	; (8011934 <tcp_new_port+0x80>)
 80118d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80118d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80118da:	2300      	movs	r3, #0
 80118dc:	71fb      	strb	r3, [r7, #7]
 80118de:	e01e      	b.n	801191e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80118e0:	79fb      	ldrb	r3, [r7, #7]
 80118e2:	4a15      	ldr	r2, [pc, #84]	; (8011938 <tcp_new_port+0x84>)
 80118e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	603b      	str	r3, [r7, #0]
 80118ec:	e011      	b.n	8011912 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	8ada      	ldrh	r2, [r3, #22]
 80118f2:	4b10      	ldr	r3, [pc, #64]	; (8011934 <tcp_new_port+0x80>)
 80118f4:	881b      	ldrh	r3, [r3, #0]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d108      	bne.n	801190c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80118fa:	88bb      	ldrh	r3, [r7, #4]
 80118fc:	3301      	adds	r3, #1
 80118fe:	80bb      	strh	r3, [r7, #4]
 8011900:	88bb      	ldrh	r3, [r7, #4]
 8011902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011906:	d3da      	bcc.n	80118be <tcp_new_port+0xa>
          return 0;
 8011908:	2300      	movs	r3, #0
 801190a:	e00d      	b.n	8011928 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	603b      	str	r3, [r7, #0]
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1ea      	bne.n	80118ee <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011918:	79fb      	ldrb	r3, [r7, #7]
 801191a:	3301      	adds	r3, #1
 801191c:	71fb      	strb	r3, [r7, #7]
 801191e:	79fb      	ldrb	r3, [r7, #7]
 8011920:	2b03      	cmp	r3, #3
 8011922:	d9dd      	bls.n	80118e0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011924:	4b03      	ldr	r3, [pc, #12]	; (8011934 <tcp_new_port+0x80>)
 8011926:	881b      	ldrh	r3, [r3, #0]
}
 8011928:	4618      	mov	r0, r3
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	24000028 	.word	0x24000028
 8011938:	0801f1e0 	.word	0x0801f1e0

0801193c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801193c:	b5b0      	push	{r4, r5, r7, lr}
 801193e:	b08c      	sub	sp, #48	; 0x30
 8011940:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011946:	4b96      	ldr	r3, [pc, #600]	; (8011ba0 <tcp_slowtmr+0x264>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3301      	adds	r3, #1
 801194c:	4a94      	ldr	r2, [pc, #592]	; (8011ba0 <tcp_slowtmr+0x264>)
 801194e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011950:	4b94      	ldr	r3, [pc, #592]	; (8011ba4 <tcp_slowtmr+0x268>)
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	3301      	adds	r3, #1
 8011956:	b2da      	uxtb	r2, r3
 8011958:	4b92      	ldr	r3, [pc, #584]	; (8011ba4 <tcp_slowtmr+0x268>)
 801195a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801195c:	2300      	movs	r3, #0
 801195e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8011960:	4b91      	ldr	r3, [pc, #580]	; (8011ba8 <tcp_slowtmr+0x26c>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011966:	e227      	b.n	8011db8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196a:	7d1b      	ldrb	r3, [r3, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d106      	bne.n	801197e <tcp_slowtmr+0x42>
 8011970:	4b8e      	ldr	r3, [pc, #568]	; (8011bac <tcp_slowtmr+0x270>)
 8011972:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011976:	498e      	ldr	r1, [pc, #568]	; (8011bb0 <tcp_slowtmr+0x274>)
 8011978:	488e      	ldr	r0, [pc, #568]	; (8011bb4 <tcp_slowtmr+0x278>)
 801197a:	f009 f843 	bl	801aa04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011980:	7d1b      	ldrb	r3, [r3, #20]
 8011982:	2b01      	cmp	r3, #1
 8011984:	d106      	bne.n	8011994 <tcp_slowtmr+0x58>
 8011986:	4b89      	ldr	r3, [pc, #548]	; (8011bac <tcp_slowtmr+0x270>)
 8011988:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801198c:	498a      	ldr	r1, [pc, #552]	; (8011bb8 <tcp_slowtmr+0x27c>)
 801198e:	4889      	ldr	r0, [pc, #548]	; (8011bb4 <tcp_slowtmr+0x278>)
 8011990:	f009 f838 	bl	801aa04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011996:	7d1b      	ldrb	r3, [r3, #20]
 8011998:	2b0a      	cmp	r3, #10
 801199a:	d106      	bne.n	80119aa <tcp_slowtmr+0x6e>
 801199c:	4b83      	ldr	r3, [pc, #524]	; (8011bac <tcp_slowtmr+0x270>)
 801199e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80119a2:	4986      	ldr	r1, [pc, #536]	; (8011bbc <tcp_slowtmr+0x280>)
 80119a4:	4883      	ldr	r0, [pc, #524]	; (8011bb4 <tcp_slowtmr+0x278>)
 80119a6:	f009 f82d 	bl	801aa04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	7f5a      	ldrb	r2, [r3, #29]
 80119ae:	4b7d      	ldr	r3, [pc, #500]	; (8011ba4 <tcp_slowtmr+0x268>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d103      	bne.n	80119be <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80119bc:	e1fc      	b.n	8011db8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80119be:	4b79      	ldr	r3, [pc, #484]	; (8011ba4 <tcp_slowtmr+0x268>)
 80119c0:	781a      	ldrb	r2, [r3, #0]
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80119ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d0:	7d1b      	ldrb	r3, [r3, #20]
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d108      	bne.n	80119e8 <tcp_slowtmr+0xac>
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119dc:	2b05      	cmp	r3, #5
 80119de:	d903      	bls.n	80119e8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80119e0:	7ffb      	ldrb	r3, [r7, #31]
 80119e2:	3301      	adds	r3, #1
 80119e4:	77fb      	strb	r3, [r7, #31]
 80119e6:	e0a2      	b.n	8011b2e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80119e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119ee:	2b0b      	cmp	r3, #11
 80119f0:	d903      	bls.n	80119fa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80119f2:	7ffb      	ldrb	r3, [r7, #31]
 80119f4:	3301      	adds	r3, #1
 80119f6:	77fb      	strb	r3, [r7, #31]
 80119f8:	e099      	b.n	8011b2e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d032      	beq.n	8011a6a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011a0a:	3b01      	subs	r3, #1
 8011a0c:	4a6c      	ldr	r2, [pc, #432]	; (8011bc0 <tcp_slowtmr+0x284>)
 8011a0e:	5cd3      	ldrb	r3, [r2, r3]
 8011a10:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8011a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a14:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011a18:	7cfa      	ldrb	r2, [r7, #19]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d907      	bls.n	8011a2e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011a24:	3301      	adds	r3, #1
 8011a26:	b2da      	uxtb	r2, r3
 8011a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a30:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011a34:	7cfa      	ldrb	r2, [r7, #19]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d879      	bhi.n	8011b2e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a3c:	f004 fbc2 	bl	80161c4 <tcp_zero_window_probe>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d173      	bne.n	8011b2e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8011a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011a54:	2b06      	cmp	r3, #6
 8011a56:	d86a      	bhi.n	8011b2e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8011a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011a5e:	3301      	adds	r3, #1
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a64:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011a68:	e061      	b.n	8011b2e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	db08      	blt.n	8011a86 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	b21a      	sxth	r2, r3
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d04f      	beq.n	8011b2e <tcp_slowtmr+0x1f2>
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	db47      	blt.n	8011b2e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	7d1b      	ldrb	r3, [r3, #20]
 8011aa2:	2b02      	cmp	r3, #2
 8011aa4:	d018      	beq.n	8011ad8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aac:	2b0c      	cmp	r3, #12
 8011aae:	bf28      	it	cs
 8011ab0:	230c      	movcs	r3, #12
 8011ab2:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011aba:	10db      	asrs	r3, r3, #3
 8011abc:	b21b      	sxth	r3, r3
 8011abe:	461a      	mov	r2, r3
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ac6:	4413      	add	r3, r2
 8011ac8:	7dfa      	ldrb	r2, [r7, #23]
 8011aca:	493e      	ldr	r1, [pc, #248]	; (8011bc4 <tcp_slowtmr+0x288>)
 8011acc:	5c8a      	ldrb	r2, [r1, r2]
 8011ace:	4093      	lsls	r3, r2
 8011ad0:	b21a      	sxth	r2, r3
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8011ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ada:	2200      	movs	r2, #0
 8011adc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011aea:	4293      	cmp	r3, r2
 8011aec:	bf28      	it	cs
 8011aee:	4613      	movcs	r3, r2
 8011af0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8011af2:	8abb      	ldrh	r3, [r7, #20]
 8011af4:	085b      	lsrs	r3, r3, #1
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d206      	bcs.n	8011b1e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8011b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b2a:	f004 fa39 	bl	8015fa0 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	7d1b      	ldrb	r3, [r3, #20]
 8011b32:	2b06      	cmp	r3, #6
 8011b34:	d10f      	bne.n	8011b56 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	7e9b      	ldrb	r3, [r3, #26]
 8011b3a:	f003 0310 	and.w	r3, r3, #16
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d009      	beq.n	8011b56 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b42:	4b17      	ldr	r3, [pc, #92]	; (8011ba0 <tcp_slowtmr+0x264>)
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b48:	6a1b      	ldr	r3, [r3, #32]
 8011b4a:	1ad3      	subs	r3, r2, r3
 8011b4c:	2b28      	cmp	r3, #40	; 0x28
 8011b4e:	d902      	bls.n	8011b56 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011b50:	7ffb      	ldrb	r3, [r7, #31]
 8011b52:	3301      	adds	r3, #1
 8011b54:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	7a1b      	ldrb	r3, [r3, #8]
 8011b5a:	f003 0308 	and.w	r3, r3, #8
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d05d      	beq.n	8011c1e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011b66:	2b04      	cmp	r3, #4
 8011b68:	d003      	beq.n	8011b72 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8011b6e:	2b07      	cmp	r3, #7
 8011b70:	d155      	bne.n	8011c1e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b72:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <tcp_slowtmr+0x264>)
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b78:	6a1b      	ldr	r3, [r3, #32]
 8011b7a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011b82:	4b11      	ldr	r3, [pc, #68]	; (8011bc8 <tcp_slowtmr+0x28c>)
 8011b84:	440b      	add	r3, r1
 8011b86:	4911      	ldr	r1, [pc, #68]	; (8011bcc <tcp_slowtmr+0x290>)
 8011b88:	fba1 1303 	umull	r1, r3, r1, r3
 8011b8c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d91e      	bls.n	8011bd0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011b92:	7ffb      	ldrb	r3, [r7, #31]
 8011b94:	3301      	adds	r3, #1
 8011b96:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011b98:	7fbb      	ldrb	r3, [r7, #30]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	77bb      	strb	r3, [r7, #30]
 8011b9e:	e03e      	b.n	8011c1e <tcp_slowtmr+0x2e2>
 8011ba0:	240076c4 	.word	0x240076c4
 8011ba4:	240076da 	.word	0x240076da
 8011ba8:	240076d0 	.word	0x240076d0
 8011bac:	0801d530 	.word	0x0801d530
 8011bb0:	0801d708 	.word	0x0801d708
 8011bb4:	0801d594 	.word	0x0801d594
 8011bb8:	0801d734 	.word	0x0801d734
 8011bbc:	0801d760 	.word	0x0801d760
 8011bc0:	0801f1d8 	.word	0x0801f1d8
 8011bc4:	0801f1c8 	.word	0x0801f1c8
 8011bc8:	000a4cb8 	.word	0x000a4cb8
 8011bcc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bd0:	4b97      	ldr	r3, [pc, #604]	; (8011e30 <tcp_slowtmr+0x4f4>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	6a1b      	ldr	r3, [r3, #32]
 8011bd8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011be6:	4618      	mov	r0, r3
 8011be8:	4b92      	ldr	r3, [pc, #584]	; (8011e34 <tcp_slowtmr+0x4f8>)
 8011bea:	fb00 f303 	mul.w	r3, r0, r3
 8011bee:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011bf0:	4991      	ldr	r1, [pc, #580]	; (8011e38 <tcp_slowtmr+0x4fc>)
 8011bf2:	fba1 1303 	umull	r1, r3, r1, r3
 8011bf6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d910      	bls.n	8011c1e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8011bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bfe:	f004 faa4 	bl	801614a <tcp_keepalive>
 8011c02:	4603      	mov	r3, r0
 8011c04:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011c06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d107      	bne.n	8011c1e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c10:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011c14:	3301      	adds	r3, #1
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d016      	beq.n	8011c54 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011c26:	4b82      	ldr	r3, [pc, #520]	; (8011e30 <tcp_slowtmr+0x4f4>)
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	1ad2      	subs	r2, r2, r3
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011c36:	4619      	mov	r1, r3
 8011c38:	460b      	mov	r3, r1
 8011c3a:	005b      	lsls	r3, r3, #1
 8011c3c:	440b      	add	r3, r1
 8011c3e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d307      	bcc.n	8011c54 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 fa06 	bl	801205a <tcp_segs_free>
      pcb->ooseq = NULL;
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	2200      	movs	r2, #0
 8011c52:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	7d1b      	ldrb	r3, [r3, #20]
 8011c58:	2b03      	cmp	r3, #3
 8011c5a:	d109      	bne.n	8011c70 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c5c:	4b74      	ldr	r3, [pc, #464]	; (8011e30 <tcp_slowtmr+0x4f4>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c62:	6a1b      	ldr	r3, [r3, #32]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	2b28      	cmp	r3, #40	; 0x28
 8011c68:	d902      	bls.n	8011c70 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011c6a:	7ffb      	ldrb	r3, [r7, #31]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	7d1b      	ldrb	r3, [r3, #20]
 8011c74:	2b09      	cmp	r3, #9
 8011c76:	d109      	bne.n	8011c8c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c78:	4b6d      	ldr	r3, [pc, #436]	; (8011e30 <tcp_slowtmr+0x4f4>)
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7e:	6a1b      	ldr	r3, [r3, #32]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	2bf0      	cmp	r3, #240	; 0xf0
 8011c84:	d902      	bls.n	8011c8c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011c86:	7ffb      	ldrb	r3, [r7, #31]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011c8c:	7ffb      	ldrb	r3, [r7, #31]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d05d      	beq.n	8011d4e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c98:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c9c:	f000 fc46 	bl	801252c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011ca0:	6a3b      	ldr	r3, [r7, #32]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d010      	beq.n	8011cc8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011ca6:	4b65      	ldr	r3, [pc, #404]	; (8011e3c <tcp_slowtmr+0x500>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d106      	bne.n	8011cbe <tcp_slowtmr+0x382>
 8011cb0:	4b63      	ldr	r3, [pc, #396]	; (8011e40 <tcp_slowtmr+0x504>)
 8011cb2:	f240 4289 	movw	r2, #1161	; 0x489
 8011cb6:	4963      	ldr	r1, [pc, #396]	; (8011e44 <tcp_slowtmr+0x508>)
 8011cb8:	4863      	ldr	r0, [pc, #396]	; (8011e48 <tcp_slowtmr+0x50c>)
 8011cba:	f008 fea3 	bl	801aa04 <iprintf>
        prev->next = pcb->next;
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc0:	68da      	ldr	r2, [r3, #12]
 8011cc2:	6a3b      	ldr	r3, [r7, #32]
 8011cc4:	60da      	str	r2, [r3, #12]
 8011cc6:	e00f      	b.n	8011ce8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011cc8:	4b5c      	ldr	r3, [pc, #368]	; (8011e3c <tcp_slowtmr+0x500>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d006      	beq.n	8011ce0 <tcp_slowtmr+0x3a4>
 8011cd2:	4b5b      	ldr	r3, [pc, #364]	; (8011e40 <tcp_slowtmr+0x504>)
 8011cd4:	f240 428d 	movw	r2, #1165	; 0x48d
 8011cd8:	495c      	ldr	r1, [pc, #368]	; (8011e4c <tcp_slowtmr+0x510>)
 8011cda:	485b      	ldr	r0, [pc, #364]	; (8011e48 <tcp_slowtmr+0x50c>)
 8011cdc:	f008 fe92 	bl	801aa04 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	4a55      	ldr	r2, [pc, #340]	; (8011e3c <tcp_slowtmr+0x500>)
 8011ce6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011ce8:	7fbb      	ldrb	r3, [r7, #30]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d010      	beq.n	8011d10 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011cf6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	1d1d      	adds	r5, r3, #4
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	8adb      	ldrh	r3, [r3, #22]
 8011d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d02:	8b12      	ldrh	r2, [r2, #24]
 8011d04:	9201      	str	r2, [sp, #4]
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	462b      	mov	r3, r5
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	f004 f8d2 	bl	8015eb4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d12:	691b      	ldr	r3, [r3, #16]
 8011d14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	7d1b      	ldrb	r3, [r3, #20]
 8011d1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011d26:	6839      	ldr	r1, [r7, #0]
 8011d28:	2001      	movs	r0, #1
 8011d2a:	f7fe f87f 	bl	800fe2c <memp_free>

      tcp_active_pcbs_changed = 0;
 8011d2e:	4b48      	ldr	r3, [pc, #288]	; (8011e50 <tcp_slowtmr+0x514>)
 8011d30:	2200      	movs	r2, #0
 8011d32:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d004      	beq.n	8011d44 <tcp_slowtmr+0x408>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f06f 010c 	mvn.w	r1, #12
 8011d40:	68b8      	ldr	r0, [r7, #8]
 8011d42:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011d44:	4b42      	ldr	r3, [pc, #264]	; (8011e50 <tcp_slowtmr+0x514>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d035      	beq.n	8011db8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011d4c:	e606      	b.n	801195c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	7edb      	ldrb	r3, [r3, #27]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	6a3b      	ldr	r3, [r7, #32]
 8011d62:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	7eda      	ldrb	r2, [r3, #27]
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	7f1b      	ldrb	r3, [r3, #28]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d323      	bcc.n	8011db8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	2200      	movs	r2, #0
 8011d74:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011d76:	4b36      	ldr	r3, [pc, #216]	; (8011e50 <tcp_slowtmr+0x514>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00a      	beq.n	8011d9c <tcp_slowtmr+0x460>
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d8c:	6a3a      	ldr	r2, [r7, #32]
 8011d8e:	6912      	ldr	r2, [r2, #16]
 8011d90:	6a39      	ldr	r1, [r7, #32]
 8011d92:	4610      	mov	r0, r2
 8011d94:	4798      	blx	r3
 8011d96:	4603      	mov	r3, r0
 8011d98:	777b      	strb	r3, [r7, #29]
 8011d9a:	e001      	b.n	8011da0 <tcp_slowtmr+0x464>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011da0:	4b2b      	ldr	r3, [pc, #172]	; (8011e50 <tcp_slowtmr+0x514>)
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d000      	beq.n	8011daa <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011da8:	e5d8      	b.n	801195c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011daa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8011db2:	6a38      	ldr	r0, [r7, #32]
 8011db4:	f003 fdfa 	bl	80159ac <tcp_output>
  while (pcb != NULL) {
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f47f add4 	bne.w	8011968 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011dc4:	4b23      	ldr	r3, [pc, #140]	; (8011e54 <tcp_slowtmr+0x518>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011dca:	e068      	b.n	8011e9e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
 8011dd0:	2b0a      	cmp	r3, #10
 8011dd2:	d006      	beq.n	8011de2 <tcp_slowtmr+0x4a6>
 8011dd4:	4b1a      	ldr	r3, [pc, #104]	; (8011e40 <tcp_slowtmr+0x504>)
 8011dd6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011dda:	491f      	ldr	r1, [pc, #124]	; (8011e58 <tcp_slowtmr+0x51c>)
 8011ddc:	481a      	ldr	r0, [pc, #104]	; (8011e48 <tcp_slowtmr+0x50c>)
 8011dde:	f008 fe11 	bl	801aa04 <iprintf>
    pcb_remove = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011de6:	4b12      	ldr	r3, [pc, #72]	; (8011e30 <tcp_slowtmr+0x4f4>)
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dec:	6a1b      	ldr	r3, [r3, #32]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	2bf0      	cmp	r3, #240	; 0xf0
 8011df2:	d902      	bls.n	8011dfa <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8011df4:	7ffb      	ldrb	r3, [r7, #31]
 8011df6:	3301      	adds	r3, #1
 8011df8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011dfa:	7ffb      	ldrb	r3, [r7, #31]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d049      	beq.n	8011e94 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e02:	f000 fb93 	bl	801252c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011e06:	6a3b      	ldr	r3, [r7, #32]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d029      	beq.n	8011e60 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011e0c:	4b11      	ldr	r3, [pc, #68]	; (8011e54 <tcp_slowtmr+0x518>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d106      	bne.n	8011e24 <tcp_slowtmr+0x4e8>
 8011e16:	4b0a      	ldr	r3, [pc, #40]	; (8011e40 <tcp_slowtmr+0x504>)
 8011e18:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8011e1c:	490f      	ldr	r1, [pc, #60]	; (8011e5c <tcp_slowtmr+0x520>)
 8011e1e:	480a      	ldr	r0, [pc, #40]	; (8011e48 <tcp_slowtmr+0x50c>)
 8011e20:	f008 fdf0 	bl	801aa04 <iprintf>
        prev->next = pcb->next;
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	68da      	ldr	r2, [r3, #12]
 8011e28:	6a3b      	ldr	r3, [r7, #32]
 8011e2a:	60da      	str	r2, [r3, #12]
 8011e2c:	e028      	b.n	8011e80 <tcp_slowtmr+0x544>
 8011e2e:	bf00      	nop
 8011e30:	240076c4 	.word	0x240076c4
 8011e34:	000124f8 	.word	0x000124f8
 8011e38:	10624dd3 	.word	0x10624dd3
 8011e3c:	240076d0 	.word	0x240076d0
 8011e40:	0801d530 	.word	0x0801d530
 8011e44:	0801d790 	.word	0x0801d790
 8011e48:	0801d594 	.word	0x0801d594
 8011e4c:	0801d7bc 	.word	0x0801d7bc
 8011e50:	240076d8 	.word	0x240076d8
 8011e54:	240076d4 	.word	0x240076d4
 8011e58:	0801d7e8 	.word	0x0801d7e8
 8011e5c:	0801d818 	.word	0x0801d818
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011e60:	4b13      	ldr	r3, [pc, #76]	; (8011eb0 <tcp_slowtmr+0x574>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d006      	beq.n	8011e78 <tcp_slowtmr+0x53c>
 8011e6a:	4b12      	ldr	r3, [pc, #72]	; (8011eb4 <tcp_slowtmr+0x578>)
 8011e6c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8011e70:	4911      	ldr	r1, [pc, #68]	; (8011eb8 <tcp_slowtmr+0x57c>)
 8011e72:	4812      	ldr	r0, [pc, #72]	; (8011ebc <tcp_slowtmr+0x580>)
 8011e74:	f008 fdc6 	bl	801aa04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	4a0c      	ldr	r2, [pc, #48]	; (8011eb0 <tcp_slowtmr+0x574>)
 8011e7e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011e8a:	69b9      	ldr	r1, [r7, #24]
 8011e8c:	2001      	movs	r0, #1
 8011e8e:	f7fd ffcd 	bl	800fe2c <memp_free>
 8011e92:	e004      	b.n	8011e9e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d193      	bne.n	8011dcc <tcp_slowtmr+0x490>
    }
  }
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop
 8011ea8:	3728      	adds	r7, #40	; 0x28
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bdb0      	pop	{r4, r5, r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	240076d4 	.word	0x240076d4
 8011eb4:	0801d530 	.word	0x0801d530
 8011eb8:	0801d840 	.word	0x0801d840
 8011ebc:	0801d594 	.word	0x0801d594

08011ec0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011ec6:	4b2d      	ldr	r3, [pc, #180]	; (8011f7c <tcp_fasttmr+0xbc>)
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	b2da      	uxtb	r2, r3
 8011ece:	4b2b      	ldr	r3, [pc, #172]	; (8011f7c <tcp_fasttmr+0xbc>)
 8011ed0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011ed2:	4b2b      	ldr	r3, [pc, #172]	; (8011f80 <tcp_fasttmr+0xc0>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011ed8:	e048      	b.n	8011f6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7f5a      	ldrb	r2, [r3, #29]
 8011ede:	4b27      	ldr	r3, [pc, #156]	; (8011f7c <tcp_fasttmr+0xbc>)
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d03f      	beq.n	8011f66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011ee6:	4b25      	ldr	r3, [pc, #148]	; (8011f7c <tcp_fasttmr+0xbc>)
 8011ee8:	781a      	ldrb	r2, [r3, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	7e9b      	ldrb	r3, [r3, #26]
 8011ef2:	f003 0301 	and.w	r3, r3, #1
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d010      	beq.n	8011f1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	7e9b      	ldrb	r3, [r3, #26]
 8011efe:	f043 0302 	orr.w	r3, r3, #2
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f003 fd4f 	bl	80159ac <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7e9b      	ldrb	r3, [r3, #26]
 8011f12:	f023 0303 	bic.w	r3, r3, #3
 8011f16:	b2da      	uxtb	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7e9b      	ldrb	r3, [r3, #26]
 8011f20:	f003 0308 	and.w	r3, r3, #8
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d009      	beq.n	8011f3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	7e9b      	ldrb	r3, [r3, #26]
 8011f2c:	f023 0308 	bic.w	r3, r3, #8
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f7ff f952 	bl	80111e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00a      	beq.n	8011f60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011f4a:	4b0e      	ldr	r3, [pc, #56]	; (8011f84 <tcp_fasttmr+0xc4>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f819 	bl	8011f88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011f56:	4b0b      	ldr	r3, [pc, #44]	; (8011f84 <tcp_fasttmr+0xc4>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d000      	beq.n	8011f60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011f5e:	e7b8      	b.n	8011ed2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	607b      	str	r3, [r7, #4]
 8011f64:	e002      	b.n	8011f6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1b3      	bne.n	8011eda <tcp_fasttmr+0x1a>
    }
  }
}
 8011f72:	bf00      	nop
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	240076da 	.word	0x240076da
 8011f80:	240076d0 	.word	0x240076d0
 8011f84:	240076d8 	.word	0x240076d8

08011f88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011f88:	b590      	push	{r4, r7, lr}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f94:	7b5b      	ldrb	r3, [r3, #13]
 8011f96:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f9c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d00b      	beq.n	8011fc6 <tcp_process_refused_data+0x3e>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6918      	ldr	r0, [r3, #16]
 8011fb8:	2300      	movs	r3, #0
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	6879      	ldr	r1, [r7, #4]
 8011fbe:	47a0      	blx	r4
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	73fb      	strb	r3, [r7, #15]
 8011fc4:	e007      	b.n	8011fd6 <tcp_process_refused_data+0x4e>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	68ba      	ldr	r2, [r7, #8]
 8011fca:	6879      	ldr	r1, [r7, #4]
 8011fcc:	2000      	movs	r0, #0
 8011fce:	f000 f88d 	bl	80120ec <tcp_recv_null>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d12a      	bne.n	8012034 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8011fde:	7bbb      	ldrb	r3, [r7, #14]
 8011fe0:	f003 0320 	and.w	r3, r3, #32
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d033      	beq.n	8012050 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011ff0:	d005      	beq.n	8011ffe <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	b29a      	uxth	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00b      	beq.n	8012020 <tcp_process_refused_data+0x98>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6918      	ldr	r0, [r3, #16]
 8012012:	2300      	movs	r3, #0
 8012014:	2200      	movs	r2, #0
 8012016:	6879      	ldr	r1, [r7, #4]
 8012018:	47a0      	blx	r4
 801201a:	4603      	mov	r3, r0
 801201c:	73fb      	strb	r3, [r7, #15]
 801201e:	e001      	b.n	8012024 <tcp_process_refused_data+0x9c>
 8012020:	2300      	movs	r3, #0
 8012022:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012028:	f113 0f0d 	cmn.w	r3, #13
 801202c:	d110      	bne.n	8012050 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801202e:	f06f 030c 	mvn.w	r3, #12
 8012032:	e00e      	b.n	8012052 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8012034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012038:	f113 0f0d 	cmn.w	r3, #13
 801203c:	d102      	bne.n	8012044 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801203e:	f06f 030c 	mvn.w	r3, #12
 8012042:	e006      	b.n	8012052 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801204a:	f06f 0304 	mvn.w	r3, #4
 801204e:	e000      	b.n	8012052 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012050:	2300      	movs	r3, #0
}
 8012052:	4618      	mov	r0, r3
 8012054:	3714      	adds	r7, #20
 8012056:	46bd      	mov	sp, r7
 8012058:	bd90      	pop	{r4, r7, pc}

0801205a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801205a:	b580      	push	{r7, lr}
 801205c:	b084      	sub	sp, #16
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012062:	e007      	b.n	8012074 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f000 f80a 	bl	8012084 <tcp_seg_free>
    seg = next;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1f4      	bne.n	8012064 <tcp_segs_free+0xa>
  }
}
 801207a:	bf00      	nop
 801207c:	bf00      	nop
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00c      	beq.n	80120ac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d004      	beq.n	80120a4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fe fcba 	bl	8010a18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	2003      	movs	r0, #3
 80120a8:	f7fd fec0 	bl	800fe2c <memp_free>
  }
}
 80120ac:	bf00      	nop
 80120ae:	3708      	adds	r7, #8
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80120bc:	2003      	movs	r0, #3
 80120be:	f7fd fe3f 	bl	800fd40 <memp_malloc>
 80120c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d101      	bne.n	80120ce <tcp_seg_copy+0x1a>
    return NULL;
 80120ca:	2300      	movs	r3, #0
 80120cc:	e00a      	b.n	80120e4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80120ce:	2210      	movs	r2, #16
 80120d0:	6879      	ldr	r1, [r7, #4]
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f008 fc80 	bl	801a9d8 <memcpy>
  pbuf_ref(cseg->p);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fe fd4d 	bl	8010b7c <pbuf_ref>
  return cseg;
 80120e2:	68fb      	ldr	r3, [r7, #12]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
 80120f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d009      	beq.n	8012114 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	891b      	ldrh	r3, [r3, #8]
 8012104:	4619      	mov	r1, r3
 8012106:	68b8      	ldr	r0, [r7, #8]
 8012108:	f7ff fb7a 	bl	8011800 <tcp_recved>
    pbuf_free(p);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f7fe fc83 	bl	8010a18 <pbuf_free>
 8012112:	e008      	b.n	8012126 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8012114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d104      	bne.n	8012126 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801211c:	68b8      	ldr	r0, [r7, #8]
 801211e:	f7ff f8c9 	bl	80112b4 <tcp_close>
 8012122:	4603      	mov	r3, r0
 8012124:	e000      	b.n	8012128 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8012126:	2300      	movs	r3, #0
}
 8012128:	4618      	mov	r0, r3
 801212a:	3710      	adds	r7, #16
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af00      	add	r7, sp, #0
 8012136:	4603      	mov	r3, r0
 8012138:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801213e:	2b00      	cmp	r3, #0
 8012140:	db01      	blt.n	8012146 <tcp_kill_prio+0x16>
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	e000      	b.n	8012148 <tcp_kill_prio+0x18>
 8012146:	237f      	movs	r3, #127	; 0x7f
 8012148:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012152:	4b16      	ldr	r3, [pc, #88]	; (80121ac <tcp_kill_prio+0x7c>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	e01a      	b.n	8012190 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	7d5b      	ldrb	r3, [r3, #21]
 801215e:	7afa      	ldrb	r2, [r7, #11]
 8012160:	429a      	cmp	r2, r3
 8012162:	d312      	bcc.n	801218a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012164:	4b12      	ldr	r3, [pc, #72]	; (80121b0 <tcp_kill_prio+0x80>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	6a1b      	ldr	r3, [r3, #32]
 801216c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	429a      	cmp	r2, r3
 8012172:	d80a      	bhi.n	801218a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8012174:	4b0e      	ldr	r3, [pc, #56]	; (80121b0 <tcp_kill_prio+0x80>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	6a1b      	ldr	r3, [r3, #32]
 801217c:	1ad3      	subs	r3, r2, r3
 801217e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	7d5b      	ldrb	r3, [r3, #21]
 8012188:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	617b      	str	r3, [r7, #20]
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d1e1      	bne.n	801215a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801219c:	6938      	ldr	r0, [r7, #16]
 801219e:	f7ff f99b 	bl	80114d8 <tcp_abort>
  }
}
 80121a2:	bf00      	nop
 80121a4:	3718      	adds	r7, #24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	240076d0 	.word	0x240076d0
 80121b0:	240076c4 	.word	0x240076c4

080121b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b086      	sub	sp, #24
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	4603      	mov	r3, r0
 80121bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80121be:	79fb      	ldrb	r3, [r7, #7]
 80121c0:	2b08      	cmp	r3, #8
 80121c2:	d009      	beq.n	80121d8 <tcp_kill_state+0x24>
 80121c4:	79fb      	ldrb	r3, [r7, #7]
 80121c6:	2b09      	cmp	r3, #9
 80121c8:	d006      	beq.n	80121d8 <tcp_kill_state+0x24>
 80121ca:	4b1a      	ldr	r3, [pc, #104]	; (8012234 <tcp_kill_state+0x80>)
 80121cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80121d0:	4919      	ldr	r1, [pc, #100]	; (8012238 <tcp_kill_state+0x84>)
 80121d2:	481a      	ldr	r0, [pc, #104]	; (801223c <tcp_kill_state+0x88>)
 80121d4:	f008 fc16 	bl	801aa04 <iprintf>

  inactivity = 0;
 80121d8:	2300      	movs	r3, #0
 80121da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80121dc:	2300      	movs	r3, #0
 80121de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80121e0:	4b17      	ldr	r3, [pc, #92]	; (8012240 <tcp_kill_state+0x8c>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	617b      	str	r3, [r7, #20]
 80121e6:	e017      	b.n	8012218 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	7d1b      	ldrb	r3, [r3, #20]
 80121ec:	79fa      	ldrb	r2, [r7, #7]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d10f      	bne.n	8012212 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121f2:	4b14      	ldr	r3, [pc, #80]	; (8012244 <tcp_kill_state+0x90>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	6a1b      	ldr	r3, [r3, #32]
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	68fa      	ldr	r2, [r7, #12]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d807      	bhi.n	8012212 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012202:	4b10      	ldr	r3, [pc, #64]	; (8012244 <tcp_kill_state+0x90>)
 8012204:	681a      	ldr	r2, [r3, #0]
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	6a1b      	ldr	r3, [r3, #32]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	617b      	str	r3, [r7, #20]
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d1e4      	bne.n	80121e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d003      	beq.n	801222c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012224:	2100      	movs	r1, #0
 8012226:	6938      	ldr	r0, [r7, #16]
 8012228:	f7ff f8a4 	bl	8011374 <tcp_abandon>
  }
}
 801222c:	bf00      	nop
 801222e:	3718      	adds	r7, #24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	0801d530 	.word	0x0801d530
 8012238:	0801d868 	.word	0x0801d868
 801223c:	0801d594 	.word	0x0801d594
 8012240:	240076d0 	.word	0x240076d0
 8012244:	240076c4 	.word	0x240076c4

08012248 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801224e:	2300      	movs	r3, #0
 8012250:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012252:	2300      	movs	r3, #0
 8012254:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012256:	4b12      	ldr	r3, [pc, #72]	; (80122a0 <tcp_kill_timewait+0x58>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	60fb      	str	r3, [r7, #12]
 801225c:	e012      	b.n	8012284 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801225e:	4b11      	ldr	r3, [pc, #68]	; (80122a4 <tcp_kill_timewait+0x5c>)
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6a1b      	ldr	r3, [r3, #32]
 8012266:	1ad3      	subs	r3, r2, r3
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	429a      	cmp	r2, r3
 801226c:	d807      	bhi.n	801227e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801226e:	4b0d      	ldr	r3, [pc, #52]	; (80122a4 <tcp_kill_timewait+0x5c>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6a1b      	ldr	r3, [r3, #32]
 8012276:	1ad3      	subs	r3, r2, r3
 8012278:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	60fb      	str	r3, [r7, #12]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1e9      	bne.n	801225e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012290:	68b8      	ldr	r0, [r7, #8]
 8012292:	f7ff f921 	bl	80114d8 <tcp_abort>
  }
}
 8012296:	bf00      	nop
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	240076d4 	.word	0x240076d4
 80122a4:	240076c4 	.word	0x240076c4

080122a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	4603      	mov	r3, r0
 80122b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122b2:	2001      	movs	r0, #1
 80122b4:	f7fd fd44 	bl	800fd40 <memp_malloc>
 80122b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d124      	bne.n	801230a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80122c0:	f7ff ffc2 	bl	8012248 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122c4:	2001      	movs	r0, #1
 80122c6:	f7fd fd3b 	bl	800fd40 <memp_malloc>
 80122ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d11b      	bne.n	801230a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80122d2:	2009      	movs	r0, #9
 80122d4:	f7ff ff6e 	bl	80121b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122d8:	2001      	movs	r0, #1
 80122da:	f7fd fd31 	bl	800fd40 <memp_malloc>
 80122de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d111      	bne.n	801230a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80122e6:	2008      	movs	r0, #8
 80122e8:	f7ff ff64 	bl	80121b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122ec:	2001      	movs	r0, #1
 80122ee:	f7fd fd27 	bl	800fd40 <memp_malloc>
 80122f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d107      	bne.n	801230a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80122fa:	79fb      	ldrb	r3, [r7, #7]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7ff ff17 	bl	8012130 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012302:	2001      	movs	r0, #1
 8012304:	f7fd fd1c 	bl	800fd40 <memp_malloc>
 8012308:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d03f      	beq.n	8012390 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012310:	2298      	movs	r2, #152	; 0x98
 8012312:	2100      	movs	r1, #0
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f008 fb6d 	bl	801a9f4 <memset>
    pcb->prio = prio;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	79fa      	ldrb	r2, [r7, #7]
 801231e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012326:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012330:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	22ff      	movs	r2, #255	; 0xff
 801233e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012346:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2206      	movs	r2, #6
 801234c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2206      	movs	r2, #6
 8012354:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801235c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	2201      	movs	r2, #1
 8012362:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012366:	4b0d      	ldr	r3, [pc, #52]	; (801239c <tcp_alloc+0xf4>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801236e:	4b0c      	ldr	r3, [pc, #48]	; (80123a0 <tcp_alloc+0xf8>)
 8012370:	781a      	ldrb	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801237c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4a08      	ldr	r2, [pc, #32]	; (80123a4 <tcp_alloc+0xfc>)
 8012384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	4a07      	ldr	r2, [pc, #28]	; (80123a8 <tcp_alloc+0x100>)
 801238c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012390:	68fb      	ldr	r3, [r7, #12]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	240076c4 	.word	0x240076c4
 80123a0:	240076da 	.word	0x240076da
 80123a4:	080120ed 	.word	0x080120ed
 80123a8:	006ddd00 	.word	0x006ddd00

080123ac <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	4603      	mov	r3, r0
 80123b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80123b6:	2040      	movs	r0, #64	; 0x40
 80123b8:	f7ff ff76 	bl	80122a8 <tcp_alloc>
 80123bc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80123be:	68fb      	ldr	r3, [r7, #12]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3710      	adds	r7, #16
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	611a      	str	r2, [r3, #16]
  }
}
 80123de:	bf00      	nop
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr
	...

080123ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00e      	beq.n	801241a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	7d1b      	ldrb	r3, [r3, #20]
 8012400:	2b01      	cmp	r3, #1
 8012402:	d106      	bne.n	8012412 <tcp_recv+0x26>
 8012404:	4b07      	ldr	r3, [pc, #28]	; (8012424 <tcp_recv+0x38>)
 8012406:	f240 62bb 	movw	r2, #1723	; 0x6bb
 801240a:	4907      	ldr	r1, [pc, #28]	; (8012428 <tcp_recv+0x3c>)
 801240c:	4807      	ldr	r0, [pc, #28]	; (801242c <tcp_recv+0x40>)
 801240e:	f008 faf9 	bl	801aa04 <iprintf>
    pcb->recv = recv;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	683a      	ldr	r2, [r7, #0]
 8012416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801241a:	bf00      	nop
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	0801d530 	.word	0x0801d530
 8012428:	0801d878 	.word	0x0801d878
 801242c:	0801d594 	.word	0x0801d594

08012430 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d00d      	beq.n	801245c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	7d1b      	ldrb	r3, [r3, #20]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d106      	bne.n	8012456 <tcp_sent+0x26>
 8012448:	4b06      	ldr	r3, [pc, #24]	; (8012464 <tcp_sent+0x34>)
 801244a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801244e:	4906      	ldr	r1, [pc, #24]	; (8012468 <tcp_sent+0x38>)
 8012450:	4806      	ldr	r0, [pc, #24]	; (801246c <tcp_sent+0x3c>)
 8012452:	f008 fad7 	bl	801aa04 <iprintf>
    pcb->sent = sent;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	683a      	ldr	r2, [r7, #0]
 801245a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	0801d530 	.word	0x0801d530
 8012468:	0801d8a0 	.word	0x0801d8a0
 801246c:	0801d594 	.word	0x0801d594

08012470 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00e      	beq.n	801249e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	7d1b      	ldrb	r3, [r3, #20]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d106      	bne.n	8012496 <tcp_err+0x26>
 8012488:	4b07      	ldr	r3, [pc, #28]	; (80124a8 <tcp_err+0x38>)
 801248a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801248e:	4907      	ldr	r1, [pc, #28]	; (80124ac <tcp_err+0x3c>)
 8012490:	4807      	ldr	r0, [pc, #28]	; (80124b0 <tcp_err+0x40>)
 8012492:	f008 fab7 	bl	801aa04 <iprintf>
    pcb->errf = err;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	683a      	ldr	r2, [r7, #0]
 801249a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801249e:	bf00      	nop
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	0801d530 	.word	0x0801d530
 80124ac:	0801d8c8 	.word	0x0801d8c8
 80124b0:	0801d594 	.word	0x0801d594

080124b4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d008      	beq.n	80124d6 <tcp_accept+0x22>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	7d1b      	ldrb	r3, [r3, #20]
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d104      	bne.n	80124d6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	619a      	str	r2, [r3, #24]
  }
}
 80124d6:	bf00      	nop
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr
	...

080124e4 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	4613      	mov	r3, r2
 80124f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	7d1b      	ldrb	r3, [r3, #20]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d106      	bne.n	8012508 <tcp_poll+0x24>
 80124fa:	4b09      	ldr	r3, [pc, #36]	; (8012520 <tcp_poll+0x3c>)
 80124fc:	f240 7203 	movw	r2, #1795	; 0x703
 8012500:	4908      	ldr	r1, [pc, #32]	; (8012524 <tcp_poll+0x40>)
 8012502:	4809      	ldr	r0, [pc, #36]	; (8012528 <tcp_poll+0x44>)
 8012504:	f008 fa7e 	bl	801aa04 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	68ba      	ldr	r2, [r7, #8]
 801250c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	79fa      	ldrb	r2, [r7, #7]
 8012514:	771a      	strb	r2, [r3, #28]
}
 8012516:	bf00      	nop
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	0801d530 	.word	0x0801d530
 8012524:	0801d8f0 	.word	0x0801d8f0
 8012528:	0801d594 	.word	0x0801d594

0801252c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	7d1b      	ldrb	r3, [r3, #20]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d034      	beq.n	80125a6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012540:	2b0a      	cmp	r3, #10
 8012542:	d030      	beq.n	80125a6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012548:	2b01      	cmp	r3, #1
 801254a:	d02c      	beq.n	80125a6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012550:	2b00      	cmp	r3, #0
 8012552:	d007      	beq.n	8012564 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012558:	4618      	mov	r0, r3
 801255a:	f7fe fa5d 	bl	8010a18 <pbuf_free>
      pcb->refused_data = NULL;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2200      	movs	r2, #0
 8012562:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012568:	4618      	mov	r0, r3
 801256a:	f7ff fd76 	bl	801205a <tcp_segs_free>
    pcb->ooseq = NULL;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2200      	movs	r2, #0
 8012572:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801257a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012580:	4618      	mov	r0, r3
 8012582:	f7ff fd6a 	bl	801205a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801258a:	4618      	mov	r0, r3
 801258c:	f7ff fd65 	bl	801205a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	669a      	str	r2, [r3, #104]	; 0x68
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2200      	movs	r2, #0
 80125a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80125a6:	bf00      	nop
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d105      	bne.n	80125d0 <tcp_pcb_remove+0x20>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	68da      	ldr	r2, [r3, #12]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	601a      	str	r2, [r3, #0]
 80125ce:	e013      	b.n	80125f8 <tcp_pcb_remove+0x48>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	60fb      	str	r3, [r7, #12]
 80125d6:	e00c      	b.n	80125f2 <tcp_pcb_remove+0x42>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	683a      	ldr	r2, [r7, #0]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d104      	bne.n	80125ec <tcp_pcb_remove+0x3c>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	68da      	ldr	r2, [r3, #12]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	60da      	str	r2, [r3, #12]
 80125ea:	e005      	b.n	80125f8 <tcp_pcb_remove+0x48>
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	60fb      	str	r3, [r7, #12]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1ef      	bne.n	80125d8 <tcp_pcb_remove+0x28>
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	2200      	movs	r2, #0
 80125fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	f7ff ff94 	bl	801252c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	7d1b      	ldrb	r3, [r3, #20]
 8012608:	2b0a      	cmp	r3, #10
 801260a:	d013      	beq.n	8012634 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012610:	2b01      	cmp	r3, #1
 8012612:	d00f      	beq.n	8012634 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	7e9b      	ldrb	r3, [r3, #26]
 8012618:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801261c:	2b00      	cmp	r3, #0
 801261e:	d009      	beq.n	8012634 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	7e9b      	ldrb	r3, [r3, #26]
 8012624:	f043 0302 	orr.w	r3, r3, #2
 8012628:	b2da      	uxtb	r2, r3
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801262e:	6838      	ldr	r0, [r7, #0]
 8012630:	f003 f9bc 	bl	80159ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	7d1b      	ldrb	r3, [r3, #20]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d020      	beq.n	801267e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012640:	2b00      	cmp	r3, #0
 8012642:	d006      	beq.n	8012652 <tcp_pcb_remove+0xa2>
 8012644:	4b13      	ldr	r3, [pc, #76]	; (8012694 <tcp_pcb_remove+0xe4>)
 8012646:	f240 7253 	movw	r2, #1875	; 0x753
 801264a:	4913      	ldr	r1, [pc, #76]	; (8012698 <tcp_pcb_remove+0xe8>)
 801264c:	4813      	ldr	r0, [pc, #76]	; (801269c <tcp_pcb_remove+0xec>)
 801264e:	f008 f9d9 	bl	801aa04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012656:	2b00      	cmp	r3, #0
 8012658:	d006      	beq.n	8012668 <tcp_pcb_remove+0xb8>
 801265a:	4b0e      	ldr	r3, [pc, #56]	; (8012694 <tcp_pcb_remove+0xe4>)
 801265c:	f240 7254 	movw	r2, #1876	; 0x754
 8012660:	490f      	ldr	r1, [pc, #60]	; (80126a0 <tcp_pcb_remove+0xf0>)
 8012662:	480e      	ldr	r0, [pc, #56]	; (801269c <tcp_pcb_remove+0xec>)
 8012664:	f008 f9ce 	bl	801aa04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801266c:	2b00      	cmp	r3, #0
 801266e:	d006      	beq.n	801267e <tcp_pcb_remove+0xce>
 8012670:	4b08      	ldr	r3, [pc, #32]	; (8012694 <tcp_pcb_remove+0xe4>)
 8012672:	f240 7256 	movw	r2, #1878	; 0x756
 8012676:	490b      	ldr	r1, [pc, #44]	; (80126a4 <tcp_pcb_remove+0xf4>)
 8012678:	4808      	ldr	r0, [pc, #32]	; (801269c <tcp_pcb_remove+0xec>)
 801267a:	f008 f9c3 	bl	801aa04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	2200      	movs	r2, #0
 8012682:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	2200      	movs	r2, #0
 8012688:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801268a:	bf00      	nop
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	0801d530 	.word	0x0801d530
 8012698:	0801d910 	.word	0x0801d910
 801269c:	0801d594 	.word	0x0801d594
 80126a0:	0801d928 	.word	0x0801d928
 80126a4:	0801d944 	.word	0x0801d944

080126a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80126b0:	4b07      	ldr	r3, [pc, #28]	; (80126d0 <tcp_next_iss+0x28>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	4b07      	ldr	r3, [pc, #28]	; (80126d4 <tcp_next_iss+0x2c>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	4413      	add	r3, r2
 80126ba:	4a05      	ldr	r2, [pc, #20]	; (80126d0 <tcp_next_iss+0x28>)
 80126bc:	6013      	str	r3, [r2, #0]
  return iss;
 80126be:	4b04      	ldr	r3, [pc, #16]	; (80126d0 <tcp_next_iss+0x28>)
 80126c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	2400002c 	.word	0x2400002c
 80126d4:	240076c4 	.word	0x240076c4

080126d8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	4603      	mov	r3, r0
 80126e0:	6039      	str	r1, [r7, #0]
 80126e2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80126e4:	6838      	ldr	r0, [r7, #0]
 80126e6:	f006 fd41 	bl	801916c <ip4_route>
 80126ea:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d101      	bne.n	80126f6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80126f2:	88fb      	ldrh	r3, [r7, #6]
 80126f4:	e010      	b.n	8012718 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126fa:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80126fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d008      	beq.n	8012716 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8012704:	897b      	ldrh	r3, [r7, #10]
 8012706:	3b28      	subs	r3, #40	; 0x28
 8012708:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801270a:	893a      	ldrh	r2, [r7, #8]
 801270c:	88fb      	ldrh	r3, [r7, #6]
 801270e:	4293      	cmp	r3, r2
 8012710:	bf28      	it	cs
 8012712:	4613      	movcs	r3, r2
 8012714:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8012716:	88fb      	ldrh	r3, [r7, #6]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801272e:	e011      	b.n	8012754 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	429a      	cmp	r2, r3
 801273a:	d108      	bne.n	801274e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012742:	68f8      	ldr	r0, [r7, #12]
 8012744:	f7fe fec8 	bl	80114d8 <tcp_abort>
      pcb = next;
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	60fb      	str	r3, [r7, #12]
 801274c:	e002      	b.n	8012754 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1ea      	bne.n	8012730 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801275a:	bf00      	nop
 801275c:	bf00      	nop
 801275e:	3710      	adds	r7, #16
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d02c      	beq.n	80127ce <tcp_netif_ip_addr_changed+0x6a>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d028      	beq.n	80127ce <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801277c:	4b16      	ldr	r3, [pc, #88]	; (80127d8 <tcp_netif_ip_addr_changed+0x74>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4619      	mov	r1, r3
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f7ff ffcc 	bl	8012720 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012788:	4b14      	ldr	r3, [pc, #80]	; (80127dc <tcp_netif_ip_addr_changed+0x78>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4619      	mov	r1, r3
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff ffc6 	bl	8012720 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d019      	beq.n	80127ce <tcp_netif_ip_addr_changed+0x6a>
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d015      	beq.n	80127ce <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80127a2:	4b0f      	ldr	r3, [pc, #60]	; (80127e0 <tcp_netif_ip_addr_changed+0x7c>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	60fb      	str	r3, [r7, #12]
 80127a8:	e00e      	b.n	80127c8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d103      	bne.n	80127c4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1ed      	bne.n	80127aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80127ce:	bf00      	nop
 80127d0:	3710      	adds	r7, #16
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	240076d0 	.word	0x240076d0
 80127dc:	240076c8 	.word	0x240076c8
 80127e0:	240076cc 	.word	0x240076cc

080127e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80127e4:	b590      	push	{r4, r7, lr}
 80127e6:	b08b      	sub	sp, #44	; 0x2c
 80127e8:	af02      	add	r7, sp, #8
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	4a82      	ldr	r2, [pc, #520]	; (80129fc <tcp_input+0x218>)
 80127f4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	895b      	ldrh	r3, [r3, #10]
 80127fa:	2b13      	cmp	r3, #19
 80127fc:	f240 8398 	bls.w	8012f30 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012800:	4b7f      	ldr	r3, [pc, #508]	; (8012a00 <tcp_input+0x21c>)
 8012802:	695b      	ldr	r3, [r3, #20]
 8012804:	4a7e      	ldr	r2, [pc, #504]	; (8012a00 <tcp_input+0x21c>)
 8012806:	6812      	ldr	r2, [r2, #0]
 8012808:	4611      	mov	r1, r2
 801280a:	4618      	mov	r0, r3
 801280c:	f006 ff48 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	f040 838e 	bne.w	8012f34 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012818:	4b79      	ldr	r3, [pc, #484]	; (8012a00 <tcp_input+0x21c>)
 801281a:	695b      	ldr	r3, [r3, #20]
 801281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012820:	2be0      	cmp	r3, #224	; 0xe0
 8012822:	f000 8387 	beq.w	8012f34 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8012826:	4b75      	ldr	r3, [pc, #468]	; (80129fc <tcp_input+0x218>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	899b      	ldrh	r3, [r3, #12]
 801282c:	b29b      	uxth	r3, r3
 801282e:	4618      	mov	r0, r3
 8012830:	f7fc fe7a 	bl	800f528 <lwip_htons>
 8012834:	4603      	mov	r3, r0
 8012836:	0b1b      	lsrs	r3, r3, #12
 8012838:	b29b      	uxth	r3, r3
 801283a:	b2db      	uxtb	r3, r3
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012840:	7cbb      	ldrb	r3, [r7, #18]
 8012842:	2b13      	cmp	r3, #19
 8012844:	f240 8378 	bls.w	8012f38 <tcp_input+0x754>
 8012848:	7cbb      	ldrb	r3, [r7, #18]
 801284a:	b29a      	uxth	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	891b      	ldrh	r3, [r3, #8]
 8012850:	429a      	cmp	r2, r3
 8012852:	f200 8371 	bhi.w	8012f38 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8012856:	7cbb      	ldrb	r3, [r7, #18]
 8012858:	b29b      	uxth	r3, r3
 801285a:	3b14      	subs	r3, #20
 801285c:	b29a      	uxth	r2, r3
 801285e:	4b69      	ldr	r3, [pc, #420]	; (8012a04 <tcp_input+0x220>)
 8012860:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012862:	4b69      	ldr	r3, [pc, #420]	; (8012a08 <tcp_input+0x224>)
 8012864:	2200      	movs	r2, #0
 8012866:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	895a      	ldrh	r2, [r3, #10]
 801286c:	7cbb      	ldrb	r3, [r7, #18]
 801286e:	b29b      	uxth	r3, r3
 8012870:	429a      	cmp	r2, r3
 8012872:	d30d      	bcc.n	8012890 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012874:	4b63      	ldr	r3, [pc, #396]	; (8012a04 <tcp_input+0x220>)
 8012876:	881a      	ldrh	r2, [r3, #0]
 8012878:	4b64      	ldr	r3, [pc, #400]	; (8012a0c <tcp_input+0x228>)
 801287a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801287c:	7cbb      	ldrb	r3, [r7, #18]
 801287e:	b29b      	uxth	r3, r3
 8012880:	425b      	negs	r3, r3
 8012882:	b29b      	uxth	r3, r3
 8012884:	b21b      	sxth	r3, r3
 8012886:	4619      	mov	r1, r3
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f7fe f8a1 	bl	80109d0 <pbuf_header>
 801288e:	e055      	b.n	801293c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d105      	bne.n	80128a4 <tcp_input+0xc0>
 8012898:	4b5d      	ldr	r3, [pc, #372]	; (8012a10 <tcp_input+0x22c>)
 801289a:	22b2      	movs	r2, #178	; 0xb2
 801289c:	495d      	ldr	r1, [pc, #372]	; (8012a14 <tcp_input+0x230>)
 801289e:	485e      	ldr	r0, [pc, #376]	; (8012a18 <tcp_input+0x234>)
 80128a0:	f008 f8b0 	bl	801aa04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80128a4:	f06f 0113 	mvn.w	r1, #19
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7fe f891 	bl	80109d0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	895a      	ldrh	r2, [r3, #10]
 80128b2:	4b56      	ldr	r3, [pc, #344]	; (8012a0c <tcp_input+0x228>)
 80128b4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80128b6:	4b53      	ldr	r3, [pc, #332]	; (8012a04 <tcp_input+0x220>)
 80128b8:	881a      	ldrh	r2, [r3, #0]
 80128ba:	4b54      	ldr	r3, [pc, #336]	; (8012a0c <tcp_input+0x228>)
 80128bc:	881b      	ldrh	r3, [r3, #0]
 80128be:	1ad3      	subs	r3, r2, r3
 80128c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80128c2:	4b52      	ldr	r3, [pc, #328]	; (8012a0c <tcp_input+0x228>)
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	425b      	negs	r3, r3
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	b21b      	sxth	r3, r3
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f7fe f87e 	bl	80109d0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	895b      	ldrh	r3, [r3, #10]
 80128da:	8a3a      	ldrh	r2, [r7, #16]
 80128dc:	429a      	cmp	r2, r3
 80128de:	f200 832d 	bhi.w	8012f3c <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	4a47      	ldr	r2, [pc, #284]	; (8012a08 <tcp_input+0x224>)
 80128ea:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	8a3b      	ldrh	r3, [r7, #16]
 80128f2:	425b      	negs	r3, r3
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	b21b      	sxth	r3, r3
 80128f8:	4619      	mov	r1, r3
 80128fa:	4610      	mov	r0, r2
 80128fc:	f7fe f868 	bl	80109d0 <pbuf_header>
    p->tot_len -= opt2len;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	891a      	ldrh	r2, [r3, #8]
 8012904:	8a3b      	ldrh	r3, [r7, #16]
 8012906:	1ad3      	subs	r3, r2, r3
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	895b      	ldrh	r3, [r3, #10]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d005      	beq.n	8012922 <tcp_input+0x13e>
 8012916:	4b3e      	ldr	r3, [pc, #248]	; (8012a10 <tcp_input+0x22c>)
 8012918:	22cf      	movs	r2, #207	; 0xcf
 801291a:	4940      	ldr	r1, [pc, #256]	; (8012a1c <tcp_input+0x238>)
 801291c:	483e      	ldr	r0, [pc, #248]	; (8012a18 <tcp_input+0x234>)
 801291e:	f008 f871 	bl	801aa04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	891a      	ldrh	r2, [r3, #8]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	891b      	ldrh	r3, [r3, #8]
 801292c:	429a      	cmp	r2, r3
 801292e:	d005      	beq.n	801293c <tcp_input+0x158>
 8012930:	4b37      	ldr	r3, [pc, #220]	; (8012a10 <tcp_input+0x22c>)
 8012932:	22d0      	movs	r2, #208	; 0xd0
 8012934:	493a      	ldr	r1, [pc, #232]	; (8012a20 <tcp_input+0x23c>)
 8012936:	4838      	ldr	r0, [pc, #224]	; (8012a18 <tcp_input+0x234>)
 8012938:	f008 f864 	bl	801aa04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801293c:	4b2f      	ldr	r3, [pc, #188]	; (80129fc <tcp_input+0x218>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	b29b      	uxth	r3, r3
 8012944:	4a2d      	ldr	r2, [pc, #180]	; (80129fc <tcp_input+0x218>)
 8012946:	6814      	ldr	r4, [r2, #0]
 8012948:	4618      	mov	r0, r3
 801294a:	f7fc fded 	bl	800f528 <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012952:	4b2a      	ldr	r3, [pc, #168]	; (80129fc <tcp_input+0x218>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	885b      	ldrh	r3, [r3, #2]
 8012958:	b29b      	uxth	r3, r3
 801295a:	4a28      	ldr	r2, [pc, #160]	; (80129fc <tcp_input+0x218>)
 801295c:	6814      	ldr	r4, [r2, #0]
 801295e:	4618      	mov	r0, r3
 8012960:	f7fc fde2 	bl	800f528 <lwip_htons>
 8012964:	4603      	mov	r3, r0
 8012966:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012968:	4b24      	ldr	r3, [pc, #144]	; (80129fc <tcp_input+0x218>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	4a23      	ldr	r2, [pc, #140]	; (80129fc <tcp_input+0x218>)
 8012970:	6814      	ldr	r4, [r2, #0]
 8012972:	4618      	mov	r0, r3
 8012974:	f7fc fde6 	bl	800f544 <lwip_htonl>
 8012978:	4603      	mov	r3, r0
 801297a:	6063      	str	r3, [r4, #4]
 801297c:	6863      	ldr	r3, [r4, #4]
 801297e:	4a29      	ldr	r2, [pc, #164]	; (8012a24 <tcp_input+0x240>)
 8012980:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012982:	4b1e      	ldr	r3, [pc, #120]	; (80129fc <tcp_input+0x218>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	4a1c      	ldr	r2, [pc, #112]	; (80129fc <tcp_input+0x218>)
 801298a:	6814      	ldr	r4, [r2, #0]
 801298c:	4618      	mov	r0, r3
 801298e:	f7fc fdd9 	bl	800f544 <lwip_htonl>
 8012992:	4603      	mov	r3, r0
 8012994:	60a3      	str	r3, [r4, #8]
 8012996:	68a3      	ldr	r3, [r4, #8]
 8012998:	4a23      	ldr	r2, [pc, #140]	; (8012a28 <tcp_input+0x244>)
 801299a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801299c:	4b17      	ldr	r3, [pc, #92]	; (80129fc <tcp_input+0x218>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	89db      	ldrh	r3, [r3, #14]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	4a15      	ldr	r2, [pc, #84]	; (80129fc <tcp_input+0x218>)
 80129a6:	6814      	ldr	r4, [r2, #0]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7fc fdbd 	bl	800f528 <lwip_htons>
 80129ae:	4603      	mov	r3, r0
 80129b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80129b2:	4b12      	ldr	r3, [pc, #72]	; (80129fc <tcp_input+0x218>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	899b      	ldrh	r3, [r3, #12]
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fc fdb4 	bl	800f528 <lwip_htons>
 80129c0:	4603      	mov	r3, r0
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	4b18      	ldr	r3, [pc, #96]	; (8012a2c <tcp_input+0x248>)
 80129cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	891a      	ldrh	r2, [r3, #8]
 80129d2:	4b16      	ldr	r3, [pc, #88]	; (8012a2c <tcp_input+0x248>)
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	f003 0303 	and.w	r3, r3, #3
 80129da:	2b00      	cmp	r3, #0
 80129dc:	bf14      	ite	ne
 80129de:	2301      	movne	r3, #1
 80129e0:	2300      	moveq	r3, #0
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	4413      	add	r3, r2
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	4b11      	ldr	r3, [pc, #68]	; (8012a30 <tcp_input+0x24c>)
 80129ec:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129f2:	4b10      	ldr	r3, [pc, #64]	; (8012a34 <tcp_input+0x250>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	61fb      	str	r3, [r7, #28]
 80129f8:	e082      	b.n	8012b00 <tcp_input+0x31c>
 80129fa:	bf00      	nop
 80129fc:	240076ec 	.word	0x240076ec
 8012a00:	240045a8 	.word	0x240045a8
 8012a04:	240076f0 	.word	0x240076f0
 8012a08:	240076f4 	.word	0x240076f4
 8012a0c:	240076f2 	.word	0x240076f2
 8012a10:	0801d95c 	.word	0x0801d95c
 8012a14:	0801d9b4 	.word	0x0801d9b4
 8012a18:	0801d9c4 	.word	0x0801d9c4
 8012a1c:	0801d9ec 	.word	0x0801d9ec
 8012a20:	0801d9f8 	.word	0x0801d9f8
 8012a24:	240076fc 	.word	0x240076fc
 8012a28:	24007700 	.word	0x24007700
 8012a2c:	24007708 	.word	0x24007708
 8012a30:	24007706 	.word	0x24007706
 8012a34:	240076d0 	.word	0x240076d0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	7d1b      	ldrb	r3, [r3, #20]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d105      	bne.n	8012a4c <tcp_input+0x268>
 8012a40:	4b6e      	ldr	r3, [pc, #440]	; (8012bfc <tcp_input+0x418>)
 8012a42:	22e2      	movs	r2, #226	; 0xe2
 8012a44:	496e      	ldr	r1, [pc, #440]	; (8012c00 <tcp_input+0x41c>)
 8012a46:	486f      	ldr	r0, [pc, #444]	; (8012c04 <tcp_input+0x420>)
 8012a48:	f007 ffdc 	bl	801aa04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	7d1b      	ldrb	r3, [r3, #20]
 8012a50:	2b0a      	cmp	r3, #10
 8012a52:	d105      	bne.n	8012a60 <tcp_input+0x27c>
 8012a54:	4b69      	ldr	r3, [pc, #420]	; (8012bfc <tcp_input+0x418>)
 8012a56:	22e3      	movs	r2, #227	; 0xe3
 8012a58:	496b      	ldr	r1, [pc, #428]	; (8012c08 <tcp_input+0x424>)
 8012a5a:	486a      	ldr	r0, [pc, #424]	; (8012c04 <tcp_input+0x420>)
 8012a5c:	f007 ffd2 	bl	801aa04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	7d1b      	ldrb	r3, [r3, #20]
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d105      	bne.n	8012a74 <tcp_input+0x290>
 8012a68:	4b64      	ldr	r3, [pc, #400]	; (8012bfc <tcp_input+0x418>)
 8012a6a:	22e4      	movs	r2, #228	; 0xe4
 8012a6c:	4967      	ldr	r1, [pc, #412]	; (8012c0c <tcp_input+0x428>)
 8012a6e:	4865      	ldr	r0, [pc, #404]	; (8012c04 <tcp_input+0x420>)
 8012a70:	f007 ffc8 	bl	801aa04 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	8b1a      	ldrh	r2, [r3, #24]
 8012a78:	4b65      	ldr	r3, [pc, #404]	; (8012c10 <tcp_input+0x42c>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d138      	bne.n	8012af6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	8ada      	ldrh	r2, [r3, #22]
 8012a88:	4b61      	ldr	r3, [pc, #388]	; (8012c10 <tcp_input+0x42c>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	885b      	ldrh	r3, [r3, #2]
 8012a8e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d130      	bne.n	8012af6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	685a      	ldr	r2, [r3, #4]
 8012a98:	4b5e      	ldr	r3, [pc, #376]	; (8012c14 <tcp_input+0x430>)
 8012a9a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d12a      	bne.n	8012af6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	4b5b      	ldr	r3, [pc, #364]	; (8012c14 <tcp_input+0x430>)
 8012aa6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d124      	bne.n	8012af6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	69fa      	ldr	r2, [r7, #28]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d105      	bne.n	8012ac2 <tcp_input+0x2de>
 8012ab6:	4b51      	ldr	r3, [pc, #324]	; (8012bfc <tcp_input+0x418>)
 8012ab8:	22ec      	movs	r2, #236	; 0xec
 8012aba:	4957      	ldr	r1, [pc, #348]	; (8012c18 <tcp_input+0x434>)
 8012abc:	4851      	ldr	r0, [pc, #324]	; (8012c04 <tcp_input+0x420>)
 8012abe:	f007 ffa1 	bl	801aa04 <iprintf>
      if (prev != NULL) {
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d00a      	beq.n	8012ade <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	68da      	ldr	r2, [r3, #12]
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012ad0:	4b52      	ldr	r3, [pc, #328]	; (8012c1c <tcp_input+0x438>)
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012ad8:	4a50      	ldr	r2, [pc, #320]	; (8012c1c <tcp_input+0x438>)
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	69fa      	ldr	r2, [r7, #28]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d10f      	bne.n	8012b08 <tcp_input+0x324>
 8012ae8:	4b44      	ldr	r3, [pc, #272]	; (8012bfc <tcp_input+0x418>)
 8012aea:	22f4      	movs	r2, #244	; 0xf4
 8012aec:	494c      	ldr	r1, [pc, #304]	; (8012c20 <tcp_input+0x43c>)
 8012aee:	4845      	ldr	r0, [pc, #276]	; (8012c04 <tcp_input+0x420>)
 8012af0:	f007 ff88 	bl	801aa04 <iprintf>
      break;
 8012af4:	e008      	b.n	8012b08 <tcp_input+0x324>
    }
    prev = pcb;
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	61fb      	str	r3, [r7, #28]
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d198      	bne.n	8012a38 <tcp_input+0x254>
 8012b06:	e000      	b.n	8012b0a <tcp_input+0x326>
      break;
 8012b08:	bf00      	nop
  }

  if (pcb == NULL) {
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f040 808f 	bne.w	8012c30 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b12:	4b44      	ldr	r3, [pc, #272]	; (8012c24 <tcp_input+0x440>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	61fb      	str	r3, [r7, #28]
 8012b18:	e02f      	b.n	8012b7a <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
 8012b1e:	2b0a      	cmp	r3, #10
 8012b20:	d005      	beq.n	8012b2e <tcp_input+0x34a>
 8012b22:	4b36      	ldr	r3, [pc, #216]	; (8012bfc <tcp_input+0x418>)
 8012b24:	22fe      	movs	r2, #254	; 0xfe
 8012b26:	4940      	ldr	r1, [pc, #256]	; (8012c28 <tcp_input+0x444>)
 8012b28:	4836      	ldr	r0, [pc, #216]	; (8012c04 <tcp_input+0x420>)
 8012b2a:	f007 ff6b 	bl	801aa04 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	8b1a      	ldrh	r2, [r3, #24]
 8012b32:	4b37      	ldr	r3, [pc, #220]	; (8012c10 <tcp_input+0x42c>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	881b      	ldrh	r3, [r3, #0]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d11a      	bne.n	8012b74 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	8ada      	ldrh	r2, [r3, #22]
 8012b42:	4b33      	ldr	r3, [pc, #204]	; (8012c10 <tcp_input+0x42c>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	885b      	ldrh	r3, [r3, #2]
 8012b48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d112      	bne.n	8012b74 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	4b30      	ldr	r3, [pc, #192]	; (8012c14 <tcp_input+0x430>)
 8012b54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d10c      	bne.n	8012b74 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b5a:	69fb      	ldr	r3, [r7, #28]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	4b2d      	ldr	r3, [pc, #180]	; (8012c14 <tcp_input+0x430>)
 8012b60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d106      	bne.n	8012b74 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8012b66:	69f8      	ldr	r0, [r7, #28]
 8012b68:	f000 fb16 	bl	8013198 <tcp_timewait_input>
        pbuf_free(p);
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f7fd ff53 	bl	8010a18 <pbuf_free>
        return;
 8012b72:	e1e9      	b.n	8012f48 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	61fb      	str	r3, [r7, #28]
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1cc      	bne.n	8012b1a <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012b80:	2300      	movs	r3, #0
 8012b82:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b84:	4b29      	ldr	r3, [pc, #164]	; (8012c2c <tcp_input+0x448>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	617b      	str	r3, [r7, #20]
 8012b8a:	e019      	b.n	8012bc0 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	8ada      	ldrh	r2, [r3, #22]
 8012b90:	4b1f      	ldr	r3, [pc, #124]	; (8012c10 <tcp_input+0x42c>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	885b      	ldrh	r3, [r3, #2]
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d10c      	bne.n	8012bb6 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	4b1c      	ldr	r3, [pc, #112]	; (8012c14 <tcp_input+0x430>)
 8012ba2:	695b      	ldr	r3, [r3, #20]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d00f      	beq.n	8012bc8 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00d      	beq.n	8012bca <tcp_input+0x3e6>
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d009      	beq.n	8012bca <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	617b      	str	r3, [r7, #20]
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d1e2      	bne.n	8012b8c <tcp_input+0x3a8>
 8012bc6:	e000      	b.n	8012bca <tcp_input+0x3e6>
            break;
 8012bc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d02f      	beq.n	8012c30 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d00a      	beq.n	8012bec <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012bde:	4b13      	ldr	r3, [pc, #76]	; (8012c2c <tcp_input+0x448>)
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012be6:	4a11      	ldr	r2, [pc, #68]	; (8012c2c <tcp_input+0x448>)
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012bec:	6978      	ldr	r0, [r7, #20]
 8012bee:	f000 f9f3 	bl	8012fd8 <tcp_listen_input>
      pbuf_free(p);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7fd ff10 	bl	8010a18 <pbuf_free>
      return;
 8012bf8:	e1a6      	b.n	8012f48 <tcp_input+0x764>
 8012bfa:	bf00      	nop
 8012bfc:	0801d95c 	.word	0x0801d95c
 8012c00:	0801da18 	.word	0x0801da18
 8012c04:	0801d9c4 	.word	0x0801d9c4
 8012c08:	0801da40 	.word	0x0801da40
 8012c0c:	0801da6c 	.word	0x0801da6c
 8012c10:	240076ec 	.word	0x240076ec
 8012c14:	240045a8 	.word	0x240045a8
 8012c18:	0801da94 	.word	0x0801da94
 8012c1c:	240076d0 	.word	0x240076d0
 8012c20:	0801dac0 	.word	0x0801dac0
 8012c24:	240076d4 	.word	0x240076d4
 8012c28:	0801daec 	.word	0x0801daec
 8012c2c:	240076cc 	.word	0x240076cc
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f000 8156 	beq.w	8012ee4 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012c38:	4b94      	ldr	r3, [pc, #592]	; (8012e8c <tcp_input+0x6a8>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	891a      	ldrh	r2, [r3, #8]
 8012c42:	4b92      	ldr	r3, [pc, #584]	; (8012e8c <tcp_input+0x6a8>)
 8012c44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012c46:	4a91      	ldr	r2, [pc, #580]	; (8012e8c <tcp_input+0x6a8>)
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012c4c:	4b90      	ldr	r3, [pc, #576]	; (8012e90 <tcp_input+0x6ac>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4a8e      	ldr	r2, [pc, #568]	; (8012e8c <tcp_input+0x6a8>)
 8012c52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012c54:	4b8f      	ldr	r3, [pc, #572]	; (8012e94 <tcp_input+0x6b0>)
 8012c56:	2200      	movs	r2, #0
 8012c58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012c5a:	4b8f      	ldr	r3, [pc, #572]	; (8012e98 <tcp_input+0x6b4>)
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012c60:	4b8e      	ldr	r3, [pc, #568]	; (8012e9c <tcp_input+0x6b8>)
 8012c62:	2200      	movs	r2, #0
 8012c64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012c66:	4b8e      	ldr	r3, [pc, #568]	; (8012ea0 <tcp_input+0x6bc>)
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	f003 0308 	and.w	r3, r3, #8
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d006      	beq.n	8012c80 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	7b5b      	ldrb	r3, [r3, #13]
 8012c76:	f043 0301 	orr.w	r3, r3, #1
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d017      	beq.n	8012cb8 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c88:	69f8      	ldr	r0, [r7, #28]
 8012c8a:	f7ff f97d 	bl	8011f88 <tcp_process_refused_data>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	f113 0f0d 	cmn.w	r3, #13
 8012c94:	d007      	beq.n	8012ca6 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00c      	beq.n	8012cb8 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c9e:	4b81      	ldr	r3, [pc, #516]	; (8012ea4 <tcp_input+0x6c0>)
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d008      	beq.n	8012cb8 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f040 80e2 	bne.w	8012e74 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012cb0:	69f8      	ldr	r0, [r7, #28]
 8012cb2:	f002 fe1f 	bl	80158f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012cb6:	e0dd      	b.n	8012e74 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 8012cb8:	4a7b      	ldr	r2, [pc, #492]	; (8012ea8 <tcp_input+0x6c4>)
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012cbe:	69f8      	ldr	r0, [r7, #28]
 8012cc0:	f000 fad2 	bl	8013268 <tcp_process>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ccc:	f113 0f0d 	cmn.w	r3, #13
 8012cd0:	f000 80d2 	beq.w	8012e78 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 8012cd4:	4b70      	ldr	r3, [pc, #448]	; (8012e98 <tcp_input+0x6b4>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	f003 0308 	and.w	r3, r3, #8
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d016      	beq.n	8012d0e <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d008      	beq.n	8012cfc <tcp_input+0x518>
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cf0:	69fa      	ldr	r2, [r7, #28]
 8012cf2:	6912      	ldr	r2, [r2, #16]
 8012cf4:	f06f 010d 	mvn.w	r1, #13
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012cfc:	69f9      	ldr	r1, [r7, #28]
 8012cfe:	486b      	ldr	r0, [pc, #428]	; (8012eac <tcp_input+0x6c8>)
 8012d00:	f7ff fc56 	bl	80125b0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012d04:	69f9      	ldr	r1, [r7, #28]
 8012d06:	2001      	movs	r0, #1
 8012d08:	f7fd f890 	bl	800fe2c <memp_free>
 8012d0c:	e0d7      	b.n	8012ebe <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012d12:	4b62      	ldr	r3, [pc, #392]	; (8012e9c <tcp_input+0x6b8>)
 8012d14:	881b      	ldrh	r3, [r3, #0]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d01b      	beq.n	8012d52 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012d1a:	4b60      	ldr	r3, [pc, #384]	; (8012e9c <tcp_input+0x6b8>)
 8012d1c:	881b      	ldrh	r3, [r3, #0]
 8012d1e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d009      	beq.n	8012d3c <tcp_input+0x558>
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d2c:	69fa      	ldr	r2, [r7, #28]
 8012d2e:	6910      	ldr	r0, [r2, #16]
 8012d30:	89fa      	ldrh	r2, [r7, #14]
 8012d32:	69f9      	ldr	r1, [r7, #28]
 8012d34:	4798      	blx	r3
 8012d36:	4603      	mov	r3, r0
 8012d38:	74fb      	strb	r3, [r7, #19]
 8012d3a:	e001      	b.n	8012d40 <tcp_input+0x55c>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d44:	f113 0f0d 	cmn.w	r3, #13
 8012d48:	f000 8098 	beq.w	8012e7c <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012d4c:	4b53      	ldr	r3, [pc, #332]	; (8012e9c <tcp_input+0x6b8>)
 8012d4e:	2200      	movs	r2, #0
 8012d50:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012d52:	69f8      	ldr	r0, [r7, #28]
 8012d54:	f000 f90e 	bl	8012f74 <tcp_input_delayed_close>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f040 8090 	bne.w	8012e80 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012d60:	4b4c      	ldr	r3, [pc, #304]	; (8012e94 <tcp_input+0x6b0>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d041      	beq.n	8012dec <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d006      	beq.n	8012d7e <tcp_input+0x59a>
 8012d70:	4b4f      	ldr	r3, [pc, #316]	; (8012eb0 <tcp_input+0x6cc>)
 8012d72:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012d76:	494f      	ldr	r1, [pc, #316]	; (8012eb4 <tcp_input+0x6d0>)
 8012d78:	484f      	ldr	r0, [pc, #316]	; (8012eb8 <tcp_input+0x6d4>)
 8012d7a:	f007 fe43 	bl	801aa04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	7e9b      	ldrb	r3, [r3, #26]
 8012d82:	f003 0310 	and.w	r3, r3, #16
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d008      	beq.n	8012d9c <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012d8a:	4b42      	ldr	r3, [pc, #264]	; (8012e94 <tcp_input+0x6b0>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fd fe42 	bl	8010a18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012d94:	69f8      	ldr	r0, [r7, #28]
 8012d96:	f7fe fb9f 	bl	80114d8 <tcp_abort>
            goto aborted;
 8012d9a:	e090      	b.n	8012ebe <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d00c      	beq.n	8012dc0 <tcp_input+0x5dc>
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	6918      	ldr	r0, [r3, #16]
 8012db0:	4b38      	ldr	r3, [pc, #224]	; (8012e94 <tcp_input+0x6b0>)
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	2300      	movs	r3, #0
 8012db6:	69f9      	ldr	r1, [r7, #28]
 8012db8:	47a0      	blx	r4
 8012dba:	4603      	mov	r3, r0
 8012dbc:	74fb      	strb	r3, [r7, #19]
 8012dbe:	e008      	b.n	8012dd2 <tcp_input+0x5ee>
 8012dc0:	4b34      	ldr	r3, [pc, #208]	; (8012e94 <tcp_input+0x6b0>)
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	69f9      	ldr	r1, [r7, #28]
 8012dc8:	2000      	movs	r0, #0
 8012dca:	f7ff f98f 	bl	80120ec <tcp_recv_null>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012dd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dd6:	f113 0f0d 	cmn.w	r3, #13
 8012dda:	d053      	beq.n	8012e84 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d003      	beq.n	8012dec <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012de4:	4b2b      	ldr	r3, [pc, #172]	; (8012e94 <tcp_input+0x6b0>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012dec:	4b2a      	ldr	r3, [pc, #168]	; (8012e98 <tcp_input+0x6b4>)
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	f003 0320 	and.w	r3, r3, #32
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d030      	beq.n	8012e5a <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d009      	beq.n	8012e14 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e04:	7b5a      	ldrb	r2, [r3, #13]
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e0a:	f042 0220 	orr.w	r2, r2, #32
 8012e0e:	b2d2      	uxtb	r2, r2
 8012e10:	735a      	strb	r2, [r3, #13]
 8012e12:	e022      	b.n	8012e5a <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012e1c:	d005      	beq.n	8012e2a <tcp_input+0x646>
              pcb->rcv_wnd++;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e22:	3301      	adds	r3, #1
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00b      	beq.n	8012e4c <tcp_input+0x668>
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	6918      	ldr	r0, [r3, #16]
 8012e3e:	2300      	movs	r3, #0
 8012e40:	2200      	movs	r2, #0
 8012e42:	69f9      	ldr	r1, [r7, #28]
 8012e44:	47a0      	blx	r4
 8012e46:	4603      	mov	r3, r0
 8012e48:	74fb      	strb	r3, [r7, #19]
 8012e4a:	e001      	b.n	8012e50 <tcp_input+0x66c>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e54:	f113 0f0d 	cmn.w	r3, #13
 8012e58:	d016      	beq.n	8012e88 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012e5a:	4b13      	ldr	r3, [pc, #76]	; (8012ea8 <tcp_input+0x6c4>)
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012e60:	69f8      	ldr	r0, [r7, #28]
 8012e62:	f000 f887 	bl	8012f74 <tcp_input_delayed_close>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d127      	bne.n	8012ebc <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012e6c:	69f8      	ldr	r0, [r7, #28]
 8012e6e:	f002 fd9d 	bl	80159ac <tcp_output>
 8012e72:	e024      	b.n	8012ebe <tcp_input+0x6da>
        goto aborted;
 8012e74:	bf00      	nop
 8012e76:	e022      	b.n	8012ebe <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012e78:	bf00      	nop
 8012e7a:	e020      	b.n	8012ebe <tcp_input+0x6da>
              goto aborted;
 8012e7c:	bf00      	nop
 8012e7e:	e01e      	b.n	8012ebe <tcp_input+0x6da>
          goto aborted;
 8012e80:	bf00      	nop
 8012e82:	e01c      	b.n	8012ebe <tcp_input+0x6da>
            goto aborted;
 8012e84:	bf00      	nop
 8012e86:	e01a      	b.n	8012ebe <tcp_input+0x6da>
              goto aborted;
 8012e88:	bf00      	nop
 8012e8a:	e018      	b.n	8012ebe <tcp_input+0x6da>
 8012e8c:	240076dc 	.word	0x240076dc
 8012e90:	240076ec 	.word	0x240076ec
 8012e94:	2400770c 	.word	0x2400770c
 8012e98:	24007709 	.word	0x24007709
 8012e9c:	24007704 	.word	0x24007704
 8012ea0:	24007708 	.word	0x24007708
 8012ea4:	24007706 	.word	0x24007706
 8012ea8:	24007710 	.word	0x24007710
 8012eac:	240076d0 	.word	0x240076d0
 8012eb0:	0801d95c 	.word	0x0801d95c
 8012eb4:	0801db1c 	.word	0x0801db1c
 8012eb8:	0801d9c4 	.word	0x0801d9c4
          goto aborted;
 8012ebc:	bf00      	nop
    tcp_input_pcb = NULL;
 8012ebe:	4b24      	ldr	r3, [pc, #144]	; (8012f50 <tcp_input+0x76c>)
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012ec4:	4b23      	ldr	r3, [pc, #140]	; (8012f54 <tcp_input+0x770>)
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012eca:	4b23      	ldr	r3, [pc, #140]	; (8012f58 <tcp_input+0x774>)
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d039      	beq.n	8012f46 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 8012ed2:	4b21      	ldr	r3, [pc, #132]	; (8012f58 <tcp_input+0x774>)
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fd fd9e 	bl	8010a18 <pbuf_free>
      inseg.p = NULL;
 8012edc:	4b1e      	ldr	r3, [pc, #120]	; (8012f58 <tcp_input+0x774>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012ee2:	e030      	b.n	8012f46 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012ee4:	4b1d      	ldr	r3, [pc, #116]	; (8012f5c <tcp_input+0x778>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	899b      	ldrh	r3, [r3, #12]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fc fb1b 	bl	800f528 <lwip_htons>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	f003 0304 	and.w	r3, r3, #4
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d115      	bne.n	8012f28 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012efc:	4b18      	ldr	r3, [pc, #96]	; (8012f60 <tcp_input+0x77c>)
 8012efe:	6818      	ldr	r0, [r3, #0]
 8012f00:	4b18      	ldr	r3, [pc, #96]	; (8012f64 <tcp_input+0x780>)
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b18      	ldr	r3, [pc, #96]	; (8012f68 <tcp_input+0x784>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f0c:	4b13      	ldr	r3, [pc, #76]	; (8012f5c <tcp_input+0x778>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f10:	885b      	ldrh	r3, [r3, #2]
 8012f12:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f14:	4a11      	ldr	r2, [pc, #68]	; (8012f5c <tcp_input+0x778>)
 8012f16:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f18:	8812      	ldrh	r2, [r2, #0]
 8012f1a:	b292      	uxth	r2, r2
 8012f1c:	9201      	str	r2, [sp, #4]
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	4b12      	ldr	r3, [pc, #72]	; (8012f6c <tcp_input+0x788>)
 8012f22:	4a13      	ldr	r2, [pc, #76]	; (8012f70 <tcp_input+0x78c>)
 8012f24:	f002 ffc6 	bl	8015eb4 <tcp_rst>
    pbuf_free(p);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7fd fd75 	bl	8010a18 <pbuf_free>
  return;
 8012f2e:	e00a      	b.n	8012f46 <tcp_input+0x762>
    goto dropped;
 8012f30:	bf00      	nop
 8012f32:	e004      	b.n	8012f3e <tcp_input+0x75a>
    goto dropped;
 8012f34:	bf00      	nop
 8012f36:	e002      	b.n	8012f3e <tcp_input+0x75a>
    goto dropped;
 8012f38:	bf00      	nop
 8012f3a:	e000      	b.n	8012f3e <tcp_input+0x75a>
      goto dropped;
 8012f3c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7fd fd6a 	bl	8010a18 <pbuf_free>
 8012f44:	e000      	b.n	8012f48 <tcp_input+0x764>
  return;
 8012f46:	bf00      	nop
}
 8012f48:	3724      	adds	r7, #36	; 0x24
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd90      	pop	{r4, r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	24007710 	.word	0x24007710
 8012f54:	2400770c 	.word	0x2400770c
 8012f58:	240076dc 	.word	0x240076dc
 8012f5c:	240076ec 	.word	0x240076ec
 8012f60:	24007700 	.word	0x24007700
 8012f64:	24007706 	.word	0x24007706
 8012f68:	240076fc 	.word	0x240076fc
 8012f6c:	240045b8 	.word	0x240045b8
 8012f70:	240045bc 	.word	0x240045bc

08012f74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8012f7c:	4b14      	ldr	r3, [pc, #80]	; (8012fd0 <tcp_input_delayed_close+0x5c>)
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	f003 0310 	and.w	r3, r3, #16
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d01d      	beq.n	8012fc4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	7e9b      	ldrb	r3, [r3, #26]
 8012f8c:	f003 0310 	and.w	r3, r3, #16
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d10d      	bne.n	8012fb0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d008      	beq.n	8012fb0 <tcp_input_delayed_close+0x3c>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	6912      	ldr	r2, [r2, #16]
 8012fa8:	f06f 010e 	mvn.w	r1, #14
 8012fac:	4610      	mov	r0, r2
 8012fae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012fb0:	6879      	ldr	r1, [r7, #4]
 8012fb2:	4808      	ldr	r0, [pc, #32]	; (8012fd4 <tcp_input_delayed_close+0x60>)
 8012fb4:	f7ff fafc 	bl	80125b0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8012fb8:	6879      	ldr	r1, [r7, #4]
 8012fba:	2001      	movs	r0, #1
 8012fbc:	f7fc ff36 	bl	800fe2c <memp_free>
    return 1;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	e000      	b.n	8012fc6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8012fc4:	2300      	movs	r3, #0
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3708      	adds	r7, #8
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	24007709 	.word	0x24007709
 8012fd4:	240076d0 	.word	0x240076d0

08012fd8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b088      	sub	sp, #32
 8012fdc:	af02      	add	r7, sp, #8
 8012fde:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012fe0:	4b63      	ldr	r3, [pc, #396]	; (8013170 <tcp_listen_input+0x198>)
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	f003 0304 	and.w	r3, r3, #4
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f040 80bb 	bne.w	8013164 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012fee:	4b60      	ldr	r3, [pc, #384]	; (8013170 <tcp_listen_input+0x198>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	f003 0310 	and.w	r3, r3, #16
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d016      	beq.n	8013028 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ffa:	4b5e      	ldr	r3, [pc, #376]	; (8013174 <tcp_listen_input+0x19c>)
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	4b5e      	ldr	r3, [pc, #376]	; (8013178 <tcp_listen_input+0x1a0>)
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	461a      	mov	r2, r3
 8013004:	4b5d      	ldr	r3, [pc, #372]	; (801317c <tcp_listen_input+0x1a4>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801300a:	4b5d      	ldr	r3, [pc, #372]	; (8013180 <tcp_listen_input+0x1a8>)
 801300c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801300e:	885b      	ldrh	r3, [r3, #2]
 8013010:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013012:	4a5b      	ldr	r2, [pc, #364]	; (8013180 <tcp_listen_input+0x1a8>)
 8013014:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013016:	8812      	ldrh	r2, [r2, #0]
 8013018:	b292      	uxth	r2, r2
 801301a:	9201      	str	r2, [sp, #4]
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	4b59      	ldr	r3, [pc, #356]	; (8013184 <tcp_listen_input+0x1ac>)
 8013020:	4a59      	ldr	r2, [pc, #356]	; (8013188 <tcp_listen_input+0x1b0>)
 8013022:	f002 ff47 	bl	8015eb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013026:	e09f      	b.n	8013168 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8013028:	4b51      	ldr	r3, [pc, #324]	; (8013170 <tcp_listen_input+0x198>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	f003 0302 	and.w	r3, r3, #2
 8013030:	2b00      	cmp	r3, #0
 8013032:	f000 8099 	beq.w	8013168 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	7d5b      	ldrb	r3, [r3, #21]
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff f934 	bl	80122a8 <tcp_alloc>
 8013040:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d111      	bne.n	801306c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	699b      	ldr	r3, [r3, #24]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00a      	beq.n	8013066 <tcp_listen_input+0x8e>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	699b      	ldr	r3, [r3, #24]
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	6910      	ldr	r0, [r2, #16]
 8013058:	f04f 32ff 	mov.w	r2, #4294967295
 801305c:	2100      	movs	r1, #0
 801305e:	4798      	blx	r3
 8013060:	4603      	mov	r3, r0
 8013062:	73bb      	strb	r3, [r7, #14]
      return;
 8013064:	e081      	b.n	801316a <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013066:	23f0      	movs	r3, #240	; 0xf0
 8013068:	73bb      	strb	r3, [r7, #14]
      return;
 801306a:	e07e      	b.n	801316a <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801306c:	4b47      	ldr	r3, [pc, #284]	; (801318c <tcp_listen_input+0x1b4>)
 801306e:	695a      	ldr	r2, [r3, #20]
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013074:	4b45      	ldr	r3, [pc, #276]	; (801318c <tcp_listen_input+0x1b4>)
 8013076:	691a      	ldr	r2, [r3, #16]
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8ada      	ldrh	r2, [r3, #22]
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013084:	4b3e      	ldr	r3, [pc, #248]	; (8013180 <tcp_listen_input+0x1a8>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	b29a      	uxth	r2, r3
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	2203      	movs	r2, #3
 8013094:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013096:	4b39      	ldr	r3, [pc, #228]	; (801317c <tcp_listen_input+0x1a4>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	1c5a      	adds	r2, r3, #1
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80130a8:	6978      	ldr	r0, [r7, #20]
 80130aa:	f7ff fafd 	bl	80126a8 <tcp_next_iss>
 80130ae:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	693a      	ldr	r2, [r7, #16]
 80130b4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80130c8:	4b2c      	ldr	r3, [pc, #176]	; (801317c <tcp_listen_input+0x1a4>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	1e5a      	subs	r2, r3, #1
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	691a      	ldr	r2, [r3, #16]
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7a1b      	ldrb	r3, [r3, #8]
 80130e4:	f003 030c 	and.w	r3, r3, #12
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80130ee:	4b28      	ldr	r3, [pc, #160]	; (8013190 <tcp_listen_input+0x1b8>)
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	60da      	str	r2, [r3, #12]
 80130f6:	4a26      	ldr	r2, [pc, #152]	; (8013190 <tcp_listen_input+0x1b8>)
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	6013      	str	r3, [r2, #0]
 80130fc:	f003 f922 	bl	8016344 <tcp_timer_needed>
 8013100:	4b24      	ldr	r3, [pc, #144]	; (8013194 <tcp_listen_input+0x1bc>)
 8013102:	2201      	movs	r2, #1
 8013104:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013106:	6978      	ldr	r0, [r7, #20]
 8013108:	f001 fd0e 	bl	8014b28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801310c:	4b1c      	ldr	r3, [pc, #112]	; (8013180 <tcp_listen_input+0x1a8>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	89db      	ldrh	r3, [r3, #14]
 8013112:	b29a      	uxth	r2, r3
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	3304      	adds	r3, #4
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7ff fad1 	bl	80126d8 <tcp_eff_send_mss_impl>
 8013136:	4603      	mov	r3, r0
 8013138:	461a      	mov	r2, r3
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801313e:	2112      	movs	r1, #18
 8013140:	6978      	ldr	r0, [r7, #20]
 8013142:	f002 fadb 	bl	80156fc <tcp_enqueue_flags>
 8013146:	4603      	mov	r3, r0
 8013148:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d004      	beq.n	801315c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8013152:	2100      	movs	r1, #0
 8013154:	6978      	ldr	r0, [r7, #20]
 8013156:	f7fe f90d 	bl	8011374 <tcp_abandon>
      return;
 801315a:	e006      	b.n	801316a <tcp_listen_input+0x192>
    tcp_output(npcb);
 801315c:	6978      	ldr	r0, [r7, #20]
 801315e:	f002 fc25 	bl	80159ac <tcp_output>
  return;
 8013162:	e001      	b.n	8013168 <tcp_listen_input+0x190>
    return;
 8013164:	bf00      	nop
 8013166:	e000      	b.n	801316a <tcp_listen_input+0x192>
  return;
 8013168:	bf00      	nop
}
 801316a:	3718      	adds	r7, #24
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	24007708 	.word	0x24007708
 8013174:	24007700 	.word	0x24007700
 8013178:	24007706 	.word	0x24007706
 801317c:	240076fc 	.word	0x240076fc
 8013180:	240076ec 	.word	0x240076ec
 8013184:	240045b8 	.word	0x240045b8
 8013188:	240045bc 	.word	0x240045bc
 801318c:	240045a8 	.word	0x240045a8
 8013190:	240076d0 	.word	0x240076d0
 8013194:	240076d8 	.word	0x240076d8

08013198 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af02      	add	r7, sp, #8
 801319e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80131a0:	4b29      	ldr	r3, [pc, #164]	; (8013248 <tcp_timewait_input+0xb0>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	f003 0304 	and.w	r3, r3, #4
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d146      	bne.n	801323a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80131ac:	4b26      	ldr	r3, [pc, #152]	; (8013248 <tcp_timewait_input+0xb0>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	f003 0302 	and.w	r3, r3, #2
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d027      	beq.n	8013208 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80131b8:	4b24      	ldr	r3, [pc, #144]	; (801324c <tcp_timewait_input+0xb4>)
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	db2a      	blt.n	801321c <tcp_timewait_input+0x84>
 80131c6:	4b21      	ldr	r3, [pc, #132]	; (801324c <tcp_timewait_input+0xb4>)
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ce:	6879      	ldr	r1, [r7, #4]
 80131d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80131d2:	440b      	add	r3, r1
 80131d4:	1ad3      	subs	r3, r2, r3
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	dc20      	bgt.n	801321c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80131da:	4b1d      	ldr	r3, [pc, #116]	; (8013250 <tcp_timewait_input+0xb8>)
 80131dc:	6818      	ldr	r0, [r3, #0]
 80131de:	4b1d      	ldr	r3, [pc, #116]	; (8013254 <tcp_timewait_input+0xbc>)
 80131e0:	881b      	ldrh	r3, [r3, #0]
 80131e2:	461a      	mov	r2, r3
 80131e4:	4b19      	ldr	r3, [pc, #100]	; (801324c <tcp_timewait_input+0xb4>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131ea:	4b1b      	ldr	r3, [pc, #108]	; (8013258 <tcp_timewait_input+0xc0>)
 80131ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80131ee:	885b      	ldrh	r3, [r3, #2]
 80131f0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131f2:	4a19      	ldr	r2, [pc, #100]	; (8013258 <tcp_timewait_input+0xc0>)
 80131f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80131f6:	8812      	ldrh	r2, [r2, #0]
 80131f8:	b292      	uxth	r2, r2
 80131fa:	9201      	str	r2, [sp, #4]
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	4b17      	ldr	r3, [pc, #92]	; (801325c <tcp_timewait_input+0xc4>)
 8013200:	4a17      	ldr	r2, [pc, #92]	; (8013260 <tcp_timewait_input+0xc8>)
 8013202:	f002 fe57 	bl	8015eb4 <tcp_rst>
      return;
 8013206:	e01b      	b.n	8013240 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8013208:	4b0f      	ldr	r3, [pc, #60]	; (8013248 <tcp_timewait_input+0xb0>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	d003      	beq.n	801321c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013214:	4b13      	ldr	r3, [pc, #76]	; (8013264 <tcp_timewait_input+0xcc>)
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801321c:	4b0d      	ldr	r3, [pc, #52]	; (8013254 <tcp_timewait_input+0xbc>)
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d00c      	beq.n	801323e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	7e9b      	ldrb	r3, [r3, #26]
 8013228:	f043 0302 	orr.w	r3, r3, #2
 801322c:	b2da      	uxtb	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f002 fbba 	bl	80159ac <tcp_output>
  }
  return;
 8013238:	e001      	b.n	801323e <tcp_timewait_input+0xa6>
    return;
 801323a:	bf00      	nop
 801323c:	e000      	b.n	8013240 <tcp_timewait_input+0xa8>
  return;
 801323e:	bf00      	nop
}
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	24007708 	.word	0x24007708
 801324c:	240076fc 	.word	0x240076fc
 8013250:	24007700 	.word	0x24007700
 8013254:	24007706 	.word	0x24007706
 8013258:	240076ec 	.word	0x240076ec
 801325c:	240045b8 	.word	0x240045b8
 8013260:	240045bc 	.word	0x240045bc
 8013264:	240076c4 	.word	0x240076c4

08013268 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b08a      	sub	sp, #40	; 0x28
 801326c:	af02      	add	r7, sp, #8
 801326e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013270:	2300      	movs	r3, #0
 8013272:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013274:	2300      	movs	r3, #0
 8013276:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013278:	4b93      	ldr	r3, [pc, #588]	; (80134c8 <tcp_process+0x260>)
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	f003 0304 	and.w	r3, r3, #4
 8013280:	2b00      	cmp	r3, #0
 8013282:	d04e      	beq.n	8013322 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	7d1b      	ldrb	r3, [r3, #20]
 8013288:	2b02      	cmp	r3, #2
 801328a:	d108      	bne.n	801329e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013290:	4b8e      	ldr	r3, [pc, #568]	; (80134cc <tcp_process+0x264>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	429a      	cmp	r2, r3
 8013296:	d123      	bne.n	80132e0 <tcp_process+0x78>
        acceptable = 1;
 8013298:	2301      	movs	r3, #1
 801329a:	76fb      	strb	r3, [r7, #27]
 801329c:	e020      	b.n	80132e0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132a2:	4b8b      	ldr	r3, [pc, #556]	; (80134d0 <tcp_process+0x268>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d102      	bne.n	80132b0 <tcp_process+0x48>
        acceptable = 1;
 80132aa:	2301      	movs	r3, #1
 80132ac:	76fb      	strb	r3, [r7, #27]
 80132ae:	e017      	b.n	80132e0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80132b0:	4b87      	ldr	r3, [pc, #540]	; (80134d0 <tcp_process+0x268>)
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	db10      	blt.n	80132e0 <tcp_process+0x78>
 80132be:	4b84      	ldr	r3, [pc, #528]	; (80134d0 <tcp_process+0x268>)
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c6:	6879      	ldr	r1, [r7, #4]
 80132c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132ca:	440b      	add	r3, r1
 80132cc:	1ad3      	subs	r3, r2, r3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dc06      	bgt.n	80132e0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	7e9b      	ldrb	r3, [r3, #26]
 80132d6:	f043 0302 	orr.w	r3, r3, #2
 80132da:	b2da      	uxtb	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80132e0:	7efb      	ldrb	r3, [r7, #27]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d01b      	beq.n	801331e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7d1b      	ldrb	r3, [r3, #20]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d106      	bne.n	80132fc <tcp_process+0x94>
 80132ee:	4b79      	ldr	r3, [pc, #484]	; (80134d4 <tcp_process+0x26c>)
 80132f0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80132f4:	4978      	ldr	r1, [pc, #480]	; (80134d8 <tcp_process+0x270>)
 80132f6:	4879      	ldr	r0, [pc, #484]	; (80134dc <tcp_process+0x274>)
 80132f8:	f007 fb84 	bl	801aa04 <iprintf>
      recv_flags |= TF_RESET;
 80132fc:	4b78      	ldr	r3, [pc, #480]	; (80134e0 <tcp_process+0x278>)
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	f043 0308 	orr.w	r3, r3, #8
 8013304:	b2da      	uxtb	r2, r3
 8013306:	4b76      	ldr	r3, [pc, #472]	; (80134e0 <tcp_process+0x278>)
 8013308:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	7e9b      	ldrb	r3, [r3, #26]
 801330e:	f023 0301 	bic.w	r3, r3, #1
 8013312:	b2da      	uxtb	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8013318:	f06f 030d 	mvn.w	r3, #13
 801331c:	e348      	b.n	80139b0 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801331e:	2300      	movs	r3, #0
 8013320:	e346      	b.n	80139b0 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013322:	4b69      	ldr	r3, [pc, #420]	; (80134c8 <tcp_process+0x260>)
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	f003 0302 	and.w	r3, r3, #2
 801332a:	2b00      	cmp	r3, #0
 801332c:	d010      	beq.n	8013350 <tcp_process+0xe8>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	7d1b      	ldrb	r3, [r3, #20]
 8013332:	2b02      	cmp	r3, #2
 8013334:	d00c      	beq.n	8013350 <tcp_process+0xe8>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	7d1b      	ldrb	r3, [r3, #20]
 801333a:	2b03      	cmp	r3, #3
 801333c:	d008      	beq.n	8013350 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	7e9b      	ldrb	r3, [r3, #26]
 8013342:	f043 0302 	orr.w	r3, r3, #2
 8013346:	b2da      	uxtb	r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	e32f      	b.n	80139b0 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	7e9b      	ldrb	r3, [r3, #26]
 8013354:	f003 0310 	and.w	r3, r3, #16
 8013358:	2b00      	cmp	r3, #0
 801335a:	d103      	bne.n	8013364 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801335c:	4b61      	ldr	r3, [pc, #388]	; (80134e4 <tcp_process+0x27c>)
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2200      	movs	r2, #0
 8013368:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f001 fbdb 	bl	8014b28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	7d1b      	ldrb	r3, [r3, #20]
 8013376:	3b02      	subs	r3, #2
 8013378:	2b07      	cmp	r3, #7
 801337a:	f200 8309 	bhi.w	8013990 <tcp_process+0x728>
 801337e:	a201      	add	r2, pc, #4	; (adr r2, 8013384 <tcp_process+0x11c>)
 8013380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013384:	080133a5 	.word	0x080133a5
 8013388:	0801359b 	.word	0x0801359b
 801338c:	080136f3 	.word	0x080136f3
 8013390:	0801371d 	.word	0x0801371d
 8013394:	0801383f 	.word	0x0801383f
 8013398:	080136f3 	.word	0x080136f3
 801339c:	080138cb 	.word	0x080138cb
 80133a0:	0801395b 	.word	0x0801395b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80133a4:	4b48      	ldr	r3, [pc, #288]	; (80134c8 <tcp_process+0x260>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	f003 0310 	and.w	r3, r3, #16
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 80ca 	beq.w	8013546 <tcp_process+0x2de>
 80133b2:	4b45      	ldr	r3, [pc, #276]	; (80134c8 <tcp_process+0x260>)
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	f003 0302 	and.w	r3, r3, #2
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f000 80c3 	beq.w	8013546 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133c4:	1c5a      	adds	r2, r3, #1
 80133c6:	4b41      	ldr	r3, [pc, #260]	; (80134cc <tcp_process+0x264>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	f040 80bb 	bne.w	8013546 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 80133d0:	4b3f      	ldr	r3, [pc, #252]	; (80134d0 <tcp_process+0x268>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80133e2:	4b3a      	ldr	r3, [pc, #232]	; (80134cc <tcp_process+0x264>)
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80133ea:	4b3f      	ldr	r3, [pc, #252]	; (80134e8 <tcp_process+0x280>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	89db      	ldrh	r3, [r3, #14]
 80133f0:	b29a      	uxth	r2, r3
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013404:	4b32      	ldr	r3, [pc, #200]	; (80134d0 <tcp_process+0x268>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	1e5a      	subs	r2, r3, #1
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2204      	movs	r2, #4
 8013412:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3304      	adds	r3, #4
 801341c:	4619      	mov	r1, r3
 801341e:	4610      	mov	r0, r2
 8013420:	f7ff f95a 	bl	80126d8 <tcp_eff_send_mss_impl>
 8013424:	4603      	mov	r3, r0
 8013426:	461a      	mov	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	f241 121c 	movw	r2, #4380	; 0x111c
 8013436:	429a      	cmp	r2, r3
 8013438:	bf38      	it	cc
 801343a:	461a      	movcc	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4293      	cmp	r3, r2
 8013444:	bf28      	it	cs
 8013446:	4613      	movcs	r3, r2
 8013448:	b29a      	uxth	r2, r3
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013456:	2b00      	cmp	r3, #0
 8013458:	d106      	bne.n	8013468 <tcp_process+0x200>
 801345a:	4b1e      	ldr	r3, [pc, #120]	; (80134d4 <tcp_process+0x26c>)
 801345c:	f240 321a 	movw	r2, #794	; 0x31a
 8013460:	4922      	ldr	r1, [pc, #136]	; (80134ec <tcp_process+0x284>)
 8013462:	481e      	ldr	r0, [pc, #120]	; (80134dc <tcp_process+0x274>)
 8013464:	f007 face 	bl	801aa04 <iprintf>
      --pcb->snd_queuelen;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801346e:	3b01      	subs	r3, #1
 8013470:	b29a      	uxth	r2, r3
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801347c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d111      	bne.n	80134a8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013488:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d106      	bne.n	801349e <tcp_process+0x236>
 8013490:	4b10      	ldr	r3, [pc, #64]	; (80134d4 <tcp_process+0x26c>)
 8013492:	f240 3222 	movw	r2, #802	; 0x322
 8013496:	4916      	ldr	r1, [pc, #88]	; (80134f0 <tcp_process+0x288>)
 8013498:	4810      	ldr	r0, [pc, #64]	; (80134dc <tcp_process+0x274>)
 801349a:	f007 fab3 	bl	801aa04 <iprintf>
        pcb->unsent = rseg->next;
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	669a      	str	r2, [r3, #104]	; 0x68
 80134a6:	e003      	b.n	80134b0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80134b0:	69f8      	ldr	r0, [r7, #28]
 80134b2:	f7fe fde7 	bl	8012084 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d11a      	bne.n	80134f4 <tcp_process+0x28c>
        pcb->rtime = -1;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134c4:	861a      	strh	r2, [r3, #48]	; 0x30
 80134c6:	e01c      	b.n	8013502 <tcp_process+0x29a>
 80134c8:	24007708 	.word	0x24007708
 80134cc:	24007700 	.word	0x24007700
 80134d0:	240076fc 	.word	0x240076fc
 80134d4:	0801d95c 	.word	0x0801d95c
 80134d8:	0801db38 	.word	0x0801db38
 80134dc:	0801d9c4 	.word	0x0801d9c4
 80134e0:	24007709 	.word	0x24007709
 80134e4:	240076c4 	.word	0x240076c4
 80134e8:	240076ec 	.word	0x240076ec
 80134ec:	0801db58 	.word	0x0801db58
 80134f0:	0801db70 	.word	0x0801db70
      } else {
        pcb->rtime = 0;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2200      	movs	r2, #0
 80134f8:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00a      	beq.n	8013522 <tcp_process+0x2ba>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	6910      	ldr	r0, [r2, #16]
 8013516:	2200      	movs	r2, #0
 8013518:	6879      	ldr	r1, [r7, #4]
 801351a:	4798      	blx	r3
 801351c:	4603      	mov	r3, r0
 801351e:	76bb      	strb	r3, [r7, #26]
 8013520:	e001      	b.n	8013526 <tcp_process+0x2be>
 8013522:	2300      	movs	r3, #0
 8013524:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8013526:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801352a:	f113 0f0d 	cmn.w	r3, #13
 801352e:	d102      	bne.n	8013536 <tcp_process+0x2ce>
        return ERR_ABRT;
 8013530:	f06f 030c 	mvn.w	r3, #12
 8013534:	e23c      	b.n	80139b0 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	7e9b      	ldrb	r3, [r3, #26]
 801353a:	f043 0302 	orr.w	r3, r3, #2
 801353e:	b2da      	uxtb	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8013544:	e226      	b.n	8013994 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8013546:	4b93      	ldr	r3, [pc, #588]	; (8013794 <tcp_process+0x52c>)
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	f003 0310 	and.w	r3, r3, #16
 801354e:	2b00      	cmp	r3, #0
 8013550:	f000 8220 	beq.w	8013994 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013554:	4b90      	ldr	r3, [pc, #576]	; (8013798 <tcp_process+0x530>)
 8013556:	6818      	ldr	r0, [r3, #0]
 8013558:	4b90      	ldr	r3, [pc, #576]	; (801379c <tcp_process+0x534>)
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	461a      	mov	r2, r3
 801355e:	4b90      	ldr	r3, [pc, #576]	; (80137a0 <tcp_process+0x538>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013564:	4b8f      	ldr	r3, [pc, #572]	; (80137a4 <tcp_process+0x53c>)
 8013566:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013568:	885b      	ldrh	r3, [r3, #2]
 801356a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801356c:	4a8d      	ldr	r2, [pc, #564]	; (80137a4 <tcp_process+0x53c>)
 801356e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013570:	8812      	ldrh	r2, [r2, #0]
 8013572:	b292      	uxth	r2, r2
 8013574:	9201      	str	r2, [sp, #4]
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	4b8b      	ldr	r3, [pc, #556]	; (80137a8 <tcp_process+0x540>)
 801357a:	4a8c      	ldr	r2, [pc, #560]	; (80137ac <tcp_process+0x544>)
 801357c:	f002 fc9a 	bl	8015eb4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013586:	2b05      	cmp	r3, #5
 8013588:	f200 8204 	bhi.w	8013994 <tcp_process+0x72c>
        pcb->rtime = 0;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f002 fd04 	bl	8015fa0 <tcp_rexmit_rto>
    break;
 8013598:	e1fc      	b.n	8013994 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801359a:	4b7e      	ldr	r3, [pc, #504]	; (8013794 <tcp_process+0x52c>)
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	f003 0310 	and.w	r3, r3, #16
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f000 8091 	beq.w	80136ca <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80135a8:	4b7b      	ldr	r3, [pc, #492]	; (8013798 <tcp_process+0x530>)
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	3b01      	subs	r3, #1
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	db71      	blt.n	801369c <tcp_process+0x434>
 80135b8:	4b77      	ldr	r3, [pc, #476]	; (8013798 <tcp_process+0x530>)
 80135ba:	681a      	ldr	r2, [r3, #0]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135c0:	1ad3      	subs	r3, r2, r3
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	dc6a      	bgt.n	801369c <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2204      	movs	r2, #4
 80135ca:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00b      	beq.n	80135ec <tcp_process+0x384>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135d8:	699b      	ldr	r3, [r3, #24]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d106      	bne.n	80135ec <tcp_process+0x384>
 80135de:	4b74      	ldr	r3, [pc, #464]	; (80137b0 <tcp_process+0x548>)
 80135e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80135e4:	4973      	ldr	r1, [pc, #460]	; (80137b4 <tcp_process+0x54c>)
 80135e6:	4874      	ldr	r0, [pc, #464]	; (80137b8 <tcp_process+0x550>)
 80135e8:	f007 fa0c 	bl	801aa04 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80135f4:	23fa      	movs	r3, #250	; 0xfa
 80135f6:	76bb      	strb	r3, [r7, #26]
 80135f8:	e011      	b.n	801361e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135fe:	699b      	ldr	r3, [r3, #24]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00a      	beq.n	801361a <tcp_process+0x3b2>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013608:	699b      	ldr	r3, [r3, #24]
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	6910      	ldr	r0, [r2, #16]
 801360e:	2200      	movs	r2, #0
 8013610:	6879      	ldr	r1, [r7, #4]
 8013612:	4798      	blx	r3
 8013614:	4603      	mov	r3, r0
 8013616:	76bb      	strb	r3, [r7, #26]
 8013618:	e001      	b.n	801361e <tcp_process+0x3b6>
 801361a:	23f0      	movs	r3, #240	; 0xf0
 801361c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801361e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00a      	beq.n	801363c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8013626:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801362a:	f113 0f0d 	cmn.w	r3, #13
 801362e:	d002      	beq.n	8013636 <tcp_process+0x3ce>
            tcp_abort(pcb);
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f7fd ff51 	bl	80114d8 <tcp_abort>
          }
          return ERR_ABRT;
 8013636:	f06f 030c 	mvn.w	r3, #12
 801363a:	e1b9      	b.n	80139b0 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f000 fa3d 	bl	8013abc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013642:	4b5e      	ldr	r3, [pc, #376]	; (80137bc <tcp_process+0x554>)
 8013644:	881b      	ldrh	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d005      	beq.n	8013656 <tcp_process+0x3ee>
          recv_acked--;
 801364a:	4b5c      	ldr	r3, [pc, #368]	; (80137bc <tcp_process+0x554>)
 801364c:	881b      	ldrh	r3, [r3, #0]
 801364e:	3b01      	subs	r3, #1
 8013650:	b29a      	uxth	r2, r3
 8013652:	4b5a      	ldr	r3, [pc, #360]	; (80137bc <tcp_process+0x554>)
 8013654:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801365a:	005b      	lsls	r3, r3, #1
 801365c:	f241 121c 	movw	r2, #4380	; 0x111c
 8013660:	429a      	cmp	r2, r3
 8013662:	bf38      	it	cc
 8013664:	461a      	movcc	r2, r3
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	4293      	cmp	r3, r2
 801366e:	bf28      	it	cs
 8013670:	4613      	movcs	r3, r2
 8013672:	b29a      	uxth	r2, r3
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801367a:	4b51      	ldr	r3, [pc, #324]	; (80137c0 <tcp_process+0x558>)
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	f003 0320 	and.w	r3, r3, #32
 8013682:	2b00      	cmp	r3, #0
 8013684:	d034      	beq.n	80136f0 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	7e9b      	ldrb	r3, [r3, #26]
 801368a:	f043 0302 	orr.w	r3, r3, #2
 801368e:	b2da      	uxtb	r2, r3
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2207      	movs	r2, #7
 8013698:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801369a:	e029      	b.n	80136f0 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801369c:	4b3e      	ldr	r3, [pc, #248]	; (8013798 <tcp_process+0x530>)
 801369e:	6818      	ldr	r0, [r3, #0]
 80136a0:	4b3e      	ldr	r3, [pc, #248]	; (801379c <tcp_process+0x534>)
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	461a      	mov	r2, r3
 80136a6:	4b3e      	ldr	r3, [pc, #248]	; (80137a0 <tcp_process+0x538>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136ac:	4b3d      	ldr	r3, [pc, #244]	; (80137a4 <tcp_process+0x53c>)
 80136ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80136b0:	885b      	ldrh	r3, [r3, #2]
 80136b2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136b4:	4a3b      	ldr	r2, [pc, #236]	; (80137a4 <tcp_process+0x53c>)
 80136b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80136b8:	8812      	ldrh	r2, [r2, #0]
 80136ba:	b292      	uxth	r2, r2
 80136bc:	9201      	str	r2, [sp, #4]
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	4b39      	ldr	r3, [pc, #228]	; (80137a8 <tcp_process+0x540>)
 80136c2:	4a3a      	ldr	r2, [pc, #232]	; (80137ac <tcp_process+0x544>)
 80136c4:	f002 fbf6 	bl	8015eb4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80136c8:	e166      	b.n	8013998 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80136ca:	4b32      	ldr	r3, [pc, #200]	; (8013794 <tcp_process+0x52c>)
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	f003 0302 	and.w	r3, r3, #2
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	f000 8160 	beq.w	8013998 <tcp_process+0x730>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136dc:	1e5a      	subs	r2, r3, #1
 80136de:	4b30      	ldr	r3, [pc, #192]	; (80137a0 <tcp_process+0x538>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	f040 8158 	bne.w	8013998 <tcp_process+0x730>
      tcp_rexmit(pcb);
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f002 fc8f 	bl	801600c <tcp_rexmit>
    break;
 80136ee:	e153      	b.n	8013998 <tcp_process+0x730>
 80136f0:	e152      	b.n	8013998 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 f9e2 	bl	8013abc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80136f8:	4b31      	ldr	r3, [pc, #196]	; (80137c0 <tcp_process+0x558>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f003 0320 	and.w	r3, r3, #32
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 814b 	beq.w	801399c <tcp_process+0x734>
      tcp_ack_now(pcb);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	7e9b      	ldrb	r3, [r3, #26]
 801370a:	f043 0302 	orr.w	r3, r3, #2
 801370e:	b2da      	uxtb	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2207      	movs	r2, #7
 8013718:	751a      	strb	r2, [r3, #20]
    }
    break;
 801371a:	e13f      	b.n	801399c <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 f9cd 	bl	8013abc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013722:	4b27      	ldr	r3, [pc, #156]	; (80137c0 <tcp_process+0x558>)
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	f003 0320 	and.w	r3, r3, #32
 801372a:	2b00      	cmp	r3, #0
 801372c:	d070      	beq.n	8013810 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801372e:	4b19      	ldr	r3, [pc, #100]	; (8013794 <tcp_process+0x52c>)
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f003 0310 	and.w	r3, r3, #16
 8013736:	2b00      	cmp	r3, #0
 8013738:	d05f      	beq.n	80137fa <tcp_process+0x592>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801373e:	4b16      	ldr	r3, [pc, #88]	; (8013798 <tcp_process+0x530>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	429a      	cmp	r2, r3
 8013744:	d159      	bne.n	80137fa <tcp_process+0x592>
          pcb->unsent == NULL) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801374a:	2b00      	cmp	r3, #0
 801374c:	d155      	bne.n	80137fa <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	7e9b      	ldrb	r3, [r3, #26]
 8013752:	f043 0302 	orr.w	r3, r3, #2
 8013756:	b2da      	uxtb	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7fe fee5 	bl	801252c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013762:	4b18      	ldr	r3, [pc, #96]	; (80137c4 <tcp_process+0x55c>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	687a      	ldr	r2, [r7, #4]
 8013768:	429a      	cmp	r2, r3
 801376a:	d105      	bne.n	8013778 <tcp_process+0x510>
 801376c:	4b15      	ldr	r3, [pc, #84]	; (80137c4 <tcp_process+0x55c>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	4a14      	ldr	r2, [pc, #80]	; (80137c4 <tcp_process+0x55c>)
 8013774:	6013      	str	r3, [r2, #0]
 8013776:	e02d      	b.n	80137d4 <tcp_process+0x56c>
 8013778:	4b12      	ldr	r3, [pc, #72]	; (80137c4 <tcp_process+0x55c>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	617b      	str	r3, [r7, #20]
 801377e:	e026      	b.n	80137ce <tcp_process+0x566>
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	429a      	cmp	r2, r3
 8013788:	d11e      	bne.n	80137c8 <tcp_process+0x560>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	68da      	ldr	r2, [r3, #12]
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	60da      	str	r2, [r3, #12]
 8013792:	e01f      	b.n	80137d4 <tcp_process+0x56c>
 8013794:	24007708 	.word	0x24007708
 8013798:	24007700 	.word	0x24007700
 801379c:	24007706 	.word	0x24007706
 80137a0:	240076fc 	.word	0x240076fc
 80137a4:	240076ec 	.word	0x240076ec
 80137a8:	240045b8 	.word	0x240045b8
 80137ac:	240045bc 	.word	0x240045bc
 80137b0:	0801d95c 	.word	0x0801d95c
 80137b4:	0801db84 	.word	0x0801db84
 80137b8:	0801d9c4 	.word	0x0801d9c4
 80137bc:	24007704 	.word	0x24007704
 80137c0:	24007709 	.word	0x24007709
 80137c4:	240076d0 	.word	0x240076d0
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	617b      	str	r3, [r7, #20]
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d1d5      	bne.n	8013780 <tcp_process+0x518>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2200      	movs	r2, #0
 80137d8:	60da      	str	r2, [r3, #12]
 80137da:	4b77      	ldr	r3, [pc, #476]	; (80139b8 <tcp_process+0x750>)
 80137dc:	2201      	movs	r2, #1
 80137de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	220a      	movs	r2, #10
 80137e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80137e6:	4b75      	ldr	r3, [pc, #468]	; (80139bc <tcp_process+0x754>)
 80137e8:	681a      	ldr	r2, [r3, #0]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	60da      	str	r2, [r3, #12]
 80137ee:	4a73      	ldr	r2, [pc, #460]	; (80139bc <tcp_process+0x754>)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6013      	str	r3, [r2, #0]
 80137f4:	f002 fda6 	bl	8016344 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80137f8:	e0d2      	b.n	80139a0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	7e9b      	ldrb	r3, [r3, #26]
 80137fe:	f043 0302 	orr.w	r3, r3, #2
 8013802:	b2da      	uxtb	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2208      	movs	r2, #8
 801380c:	751a      	strb	r2, [r3, #20]
    break;
 801380e:	e0c7      	b.n	80139a0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013810:	4b6b      	ldr	r3, [pc, #428]	; (80139c0 <tcp_process+0x758>)
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	f003 0310 	and.w	r3, r3, #16
 8013818:	2b00      	cmp	r3, #0
 801381a:	f000 80c1 	beq.w	80139a0 <tcp_process+0x738>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013822:	4b68      	ldr	r3, [pc, #416]	; (80139c4 <tcp_process+0x75c>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	f040 80ba 	bne.w	80139a0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013830:	2b00      	cmp	r3, #0
 8013832:	f040 80b5 	bne.w	80139a0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2206      	movs	r2, #6
 801383a:	751a      	strb	r2, [r3, #20]
    break;
 801383c:	e0b0      	b.n	80139a0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f000 f93c 	bl	8013abc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013844:	4b60      	ldr	r3, [pc, #384]	; (80139c8 <tcp_process+0x760>)
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	f003 0320 	and.w	r3, r3, #32
 801384c:	2b00      	cmp	r3, #0
 801384e:	f000 80a9 	beq.w	80139a4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	7e9b      	ldrb	r3, [r3, #26]
 8013856:	f043 0302 	orr.w	r3, r3, #2
 801385a:	b2da      	uxtb	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7fe fe63 	bl	801252c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013866:	4b59      	ldr	r3, [pc, #356]	; (80139cc <tcp_process+0x764>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	429a      	cmp	r2, r3
 801386e:	d105      	bne.n	801387c <tcp_process+0x614>
 8013870:	4b56      	ldr	r3, [pc, #344]	; (80139cc <tcp_process+0x764>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	4a55      	ldr	r2, [pc, #340]	; (80139cc <tcp_process+0x764>)
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	e013      	b.n	80138a4 <tcp_process+0x63c>
 801387c:	4b53      	ldr	r3, [pc, #332]	; (80139cc <tcp_process+0x764>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	613b      	str	r3, [r7, #16]
 8013882:	e00c      	b.n	801389e <tcp_process+0x636>
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	429a      	cmp	r2, r3
 801388c:	d104      	bne.n	8013898 <tcp_process+0x630>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	68da      	ldr	r2, [r3, #12]
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	60da      	str	r2, [r3, #12]
 8013896:	e005      	b.n	80138a4 <tcp_process+0x63c>
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	613b      	str	r3, [r7, #16]
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d1ef      	bne.n	8013884 <tcp_process+0x61c>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2200      	movs	r2, #0
 80138a8:	60da      	str	r2, [r3, #12]
 80138aa:	4b43      	ldr	r3, [pc, #268]	; (80139b8 <tcp_process+0x750>)
 80138ac:	2201      	movs	r2, #1
 80138ae:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	220a      	movs	r2, #10
 80138b4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80138b6:	4b41      	ldr	r3, [pc, #260]	; (80139bc <tcp_process+0x754>)
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	60da      	str	r2, [r3, #12]
 80138be:	4a3f      	ldr	r2, [pc, #252]	; (80139bc <tcp_process+0x754>)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6013      	str	r3, [r2, #0]
 80138c4:	f002 fd3e 	bl	8016344 <tcp_timer_needed>
    }
    break;
 80138c8:	e06c      	b.n	80139a4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 f8f6 	bl	8013abc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80138d0:	4b3b      	ldr	r3, [pc, #236]	; (80139c0 <tcp_process+0x758>)
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	f003 0310 	and.w	r3, r3, #16
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d065      	beq.n	80139a8 <tcp_process+0x740>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138e0:	4b38      	ldr	r3, [pc, #224]	; (80139c4 <tcp_process+0x75c>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d15f      	bne.n	80139a8 <tcp_process+0x740>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d15b      	bne.n	80139a8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7fe fe1b 	bl	801252c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80138f6:	4b35      	ldr	r3, [pc, #212]	; (80139cc <tcp_process+0x764>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d105      	bne.n	801390c <tcp_process+0x6a4>
 8013900:	4b32      	ldr	r3, [pc, #200]	; (80139cc <tcp_process+0x764>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	4a31      	ldr	r2, [pc, #196]	; (80139cc <tcp_process+0x764>)
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	e013      	b.n	8013934 <tcp_process+0x6cc>
 801390c:	4b2f      	ldr	r3, [pc, #188]	; (80139cc <tcp_process+0x764>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	60fb      	str	r3, [r7, #12]
 8013912:	e00c      	b.n	801392e <tcp_process+0x6c6>
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	429a      	cmp	r2, r3
 801391c:	d104      	bne.n	8013928 <tcp_process+0x6c0>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	68da      	ldr	r2, [r3, #12]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	60da      	str	r2, [r3, #12]
 8013926:	e005      	b.n	8013934 <tcp_process+0x6cc>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	60fb      	str	r3, [r7, #12]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d1ef      	bne.n	8013914 <tcp_process+0x6ac>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	60da      	str	r2, [r3, #12]
 801393a:	4b1f      	ldr	r3, [pc, #124]	; (80139b8 <tcp_process+0x750>)
 801393c:	2201      	movs	r2, #1
 801393e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	220a      	movs	r2, #10
 8013944:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013946:	4b1d      	ldr	r3, [pc, #116]	; (80139bc <tcp_process+0x754>)
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	60da      	str	r2, [r3, #12]
 801394e:	4a1b      	ldr	r2, [pc, #108]	; (80139bc <tcp_process+0x754>)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	f002 fcf6 	bl	8016344 <tcp_timer_needed>
    }
    break;
 8013958:	e026      	b.n	80139a8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 f8ae 	bl	8013abc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013960:	4b17      	ldr	r3, [pc, #92]	; (80139c0 <tcp_process+0x758>)
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	f003 0310 	and.w	r3, r3, #16
 8013968:	2b00      	cmp	r3, #0
 801396a:	d01f      	beq.n	80139ac <tcp_process+0x744>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013970:	4b14      	ldr	r3, [pc, #80]	; (80139c4 <tcp_process+0x75c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	429a      	cmp	r2, r3
 8013976:	d119      	bne.n	80139ac <tcp_process+0x744>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801397c:	2b00      	cmp	r3, #0
 801397e:	d115      	bne.n	80139ac <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8013980:	4b11      	ldr	r3, [pc, #68]	; (80139c8 <tcp_process+0x760>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	f043 0310 	orr.w	r3, r3, #16
 8013988:	b2da      	uxtb	r2, r3
 801398a:	4b0f      	ldr	r3, [pc, #60]	; (80139c8 <tcp_process+0x760>)
 801398c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801398e:	e00d      	b.n	80139ac <tcp_process+0x744>
  default:
    break;
 8013990:	bf00      	nop
 8013992:	e00c      	b.n	80139ae <tcp_process+0x746>
    break;
 8013994:	bf00      	nop
 8013996:	e00a      	b.n	80139ae <tcp_process+0x746>
    break;
 8013998:	bf00      	nop
 801399a:	e008      	b.n	80139ae <tcp_process+0x746>
    break;
 801399c:	bf00      	nop
 801399e:	e006      	b.n	80139ae <tcp_process+0x746>
    break;
 80139a0:	bf00      	nop
 80139a2:	e004      	b.n	80139ae <tcp_process+0x746>
    break;
 80139a4:	bf00      	nop
 80139a6:	e002      	b.n	80139ae <tcp_process+0x746>
    break;
 80139a8:	bf00      	nop
 80139aa:	e000      	b.n	80139ae <tcp_process+0x746>
    break;
 80139ac:	bf00      	nop
  }
  return ERR_OK;
 80139ae:	2300      	movs	r3, #0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3720      	adds	r7, #32
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	240076d8 	.word	0x240076d8
 80139bc:	240076d4 	.word	0x240076d4
 80139c0:	24007708 	.word	0x24007708
 80139c4:	24007700 	.word	0x24007700
 80139c8:	24007709 	.word	0x24007709
 80139cc:	240076d0 	.word	0x240076d0

080139d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80139d0:	b590      	push	{r4, r7, lr}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	899b      	ldrh	r3, [r3, #12]
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fb fda0 	bl	800f528 <lwip_htons>
 80139e8:	4603      	mov	r3, r0
 80139ea:	f003 0301 	and.w	r3, r3, #1
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d027      	beq.n	8013a42 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80139f2:	6838      	ldr	r0, [r7, #0]
 80139f4:	f7fe fb31 	bl	801205a <tcp_segs_free>
    next = NULL;
 80139f8:	2300      	movs	r3, #0
 80139fa:	603b      	str	r3, [r7, #0]
 80139fc:	e055      	b.n	8013aaa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	899b      	ldrh	r3, [r3, #12]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fb fd8e 	bl	800f528 <lwip_htons>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	f003 0301 	and.w	r3, r3, #1
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00d      	beq.n	8013a32 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	899b      	ldrh	r3, [r3, #12]
 8013a1c:	b29c      	uxth	r4, r3
 8013a1e:	2001      	movs	r0, #1
 8013a20:	f7fb fd82 	bl	800f528 <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	4322      	orrs	r2, r4
 8013a2e:	b292      	uxth	r2, r2
 8013a30:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f7fe fb21 	bl	8012084 <tcp_seg_free>
    while (next &&
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d00e      	beq.n	8013a66 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	891b      	ldrh	r3, [r3, #8]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	4b1a      	ldr	r3, [pc, #104]	; (8013ab8 <tcp_oos_insert_segment+0xe8>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	441a      	add	r2, r3
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	8909      	ldrh	r1, [r1, #8]
 8013a5e:	440b      	add	r3, r1
 8013a60:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	dacb      	bge.n	80139fe <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d01e      	beq.n	8013aaa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	891b      	ldrh	r3, [r3, #8]
 8013a70:	461a      	mov	r2, r3
 8013a72:	4b11      	ldr	r3, [pc, #68]	; (8013ab8 <tcp_oos_insert_segment+0xe8>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	441a      	add	r2, r3
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	dd12      	ble.n	8013aaa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	4b0a      	ldr	r3, [pc, #40]	; (8013ab8 <tcp_oos_insert_segment+0xe8>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685a      	ldr	r2, [r3, #4]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	891b      	ldrh	r3, [r3, #8]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	4610      	mov	r0, r2
 8013aa6:	f7fc fe43 	bl	8010730 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	683a      	ldr	r2, [r7, #0]
 8013aae:	601a      	str	r2, [r3, #0]
}
 8013ab0:	bf00      	nop
 8013ab2:	3714      	adds	r7, #20
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd90      	pop	{r4, r7, pc}
 8013ab8:	240076fc 	.word	0x240076fc

08013abc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013abe:	b08d      	sub	sp, #52	; 0x34
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	7d1b      	ldrb	r3, [r3, #20]
 8013acc:	2b03      	cmp	r3, #3
 8013ace:	d806      	bhi.n	8013ade <tcp_receive+0x22>
 8013ad0:	4b98      	ldr	r3, [pc, #608]	; (8013d34 <tcp_receive+0x278>)
 8013ad2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8013ad6:	4998      	ldr	r1, [pc, #608]	; (8013d38 <tcp_receive+0x27c>)
 8013ad8:	4898      	ldr	r0, [pc, #608]	; (8013d3c <tcp_receive+0x280>)
 8013ada:	f006 ff93 	bl	801aa04 <iprintf>

  if (flags & TCP_ACK) {
 8013ade:	4b98      	ldr	r3, [pc, #608]	; (8013d40 <tcp_receive+0x284>)
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	f003 0310 	and.w	r3, r3, #16
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f000 82c1 	beq.w	801406e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013af2:	461a      	mov	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013af8:	4413      	add	r3, r2
 8013afa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b00:	4b90      	ldr	r3, [pc, #576]	; (8013d44 <tcp_receive+0x288>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	db1b      	blt.n	8013b42 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b0e:	4b8d      	ldr	r3, [pc, #564]	; (8013d44 <tcp_receive+0x288>)
 8013b10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d106      	bne.n	8013b24 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013b1a:	4b8b      	ldr	r3, [pc, #556]	; (8013d48 <tcp_receive+0x28c>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	db0e      	blt.n	8013b42 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013b28:	4b87      	ldr	r3, [pc, #540]	; (8013d48 <tcp_receive+0x28c>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d141      	bne.n	8013bb4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b30:	4b86      	ldr	r3, [pc, #536]	; (8013d4c <tcp_receive+0x290>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	89db      	ldrh	r3, [r3, #14]
 8013b36:	b29a      	uxth	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d938      	bls.n	8013bb4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013b42:	4b82      	ldr	r3, [pc, #520]	; (8013d4c <tcp_receive+0x290>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	89db      	ldrh	r3, [r3, #14]
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d205      	bcs.n	8013b6c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8013b6c:	4b75      	ldr	r3, [pc, #468]	; (8013d44 <tcp_receive+0x288>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8013b74:	4b74      	ldr	r3, [pc, #464]	; (8013d48 <tcp_receive+0x28c>)
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d10d      	bne.n	8013ba2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d111      	bne.n	8013bb4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2200      	movs	r2, #0
 8013b94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013ba0:	e008      	b.n	8013bb4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d003      	beq.n	8013bb4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013bb4:	4b64      	ldr	r3, [pc, #400]	; (8013d48 <tcp_receive+0x28c>)
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	dc53      	bgt.n	8013c6a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013bc2:	4b63      	ldr	r3, [pc, #396]	; (8013d50 <tcp_receive+0x294>)
 8013bc4:	881b      	ldrh	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d146      	bne.n	8013c58 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bce:	687a      	ldr	r2, [r7, #4]
 8013bd0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8013bd4:	4413      	add	r3, r2
 8013bd6:	697a      	ldr	r2, [r7, #20]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d13d      	bne.n	8013c58 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	db38      	blt.n	8013c58 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013bea:	4b57      	ldr	r3, [pc, #348]	; (8013d48 <tcp_receive+0x28c>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d132      	bne.n	8013c58 <tcp_receive+0x19c>
              found_dupack = 1;
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013bfc:	2bff      	cmp	r3, #255	; 0xff
 8013bfe:	d007      	beq.n	8013c10 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013c06:	3301      	adds	r3, #1
 8013c08:	b2da      	uxtb	r2, r3
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d916      	bls.n	8013c48 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c24:	4413      	add	r3, r2
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d912      	bls.n	8013c58 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c3c:	4413      	add	r3, r2
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c46:	e007      	b.n	8013c58 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013c4e:	2b03      	cmp	r3, #3
 8013c50:	d102      	bne.n	8013c58 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f002 fa2a 	bl	80160ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f040 816a 	bne.w	8013f34 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c68:	e164      	b.n	8013f34 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013c6a:	4b37      	ldr	r3, [pc, #220]	; (8013d48 <tcp_receive+0x28c>)
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c72:	1ad3      	subs	r3, r2, r3
 8013c74:	3b01      	subs	r3, #1
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	f2c0 8108 	blt.w	8013e8c <tcp_receive+0x3d0>
 8013c7c:	4b32      	ldr	r3, [pc, #200]	; (8013d48 <tcp_receive+0x28c>)
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f300 8100 	bgt.w	8013e8c <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	7e9b      	ldrb	r3, [r3, #26]
 8013c90:	f003 0304 	and.w	r3, r3, #4
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00c      	beq.n	8013cb2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	7e9b      	ldrb	r3, [r3, #26]
 8013c9c:	f023 0304 	bic.w	r3, r3, #4
 8013ca0:	b2da      	uxtb	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013cc0:	10db      	asrs	r3, r3, #3
 8013cc2:	b21b      	sxth	r3, r3
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	4413      	add	r3, r2
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	b21a      	sxth	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013ce2:	4b19      	ldr	r3, [pc, #100]	; (8013d48 <tcp_receive+0x28c>)
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	7d1b      	ldrb	r3, [r3, #20]
 8013cee:	2b03      	cmp	r3, #3
 8013cf0:	f240 8095 	bls.w	8013e1e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d227      	bcs.n	8013d54 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d0e:	4413      	add	r3, r2
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	f240 8080 	bls.w	8013e1e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d28:	4413      	add	r3, r2
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d32:	e074      	b.n	8013e1e <tcp_receive+0x362>
 8013d34:	0801d95c 	.word	0x0801d95c
 8013d38:	0801dba4 	.word	0x0801dba4
 8013d3c:	0801d9c4 	.word	0x0801d9c4
 8013d40:	24007708 	.word	0x24007708
 8013d44:	240076fc 	.word	0x240076fc
 8013d48:	24007700 	.word	0x24007700
 8013d4c:	240076ec 	.word	0x240076ec
 8013d50:	24007706 	.word	0x24007706
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d5e:	4619      	mov	r1, r3
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d64:	fb01 f303 	mul.w	r3, r1, r3
 8013d68:	6879      	ldr	r1, [r7, #4]
 8013d6a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8013d6e:	fb93 f3f1 	sdiv	r3, r3, r1
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	4413      	add	r3, r2
 8013d76:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d7e:	8a7a      	ldrh	r2, [r7, #18]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d94c      	bls.n	8013e1e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	8a7a      	ldrh	r2, [r7, #18]
 8013d88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8013d8c:	e047      	b.n	8013e1e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da6:	685b      	ldr	r3, [r3, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fc fecf 	bl	8010b4c <pbuf_clen>
 8013dae:	4603      	mov	r3, r0
 8013db0:	429c      	cmp	r4, r3
 8013db2:	d206      	bcs.n	8013dc2 <tcp_receive+0x306>
 8013db4:	4b70      	ldr	r3, [pc, #448]	; (8013f78 <tcp_receive+0x4bc>)
 8013db6:	f240 429e 	movw	r2, #1182	; 0x49e
 8013dba:	4970      	ldr	r1, [pc, #448]	; (8013f7c <tcp_receive+0x4c0>)
 8013dbc:	4870      	ldr	r0, [pc, #448]	; (8013f80 <tcp_receive+0x4c4>)
 8013dbe:	f006 fe21 	bl	801aa04 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fc fec0 	bl	8010b4c <pbuf_clen>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	461a      	mov	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013dd6:	1a9b      	subs	r3, r3, r2
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	891a      	ldrh	r2, [r3, #8]
 8013de4:	4b67      	ldr	r3, [pc, #412]	; (8013f84 <tcp_receive+0x4c8>)
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	4413      	add	r3, r2
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	4b65      	ldr	r3, [pc, #404]	; (8013f84 <tcp_receive+0x4c8>)
 8013dee:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013df2:	f7fe f947 	bl	8012084 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d00e      	beq.n	8013e1e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10a      	bne.n	8013e1e <tcp_receive+0x362>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d106      	bne.n	8013e1e <tcp_receive+0x362>
 8013e10:	4b59      	ldr	r3, [pc, #356]	; (8013f78 <tcp_receive+0x4bc>)
 8013e12:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8013e16:	495c      	ldr	r1, [pc, #368]	; (8013f88 <tcp_receive+0x4cc>)
 8013e18:	4859      	ldr	r0, [pc, #356]	; (8013f80 <tcp_receive+0x4c4>)
 8013e1a:	f006 fdf3 	bl	801aa04 <iprintf>
      while (pcb->unacked != NULL &&
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d022      	beq.n	8013e6c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fb fb88 	bl	800f544 <lwip_htonl>
 8013e34:	4604      	mov	r4, r0
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e3a:	891b      	ldrh	r3, [r3, #8]
 8013e3c:	461d      	mov	r5, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	899b      	ldrh	r3, [r3, #12]
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fb fb6d 	bl	800f528 <lwip_htons>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	f003 0303 	and.w	r3, r3, #3
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <tcp_receive+0x3a0>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <tcp_receive+0x3a2>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	442b      	add	r3, r5
 8013e60:	18e2      	adds	r2, r4, r3
 8013e62:	4b4a      	ldr	r3, [pc, #296]	; (8013f8c <tcp_receive+0x4d0>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	dd90      	ble.n	8013d8e <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d104      	bne.n	8013e7e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e7a:	861a      	strh	r2, [r3, #48]	; 0x30
 8013e7c:	e002      	b.n	8013e84 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2200      	movs	r2, #0
 8013e88:	76da      	strb	r2, [r3, #27]
 8013e8a:	e002      	b.n	8013e92 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f001 fd31 	bl	80158f4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013e92:	e04f      	b.n	8013f34 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d103      	bne.n	8013eb4 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fc fe44 	bl	8010b4c <pbuf_clen>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	429c      	cmp	r4, r3
 8013ec8:	d206      	bcs.n	8013ed8 <tcp_receive+0x41c>
 8013eca:	4b2b      	ldr	r3, [pc, #172]	; (8013f78 <tcp_receive+0x4bc>)
 8013ecc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013ed0:	492a      	ldr	r1, [pc, #168]	; (8013f7c <tcp_receive+0x4c0>)
 8013ed2:	482b      	ldr	r0, [pc, #172]	; (8013f80 <tcp_receive+0x4c4>)
 8013ed4:	f006 fd96 	bl	801aa04 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fc fe35 	bl	8010b4c <pbuf_clen>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013eec:	1a9b      	subs	r3, r3, r2
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8013ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef8:	891a      	ldrh	r2, [r3, #8]
 8013efa:	4b22      	ldr	r3, [pc, #136]	; (8013f84 <tcp_receive+0x4c8>)
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	4413      	add	r3, r2
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	4b20      	ldr	r3, [pc, #128]	; (8013f84 <tcp_receive+0x4c8>)
 8013f04:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8013f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f08:	f7fe f8bc 	bl	8012084 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00e      	beq.n	8013f34 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10a      	bne.n	8013f34 <tcp_receive+0x478>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d106      	bne.n	8013f34 <tcp_receive+0x478>
 8013f26:	4b14      	ldr	r3, [pc, #80]	; (8013f78 <tcp_receive+0x4bc>)
 8013f28:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8013f2c:	4916      	ldr	r1, [pc, #88]	; (8013f88 <tcp_receive+0x4cc>)
 8013f2e:	4814      	ldr	r0, [pc, #80]	; (8013f80 <tcp_receive+0x4c4>)
 8013f30:	f006 fd68 	bl	801aa04 <iprintf>
    while (pcb->unsent != NULL &&
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d037      	beq.n	8013fac <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013f3c:	4b13      	ldr	r3, [pc, #76]	; (8013f8c <tcp_receive+0x4d0>)
 8013f3e:	681c      	ldr	r4, [r3, #0]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7fb fafb 	bl	800f544 <lwip_htonl>
 8013f4e:	4605      	mov	r5, r0
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f54:	891b      	ldrh	r3, [r3, #8]
 8013f56:	461e      	mov	r6, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	899b      	ldrh	r3, [r3, #12]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fb fae0 	bl	800f528 <lwip_htons>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	f003 0303 	and.w	r3, r3, #3
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d00e      	beq.n	8013f90 <tcp_receive+0x4d4>
 8013f72:	2301      	movs	r3, #1
 8013f74:	e00d      	b.n	8013f92 <tcp_receive+0x4d6>
 8013f76:	bf00      	nop
 8013f78:	0801d95c 	.word	0x0801d95c
 8013f7c:	0801dbc0 	.word	0x0801dbc0
 8013f80:	0801d9c4 	.word	0x0801d9c4
 8013f84:	24007704 	.word	0x24007704
 8013f88:	0801dbe8 	.word	0x0801dbe8
 8013f8c:	24007700 	.word	0x24007700
 8013f90:	2300      	movs	r3, #0
 8013f92:	4433      	add	r3, r6
 8013f94:	442b      	add	r3, r5
 8013f96:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	db07      	blt.n	8013fac <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013f9c:	4b8d      	ldr	r3, [pc, #564]	; (80141d4 <tcp_receive+0x718>)
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fa4:	1ad3      	subs	r3, r2, r3
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f77f af74 	ble.w	8013e94 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013fb2:	4b89      	ldr	r3, [pc, #548]	; (80141d8 <tcp_receive+0x71c>)
 8013fb4:	881b      	ldrh	r3, [r3, #0]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d052      	beq.n	801406e <tcp_receive+0x5b2>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fcc:	4b81      	ldr	r3, [pc, #516]	; (80141d4 <tcp_receive+0x718>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	da4b      	bge.n	801406e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013fd6:	4b81      	ldr	r3, [pc, #516]	; (80141dc <tcp_receive+0x720>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	1ad3      	subs	r3, r2, r3
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8013fe8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ff0:	10db      	asrs	r3, r3, #3
 8013ff2:	b21b      	sxth	r3, r3
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	1ad3      	subs	r3, r2, r3
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014002:	b29a      	uxth	r2, r3
 8014004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014006:	4413      	add	r3, r2
 8014008:	b29b      	uxth	r3, r3
 801400a:	b21a      	sxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014010:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014014:	2b00      	cmp	r3, #0
 8014016:	da03      	bge.n	8014020 <tcp_receive+0x564>
        m = -m;
 8014018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801401a:	425b      	negs	r3, r3
 801401c:	b29b      	uxth	r3, r3
 801401e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8014020:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014028:	109b      	asrs	r3, r3, #2
 801402a:	b21b      	sxth	r3, r3
 801402c:	b29b      	uxth	r3, r3
 801402e:	1ad3      	subs	r3, r2, r3
 8014030:	b29b      	uxth	r3, r3
 8014032:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801403a:	b29a      	uxth	r2, r3
 801403c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801403e:	4413      	add	r3, r2
 8014040:	b29b      	uxth	r3, r3
 8014042:	b21a      	sxth	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801404e:	10db      	asrs	r3, r3, #3
 8014050:	b21b      	sxth	r3, r3
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801405a:	b29b      	uxth	r3, r3
 801405c:	4413      	add	r3, r2
 801405e:	b29b      	uxth	r3, r3
 8014060:	b21a      	sxth	r2, r3
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2200      	movs	r2, #0
 801406c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801406e:	4b5c      	ldr	r3, [pc, #368]	; (80141e0 <tcp_receive+0x724>)
 8014070:	881b      	ldrh	r3, [r3, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	f000 84f1 	beq.w	8014a5a <tcp_receive+0xf9e>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	7d1b      	ldrb	r3, [r3, #20]
 801407c:	2b06      	cmp	r3, #6
 801407e:	f200 84ec 	bhi.w	8014a5a <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014086:	4b57      	ldr	r3, [pc, #348]	; (80141e4 <tcp_receive+0x728>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	3b01      	subs	r3, #1
 801408e:	2b00      	cmp	r3, #0
 8014090:	f2c0 80b8 	blt.w	8014204 <tcp_receive+0x748>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014098:	4b51      	ldr	r3, [pc, #324]	; (80141e0 <tcp_receive+0x724>)
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	4619      	mov	r1, r3
 801409e:	4b51      	ldr	r3, [pc, #324]	; (80141e4 <tcp_receive+0x728>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	440b      	add	r3, r1
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	3301      	adds	r3, #1
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f300 80ab 	bgt.w	8014204 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80140ae:	4b4e      	ldr	r3, [pc, #312]	; (80141e8 <tcp_receive+0x72c>)
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140b8:	4b4a      	ldr	r3, [pc, #296]	; (80141e4 <tcp_receive+0x728>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	1ad3      	subs	r3, r2, r3
 80140be:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80140c0:	4b49      	ldr	r3, [pc, #292]	; (80141e8 <tcp_receive+0x72c>)
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d106      	bne.n	80140d6 <tcp_receive+0x61a>
 80140c8:	4b48      	ldr	r3, [pc, #288]	; (80141ec <tcp_receive+0x730>)
 80140ca:	f240 523c 	movw	r2, #1340	; 0x53c
 80140ce:	4948      	ldr	r1, [pc, #288]	; (80141f0 <tcp_receive+0x734>)
 80140d0:	4848      	ldr	r0, [pc, #288]	; (80141f4 <tcp_receive+0x738>)
 80140d2:	f006 fc97 	bl	801aa04 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80140d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80140dc:	4293      	cmp	r3, r2
 80140de:	dd06      	ble.n	80140ee <tcp_receive+0x632>
 80140e0:	4b42      	ldr	r3, [pc, #264]	; (80141ec <tcp_receive+0x730>)
 80140e2:	f240 523d 	movw	r2, #1341	; 0x53d
 80140e6:	4944      	ldr	r1, [pc, #272]	; (80141f8 <tcp_receive+0x73c>)
 80140e8:	4842      	ldr	r0, [pc, #264]	; (80141f4 <tcp_receive+0x738>)
 80140ea:	f006 fc8b 	bl	801aa04 <iprintf>
      if (inseg.p->len < off) {
 80140ee:	4b3e      	ldr	r3, [pc, #248]	; (80141e8 <tcp_receive+0x72c>)
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	895b      	ldrh	r3, [r3, #10]
 80140f4:	461a      	mov	r2, r3
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f8:	4293      	cmp	r3, r2
 80140fa:	dd3e      	ble.n	801417a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80140fc:	4b3a      	ldr	r3, [pc, #232]	; (80141e8 <tcp_receive+0x72c>)
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	891b      	ldrh	r3, [r3, #8]
 8014102:	461a      	mov	r2, r3
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	4293      	cmp	r3, r2
 8014108:	dd06      	ble.n	8014118 <tcp_receive+0x65c>
 801410a:	4b38      	ldr	r3, [pc, #224]	; (80141ec <tcp_receive+0x730>)
 801410c:	f240 523f 	movw	r2, #1343	; 0x53f
 8014110:	493a      	ldr	r1, [pc, #232]	; (80141fc <tcp_receive+0x740>)
 8014112:	4838      	ldr	r0, [pc, #224]	; (80141f4 <tcp_receive+0x738>)
 8014114:	f006 fc76 	bl	801aa04 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014118:	4b33      	ldr	r3, [pc, #204]	; (80141e8 <tcp_receive+0x72c>)
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	891a      	ldrh	r2, [r3, #8]
 801411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014120:	b29b      	uxth	r3, r3
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8014126:	e00e      	b.n	8014146 <tcp_receive+0x68a>
          off -= p->len;
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	895b      	ldrh	r3, [r3, #10]
 801412c:	461a      	mov	r2, r3
 801412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014130:	1a9b      	subs	r3, r3, r2
 8014132:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	8a3a      	ldrh	r2, [r7, #16]
 8014138:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	2200      	movs	r2, #0
 801413e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	895b      	ldrh	r3, [r3, #10]
 801414a:	461a      	mov	r2, r3
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	4293      	cmp	r3, r2
 8014150:	dcea      	bgt.n	8014128 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8014152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014154:	b29b      	uxth	r3, r3
 8014156:	425b      	negs	r3, r3
 8014158:	b29b      	uxth	r3, r3
 801415a:	b21b      	sxth	r3, r3
 801415c:	4619      	mov	r1, r3
 801415e:	69b8      	ldr	r0, [r7, #24]
 8014160:	f7fc fc36 	bl	80109d0 <pbuf_header>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d01c      	beq.n	80141a4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801416a:	4b20      	ldr	r3, [pc, #128]	; (80141ec <tcp_receive+0x730>)
 801416c:	f240 524c 	movw	r2, #1356	; 0x54c
 8014170:	4923      	ldr	r1, [pc, #140]	; (8014200 <tcp_receive+0x744>)
 8014172:	4820      	ldr	r0, [pc, #128]	; (80141f4 <tcp_receive+0x738>)
 8014174:	f006 fc46 	bl	801aa04 <iprintf>
 8014178:	e014      	b.n	80141a4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801417a:	4b1b      	ldr	r3, [pc, #108]	; (80141e8 <tcp_receive+0x72c>)
 801417c:	685b      	ldr	r3, [r3, #4]
 801417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014180:	b292      	uxth	r2, r2
 8014182:	4252      	negs	r2, r2
 8014184:	b292      	uxth	r2, r2
 8014186:	b212      	sxth	r2, r2
 8014188:	4611      	mov	r1, r2
 801418a:	4618      	mov	r0, r3
 801418c:	f7fc fc20 	bl	80109d0 <pbuf_header>
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	d006      	beq.n	80141a4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014196:	4b15      	ldr	r3, [pc, #84]	; (80141ec <tcp_receive+0x730>)
 8014198:	f240 5251 	movw	r2, #1361	; 0x551
 801419c:	4918      	ldr	r1, [pc, #96]	; (8014200 <tcp_receive+0x744>)
 801419e:	4815      	ldr	r0, [pc, #84]	; (80141f4 <tcp_receive+0x738>)
 80141a0:	f006 fc30 	bl	801aa04 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80141a4:	4b10      	ldr	r3, [pc, #64]	; (80141e8 <tcp_receive+0x72c>)
 80141a6:	891a      	ldrh	r2, [r3, #8]
 80141a8:	4b0e      	ldr	r3, [pc, #56]	; (80141e4 <tcp_receive+0x728>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	b299      	uxth	r1, r3
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	1acb      	subs	r3, r1, r3
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	4413      	add	r3, r2
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	4b0a      	ldr	r3, [pc, #40]	; (80141e8 <tcp_receive+0x72c>)
 80141be:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c4:	4a07      	ldr	r2, [pc, #28]	; (80141e4 <tcp_receive+0x728>)
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	4b07      	ldr	r3, [pc, #28]	; (80141e8 <tcp_receive+0x72c>)
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	4a05      	ldr	r2, [pc, #20]	; (80141e4 <tcp_receive+0x728>)
 80141ce:	6812      	ldr	r2, [r2, #0]
 80141d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80141d2:	e025      	b.n	8014220 <tcp_receive+0x764>
 80141d4:	24007700 	.word	0x24007700
 80141d8:	24007704 	.word	0x24007704
 80141dc:	240076c4 	.word	0x240076c4
 80141e0:	24007706 	.word	0x24007706
 80141e4:	240076fc 	.word	0x240076fc
 80141e8:	240076dc 	.word	0x240076dc
 80141ec:	0801d95c 	.word	0x0801d95c
 80141f0:	0801dc08 	.word	0x0801dc08
 80141f4:	0801d9c4 	.word	0x0801d9c4
 80141f8:	0801dc18 	.word	0x0801dc18
 80141fc:	0801dc28 	.word	0x0801dc28
 8014200:	0801dc38 	.word	0x0801dc38
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014204:	4b87      	ldr	r3, [pc, #540]	; (8014424 <tcp_receive+0x968>)
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	2b00      	cmp	r3, #0
 8014210:	da06      	bge.n	8014220 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	7e9b      	ldrb	r3, [r3, #26]
 8014216:	f043 0302 	orr.w	r3, r3, #2
 801421a:	b2da      	uxtb	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014220:	4b80      	ldr	r3, [pc, #512]	; (8014424 <tcp_receive+0x968>)
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	f2c0 8410 	blt.w	8014a50 <tcp_receive+0xf94>
 8014230:	4b7c      	ldr	r3, [pc, #496]	; (8014424 <tcp_receive+0x968>)
 8014232:	681a      	ldr	r2, [r3, #0]
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801423c:	440b      	add	r3, r1
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	3301      	adds	r3, #1
 8014242:	2b00      	cmp	r3, #0
 8014244:	f300 8404 	bgt.w	8014a50 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801424c:	4b75      	ldr	r3, [pc, #468]	; (8014424 <tcp_receive+0x968>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	429a      	cmp	r2, r3
 8014252:	f040 8287 	bne.w	8014764 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014256:	4b74      	ldr	r3, [pc, #464]	; (8014428 <tcp_receive+0x96c>)
 8014258:	891c      	ldrh	r4, [r3, #8]
 801425a:	4b73      	ldr	r3, [pc, #460]	; (8014428 <tcp_receive+0x96c>)
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	899b      	ldrh	r3, [r3, #12]
 8014260:	b29b      	uxth	r3, r3
 8014262:	4618      	mov	r0, r3
 8014264:	f7fb f960 	bl	800f528 <lwip_htons>
 8014268:	4603      	mov	r3, r0
 801426a:	f003 0303 	and.w	r3, r3, #3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d001      	beq.n	8014276 <tcp_receive+0x7ba>
 8014272:	2301      	movs	r3, #1
 8014274:	e000      	b.n	8014278 <tcp_receive+0x7bc>
 8014276:	2300      	movs	r3, #0
 8014278:	4423      	add	r3, r4
 801427a:	b29a      	uxth	r2, r3
 801427c:	4b6b      	ldr	r3, [pc, #428]	; (801442c <tcp_receive+0x970>)
 801427e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014284:	4b69      	ldr	r3, [pc, #420]	; (801442c <tcp_receive+0x970>)
 8014286:	881b      	ldrh	r3, [r3, #0]
 8014288:	429a      	cmp	r2, r3
 801428a:	d26e      	bcs.n	801436a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801428c:	4b66      	ldr	r3, [pc, #408]	; (8014428 <tcp_receive+0x96c>)
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	b29b      	uxth	r3, r3
 8014294:	4618      	mov	r0, r3
 8014296:	f7fb f947 	bl	800f528 <lwip_htons>
 801429a:	4603      	mov	r3, r0
 801429c:	f003 0301 	and.w	r3, r3, #1
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d01b      	beq.n	80142dc <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80142a4:	4b60      	ldr	r3, [pc, #384]	; (8014428 <tcp_receive+0x96c>)
 80142a6:	68db      	ldr	r3, [r3, #12]
 80142a8:	899b      	ldrh	r3, [r3, #12]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142b0:	b29c      	uxth	r4, r3
 80142b2:	4b5d      	ldr	r3, [pc, #372]	; (8014428 <tcp_receive+0x96c>)
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	899b      	ldrh	r3, [r3, #12]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fb f934 	bl	800f528 <lwip_htons>
 80142c0:	4603      	mov	r3, r0
 80142c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fb f92d 	bl	800f528 <lwip_htons>
 80142ce:	4603      	mov	r3, r0
 80142d0:	461a      	mov	r2, r3
 80142d2:	4b55      	ldr	r3, [pc, #340]	; (8014428 <tcp_receive+0x96c>)
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	4322      	orrs	r2, r4
 80142d8:	b292      	uxth	r2, r2
 80142da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80142e0:	4b51      	ldr	r3, [pc, #324]	; (8014428 <tcp_receive+0x96c>)
 80142e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80142e4:	4b50      	ldr	r3, [pc, #320]	; (8014428 <tcp_receive+0x96c>)
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	899b      	ldrh	r3, [r3, #12]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fb f91b 	bl	800f528 <lwip_htons>
 80142f2:	4603      	mov	r3, r0
 80142f4:	f003 0302 	and.w	r3, r3, #2
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d005      	beq.n	8014308 <tcp_receive+0x84c>
            inseg.len -= 1;
 80142fc:	4b4a      	ldr	r3, [pc, #296]	; (8014428 <tcp_receive+0x96c>)
 80142fe:	891b      	ldrh	r3, [r3, #8]
 8014300:	3b01      	subs	r3, #1
 8014302:	b29a      	uxth	r2, r3
 8014304:	4b48      	ldr	r3, [pc, #288]	; (8014428 <tcp_receive+0x96c>)
 8014306:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014308:	4b47      	ldr	r3, [pc, #284]	; (8014428 <tcp_receive+0x96c>)
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	4a46      	ldr	r2, [pc, #280]	; (8014428 <tcp_receive+0x96c>)
 801430e:	8912      	ldrh	r2, [r2, #8]
 8014310:	4611      	mov	r1, r2
 8014312:	4618      	mov	r0, r3
 8014314:	f7fc fa0c 	bl	8010730 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014318:	4b43      	ldr	r3, [pc, #268]	; (8014428 <tcp_receive+0x96c>)
 801431a:	891c      	ldrh	r4, [r3, #8]
 801431c:	4b42      	ldr	r3, [pc, #264]	; (8014428 <tcp_receive+0x96c>)
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	899b      	ldrh	r3, [r3, #12]
 8014322:	b29b      	uxth	r3, r3
 8014324:	4618      	mov	r0, r3
 8014326:	f7fb f8ff 	bl	800f528 <lwip_htons>
 801432a:	4603      	mov	r3, r0
 801432c:	f003 0303 	and.w	r3, r3, #3
 8014330:	2b00      	cmp	r3, #0
 8014332:	d001      	beq.n	8014338 <tcp_receive+0x87c>
 8014334:	2301      	movs	r3, #1
 8014336:	e000      	b.n	801433a <tcp_receive+0x87e>
 8014338:	2300      	movs	r3, #0
 801433a:	4423      	add	r3, r4
 801433c:	b29a      	uxth	r2, r3
 801433e:	4b3b      	ldr	r3, [pc, #236]	; (801442c <tcp_receive+0x970>)
 8014340:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014342:	4b3a      	ldr	r3, [pc, #232]	; (801442c <tcp_receive+0x970>)
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	461a      	mov	r2, r3
 8014348:	4b36      	ldr	r3, [pc, #216]	; (8014424 <tcp_receive+0x968>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	441a      	add	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014352:	6879      	ldr	r1, [r7, #4]
 8014354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014356:	440b      	add	r3, r1
 8014358:	429a      	cmp	r2, r3
 801435a:	d006      	beq.n	801436a <tcp_receive+0x8ae>
 801435c:	4b34      	ldr	r3, [pc, #208]	; (8014430 <tcp_receive+0x974>)
 801435e:	f240 527e 	movw	r2, #1406	; 0x57e
 8014362:	4934      	ldr	r1, [pc, #208]	; (8014434 <tcp_receive+0x978>)
 8014364:	4834      	ldr	r0, [pc, #208]	; (8014438 <tcp_receive+0x97c>)
 8014366:	f006 fb4d 	bl	801aa04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801436e:	2b00      	cmp	r3, #0
 8014370:	f000 80e1 	beq.w	8014536 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014374:	4b2c      	ldr	r3, [pc, #176]	; (8014428 <tcp_receive+0x96c>)
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	899b      	ldrh	r3, [r3, #12]
 801437a:	b29b      	uxth	r3, r3
 801437c:	4618      	mov	r0, r3
 801437e:	f7fb f8d3 	bl	800f528 <lwip_htons>
 8014382:	4603      	mov	r3, r0
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d010      	beq.n	80143ae <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801438c:	e00a      	b.n	80143a4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014392:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801439e:	68b8      	ldr	r0, [r7, #8]
 80143a0:	f7fd fe70 	bl	8012084 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1f0      	bne.n	801438e <tcp_receive+0x8d2>
 80143ac:	e0c3      	b.n	8014536 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80143b4:	e04f      	b.n	8014456 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	899b      	ldrh	r3, [r3, #12]
 80143bc:	b29b      	uxth	r3, r3
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fb f8b2 	bl	800f528 <lwip_htons>
 80143c4:	4603      	mov	r3, r0
 80143c6:	f003 0301 	and.w	r3, r3, #1
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d03b      	beq.n	8014446 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80143ce:	4b16      	ldr	r3, [pc, #88]	; (8014428 <tcp_receive+0x96c>)
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	899b      	ldrh	r3, [r3, #12]
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fb f8a6 	bl	800f528 <lwip_htons>
 80143dc:	4603      	mov	r3, r0
 80143de:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d12f      	bne.n	8014446 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80143e6:	4b10      	ldr	r3, [pc, #64]	; (8014428 <tcp_receive+0x96c>)
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	899b      	ldrh	r3, [r3, #12]
 80143ec:	b29c      	uxth	r4, r3
 80143ee:	2001      	movs	r0, #1
 80143f0:	f7fb f89a 	bl	800f528 <lwip_htons>
 80143f4:	4603      	mov	r3, r0
 80143f6:	461a      	mov	r2, r3
 80143f8:	4b0b      	ldr	r3, [pc, #44]	; (8014428 <tcp_receive+0x96c>)
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	4322      	orrs	r2, r4
 80143fe:	b292      	uxth	r2, r2
 8014400:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014402:	4b09      	ldr	r3, [pc, #36]	; (8014428 <tcp_receive+0x96c>)
 8014404:	891c      	ldrh	r4, [r3, #8]
 8014406:	4b08      	ldr	r3, [pc, #32]	; (8014428 <tcp_receive+0x96c>)
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	899b      	ldrh	r3, [r3, #12]
 801440c:	b29b      	uxth	r3, r3
 801440e:	4618      	mov	r0, r3
 8014410:	f7fb f88a 	bl	800f528 <lwip_htons>
 8014414:	4603      	mov	r3, r0
 8014416:	f003 0303 	and.w	r3, r3, #3
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00e      	beq.n	801443c <tcp_receive+0x980>
 801441e:	2301      	movs	r3, #1
 8014420:	e00d      	b.n	801443e <tcp_receive+0x982>
 8014422:	bf00      	nop
 8014424:	240076fc 	.word	0x240076fc
 8014428:	240076dc 	.word	0x240076dc
 801442c:	24007706 	.word	0x24007706
 8014430:	0801d95c 	.word	0x0801d95c
 8014434:	0801dc4c 	.word	0x0801dc4c
 8014438:	0801d9c4 	.word	0x0801d9c4
 801443c:	2300      	movs	r3, #0
 801443e:	4423      	add	r3, r4
 8014440:	b29a      	uxth	r2, r3
 8014442:	4b95      	ldr	r3, [pc, #596]	; (8014698 <tcp_receive+0xbdc>)
 8014444:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014448:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8014450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014452:	f7fd fe17 	bl	8012084 <tcp_seg_free>
            while (next &&
 8014456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801445c:	4b8e      	ldr	r3, [pc, #568]	; (8014698 <tcp_receive+0xbdc>)
 801445e:	881b      	ldrh	r3, [r3, #0]
 8014460:	461a      	mov	r2, r3
 8014462:	4b8e      	ldr	r3, [pc, #568]	; (801469c <tcp_receive+0xbe0>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	441a      	add	r2, r3
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014470:	8909      	ldrh	r1, [r1, #8]
 8014472:	440b      	add	r3, r1
 8014474:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014476:	2b00      	cmp	r3, #0
 8014478:	da9d      	bge.n	80143b6 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447c:	2b00      	cmp	r3, #0
 801447e:	d057      	beq.n	8014530 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8014480:	4b85      	ldr	r3, [pc, #532]	; (8014698 <tcp_receive+0xbdc>)
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	461a      	mov	r2, r3
 8014486:	4b85      	ldr	r3, [pc, #532]	; (801469c <tcp_receive+0xbe0>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	441a      	add	r2, r3
 801448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014494:	2b00      	cmp	r3, #0
 8014496:	dd4b      	ble.n	8014530 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	b29a      	uxth	r2, r3
 80144a0:	4b7e      	ldr	r3, [pc, #504]	; (801469c <tcp_receive+0xbe0>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	b29a      	uxth	r2, r3
 80144aa:	4b7d      	ldr	r3, [pc, #500]	; (80146a0 <tcp_receive+0xbe4>)
 80144ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80144ae:	4b7c      	ldr	r3, [pc, #496]	; (80146a0 <tcp_receive+0xbe4>)
 80144b0:	68db      	ldr	r3, [r3, #12]
 80144b2:	899b      	ldrh	r3, [r3, #12]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7fb f836 	bl	800f528 <lwip_htons>
 80144bc:	4603      	mov	r3, r0
 80144be:	f003 0302 	and.w	r3, r3, #2
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d005      	beq.n	80144d2 <tcp_receive+0xa16>
                inseg.len -= 1;
 80144c6:	4b76      	ldr	r3, [pc, #472]	; (80146a0 <tcp_receive+0xbe4>)
 80144c8:	891b      	ldrh	r3, [r3, #8]
 80144ca:	3b01      	subs	r3, #1
 80144cc:	b29a      	uxth	r2, r3
 80144ce:	4b74      	ldr	r3, [pc, #464]	; (80146a0 <tcp_receive+0xbe4>)
 80144d0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80144d2:	4b73      	ldr	r3, [pc, #460]	; (80146a0 <tcp_receive+0xbe4>)
 80144d4:	685b      	ldr	r3, [r3, #4]
 80144d6:	4a72      	ldr	r2, [pc, #456]	; (80146a0 <tcp_receive+0xbe4>)
 80144d8:	8912      	ldrh	r2, [r2, #8]
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fc f927 	bl	8010730 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80144e2:	4b6f      	ldr	r3, [pc, #444]	; (80146a0 <tcp_receive+0xbe4>)
 80144e4:	891c      	ldrh	r4, [r3, #8]
 80144e6:	4b6e      	ldr	r3, [pc, #440]	; (80146a0 <tcp_receive+0xbe4>)
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	899b      	ldrh	r3, [r3, #12]
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fb f81a 	bl	800f528 <lwip_htons>
 80144f4:	4603      	mov	r3, r0
 80144f6:	f003 0303 	and.w	r3, r3, #3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d001      	beq.n	8014502 <tcp_receive+0xa46>
 80144fe:	2301      	movs	r3, #1
 8014500:	e000      	b.n	8014504 <tcp_receive+0xa48>
 8014502:	2300      	movs	r3, #0
 8014504:	4423      	add	r3, r4
 8014506:	b29a      	uxth	r2, r3
 8014508:	4b63      	ldr	r3, [pc, #396]	; (8014698 <tcp_receive+0xbdc>)
 801450a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801450c:	4b62      	ldr	r3, [pc, #392]	; (8014698 <tcp_receive+0xbdc>)
 801450e:	881b      	ldrh	r3, [r3, #0]
 8014510:	461a      	mov	r2, r3
 8014512:	4b62      	ldr	r3, [pc, #392]	; (801469c <tcp_receive+0xbe0>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	441a      	add	r2, r3
 8014518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	429a      	cmp	r2, r3
 8014520:	d006      	beq.n	8014530 <tcp_receive+0xa74>
 8014522:	4b60      	ldr	r3, [pc, #384]	; (80146a4 <tcp_receive+0xbe8>)
 8014524:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014528:	495f      	ldr	r1, [pc, #380]	; (80146a8 <tcp_receive+0xbec>)
 801452a:	4860      	ldr	r0, [pc, #384]	; (80146ac <tcp_receive+0xbf0>)
 801452c:	f006 fa6a 	bl	801aa04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014534:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014536:	4b58      	ldr	r3, [pc, #352]	; (8014698 <tcp_receive+0xbdc>)
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	461a      	mov	r2, r3
 801453c:	4b57      	ldr	r3, [pc, #348]	; (801469c <tcp_receive+0xbe0>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	441a      	add	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801454a:	4b53      	ldr	r3, [pc, #332]	; (8014698 <tcp_receive+0xbdc>)
 801454c:	881b      	ldrh	r3, [r3, #0]
 801454e:	429a      	cmp	r2, r3
 8014550:	d206      	bcs.n	8014560 <tcp_receive+0xaa4>
 8014552:	4b54      	ldr	r3, [pc, #336]	; (80146a4 <tcp_receive+0xbe8>)
 8014554:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014558:	4955      	ldr	r1, [pc, #340]	; (80146b0 <tcp_receive+0xbf4>)
 801455a:	4854      	ldr	r0, [pc, #336]	; (80146ac <tcp_receive+0xbf0>)
 801455c:	f006 fa52 	bl	801aa04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014564:	4b4c      	ldr	r3, [pc, #304]	; (8014698 <tcp_receive+0xbdc>)
 8014566:	881b      	ldrh	r3, [r3, #0]
 8014568:	1ad3      	subs	r3, r2, r3
 801456a:	b29a      	uxth	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f7fd f8f7 	bl	8011764 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014576:	4b4a      	ldr	r3, [pc, #296]	; (80146a0 <tcp_receive+0xbe4>)
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	891b      	ldrh	r3, [r3, #8]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d006      	beq.n	801458e <tcp_receive+0xad2>
          recv_data = inseg.p;
 8014580:	4b47      	ldr	r3, [pc, #284]	; (80146a0 <tcp_receive+0xbe4>)
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	4a4b      	ldr	r2, [pc, #300]	; (80146b4 <tcp_receive+0xbf8>)
 8014586:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014588:	4b45      	ldr	r3, [pc, #276]	; (80146a0 <tcp_receive+0xbe4>)
 801458a:	2200      	movs	r2, #0
 801458c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801458e:	4b44      	ldr	r3, [pc, #272]	; (80146a0 <tcp_receive+0xbe4>)
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	899b      	ldrh	r3, [r3, #12]
 8014594:	b29b      	uxth	r3, r3
 8014596:	4618      	mov	r0, r3
 8014598:	f7fa ffc6 	bl	800f528 <lwip_htons>
 801459c:	4603      	mov	r3, r0
 801459e:	f003 0301 	and.w	r3, r3, #1
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f000 80b4 	beq.w	8014710 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80145a8:	4b43      	ldr	r3, [pc, #268]	; (80146b8 <tcp_receive+0xbfc>)
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f043 0320 	orr.w	r3, r3, #32
 80145b0:	b2da      	uxtb	r2, r3
 80145b2:	4b41      	ldr	r3, [pc, #260]	; (80146b8 <tcp_receive+0xbfc>)
 80145b4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80145b6:	e0ab      	b.n	8014710 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145bc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	4a35      	ldr	r2, [pc, #212]	; (801469c <tcp_receive+0xbe0>)
 80145c8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	891b      	ldrh	r3, [r3, #8]
 80145ce:	461c      	mov	r4, r3
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	899b      	ldrh	r3, [r3, #12]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fa ffa5 	bl	800f528 <lwip_htons>
 80145de:	4603      	mov	r3, r0
 80145e0:	f003 0303 	and.w	r3, r3, #3
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d001      	beq.n	80145ec <tcp_receive+0xb30>
 80145e8:	2301      	movs	r3, #1
 80145ea:	e000      	b.n	80145ee <tcp_receive+0xb32>
 80145ec:	2300      	movs	r3, #0
 80145ee:	191a      	adds	r2, r3, r4
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f4:	441a      	add	r2, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145fe:	461c      	mov	r4, r3
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	891b      	ldrh	r3, [r3, #8]
 8014604:	461d      	mov	r5, r3
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	68db      	ldr	r3, [r3, #12]
 801460a:	899b      	ldrh	r3, [r3, #12]
 801460c:	b29b      	uxth	r3, r3
 801460e:	4618      	mov	r0, r3
 8014610:	f7fa ff8a 	bl	800f528 <lwip_htons>
 8014614:	4603      	mov	r3, r0
 8014616:	f003 0303 	and.w	r3, r3, #3
 801461a:	2b00      	cmp	r3, #0
 801461c:	d001      	beq.n	8014622 <tcp_receive+0xb66>
 801461e:	2301      	movs	r3, #1
 8014620:	e000      	b.n	8014624 <tcp_receive+0xb68>
 8014622:	2300      	movs	r3, #0
 8014624:	442b      	add	r3, r5
 8014626:	429c      	cmp	r4, r3
 8014628:	d206      	bcs.n	8014638 <tcp_receive+0xb7c>
 801462a:	4b1e      	ldr	r3, [pc, #120]	; (80146a4 <tcp_receive+0xbe8>)
 801462c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8014630:	4922      	ldr	r1, [pc, #136]	; (80146bc <tcp_receive+0xc00>)
 8014632:	481e      	ldr	r0, [pc, #120]	; (80146ac <tcp_receive+0xbf0>)
 8014634:	f006 f9e6 	bl	801aa04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	891b      	ldrh	r3, [r3, #8]
 801463c:	461c      	mov	r4, r3
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	899b      	ldrh	r3, [r3, #12]
 8014644:	b29b      	uxth	r3, r3
 8014646:	4618      	mov	r0, r3
 8014648:	f7fa ff6e 	bl	800f528 <lwip_htons>
 801464c:	4603      	mov	r3, r0
 801464e:	f003 0303 	and.w	r3, r3, #3
 8014652:	2b00      	cmp	r3, #0
 8014654:	d001      	beq.n	801465a <tcp_receive+0xb9e>
 8014656:	2301      	movs	r3, #1
 8014658:	e000      	b.n	801465c <tcp_receive+0xba0>
 801465a:	2300      	movs	r3, #0
 801465c:	1919      	adds	r1, r3, r4
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014662:	b28b      	uxth	r3, r1
 8014664:	1ad3      	subs	r3, r2, r3
 8014666:	b29a      	uxth	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7fd f879 	bl	8011764 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	891b      	ldrh	r3, [r3, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d028      	beq.n	80146ce <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801467c:	4b0d      	ldr	r3, [pc, #52]	; (80146b4 <tcp_receive+0xbf8>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d01d      	beq.n	80146c0 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8014684:	4b0b      	ldr	r3, [pc, #44]	; (80146b4 <tcp_receive+0xbf8>)
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	685b      	ldr	r3, [r3, #4]
 801468c:	4619      	mov	r1, r3
 801468e:	4610      	mov	r0, r2
 8014690:	f7fc fa9c 	bl	8010bcc <pbuf_cat>
 8014694:	e018      	b.n	80146c8 <tcp_receive+0xc0c>
 8014696:	bf00      	nop
 8014698:	24007706 	.word	0x24007706
 801469c:	240076fc 	.word	0x240076fc
 80146a0:	240076dc 	.word	0x240076dc
 80146a4:	0801d95c 	.word	0x0801d95c
 80146a8:	0801dc84 	.word	0x0801dc84
 80146ac:	0801d9c4 	.word	0x0801d9c4
 80146b0:	0801dcc0 	.word	0x0801dcc0
 80146b4:	2400770c 	.word	0x2400770c
 80146b8:	24007709 	.word	0x24007709
 80146bc:	0801dce0 	.word	0x0801dce0
            } else {
              recv_data = cseg->p;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	4a71      	ldr	r2, [pc, #452]	; (801488c <tcp_receive+0xdd0>)
 80146c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2200      	movs	r2, #0
 80146cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	68db      	ldr	r3, [r3, #12]
 80146d2:	899b      	ldrh	r3, [r3, #12]
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fa ff26 	bl	800f528 <lwip_htons>
 80146dc:	4603      	mov	r3, r0
 80146de:	f003 0301 	and.w	r3, r3, #1
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d00d      	beq.n	8014702 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80146e6:	4b6a      	ldr	r3, [pc, #424]	; (8014890 <tcp_receive+0xdd4>)
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	f043 0320 	orr.w	r3, r3, #32
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	4b67      	ldr	r3, [pc, #412]	; (8014890 <tcp_receive+0xdd4>)
 80146f2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	7d1b      	ldrb	r3, [r3, #20]
 80146f8:	2b04      	cmp	r3, #4
 80146fa:	d102      	bne.n	8014702 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2207      	movs	r2, #7
 8014700:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7fd fcba 	bl	8012084 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014714:	2b00      	cmp	r3, #0
 8014716:	d008      	beq.n	801472a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	685a      	ldr	r2, [r3, #4]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014724:	429a      	cmp	r2, r3
 8014726:	f43f af47 	beq.w	80145b8 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7e9b      	ldrb	r3, [r3, #26]
 801472e:	f003 0301 	and.w	r3, r3, #1
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00e      	beq.n	8014754 <tcp_receive+0xc98>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	7e9b      	ldrb	r3, [r3, #26]
 801473a:	f023 0301 	bic.w	r3, r3, #1
 801473e:	b2da      	uxtb	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	769a      	strb	r2, [r3, #26]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	7e9b      	ldrb	r3, [r3, #26]
 8014748:	f043 0302 	orr.w	r3, r3, #2
 801474c:	b2da      	uxtb	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014752:	e181      	b.n	8014a58 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	7e9b      	ldrb	r3, [r3, #26]
 8014758:	f043 0301 	orr.w	r3, r3, #1
 801475c:	b2da      	uxtb	r2, r3
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014762:	e179      	b.n	8014a58 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f001 f8c5 	bl	80158f4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014772:	4848      	ldr	r0, [pc, #288]	; (8014894 <tcp_receive+0xdd8>)
 8014774:	f7fd fc9e 	bl	80120b4 <tcp_seg_copy>
 8014778:	4602      	mov	r2, r0
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801477e:	e16b      	b.n	8014a58 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8014780:	2300      	movs	r3, #0
 8014782:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801478a:	e150      	b.n	8014a2e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 801478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	685a      	ldr	r2, [r3, #4]
 8014792:	4b41      	ldr	r3, [pc, #260]	; (8014898 <tcp_receive+0xddc>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	429a      	cmp	r2, r3
 8014798:	d11d      	bne.n	80147d6 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801479a:	4b3e      	ldr	r3, [pc, #248]	; (8014894 <tcp_receive+0xdd8>)
 801479c:	891a      	ldrh	r2, [r3, #8]
 801479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a0:	891b      	ldrh	r3, [r3, #8]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	f240 8148 	bls.w	8014a38 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80147a8:	483a      	ldr	r0, [pc, #232]	; (8014894 <tcp_receive+0xdd8>)
 80147aa:	f7fd fc83 	bl	80120b4 <tcp_seg_copy>
 80147ae:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	f000 8142 	beq.w	8014a3c <tcp_receive+0xf80>
                  if (prev != NULL) {
 80147b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d003      	beq.n	80147c6 <tcp_receive+0xd0a>
                    prev->next = cseg;
 80147be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c0:	68fa      	ldr	r2, [r7, #12]
 80147c2:	601a      	str	r2, [r3, #0]
 80147c4:	e002      	b.n	80147cc <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	68fa      	ldr	r2, [r7, #12]
 80147ca:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80147cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f7ff f8fe 	bl	80139d0 <tcp_oos_insert_segment>
                }
                break;
 80147d4:	e132      	b.n	8014a3c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80147d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d117      	bne.n	801480c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80147dc:	4b2e      	ldr	r3, [pc, #184]	; (8014898 <tcp_receive+0xddc>)
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	1ad3      	subs	r3, r2, r3
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	da57      	bge.n	801489c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80147ec:	4829      	ldr	r0, [pc, #164]	; (8014894 <tcp_receive+0xdd8>)
 80147ee:	f7fd fc61 	bl	80120b4 <tcp_seg_copy>
 80147f2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f000 8122 	beq.w	8014a40 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8014802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f7ff f8e3 	bl	80139d0 <tcp_oos_insert_segment>
                  }
                  break;
 801480a:	e119      	b.n	8014a40 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801480c:	4b22      	ldr	r3, [pc, #136]	; (8014898 <tcp_receive+0xddc>)
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	1ad3      	subs	r3, r2, r3
 8014818:	3b01      	subs	r3, #1
 801481a:	2b00      	cmp	r3, #0
 801481c:	db3e      	blt.n	801489c <tcp_receive+0xde0>
 801481e:	4b1e      	ldr	r3, [pc, #120]	; (8014898 <tcp_receive+0xddc>)
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	3301      	adds	r3, #1
 801482c:	2b00      	cmp	r3, #0
 801482e:	dc35      	bgt.n	801489c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8014830:	4818      	ldr	r0, [pc, #96]	; (8014894 <tcp_receive+0xdd8>)
 8014832:	f7fd fc3f 	bl	80120b4 <tcp_seg_copy>
 8014836:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b00      	cmp	r3, #0
 801483c:	f000 8102 	beq.w	8014a44 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014848:	8912      	ldrh	r2, [r2, #8]
 801484a:	441a      	add	r2, r3
 801484c:	4b12      	ldr	r3, [pc, #72]	; (8014898 <tcp_receive+0xddc>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	1ad3      	subs	r3, r2, r3
 8014852:	2b00      	cmp	r3, #0
 8014854:	dd12      	ble.n	801487c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014856:	4b10      	ldr	r3, [pc, #64]	; (8014898 <tcp_receive+0xddc>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	b29a      	uxth	r2, r3
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	b29b      	uxth	r3, r3
 8014864:	1ad3      	subs	r3, r2, r3
 8014866:	b29a      	uxth	r2, r3
 8014868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486e:	685a      	ldr	r2, [r3, #4]
 8014870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014872:	891b      	ldrh	r3, [r3, #8]
 8014874:	4619      	mov	r1, r3
 8014876:	4610      	mov	r0, r2
 8014878:	f7fb ff5a 	bl	8010730 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487e:	68fa      	ldr	r2, [r7, #12]
 8014880:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff f8a3 	bl	80139d0 <tcp_oos_insert_segment>
                  }
                  break;
 801488a:	e0db      	b.n	8014a44 <tcp_receive+0xf88>
 801488c:	2400770c 	.word	0x2400770c
 8014890:	24007709 	.word	0x24007709
 8014894:	240076dc 	.word	0x240076dc
 8014898:	240076fc 	.word	0x240076fc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f040 80bf 	bne.w	8014a24 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80148a6:	4b7c      	ldr	r3, [pc, #496]	; (8014a98 <tcp_receive+0xfdc>)
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f340 80b6 	ble.w	8014a24 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80148b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	899b      	ldrh	r3, [r3, #12]
 80148be:	b29b      	uxth	r3, r3
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fa fe31 	bl	800f528 <lwip_htons>
 80148c6:	4603      	mov	r3, r0
 80148c8:	f003 0301 	and.w	r3, r3, #1
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f040 80bb 	bne.w	8014a48 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80148d2:	4872      	ldr	r0, [pc, #456]	; (8014a9c <tcp_receive+0xfe0>)
 80148d4:	f7fd fbee 	bl	80120b4 <tcp_seg_copy>
 80148d8:	4602      	mov	r2, r0
 80148da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148dc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80148de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f000 80b2 	beq.w	8014a4c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148f0:	8912      	ldrh	r2, [r2, #8]
 80148f2:	441a      	add	r2, r3
 80148f4:	4b68      	ldr	r3, [pc, #416]	; (8014a98 <tcp_receive+0xfdc>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	1ad3      	subs	r3, r2, r3
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	dd12      	ble.n	8014924 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80148fe:	4b66      	ldr	r3, [pc, #408]	; (8014a98 <tcp_receive+0xfdc>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	b29a      	uxth	r2, r3
 8014904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	b29b      	uxth	r3, r3
 801490c:	1ad3      	subs	r3, r2, r3
 801490e:	b29a      	uxth	r2, r3
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014916:	685a      	ldr	r2, [r3, #4]
 8014918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491a:	891b      	ldrh	r3, [r3, #8]
 801491c:	4619      	mov	r1, r3
 801491e:	4610      	mov	r0, r2
 8014920:	f7fb ff06 	bl	8010730 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014924:	4b5e      	ldr	r3, [pc, #376]	; (8014aa0 <tcp_receive+0xfe4>)
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	461a      	mov	r2, r3
 801492a:	4b5b      	ldr	r3, [pc, #364]	; (8014a98 <tcp_receive+0xfdc>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	441a      	add	r2, r3
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014938:	440b      	add	r3, r1
 801493a:	1ad3      	subs	r3, r2, r3
 801493c:	2b00      	cmp	r3, #0
 801493e:	f340 8085 	ble.w	8014a4c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	899b      	ldrh	r3, [r3, #12]
 801494a:	b29b      	uxth	r3, r3
 801494c:	4618      	mov	r0, r3
 801494e:	f7fa fdeb 	bl	800f528 <lwip_htons>
 8014952:	4603      	mov	r3, r0
 8014954:	f003 0301 	and.w	r3, r3, #1
 8014958:	2b00      	cmp	r3, #0
 801495a:	d01e      	beq.n	801499a <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	68db      	ldr	r3, [r3, #12]
 8014962:	899b      	ldrh	r3, [r3, #12]
 8014964:	b29b      	uxth	r3, r3
 8014966:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801496a:	b29c      	uxth	r4, r3
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	899b      	ldrh	r3, [r3, #12]
 8014974:	b29b      	uxth	r3, r3
 8014976:	4618      	mov	r0, r3
 8014978:	f7fa fdd6 	bl	800f528 <lwip_htons>
 801497c:	4603      	mov	r3, r0
 801497e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014982:	b29b      	uxth	r3, r3
 8014984:	4618      	mov	r0, r3
 8014986:	f7fa fdcf 	bl	800f528 <lwip_htons>
 801498a:	4603      	mov	r3, r0
 801498c:	461a      	mov	r2, r3
 801498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	4322      	orrs	r2, r4
 8014996:	b292      	uxth	r2, r2
 8014998:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801499e:	b29a      	uxth	r2, r3
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149a4:	4413      	add	r3, r2
 80149a6:	b299      	uxth	r1, r3
 80149a8:	4b3b      	ldr	r3, [pc, #236]	; (8014a98 <tcp_receive+0xfdc>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	1a8a      	subs	r2, r1, r2
 80149b4:	b292      	uxth	r2, r2
 80149b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80149b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	685a      	ldr	r2, [r3, #4]
 80149be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	891b      	ldrh	r3, [r3, #8]
 80149c4:	4619      	mov	r1, r3
 80149c6:	4610      	mov	r0, r2
 80149c8:	f7fb feb2 	bl	8010730 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80149cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	891c      	ldrh	r4, [r3, #8]
 80149d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	899b      	ldrh	r3, [r3, #12]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fa fda3 	bl	800f528 <lwip_htons>
 80149e2:	4603      	mov	r3, r0
 80149e4:	f003 0303 	and.w	r3, r3, #3
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d001      	beq.n	80149f0 <tcp_receive+0xf34>
 80149ec:	2301      	movs	r3, #1
 80149ee:	e000      	b.n	80149f2 <tcp_receive+0xf36>
 80149f0:	2300      	movs	r3, #0
 80149f2:	4423      	add	r3, r4
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	4b2a      	ldr	r3, [pc, #168]	; (8014aa0 <tcp_receive+0xfe4>)
 80149f8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80149fa:	4b29      	ldr	r3, [pc, #164]	; (8014aa0 <tcp_receive+0xfe4>)
 80149fc:	881b      	ldrh	r3, [r3, #0]
 80149fe:	461a      	mov	r2, r3
 8014a00:	4b25      	ldr	r3, [pc, #148]	; (8014a98 <tcp_receive+0xfdc>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	441a      	add	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a0a:	6879      	ldr	r1, [r7, #4]
 8014a0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a0e:	440b      	add	r3, r1
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d01b      	beq.n	8014a4c <tcp_receive+0xf90>
 8014a14:	4b23      	ldr	r3, [pc, #140]	; (8014aa4 <tcp_receive+0xfe8>)
 8014a16:	f240 627a 	movw	r2, #1658	; 0x67a
 8014a1a:	4923      	ldr	r1, [pc, #140]	; (8014aa8 <tcp_receive+0xfec>)
 8014a1c:	4823      	ldr	r0, [pc, #140]	; (8014aac <tcp_receive+0xff0>)
 8014a1e:	f005 fff1 	bl	801aa04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014a22:	e013      	b.n	8014a4c <tcp_receive+0xf90>
              }
            }
            prev = next;
 8014a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a26:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	f47f aeab 	bne.w	801478c <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8014a36:	e00f      	b.n	8014a58 <tcp_receive+0xf9c>
                break;
 8014a38:	bf00      	nop
 8014a3a:	e00d      	b.n	8014a58 <tcp_receive+0xf9c>
                break;
 8014a3c:	bf00      	nop
 8014a3e:	e00b      	b.n	8014a58 <tcp_receive+0xf9c>
                  break;
 8014a40:	bf00      	nop
 8014a42:	e009      	b.n	8014a58 <tcp_receive+0xf9c>
                  break;
 8014a44:	bf00      	nop
 8014a46:	e007      	b.n	8014a58 <tcp_receive+0xf9c>
                  break;
 8014a48:	bf00      	nop
 8014a4a:	e005      	b.n	8014a58 <tcp_receive+0xf9c>
                break;
 8014a4c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8014a4e:	e003      	b.n	8014a58 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 ff4f 	bl	80158f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a56:	e01a      	b.n	8014a8e <tcp_receive+0xfd2>
 8014a58:	e019      	b.n	8014a8e <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014a5a:	4b0f      	ldr	r3, [pc, #60]	; (8014a98 <tcp_receive+0xfdc>)
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a62:	1ad3      	subs	r3, r2, r3
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	db0a      	blt.n	8014a7e <tcp_receive+0xfc2>
 8014a68:	4b0b      	ldr	r3, [pc, #44]	; (8014a98 <tcp_receive+0xfdc>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a70:	6879      	ldr	r1, [r7, #4]
 8014a72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a74:	440b      	add	r3, r1
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	3301      	adds	r3, #1
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	dd07      	ble.n	8014a8e <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	7e9b      	ldrb	r3, [r3, #26]
 8014a82:	f043 0302 	orr.w	r3, r3, #2
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014a8c:	e7ff      	b.n	8014a8e <tcp_receive+0xfd2>
 8014a8e:	bf00      	nop
 8014a90:	3734      	adds	r7, #52	; 0x34
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a96:	bf00      	nop
 8014a98:	240076fc 	.word	0x240076fc
 8014a9c:	240076dc 	.word	0x240076dc
 8014aa0:	24007706 	.word	0x24007706
 8014aa4:	0801d95c 	.word	0x0801d95c
 8014aa8:	0801dc4c 	.word	0x0801dc4c
 8014aac:	0801d9c4 	.word	0x0801d9c4

08014ab0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014ab6:	4b18      	ldr	r3, [pc, #96]	; (8014b18 <tcp_getoptbyte+0x68>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d005      	beq.n	8014aca <tcp_getoptbyte+0x1a>
 8014abe:	4b17      	ldr	r3, [pc, #92]	; (8014b1c <tcp_getoptbyte+0x6c>)
 8014ac0:	881a      	ldrh	r2, [r3, #0]
 8014ac2:	4b17      	ldr	r3, [pc, #92]	; (8014b20 <tcp_getoptbyte+0x70>)
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d20e      	bcs.n	8014ae8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014aca:	4b16      	ldr	r3, [pc, #88]	; (8014b24 <tcp_getoptbyte+0x74>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	3314      	adds	r3, #20
 8014ad0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8014ad2:	4b12      	ldr	r3, [pc, #72]	; (8014b1c <tcp_getoptbyte+0x6c>)
 8014ad4:	881b      	ldrh	r3, [r3, #0]
 8014ad6:	1c5a      	adds	r2, r3, #1
 8014ad8:	b291      	uxth	r1, r2
 8014ada:	4a10      	ldr	r2, [pc, #64]	; (8014b1c <tcp_getoptbyte+0x6c>)
 8014adc:	8011      	strh	r1, [r2, #0]
 8014ade:	461a      	mov	r2, r3
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	4413      	add	r3, r2
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	e010      	b.n	8014b0a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014ae8:	4b0c      	ldr	r3, [pc, #48]	; (8014b1c <tcp_getoptbyte+0x6c>)
 8014aea:	881b      	ldrh	r3, [r3, #0]
 8014aec:	1c5a      	adds	r2, r3, #1
 8014aee:	b291      	uxth	r1, r2
 8014af0:	4a0a      	ldr	r2, [pc, #40]	; (8014b1c <tcp_getoptbyte+0x6c>)
 8014af2:	8011      	strh	r1, [r2, #0]
 8014af4:	b2da      	uxtb	r2, r3
 8014af6:	4b0a      	ldr	r3, [pc, #40]	; (8014b20 <tcp_getoptbyte+0x70>)
 8014af8:	881b      	ldrh	r3, [r3, #0]
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8014b00:	4b05      	ldr	r3, [pc, #20]	; (8014b18 <tcp_getoptbyte+0x68>)
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	79fb      	ldrb	r3, [r7, #7]
 8014b06:	4413      	add	r3, r2
 8014b08:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	370c      	adds	r7, #12
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b14:	4770      	bx	lr
 8014b16:	bf00      	nop
 8014b18:	240076f4 	.word	0x240076f4
 8014b1c:	240076f8 	.word	0x240076f8
 8014b20:	240076f2 	.word	0x240076f2
 8014b24:	240076ec 	.word	0x240076ec

08014b28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b084      	sub	sp, #16
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014b30:	4b2e      	ldr	r3, [pc, #184]	; (8014bec <tcp_parseopt+0xc4>)
 8014b32:	881b      	ldrh	r3, [r3, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d055      	beq.n	8014be4 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014b38:	4b2d      	ldr	r3, [pc, #180]	; (8014bf0 <tcp_parseopt+0xc8>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	801a      	strh	r2, [r3, #0]
 8014b3e:	e045      	b.n	8014bcc <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8014b40:	f7ff ffb6 	bl	8014ab0 <tcp_getoptbyte>
 8014b44:	4603      	mov	r3, r0
 8014b46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014b48:	7bfb      	ldrb	r3, [r7, #15]
 8014b4a:	2b02      	cmp	r3, #2
 8014b4c:	d006      	beq.n	8014b5c <tcp_parseopt+0x34>
 8014b4e:	2b02      	cmp	r3, #2
 8014b50:	dc2b      	bgt.n	8014baa <tcp_parseopt+0x82>
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d041      	beq.n	8014bda <tcp_parseopt+0xb2>
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d127      	bne.n	8014baa <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8014b5a:	e037      	b.n	8014bcc <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014b5c:	f7ff ffa8 	bl	8014ab0 <tcp_getoptbyte>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b04      	cmp	r3, #4
 8014b64:	d13b      	bne.n	8014bde <tcp_parseopt+0xb6>
 8014b66:	4b22      	ldr	r3, [pc, #136]	; (8014bf0 <tcp_parseopt+0xc8>)
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	4a1f      	ldr	r2, [pc, #124]	; (8014bec <tcp_parseopt+0xc4>)
 8014b6e:	8812      	ldrh	r2, [r2, #0]
 8014b70:	4293      	cmp	r3, r2
 8014b72:	da34      	bge.n	8014bde <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8014b74:	f7ff ff9c 	bl	8014ab0 <tcp_getoptbyte>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	b29b      	uxth	r3, r3
 8014b7c:	021b      	lsls	r3, r3, #8
 8014b7e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014b80:	f7ff ff96 	bl	8014ab0 <tcp_getoptbyte>
 8014b84:	4603      	mov	r3, r0
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	89bb      	ldrh	r3, [r7, #12]
 8014b8a:	4313      	orrs	r3, r2
 8014b8c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014b8e:	89bb      	ldrh	r3, [r7, #12]
 8014b90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014b94:	d804      	bhi.n	8014ba0 <tcp_parseopt+0x78>
 8014b96:	89bb      	ldrh	r3, [r7, #12]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <tcp_parseopt+0x78>
 8014b9c:	89ba      	ldrh	r2, [r7, #12]
 8014b9e:	e001      	b.n	8014ba4 <tcp_parseopt+0x7c>
 8014ba0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014ba8:	e010      	b.n	8014bcc <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014baa:	f7ff ff81 	bl	8014ab0 <tcp_getoptbyte>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8014bb2:	7afb      	ldrb	r3, [r7, #11]
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d914      	bls.n	8014be2 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014bb8:	7afb      	ldrb	r3, [r7, #11]
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	4b0c      	ldr	r3, [pc, #48]	; (8014bf0 <tcp_parseopt+0xc8>)
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	3b02      	subs	r3, #2
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	4b09      	ldr	r3, [pc, #36]	; (8014bf0 <tcp_parseopt+0xc8>)
 8014bca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014bcc:	4b08      	ldr	r3, [pc, #32]	; (8014bf0 <tcp_parseopt+0xc8>)
 8014bce:	881a      	ldrh	r2, [r3, #0]
 8014bd0:	4b06      	ldr	r3, [pc, #24]	; (8014bec <tcp_parseopt+0xc4>)
 8014bd2:	881b      	ldrh	r3, [r3, #0]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d3b3      	bcc.n	8014b40 <tcp_parseopt+0x18>
 8014bd8:	e004      	b.n	8014be4 <tcp_parseopt+0xbc>
        return;
 8014bda:	bf00      	nop
 8014bdc:	e002      	b.n	8014be4 <tcp_parseopt+0xbc>
          return;
 8014bde:	bf00      	nop
 8014be0:	e000      	b.n	8014be4 <tcp_parseopt+0xbc>
          return;
 8014be2:	bf00      	nop
      }
    }
  }
}
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	240076f0 	.word	0x240076f0
 8014bf0:	240076f8 	.word	0x240076f8

08014bf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014bf8:	4b05      	ldr	r3, [pc, #20]	; (8014c10 <tcp_trigger_input_pcb_close+0x1c>)
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	f043 0310 	orr.w	r3, r3, #16
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	4b03      	ldr	r3, [pc, #12]	; (8014c10 <tcp_trigger_input_pcb_close+0x1c>)
 8014c04:	701a      	strb	r2, [r3, #0]
}
 8014c06:	bf00      	nop
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr
 8014c10:	24007709 	.word	0x24007709

08014c14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b086      	sub	sp, #24
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	607b      	str	r3, [r7, #4]
 8014c1e:	460b      	mov	r3, r1
 8014c20:	817b      	strh	r3, [r7, #10]
 8014c22:	4613      	mov	r3, r2
 8014c24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014c26:	897a      	ldrh	r2, [r7, #10]
 8014c28:	893b      	ldrh	r3, [r7, #8]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	3314      	adds	r3, #20
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	2200      	movs	r2, #0
 8014c34:	4619      	mov	r1, r3
 8014c36:	2001      	movs	r0, #1
 8014c38:	f7fb fb76 	bl	8010328 <pbuf_alloc>
 8014c3c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d056      	beq.n	8014cf2 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014c44:	897b      	ldrh	r3, [r7, #10]
 8014c46:	3313      	adds	r3, #19
 8014c48:	697a      	ldr	r2, [r7, #20]
 8014c4a:	8952      	ldrh	r2, [r2, #10]
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	db05      	blt.n	8014c5c <tcp_output_alloc_header+0x48>
 8014c50:	4b2a      	ldr	r3, [pc, #168]	; (8014cfc <tcp_output_alloc_header+0xe8>)
 8014c52:	2272      	movs	r2, #114	; 0x72
 8014c54:	492a      	ldr	r1, [pc, #168]	; (8014d00 <tcp_output_alloc_header+0xec>)
 8014c56:	482b      	ldr	r0, [pc, #172]	; (8014d04 <tcp_output_alloc_header+0xf0>)
 8014c58:	f005 fed4 	bl	801aa04 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	8adb      	ldrh	r3, [r3, #22]
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fa fc5e 	bl	800f528 <lwip_htons>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	461a      	mov	r2, r3
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	8b1b      	ldrh	r3, [r3, #24]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fa fc55 	bl	800f528 <lwip_htons>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	461a      	mov	r2, r3
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7fa fc57 	bl	800f544 <lwip_htonl>
 8014c96:	4602      	mov	r2, r0
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014c9c:	897b      	ldrh	r3, [r7, #10]
 8014c9e:	089b      	lsrs	r3, r3, #2
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	3305      	adds	r3, #5
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	031b      	lsls	r3, r3, #12
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	f043 0310 	orr.w	r3, r3, #16
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fa fc39 	bl	800f528 <lwip_htons>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	461a      	mov	r2, r3
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fa fc30 	bl	800f528 <lwip_htons>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	741a      	strb	r2, [r3, #16]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	749a      	strb	r2, [r3, #18]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014cec:	441a      	add	r2, r3
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014cf2:	697b      	ldr	r3, [r7, #20]
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3718      	adds	r7, #24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	0801dd08 	.word	0x0801dd08
 8014d00:	0801dd64 	.word	0x0801dd64
 8014d04:	0801dd94 	.word	0x0801dd94

08014d08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014d08:	b590      	push	{r4, r7, lr}
 8014d0a:	b085      	sub	sp, #20
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d02d      	beq.n	8014d74 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014d1c:	60fb      	str	r3, [r7, #12]
 8014d1e:	e002      	b.n	8014d26 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d1f8      	bne.n	8014d20 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	899b      	ldrh	r3, [r3, #12]
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fa fbf6 	bl	800f528 <lwip_htons>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	f003 0307 	and.w	r3, r3, #7
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d116      	bne.n	8014d74 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	899b      	ldrh	r3, [r3, #12]
 8014d4c:	b29c      	uxth	r4, r3
 8014d4e:	2001      	movs	r0, #1
 8014d50:	f7fa fbea 	bl	800f528 <lwip_htons>
 8014d54:	4603      	mov	r3, r0
 8014d56:	461a      	mov	r2, r3
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	4322      	orrs	r2, r4
 8014d5e:	b292      	uxth	r2, r2
 8014d60:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	7e9b      	ldrb	r3, [r3, #26]
 8014d66:	f043 0320 	orr.w	r3, r3, #32
 8014d6a:	b2da      	uxtb	r2, r3
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	e004      	b.n	8014d7e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014d74:	2101      	movs	r1, #1
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 fcc0 	bl	80156fc <tcp_enqueue_flags>
 8014d7c:	4603      	mov	r3, r0
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3714      	adds	r7, #20
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd90      	pop	{r4, r7, pc}
	...

08014d88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014d88:	b590      	push	{r4, r7, lr}
 8014d8a:	b087      	sub	sp, #28
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	603b      	str	r3, [r7, #0]
 8014d94:	4613      	mov	r3, r2
 8014d96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014d98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	f003 0304 	and.w	r3, r3, #4
 8014da4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014da6:	2003      	movs	r0, #3
 8014da8:	f7fa ffca 	bl	800fd40 <memp_malloc>
 8014dac:	6138      	str	r0, [r7, #16]
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d104      	bne.n	8014dbe <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014db4:	68b8      	ldr	r0, [r7, #8]
 8014db6:	f7fb fe2f 	bl	8010a18 <pbuf_free>
    return NULL;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	e061      	b.n	8014e82 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014dc4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	68ba      	ldr	r2, [r7, #8]
 8014dd0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	891a      	ldrh	r2, [r3, #8]
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d205      	bcs.n	8014dea <tcp_create_segment+0x62>
 8014dde:	4b2b      	ldr	r3, [pc, #172]	; (8014e8c <tcp_create_segment+0x104>)
 8014de0:	22ba      	movs	r2, #186	; 0xba
 8014de2:	492b      	ldr	r1, [pc, #172]	; (8014e90 <tcp_create_segment+0x108>)
 8014de4:	482b      	ldr	r0, [pc, #172]	; (8014e94 <tcp_create_segment+0x10c>)
 8014de6:	f005 fe0d 	bl	801aa04 <iprintf>
  seg->len = p->tot_len - optlen;
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	891a      	ldrh	r2, [r3, #8]
 8014dee:	7dfb      	ldrb	r3, [r7, #23]
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	b29a      	uxth	r2, r3
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014dfa:	2114      	movs	r1, #20
 8014dfc:	68b8      	ldr	r0, [r7, #8]
 8014dfe:	f7fb fde7 	bl	80109d0 <pbuf_header>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d004      	beq.n	8014e12 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014e08:	6938      	ldr	r0, [r7, #16]
 8014e0a:	f7fd f93b 	bl	8012084 <tcp_seg_free>
    return NULL;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e037      	b.n	8014e82 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	685a      	ldr	r2, [r3, #4]
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	8ada      	ldrh	r2, [r3, #22]
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	68dc      	ldr	r4, [r3, #12]
 8014e24:	4610      	mov	r0, r2
 8014e26:	f7fa fb7f 	bl	800f528 <lwip_htons>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	8b1a      	ldrh	r2, [r3, #24]
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	68dc      	ldr	r4, [r3, #12]
 8014e36:	4610      	mov	r0, r2
 8014e38:	f7fa fb76 	bl	800f528 <lwip_htons>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	68dc      	ldr	r4, [r3, #12]
 8014e44:	6838      	ldr	r0, [r7, #0]
 8014e46:	f7fa fb7d 	bl	800f544 <lwip_htonl>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014e4e:	7dfb      	ldrb	r3, [r7, #23]
 8014e50:	089b      	lsrs	r3, r3, #2
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	3305      	adds	r3, #5
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	031b      	lsls	r3, r3, #12
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	79fb      	ldrb	r3, [r7, #7]
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	4313      	orrs	r3, r2
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	68dc      	ldr	r4, [r3, #12]
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	f7fa fb5c 	bl	800f528 <lwip_htons>
 8014e70:	4603      	mov	r3, r0
 8014e72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	749a      	strb	r2, [r3, #18]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8014e80:	693b      	ldr	r3, [r7, #16]
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	371c      	adds	r7, #28
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd90      	pop	{r4, r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	0801dd08 	.word	0x0801dd08
 8014e90:	0801ddbc 	.word	0x0801ddbc
 8014e94:	0801dd94 	.word	0x0801dd94

08014e98 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b086      	sub	sp, #24
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	607b      	str	r3, [r7, #4]
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	73fb      	strb	r3, [r7, #15]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	81bb      	strh	r3, [r7, #12]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014eac:	89bb      	ldrh	r3, [r7, #12]
 8014eae:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014eb0:	89ba      	ldrh	r2, [r7, #12]
 8014eb2:	897b      	ldrh	r3, [r7, #10]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d221      	bcs.n	8014efc <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ebc:	f003 0302 	and.w	r3, r3, #2
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d111      	bne.n	8014ee8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014ec4:	6a3b      	ldr	r3, [r7, #32]
 8014ec6:	7e9b      	ldrb	r3, [r3, #26]
 8014ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d115      	bne.n	8014efc <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8014ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d007      	beq.n	8014ee8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014ed8:	6a3b      	ldr	r3, [r7, #32]
 8014eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d103      	bne.n	8014ee8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8014ee0:	6a3b      	ldr	r3, [r7, #32]
 8014ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d009      	beq.n	8014efc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014ee8:	89bb      	ldrh	r3, [r7, #12]
 8014eea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014eee:	f023 0203 	bic.w	r2, r3, #3
 8014ef2:	897b      	ldrh	r3, [r7, #10]
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	bf28      	it	cs
 8014ef8:	4613      	movcs	r3, r2
 8014efa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014efc:	8af9      	ldrh	r1, [r7, #22]
 8014efe:	7bfb      	ldrb	r3, [r7, #15]
 8014f00:	2200      	movs	r2, #0
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fb fa10 	bl	8010328 <pbuf_alloc>
 8014f08:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e019      	b.n	8014f48 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d006      	beq.n	8014f2a <tcp_pbuf_prealloc+0x92>
 8014f1c:	4b0c      	ldr	r3, [pc, #48]	; (8014f50 <tcp_pbuf_prealloc+0xb8>)
 8014f1e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014f22:	490c      	ldr	r1, [pc, #48]	; (8014f54 <tcp_pbuf_prealloc+0xbc>)
 8014f24:	480c      	ldr	r0, [pc, #48]	; (8014f58 <tcp_pbuf_prealloc+0xc0>)
 8014f26:	f005 fd6d 	bl	801aa04 <iprintf>
  *oversize = p->len - length;
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	895a      	ldrh	r2, [r3, #10]
 8014f2e:	89bb      	ldrh	r3, [r7, #12]
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	89ba      	ldrh	r2, [r7, #12]
 8014f3c:	811a      	strh	r2, [r3, #8]
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	891a      	ldrh	r2, [r3, #8]
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	815a      	strh	r2, [r3, #10]
  return p;
 8014f46:	693b      	ldr	r3, [r7, #16]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3718      	adds	r7, #24
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	0801dd08 	.word	0x0801dd08
 8014f54:	0801ddd4 	.word	0x0801ddd4
 8014f58:	0801dd94 	.word	0x0801dd94

08014f5c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	460b      	mov	r3, r1
 8014f66:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	7d1b      	ldrb	r3, [r3, #20]
 8014f6c:	2b04      	cmp	r3, #4
 8014f6e:	d00e      	beq.n	8014f8e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014f74:	2b07      	cmp	r3, #7
 8014f76:	d00a      	beq.n	8014f8e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014f7c:	2b02      	cmp	r3, #2
 8014f7e:	d006      	beq.n	8014f8e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d002      	beq.n	8014f8e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014f88:	f06f 030a 	mvn.w	r3, #10
 8014f8c:	e04f      	b.n	801502e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8014f8e:	887b      	ldrh	r3, [r7, #2]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d101      	bne.n	8014f98 <tcp_write_checks+0x3c>
    return ERR_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	e04a      	b.n	801502e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f9e:	887a      	ldrh	r2, [r7, #2]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d909      	bls.n	8014fb8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	7e9b      	ldrb	r3, [r3, #26]
 8014fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fac:	b2da      	uxtb	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb6:	e03a      	b.n	801502e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fbe:	2b08      	cmp	r3, #8
 8014fc0:	d806      	bhi.n	8014fd0 <tcp_write_checks+0x74>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fc8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d909      	bls.n	8014fe4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	7e9b      	ldrb	r3, [r3, #26]
 8014fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fd8:	b2da      	uxtb	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014fde:	f04f 33ff 	mov.w	r3, #4294967295
 8014fe2:	e024      	b.n	801502e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00f      	beq.n	801500e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d11a      	bne.n	801502c <tcp_write_checks+0xd0>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d116      	bne.n	801502c <tcp_write_checks+0xd0>
 8014ffe:	4b0e      	ldr	r3, [pc, #56]	; (8015038 <tcp_write_checks+0xdc>)
 8015000:	f240 1255 	movw	r2, #341	; 0x155
 8015004:	490d      	ldr	r1, [pc, #52]	; (801503c <tcp_write_checks+0xe0>)
 8015006:	480e      	ldr	r0, [pc, #56]	; (8015040 <tcp_write_checks+0xe4>)
 8015008:	f005 fcfc 	bl	801aa04 <iprintf>
 801500c:	e00e      	b.n	801502c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015012:	2b00      	cmp	r3, #0
 8015014:	d103      	bne.n	801501e <tcp_write_checks+0xc2>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801501a:	2b00      	cmp	r3, #0
 801501c:	d006      	beq.n	801502c <tcp_write_checks+0xd0>
 801501e:	4b06      	ldr	r3, [pc, #24]	; (8015038 <tcp_write_checks+0xdc>)
 8015020:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015024:	4907      	ldr	r1, [pc, #28]	; (8015044 <tcp_write_checks+0xe8>)
 8015026:	4806      	ldr	r0, [pc, #24]	; (8015040 <tcp_write_checks+0xe4>)
 8015028:	f005 fcec 	bl	801aa04 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801502c:	2300      	movs	r3, #0
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	0801dd08 	.word	0x0801dd08
 801503c:	0801dde8 	.word	0x0801dde8
 8015040:	0801dd94 	.word	0x0801dd94
 8015044:	0801de24 	.word	0x0801de24

08015048 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015048:	b590      	push	{r4, r7, lr}
 801504a:	b09b      	sub	sp, #108	; 0x6c
 801504c:	af04      	add	r7, sp, #16
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	4611      	mov	r1, r2
 8015054:	461a      	mov	r2, r3
 8015056:	460b      	mov	r3, r1
 8015058:	80fb      	strh	r3, [r7, #6]
 801505a:	4613      	mov	r3, r2
 801505c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801505e:	2300      	movs	r3, #0
 8015060:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015062:	2300      	movs	r3, #0
 8015064:	653b      	str	r3, [r7, #80]	; 0x50
 8015066:	2300      	movs	r3, #0
 8015068:	64fb      	str	r3, [r7, #76]	; 0x4c
 801506a:	2300      	movs	r3, #0
 801506c:	64bb      	str	r3, [r7, #72]	; 0x48
 801506e:	2300      	movs	r3, #0
 8015070:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015072:	2300      	movs	r3, #0
 8015074:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8015078:	2300      	movs	r3, #0
 801507a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015084:	2300      	movs	r3, #0
 8015086:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015088:	2300      	movs	r3, #0
 801508a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801508c:	2300      	movs	r3, #0
 801508e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015096:	085b      	lsrs	r3, r3, #1
 8015098:	b29a      	uxth	r2, r3
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801509e:	4293      	cmp	r3, r2
 80150a0:	bf28      	it	cs
 80150a2:	4613      	movcs	r3, r2
 80150a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80150a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d102      	bne.n	80150b2 <tcp_write+0x6a>
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150b0:	e000      	b.n	80150b4 <tcp_write+0x6c>
 80150b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d109      	bne.n	80150d0 <tcp_write+0x88>
 80150bc:	4b92      	ldr	r3, [pc, #584]	; (8015308 <tcp_write+0x2c0>)
 80150be:	f240 1291 	movw	r2, #401	; 0x191
 80150c2:	4992      	ldr	r1, [pc, #584]	; (801530c <tcp_write+0x2c4>)
 80150c4:	4892      	ldr	r0, [pc, #584]	; (8015310 <tcp_write+0x2c8>)
 80150c6:	f005 fc9d 	bl	801aa04 <iprintf>
 80150ca:	f06f 030f 	mvn.w	r3, #15
 80150ce:	e30a      	b.n	80156e6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80150d0:	88fb      	ldrh	r3, [r7, #6]
 80150d2:	4619      	mov	r1, r3
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f7ff ff41 	bl	8014f5c <tcp_write_checks>
 80150da:	4603      	mov	r3, r0
 80150dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80150e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d002      	beq.n	80150ee <tcp_write+0xa6>
    return err;
 80150e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80150ec:	e2fb      	b.n	80156e6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 80f4 	beq.w	80152ea <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015106:	653b      	str	r3, [r7, #80]	; 0x50
 8015108:	e002      	b.n	8015110 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801510a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1f8      	bne.n	801510a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801511a:	7a9b      	ldrb	r3, [r3, #10]
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	b29b      	uxth	r3, r3
 8015120:	f003 0304 	and.w	r3, r3, #4
 8015124:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801512a:	891b      	ldrh	r3, [r3, #8]
 801512c:	4619      	mov	r1, r3
 801512e:	8c3b      	ldrh	r3, [r7, #32]
 8015130:	440b      	add	r3, r1
 8015132:	429a      	cmp	r2, r3
 8015134:	da06      	bge.n	8015144 <tcp_write+0xfc>
 8015136:	4b74      	ldr	r3, [pc, #464]	; (8015308 <tcp_write+0x2c0>)
 8015138:	f240 12c7 	movw	r2, #455	; 0x1c7
 801513c:	4975      	ldr	r1, [pc, #468]	; (8015314 <tcp_write+0x2cc>)
 801513e:	4874      	ldr	r0, [pc, #464]	; (8015310 <tcp_write+0x2c8>)
 8015140:	f005 fc60 	bl	801aa04 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015146:	891a      	ldrh	r2, [r3, #8]
 8015148:	8c3b      	ldrh	r3, [r7, #32]
 801514a:	4413      	add	r3, r2
 801514c:	b29b      	uxth	r3, r3
 801514e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801515a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801515c:	8a7b      	ldrh	r3, [r7, #18]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d026      	beq.n	80151b0 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015162:	8a7b      	ldrh	r3, [r7, #18]
 8015164:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015166:	429a      	cmp	r2, r3
 8015168:	d206      	bcs.n	8015178 <tcp_write+0x130>
 801516a:	4b67      	ldr	r3, [pc, #412]	; (8015308 <tcp_write+0x2c0>)
 801516c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8015170:	4969      	ldr	r1, [pc, #420]	; (8015318 <tcp_write+0x2d0>)
 8015172:	4867      	ldr	r0, [pc, #412]	; (8015310 <tcp_write+0x2c8>)
 8015174:	f005 fc46 	bl	801aa04 <iprintf>
      seg = last_unsent;
 8015178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801517a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801517c:	8a7b      	ldrh	r3, [r7, #18]
 801517e:	88fa      	ldrh	r2, [r7, #6]
 8015180:	4293      	cmp	r3, r2
 8015182:	bf28      	it	cs
 8015184:	4613      	movcs	r3, r2
 8015186:	b29b      	uxth	r3, r3
 8015188:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801518a:	4293      	cmp	r3, r2
 801518c:	bf28      	it	cs
 801518e:	4613      	movcs	r3, r2
 8015190:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015192:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015198:	4413      	add	r3, r2
 801519a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801519e:	8a7a      	ldrh	r2, [r7, #18]
 80151a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80151a2:	1ad3      	subs	r3, r2, r3
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80151a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80151ac:	1ad3      	subs	r3, r2, r3
 80151ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80151b0:	8a7b      	ldrh	r3, [r7, #18]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00b      	beq.n	80151ce <tcp_write+0x186>
 80151b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151ba:	88fb      	ldrh	r3, [r7, #6]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d006      	beq.n	80151ce <tcp_write+0x186>
 80151c0:	4b51      	ldr	r3, [pc, #324]	; (8015308 <tcp_write+0x2c0>)
 80151c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80151c6:	4955      	ldr	r1, [pc, #340]	; (801531c <tcp_write+0x2d4>)
 80151c8:	4851      	ldr	r0, [pc, #324]	; (8015310 <tcp_write+0x2c8>)
 80151ca:	f005 fc1b 	bl	801aa04 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80151ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151d2:	88fb      	ldrh	r3, [r7, #6]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	f080 8169 	bcs.w	80154ac <tcp_write+0x464>
 80151da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151dc:	2b00      	cmp	r3, #0
 80151de:	f000 8165 	beq.w	80154ac <tcp_write+0x464>
 80151e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151e4:	891b      	ldrh	r3, [r3, #8]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 8160 	beq.w	80154ac <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80151ec:	88fa      	ldrh	r2, [r7, #6]
 80151ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151f2:	1ad2      	subs	r2, r2, r3
 80151f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151f6:	4293      	cmp	r3, r2
 80151f8:	bfa8      	it	ge
 80151fa:	4613      	movge	r3, r2
 80151fc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80151fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015200:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015202:	797b      	ldrb	r3, [r7, #5]
 8015204:	f003 0301 	and.w	r3, r3, #1
 8015208:	2b00      	cmp	r3, #0
 801520a:	d027      	beq.n	801525c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801520c:	f107 0012 	add.w	r0, r7, #18
 8015210:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015212:	8bf9      	ldrh	r1, [r7, #30]
 8015214:	2301      	movs	r3, #1
 8015216:	9302      	str	r3, [sp, #8]
 8015218:	797b      	ldrb	r3, [r7, #5]
 801521a:	9301      	str	r3, [sp, #4]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	4603      	mov	r3, r0
 8015222:	2004      	movs	r0, #4
 8015224:	f7ff fe38 	bl	8014e98 <tcp_pbuf_prealloc>
 8015228:	6578      	str	r0, [r7, #84]	; 0x54
 801522a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 8228 	beq.w	8015682 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015234:	6858      	ldr	r0, [r3, #4]
 8015236:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	4413      	add	r3, r2
 801523e:	8bfa      	ldrh	r2, [r7, #30]
 8015240:	4619      	mov	r1, r3
 8015242:	f005 fbc9 	bl	801a9d8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015246:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015248:	f7fb fc80 	bl	8010b4c <pbuf_clen>
 801524c:	4603      	mov	r3, r0
 801524e:	461a      	mov	r2, r3
 8015250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015254:	4413      	add	r3, r2
 8015256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801525a:	e03f      	b.n	80152dc <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801525c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	637b      	str	r3, [r7, #52]	; 0x34
 8015262:	e002      	b.n	801526a <tcp_write+0x222>
 8015264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	637b      	str	r3, [r7, #52]	; 0x34
 801526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1f8      	bne.n	8015264 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015274:	7b1b      	ldrb	r3, [r3, #12]
 8015276:	2b01      	cmp	r3, #1
 8015278:	d115      	bne.n	80152a6 <tcp_write+0x25e>
 801527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015280:	8952      	ldrh	r2, [r2, #10]
 8015282:	4413      	add	r3, r2
 8015284:	68ba      	ldr	r2, [r7, #8]
 8015286:	429a      	cmp	r2, r3
 8015288:	d10d      	bne.n	80152a6 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801528a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801528e:	2b00      	cmp	r3, #0
 8015290:	d006      	beq.n	80152a0 <tcp_write+0x258>
 8015292:	4b1d      	ldr	r3, [pc, #116]	; (8015308 <tcp_write+0x2c0>)
 8015294:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015298:	4921      	ldr	r1, [pc, #132]	; (8015320 <tcp_write+0x2d8>)
 801529a:	481d      	ldr	r0, [pc, #116]	; (8015310 <tcp_write+0x2c8>)
 801529c:	f005 fbb2 	bl	801aa04 <iprintf>
          extendlen = seglen;
 80152a0:	8bfb      	ldrh	r3, [r7, #30]
 80152a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80152a4:	e01a      	b.n	80152dc <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80152a6:	8bfb      	ldrh	r3, [r7, #30]
 80152a8:	2201      	movs	r2, #1
 80152aa:	4619      	mov	r1, r3
 80152ac:	2004      	movs	r0, #4
 80152ae:	f7fb f83b 	bl	8010328 <pbuf_alloc>
 80152b2:	6578      	str	r0, [r7, #84]	; 0x54
 80152b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	f000 81e5 	beq.w	8015686 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80152bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152c0:	68ba      	ldr	r2, [r7, #8]
 80152c2:	441a      	add	r2, r3
 80152c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152c6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80152c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80152ca:	f7fb fc3f 	bl	8010b4c <pbuf_clen>
 80152ce:	4603      	mov	r3, r0
 80152d0:	461a      	mov	r2, r3
 80152d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80152d6:	4413      	add	r3, r2
 80152d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80152dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152e0:	8bfb      	ldrh	r3, [r7, #30]
 80152e2:	4413      	add	r3, r2
 80152e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80152e8:	e0e0      	b.n	80154ac <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	f000 80db 	beq.w	80154ac <tcp_write+0x464>
 80152f6:	4b04      	ldr	r3, [pc, #16]	; (8015308 <tcp_write+0x2c0>)
 80152f8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80152fc:	4909      	ldr	r1, [pc, #36]	; (8015324 <tcp_write+0x2dc>)
 80152fe:	4804      	ldr	r0, [pc, #16]	; (8015310 <tcp_write+0x2c8>)
 8015300:	f005 fb80 	bl	801aa04 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015304:	e0d2      	b.n	80154ac <tcp_write+0x464>
 8015306:	bf00      	nop
 8015308:	0801dd08 	.word	0x0801dd08
 801530c:	0801de58 	.word	0x0801de58
 8015310:	0801dd94 	.word	0x0801dd94
 8015314:	0801de8c 	.word	0x0801de8c
 8015318:	0801dea4 	.word	0x0801dea4
 801531c:	0801dec4 	.word	0x0801dec4
 8015320:	0801dee4 	.word	0x0801dee4
 8015324:	0801df10 	.word	0x0801df10
    struct pbuf *p;
    u16_t left = len - pos;
 8015328:	88fa      	ldrh	r2, [r7, #6]
 801532a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015336:	b29b      	uxth	r3, r3
 8015338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801533a:	1ad3      	subs	r3, r2, r3
 801533c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801533e:	8b7a      	ldrh	r2, [r7, #26]
 8015340:	8bbb      	ldrh	r3, [r7, #28]
 8015342:	4293      	cmp	r3, r2
 8015344:	bf28      	it	cs
 8015346:	4613      	movcs	r3, r2
 8015348:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801534a:	797b      	ldrb	r3, [r7, #5]
 801534c:	f003 0301 	and.w	r3, r3, #1
 8015350:	2b00      	cmp	r3, #0
 8015352:	d036      	beq.n	80153c2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015358:	b29a      	uxth	r2, r3
 801535a:	8b3b      	ldrh	r3, [r7, #24]
 801535c:	4413      	add	r3, r2
 801535e:	b299      	uxth	r1, r3
 8015360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015362:	2b00      	cmp	r3, #0
 8015364:	bf0c      	ite	eq
 8015366:	2301      	moveq	r3, #1
 8015368:	2300      	movne	r3, #0
 801536a:	b2db      	uxtb	r3, r3
 801536c:	f107 0012 	add.w	r0, r7, #18
 8015370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015372:	9302      	str	r3, [sp, #8]
 8015374:	797b      	ldrb	r3, [r7, #5]
 8015376:	9301      	str	r3, [sp, #4]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	4603      	mov	r3, r0
 801537e:	2000      	movs	r0, #0
 8015380:	f7ff fd8a 	bl	8014e98 <tcp_pbuf_prealloc>
 8015384:	6338      	str	r0, [r7, #48]	; 0x30
 8015386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015388:	2b00      	cmp	r3, #0
 801538a:	f000 817e 	beq.w	801568a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015390:	895b      	ldrh	r3, [r3, #10]
 8015392:	8b3a      	ldrh	r2, [r7, #24]
 8015394:	429a      	cmp	r2, r3
 8015396:	d906      	bls.n	80153a6 <tcp_write+0x35e>
 8015398:	4b8f      	ldr	r3, [pc, #572]	; (80155d8 <tcp_write+0x590>)
 801539a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801539e:	498f      	ldr	r1, [pc, #572]	; (80155dc <tcp_write+0x594>)
 80153a0:	488f      	ldr	r0, [pc, #572]	; (80155e0 <tcp_write+0x598>)
 80153a2:	f005 fb2f 	bl	801aa04 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80153a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a8:	685a      	ldr	r2, [r3, #4]
 80153aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ae:	18d0      	adds	r0, r2, r3
 80153b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153b4:	68ba      	ldr	r2, [r7, #8]
 80153b6:	4413      	add	r3, r2
 80153b8:	8b3a      	ldrh	r2, [r7, #24]
 80153ba:	4619      	mov	r1, r3
 80153bc:	f005 fb0c 	bl	801a9d8 <memcpy>
 80153c0:	e02e      	b.n	8015420 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80153c2:	8a7b      	ldrh	r3, [r7, #18]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d006      	beq.n	80153d6 <tcp_write+0x38e>
 80153c8:	4b83      	ldr	r3, [pc, #524]	; (80155d8 <tcp_write+0x590>)
 80153ca:	f240 224b 	movw	r2, #587	; 0x24b
 80153ce:	4985      	ldr	r1, [pc, #532]	; (80155e4 <tcp_write+0x59c>)
 80153d0:	4883      	ldr	r0, [pc, #524]	; (80155e0 <tcp_write+0x598>)
 80153d2:	f005 fb17 	bl	801aa04 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80153d6:	8b3b      	ldrh	r3, [r7, #24]
 80153d8:	2201      	movs	r2, #1
 80153da:	4619      	mov	r1, r3
 80153dc:	2000      	movs	r0, #0
 80153de:	f7fa ffa3 	bl	8010328 <pbuf_alloc>
 80153e2:	6178      	str	r0, [r7, #20]
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f000 8151 	beq.w	801568e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80153ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153f0:	68ba      	ldr	r2, [r7, #8]
 80153f2:	441a      	add	r2, r3
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80153f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	2200      	movs	r2, #0
 8015400:	4619      	mov	r1, r3
 8015402:	2000      	movs	r0, #0
 8015404:	f7fa ff90 	bl	8010328 <pbuf_alloc>
 8015408:	6338      	str	r0, [r7, #48]	; 0x30
 801540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540c:	2b00      	cmp	r3, #0
 801540e:	d103      	bne.n	8015418 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015410:	6978      	ldr	r0, [r7, #20]
 8015412:	f7fb fb01 	bl	8010a18 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015416:	e13d      	b.n	8015694 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015418:	6979      	ldr	r1, [r7, #20]
 801541a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801541c:	f7fb fbd6 	bl	8010bcc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015422:	f7fb fb93 	bl	8010b4c <pbuf_clen>
 8015426:	4603      	mov	r3, r0
 8015428:	461a      	mov	r2, r3
 801542a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801542e:	4413      	add	r3, r2
 8015430:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015438:	2b09      	cmp	r3, #9
 801543a:	d805      	bhi.n	8015448 <tcp_write+0x400>
 801543c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015440:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015444:	4293      	cmp	r3, r2
 8015446:	d903      	bls.n	8015450 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801544a:	f7fb fae5 	bl	8010a18 <pbuf_free>
      goto memerr;
 801544e:	e121      	b.n	8015694 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015458:	441a      	add	r2, r3
 801545a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801545e:	9300      	str	r3, [sp, #0]
 8015460:	4613      	mov	r3, r2
 8015462:	2200      	movs	r2, #0
 8015464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f7ff fc8e 	bl	8014d88 <tcp_create_segment>
 801546c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015470:	2b00      	cmp	r3, #0
 8015472:	f000 810e 	beq.w	8015692 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015478:	2b00      	cmp	r3, #0
 801547a:	d102      	bne.n	8015482 <tcp_write+0x43a>
      queue = seg;
 801547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801547e:	647b      	str	r3, [r7, #68]	; 0x44
 8015480:	e00c      	b.n	801549c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015484:	2b00      	cmp	r3, #0
 8015486:	d106      	bne.n	8015496 <tcp_write+0x44e>
 8015488:	4b53      	ldr	r3, [pc, #332]	; (80155d8 <tcp_write+0x590>)
 801548a:	f240 2285 	movw	r2, #645	; 0x285
 801548e:	4956      	ldr	r1, [pc, #344]	; (80155e8 <tcp_write+0x5a0>)
 8015490:	4853      	ldr	r0, [pc, #332]	; (80155e0 <tcp_write+0x598>)
 8015492:	f005 fab7 	bl	801aa04 <iprintf>
      prev_seg->next = seg;
 8015496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801549a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801549e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80154a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154a4:	8b3b      	ldrh	r3, [r7, #24]
 80154a6:	4413      	add	r3, r2
 80154a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80154ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154b0:	88fb      	ldrh	r3, [r7, #6]
 80154b2:	429a      	cmp	r2, r3
 80154b4:	f4ff af38 	bcc.w	8015328 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80154b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d02c      	beq.n	8015518 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80154be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154c4:	e01e      	b.n	8015504 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80154c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c8:	891a      	ldrh	r2, [r3, #8]
 80154ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154cc:	4413      	add	r3, r2
 80154ce:	b29a      	uxth	r2, r3
 80154d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80154d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d110      	bne.n	80154fe <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80154dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154e2:	8952      	ldrh	r2, [r2, #10]
 80154e4:	4413      	add	r3, r2
 80154e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80154e8:	68b9      	ldr	r1, [r7, #8]
 80154ea:	4618      	mov	r0, r3
 80154ec:	f005 fa74 	bl	801a9d8 <memcpy>
        p->len += oversize_used;
 80154f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f2:	895a      	ldrh	r2, [r3, #10]
 80154f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154f6:	4413      	add	r3, r2
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80154fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015506:	2b00      	cmp	r3, #0
 8015508:	d1dd      	bne.n	80154c6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801550c:	891a      	ldrh	r2, [r3, #8]
 801550e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015510:	4413      	add	r3, r2
 8015512:	b29a      	uxth	r2, r3
 8015514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015516:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015518:	8a7a      	ldrh	r2, [r7, #18]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015522:	2b00      	cmp	r3, #0
 8015524:	d018      	beq.n	8015558 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015528:	2b00      	cmp	r3, #0
 801552a:	d106      	bne.n	801553a <tcp_write+0x4f2>
 801552c:	4b2a      	ldr	r3, [pc, #168]	; (80155d8 <tcp_write+0x590>)
 801552e:	f240 22ba 	movw	r2, #698	; 0x2ba
 8015532:	492e      	ldr	r1, [pc, #184]	; (80155ec <tcp_write+0x5a4>)
 8015534:	482a      	ldr	r0, [pc, #168]	; (80155e0 <tcp_write+0x598>)
 8015536:	f005 fa65 	bl	801aa04 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015540:	4618      	mov	r0, r3
 8015542:	f7fb fb43 	bl	8010bcc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015548:	891a      	ldrh	r2, [r3, #8]
 801554a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801554c:	891b      	ldrh	r3, [r3, #8]
 801554e:	4413      	add	r3, r2
 8015550:	b29a      	uxth	r2, r3
 8015552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015554:	811a      	strh	r2, [r3, #8]
 8015556:	e037      	b.n	80155c8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8015558:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801555a:	2b00      	cmp	r3, #0
 801555c:	d034      	beq.n	80155c8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015560:	2b00      	cmp	r3, #0
 8015562:	d003      	beq.n	801556c <tcp_write+0x524>
 8015564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d106      	bne.n	801557a <tcp_write+0x532>
 801556c:	4b1a      	ldr	r3, [pc, #104]	; (80155d8 <tcp_write+0x590>)
 801556e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8015572:	491f      	ldr	r1, [pc, #124]	; (80155f0 <tcp_write+0x5a8>)
 8015574:	481a      	ldr	r0, [pc, #104]	; (80155e0 <tcp_write+0x598>)
 8015576:	f005 fa45 	bl	801aa04 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801557a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015580:	e009      	b.n	8015596 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8015582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015584:	891a      	ldrh	r2, [r3, #8]
 8015586:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015588:	4413      	add	r3, r2
 801558a:	b29a      	uxth	r2, r3
 801558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	62bb      	str	r3, [r7, #40]	; 0x28
 8015596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d1f1      	bne.n	8015582 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a0:	891a      	ldrh	r2, [r3, #8]
 80155a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80155a4:	4413      	add	r3, r2
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155aa:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	895a      	ldrh	r2, [r3, #10]
 80155b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80155b2:	4413      	add	r3, r2
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80155ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155bc:	891a      	ldrh	r2, [r3, #8]
 80155be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80155c0:	4413      	add	r3, r2
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155c6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80155c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d112      	bne.n	80155f4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155d2:	669a      	str	r2, [r3, #104]	; 0x68
 80155d4:	e011      	b.n	80155fa <tcp_write+0x5b2>
 80155d6:	bf00      	nop
 80155d8:	0801dd08 	.word	0x0801dd08
 80155dc:	0801df40 	.word	0x0801df40
 80155e0:	0801dd94 	.word	0x0801dd94
 80155e4:	0801df80 	.word	0x0801df80
 80155e8:	0801df90 	.word	0x0801df90
 80155ec:	0801dfa4 	.word	0x0801dfa4
 80155f0:	0801dfdc 	.word	0x0801dfdc
  } else {
    last_unsent->next = queue;
 80155f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155f8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80155fe:	88fb      	ldrh	r3, [r7, #6]
 8015600:	441a      	add	r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801560c:	88fb      	ldrh	r3, [r7, #6]
 801560e:	1ad3      	subs	r3, r2, r3
 8015610:	b29a      	uxth	r2, r3
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801561e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015628:	2b00      	cmp	r3, #0
 801562a:	d00e      	beq.n	801564a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015630:	2b00      	cmp	r3, #0
 8015632:	d10a      	bne.n	801564a <tcp_write+0x602>
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015638:	2b00      	cmp	r3, #0
 801563a:	d106      	bne.n	801564a <tcp_write+0x602>
 801563c:	4b2c      	ldr	r3, [pc, #176]	; (80156f0 <tcp_write+0x6a8>)
 801563e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8015642:	492c      	ldr	r1, [pc, #176]	; (80156f4 <tcp_write+0x6ac>)
 8015644:	482c      	ldr	r0, [pc, #176]	; (80156f8 <tcp_write+0x6b0>)
 8015646:	f005 f9dd 	bl	801aa04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801564c:	2b00      	cmp	r3, #0
 801564e:	d016      	beq.n	801567e <tcp_write+0x636>
 8015650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d012      	beq.n	801567e <tcp_write+0x636>
 8015658:	797b      	ldrb	r3, [r7, #5]
 801565a:	f003 0302 	and.w	r3, r3, #2
 801565e:	2b00      	cmp	r3, #0
 8015660:	d10d      	bne.n	801567e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	899b      	ldrh	r3, [r3, #12]
 8015668:	b29c      	uxth	r4, r3
 801566a:	2008      	movs	r0, #8
 801566c:	f7f9 ff5c 	bl	800f528 <lwip_htons>
 8015670:	4603      	mov	r3, r0
 8015672:	461a      	mov	r2, r3
 8015674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	4322      	orrs	r2, r4
 801567a:	b292      	uxth	r2, r2
 801567c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801567e:	2300      	movs	r3, #0
 8015680:	e031      	b.n	80156e6 <tcp_write+0x69e>
          goto memerr;
 8015682:	bf00      	nop
 8015684:	e006      	b.n	8015694 <tcp_write+0x64c>
            goto memerr;
 8015686:	bf00      	nop
 8015688:	e004      	b.n	8015694 <tcp_write+0x64c>
        goto memerr;
 801568a:	bf00      	nop
 801568c:	e002      	b.n	8015694 <tcp_write+0x64c>
        goto memerr;
 801568e:	bf00      	nop
 8015690:	e000      	b.n	8015694 <tcp_write+0x64c>
      goto memerr;
 8015692:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	7e9b      	ldrb	r3, [r3, #26]
 8015698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801569c:	b2da      	uxtb	r2, r3
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80156a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d002      	beq.n	80156ae <tcp_write+0x666>
    pbuf_free(concat_p);
 80156a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80156aa:	f7fb f9b5 	bl	8010a18 <pbuf_free>
  }
  if (queue != NULL) {
 80156ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d002      	beq.n	80156ba <tcp_write+0x672>
    tcp_segs_free(queue);
 80156b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80156b6:	f7fc fcd0 	bl	801205a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d00e      	beq.n	80156e2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d10a      	bne.n	80156e2 <tcp_write+0x69a>
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d106      	bne.n	80156e2 <tcp_write+0x69a>
 80156d4:	4b06      	ldr	r3, [pc, #24]	; (80156f0 <tcp_write+0x6a8>)
 80156d6:	f240 3201 	movw	r2, #769	; 0x301
 80156da:	4906      	ldr	r1, [pc, #24]	; (80156f4 <tcp_write+0x6ac>)
 80156dc:	4806      	ldr	r0, [pc, #24]	; (80156f8 <tcp_write+0x6b0>)
 80156de:	f005 f991 	bl	801aa04 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80156e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	375c      	adds	r7, #92	; 0x5c
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd90      	pop	{r4, r7, pc}
 80156ee:	bf00      	nop
 80156f0:	0801dd08 	.word	0x0801dd08
 80156f4:	0801e014 	.word	0x0801e014
 80156f8:	0801dd94 	.word	0x0801dd94

080156fc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b08a      	sub	sp, #40	; 0x28
 8015700:	af02      	add	r7, sp, #8
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801570c:	2300      	movs	r3, #0
 801570e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015710:	78fb      	ldrb	r3, [r7, #3]
 8015712:	f003 0303 	and.w	r3, r3, #3
 8015716:	2b00      	cmp	r3, #0
 8015718:	d106      	bne.n	8015728 <tcp_enqueue_flags+0x2c>
 801571a:	4b6f      	ldr	r3, [pc, #444]	; (80158d8 <tcp_enqueue_flags+0x1dc>)
 801571c:	f240 321a 	movw	r2, #794	; 0x31a
 8015720:	496e      	ldr	r1, [pc, #440]	; (80158dc <tcp_enqueue_flags+0x1e0>)
 8015722:	486f      	ldr	r0, [pc, #444]	; (80158e0 <tcp_enqueue_flags+0x1e4>)
 8015724:	f005 f96e 	bl	801aa04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801572e:	2b08      	cmp	r3, #8
 8015730:	d806      	bhi.n	8015740 <tcp_enqueue_flags+0x44>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015738:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801573c:	4293      	cmp	r3, r2
 801573e:	d90e      	bls.n	801575e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8015740:	78fb      	ldrb	r3, [r7, #3]
 8015742:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015746:	2b00      	cmp	r3, #0
 8015748:	d109      	bne.n	801575e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	7e9b      	ldrb	r3, [r3, #26]
 801574e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015752:	b2da      	uxtb	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015758:	f04f 33ff 	mov.w	r3, #4294967295
 801575c:	e0b7      	b.n	80158ce <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801575e:	78fb      	ldrb	r3, [r7, #3]
 8015760:	f003 0302 	and.w	r3, r3, #2
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015768:	2301      	movs	r3, #1
 801576a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801576c:	7ffb      	ldrb	r3, [r7, #31]
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	b2db      	uxtb	r3, r3
 8015772:	f003 0304 	and.w	r3, r3, #4
 8015776:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015778:	7dfb      	ldrb	r3, [r7, #23]
 801577a:	b29b      	uxth	r3, r3
 801577c:	2200      	movs	r2, #0
 801577e:	4619      	mov	r1, r3
 8015780:	2000      	movs	r0, #0
 8015782:	f7fa fdd1 	bl	8010328 <pbuf_alloc>
 8015786:	6138      	str	r0, [r7, #16]
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d109      	bne.n	80157a2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	7e9b      	ldrb	r3, [r3, #26]
 8015792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015796:	b2da      	uxtb	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801579c:	f04f 33ff 	mov.w	r3, #4294967295
 80157a0:	e095      	b.n	80158ce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	895a      	ldrh	r2, [r3, #10]
 80157a6:	7dfb      	ldrb	r3, [r7, #23]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d206      	bcs.n	80157bc <tcp_enqueue_flags+0xc0>
 80157ae:	4b4a      	ldr	r3, [pc, #296]	; (80158d8 <tcp_enqueue_flags+0x1dc>)
 80157b0:	f44f 7250 	mov.w	r2, #832	; 0x340
 80157b4:	494b      	ldr	r1, [pc, #300]	; (80158e4 <tcp_enqueue_flags+0x1e8>)
 80157b6:	484a      	ldr	r0, [pc, #296]	; (80158e0 <tcp_enqueue_flags+0x1e4>)
 80157b8:	f005 f924 	bl	801aa04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80157c0:	78fa      	ldrb	r2, [r7, #3]
 80157c2:	7ffb      	ldrb	r3, [r7, #31]
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	460b      	mov	r3, r1
 80157c8:	6939      	ldr	r1, [r7, #16]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f7ff fadc 	bl	8014d88 <tcp_create_segment>
 80157d0:	60f8      	str	r0, [r7, #12]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d109      	bne.n	80157ec <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	7e9b      	ldrb	r3, [r3, #26]
 80157dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80157e0:	b2da      	uxtb	r2, r3
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80157e6:	f04f 33ff 	mov.w	r3, #4294967295
 80157ea:	e070      	b.n	80158ce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	f003 0303 	and.w	r3, r3, #3
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d006      	beq.n	8015806 <tcp_enqueue_flags+0x10a>
 80157f8:	4b37      	ldr	r3, [pc, #220]	; (80158d8 <tcp_enqueue_flags+0x1dc>)
 80157fa:	f240 3249 	movw	r2, #841	; 0x349
 80157fe:	493a      	ldr	r1, [pc, #232]	; (80158e8 <tcp_enqueue_flags+0x1ec>)
 8015800:	4837      	ldr	r0, [pc, #220]	; (80158e0 <tcp_enqueue_flags+0x1e4>)
 8015802:	f005 f8ff 	bl	801aa04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	891b      	ldrh	r3, [r3, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d006      	beq.n	801581c <tcp_enqueue_flags+0x120>
 801580e:	4b32      	ldr	r3, [pc, #200]	; (80158d8 <tcp_enqueue_flags+0x1dc>)
 8015810:	f240 324a 	movw	r2, #842	; 0x34a
 8015814:	4935      	ldr	r1, [pc, #212]	; (80158ec <tcp_enqueue_flags+0x1f0>)
 8015816:	4832      	ldr	r0, [pc, #200]	; (80158e0 <tcp_enqueue_flags+0x1e4>)
 8015818:	f005 f8f4 	bl	801aa04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015820:	2b00      	cmp	r3, #0
 8015822:	d103      	bne.n	801582c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	669a      	str	r2, [r3, #104]	; 0x68
 801582a:	e00d      	b.n	8015848 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015830:	61bb      	str	r3, [r7, #24]
 8015832:	e002      	b.n	801583a <tcp_enqueue_flags+0x13e>
 8015834:	69bb      	ldr	r3, [r7, #24]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	61bb      	str	r3, [r7, #24]
 801583a:	69bb      	ldr	r3, [r7, #24]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1f8      	bne.n	8015834 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	68fa      	ldr	r2, [r7, #12]
 8015846:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2200      	movs	r2, #0
 801584c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015850:	78fb      	ldrb	r3, [r7, #3]
 8015852:	f003 0302 	and.w	r3, r3, #2
 8015856:	2b00      	cmp	r3, #0
 8015858:	d104      	bne.n	8015864 <tcp_enqueue_flags+0x168>
 801585a:	78fb      	ldrb	r3, [r7, #3]
 801585c:	f003 0301 	and.w	r3, r3, #1
 8015860:	2b00      	cmp	r3, #0
 8015862:	d004      	beq.n	801586e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015868:	1c5a      	adds	r2, r3, #1
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801586e:	78fb      	ldrb	r3, [r7, #3]
 8015870:	f003 0301 	and.w	r3, r3, #1
 8015874:	2b00      	cmp	r3, #0
 8015876:	d006      	beq.n	8015886 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	7e9b      	ldrb	r3, [r3, #26]
 801587c:	f043 0320 	orr.w	r3, r3, #32
 8015880:	b2da      	uxtb	r2, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	4618      	mov	r0, r3
 801588c:	f7fb f95e 	bl	8010b4c <pbuf_clen>
 8015890:	4603      	mov	r3, r0
 8015892:	461a      	mov	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801589a:	4413      	add	r3, r2
 801589c:	b29a      	uxth	r2, r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00e      	beq.n	80158cc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d10a      	bne.n	80158cc <tcp_enqueue_flags+0x1d0>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d106      	bne.n	80158cc <tcp_enqueue_flags+0x1d0>
 80158be:	4b06      	ldr	r3, [pc, #24]	; (80158d8 <tcp_enqueue_flags+0x1dc>)
 80158c0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80158c4:	490a      	ldr	r1, [pc, #40]	; (80158f0 <tcp_enqueue_flags+0x1f4>)
 80158c6:	4806      	ldr	r0, [pc, #24]	; (80158e0 <tcp_enqueue_flags+0x1e4>)
 80158c8:	f005 f89c 	bl	801aa04 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80158cc:	2300      	movs	r3, #0
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3720      	adds	r7, #32
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	0801dd08 	.word	0x0801dd08
 80158dc:	0801e034 	.word	0x0801e034
 80158e0:	0801dd94 	.word	0x0801dd94
 80158e4:	0801e08c 	.word	0x0801e08c
 80158e8:	0801e0c8 	.word	0x0801e0c8
 80158ec:	0801e0e0 	.word	0x0801e0e0
 80158f0:	0801e10c 	.word	0x0801e10c

080158f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80158f4:	b590      	push	{r4, r7, lr}
 80158f6:	b08b      	sub	sp, #44	; 0x2c
 80158f8:	af04      	add	r7, sp, #16
 80158fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80158fc:	2300      	movs	r3, #0
 80158fe:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015900:	7dbb      	ldrb	r3, [r7, #22]
 8015902:	b29c      	uxth	r4, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015908:	4618      	mov	r0, r3
 801590a:	f7f9 fe1b 	bl	800f544 <lwip_htonl>
 801590e:	4603      	mov	r3, r0
 8015910:	2200      	movs	r2, #0
 8015912:	4621      	mov	r1, r4
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff f97d 	bl	8014c14 <tcp_output_alloc_header>
 801591a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d109      	bne.n	8015936 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	7e9b      	ldrb	r3, [r3, #26]
 8015926:	f043 0303 	orr.w	r3, r3, #3
 801592a:	b2da      	uxtb	r2, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015930:	f06f 0301 	mvn.w	r3, #1
 8015934:	e036      	b.n	80159a4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	3304      	adds	r3, #4
 801593a:	4618      	mov	r0, r3
 801593c:	f003 fc16 	bl	801916c <ip4_route>
 8015940:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d102      	bne.n	801594e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8015948:	23fc      	movs	r3, #252	; 0xfc
 801594a:	75fb      	strb	r3, [r7, #23]
 801594c:	e012      	b.n	8015974 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801594e:	6879      	ldr	r1, [r7, #4]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	1d18      	adds	r0, r3, #4
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	7a9c      	ldrb	r4, [r3, #10]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	7a5b      	ldrb	r3, [r3, #9]
 801595c:	68fa      	ldr	r2, [r7, #12]
 801595e:	9202      	str	r2, [sp, #8]
 8015960:	2206      	movs	r2, #6
 8015962:	9201      	str	r2, [sp, #4]
 8015964:	9300      	str	r3, [sp, #0]
 8015966:	4623      	mov	r3, r4
 8015968:	4602      	mov	r2, r0
 801596a:	6938      	ldr	r0, [r7, #16]
 801596c:	f003 fdc6 	bl	80194fc <ip4_output_if>
 8015970:	4603      	mov	r3, r0
 8015972:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015974:	6938      	ldr	r0, [r7, #16]
 8015976:	f7fb f84f 	bl	8010a18 <pbuf_free>

  if (err != ERR_OK) {
 801597a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d007      	beq.n	8015992 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	7e9b      	ldrb	r3, [r3, #26]
 8015986:	f043 0303 	orr.w	r3, r3, #3
 801598a:	b2da      	uxtb	r2, r3
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	769a      	strb	r2, [r3, #26]
 8015990:	e006      	b.n	80159a0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	7e9b      	ldrb	r3, [r3, #26]
 8015996:	f023 0303 	bic.w	r3, r3, #3
 801599a:	b2da      	uxtb	r2, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80159a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	371c      	adds	r7, #28
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd90      	pop	{r4, r7, pc}

080159ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80159ac:	b5b0      	push	{r4, r5, r7, lr}
 80159ae:	b08a      	sub	sp, #40	; 0x28
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	7d1b      	ldrb	r3, [r3, #20]
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d106      	bne.n	80159ca <tcp_output+0x1e>
 80159bc:	4b99      	ldr	r3, [pc, #612]	; (8015c24 <tcp_output+0x278>)
 80159be:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80159c2:	4999      	ldr	r1, [pc, #612]	; (8015c28 <tcp_output+0x27c>)
 80159c4:	4899      	ldr	r0, [pc, #612]	; (8015c2c <tcp_output+0x280>)
 80159c6:	f005 f81d 	bl	801aa04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80159ca:	4b99      	ldr	r3, [pc, #612]	; (8015c30 <tcp_output+0x284>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d101      	bne.n	80159d8 <tcp_output+0x2c>
    return ERR_OK;
 80159d4:	2300      	movs	r3, #0
 80159d6:	e1cb      	b.n	8015d70 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80159e4:	4293      	cmp	r3, r2
 80159e6:	bf28      	it	cs
 80159e8:	4613      	movcs	r3, r2
 80159ea:	b29b      	uxth	r3, r3
 80159ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80159f2:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	7e9b      	ldrb	r3, [r3, #26]
 80159f8:	f003 0302 	and.w	r3, r3, #2
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d017      	beq.n	8015a30 <tcp_output+0x84>
 8015a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d00f      	beq.n	8015a26 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8015a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	685b      	ldr	r3, [r3, #4]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7f9 fd99 	bl	800f544 <lwip_htonl>
 8015a12:	4602      	mov	r2, r0
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a1c:	8912      	ldrh	r2, [r2, #8]
 8015a1e:	4413      	add	r3, r2
     (seg == NULL ||
 8015a20:	69ba      	ldr	r2, [r7, #24]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d204      	bcs.n	8015a30 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f7ff ff64 	bl	80158f4 <tcp_send_empty_ack>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	e19f      	b.n	8015d70 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a34:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d007      	beq.n	8015a4c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8015a3c:	e002      	b.n	8015a44 <tcp_output+0x98>
 8015a3e:	6a3b      	ldr	r3, [r7, #32]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	623b      	str	r3, [r7, #32]
 8015a44:	6a3b      	ldr	r3, [r7, #32]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d1f8      	bne.n	8015a3e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	3304      	adds	r3, #4
 8015a50:	4618      	mov	r0, r3
 8015a52:	f003 fb8b 	bl	801916c <ip4_route>
 8015a56:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d102      	bne.n	8015a64 <tcp_output+0xb8>
    return ERR_RTE;
 8015a5e:	f06f 0303 	mvn.w	r3, #3
 8015a62:	e185      	b.n	8015d70 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d003      	beq.n	8015a72 <tcp_output+0xc6>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d111      	bne.n	8015a96 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d002      	beq.n	8015a7e <tcp_output+0xd2>
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	3304      	adds	r3, #4
 8015a7c:	e000      	b.n	8015a80 <tcp_output+0xd4>
 8015a7e:	2300      	movs	r3, #0
 8015a80:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d102      	bne.n	8015a8e <tcp_output+0xe2>
      return ERR_RTE;
 8015a88:	f06f 0303 	mvn.w	r3, #3
 8015a8c:	e170      	b.n	8015d70 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8015a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	f000 813f 	beq.w	8015d1c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f9 fd4d 	bl	800f544 <lwip_htonl>
 8015aaa:	4602      	mov	r2, r0
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ab0:	1ad3      	subs	r3, r2, r3
 8015ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ab4:	8912      	ldrh	r2, [r2, #8]
 8015ab6:	4413      	add	r3, r2
  if (seg != NULL &&
 8015ab8:	69ba      	ldr	r2, [r7, #24]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	f080 812e 	bcs.w	8015d1c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015ac0:	69bb      	ldr	r3, [r7, #24]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 812a 	beq.w	8015d1c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ace:	461a      	mov	r2, r3
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	f040 8122 	bne.w	8015d1c <tcp_output+0x370>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	f040 811d 	bne.w	8015d1c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f040 812c 	bne.w	8015d46 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2200      	movs	r2, #0
 8015af2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2201      	movs	r2, #1
 8015afa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8015afe:	e122      	b.n	8015d46 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b02:	68db      	ldr	r3, [r3, #12]
 8015b04:	899b      	ldrh	r3, [r3, #12]
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7f9 fd0d 	bl	800f528 <lwip_htons>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	f003 0304 	and.w	r3, r3, #4
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d006      	beq.n	8015b26 <tcp_output+0x17a>
 8015b18:	4b42      	ldr	r3, [pc, #264]	; (8015c24 <tcp_output+0x278>)
 8015b1a:	f240 4245 	movw	r2, #1093	; 0x445
 8015b1e:	4945      	ldr	r1, [pc, #276]	; (8015c34 <tcp_output+0x288>)
 8015b20:	4842      	ldr	r0, [pc, #264]	; (8015c2c <tcp_output+0x280>)
 8015b22:	f004 ff6f 	bl	801aa04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d01f      	beq.n	8015b6e <tcp_output+0x1c2>
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	7e9b      	ldrb	r3, [r3, #26]
 8015b32:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d119      	bne.n	8015b6e <tcp_output+0x1c2>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00b      	beq.n	8015b5a <tcp_output+0x1ae>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d110      	bne.n	8015b6e <tcp_output+0x1c2>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b50:	891a      	ldrh	r2, [r3, #8]
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d209      	bcs.n	8015b6e <tcp_output+0x1c2>
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d004      	beq.n	8015b6e <tcp_output+0x1c2>
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015b6a:	2b08      	cmp	r3, #8
 8015b6c:	d901      	bls.n	8015b72 <tcp_output+0x1c6>
 8015b6e:	2301      	movs	r3, #1
 8015b70:	e000      	b.n	8015b74 <tcp_output+0x1c8>
 8015b72:	2300      	movs	r3, #0
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d106      	bne.n	8015b86 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	7e9b      	ldrb	r3, [r3, #26]
 8015b7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	f000 80e2 	beq.w	8015d4a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7d1b      	ldrb	r3, [r3, #20]
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d00d      	beq.n	8015baa <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	899b      	ldrh	r3, [r3, #12]
 8015b94:	b29c      	uxth	r4, r3
 8015b96:	2010      	movs	r0, #16
 8015b98:	f7f9 fcc6 	bl	800f528 <lwip_htons>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	461a      	mov	r2, r3
 8015ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba2:	68db      	ldr	r3, [r3, #12]
 8015ba4:	4322      	orrs	r2, r4
 8015ba6:	b292      	uxth	r2, r2
 8015ba8:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015baa:	697a      	ldr	r2, [r7, #20]
 8015bac:	6879      	ldr	r1, [r7, #4]
 8015bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015bb0:	f000 f8e2 	bl	8015d78 <tcp_output_segment>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d009      	beq.n	8015bd4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	7e9b      	ldrb	r3, [r3, #26]
 8015bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015bc8:	b2da      	uxtb	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	769a      	strb	r2, [r3, #26]
      return err;
 8015bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bd2:	e0cd      	b.n	8015d70 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	681a      	ldr	r2, [r3, #0]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	7d1b      	ldrb	r3, [r3, #20]
 8015be0:	2b02      	cmp	r3, #2
 8015be2:	d006      	beq.n	8015bf2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	7e9b      	ldrb	r3, [r3, #26]
 8015be8:	f023 0303 	bic.w	r3, r3, #3
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf4:	68db      	ldr	r3, [r3, #12]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7f9 fca3 	bl	800f544 <lwip_htonl>
 8015bfe:	4604      	mov	r4, r0
 8015c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c02:	891b      	ldrh	r3, [r3, #8]
 8015c04:	461d      	mov	r5, r3
 8015c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	899b      	ldrh	r3, [r3, #12]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f9 fc8a 	bl	800f528 <lwip_htons>
 8015c14:	4603      	mov	r3, r0
 8015c16:	f003 0303 	and.w	r3, r3, #3
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d00c      	beq.n	8015c38 <tcp_output+0x28c>
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e00b      	b.n	8015c3a <tcp_output+0x28e>
 8015c22:	bf00      	nop
 8015c24:	0801dd08 	.word	0x0801dd08
 8015c28:	0801e134 	.word	0x0801e134
 8015c2c:	0801dd94 	.word	0x0801dd94
 8015c30:	24007710 	.word	0x24007710
 8015c34:	0801e15c 	.word	0x0801e15c
 8015c38:	2300      	movs	r3, #0
 8015c3a:	442b      	add	r3, r5
 8015c3c:	4423      	add	r3, r4
 8015c3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	1ad3      	subs	r3, r2, r3
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	da02      	bge.n	8015c52 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	68ba      	ldr	r2, [r7, #8]
 8015c50:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	891b      	ldrh	r3, [r3, #8]
 8015c56:	461c      	mov	r4, r3
 8015c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5a:	68db      	ldr	r3, [r3, #12]
 8015c5c:	899b      	ldrh	r3, [r3, #12]
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7f9 fc61 	bl	800f528 <lwip_htons>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f003 0303 	and.w	r3, r3, #3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d001      	beq.n	8015c74 <tcp_output+0x2c8>
 8015c70:	2301      	movs	r3, #1
 8015c72:	e000      	b.n	8015c76 <tcp_output+0x2ca>
 8015c74:	2300      	movs	r3, #0
 8015c76:	4423      	add	r3, r4
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d049      	beq.n	8015d10 <tcp_output+0x364>
      seg->next = NULL;
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	2200      	movs	r2, #0
 8015c80:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d105      	bne.n	8015c96 <tcp_output+0x2ea>
        pcb->unacked = seg;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c8e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c92:	623b      	str	r3, [r7, #32]
 8015c94:	e03f      	b.n	8015d16 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	68db      	ldr	r3, [r3, #12]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7f9 fc51 	bl	800f544 <lwip_htonl>
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	6a3b      	ldr	r3, [r7, #32]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7f9 fc4a 	bl	800f544 <lwip_htonl>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	1ae3      	subs	r3, r4, r3
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	da24      	bge.n	8015d02 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	336c      	adds	r3, #108	; 0x6c
 8015cbc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015cbe:	e002      	b.n	8015cc6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015cc6:	69fb      	ldr	r3, [r7, #28]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d011      	beq.n	8015cf2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015cce:	69fb      	ldr	r3, [r7, #28]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7f9 fc34 	bl	800f544 <lwip_htonl>
 8015cdc:	4604      	mov	r4, r0
 8015cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	685b      	ldr	r3, [r3, #4]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7f9 fc2d 	bl	800f544 <lwip_htonl>
 8015cea:	4603      	mov	r3, r0
 8015cec:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	dbe6      	blt.n	8015cc0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015cfa:	69fb      	ldr	r3, [r7, #28]
 8015cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cfe:	601a      	str	r2, [r3, #0]
 8015d00:	e009      	b.n	8015d16 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015d02:	6a3b      	ldr	r3, [r7, #32]
 8015d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d06:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015d08:	6a3b      	ldr	r3, [r7, #32]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	623b      	str	r3, [r7, #32]
 8015d0e:	e002      	b.n	8015d16 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d12:	f7fc f9b7 	bl	8012084 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d015      	beq.n	8015d4e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d24:	68db      	ldr	r3, [r3, #12]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7f9 fc0b 	bl	800f544 <lwip_htonl>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d38:	8912      	ldrh	r2, [r2, #8]
 8015d3a:	4413      	add	r3, r2
  while (seg != NULL &&
 8015d3c:	69ba      	ldr	r2, [r7, #24]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	f4bf aede 	bcs.w	8015b00 <tcp_output+0x154>
  }
output_done:
 8015d44:	e003      	b.n	8015d4e <tcp_output+0x3a2>
    goto output_done;
 8015d46:	bf00      	nop
 8015d48:	e002      	b.n	8015d50 <tcp_output+0x3a4>
      break;
 8015d4a:	bf00      	nop
 8015d4c:	e000      	b.n	8015d50 <tcp_output+0x3a4>
output_done:
 8015d4e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d103      	bne.n	8015d60 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	7e9b      	ldrb	r3, [r3, #26]
 8015d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d68:	b2da      	uxtb	r2, r3
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015d6e:	2300      	movs	r3, #0
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3728      	adds	r7, #40	; 0x28
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bdb0      	pop	{r4, r5, r7, pc}

08015d78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015d78:	b5b0      	push	{r4, r5, r7, lr}
 8015d7a:	b08c      	sub	sp, #48	; 0x30
 8015d7c:	af04      	add	r7, sp, #16
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	89db      	ldrh	r3, [r3, #14]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	d001      	beq.n	8015d92 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	e08a      	b.n	8015ea8 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	68dc      	ldr	r4, [r3, #12]
 8015d9a:	4610      	mov	r0, r2
 8015d9c:	f7f9 fbd2 	bl	800f544 <lwip_htonl>
 8015da0:	4603      	mov	r3, r0
 8015da2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	68dc      	ldr	r4, [r3, #12]
 8015dac:	4610      	mov	r0, r2
 8015dae:	f7f9 fbbb 	bl	800f528 <lwip_htons>
 8015db2:	4603      	mov	r3, r0
 8015db4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015dbe:	441a      	add	r2, r3
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	3314      	adds	r3, #20
 8015dca:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	7a9b      	ldrb	r3, [r3, #10]
 8015dd0:	f003 0301 	and.w	r3, r3, #1
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d014      	beq.n	8015e02 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	4619      	mov	r1, r3
 8015dde:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015de2:	f7fc fc79 	bl	80126d8 <tcp_eff_send_mss_impl>
 8015de6:	4603      	mov	r3, r0
 8015de8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015dea:	8b7b      	ldrh	r3, [r7, #26]
 8015dec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f9 fba7 	bl	800f544 <lwip_htonl>
 8015df6:	4602      	mov	r2, r0
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	3304      	adds	r3, #4
 8015e00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	da02      	bge.n	8015e12 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10c      	bne.n	8015e34 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8015e1a:	4b25      	ldr	r3, [pc, #148]	; (8015eb0 <tcp_output_segment+0x138>)
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	68db      	ldr	r3, [r3, #12]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f9 fb8b 	bl	800f544 <lwip_htonl>
 8015e2e:	4602      	mov	r2, r0
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	68da      	ldr	r2, [r3, #12]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	1ad3      	subs	r3, r2, r3
 8015e40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	8959      	ldrh	r1, [r3, #10]
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	8b3a      	ldrh	r2, [r7, #24]
 8015e4e:	1a8a      	subs	r2, r1, r2
 8015e50:	b292      	uxth	r2, r2
 8015e52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	685b      	ldr	r3, [r3, #4]
 8015e58:	8919      	ldrh	r1, [r3, #8]
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	8b3a      	ldrh	r2, [r7, #24]
 8015e60:	1a8a      	subs	r2, r1, r2
 8015e62:	b292      	uxth	r2, r2
 8015e64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	68fa      	ldr	r2, [r7, #12]
 8015e6c:	68d2      	ldr	r2, [r2, #12]
 8015e6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	2200      	movs	r2, #0
 8015e76:	741a      	strb	r2, [r3, #16]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	6858      	ldr	r0, [r3, #4]
 8015e80:	68b9      	ldr	r1, [r7, #8]
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	1d1c      	adds	r4, r3, #4
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	7a9d      	ldrb	r5, [r3, #10]
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	7a5b      	ldrb	r3, [r3, #9]
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	9202      	str	r2, [sp, #8]
 8015e92:	2206      	movs	r2, #6
 8015e94:	9201      	str	r2, [sp, #4]
 8015e96:	9300      	str	r3, [sp, #0]
 8015e98:	462b      	mov	r3, r5
 8015e9a:	4622      	mov	r2, r4
 8015e9c:	f003 fb2e 	bl	80194fc <ip4_output_if>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8015ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3720      	adds	r7, #32
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb0:	240076c4 	.word	0x240076c4

08015eb4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b08c      	sub	sp, #48	; 0x30
 8015eb8:	af04      	add	r7, sp, #16
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
 8015ec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	2114      	movs	r1, #20
 8015ec6:	2001      	movs	r0, #1
 8015ec8:	f7fa fa2e 	bl	8010328 <pbuf_alloc>
 8015ecc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d05b      	beq.n	8015f8c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015ed4:	69fb      	ldr	r3, [r7, #28]
 8015ed6:	895b      	ldrh	r3, [r3, #10]
 8015ed8:	2b13      	cmp	r3, #19
 8015eda:	d806      	bhi.n	8015eea <tcp_rst+0x36>
 8015edc:	4b2d      	ldr	r3, [pc, #180]	; (8015f94 <tcp_rst+0xe0>)
 8015ede:	f240 524c 	movw	r2, #1356	; 0x54c
 8015ee2:	492d      	ldr	r1, [pc, #180]	; (8015f98 <tcp_rst+0xe4>)
 8015ee4:	482d      	ldr	r0, [pc, #180]	; (8015f9c <tcp_rst+0xe8>)
 8015ee6:	f004 fd8d 	bl	801aa04 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8015ef0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7f9 fb18 	bl	800f528 <lwip_htons>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	461a      	mov	r2, r3
 8015efc:	69bb      	ldr	r3, [r7, #24]
 8015efe:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8015f00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f9 fb10 	bl	800f528 <lwip_htons>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8015f10:	68f8      	ldr	r0, [r7, #12]
 8015f12:	f7f9 fb17 	bl	800f544 <lwip_htonl>
 8015f16:	4602      	mov	r2, r0
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8015f1c:	68b8      	ldr	r0, [r7, #8]
 8015f1e:	f7f9 fb11 	bl	800f544 <lwip_htonl>
 8015f22:	4602      	mov	r2, r0
 8015f24:	69bb      	ldr	r3, [r7, #24]
 8015f26:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8015f28:	f245 0014 	movw	r0, #20500	; 0x5014
 8015f2c:	f7f9 fafc 	bl	800f528 <lwip_htons>
 8015f30:	4603      	mov	r3, r0
 8015f32:	461a      	mov	r2, r3
 8015f34:	69bb      	ldr	r3, [r7, #24]
 8015f36:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	f042 0208 	orr.w	r2, r2, #8
 8015f40:	739a      	strb	r2, [r3, #14]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8015f48:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	741a      	strb	r2, [r3, #16]
 8015f50:	2200      	movs	r2, #0
 8015f52:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8015f54:	69bb      	ldr	r3, [r7, #24]
 8015f56:	2200      	movs	r2, #0
 8015f58:	749a      	strb	r2, [r3, #18]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8015f5e:	6838      	ldr	r0, [r7, #0]
 8015f60:	f003 f904 	bl	801916c <ip4_route>
 8015f64:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00b      	beq.n	8015f84 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	9302      	str	r3, [sp, #8]
 8015f70:	2306      	movs	r3, #6
 8015f72:	9301      	str	r3, [sp, #4]
 8015f74:	2300      	movs	r3, #0
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	23ff      	movs	r3, #255	; 0xff
 8015f7a:	683a      	ldr	r2, [r7, #0]
 8015f7c:	6879      	ldr	r1, [r7, #4]
 8015f7e:	69f8      	ldr	r0, [r7, #28]
 8015f80:	f003 fabc 	bl	80194fc <ip4_output_if>
  }
  pbuf_free(p);
 8015f84:	69f8      	ldr	r0, [r7, #28]
 8015f86:	f7fa fd47 	bl	8010a18 <pbuf_free>
 8015f8a:	e000      	b.n	8015f8e <tcp_rst+0xda>
    return;
 8015f8c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015f8e:	3720      	adds	r7, #32
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	0801dd08 	.word	0x0801dd08
 8015f98:	0801dd64 	.word	0x0801dd64
 8015f9c:	0801dd94 	.word	0x0801dd94

08015fa0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b084      	sub	sp, #16
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d029      	beq.n	8016004 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fb4:	60fb      	str	r3, [r7, #12]
 8015fb6:	e002      	b.n	8015fbe <tcp_rexmit_rto+0x1e>
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	60fb      	str	r3, [r7, #12]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1f8      	bne.n	8015fb8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fe2:	2bff      	cmp	r3, #255	; 0xff
 8015fe4:	d007      	beq.n	8015ff6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fec:	3301      	adds	r3, #1
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7ff fcd5 	bl	80159ac <tcp_output>
 8016002:	e000      	b.n	8016006 <tcp_rexmit_rto+0x66>
    return;
 8016004:	bf00      	nop
}
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801600c:	b590      	push	{r4, r7, lr}
 801600e:	b085      	sub	sp, #20
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016018:	2b00      	cmp	r3, #0
 801601a:	d043      	beq.n	80160a4 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016020:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	3368      	adds	r3, #104	; 0x68
 801602e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016030:	e002      	b.n	8016038 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d011      	beq.n	8016064 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	685b      	ldr	r3, [r3, #4]
 8016048:	4618      	mov	r0, r3
 801604a:	f7f9 fa7b 	bl	800f544 <lwip_htonl>
 801604e:	4604      	mov	r4, r0
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	4618      	mov	r0, r3
 8016058:	f7f9 fa74 	bl	800f544 <lwip_htonl>
 801605c:	4603      	mov	r3, r0
 801605e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016060:	2b00      	cmp	r3, #0
 8016062:	dbe6      	blt.n	8016032 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	68ba      	ldr	r2, [r7, #8]
 8016070:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d103      	bne.n	8016082 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2200      	movs	r2, #0
 801607e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016088:	2bff      	cmp	r3, #255	; 0xff
 801608a:	d007      	beq.n	801609c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016092:	3301      	adds	r3, #1
 8016094:	b2da      	uxtb	r2, r3
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2200      	movs	r2, #0
 80160a0:	635a      	str	r2, [r3, #52]	; 0x34
 80160a2:	e000      	b.n	80160a6 <tcp_rexmit+0x9a>
    return;
 80160a4:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80160a6:	3714      	adds	r7, #20
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd90      	pop	{r4, r7, pc}

080160ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d042      	beq.n	8016142 <tcp_rexmit_fast+0x96>
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	7e9b      	ldrb	r3, [r3, #26]
 80160c0:	f003 0304 	and.w	r3, r3, #4
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d13c      	bne.n	8016142 <tcp_rexmit_fast+0x96>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f7ff ff9f 	bl	801600c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80160da:	4293      	cmp	r3, r2
 80160dc:	bf28      	it	cs
 80160de:	4613      	movcs	r3, r2
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	da00      	bge.n	80160e8 <tcp_rexmit_fast+0x3c>
 80160e6:	3301      	adds	r3, #1
 80160e8:	105b      	asrs	r3, r3, #1
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80160f8:	461a      	mov	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	429a      	cmp	r2, r3
 8016102:	d206      	bcs.n	8016112 <tcp_rexmit_fast+0x66>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016108:	005b      	lsls	r3, r3, #1
 801610a:	b29a      	uxth	r2, r3
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801611c:	4619      	mov	r1, r3
 801611e:	0049      	lsls	r1, r1, #1
 8016120:	440b      	add	r3, r1
 8016122:	b29b      	uxth	r3, r3
 8016124:	4413      	add	r3, r2
 8016126:	b29a      	uxth	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	7e9b      	ldrb	r3, [r3, #26]
 8016132:	f043 0304 	orr.w	r3, r3, #4
 8016136:	b2da      	uxtb	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2200      	movs	r2, #0
 8016140:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8016142:	bf00      	nop
 8016144:	3708      	adds	r7, #8
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}

0801614a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801614a:	b580      	push	{r7, lr}
 801614c:	b08a      	sub	sp, #40	; 0x28
 801614e:	af04      	add	r7, sp, #16
 8016150:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016156:	3b01      	subs	r3, #1
 8016158:	4618      	mov	r0, r3
 801615a:	f7f9 f9f3 	bl	800f544 <lwip_htonl>
 801615e:	4603      	mov	r3, r0
 8016160:	2200      	movs	r2, #0
 8016162:	2100      	movs	r1, #0
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f7fe fd55 	bl	8014c14 <tcp_output_alloc_header>
 801616a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d102      	bne.n	8016178 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016172:	f04f 33ff 	mov.w	r3, #4294967295
 8016176:	e021      	b.n	80161bc <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	3304      	adds	r3, #4
 801617c:	4618      	mov	r0, r3
 801617e:	f002 fff5 	bl	801916c <ip4_route>
 8016182:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d102      	bne.n	8016190 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801618a:	23fc      	movs	r3, #252	; 0xfc
 801618c:	75fb      	strb	r3, [r7, #23]
 801618e:	e010      	b.n	80161b2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8016190:	6879      	ldr	r1, [r7, #4]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	1d1a      	adds	r2, r3, #4
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	7a98      	ldrb	r0, [r3, #10]
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	9302      	str	r3, [sp, #8]
 801619e:	2306      	movs	r3, #6
 80161a0:	9301      	str	r3, [sp, #4]
 80161a2:	2300      	movs	r3, #0
 80161a4:	9300      	str	r3, [sp, #0]
 80161a6:	4603      	mov	r3, r0
 80161a8:	6938      	ldr	r0, [r7, #16]
 80161aa:	f003 f9a7 	bl	80194fc <ip4_output_if>
 80161ae:	4603      	mov	r3, r0
 80161b0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80161b2:	6938      	ldr	r0, [r7, #16]
 80161b4:	f7fa fc30 	bl	8010a18 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80161b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3718      	adds	r7, #24
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80161c4:	b590      	push	{r4, r7, lr}
 80161c6:	b08f      	sub	sp, #60	; 0x3c
 80161c8:	af04      	add	r7, sp, #16
 80161ca:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161d0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80161d2:	6a3b      	ldr	r3, [r7, #32]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d102      	bne.n	80161de <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161dc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80161de:	6a3b      	ldr	r3, [r7, #32]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d101      	bne.n	80161e8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80161e4:	2300      	movs	r3, #0
 80161e6:	e085      	b.n	80162f4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80161e8:	6a3b      	ldr	r3, [r7, #32]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	899b      	ldrh	r3, [r3, #12]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f9 f999 	bl	800f528 <lwip_htons>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f003 0301 	and.w	r3, r3, #1
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d005      	beq.n	801620c <tcp_zero_window_probe+0x48>
 8016200:	6a3b      	ldr	r3, [r7, #32]
 8016202:	891b      	ldrh	r3, [r3, #8]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d101      	bne.n	801620c <tcp_zero_window_probe+0x48>
 8016208:	2301      	movs	r3, #1
 801620a:	e000      	b.n	801620e <tcp_zero_window_probe+0x4a>
 801620c:	2300      	movs	r3, #0
 801620e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016210:	7ffb      	ldrb	r3, [r7, #31]
 8016212:	2b00      	cmp	r3, #0
 8016214:	bf0c      	ite	eq
 8016216:	2301      	moveq	r3, #1
 8016218:	2300      	movne	r3, #0
 801621a:	b2db      	uxtb	r3, r3
 801621c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801621e:	6a3b      	ldr	r3, [r7, #32]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	8bba      	ldrh	r2, [r7, #28]
 8016226:	2100      	movs	r1, #0
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7fe fcf3 	bl	8014c14 <tcp_output_alloc_header>
 801622e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016230:	69bb      	ldr	r3, [r7, #24]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d102      	bne.n	801623c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016236:	f04f 33ff 	mov.w	r3, #4294967295
 801623a:	e05b      	b.n	80162f4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	685b      	ldr	r3, [r3, #4]
 8016240:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016242:	7ffb      	ldrb	r3, [r7, #31]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d00e      	beq.n	8016266 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	899b      	ldrh	r3, [r3, #12]
 801624c:	b29b      	uxth	r3, r3
 801624e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016252:	b29c      	uxth	r4, r3
 8016254:	2011      	movs	r0, #17
 8016256:	f7f9 f967 	bl	800f528 <lwip_htons>
 801625a:	4603      	mov	r3, r0
 801625c:	4323      	orrs	r3, r4
 801625e:	b29a      	uxth	r2, r3
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	819a      	strh	r2, [r3, #12]
 8016264:	e010      	b.n	8016288 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016266:	69bb      	ldr	r3, [r7, #24]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	3314      	adds	r3, #20
 801626c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801626e:	6a3b      	ldr	r3, [r7, #32]
 8016270:	6858      	ldr	r0, [r3, #4]
 8016272:	6a3b      	ldr	r3, [r7, #32]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	891a      	ldrh	r2, [r3, #8]
 8016278:	6a3b      	ldr	r3, [r7, #32]
 801627a:	891b      	ldrh	r3, [r3, #8]
 801627c:	1ad3      	subs	r3, r2, r3
 801627e:	b29b      	uxth	r3, r3
 8016280:	2201      	movs	r2, #1
 8016282:	6939      	ldr	r1, [r7, #16]
 8016284:	f7fa fdd4 	bl	8010e30 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016288:	6a3b      	ldr	r3, [r7, #32]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	4618      	mov	r0, r3
 8016290:	f7f9 f958 	bl	800f544 <lwip_htonl>
 8016294:	4603      	mov	r3, r0
 8016296:	3301      	adds	r3, #1
 8016298:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	da02      	bge.n	80162ac <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	3304      	adds	r3, #4
 80162b0:	4618      	mov	r0, r3
 80162b2:	f002 ff5b 	bl	801916c <ip4_route>
 80162b6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d103      	bne.n	80162c6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80162be:	23fc      	movs	r3, #252	; 0xfc
 80162c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162c4:	e011      	b.n	80162ea <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80162c6:	6879      	ldr	r1, [r7, #4]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	1d1a      	adds	r2, r3, #4
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	7a98      	ldrb	r0, [r3, #10]
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	9302      	str	r3, [sp, #8]
 80162d4:	2306      	movs	r3, #6
 80162d6:	9301      	str	r3, [sp, #4]
 80162d8:	2300      	movs	r3, #0
 80162da:	9300      	str	r3, [sp, #0]
 80162dc:	4603      	mov	r3, r0
 80162de:	69b8      	ldr	r0, [r7, #24]
 80162e0:	f003 f90c 	bl	80194fc <ip4_output_if>
 80162e4:	4603      	mov	r3, r0
 80162e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80162ea:	69b8      	ldr	r0, [r7, #24]
 80162ec:	f7fa fb94 	bl	8010a18 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80162f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	372c      	adds	r7, #44	; 0x2c
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd90      	pop	{r4, r7, pc}

080162fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016304:	f7fa fe16 	bl	8010f34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016308:	4b0a      	ldr	r3, [pc, #40]	; (8016334 <tcpip_tcp_timer+0x38>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d103      	bne.n	8016318 <tcpip_tcp_timer+0x1c>
 8016310:	4b09      	ldr	r3, [pc, #36]	; (8016338 <tcpip_tcp_timer+0x3c>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d005      	beq.n	8016324 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016318:	2200      	movs	r2, #0
 801631a:	4908      	ldr	r1, [pc, #32]	; (801633c <tcpip_tcp_timer+0x40>)
 801631c:	20fa      	movs	r0, #250	; 0xfa
 801631e:	f000 f86f 	bl	8016400 <sys_timeout>
 8016322:	e003      	b.n	801632c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016324:	4b06      	ldr	r3, [pc, #24]	; (8016340 <tcpip_tcp_timer+0x44>)
 8016326:	2200      	movs	r2, #0
 8016328:	601a      	str	r2, [r3, #0]
  }
}
 801632a:	bf00      	nop
 801632c:	bf00      	nop
 801632e:	3708      	adds	r7, #8
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	240076d0 	.word	0x240076d0
 8016338:	240076d4 	.word	0x240076d4
 801633c:	080162fd 	.word	0x080162fd
 8016340:	2400771c 	.word	0x2400771c

08016344 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016348:	4b0a      	ldr	r3, [pc, #40]	; (8016374 <tcp_timer_needed+0x30>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d10f      	bne.n	8016370 <tcp_timer_needed+0x2c>
 8016350:	4b09      	ldr	r3, [pc, #36]	; (8016378 <tcp_timer_needed+0x34>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d103      	bne.n	8016360 <tcp_timer_needed+0x1c>
 8016358:	4b08      	ldr	r3, [pc, #32]	; (801637c <tcp_timer_needed+0x38>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d007      	beq.n	8016370 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016360:	4b04      	ldr	r3, [pc, #16]	; (8016374 <tcp_timer_needed+0x30>)
 8016362:	2201      	movs	r2, #1
 8016364:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016366:	2200      	movs	r2, #0
 8016368:	4905      	ldr	r1, [pc, #20]	; (8016380 <tcp_timer_needed+0x3c>)
 801636a:	20fa      	movs	r0, #250	; 0xfa
 801636c:	f000 f848 	bl	8016400 <sys_timeout>
  }
}
 8016370:	bf00      	nop
 8016372:	bd80      	pop	{r7, pc}
 8016374:	2400771c 	.word	0x2400771c
 8016378:	240076d0 	.word	0x240076d0
 801637c:	240076d4 	.word	0x240076d4
 8016380:	080162fd 	.word	0x080162fd

08016384 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	4903      	ldr	r1, [pc, #12]	; (80163ac <cyclic_timer+0x28>)
 801639e:	4618      	mov	r0, r3
 80163a0:	f000 f82e 	bl	8016400 <sys_timeout>
}
 80163a4:	bf00      	nop
 80163a6:	3710      	adds	r7, #16
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	08016385 	.word	0x08016385

080163b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80163b6:	2301      	movs	r3, #1
 80163b8:	607b      	str	r3, [r7, #4]
 80163ba:	e00e      	b.n	80163da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80163bc:	4a0d      	ldr	r2, [pc, #52]	; (80163f4 <sys_timeouts_init+0x44>)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	4a0a      	ldr	r2, [pc, #40]	; (80163f4 <sys_timeouts_init+0x44>)
 80163ca:	4413      	add	r3, r2
 80163cc:	461a      	mov	r2, r3
 80163ce:	490a      	ldr	r1, [pc, #40]	; (80163f8 <sys_timeouts_init+0x48>)
 80163d0:	f000 f816 	bl	8016400 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	3301      	adds	r3, #1
 80163d8:	607b      	str	r3, [r7, #4]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2b04      	cmp	r3, #4
 80163de:	d9ed      	bls.n	80163bc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80163e0:	f7f3 fdd4 	bl	8009f8c <sys_now>
 80163e4:	4603      	mov	r3, r0
 80163e6:	4a05      	ldr	r2, [pc, #20]	; (80163fc <sys_timeouts_init+0x4c>)
 80163e8:	6013      	str	r3, [r2, #0]
}
 80163ea:	bf00      	nop
 80163ec:	3708      	adds	r7, #8
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	0801f1f0 	.word	0x0801f1f0
 80163f8:	08016385 	.word	0x08016385
 80163fc:	24007718 	.word	0x24007718

08016400 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b088      	sub	sp, #32
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801640c:	200a      	movs	r0, #10
 801640e:	f7f9 fc97 	bl	800fd40 <memp_malloc>
 8016412:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d10a      	bne.n	8016430 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801641a:	697b      	ldr	r3, [r7, #20]
 801641c:	2b00      	cmp	r3, #0
 801641e:	f040 8084 	bne.w	801652a <sys_timeout+0x12a>
 8016422:	4b44      	ldr	r3, [pc, #272]	; (8016534 <sys_timeout+0x134>)
 8016424:	22d4      	movs	r2, #212	; 0xd4
 8016426:	4944      	ldr	r1, [pc, #272]	; (8016538 <sys_timeout+0x138>)
 8016428:	4844      	ldr	r0, [pc, #272]	; (801653c <sys_timeout+0x13c>)
 801642a:	f004 faeb 	bl	801aa04 <iprintf>
    return;
 801642e:	e07c      	b.n	801652a <sys_timeout+0x12a>
  }

  now = sys_now();
 8016430:	f7f3 fdac 	bl	8009f8c <sys_now>
 8016434:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016436:	4b42      	ldr	r3, [pc, #264]	; (8016540 <sys_timeout+0x140>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d105      	bne.n	801644a <sys_timeout+0x4a>
    diff = 0;
 801643e:	2300      	movs	r3, #0
 8016440:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8016442:	4a40      	ldr	r2, [pc, #256]	; (8016544 <sys_timeout+0x144>)
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	6013      	str	r3, [r2, #0]
 8016448:	e004      	b.n	8016454 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801644a:	4b3e      	ldr	r3, [pc, #248]	; (8016544 <sys_timeout+0x144>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	693a      	ldr	r2, [r7, #16]
 8016450:	1ad3      	subs	r3, r2, r3
 8016452:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	2200      	movs	r2, #0
 8016458:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016466:	68fa      	ldr	r2, [r7, #12]
 8016468:	69bb      	ldr	r3, [r7, #24]
 801646a:	441a      	add	r2, r3
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016470:	4b33      	ldr	r3, [pc, #204]	; (8016540 <sys_timeout+0x140>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d103      	bne.n	8016480 <sys_timeout+0x80>
    next_timeout = timeout;
 8016478:	4a31      	ldr	r2, [pc, #196]	; (8016540 <sys_timeout+0x140>)
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	6013      	str	r3, [r2, #0]
    return;
 801647e:	e055      	b.n	801652c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8016480:	4b2f      	ldr	r3, [pc, #188]	; (8016540 <sys_timeout+0x140>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	685b      	ldr	r3, [r3, #4]
 8016486:	68fa      	ldr	r2, [r7, #12]
 8016488:	429a      	cmp	r2, r3
 801648a:	d20f      	bcs.n	80164ac <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801648c:	4b2c      	ldr	r3, [pc, #176]	; (8016540 <sys_timeout+0x140>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	6859      	ldr	r1, [r3, #4]
 8016492:	4b2b      	ldr	r3, [pc, #172]	; (8016540 <sys_timeout+0x140>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	68fa      	ldr	r2, [r7, #12]
 8016498:	1a8a      	subs	r2, r1, r2
 801649a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801649c:	4b28      	ldr	r3, [pc, #160]	; (8016540 <sys_timeout+0x140>)
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80164a4:	4a26      	ldr	r2, [pc, #152]	; (8016540 <sys_timeout+0x140>)
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	6013      	str	r3, [r2, #0]
 80164aa:	e03f      	b.n	801652c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80164ac:	4b24      	ldr	r3, [pc, #144]	; (8016540 <sys_timeout+0x140>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	61fb      	str	r3, [r7, #28]
 80164b2:	e036      	b.n	8016522 <sys_timeout+0x122>
      timeout->time -= t->time;
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	685a      	ldr	r2, [r3, #4]
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	1ad2      	subs	r2, r2, r3
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d006      	beq.n	80164d8 <sys_timeout+0xd8>
 80164ca:	69fb      	ldr	r3, [r7, #28]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	685a      	ldr	r2, [r3, #4]
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d921      	bls.n	801651c <sys_timeout+0x11c>
        if (t->next != NULL) {
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d009      	beq.n	80164f4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	6859      	ldr	r1, [r3, #4]
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	685a      	ldr	r2, [r3, #4]
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	1a8a      	subs	r2, r1, r2
 80164f0:	605a      	str	r2, [r3, #4]
 80164f2:	e00b      	b.n	801650c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	68fa      	ldr	r2, [r7, #12]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d206      	bcs.n	801650c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80164fe:	4b10      	ldr	r3, [pc, #64]	; (8016540 <sys_timeout+0x140>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	685a      	ldr	r2, [r3, #4]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	441a      	add	r2, r3
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	681a      	ldr	r2, [r3, #0]
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016514:	69fb      	ldr	r3, [r7, #28]
 8016516:	697a      	ldr	r2, [r7, #20]
 8016518:	601a      	str	r2, [r3, #0]
        break;
 801651a:	e007      	b.n	801652c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	61fb      	str	r3, [r7, #28]
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d1c5      	bne.n	80164b4 <sys_timeout+0xb4>
 8016528:	e000      	b.n	801652c <sys_timeout+0x12c>
    return;
 801652a:	bf00      	nop
      }
    }
  }
}
 801652c:	3720      	adds	r7, #32
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	0801e174 	.word	0x0801e174
 8016538:	0801e1d0 	.word	0x0801e1d0
 801653c:	0801e210 	.word	0x0801e210
 8016540:	24007714 	.word	0x24007714
 8016544:	24007718 	.word	0x24007718

08016548 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b086      	sub	sp, #24
 801654c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801654e:	4b24      	ldr	r3, [pc, #144]	; (80165e0 <sys_check_timeouts+0x98>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d03f      	beq.n	80165d6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016556:	f7f3 fd19 	bl	8009f8c <sys_now>
 801655a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801655c:	4b21      	ldr	r3, [pc, #132]	; (80165e4 <sys_check_timeouts+0x9c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	68fa      	ldr	r2, [r7, #12]
 8016562:	1ad3      	subs	r3, r2, r3
 8016564:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801656a:	4b1d      	ldr	r3, [pc, #116]	; (80165e0 <sys_check_timeouts+0x98>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8016570:	68bb      	ldr	r3, [r7, #8]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d02c      	beq.n	80165d0 <sys_check_timeouts+0x88>
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	697a      	ldr	r2, [r7, #20]
 801657c:	429a      	cmp	r2, r3
 801657e:	d327      	bcc.n	80165d0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8016580:	2301      	movs	r3, #1
 8016582:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	685a      	ldr	r2, [r3, #4]
 8016588:	4b16      	ldr	r3, [pc, #88]	; (80165e4 <sys_check_timeouts+0x9c>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	4413      	add	r3, r2
 801658e:	4a15      	ldr	r2, [pc, #84]	; (80165e4 <sys_check_timeouts+0x9c>)
 8016590:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	697a      	ldr	r2, [r7, #20]
 8016598:	1ad3      	subs	r3, r2, r3
 801659a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	4a0f      	ldr	r2, [pc, #60]	; (80165e0 <sys_check_timeouts+0x98>)
 80165a2:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	689b      	ldr	r3, [r3, #8]
 80165a8:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80165b0:	68b9      	ldr	r1, [r7, #8]
 80165b2:	200a      	movs	r0, #10
 80165b4:	f7f9 fc3a 	bl	800fe2c <memp_free>
        if (handler != NULL) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d008      	beq.n	80165d0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80165be:	480a      	ldr	r0, [pc, #40]	; (80165e8 <sys_check_timeouts+0xa0>)
 80165c0:	f004 f976 	bl	801a8b0 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6838      	ldr	r0, [r7, #0]
 80165c8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80165ca:	4807      	ldr	r0, [pc, #28]	; (80165e8 <sys_check_timeouts+0xa0>)
 80165cc:	f004 f97f 	bl	801a8ce <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80165d0:	7cfb      	ldrb	r3, [r7, #19]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d1c7      	bne.n	8016566 <sys_check_timeouts+0x1e>
  }
}
 80165d6:	bf00      	nop
 80165d8:	3718      	adds	r7, #24
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop
 80165e0:	24007714 	.word	0x24007714
 80165e4:	24007718 	.word	0x24007718
 80165e8:	240045a4 	.word	0x240045a4

080165ec <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80165f2:	4b0f      	ldr	r3, [pc, #60]	; (8016630 <sys_timeouts_sleeptime+0x44>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d102      	bne.n	8016600 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80165fa:	f04f 33ff 	mov.w	r3, #4294967295
 80165fe:	e013      	b.n	8016628 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8016600:	f7f3 fcc4 	bl	8009f8c <sys_now>
 8016604:	4602      	mov	r2, r0
 8016606:	4b0b      	ldr	r3, [pc, #44]	; (8016634 <sys_timeouts_sleeptime+0x48>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801660e:	4b08      	ldr	r3, [pc, #32]	; (8016630 <sys_timeouts_sleeptime+0x44>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	429a      	cmp	r2, r3
 8016618:	d901      	bls.n	801661e <sys_timeouts_sleeptime+0x32>
    return 0;
 801661a:	2300      	movs	r3, #0
 801661c:	e004      	b.n	8016628 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801661e:	4b04      	ldr	r3, [pc, #16]	; (8016630 <sys_timeouts_sleeptime+0x44>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	685a      	ldr	r2, [r3, #4]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	1ad3      	subs	r3, r2, r3
  }
}
 8016628:	4618      	mov	r0, r3
 801662a:	3708      	adds	r7, #8
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}
 8016630:	24007714 	.word	0x24007714
 8016634:	24007718 	.word	0x24007718

08016638 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b084      	sub	sp, #16
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8016642:	4b0f      	ldr	r3, [pc, #60]	; (8016680 <sys_timeouts_mbox_fetch+0x48>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d105      	bne.n	8016656 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801664a:	2200      	movs	r2, #0
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f003 fffa 	bl	801a648 <sys_arch_mbox_fetch>
    return;
 8016654:	e011      	b.n	801667a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016656:	f7ff ffc9 	bl	80165ec <sys_timeouts_sleeptime>
 801665a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d008      	beq.n	8016674 <sys_timeouts_mbox_fetch+0x3c>
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	6839      	ldr	r1, [r7, #0]
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f003 ffee 	bl	801a648 <sys_arch_mbox_fetch>
 801666c:	4603      	mov	r3, r0
 801666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016672:	d102      	bne.n	801667a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016674:	f7ff ff68 	bl	8016548 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016678:	e7e3      	b.n	8016642 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	24007714 	.word	0x24007714

08016684 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016684:	b480      	push	{r7}
 8016686:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016688:	bf00      	nop
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr
	...

08016694 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016694:	b480      	push	{r7}
 8016696:	b083      	sub	sp, #12
 8016698:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801669e:	4b17      	ldr	r3, [pc, #92]	; (80166fc <udp_new_port+0x68>)
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	1c5a      	adds	r2, r3, #1
 80166a4:	b291      	uxth	r1, r2
 80166a6:	4a15      	ldr	r2, [pc, #84]	; (80166fc <udp_new_port+0x68>)
 80166a8:	8011      	strh	r1, [r2, #0]
 80166aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166ae:	4293      	cmp	r3, r2
 80166b0:	d103      	bne.n	80166ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80166b2:	4b12      	ldr	r3, [pc, #72]	; (80166fc <udp_new_port+0x68>)
 80166b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80166b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80166ba:	4b11      	ldr	r3, [pc, #68]	; (8016700 <udp_new_port+0x6c>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	603b      	str	r3, [r7, #0]
 80166c0:	e011      	b.n	80166e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	8a5a      	ldrh	r2, [r3, #18]
 80166c6:	4b0d      	ldr	r3, [pc, #52]	; (80166fc <udp_new_port+0x68>)
 80166c8:	881b      	ldrh	r3, [r3, #0]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d108      	bne.n	80166e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80166ce:	88fb      	ldrh	r3, [r7, #6]
 80166d0:	3301      	adds	r3, #1
 80166d2:	80fb      	strh	r3, [r7, #6]
 80166d4:	88fb      	ldrh	r3, [r7, #6]
 80166d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80166da:	d3e0      	bcc.n	801669e <udp_new_port+0xa>
        return 0;
 80166dc:	2300      	movs	r3, #0
 80166de:	e007      	b.n	80166f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	603b      	str	r3, [r7, #0]
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d1ea      	bne.n	80166c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80166ec:	4b03      	ldr	r3, [pc, #12]	; (80166fc <udp_new_port+0x68>)
 80166ee:	881b      	ldrh	r3, [r3, #0]
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr
 80166fc:	24000030 	.word	0x24000030
 8016700:	24007720 	.word	0x24007720

08016704 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016704:	b480      	push	{r7}
 8016706:	b085      	sub	sp, #20
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	4613      	mov	r3, r2
 8016710:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016712:	79fb      	ldrb	r3, [r7, #7]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d018      	beq.n	801674a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d013      	beq.n	8016746 <udp_input_local_match+0x42>
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d00f      	beq.n	8016746 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016726:	4b14      	ldr	r3, [pc, #80]	; (8016778 <udp_input_local_match+0x74>)
 8016728:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672e:	d00a      	beq.n	8016746 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	4b10      	ldr	r3, [pc, #64]	; (8016778 <udp_input_local_match+0x74>)
 8016736:	695b      	ldr	r3, [r3, #20]
 8016738:	405a      	eors	r2, r3
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	3308      	adds	r3, #8
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016742:	2b00      	cmp	r3, #0
 8016744:	d110      	bne.n	8016768 <udp_input_local_match+0x64>
          return 1;
 8016746:	2301      	movs	r3, #1
 8016748:	e00f      	b.n	801676a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d009      	beq.n	8016764 <udp_input_local_match+0x60>
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d005      	beq.n	8016764 <udp_input_local_match+0x60>
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	4b06      	ldr	r3, [pc, #24]	; (8016778 <udp_input_local_match+0x74>)
 801675e:	695b      	ldr	r3, [r3, #20]
 8016760:	429a      	cmp	r2, r3
 8016762:	d101      	bne.n	8016768 <udp_input_local_match+0x64>
      return 1;
 8016764:	2301      	movs	r3, #1
 8016766:	e000      	b.n	801676a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	3714      	adds	r7, #20
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	240045a8 	.word	0x240045a8

0801677c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801677c:	b590      	push	{r4, r7, lr}
 801677e:	b08d      	sub	sp, #52	; 0x34
 8016780:	af02      	add	r7, sp, #8
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	895b      	ldrh	r3, [r3, #10]
 801678e:	2b07      	cmp	r3, #7
 8016790:	d803      	bhi.n	801679a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f7fa f940 	bl	8010a18 <pbuf_free>
    goto end;
 8016798:	e0c6      	b.n	8016928 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	685b      	ldr	r3, [r3, #4]
 801679e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80167a0:	4b63      	ldr	r3, [pc, #396]	; (8016930 <udp_input+0x1b4>)
 80167a2:	695b      	ldr	r3, [r3, #20]
 80167a4:	4a62      	ldr	r2, [pc, #392]	; (8016930 <udp_input+0x1b4>)
 80167a6:	6812      	ldr	r2, [r2, #0]
 80167a8:	4611      	mov	r1, r2
 80167aa:	4618      	mov	r0, r3
 80167ac:	f002 ff78 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 80167b0:	4603      	mov	r3, r0
 80167b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	881b      	ldrh	r3, [r3, #0]
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7f8 feb4 	bl	800f528 <lwip_htons>
 80167c0:	4603      	mov	r3, r0
 80167c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	885b      	ldrh	r3, [r3, #2]
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f8 feac 	bl	800f528 <lwip_htons>
 80167d0:	4603      	mov	r3, r0
 80167d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80167d4:	2300      	movs	r3, #0
 80167d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80167d8:	2300      	movs	r3, #0
 80167da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80167dc:	2300      	movs	r3, #0
 80167de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80167e0:	4b54      	ldr	r3, [pc, #336]	; (8016934 <udp_input+0x1b8>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	627b      	str	r3, [r7, #36]	; 0x24
 80167e6:	e03b      	b.n	8016860 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80167e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ea:	8a5b      	ldrh	r3, [r3, #18]
 80167ec:	89fa      	ldrh	r2, [r7, #14]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d131      	bne.n	8016856 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80167f2:	7cfb      	ldrb	r3, [r7, #19]
 80167f4:	461a      	mov	r2, r3
 80167f6:	6839      	ldr	r1, [r7, #0]
 80167f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167fa:	f7ff ff83 	bl	8016704 <udp_input_local_match>
 80167fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016800:	2b00      	cmp	r3, #0
 8016802:	d028      	beq.n	8016856 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8016804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016806:	7c1b      	ldrb	r3, [r3, #16]
 8016808:	f003 0304 	and.w	r3, r3, #4
 801680c:	2b00      	cmp	r3, #0
 801680e:	d104      	bne.n	801681a <udp_input+0x9e>
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d101      	bne.n	801681a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016818:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	8a9b      	ldrh	r3, [r3, #20]
 801681e:	8a3a      	ldrh	r2, [r7, #16]
 8016820:	429a      	cmp	r2, r3
 8016822:	d118      	bne.n	8016856 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016826:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016828:	2b00      	cmp	r3, #0
 801682a:	d005      	beq.n	8016838 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682e:	685a      	ldr	r2, [r3, #4]
 8016830:	4b3f      	ldr	r3, [pc, #252]	; (8016930 <udp_input+0x1b4>)
 8016832:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016834:	429a      	cmp	r2, r3
 8016836:	d10e      	bne.n	8016856 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016838:	6a3b      	ldr	r3, [r7, #32]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d014      	beq.n	8016868 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016840:	68da      	ldr	r2, [r3, #12]
 8016842:	6a3b      	ldr	r3, [r7, #32]
 8016844:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016846:	4b3b      	ldr	r3, [pc, #236]	; (8016934 <udp_input+0x1b8>)
 8016848:	681a      	ldr	r2, [r3, #0]
 801684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801684e:	4a39      	ldr	r2, [pc, #228]	; (8016934 <udp_input+0x1b8>)
 8016850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016852:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016854:	e008      	b.n	8016868 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016858:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	627b      	str	r3, [r7, #36]	; 0x24
 8016860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016862:	2b00      	cmp	r3, #0
 8016864:	d1c0      	bne.n	80167e8 <udp_input+0x6c>
 8016866:	e000      	b.n	801686a <udp_input+0xee>
        break;
 8016868:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686c:	2b00      	cmp	r3, #0
 801686e:	d101      	bne.n	8016874 <udp_input+0xf8>
    pcb = uncon_pcb;
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	2b00      	cmp	r3, #0
 8016878:	d002      	beq.n	8016880 <udp_input+0x104>
    for_us = 1;
 801687a:	2301      	movs	r3, #1
 801687c:	76fb      	strb	r3, [r7, #27]
 801687e:	e00a      	b.n	8016896 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	3304      	adds	r3, #4
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	4b2a      	ldr	r3, [pc, #168]	; (8016930 <udp_input+0x1b4>)
 8016888:	695b      	ldr	r3, [r3, #20]
 801688a:	429a      	cmp	r2, r3
 801688c:	bf0c      	ite	eq
 801688e:	2301      	moveq	r3, #1
 8016890:	2300      	movne	r3, #0
 8016892:	b2db      	uxtb	r3, r3
 8016894:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016896:	7efb      	ldrb	r3, [r7, #27]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d042      	beq.n	8016922 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801689c:	f06f 0107 	mvn.w	r1, #7
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f7fa f895 	bl	80109d0 <pbuf_header>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00a      	beq.n	80168c2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80168ac:	4b22      	ldr	r3, [pc, #136]	; (8016938 <udp_input+0x1bc>)
 80168ae:	f240 1255 	movw	r2, #341	; 0x155
 80168b2:	4922      	ldr	r1, [pc, #136]	; (801693c <udp_input+0x1c0>)
 80168b4:	4822      	ldr	r0, [pc, #136]	; (8016940 <udp_input+0x1c4>)
 80168b6:	f004 f8a5 	bl	801aa04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f7fa f8ac 	bl	8010a18 <pbuf_free>
      goto end;
 80168c0:	e032      	b.n	8016928 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80168c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d012      	beq.n	80168ee <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	699b      	ldr	r3, [r3, #24]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d00a      	beq.n	80168e6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80168d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d2:	699c      	ldr	r4, [r3, #24]
 80168d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d6:	69d8      	ldr	r0, [r3, #28]
 80168d8:	8a3b      	ldrh	r3, [r7, #16]
 80168da:	9300      	str	r3, [sp, #0]
 80168dc:	4b19      	ldr	r3, [pc, #100]	; (8016944 <udp_input+0x1c8>)
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80168e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80168e4:	e021      	b.n	801692a <udp_input+0x1ae>
        pbuf_free(p);
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f7fa f896 	bl	8010a18 <pbuf_free>
        goto end;
 80168ec:	e01c      	b.n	8016928 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80168ee:	7cfb      	ldrb	r3, [r7, #19]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d112      	bne.n	801691a <udp_input+0x19e>
 80168f4:	4b0e      	ldr	r3, [pc, #56]	; (8016930 <udp_input+0x1b4>)
 80168f6:	695b      	ldr	r3, [r3, #20]
 80168f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168fc:	2be0      	cmp	r3, #224	; 0xe0
 80168fe:	d00c      	beq.n	801691a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016900:	4b0b      	ldr	r3, [pc, #44]	; (8016930 <udp_input+0x1b4>)
 8016902:	899b      	ldrh	r3, [r3, #12]
 8016904:	3308      	adds	r3, #8
 8016906:	b29b      	uxth	r3, r3
 8016908:	b21b      	sxth	r3, r3
 801690a:	4619      	mov	r1, r3
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7fa f871 	bl	80109f4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016912:	2103      	movs	r1, #3
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f002 fba1 	bl	801905c <icmp_dest_unreach>
      pbuf_free(p);
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7fa f87c 	bl	8010a18 <pbuf_free>
  return;
 8016920:	e003      	b.n	801692a <udp_input+0x1ae>
    pbuf_free(p);
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f7fa f878 	bl	8010a18 <pbuf_free>
  return;
 8016928:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801692a:	372c      	adds	r7, #44	; 0x2c
 801692c:	46bd      	mov	sp, r7
 801692e:	bd90      	pop	{r4, r7, pc}
 8016930:	240045a8 	.word	0x240045a8
 8016934:	24007720 	.word	0x24007720
 8016938:	0801e238 	.word	0x0801e238
 801693c:	0801e290 	.word	0x0801e290
 8016940:	0801e2a4 	.word	0x0801e2a4
 8016944:	240045b8 	.word	0x240045b8

08016948 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b088      	sub	sp, #32
 801694c:	af02      	add	r7, sp, #8
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d002      	beq.n	8016962 <udp_sendto_if+0x1a>
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d102      	bne.n	8016968 <udp_sendto_if+0x20>
    return ERR_VAL;
 8016962:	f06f 0305 	mvn.w	r3, #5
 8016966:	e028      	b.n	80169ba <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d009      	beq.n	8016982 <udp_sendto_if+0x3a>
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d005      	beq.n	8016982 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801697e:	2be0      	cmp	r3, #224	; 0xe0
 8016980:	d103      	bne.n	801698a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8016982:	6a3b      	ldr	r3, [r7, #32]
 8016984:	3304      	adds	r3, #4
 8016986:	617b      	str	r3, [r7, #20]
 8016988:	e00b      	b.n	80169a2 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	3304      	adds	r3, #4
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	429a      	cmp	r2, r3
 8016996:	d002      	beq.n	801699e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8016998:	f06f 0303 	mvn.w	r3, #3
 801699c:	e00d      	b.n	80169ba <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80169a2:	887a      	ldrh	r2, [r7, #2]
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	9301      	str	r3, [sp, #4]
 80169a8:	6a3b      	ldr	r3, [r7, #32]
 80169aa:	9300      	str	r3, [sp, #0]
 80169ac:	4613      	mov	r3, r2
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	68b9      	ldr	r1, [r7, #8]
 80169b2:	68f8      	ldr	r0, [r7, #12]
 80169b4:	f000 f806 	bl	80169c4 <udp_sendto_if_src>
 80169b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3718      	adds	r7, #24
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
	...

080169c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b08c      	sub	sp, #48	; 0x30
 80169c8:	af04      	add	r7, sp, #16
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	607a      	str	r2, [r7, #4]
 80169d0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d002      	beq.n	80169de <udp_sendto_if_src+0x1a>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d102      	bne.n	80169e4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80169de:	f06f 0305 	mvn.w	r3, #5
 80169e2:	e07e      	b.n	8016ae2 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	8a5b      	ldrh	r3, [r3, #18]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d10f      	bne.n	8016a0c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80169ec:	68f9      	ldr	r1, [r7, #12]
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	8a5b      	ldrh	r3, [r3, #18]
 80169f2:	461a      	mov	r2, r3
 80169f4:	68f8      	ldr	r0, [r7, #12]
 80169f6:	f000 f87f 	bl	8016af8 <udp_bind>
 80169fa:	4603      	mov	r3, r0
 80169fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80169fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d002      	beq.n	8016a0c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016a06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016a0a:	e06a      	b.n	8016ae2 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8016a0c:	2108      	movs	r1, #8
 8016a0e:	68b8      	ldr	r0, [r7, #8]
 8016a10:	f7f9 ffde 	bl	80109d0 <pbuf_header>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d014      	beq.n	8016a44 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	2108      	movs	r1, #8
 8016a1e:	2001      	movs	r0, #1
 8016a20:	f7f9 fc82 	bl	8010328 <pbuf_alloc>
 8016a24:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d102      	bne.n	8016a32 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a30:	e057      	b.n	8016ae2 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	891b      	ldrh	r3, [r3, #8]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d006      	beq.n	8016a48 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016a3a:	68b9      	ldr	r1, [r7, #8]
 8016a3c:	69f8      	ldr	r0, [r7, #28]
 8016a3e:	f7fa f91b 	bl	8010c78 <pbuf_chain>
 8016a42:	e001      	b.n	8016a48 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	895b      	ldrh	r3, [r3, #10]
 8016a4c:	2b07      	cmp	r3, #7
 8016a4e:	d806      	bhi.n	8016a5e <udp_sendto_if_src+0x9a>
 8016a50:	4b26      	ldr	r3, [pc, #152]	; (8016aec <udp_sendto_if_src+0x128>)
 8016a52:	f240 22db 	movw	r2, #731	; 0x2db
 8016a56:	4926      	ldr	r1, [pc, #152]	; (8016af0 <udp_sendto_if_src+0x12c>)
 8016a58:	4826      	ldr	r0, [pc, #152]	; (8016af4 <udp_sendto_if_src+0x130>)
 8016a5a:	f003 ffd3 	bl	801aa04 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	8a5b      	ldrh	r3, [r3, #18]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7f8 fd5d 	bl	800f528 <lwip_htons>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	461a      	mov	r2, r3
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016a76:	887b      	ldrh	r3, [r7, #2]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7f8 fd55 	bl	800f528 <lwip_htons>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	461a      	mov	r2, r3
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	2200      	movs	r2, #0
 8016a8a:	719a      	strb	r2, [r3, #6]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	891b      	ldrh	r3, [r3, #8]
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7f8 fd47 	bl	800f528 <lwip_htons>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016aa2:	2311      	movs	r3, #17
 8016aa4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	7a9b      	ldrb	r3, [r3, #10]
 8016aaa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	7a5b      	ldrb	r3, [r3, #9]
 8016ab0:	7cb9      	ldrb	r1, [r7, #18]
 8016ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ab4:	9202      	str	r2, [sp, #8]
 8016ab6:	7cfa      	ldrb	r2, [r7, #19]
 8016ab8:	9201      	str	r2, [sp, #4]
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	460b      	mov	r3, r1
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ac2:	69f8      	ldr	r0, [r7, #28]
 8016ac4:	f002 fd44 	bl	8019550 <ip4_output_if_src>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016acc:	69fa      	ldr	r2, [r7, #28]
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d004      	beq.n	8016ade <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8016ad4:	69f8      	ldr	r0, [r7, #28]
 8016ad6:	f7f9 ff9f 	bl	8010a18 <pbuf_free>
    q = NULL;
 8016ada:	2300      	movs	r3, #0
 8016adc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016ade:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3720      	adds	r7, #32
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	0801e238 	.word	0x0801e238
 8016af0:	0801e2cc 	.word	0x0801e2cc
 8016af4:	0801e2a4 	.word	0x0801e2a4

08016af8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b086      	sub	sp, #24
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	60f8      	str	r0, [r7, #12]
 8016b00:	60b9      	str	r1, [r7, #8]
 8016b02:	4613      	mov	r3, r2
 8016b04:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d101      	bne.n	8016b10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016b0c:	4b30      	ldr	r3, [pc, #192]	; (8016bd0 <udp_bind+0xd8>)
 8016b0e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d002      	beq.n	8016b1c <udp_bind+0x24>
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d102      	bne.n	8016b22 <udp_bind+0x2a>
    return ERR_VAL;
 8016b1c:	f06f 0305 	mvn.w	r3, #5
 8016b20:	e052      	b.n	8016bc8 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b26:	4b2b      	ldr	r3, [pc, #172]	; (8016bd4 <udp_bind+0xdc>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	617b      	str	r3, [r7, #20]
 8016b2c:	e009      	b.n	8016b42 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016b2e:	68fa      	ldr	r2, [r7, #12]
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d102      	bne.n	8016b3c <udp_bind+0x44>
      rebind = 1;
 8016b36:	2301      	movs	r3, #1
 8016b38:	74fb      	strb	r3, [r7, #19]
      break;
 8016b3a:	e005      	b.n	8016b48 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	617b      	str	r3, [r7, #20]
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d1f2      	bne.n	8016b2e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016b48:	88fb      	ldrh	r3, [r7, #6]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d109      	bne.n	8016b62 <udp_bind+0x6a>
    port = udp_new_port();
 8016b4e:	f7ff fda1 	bl	8016694 <udp_new_port>
 8016b52:	4603      	mov	r3, r0
 8016b54:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016b56:	88fb      	ldrh	r3, [r7, #6]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d11e      	bne.n	8016b9a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016b5c:	f06f 0307 	mvn.w	r3, #7
 8016b60:	e032      	b.n	8016bc8 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b62:	4b1c      	ldr	r3, [pc, #112]	; (8016bd4 <udp_bind+0xdc>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	617b      	str	r3, [r7, #20]
 8016b68:	e014      	b.n	8016b94 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016b6a:	68fa      	ldr	r2, [r7, #12]
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d00d      	beq.n	8016b8e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016b72:	697b      	ldr	r3, [r7, #20]
 8016b74:	8a5b      	ldrh	r3, [r3, #18]
 8016b76:	88fa      	ldrh	r2, [r7, #6]
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d108      	bne.n	8016b8e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d102      	bne.n	8016b8e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016b88:	f06f 0307 	mvn.w	r3, #7
 8016b8c:	e01c      	b.n	8016bc8 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	617b      	str	r3, [r7, #20]
 8016b94:	697b      	ldr	r3, [r7, #20]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d1e7      	bne.n	8016b6a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d002      	beq.n	8016ba6 <udp_bind+0xae>
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	e000      	b.n	8016ba8 <udp_bind+0xb0>
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	88fa      	ldrh	r2, [r7, #6]
 8016bb0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016bb2:	7cfb      	ldrb	r3, [r7, #19]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d106      	bne.n	8016bc6 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016bb8:	4b06      	ldr	r3, [pc, #24]	; (8016bd4 <udp_bind+0xdc>)
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016bc0:	4a04      	ldr	r2, [pc, #16]	; (8016bd4 <udp_bind+0xdc>)
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016bc6:	2300      	movs	r3, #0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3718      	adds	r7, #24
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	0801f218 	.word	0x0801f218
 8016bd4:	24007720 	.word	0x24007720

08016bd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	61da      	str	r2, [r3, #28]
}
 8016bf0:	bf00      	nop
 8016bf2:	3714      	adds	r7, #20
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfa:	4770      	bx	lr

08016bfc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016c04:	4b15      	ldr	r3, [pc, #84]	; (8016c5c <udp_remove+0x60>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d105      	bne.n	8016c1a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016c0e:	4b13      	ldr	r3, [pc, #76]	; (8016c5c <udp_remove+0x60>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	68db      	ldr	r3, [r3, #12]
 8016c14:	4a11      	ldr	r2, [pc, #68]	; (8016c5c <udp_remove+0x60>)
 8016c16:	6013      	str	r3, [r2, #0]
 8016c18:	e017      	b.n	8016c4a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016c1a:	4b10      	ldr	r3, [pc, #64]	; (8016c5c <udp_remove+0x60>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	60fb      	str	r3, [r7, #12]
 8016c20:	e010      	b.n	8016c44 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d009      	beq.n	8016c3e <udp_remove+0x42>
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	687a      	ldr	r2, [r7, #4]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d104      	bne.n	8016c3e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	68da      	ldr	r2, [r3, #12]
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	60da      	str	r2, [r3, #12]
        break;
 8016c3c:	e005      	b.n	8016c4a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	60fb      	str	r3, [r7, #12]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d1eb      	bne.n	8016c22 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016c4a:	6879      	ldr	r1, [r7, #4]
 8016c4c:	2000      	movs	r0, #0
 8016c4e:	f7f9 f8ed 	bl	800fe2c <memp_free>
}
 8016c52:	bf00      	nop
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	24007720 	.word	0x24007720

08016c60 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016c66:	2000      	movs	r0, #0
 8016c68:	f7f9 f86a 	bl	800fd40 <memp_malloc>
 8016c6c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d007      	beq.n	8016c84 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016c74:	2220      	movs	r2, #32
 8016c76:	2100      	movs	r1, #0
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f003 febb 	bl	801a9f4 <memset>
    pcb->ttl = UDP_TTL;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	22ff      	movs	r2, #255	; 0xff
 8016c82:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016c84:	687b      	ldr	r3, [r7, #4]
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3708      	adds	r7, #8
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}

08016c8e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016c8e:	b580      	push	{r7, lr}
 8016c90:	b084      	sub	sp, #16
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	4603      	mov	r3, r0
 8016c96:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8016c98:	f7ff ffe2 	bl	8016c60 <udp_new>
 8016c9c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3710      	adds	r7, #16
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8016ca8:	b480      	push	{r7}
 8016caa:	b085      	sub	sp, #20
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d01e      	beq.n	8016cf6 <udp_netif_ip_addr_changed+0x4e>
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d01a      	beq.n	8016cf6 <udp_netif_ip_addr_changed+0x4e>
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d017      	beq.n	8016cf6 <udp_netif_ip_addr_changed+0x4e>
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d013      	beq.n	8016cf6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016cce:	4b0d      	ldr	r3, [pc, #52]	; (8016d04 <udp_netif_ip_addr_changed+0x5c>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	e00c      	b.n	8016cf0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	681a      	ldr	r2, [r3, #0]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	d103      	bne.n	8016cea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016ce2:	683b      	ldr	r3, [r7, #0]
 8016ce4:	681a      	ldr	r2, [r3, #0]
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	68db      	ldr	r3, [r3, #12]
 8016cee:	60fb      	str	r3, [r7, #12]
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d1ef      	bne.n	8016cd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016cf6:	bf00      	nop
 8016cf8:	3714      	adds	r7, #20
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d00:	4770      	bx	lr
 8016d02:	bf00      	nop
 8016d04:	24007720 	.word	0x24007720

08016d08 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d14:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016d16:	2108      	movs	r1, #8
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f000 fe4f 	bl	80179bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	3328      	adds	r3, #40	; 0x28
 8016d22:	2200      	movs	r2, #0
 8016d24:	4619      	mov	r1, r3
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f001 fe8a 	bl	8018a40 <etharp_query>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	7a9b      	ldrb	r3, [r3, #10]
 8016d34:	2bff      	cmp	r3, #255	; 0xff
 8016d36:	d005      	beq.n	8016d44 <dhcp_check+0x3c>
    dhcp->tries++;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	7a9b      	ldrb	r3, [r3, #10]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	b2da      	uxtb	r2, r3
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8016d44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016d48:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016d4a:	893b      	ldrh	r3, [r7, #8]
 8016d4c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016d50:	4a06      	ldr	r2, [pc, #24]	; (8016d6c <dhcp_check+0x64>)
 8016d52:	fb82 1203 	smull	r1, r2, r2, r3
 8016d56:	1152      	asrs	r2, r2, #5
 8016d58:	17db      	asrs	r3, r3, #31
 8016d5a:	1ad3      	subs	r3, r2, r3
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016d62:	bf00      	nop
 8016d64:	3710      	adds	r7, #16
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	10624dd3 	.word	0x10624dd3

08016d70 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b088      	sub	sp, #32
 8016d74:	af02      	add	r7, sp, #8
 8016d76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d7c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016d7e:	2101      	movs	r1, #1
 8016d80:	6938      	ldr	r0, [r7, #16]
 8016d82:	f000 fe1b 	bl	80179bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8016d86:	2203      	movs	r2, #3
 8016d88:	6939      	ldr	r1, [r7, #16]
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f000 ff22 	bl	8017bd4 <dhcp_create_msg>
 8016d90:	4603      	mov	r3, r0
 8016d92:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8016d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d159      	bne.n	8016e50 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016d9c:	2202      	movs	r2, #2
 8016d9e:	2139      	movs	r1, #57	; 0x39
 8016da0:	6938      	ldr	r0, [r7, #16]
 8016da2:	f000 fe25 	bl	80179f0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016daa:	4619      	mov	r1, r3
 8016dac:	6938      	ldr	r0, [r7, #16]
 8016dae:	f000 fe81 	bl	8017ab4 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8016db2:	2204      	movs	r2, #4
 8016db4:	2132      	movs	r1, #50	; 0x32
 8016db6:	6938      	ldr	r0, [r7, #16]
 8016db8:	f000 fe1a 	bl	80179f0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016dbc:	693b      	ldr	r3, [r7, #16]
 8016dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7f8 fbbf 	bl	800f544 <lwip_htonl>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	4619      	mov	r1, r3
 8016dca:	6938      	ldr	r0, [r7, #16]
 8016dcc:	f000 feac 	bl	8017b28 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8016dd0:	2204      	movs	r2, #4
 8016dd2:	2136      	movs	r1, #54	; 0x36
 8016dd4:	6938      	ldr	r0, [r7, #16]
 8016dd6:	f000 fe0b 	bl	80179f0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7f8 fbb0 	bl	800f544 <lwip_htonl>
 8016de4:	4603      	mov	r3, r0
 8016de6:	4619      	mov	r1, r3
 8016de8:	6938      	ldr	r0, [r7, #16]
 8016dea:	f000 fe9d 	bl	8017b28 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016dee:	2203      	movs	r2, #3
 8016df0:	2137      	movs	r1, #55	; 0x37
 8016df2:	6938      	ldr	r0, [r7, #16]
 8016df4:	f000 fdfc 	bl	80179f0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016df8:	2300      	movs	r3, #0
 8016dfa:	75fb      	strb	r3, [r7, #23]
 8016dfc:	e009      	b.n	8016e12 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8016dfe:	7dfb      	ldrb	r3, [r7, #23]
 8016e00:	4a29      	ldr	r2, [pc, #164]	; (8016ea8 <dhcp_select+0x138>)
 8016e02:	5cd3      	ldrb	r3, [r2, r3]
 8016e04:	4619      	mov	r1, r3
 8016e06:	6938      	ldr	r0, [r7, #16]
 8016e08:	f000 fe2c 	bl	8017a64 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e0c:	7dfb      	ldrb	r3, [r7, #23]
 8016e0e:	3301      	adds	r3, #1
 8016e10:	75fb      	strb	r3, [r7, #23]
 8016e12:	7dfb      	ldrb	r3, [r7, #23]
 8016e14:	2b02      	cmp	r3, #2
 8016e16:	d9f2      	bls.n	8016dfe <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8016e18:	6938      	ldr	r0, [r7, #16]
 8016e1a:	f001 f87f 	bl	8017f1c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	68da      	ldr	r2, [r3, #12]
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	8a9b      	ldrh	r3, [r3, #20]
 8016e26:	33f0      	adds	r3, #240	; 0xf0
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	4610      	mov	r0, r2
 8016e2e:	f7f9 fc7f 	bl	8010730 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8016e32:	4b1e      	ldr	r3, [pc, #120]	; (8016eac <dhcp_select+0x13c>)
 8016e34:	6818      	ldr	r0, [r3, #0]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	68d9      	ldr	r1, [r3, #12]
 8016e3a:	4b1d      	ldr	r3, [pc, #116]	; (8016eb0 <dhcp_select+0x140>)
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	9300      	str	r3, [sp, #0]
 8016e42:	2343      	movs	r3, #67	; 0x43
 8016e44:	4a1b      	ldr	r2, [pc, #108]	; (8016eb4 <dhcp_select+0x144>)
 8016e46:	f7ff fdbd 	bl	80169c4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8016e4a:	6938      	ldr	r0, [r7, #16]
 8016e4c:	f001 f824 	bl	8017e98 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	7a9b      	ldrb	r3, [r3, #10]
 8016e54:	2bff      	cmp	r3, #255	; 0xff
 8016e56:	d005      	beq.n	8016e64 <dhcp_select+0xf4>
    dhcp->tries++;
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	7a9b      	ldrb	r3, [r3, #10]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	b2da      	uxtb	r2, r3
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	7a9b      	ldrb	r3, [r3, #10]
 8016e68:	2b05      	cmp	r3, #5
 8016e6a:	d807      	bhi.n	8016e7c <dhcp_select+0x10c>
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	7a9b      	ldrb	r3, [r3, #10]
 8016e70:	461a      	mov	r2, r3
 8016e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016e76:	4093      	lsls	r3, r2
 8016e78:	b29b      	uxth	r3, r3
 8016e7a:	e001      	b.n	8016e80 <dhcp_select+0x110>
 8016e7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016e80:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016e82:	89bb      	ldrh	r3, [r7, #12]
 8016e84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016e88:	4a0b      	ldr	r2, [pc, #44]	; (8016eb8 <dhcp_select+0x148>)
 8016e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8016e8e:	1152      	asrs	r2, r2, #5
 8016e90:	17db      	asrs	r3, r3, #31
 8016e92:	1ad3      	subs	r3, r2, r3
 8016e94:	b29a      	uxth	r2, r3
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3718      	adds	r7, #24
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}
 8016ea6:	bf00      	nop
 8016ea8:	24000034 	.word	0x24000034
 8016eac:	24007724 	.word	0x24007724
 8016eb0:	0801f218 	.word	0x0801f218
 8016eb4:	0801f21c 	.word	0x0801f21c
 8016eb8:	10624dd3 	.word	0x10624dd3

08016ebc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b082      	sub	sp, #8
 8016ec0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8016ec2:	4b27      	ldr	r3, [pc, #156]	; (8016f60 <dhcp_coarse_tmr+0xa4>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8016ec8:	e042      	b.n	8016f50 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ece:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d039      	beq.n	8016f4a <dhcp_coarse_tmr+0x8e>
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	7a5b      	ldrb	r3, [r3, #9]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d035      	beq.n	8016f4a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d012      	beq.n	8016f0c <dhcp_coarse_tmr+0x50>
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	8c1b      	ldrh	r3, [r3, #32]
 8016eea:	3301      	adds	r3, #1
 8016eec:	b29a      	uxth	r2, r3
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	841a      	strh	r2, [r3, #32]
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	8c1a      	ldrh	r2, [r3, #32]
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d106      	bne.n	8016f0c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 fcd4 	bl	80178ac <dhcp_release>
        dhcp_discover(netif);
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 f9cb 	bl	80172a0 <dhcp_discover>
 8016f0a:	e01e      	b.n	8016f4a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	8bdb      	ldrh	r3, [r3, #30]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00b      	beq.n	8016f2c <dhcp_coarse_tmr+0x70>
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	8bdb      	ldrh	r3, [r3, #30]
 8016f18:	1e5a      	subs	r2, r3, #1
 8016f1a:	b291      	uxth	r1, r2
 8016f1c:	683a      	ldr	r2, [r7, #0]
 8016f1e:	83d1      	strh	r1, [r2, #30]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d103      	bne.n	8016f2c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f000 f8c7 	bl	80170b8 <dhcp_t2_timeout>
 8016f2a:	e00e      	b.n	8016f4a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	8b9b      	ldrh	r3, [r3, #28]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d00a      	beq.n	8016f4a <dhcp_coarse_tmr+0x8e>
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	8b9b      	ldrh	r3, [r3, #28]
 8016f38:	1e5a      	subs	r2, r3, #1
 8016f3a:	b291      	uxth	r1, r2
 8016f3c:	683a      	ldr	r2, [r7, #0]
 8016f3e:	8391      	strh	r1, [r2, #28]
 8016f40:	2b01      	cmp	r3, #1
 8016f42:	d102      	bne.n	8016f4a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f000 f888 	bl	801705a <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d1b9      	bne.n	8016eca <dhcp_coarse_tmr+0xe>
  }
}
 8016f56:	bf00      	nop
 8016f58:	bf00      	nop
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	240076b8 	.word	0x240076b8

08016f64 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8016f6a:	4b16      	ldr	r3, [pc, #88]	; (8016fc4 <dhcp_fine_tmr+0x60>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8016f70:	e020      	b.n	8016fb4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f76:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d017      	beq.n	8016fae <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	8adb      	ldrh	r3, [r3, #22]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d906      	bls.n	8016f94 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	8adb      	ldrh	r3, [r3, #22]
 8016f8a:	3b01      	subs	r3, #1
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	82da      	strh	r2, [r3, #22]
 8016f92:	e00c      	b.n	8016fae <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	8adb      	ldrh	r3, [r3, #22]
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d108      	bne.n	8016fae <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	8adb      	ldrh	r3, [r3, #22]
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	b29a      	uxth	r2, r3
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016fa8:	6878      	ldr	r0, [r7, #4]
 8016faa:	f000 f80d 	bl	8016fc8 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1db      	bne.n	8016f72 <dhcp_fine_tmr+0xe>
  }
}
 8016fba:	bf00      	nop
 8016fbc:	bf00      	nop
 8016fbe:	3708      	adds	r7, #8
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	240076b8 	.word	0x240076b8

08016fc8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b084      	sub	sp, #16
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fd4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	7a5b      	ldrb	r3, [r3, #9]
 8016fda:	2b0c      	cmp	r3, #12
 8016fdc:	d003      	beq.n	8016fe6 <dhcp_timeout+0x1e>
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	7a5b      	ldrb	r3, [r3, #9]
 8016fe2:	2b06      	cmp	r3, #6
 8016fe4:	d103      	bne.n	8016fee <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 f95a 	bl	80172a0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016fec:	e031      	b.n	8017052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	7a5b      	ldrb	r3, [r3, #9]
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d10e      	bne.n	8017014 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	7a9b      	ldrb	r3, [r3, #10]
 8016ffa:	2b05      	cmp	r3, #5
 8016ffc:	d803      	bhi.n	8017006 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f7ff feb6 	bl	8016d70 <dhcp_select>
}
 8017004:	e025      	b.n	8017052 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 fc50 	bl	80178ac <dhcp_release>
      dhcp_discover(netif);
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f000 f947 	bl	80172a0 <dhcp_discover>
}
 8017012:	e01e      	b.n	8017052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	7a5b      	ldrb	r3, [r3, #9]
 8017018:	2b08      	cmp	r3, #8
 801701a:	d10b      	bne.n	8017034 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	7a9b      	ldrb	r3, [r3, #10]
 8017020:	2b01      	cmp	r3, #1
 8017022:	d803      	bhi.n	801702c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f7ff fe6f 	bl	8016d08 <dhcp_check>
}
 801702a:	e012      	b.n	8017052 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f000 f9c3 	bl	80173b8 <dhcp_bind>
}
 8017032:	e00e      	b.n	8017052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	7a5b      	ldrb	r3, [r3, #9]
 8017038:	2b03      	cmp	r3, #3
 801703a:	d10a      	bne.n	8017052 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	7a9b      	ldrb	r3, [r3, #10]
 8017040:	2b01      	cmp	r3, #1
 8017042:	d803      	bhi.n	801704c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 fb9d 	bl	8017784 <dhcp_reboot>
}
 801704a:	e002      	b.n	8017052 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 f927 	bl	80172a0 <dhcp_discover>
}
 8017052:	bf00      	nop
 8017054:	3710      	adds	r7, #16
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}

0801705a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801705a:	b580      	push	{r7, lr}
 801705c:	b084      	sub	sp, #16
 801705e:	af00      	add	r7, sp, #0
 8017060:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017066:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	7a5b      	ldrb	r3, [r3, #9]
 801706c:	2b01      	cmp	r3, #1
 801706e:	d007      	beq.n	8017080 <dhcp_t1_timeout+0x26>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	7a5b      	ldrb	r3, [r3, #9]
 8017074:	2b0a      	cmp	r3, #10
 8017076:	d003      	beq.n	8017080 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801707c:	2b05      	cmp	r3, #5
 801707e:	d117      	bne.n	80170b0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f000 fa73 	bl	801756c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	8b5b      	ldrh	r3, [r3, #26]
 801708a:	461a      	mov	r2, r3
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	8c1b      	ldrh	r3, [r3, #32]
 8017090:	1ad3      	subs	r3, r2, r3
 8017092:	2b01      	cmp	r3, #1
 8017094:	dd0c      	ble.n	80170b0 <dhcp_t1_timeout+0x56>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	8b5b      	ldrh	r3, [r3, #26]
 801709a:	461a      	mov	r2, r3
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	8c1b      	ldrh	r3, [r3, #32]
 80170a0:	1ad3      	subs	r3, r2, r3
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	da00      	bge.n	80170a8 <dhcp_t1_timeout+0x4e>
 80170a6:	3301      	adds	r3, #1
 80170a8:	105b      	asrs	r3, r3, #1
 80170aa:	b29a      	uxth	r2, r3
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	839a      	strh	r2, [r3, #28]
    }
  }
}
 80170b0:	bf00      	nop
 80170b2:	3710      	adds	r7, #16
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170c4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	7a5b      	ldrb	r3, [r3, #9]
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d00b      	beq.n	80170e6 <dhcp_t2_timeout+0x2e>
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	7a5b      	ldrb	r3, [r3, #9]
 80170d2:	2b0a      	cmp	r3, #10
 80170d4:	d007      	beq.n	80170e6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80170da:	2b05      	cmp	r3, #5
 80170dc:	d003      	beq.n	80170e6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	7a5b      	ldrb	r3, [r3, #9]
 80170e2:	2b04      	cmp	r3, #4
 80170e4:	d117      	bne.n	8017116 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80170e6:	6878      	ldr	r0, [r7, #4]
 80170e8:	f000 fac6 	bl	8017678 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170f0:	461a      	mov	r2, r3
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	8c1b      	ldrh	r3, [r3, #32]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	dd0c      	ble.n	8017116 <dhcp_t2_timeout+0x5e>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017100:	461a      	mov	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	8c1b      	ldrh	r3, [r3, #32]
 8017106:	1ad3      	subs	r3, r2, r3
 8017108:	2b00      	cmp	r3, #0
 801710a:	da00      	bge.n	801710e <dhcp_t2_timeout+0x56>
 801710c:	3301      	adds	r3, #1
 801710e:	105b      	asrs	r3, r3, #1
 8017110:	b29a      	uxth	r2, r3
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8017116:	bf00      	nop
 8017118:	3710      	adds	r7, #16
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}

0801711e <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801711e:	b580      	push	{r7, lr}
 8017120:	b084      	sub	sp, #16
 8017122:	af00      	add	r7, sp, #0
 8017124:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801712a:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d01a      	beq.n	8017168 <dhcp_network_changed+0x4a>
    return;
  switch (dhcp->state) {
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	7a5b      	ldrb	r3, [r3, #9]
 8017136:	2b0a      	cmp	r3, #10
 8017138:	d008      	beq.n	801714c <dhcp_network_changed+0x2e>
 801713a:	2b0a      	cmp	r3, #10
 801713c:	dc0d      	bgt.n	801715a <dhcp_network_changed+0x3c>
 801713e:	2b00      	cmp	r3, #0
 8017140:	d014      	beq.n	801716c <dhcp_network_changed+0x4e>
 8017142:	2b00      	cmp	r3, #0
 8017144:	db09      	blt.n	801715a <dhcp_network_changed+0x3c>
 8017146:	3b03      	subs	r3, #3
 8017148:	2b02      	cmp	r3, #2
 801714a:	d806      	bhi.n	801715a <dhcp_network_changed+0x3c>
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	2200      	movs	r2, #0
 8017150:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fb16 	bl	8017784 <dhcp_reboot>
    break;
 8017158:	e009      	b.n	801716e <dhcp_network_changed+0x50>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2200      	movs	r2, #0
 801715e:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f000 f89d 	bl	80172a0 <dhcp_discover>
    break;
 8017166:	e002      	b.n	801716e <dhcp_network_changed+0x50>
    return;
 8017168:	bf00      	nop
 801716a:	e000      	b.n	801716e <dhcp_network_changed+0x50>
    break;
 801716c:	bf00      	nop
  }
}
 801716e:	3710      	adds	r7, #16
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d107      	bne.n	8017194 <dhcp_arp_reply+0x20>
 8017184:	4b0e      	ldr	r3, [pc, #56]	; (80171c0 <dhcp_arp_reply+0x4c>)
 8017186:	f240 327b 	movw	r2, #891	; 0x37b
 801718a:	490e      	ldr	r1, [pc, #56]	; (80171c4 <dhcp_arp_reply+0x50>)
 801718c:	480e      	ldr	r0, [pc, #56]	; (80171c8 <dhcp_arp_reply+0x54>)
 801718e:	f003 fc39 	bl	801aa04 <iprintf>
 8017192:	e012      	b.n	80171ba <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017198:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d00c      	beq.n	80171ba <dhcp_arp_reply+0x46>
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	7a5b      	ldrb	r3, [r3, #9]
 80171a4:	2b08      	cmp	r3, #8
 80171a6:	d108      	bne.n	80171ba <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	681a      	ldr	r2, [r3, #0]
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d102      	bne.n	80171ba <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 f809 	bl	80171cc <dhcp_decline>
    }
  }
}
 80171ba:	3710      	adds	r7, #16
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}
 80171c0:	0801e2fc 	.word	0x0801e2fc
 80171c4:	0801e3cc 	.word	0x0801e3cc
 80171c8:	0801e380 	.word	0x0801e380

080171cc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b086      	sub	sp, #24
 80171d0:	af02      	add	r7, sp, #8
 80171d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171d8:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 80171da:	2300      	movs	r3, #0
 80171dc:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80171de:	210c      	movs	r1, #12
 80171e0:	68f8      	ldr	r0, [r7, #12]
 80171e2:	f000 fbeb 	bl	80179bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 80171e6:	2204      	movs	r2, #4
 80171e8:	68f9      	ldr	r1, [r7, #12]
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f000 fcf2 	bl	8017bd4 <dhcp_create_msg>
 80171f0:	4603      	mov	r3, r0
 80171f2:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 80171f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d12a      	bne.n	8017252 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80171fc:	2204      	movs	r2, #4
 80171fe:	2132      	movs	r1, #50	; 0x32
 8017200:	68f8      	ldr	r0, [r7, #12]
 8017202:	f000 fbf5 	bl	80179f0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801720a:	4618      	mov	r0, r3
 801720c:	f7f8 f99a 	bl	800f544 <lwip_htonl>
 8017210:	4603      	mov	r3, r0
 8017212:	4619      	mov	r1, r3
 8017214:	68f8      	ldr	r0, [r7, #12]
 8017216:	f000 fc87 	bl	8017b28 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f000 fe7e 	bl	8017f1c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	68da      	ldr	r2, [r3, #12]
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	8a9b      	ldrh	r3, [r3, #20]
 8017228:	33f0      	adds	r3, #240	; 0xf0
 801722a:	b29b      	uxth	r3, r3
 801722c:	4619      	mov	r1, r3
 801722e:	4610      	mov	r0, r2
 8017230:	f7f9 fa7e 	bl	8010730 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8017234:	4b16      	ldr	r3, [pc, #88]	; (8017290 <dhcp_decline+0xc4>)
 8017236:	6818      	ldr	r0, [r3, #0]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	68d9      	ldr	r1, [r3, #12]
 801723c:	4b15      	ldr	r3, [pc, #84]	; (8017294 <dhcp_decline+0xc8>)
 801723e:	9301      	str	r3, [sp, #4]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	9300      	str	r3, [sp, #0]
 8017244:	2343      	movs	r3, #67	; 0x43
 8017246:	4a14      	ldr	r2, [pc, #80]	; (8017298 <dhcp_decline+0xcc>)
 8017248:	f7ff fbbc 	bl	80169c4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801724c:	68f8      	ldr	r0, [r7, #12]
 801724e:	f000 fe23 	bl	8017e98 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	7a9b      	ldrb	r3, [r3, #10]
 8017256:	2bff      	cmp	r3, #255	; 0xff
 8017258:	d005      	beq.n	8017266 <dhcp_decline+0x9a>
    dhcp->tries++;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	7a9b      	ldrb	r3, [r3, #10]
 801725e:	3301      	adds	r3, #1
 8017260:	b2da      	uxtb	r2, r3
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8017266:	f242 7310 	movw	r3, #10000	; 0x2710
 801726a:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801726c:	893b      	ldrh	r3, [r7, #8]
 801726e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017272:	4a0a      	ldr	r2, [pc, #40]	; (801729c <dhcp_decline+0xd0>)
 8017274:	fb82 1203 	smull	r1, r2, r2, r3
 8017278:	1152      	asrs	r2, r2, #5
 801727a:	17db      	asrs	r3, r3, #31
 801727c:	1ad3      	subs	r3, r2, r3
 801727e:	b29a      	uxth	r2, r3
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017284:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017288:	4618      	mov	r0, r3
 801728a:	3710      	adds	r7, #16
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	24007724 	.word	0x24007724
 8017294:	0801f218 	.word	0x0801f218
 8017298:	0801f21c 	.word	0x0801f21c
 801729c:	10624dd3 	.word	0x10624dd3

080172a0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b088      	sub	sp, #32
 80172a4:	af02      	add	r7, sp, #8
 80172a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172ac:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 80172ae:	2300      	movs	r3, #0
 80172b0:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	2200      	movs	r2, #0
 80172b6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80172b8:	2106      	movs	r1, #6
 80172ba:	6938      	ldr	r0, [r7, #16]
 80172bc:	f000 fb7e 	bl	80179bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80172c0:	2201      	movs	r2, #1
 80172c2:	6939      	ldr	r1, [r7, #16]
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f000 fc85 	bl	8017bd4 <dhcp_create_msg>
 80172ca:	4603      	mov	r3, r0
 80172cc:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80172ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d13b      	bne.n	801734e <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80172d6:	2202      	movs	r2, #2
 80172d8:	2139      	movs	r1, #57	; 0x39
 80172da:	6938      	ldr	r0, [r7, #16]
 80172dc:	f000 fb88 	bl	80179f0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80172e4:	4619      	mov	r1, r3
 80172e6:	6938      	ldr	r0, [r7, #16]
 80172e8:	f000 fbe4 	bl	8017ab4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80172ec:	2203      	movs	r2, #3
 80172ee:	2137      	movs	r1, #55	; 0x37
 80172f0:	6938      	ldr	r0, [r7, #16]
 80172f2:	f000 fb7d 	bl	80179f0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80172f6:	2300      	movs	r3, #0
 80172f8:	75fb      	strb	r3, [r7, #23]
 80172fa:	e009      	b.n	8017310 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80172fc:	7dfb      	ldrb	r3, [r7, #23]
 80172fe:	4a29      	ldr	r2, [pc, #164]	; (80173a4 <dhcp_discover+0x104>)
 8017300:	5cd3      	ldrb	r3, [r2, r3]
 8017302:	4619      	mov	r1, r3
 8017304:	6938      	ldr	r0, [r7, #16]
 8017306:	f000 fbad 	bl	8017a64 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801730a:	7dfb      	ldrb	r3, [r7, #23]
 801730c:	3301      	adds	r3, #1
 801730e:	75fb      	strb	r3, [r7, #23]
 8017310:	7dfb      	ldrb	r3, [r7, #23]
 8017312:	2b02      	cmp	r3, #2
 8017314:	d9f2      	bls.n	80172fc <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8017316:	6938      	ldr	r0, [r7, #16]
 8017318:	f000 fe00 	bl	8017f1c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801731c:	693b      	ldr	r3, [r7, #16]
 801731e:	68da      	ldr	r2, [r3, #12]
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	8a9b      	ldrh	r3, [r3, #20]
 8017324:	33f0      	adds	r3, #240	; 0xf0
 8017326:	b29b      	uxth	r3, r3
 8017328:	4619      	mov	r1, r3
 801732a:	4610      	mov	r0, r2
 801732c:	f7f9 fa00 	bl	8010730 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8017330:	4b1d      	ldr	r3, [pc, #116]	; (80173a8 <dhcp_discover+0x108>)
 8017332:	6818      	ldr	r0, [r3, #0]
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	68d9      	ldr	r1, [r3, #12]
 8017338:	4b1c      	ldr	r3, [pc, #112]	; (80173ac <dhcp_discover+0x10c>)
 801733a:	9301      	str	r3, [sp, #4]
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	9300      	str	r3, [sp, #0]
 8017340:	2343      	movs	r3, #67	; 0x43
 8017342:	4a1b      	ldr	r2, [pc, #108]	; (80173b0 <dhcp_discover+0x110>)
 8017344:	f7ff fb3e 	bl	80169c4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8017348:	6938      	ldr	r0, [r7, #16]
 801734a:	f000 fda5 	bl	8017e98 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	7a9b      	ldrb	r3, [r3, #10]
 8017352:	2bff      	cmp	r3, #255	; 0xff
 8017354:	d005      	beq.n	8017362 <dhcp_discover+0xc2>
    dhcp->tries++;
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	7a9b      	ldrb	r3, [r3, #10]
 801735a:	3301      	adds	r3, #1
 801735c:	b2da      	uxtb	r2, r3
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8017362:	693b      	ldr	r3, [r7, #16]
 8017364:	7a9b      	ldrb	r3, [r3, #10]
 8017366:	2b05      	cmp	r3, #5
 8017368:	d807      	bhi.n	801737a <dhcp_discover+0xda>
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	7a9b      	ldrb	r3, [r3, #10]
 801736e:	461a      	mov	r2, r3
 8017370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017374:	4093      	lsls	r3, r2
 8017376:	b29b      	uxth	r3, r3
 8017378:	e001      	b.n	801737e <dhcp_discover+0xde>
 801737a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801737e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8017380:	89bb      	ldrh	r3, [r7, #12]
 8017382:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017386:	4a0b      	ldr	r2, [pc, #44]	; (80173b4 <dhcp_discover+0x114>)
 8017388:	fb82 1203 	smull	r1, r2, r2, r3
 801738c:	1152      	asrs	r2, r2, #5
 801738e:	17db      	asrs	r3, r3, #31
 8017390:	1ad3      	subs	r3, r2, r3
 8017392:	b29a      	uxth	r2, r3
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801739c:	4618      	mov	r0, r3
 801739e:	3718      	adds	r7, #24
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	24000034 	.word	0x24000034
 80173a8:	24007724 	.word	0x24007724
 80173ac:	0801f218 	.word	0x0801f218
 80173b0:	0801f21c 	.word	0x0801f21c
 80173b4:	10624dd3 	.word	0x10624dd3

080173b8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b088      	sub	sp, #32
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d107      	bne.n	80173d6 <dhcp_bind+0x1e>
 80173c6:	4b64      	ldr	r3, [pc, #400]	; (8017558 <dhcp_bind+0x1a0>)
 80173c8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80173cc:	4963      	ldr	r1, [pc, #396]	; (801755c <dhcp_bind+0x1a4>)
 80173ce:	4864      	ldr	r0, [pc, #400]	; (8017560 <dhcp_bind+0x1a8>)
 80173d0:	f003 fb18 	bl	801aa04 <iprintf>
 80173d4:	e0bc      	b.n	8017550 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80173dc:	69bb      	ldr	r3, [r7, #24]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d107      	bne.n	80173f2 <dhcp_bind+0x3a>
 80173e2:	4b5d      	ldr	r3, [pc, #372]	; (8017558 <dhcp_bind+0x1a0>)
 80173e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80173e8:	495e      	ldr	r1, [pc, #376]	; (8017564 <dhcp_bind+0x1ac>)
 80173ea:	485d      	ldr	r0, [pc, #372]	; (8017560 <dhcp_bind+0x1a8>)
 80173ec:	f003 fb0a 	bl	801aa04 <iprintf>
 80173f0:	e0ae      	b.n	8017550 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80173f2:	69bb      	ldr	r3, [r7, #24]
 80173f4:	2200      	movs	r2, #0
 80173f6:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80173f8:	69bb      	ldr	r3, [r7, #24]
 80173fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017400:	d019      	beq.n	8017436 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017406:	331e      	adds	r3, #30
 8017408:	4a57      	ldr	r2, [pc, #348]	; (8017568 <dhcp_bind+0x1b0>)
 801740a:	fba2 2303 	umull	r2, r3, r2, r3
 801740e:	095b      	lsrs	r3, r3, #5
 8017410:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017418:	d302      	bcc.n	8017420 <dhcp_bind+0x68>
       timeout = 0xffff;
 801741a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801741e:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8017420:	69fb      	ldr	r3, [r7, #28]
 8017422:	b29a      	uxth	r2, r3
 8017424:	69bb      	ldr	r3, [r7, #24]
 8017426:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8017428:	69bb      	ldr	r3, [r7, #24]
 801742a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	2201      	movs	r2, #1
 8017434:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801743e:	d01d      	beq.n	801747c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017440:	69bb      	ldr	r3, [r7, #24]
 8017442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017444:	331e      	adds	r3, #30
 8017446:	4a48      	ldr	r2, [pc, #288]	; (8017568 <dhcp_bind+0x1b0>)
 8017448:	fba2 2303 	umull	r2, r3, r2, r3
 801744c:	095b      	lsrs	r3, r3, #5
 801744e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017450:	69fb      	ldr	r3, [r7, #28]
 8017452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017456:	d302      	bcc.n	801745e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801745c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	b29a      	uxth	r2, r3
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	8b1b      	ldrh	r3, [r3, #24]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d102      	bne.n	8017474 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801746e:	69bb      	ldr	r3, [r7, #24]
 8017470:	2201      	movs	r2, #1
 8017472:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017474:	69bb      	ldr	r3, [r7, #24]
 8017476:	8b1a      	ldrh	r2, [r3, #24]
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801747c:	69bb      	ldr	r3, [r7, #24]
 801747e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017484:	d01d      	beq.n	80174c2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017486:	69bb      	ldr	r3, [r7, #24]
 8017488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801748a:	331e      	adds	r3, #30
 801748c:	4a36      	ldr	r2, [pc, #216]	; (8017568 <dhcp_bind+0x1b0>)
 801748e:	fba2 2303 	umull	r2, r3, r2, r3
 8017492:	095b      	lsrs	r3, r3, #5
 8017494:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801749c:	d302      	bcc.n	80174a4 <dhcp_bind+0xec>
      timeout = 0xffff;
 801749e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	b29a      	uxth	r2, r3
 80174a8:	69bb      	ldr	r3, [r7, #24]
 80174aa:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 80174ac:	69bb      	ldr	r3, [r7, #24]
 80174ae:	8b5b      	ldrh	r3, [r3, #26]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d102      	bne.n	80174ba <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80174b4:	69bb      	ldr	r3, [r7, #24]
 80174b6:	2201      	movs	r2, #1
 80174b8:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80174ba:	69bb      	ldr	r3, [r7, #24]
 80174bc:	8b5a      	ldrh	r2, [r3, #26]
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80174c2:	69bb      	ldr	r3, [r7, #24]
 80174c4:	8b1a      	ldrh	r2, [r3, #24]
 80174c6:	69bb      	ldr	r3, [r7, #24]
 80174c8:	8b5b      	ldrh	r3, [r3, #26]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d306      	bcc.n	80174dc <dhcp_bind+0x124>
 80174ce:	69bb      	ldr	r3, [r7, #24]
 80174d0:	8b5b      	ldrh	r3, [r3, #26]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d002      	beq.n	80174dc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80174d6:	69bb      	ldr	r3, [r7, #24]
 80174d8:	2200      	movs	r2, #0
 80174da:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 80174dc:	69bb      	ldr	r3, [r7, #24]
 80174de:	7adb      	ldrb	r3, [r3, #11]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d003      	beq.n	80174ec <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174e8:	613b      	str	r3, [r7, #16]
 80174ea:	e014      	b.n	8017516 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80174ec:	69bb      	ldr	r3, [r7, #24]
 80174ee:	3328      	adds	r3, #40	; 0x28
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80174f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	db02      	blt.n	8017502 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80174fc:	23ff      	movs	r3, #255	; 0xff
 80174fe:	613b      	str	r3, [r7, #16]
 8017500:	e009      	b.n	8017516 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017502:	7dfb      	ldrb	r3, [r7, #23]
 8017504:	2bbf      	cmp	r3, #191	; 0xbf
 8017506:	d903      	bls.n	8017510 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017508:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801750c:	613b      	str	r3, [r7, #16]
 801750e:	e002      	b.n	8017516 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017514:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801751a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d108      	bne.n	8017534 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017522:	69bb      	ldr	r3, [r7, #24]
 8017524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	4013      	ands	r3, r2
 801752a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017532:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017534:	210a      	movs	r1, #10
 8017536:	69b8      	ldr	r0, [r7, #24]
 8017538:	f000 fa40 	bl	80179bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8017542:	f107 030c 	add.w	r3, r7, #12
 8017546:	f107 0210 	add.w	r2, r7, #16
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7f8 fd02 	bl	800ff54 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017550:	3720      	adds	r7, #32
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	0801e2fc 	.word	0x0801e2fc
 801755c:	0801e460 	.word	0x0801e460
 8017560:	0801e380 	.word	0x0801e380
 8017564:	0801e47c 	.word	0x0801e47c
 8017568:	88888889 	.word	0x88888889

0801756c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b088      	sub	sp, #32
 8017570:	af02      	add	r7, sp, #8
 8017572:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017578:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801757a:	2105      	movs	r1, #5
 801757c:	6938      	ldr	r0, [r7, #16]
 801757e:	f000 fa1d 	bl	80179bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8017582:	2203      	movs	r2, #3
 8017584:	6939      	ldr	r1, [r7, #16]
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f000 fb24 	bl	8017bd4 <dhcp_create_msg>
 801758c:	4603      	mov	r3, r0
 801758e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8017590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d13b      	bne.n	8017610 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017598:	2202      	movs	r2, #2
 801759a:	2139      	movs	r1, #57	; 0x39
 801759c:	6938      	ldr	r0, [r7, #16]
 801759e:	f000 fa27 	bl	80179f0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80175a6:	4619      	mov	r1, r3
 80175a8:	6938      	ldr	r0, [r7, #16]
 80175aa:	f000 fa83 	bl	8017ab4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80175ae:	2203      	movs	r2, #3
 80175b0:	2137      	movs	r1, #55	; 0x37
 80175b2:	6938      	ldr	r0, [r7, #16]
 80175b4:	f000 fa1c 	bl	80179f0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175b8:	2300      	movs	r3, #0
 80175ba:	75fb      	strb	r3, [r7, #23]
 80175bc:	e009      	b.n	80175d2 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80175be:	7dfb      	ldrb	r3, [r7, #23]
 80175c0:	4a2a      	ldr	r2, [pc, #168]	; (801766c <dhcp_renew+0x100>)
 80175c2:	5cd3      	ldrb	r3, [r2, r3]
 80175c4:	4619      	mov	r1, r3
 80175c6:	6938      	ldr	r0, [r7, #16]
 80175c8:	f000 fa4c 	bl	8017a64 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175cc:	7dfb      	ldrb	r3, [r7, #23]
 80175ce:	3301      	adds	r3, #1
 80175d0:	75fb      	strb	r3, [r7, #23]
 80175d2:	7dfb      	ldrb	r3, [r7, #23]
 80175d4:	2b02      	cmp	r3, #2
 80175d6:	d9f2      	bls.n	80175be <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 80175d8:	6938      	ldr	r0, [r7, #16]
 80175da:	f000 fc9f 	bl	8017f1c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	68da      	ldr	r2, [r3, #12]
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	8a9b      	ldrh	r3, [r3, #20]
 80175e6:	33f0      	adds	r3, #240	; 0xf0
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	4619      	mov	r1, r3
 80175ec:	4610      	mov	r0, r2
 80175ee:	f7f9 f89f 	bl	8010730 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80175f2:	4b1f      	ldr	r3, [pc, #124]	; (8017670 <dhcp_renew+0x104>)
 80175f4:	6818      	ldr	r0, [r3, #0]
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	68d9      	ldr	r1, [r3, #12]
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	9300      	str	r3, [sp, #0]
 8017604:	2343      	movs	r3, #67	; 0x43
 8017606:	f7ff f99f 	bl	8016948 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801760a:	6938      	ldr	r0, [r7, #16]
 801760c:	f000 fc44 	bl	8017e98 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	7a9b      	ldrb	r3, [r3, #10]
 8017614:	2bff      	cmp	r3, #255	; 0xff
 8017616:	d005      	beq.n	8017624 <dhcp_renew+0xb8>
    dhcp->tries++;
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	7a9b      	ldrb	r3, [r3, #10]
 801761c:	3301      	adds	r3, #1
 801761e:	b2da      	uxtb	r2, r3
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	7a9b      	ldrb	r3, [r3, #10]
 8017628:	2b09      	cmp	r3, #9
 801762a:	d80a      	bhi.n	8017642 <dhcp_renew+0xd6>
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	7a9b      	ldrb	r3, [r3, #10]
 8017630:	b29b      	uxth	r3, r3
 8017632:	461a      	mov	r2, r3
 8017634:	0152      	lsls	r2, r2, #5
 8017636:	1ad2      	subs	r2, r2, r3
 8017638:	0092      	lsls	r2, r2, #2
 801763a:	4413      	add	r3, r2
 801763c:	011b      	lsls	r3, r3, #4
 801763e:	b29b      	uxth	r3, r3
 8017640:	e001      	b.n	8017646 <dhcp_renew+0xda>
 8017642:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017646:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8017648:	89bb      	ldrh	r3, [r7, #12]
 801764a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801764e:	4a09      	ldr	r2, [pc, #36]	; (8017674 <dhcp_renew+0x108>)
 8017650:	fb82 1203 	smull	r1, r2, r2, r3
 8017654:	1152      	asrs	r2, r2, #5
 8017656:	17db      	asrs	r3, r3, #31
 8017658:	1ad3      	subs	r3, r2, r3
 801765a:	b29a      	uxth	r2, r3
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017664:	4618      	mov	r0, r3
 8017666:	3718      	adds	r7, #24
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}
 801766c:	24000034 	.word	0x24000034
 8017670:	24007724 	.word	0x24007724
 8017674:	10624dd3 	.word	0x10624dd3

08017678 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b088      	sub	sp, #32
 801767c:	af02      	add	r7, sp, #8
 801767e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017684:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8017686:	2104      	movs	r1, #4
 8017688:	6938      	ldr	r0, [r7, #16]
 801768a:	f000 f997 	bl	80179bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801768e:	2203      	movs	r2, #3
 8017690:	6939      	ldr	r1, [r7, #16]
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f000 fa9e 	bl	8017bd4 <dhcp_create_msg>
 8017698:	4603      	mov	r3, r0
 801769a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d139      	bne.n	8017718 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80176a4:	2202      	movs	r2, #2
 80176a6:	2139      	movs	r1, #57	; 0x39
 80176a8:	6938      	ldr	r0, [r7, #16]
 80176aa:	f000 f9a1 	bl	80179f0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80176b2:	4619      	mov	r1, r3
 80176b4:	6938      	ldr	r0, [r7, #16]
 80176b6:	f000 f9fd 	bl	8017ab4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80176ba:	2203      	movs	r2, #3
 80176bc:	2137      	movs	r1, #55	; 0x37
 80176be:	6938      	ldr	r0, [r7, #16]
 80176c0:	f000 f996 	bl	80179f0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80176c4:	2300      	movs	r3, #0
 80176c6:	75fb      	strb	r3, [r7, #23]
 80176c8:	e009      	b.n	80176de <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80176ca:	7dfb      	ldrb	r3, [r7, #23]
 80176cc:	4a29      	ldr	r2, [pc, #164]	; (8017774 <dhcp_rebind+0xfc>)
 80176ce:	5cd3      	ldrb	r3, [r2, r3]
 80176d0:	4619      	mov	r1, r3
 80176d2:	6938      	ldr	r0, [r7, #16]
 80176d4:	f000 f9c6 	bl	8017a64 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80176d8:	7dfb      	ldrb	r3, [r7, #23]
 80176da:	3301      	adds	r3, #1
 80176dc:	75fb      	strb	r3, [r7, #23]
 80176de:	7dfb      	ldrb	r3, [r7, #23]
 80176e0:	2b02      	cmp	r3, #2
 80176e2:	d9f2      	bls.n	80176ca <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80176e4:	6938      	ldr	r0, [r7, #16]
 80176e6:	f000 fc19 	bl	8017f1c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	68da      	ldr	r2, [r3, #12]
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	8a9b      	ldrh	r3, [r3, #20]
 80176f2:	33f0      	adds	r3, #240	; 0xf0
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	4619      	mov	r1, r3
 80176f8:	4610      	mov	r0, r2
 80176fa:	f7f9 f819 	bl	8010730 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80176fe:	4b1e      	ldr	r3, [pc, #120]	; (8017778 <dhcp_rebind+0x100>)
 8017700:	6818      	ldr	r0, [r3, #0]
 8017702:	693b      	ldr	r3, [r7, #16]
 8017704:	68d9      	ldr	r1, [r3, #12]
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	2343      	movs	r3, #67	; 0x43
 801770c:	4a1b      	ldr	r2, [pc, #108]	; (801777c <dhcp_rebind+0x104>)
 801770e:	f7ff f91b 	bl	8016948 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8017712:	6938      	ldr	r0, [r7, #16]
 8017714:	f000 fbc0 	bl	8017e98 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017718:	693b      	ldr	r3, [r7, #16]
 801771a:	7a9b      	ldrb	r3, [r3, #10]
 801771c:	2bff      	cmp	r3, #255	; 0xff
 801771e:	d005      	beq.n	801772c <dhcp_rebind+0xb4>
    dhcp->tries++;
 8017720:	693b      	ldr	r3, [r7, #16]
 8017722:	7a9b      	ldrb	r3, [r3, #10]
 8017724:	3301      	adds	r3, #1
 8017726:	b2da      	uxtb	r2, r3
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	7a9b      	ldrb	r3, [r3, #10]
 8017730:	2b09      	cmp	r3, #9
 8017732:	d80a      	bhi.n	801774a <dhcp_rebind+0xd2>
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	7a9b      	ldrb	r3, [r3, #10]
 8017738:	b29b      	uxth	r3, r3
 801773a:	461a      	mov	r2, r3
 801773c:	0152      	lsls	r2, r2, #5
 801773e:	1ad2      	subs	r2, r2, r3
 8017740:	0092      	lsls	r2, r2, #2
 8017742:	4413      	add	r3, r2
 8017744:	00db      	lsls	r3, r3, #3
 8017746:	b29b      	uxth	r3, r3
 8017748:	e001      	b.n	801774e <dhcp_rebind+0xd6>
 801774a:	f242 7310 	movw	r3, #10000	; 0x2710
 801774e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8017750:	89bb      	ldrh	r3, [r7, #12]
 8017752:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017756:	4a0a      	ldr	r2, [pc, #40]	; (8017780 <dhcp_rebind+0x108>)
 8017758:	fb82 1203 	smull	r1, r2, r2, r3
 801775c:	1152      	asrs	r2, r2, #5
 801775e:	17db      	asrs	r3, r3, #31
 8017760:	1ad3      	subs	r3, r2, r3
 8017762:	b29a      	uxth	r2, r3
 8017764:	693b      	ldr	r3, [r7, #16]
 8017766:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017768:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801776c:	4618      	mov	r0, r3
 801776e:	3718      	adds	r7, #24
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	24000034 	.word	0x24000034
 8017778:	24007724 	.word	0x24007724
 801777c:	0801f21c 	.word	0x0801f21c
 8017780:	10624dd3 	.word	0x10624dd3

08017784 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b088      	sub	sp, #32
 8017788:	af02      	add	r7, sp, #8
 801778a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017790:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017792:	2103      	movs	r1, #3
 8017794:	6938      	ldr	r0, [r7, #16]
 8017796:	f000 f911 	bl	80179bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801779a:	2203      	movs	r2, #3
 801779c:	6939      	ldr	r1, [r7, #16]
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 fa18 	bl	8017bd4 <dhcp_create_msg>
 80177a4:	4603      	mov	r3, r0
 80177a6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80177a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d147      	bne.n	8017840 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80177b0:	2202      	movs	r2, #2
 80177b2:	2139      	movs	r1, #57	; 0x39
 80177b4:	6938      	ldr	r0, [r7, #16]
 80177b6:	f000 f91b 	bl	80179f0 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80177ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80177be:	6938      	ldr	r0, [r7, #16]
 80177c0:	f000 f978 	bl	8017ab4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80177c4:	2204      	movs	r2, #4
 80177c6:	2132      	movs	r1, #50	; 0x32
 80177c8:	6938      	ldr	r0, [r7, #16]
 80177ca:	f000 f911 	bl	80179f0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7f7 feb6 	bl	800f544 <lwip_htonl>
 80177d8:	4603      	mov	r3, r0
 80177da:	4619      	mov	r1, r3
 80177dc:	6938      	ldr	r0, [r7, #16]
 80177de:	f000 f9a3 	bl	8017b28 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80177e2:	2203      	movs	r2, #3
 80177e4:	2137      	movs	r1, #55	; 0x37
 80177e6:	6938      	ldr	r0, [r7, #16]
 80177e8:	f000 f902 	bl	80179f0 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80177ec:	2300      	movs	r3, #0
 80177ee:	75fb      	strb	r3, [r7, #23]
 80177f0:	e009      	b.n	8017806 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80177f2:	7dfb      	ldrb	r3, [r7, #23]
 80177f4:	4a29      	ldr	r2, [pc, #164]	; (801789c <dhcp_reboot+0x118>)
 80177f6:	5cd3      	ldrb	r3, [r2, r3]
 80177f8:	4619      	mov	r1, r3
 80177fa:	6938      	ldr	r0, [r7, #16]
 80177fc:	f000 f932 	bl	8017a64 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017800:	7dfb      	ldrb	r3, [r7, #23]
 8017802:	3301      	adds	r3, #1
 8017804:	75fb      	strb	r3, [r7, #23]
 8017806:	7dfb      	ldrb	r3, [r7, #23]
 8017808:	2b02      	cmp	r3, #2
 801780a:	d9f2      	bls.n	80177f2 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801780c:	6938      	ldr	r0, [r7, #16]
 801780e:	f000 fb85 	bl	8017f1c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	68da      	ldr	r2, [r3, #12]
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	8a9b      	ldrh	r3, [r3, #20]
 801781a:	33f0      	adds	r3, #240	; 0xf0
 801781c:	b29b      	uxth	r3, r3
 801781e:	4619      	mov	r1, r3
 8017820:	4610      	mov	r0, r2
 8017822:	f7f8 ff85 	bl	8010730 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8017826:	4b1e      	ldr	r3, [pc, #120]	; (80178a0 <dhcp_reboot+0x11c>)
 8017828:	6818      	ldr	r0, [r3, #0]
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	68d9      	ldr	r1, [r3, #12]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	9300      	str	r3, [sp, #0]
 8017832:	2343      	movs	r3, #67	; 0x43
 8017834:	4a1b      	ldr	r2, [pc, #108]	; (80178a4 <dhcp_reboot+0x120>)
 8017836:	f7ff f887 	bl	8016948 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801783a:	6938      	ldr	r0, [r7, #16]
 801783c:	f000 fb2c 	bl	8017e98 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	7a9b      	ldrb	r3, [r3, #10]
 8017844:	2bff      	cmp	r3, #255	; 0xff
 8017846:	d005      	beq.n	8017854 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	7a9b      	ldrb	r3, [r3, #10]
 801784c:	3301      	adds	r3, #1
 801784e:	b2da      	uxtb	r2, r3
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	7a9b      	ldrb	r3, [r3, #10]
 8017858:	2b09      	cmp	r3, #9
 801785a:	d80a      	bhi.n	8017872 <dhcp_reboot+0xee>
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	7a9b      	ldrb	r3, [r3, #10]
 8017860:	b29b      	uxth	r3, r3
 8017862:	461a      	mov	r2, r3
 8017864:	0152      	lsls	r2, r2, #5
 8017866:	1ad2      	subs	r2, r2, r3
 8017868:	0092      	lsls	r2, r2, #2
 801786a:	4413      	add	r3, r2
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	b29b      	uxth	r3, r3
 8017870:	e001      	b.n	8017876 <dhcp_reboot+0xf2>
 8017872:	f242 7310 	movw	r3, #10000	; 0x2710
 8017876:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8017878:	89bb      	ldrh	r3, [r7, #12]
 801787a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801787e:	4a0a      	ldr	r2, [pc, #40]	; (80178a8 <dhcp_reboot+0x124>)
 8017880:	fb82 1203 	smull	r1, r2, r2, r3
 8017884:	1152      	asrs	r2, r2, #5
 8017886:	17db      	asrs	r3, r3, #31
 8017888:	1ad3      	subs	r3, r2, r3
 801788a:	b29a      	uxth	r2, r3
 801788c:	693b      	ldr	r3, [r7, #16]
 801788e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017894:	4618      	mov	r0, r3
 8017896:	3718      	adds	r7, #24
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	24000034 	.word	0x24000034
 80178a0:	24007724 	.word	0x24007724
 80178a4:	0801f21c 	.word	0x0801f21c
 80178a8:	10624dd3 	.word	0x10624dd3

080178ac <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b088      	sub	sp, #32
 80178b0:	af02      	add	r7, sp, #8
 80178b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178b8:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80178ba:	697b      	ldr	r3, [r7, #20]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d102      	bne.n	80178c6 <dhcp_release+0x1a>
    return ERR_ARG;
 80178c0:	f06f 030f 	mvn.w	r3, #15
 80178c4:	e072      	b.n	80179ac <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ca:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f000 fb7f 	bl	8017fd0 <dhcp_supplied_address>
 80178d2:	4603      	mov	r3, r0
 80178d4:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80178d6:	2100      	movs	r1, #0
 80178d8:	6978      	ldr	r0, [r7, #20]
 80178da:	f000 f86f 	bl	80179bc <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80178de:	697b      	ldr	r3, [r7, #20]
 80178e0:	2200      	movs	r2, #0
 80178e2:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	2200      	movs	r2, #0
 80178e8:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	2200      	movs	r2, #0
 80178ee:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	2200      	movs	r2, #0
 80178f4:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	2200      	movs	r2, #0
 80178fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	639a      	str	r2, [r3, #56]	; 0x38
 8017904:	697b      	ldr	r3, [r7, #20]
 8017906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	2200      	movs	r2, #0
 8017910:	845a      	strh	r2, [r3, #34]	; 0x22
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	841a      	strh	r2, [r3, #32]
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	8c1a      	ldrh	r2, [r3, #32]
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	83da      	strh	r2, [r3, #30]
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	8bda      	ldrh	r2, [r3, #30]
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801792a:	7cfb      	ldrb	r3, [r7, #19]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d101      	bne.n	8017934 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8017930:	2300      	movs	r3, #0
 8017932:	e03b      	b.n	80179ac <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8017934:	2207      	movs	r2, #7
 8017936:	6979      	ldr	r1, [r7, #20]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 f94b 	bl	8017bd4 <dhcp_create_msg>
 801793e:	4603      	mov	r3, r0
 8017940:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8017942:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d128      	bne.n	801799c <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801794a:	2204      	movs	r2, #4
 801794c:	2136      	movs	r1, #54	; 0x36
 801794e:	6978      	ldr	r0, [r7, #20]
 8017950:	f000 f84e 	bl	80179f0 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	4618      	mov	r0, r3
 8017958:	f7f7 fdf4 	bl	800f544 <lwip_htonl>
 801795c:	4603      	mov	r3, r0
 801795e:	4619      	mov	r1, r3
 8017960:	6978      	ldr	r0, [r7, #20]
 8017962:	f000 f8e1 	bl	8017b28 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8017966:	6978      	ldr	r0, [r7, #20]
 8017968:	f000 fad8 	bl	8017f1c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	68da      	ldr	r2, [r3, #12]
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	8a9b      	ldrh	r3, [r3, #20]
 8017974:	33f0      	adds	r3, #240	; 0xf0
 8017976:	b29b      	uxth	r3, r3
 8017978:	4619      	mov	r1, r3
 801797a:	4610      	mov	r0, r2
 801797c:	f7f8 fed8 	bl	8010730 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8017980:	4b0c      	ldr	r3, [pc, #48]	; (80179b4 <dhcp_release+0x108>)
 8017982:	6818      	ldr	r0, [r3, #0]
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	68d9      	ldr	r1, [r3, #12]
 8017988:	f107 020c 	add.w	r2, r7, #12
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	9300      	str	r3, [sp, #0]
 8017990:	2343      	movs	r3, #67	; 0x43
 8017992:	f7fe ffd9 	bl	8016948 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8017996:	6978      	ldr	r0, [r7, #20]
 8017998:	f000 fa7e 	bl	8017e98 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801799c:	4b06      	ldr	r3, [pc, #24]	; (80179b8 <dhcp_release+0x10c>)
 801799e:	4a06      	ldr	r2, [pc, #24]	; (80179b8 <dhcp_release+0x10c>)
 80179a0:	4905      	ldr	r1, [pc, #20]	; (80179b8 <dhcp_release+0x10c>)
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7f8 fad6 	bl	800ff54 <netif_set_addr>

  return result;
 80179a8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	3718      	adds	r7, #24
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd80      	pop	{r7, pc}
 80179b4:	24007724 	.word	0x24007724
 80179b8:	0801f218 	.word	0x0801f218

080179bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80179bc:	b480      	push	{r7}
 80179be:	b083      	sub	sp, #12
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	460b      	mov	r3, r1
 80179c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	7a5b      	ldrb	r3, [r3, #9]
 80179cc:	78fa      	ldrb	r2, [r7, #3]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d008      	beq.n	80179e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	78fa      	ldrb	r2, [r7, #3]
 80179d6:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2200      	movs	r2, #0
 80179e2:	82da      	strh	r2, [r3, #22]
  }
}
 80179e4:	bf00      	nop
 80179e6:	370c      	adds	r7, #12
 80179e8:	46bd      	mov	sp, r7
 80179ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ee:	4770      	bx	lr

080179f0 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	460b      	mov	r3, r1
 80179fa:	70fb      	strb	r3, [r7, #3]
 80179fc:	4613      	mov	r3, r2
 80179fe:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	8a9b      	ldrh	r3, [r3, #20]
 8017a04:	461a      	mov	r2, r3
 8017a06:	78bb      	ldrb	r3, [r7, #2]
 8017a08:	4413      	add	r3, r2
 8017a0a:	3302      	adds	r3, #2
 8017a0c:	2b44      	cmp	r3, #68	; 0x44
 8017a0e:	d906      	bls.n	8017a1e <dhcp_option+0x2e>
 8017a10:	4b11      	ldr	r3, [pc, #68]	; (8017a58 <dhcp_option+0x68>)
 8017a12:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8017a16:	4911      	ldr	r1, [pc, #68]	; (8017a5c <dhcp_option+0x6c>)
 8017a18:	4811      	ldr	r0, [pc, #68]	; (8017a60 <dhcp_option+0x70>)
 8017a1a:	f002 fff3 	bl	801aa04 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	691a      	ldr	r2, [r3, #16]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	8a9b      	ldrh	r3, [r3, #20]
 8017a26:	1c59      	adds	r1, r3, #1
 8017a28:	b288      	uxth	r0, r1
 8017a2a:	6879      	ldr	r1, [r7, #4]
 8017a2c:	8288      	strh	r0, [r1, #20]
 8017a2e:	4413      	add	r3, r2
 8017a30:	78fa      	ldrb	r2, [r7, #3]
 8017a32:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	691a      	ldr	r2, [r3, #16]
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	8a9b      	ldrh	r3, [r3, #20]
 8017a3e:	1c59      	adds	r1, r3, #1
 8017a40:	b288      	uxth	r0, r1
 8017a42:	6879      	ldr	r1, [r7, #4]
 8017a44:	8288      	strh	r0, [r1, #20]
 8017a46:	4413      	add	r3, r2
 8017a48:	78ba      	ldrb	r2, [r7, #2]
 8017a4a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8017a4e:	bf00      	nop
 8017a50:	3708      	adds	r7, #8
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}
 8017a56:	bf00      	nop
 8017a58:	0801e2fc 	.word	0x0801e2fc
 8017a5c:	0801e4b0 	.word	0x0801e4b0
 8017a60:	0801e380 	.word	0x0801e380

08017a64 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	8a9b      	ldrh	r3, [r3, #20]
 8017a74:	2b43      	cmp	r3, #67	; 0x43
 8017a76:	d906      	bls.n	8017a86 <dhcp_option_byte+0x22>
 8017a78:	4b0b      	ldr	r3, [pc, #44]	; (8017aa8 <dhcp_option_byte+0x44>)
 8017a7a:	f240 527b 	movw	r2, #1403	; 0x57b
 8017a7e:	490b      	ldr	r1, [pc, #44]	; (8017aac <dhcp_option_byte+0x48>)
 8017a80:	480b      	ldr	r0, [pc, #44]	; (8017ab0 <dhcp_option_byte+0x4c>)
 8017a82:	f002 ffbf 	bl	801aa04 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	691a      	ldr	r2, [r3, #16]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	8a9b      	ldrh	r3, [r3, #20]
 8017a8e:	1c59      	adds	r1, r3, #1
 8017a90:	b288      	uxth	r0, r1
 8017a92:	6879      	ldr	r1, [r7, #4]
 8017a94:	8288      	strh	r0, [r1, #20]
 8017a96:	4413      	add	r3, r2
 8017a98:	78fa      	ldrb	r2, [r7, #3]
 8017a9a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8017a9e:	bf00      	nop
 8017aa0:	3708      	adds	r7, #8
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	bf00      	nop
 8017aa8:	0801e2fc 	.word	0x0801e2fc
 8017aac:	0801e4f8 	.word	0x0801e4f8
 8017ab0:	0801e380 	.word	0x0801e380

08017ab4 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8017ab4:	b590      	push	{r4, r7, lr}
 8017ab6:	b083      	sub	sp, #12
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
 8017abc:	460b      	mov	r3, r1
 8017abe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	8a9b      	ldrh	r3, [r3, #20]
 8017ac4:	3302      	adds	r3, #2
 8017ac6:	2b44      	cmp	r3, #68	; 0x44
 8017ac8:	d906      	bls.n	8017ad8 <dhcp_option_short+0x24>
 8017aca:	4b14      	ldr	r3, [pc, #80]	; (8017b1c <dhcp_option_short+0x68>)
 8017acc:	f240 5282 	movw	r2, #1410	; 0x582
 8017ad0:	4913      	ldr	r1, [pc, #76]	; (8017b20 <dhcp_option_short+0x6c>)
 8017ad2:	4814      	ldr	r0, [pc, #80]	; (8017b24 <dhcp_option_short+0x70>)
 8017ad4:	f002 ff96 	bl	801aa04 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017ad8:	887b      	ldrh	r3, [r7, #2]
 8017ada:	0a1b      	lsrs	r3, r3, #8
 8017adc:	b298      	uxth	r0, r3
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	691a      	ldr	r2, [r3, #16]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	8a9b      	ldrh	r3, [r3, #20]
 8017ae6:	1c59      	adds	r1, r3, #1
 8017ae8:	b28c      	uxth	r4, r1
 8017aea:	6879      	ldr	r1, [r7, #4]
 8017aec:	828c      	strh	r4, [r1, #20]
 8017aee:	b2c1      	uxtb	r1, r0
 8017af0:	4413      	add	r3, r2
 8017af2:	460a      	mov	r2, r1
 8017af4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	691a      	ldr	r2, [r3, #16]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	8a9b      	ldrh	r3, [r3, #20]
 8017b00:	1c59      	adds	r1, r3, #1
 8017b02:	b288      	uxth	r0, r1
 8017b04:	6879      	ldr	r1, [r7, #4]
 8017b06:	8288      	strh	r0, [r1, #20]
 8017b08:	8879      	ldrh	r1, [r7, #2]
 8017b0a:	b2c9      	uxtb	r1, r1
 8017b0c:	4413      	add	r3, r2
 8017b0e:	460a      	mov	r2, r1
 8017b10:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8017b14:	bf00      	nop
 8017b16:	370c      	adds	r7, #12
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd90      	pop	{r4, r7, pc}
 8017b1c:	0801e2fc 	.word	0x0801e2fc
 8017b20:	0801e534 	.word	0x0801e534
 8017b24:	0801e380 	.word	0x0801e380

08017b28 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8017b28:	b590      	push	{r4, r7, lr}
 8017b2a:	b083      	sub	sp, #12
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	8a9b      	ldrh	r3, [r3, #20]
 8017b36:	3304      	adds	r3, #4
 8017b38:	2b44      	cmp	r3, #68	; 0x44
 8017b3a:	d906      	bls.n	8017b4a <dhcp_option_long+0x22>
 8017b3c:	4b22      	ldr	r3, [pc, #136]	; (8017bc8 <dhcp_option_long+0xa0>)
 8017b3e:	f240 528a 	movw	r2, #1418	; 0x58a
 8017b42:	4922      	ldr	r1, [pc, #136]	; (8017bcc <dhcp_option_long+0xa4>)
 8017b44:	4822      	ldr	r0, [pc, #136]	; (8017bd0 <dhcp_option_long+0xa8>)
 8017b46:	f002 ff5d 	bl	801aa04 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	0e18      	lsrs	r0, r3, #24
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	691a      	ldr	r2, [r3, #16]
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	8a9b      	ldrh	r3, [r3, #20]
 8017b56:	1c59      	adds	r1, r3, #1
 8017b58:	b28c      	uxth	r4, r1
 8017b5a:	6879      	ldr	r1, [r7, #4]
 8017b5c:	828c      	strh	r4, [r1, #20]
 8017b5e:	b2c1      	uxtb	r1, r0
 8017b60:	4413      	add	r3, r2
 8017b62:	460a      	mov	r2, r1
 8017b64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	0c18      	lsrs	r0, r3, #16
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	691a      	ldr	r2, [r3, #16]
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	8a9b      	ldrh	r3, [r3, #20]
 8017b74:	1c59      	adds	r1, r3, #1
 8017b76:	b28c      	uxth	r4, r1
 8017b78:	6879      	ldr	r1, [r7, #4]
 8017b7a:	828c      	strh	r4, [r1, #20]
 8017b7c:	b2c1      	uxtb	r1, r0
 8017b7e:	4413      	add	r3, r2
 8017b80:	460a      	mov	r2, r1
 8017b82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	0a18      	lsrs	r0, r3, #8
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	691a      	ldr	r2, [r3, #16]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	8a9b      	ldrh	r3, [r3, #20]
 8017b92:	1c59      	adds	r1, r3, #1
 8017b94:	b28c      	uxth	r4, r1
 8017b96:	6879      	ldr	r1, [r7, #4]
 8017b98:	828c      	strh	r4, [r1, #20]
 8017b9a:	b2c1      	uxtb	r1, r0
 8017b9c:	4413      	add	r3, r2
 8017b9e:	460a      	mov	r2, r1
 8017ba0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	691a      	ldr	r2, [r3, #16]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	8a9b      	ldrh	r3, [r3, #20]
 8017bac:	1c59      	adds	r1, r3, #1
 8017bae:	b288      	uxth	r0, r1
 8017bb0:	6879      	ldr	r1, [r7, #4]
 8017bb2:	8288      	strh	r0, [r1, #20]
 8017bb4:	6839      	ldr	r1, [r7, #0]
 8017bb6:	b2c9      	uxtb	r1, r1
 8017bb8:	4413      	add	r3, r2
 8017bba:	460a      	mov	r2, r1
 8017bbc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8017bc0:	bf00      	nop
 8017bc2:	370c      	adds	r7, #12
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd90      	pop	{r4, r7, pc}
 8017bc8:	0801e2fc 	.word	0x0801e2fc
 8017bcc:	0801e578 	.word	0x0801e578
 8017bd0:	0801e380 	.word	0x0801e380

08017bd4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8017bd4:	b590      	push	{r4, r7, lr}
 8017bd6:	b087      	sub	sp, #28
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	4613      	mov	r3, r2
 8017be0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d109      	bne.n	8017bfc <dhcp_create_msg+0x28>
 8017be8:	4ba3      	ldr	r3, [pc, #652]	; (8017e78 <dhcp_create_msg+0x2a4>)
 8017bea:	f240 721d 	movw	r2, #1821	; 0x71d
 8017bee:	49a3      	ldr	r1, [pc, #652]	; (8017e7c <dhcp_create_msg+0x2a8>)
 8017bf0:	48a3      	ldr	r0, [pc, #652]	; (8017e80 <dhcp_create_msg+0x2ac>)
 8017bf2:	f002 ff07 	bl	801aa04 <iprintf>
 8017bf6:	f06f 030f 	mvn.w	r3, #15
 8017bfa:	e138      	b.n	8017e6e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d109      	bne.n	8017c16 <dhcp_create_msg+0x42>
 8017c02:	4b9d      	ldr	r3, [pc, #628]	; (8017e78 <dhcp_create_msg+0x2a4>)
 8017c04:	f240 721e 	movw	r2, #1822	; 0x71e
 8017c08:	499e      	ldr	r1, [pc, #632]	; (8017e84 <dhcp_create_msg+0x2b0>)
 8017c0a:	489d      	ldr	r0, [pc, #628]	; (8017e80 <dhcp_create_msg+0x2ac>)
 8017c0c:	f002 fefa 	bl	801aa04 <iprintf>
 8017c10:	f06f 0305 	mvn.w	r3, #5
 8017c14:	e12b      	b.n	8017e6e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d006      	beq.n	8017c2c <dhcp_create_msg+0x58>
 8017c1e:	4b96      	ldr	r3, [pc, #600]	; (8017e78 <dhcp_create_msg+0x2a4>)
 8017c20:	f240 721f 	movw	r2, #1823	; 0x71f
 8017c24:	4998      	ldr	r1, [pc, #608]	; (8017e88 <dhcp_create_msg+0x2b4>)
 8017c26:	4896      	ldr	r0, [pc, #600]	; (8017e80 <dhcp_create_msg+0x2ac>)
 8017c28:	f002 feec 	bl	801aa04 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	691b      	ldr	r3, [r3, #16]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d006      	beq.n	8017c42 <dhcp_create_msg+0x6e>
 8017c34:	4b90      	ldr	r3, [pc, #576]	; (8017e78 <dhcp_create_msg+0x2a4>)
 8017c36:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8017c3a:	4994      	ldr	r1, [pc, #592]	; (8017e8c <dhcp_create_msg+0x2b8>)
 8017c3c:	4890      	ldr	r0, [pc, #576]	; (8017e80 <dhcp_create_msg+0x2ac>)
 8017c3e:	f002 fee1 	bl	801aa04 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017c42:	2200      	movs	r2, #0
 8017c44:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017c48:	2000      	movs	r0, #0
 8017c4a:	f7f8 fb6d 	bl	8010328 <pbuf_alloc>
 8017c4e:	4602      	mov	r2, r0
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	68db      	ldr	r3, [r3, #12]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d102      	bne.n	8017c62 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8017c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c60:	e105      	b.n	8017e6e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	68db      	ldr	r3, [r3, #12]
 8017c66:	895b      	ldrh	r3, [r3, #10]
 8017c68:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017c6c:	d206      	bcs.n	8017c7c <dhcp_create_msg+0xa8>
 8017c6e:	4b82      	ldr	r3, [pc, #520]	; (8017e78 <dhcp_create_msg+0x2a4>)
 8017c70:	f240 7227 	movw	r2, #1831	; 0x727
 8017c74:	4986      	ldr	r1, [pc, #536]	; (8017e90 <dhcp_create_msg+0x2bc>)
 8017c76:	4882      	ldr	r0, [pc, #520]	; (8017e80 <dhcp_create_msg+0x2ac>)
 8017c78:	f002 fec4 	bl	801aa04 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017c7c:	79fb      	ldrb	r3, [r7, #7]
 8017c7e:	2b03      	cmp	r3, #3
 8017c80:	d103      	bne.n	8017c8a <dhcp_create_msg+0xb6>
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	7a5b      	ldrb	r3, [r3, #9]
 8017c86:	2b03      	cmp	r3, #3
 8017c88:	d10d      	bne.n	8017ca6 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	7a9b      	ldrb	r3, [r3, #10]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d105      	bne.n	8017c9e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017c92:	f002 fecf 	bl	801aa34 <rand>
 8017c96:	4603      	mov	r3, r0
 8017c98:	461a      	mov	r2, r3
 8017c9a:	4b7e      	ldr	r3, [pc, #504]	; (8017e94 <dhcp_create_msg+0x2c0>)
 8017c9c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017c9e:	4b7d      	ldr	r3, [pc, #500]	; (8017e94 <dhcp_create_msg+0x2c0>)
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	68db      	ldr	r3, [r3, #12]
 8017caa:	685a      	ldr	r2, [r3, #4]
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	691b      	ldr	r3, [r3, #16]
 8017cb4:	2201      	movs	r2, #1
 8017cb6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	691b      	ldr	r3, [r3, #16]
 8017cbc:	2201      	movs	r2, #1
 8017cbe:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	691b      	ldr	r3, [r3, #16]
 8017cc4:	68fa      	ldr	r2, [r7, #12]
 8017cc6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8017cca:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	691b      	ldr	r3, [r3, #16]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8017cd4:	68bb      	ldr	r3, [r7, #8]
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	691c      	ldr	r4, [r3, #16]
 8017cdc:	4610      	mov	r0, r2
 8017cde:	f7f7 fc31 	bl	800f544 <lwip_htonl>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	691b      	ldr	r3, [r3, #16]
 8017cea:	2200      	movs	r2, #0
 8017cec:	721a      	strb	r2, [r3, #8]
 8017cee:	2200      	movs	r2, #0
 8017cf0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	691b      	ldr	r3, [r3, #16]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	729a      	strb	r2, [r3, #10]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	691b      	ldr	r3, [r3, #16]
 8017d02:	2200      	movs	r2, #0
 8017d04:	731a      	strb	r2, [r3, #12]
 8017d06:	2200      	movs	r2, #0
 8017d08:	735a      	strb	r2, [r3, #13]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	739a      	strb	r2, [r3, #14]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017d12:	79fb      	ldrb	r3, [r7, #7]
 8017d14:	2b08      	cmp	r3, #8
 8017d16:	d010      	beq.n	8017d3a <dhcp_create_msg+0x166>
 8017d18:	79fb      	ldrb	r3, [r7, #7]
 8017d1a:	2b04      	cmp	r3, #4
 8017d1c:	d00d      	beq.n	8017d3a <dhcp_create_msg+0x166>
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	2b07      	cmp	r3, #7
 8017d22:	d00a      	beq.n	8017d3a <dhcp_create_msg+0x166>
 8017d24:	79fb      	ldrb	r3, [r7, #7]
 8017d26:	2b03      	cmp	r3, #3
 8017d28:	d10d      	bne.n	8017d46 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017d2e:	2b05      	cmp	r3, #5
 8017d30:	d003      	beq.n	8017d3a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	7a5b      	ldrb	r3, [r3, #9]
 8017d36:	2b04      	cmp	r3, #4
 8017d38:	d105      	bne.n	8017d46 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	1d1a      	adds	r2, r3, #4
 8017d3e:	68bb      	ldr	r3, [r7, #8]
 8017d40:	691b      	ldr	r3, [r3, #16]
 8017d42:	6812      	ldr	r2, [r2, #0]
 8017d44:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	691b      	ldr	r3, [r3, #16]
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	741a      	strb	r2, [r3, #16]
 8017d4e:	2200      	movs	r2, #0
 8017d50:	745a      	strb	r2, [r3, #17]
 8017d52:	2200      	movs	r2, #0
 8017d54:	749a      	strb	r2, [r3, #18]
 8017d56:	2200      	movs	r2, #0
 8017d58:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	691b      	ldr	r3, [r3, #16]
 8017d5e:	2200      	movs	r2, #0
 8017d60:	751a      	strb	r2, [r3, #20]
 8017d62:	2200      	movs	r2, #0
 8017d64:	755a      	strb	r2, [r3, #21]
 8017d66:	2200      	movs	r2, #0
 8017d68:	759a      	strb	r2, [r3, #22]
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	691b      	ldr	r3, [r3, #16]
 8017d72:	2200      	movs	r2, #0
 8017d74:	761a      	strb	r2, [r3, #24]
 8017d76:	2200      	movs	r2, #0
 8017d78:	765a      	strb	r2, [r3, #25]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	769a      	strb	r2, [r3, #26]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8017d82:	2300      	movs	r3, #0
 8017d84:	82fb      	strh	r3, [r7, #22]
 8017d86:	e019      	b.n	8017dbc <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	8afa      	ldrh	r2, [r7, #22]
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d208      	bcs.n	8017da8 <dhcp_create_msg+0x1d4>
 8017d96:	8afb      	ldrh	r3, [r7, #22]
 8017d98:	2b05      	cmp	r3, #5
 8017d9a:	d805      	bhi.n	8017da8 <dhcp_create_msg+0x1d4>
 8017d9c:	8afb      	ldrh	r3, [r7, #22]
 8017d9e:	68fa      	ldr	r2, [r7, #12]
 8017da0:	4413      	add	r3, r2
 8017da2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8017da6:	e000      	b.n	8017daa <dhcp_create_msg+0x1d6>
 8017da8:	2100      	movs	r1, #0
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	691a      	ldr	r2, [r3, #16]
 8017dae:	8afb      	ldrh	r3, [r7, #22]
 8017db0:	4413      	add	r3, r2
 8017db2:	460a      	mov	r2, r1
 8017db4:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8017db6:	8afb      	ldrh	r3, [r7, #22]
 8017db8:	3301      	adds	r3, #1
 8017dba:	82fb      	strh	r3, [r7, #22]
 8017dbc:	8afb      	ldrh	r3, [r7, #22]
 8017dbe:	2b0f      	cmp	r3, #15
 8017dc0:	d9e2      	bls.n	8017d88 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	82fb      	strh	r3, [r7, #22]
 8017dc6:	e009      	b.n	8017ddc <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	691a      	ldr	r2, [r3, #16]
 8017dcc:	8afb      	ldrh	r3, [r7, #22]
 8017dce:	4413      	add	r3, r2
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8017dd6:	8afb      	ldrh	r3, [r7, #22]
 8017dd8:	3301      	adds	r3, #1
 8017dda:	82fb      	strh	r3, [r7, #22]
 8017ddc:	8afb      	ldrh	r3, [r7, #22]
 8017dde:	2b3f      	cmp	r3, #63	; 0x3f
 8017de0:	d9f2      	bls.n	8017dc8 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8017de2:	2300      	movs	r3, #0
 8017de4:	82fb      	strh	r3, [r7, #22]
 8017de6:	e009      	b.n	8017dfc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	691a      	ldr	r2, [r3, #16]
 8017dec:	8afb      	ldrh	r3, [r7, #22]
 8017dee:	4413      	add	r3, r2
 8017df0:	2200      	movs	r2, #0
 8017df2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8017df6:	8afb      	ldrh	r3, [r7, #22]
 8017df8:	3301      	adds	r3, #1
 8017dfa:	82fb      	strh	r3, [r7, #22]
 8017dfc:	8afb      	ldrh	r3, [r7, #22]
 8017dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8017e00:	d9f2      	bls.n	8017de8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	691b      	ldr	r3, [r3, #16]
 8017e06:	2200      	movs	r2, #0
 8017e08:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017e0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017e10:	2200      	movs	r2, #0
 8017e12:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8017e16:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017e20:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017e24:	2200      	movs	r2, #0
 8017e26:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017e2a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	2200      	movs	r2, #0
 8017e32:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017e34:	2300      	movs	r3, #0
 8017e36:	82fb      	strh	r3, [r7, #22]
 8017e38:	e00b      	b.n	8017e52 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	691a      	ldr	r2, [r3, #16]
 8017e3e:	8afb      	ldrh	r3, [r7, #22]
 8017e40:	8af9      	ldrh	r1, [r7, #22]
 8017e42:	b2c9      	uxtb	r1, r1
 8017e44:	4413      	add	r3, r2
 8017e46:	460a      	mov	r2, r1
 8017e48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017e4c:	8afb      	ldrh	r3, [r7, #22]
 8017e4e:	3301      	adds	r3, #1
 8017e50:	82fb      	strh	r3, [r7, #22]
 8017e52:	8afb      	ldrh	r3, [r7, #22]
 8017e54:	2b43      	cmp	r3, #67	; 0x43
 8017e56:	d9f0      	bls.n	8017e3a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017e58:	2201      	movs	r2, #1
 8017e5a:	2135      	movs	r1, #53	; 0x35
 8017e5c:	68b8      	ldr	r0, [r7, #8]
 8017e5e:	f7ff fdc7 	bl	80179f0 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8017e62:	79fb      	ldrb	r3, [r7, #7]
 8017e64:	4619      	mov	r1, r3
 8017e66:	68b8      	ldr	r0, [r7, #8]
 8017e68:	f7ff fdfc 	bl	8017a64 <dhcp_option_byte>
  return ERR_OK;
 8017e6c:	2300      	movs	r3, #0
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	371c      	adds	r7, #28
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd90      	pop	{r4, r7, pc}
 8017e76:	bf00      	nop
 8017e78:	0801e2fc 	.word	0x0801e2fc
 8017e7c:	0801e650 	.word	0x0801e650
 8017e80:	0801e380 	.word	0x0801e380
 8017e84:	0801e670 	.word	0x0801e670
 8017e88:	0801e690 	.word	0x0801e690
 8017e8c:	0801e6b8 	.word	0x0801e6b8
 8017e90:	0801e6e0 	.word	0x0801e6e0
 8017e94:	24007728 	.word	0x24007728

08017e98 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d107      	bne.n	8017eb6 <dhcp_delete_msg+0x1e>
 8017ea6:	4b18      	ldr	r3, [pc, #96]	; (8017f08 <dhcp_delete_msg+0x70>)
 8017ea8:	f240 726d 	movw	r2, #1901	; 0x76d
 8017eac:	4917      	ldr	r1, [pc, #92]	; (8017f0c <dhcp_delete_msg+0x74>)
 8017eae:	4818      	ldr	r0, [pc, #96]	; (8017f10 <dhcp_delete_msg+0x78>)
 8017eb0:	f002 fda8 	bl	801aa04 <iprintf>
 8017eb4:	e024      	b.n	8017f00 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	68db      	ldr	r3, [r3, #12]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d106      	bne.n	8017ecc <dhcp_delete_msg+0x34>
 8017ebe:	4b12      	ldr	r3, [pc, #72]	; (8017f08 <dhcp_delete_msg+0x70>)
 8017ec0:	f240 726e 	movw	r2, #1902	; 0x76e
 8017ec4:	4913      	ldr	r1, [pc, #76]	; (8017f14 <dhcp_delete_msg+0x7c>)
 8017ec6:	4812      	ldr	r0, [pc, #72]	; (8017f10 <dhcp_delete_msg+0x78>)
 8017ec8:	f002 fd9c 	bl	801aa04 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	691b      	ldr	r3, [r3, #16]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d106      	bne.n	8017ee2 <dhcp_delete_msg+0x4a>
 8017ed4:	4b0c      	ldr	r3, [pc, #48]	; (8017f08 <dhcp_delete_msg+0x70>)
 8017ed6:	f240 726f 	movw	r2, #1903	; 0x76f
 8017eda:	490f      	ldr	r1, [pc, #60]	; (8017f18 <dhcp_delete_msg+0x80>)
 8017edc:	480c      	ldr	r0, [pc, #48]	; (8017f10 <dhcp_delete_msg+0x78>)
 8017ede:	f002 fd91 	bl	801aa04 <iprintf>
  if (dhcp->p_out != NULL) {
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	68db      	ldr	r3, [r3, #12]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d004      	beq.n	8017ef4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7f8 fd92 	bl	8010a18 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2200      	movs	r2, #0
 8017efe:	611a      	str	r2, [r3, #16]
}
 8017f00:	3708      	adds	r7, #8
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	0801e2fc 	.word	0x0801e2fc
 8017f0c:	0801e720 	.word	0x0801e720
 8017f10:	0801e380 	.word	0x0801e380
 8017f14:	0801e740 	.word	0x0801e740
 8017f18:	0801e768 	.word	0x0801e768

08017f1c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b082      	sub	sp, #8
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d107      	bne.n	8017f3a <dhcp_option_trailer+0x1e>
 8017f2a:	4b24      	ldr	r3, [pc, #144]	; (8017fbc <dhcp_option_trailer+0xa0>)
 8017f2c:	f240 7282 	movw	r2, #1922	; 0x782
 8017f30:	4923      	ldr	r1, [pc, #140]	; (8017fc0 <dhcp_option_trailer+0xa4>)
 8017f32:	4824      	ldr	r0, [pc, #144]	; (8017fc4 <dhcp_option_trailer+0xa8>)
 8017f34:	f002 fd66 	bl	801aa04 <iprintf>
 8017f38:	e03c      	b.n	8017fb4 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	691b      	ldr	r3, [r3, #16]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d106      	bne.n	8017f50 <dhcp_option_trailer+0x34>
 8017f42:	4b1e      	ldr	r3, [pc, #120]	; (8017fbc <dhcp_option_trailer+0xa0>)
 8017f44:	f240 7283 	movw	r2, #1923	; 0x783
 8017f48:	491f      	ldr	r1, [pc, #124]	; (8017fc8 <dhcp_option_trailer+0xac>)
 8017f4a:	481e      	ldr	r0, [pc, #120]	; (8017fc4 <dhcp_option_trailer+0xa8>)
 8017f4c:	f002 fd5a 	bl	801aa04 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	8a9b      	ldrh	r3, [r3, #20]
 8017f54:	2b43      	cmp	r3, #67	; 0x43
 8017f56:	d906      	bls.n	8017f66 <dhcp_option_trailer+0x4a>
 8017f58:	4b18      	ldr	r3, [pc, #96]	; (8017fbc <dhcp_option_trailer+0xa0>)
 8017f5a:	f240 7284 	movw	r2, #1924	; 0x784
 8017f5e:	491b      	ldr	r1, [pc, #108]	; (8017fcc <dhcp_option_trailer+0xb0>)
 8017f60:	4818      	ldr	r0, [pc, #96]	; (8017fc4 <dhcp_option_trailer+0xa8>)
 8017f62:	f002 fd4f 	bl	801aa04 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	691a      	ldr	r2, [r3, #16]
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	8a9b      	ldrh	r3, [r3, #20]
 8017f6e:	1c59      	adds	r1, r3, #1
 8017f70:	b288      	uxth	r0, r1
 8017f72:	6879      	ldr	r1, [r7, #4]
 8017f74:	8288      	strh	r0, [r1, #20]
 8017f76:	4413      	add	r3, r2
 8017f78:	22ff      	movs	r2, #255	; 0xff
 8017f7a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8017f7e:	e00b      	b.n	8017f98 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	691a      	ldr	r2, [r3, #16]
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	8a9b      	ldrh	r3, [r3, #20]
 8017f88:	1c59      	adds	r1, r3, #1
 8017f8a:	b288      	uxth	r0, r1
 8017f8c:	6879      	ldr	r1, [r7, #4]
 8017f8e:	8288      	strh	r0, [r1, #20]
 8017f90:	4413      	add	r3, r2
 8017f92:	2200      	movs	r2, #0
 8017f94:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	8a9b      	ldrh	r3, [r3, #20]
 8017f9c:	2b43      	cmp	r3, #67	; 0x43
 8017f9e:	d905      	bls.n	8017fac <dhcp_option_trailer+0x90>
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	8a9b      	ldrh	r3, [r3, #20]
 8017fa4:	f003 0303 	and.w	r3, r3, #3
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d003      	beq.n	8017fb4 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8017fb0:	2b43      	cmp	r3, #67	; 0x43
 8017fb2:	d9e5      	bls.n	8017f80 <dhcp_option_trailer+0x64>
  }
}
 8017fb4:	3708      	adds	r7, #8
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	0801e2fc 	.word	0x0801e2fc
 8017fc0:	0801e790 	.word	0x0801e790
 8017fc4:	0801e380 	.word	0x0801e380
 8017fc8:	0801e7b4 	.word	0x0801e7b4
 8017fcc:	0801e7e0 	.word	0x0801e7e0

08017fd0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017fd0:	b480      	push	{r7}
 8017fd2:	b085      	sub	sp, #20
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d017      	beq.n	801800e <dhcp_supplied_address+0x3e>
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d013      	beq.n	801800e <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fea:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	7a5b      	ldrb	r3, [r3, #9]
 8017ff0:	2b0a      	cmp	r3, #10
 8017ff2:	d007      	beq.n	8018004 <dhcp_supplied_address+0x34>
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	7a5b      	ldrb	r3, [r3, #9]
 8017ff8:	2b05      	cmp	r3, #5
 8017ffa:	d003      	beq.n	8018004 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018000:	2b04      	cmp	r3, #4
 8018002:	d101      	bne.n	8018008 <dhcp_supplied_address+0x38>
 8018004:	2301      	movs	r3, #1
 8018006:	e000      	b.n	801800a <dhcp_supplied_address+0x3a>
 8018008:	2300      	movs	r3, #0
 801800a:	b2db      	uxtb	r3, r3
 801800c:	e000      	b.n	8018010 <dhcp_supplied_address+0x40>
  }
  return 0;
 801800e:	2300      	movs	r3, #0
}
 8018010:	4618      	mov	r0, r3
 8018012:	3714      	adds	r7, #20
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018024:	4915      	ldr	r1, [pc, #84]	; (801807c <etharp_free_entry+0x60>)
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	4613      	mov	r3, r2
 801802a:	005b      	lsls	r3, r3, #1
 801802c:	4413      	add	r3, r2
 801802e:	00db      	lsls	r3, r3, #3
 8018030:	440b      	add	r3, r1
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d013      	beq.n	8018060 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018038:	4910      	ldr	r1, [pc, #64]	; (801807c <etharp_free_entry+0x60>)
 801803a:	687a      	ldr	r2, [r7, #4]
 801803c:	4613      	mov	r3, r2
 801803e:	005b      	lsls	r3, r3, #1
 8018040:	4413      	add	r3, r2
 8018042:	00db      	lsls	r3, r3, #3
 8018044:	440b      	add	r3, r1
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	4618      	mov	r0, r3
 801804a:	f7f8 fce5 	bl	8010a18 <pbuf_free>
    arp_table[i].q = NULL;
 801804e:	490b      	ldr	r1, [pc, #44]	; (801807c <etharp_free_entry+0x60>)
 8018050:	687a      	ldr	r2, [r7, #4]
 8018052:	4613      	mov	r3, r2
 8018054:	005b      	lsls	r3, r3, #1
 8018056:	4413      	add	r3, r2
 8018058:	00db      	lsls	r3, r3, #3
 801805a:	440b      	add	r3, r1
 801805c:	2200      	movs	r2, #0
 801805e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018060:	4906      	ldr	r1, [pc, #24]	; (801807c <etharp_free_entry+0x60>)
 8018062:	687a      	ldr	r2, [r7, #4]
 8018064:	4613      	mov	r3, r2
 8018066:	005b      	lsls	r3, r3, #1
 8018068:	4413      	add	r3, r2
 801806a:	00db      	lsls	r3, r3, #3
 801806c:	440b      	add	r3, r1
 801806e:	3314      	adds	r3, #20
 8018070:	2200      	movs	r2, #0
 8018072:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018074:	bf00      	nop
 8018076:	3708      	adds	r7, #8
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}
 801807c:	2400772c 	.word	0x2400772c

08018080 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018086:	2300      	movs	r3, #0
 8018088:	71fb      	strb	r3, [r7, #7]
 801808a:	e096      	b.n	80181ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801808c:	79fa      	ldrb	r2, [r7, #7]
 801808e:	494f      	ldr	r1, [pc, #316]	; (80181cc <etharp_tmr+0x14c>)
 8018090:	4613      	mov	r3, r2
 8018092:	005b      	lsls	r3, r3, #1
 8018094:	4413      	add	r3, r2
 8018096:	00db      	lsls	r3, r3, #3
 8018098:	440b      	add	r3, r1
 801809a:	3314      	adds	r3, #20
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80180a0:	79bb      	ldrb	r3, [r7, #6]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f000 8086 	beq.w	80181b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80180a8:	79fa      	ldrb	r2, [r7, #7]
 80180aa:	4948      	ldr	r1, [pc, #288]	; (80181cc <etharp_tmr+0x14c>)
 80180ac:	4613      	mov	r3, r2
 80180ae:	005b      	lsls	r3, r3, #1
 80180b0:	4413      	add	r3, r2
 80180b2:	00db      	lsls	r3, r3, #3
 80180b4:	440b      	add	r3, r1
 80180b6:	3312      	adds	r3, #18
 80180b8:	881b      	ldrh	r3, [r3, #0]
 80180ba:	3301      	adds	r3, #1
 80180bc:	b298      	uxth	r0, r3
 80180be:	4943      	ldr	r1, [pc, #268]	; (80181cc <etharp_tmr+0x14c>)
 80180c0:	4613      	mov	r3, r2
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	4413      	add	r3, r2
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	440b      	add	r3, r1
 80180ca:	3312      	adds	r3, #18
 80180cc:	4602      	mov	r2, r0
 80180ce:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80180d0:	79fa      	ldrb	r2, [r7, #7]
 80180d2:	493e      	ldr	r1, [pc, #248]	; (80181cc <etharp_tmr+0x14c>)
 80180d4:	4613      	mov	r3, r2
 80180d6:	005b      	lsls	r3, r3, #1
 80180d8:	4413      	add	r3, r2
 80180da:	00db      	lsls	r3, r3, #3
 80180dc:	440b      	add	r3, r1
 80180de:	3312      	adds	r3, #18
 80180e0:	881b      	ldrh	r3, [r3, #0]
 80180e2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80180e6:	d215      	bcs.n	8018114 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80180e8:	79fa      	ldrb	r2, [r7, #7]
 80180ea:	4938      	ldr	r1, [pc, #224]	; (80181cc <etharp_tmr+0x14c>)
 80180ec:	4613      	mov	r3, r2
 80180ee:	005b      	lsls	r3, r3, #1
 80180f0:	4413      	add	r3, r2
 80180f2:	00db      	lsls	r3, r3, #3
 80180f4:	440b      	add	r3, r1
 80180f6:	3314      	adds	r3, #20
 80180f8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d10f      	bne.n	801811e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80180fe:	79fa      	ldrb	r2, [r7, #7]
 8018100:	4932      	ldr	r1, [pc, #200]	; (80181cc <etharp_tmr+0x14c>)
 8018102:	4613      	mov	r3, r2
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	4413      	add	r3, r2
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	440b      	add	r3, r1
 801810c:	3312      	adds	r3, #18
 801810e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018110:	2b04      	cmp	r3, #4
 8018112:	d904      	bls.n	801811e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018114:	79fb      	ldrb	r3, [r7, #7]
 8018116:	4618      	mov	r0, r3
 8018118:	f7ff ff80 	bl	801801c <etharp_free_entry>
 801811c:	e04a      	b.n	80181b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801811e:	79fa      	ldrb	r2, [r7, #7]
 8018120:	492a      	ldr	r1, [pc, #168]	; (80181cc <etharp_tmr+0x14c>)
 8018122:	4613      	mov	r3, r2
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	4413      	add	r3, r2
 8018128:	00db      	lsls	r3, r3, #3
 801812a:	440b      	add	r3, r1
 801812c:	3314      	adds	r3, #20
 801812e:	781b      	ldrb	r3, [r3, #0]
 8018130:	2b03      	cmp	r3, #3
 8018132:	d10a      	bne.n	801814a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018134:	79fa      	ldrb	r2, [r7, #7]
 8018136:	4925      	ldr	r1, [pc, #148]	; (80181cc <etharp_tmr+0x14c>)
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	00db      	lsls	r3, r3, #3
 8018140:	440b      	add	r3, r1
 8018142:	3314      	adds	r3, #20
 8018144:	2204      	movs	r2, #4
 8018146:	701a      	strb	r2, [r3, #0]
 8018148:	e034      	b.n	80181b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801814a:	79fa      	ldrb	r2, [r7, #7]
 801814c:	491f      	ldr	r1, [pc, #124]	; (80181cc <etharp_tmr+0x14c>)
 801814e:	4613      	mov	r3, r2
 8018150:	005b      	lsls	r3, r3, #1
 8018152:	4413      	add	r3, r2
 8018154:	00db      	lsls	r3, r3, #3
 8018156:	440b      	add	r3, r1
 8018158:	3314      	adds	r3, #20
 801815a:	781b      	ldrb	r3, [r3, #0]
 801815c:	2b04      	cmp	r3, #4
 801815e:	d10a      	bne.n	8018176 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018160:	79fa      	ldrb	r2, [r7, #7]
 8018162:	491a      	ldr	r1, [pc, #104]	; (80181cc <etharp_tmr+0x14c>)
 8018164:	4613      	mov	r3, r2
 8018166:	005b      	lsls	r3, r3, #1
 8018168:	4413      	add	r3, r2
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	440b      	add	r3, r1
 801816e:	3314      	adds	r3, #20
 8018170:	2202      	movs	r2, #2
 8018172:	701a      	strb	r2, [r3, #0]
 8018174:	e01e      	b.n	80181b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018176:	79fa      	ldrb	r2, [r7, #7]
 8018178:	4914      	ldr	r1, [pc, #80]	; (80181cc <etharp_tmr+0x14c>)
 801817a:	4613      	mov	r3, r2
 801817c:	005b      	lsls	r3, r3, #1
 801817e:	4413      	add	r3, r2
 8018180:	00db      	lsls	r3, r3, #3
 8018182:	440b      	add	r3, r1
 8018184:	3314      	adds	r3, #20
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	2b01      	cmp	r3, #1
 801818a:	d113      	bne.n	80181b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801818c:	79fa      	ldrb	r2, [r7, #7]
 801818e:	490f      	ldr	r1, [pc, #60]	; (80181cc <etharp_tmr+0x14c>)
 8018190:	4613      	mov	r3, r2
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	4413      	add	r3, r2
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	440b      	add	r3, r1
 801819a:	3308      	adds	r3, #8
 801819c:	6818      	ldr	r0, [r3, #0]
 801819e:	79fa      	ldrb	r2, [r7, #7]
 80181a0:	4613      	mov	r3, r2
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	4413      	add	r3, r2
 80181a6:	00db      	lsls	r3, r3, #3
 80181a8:	4a08      	ldr	r2, [pc, #32]	; (80181cc <etharp_tmr+0x14c>)
 80181aa:	4413      	add	r3, r2
 80181ac:	3304      	adds	r3, #4
 80181ae:	4619      	mov	r1, r3
 80181b0:	f000 fe3c 	bl	8018e2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181b4:	79fb      	ldrb	r3, [r7, #7]
 80181b6:	3301      	adds	r3, #1
 80181b8:	71fb      	strb	r3, [r7, #7]
 80181ba:	79fb      	ldrb	r3, [r7, #7]
 80181bc:	2b09      	cmp	r3, #9
 80181be:	f67f af65 	bls.w	801808c <etharp_tmr+0xc>
      }
    }
  }
}
 80181c2:	bf00      	nop
 80181c4:	bf00      	nop
 80181c6:	3708      	adds	r7, #8
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}
 80181cc:	2400772c 	.word	0x2400772c

080181d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b088      	sub	sp, #32
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	60f8      	str	r0, [r7, #12]
 80181d8:	460b      	mov	r3, r1
 80181da:	607a      	str	r2, [r7, #4]
 80181dc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80181de:	230a      	movs	r3, #10
 80181e0:	77fb      	strb	r3, [r7, #31]
 80181e2:	230a      	movs	r3, #10
 80181e4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80181e6:	230a      	movs	r3, #10
 80181e8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80181ee:	230a      	movs	r3, #10
 80181f0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80181f2:	2300      	movs	r3, #0
 80181f4:	833b      	strh	r3, [r7, #24]
 80181f6:	2300      	movs	r3, #0
 80181f8:	82fb      	strh	r3, [r7, #22]
 80181fa:	2300      	movs	r3, #0
 80181fc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181fe:	2300      	movs	r3, #0
 8018200:	773b      	strb	r3, [r7, #28]
 8018202:	e093      	b.n	801832c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8018204:	7f3a      	ldrb	r2, [r7, #28]
 8018206:	4990      	ldr	r1, [pc, #576]	; (8018448 <etharp_find_entry+0x278>)
 8018208:	4613      	mov	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	4413      	add	r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	440b      	add	r3, r1
 8018212:	3314      	adds	r3, #20
 8018214:	781b      	ldrb	r3, [r3, #0]
 8018216:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018218:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801821c:	2b0a      	cmp	r3, #10
 801821e:	d105      	bne.n	801822c <etharp_find_entry+0x5c>
 8018220:	7cfb      	ldrb	r3, [r7, #19]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d102      	bne.n	801822c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8018226:	7f3b      	ldrb	r3, [r7, #28]
 8018228:	777b      	strb	r3, [r7, #29]
 801822a:	e07c      	b.n	8018326 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801822c:	7cfb      	ldrb	r3, [r7, #19]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d079      	beq.n	8018326 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018232:	7cfb      	ldrb	r3, [r7, #19]
 8018234:	2b01      	cmp	r3, #1
 8018236:	d009      	beq.n	801824c <etharp_find_entry+0x7c>
 8018238:	7cfb      	ldrb	r3, [r7, #19]
 801823a:	2b01      	cmp	r3, #1
 801823c:	d806      	bhi.n	801824c <etharp_find_entry+0x7c>
 801823e:	4b83      	ldr	r3, [pc, #524]	; (801844c <etharp_find_entry+0x27c>)
 8018240:	f240 1225 	movw	r2, #293	; 0x125
 8018244:	4982      	ldr	r1, [pc, #520]	; (8018450 <etharp_find_entry+0x280>)
 8018246:	4883      	ldr	r0, [pc, #524]	; (8018454 <etharp_find_entry+0x284>)
 8018248:	f002 fbdc 	bl	801aa04 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d00f      	beq.n	8018272 <etharp_find_entry+0xa2>
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	6819      	ldr	r1, [r3, #0]
 8018256:	7f3a      	ldrb	r2, [r7, #28]
 8018258:	487b      	ldr	r0, [pc, #492]	; (8018448 <etharp_find_entry+0x278>)
 801825a:	4613      	mov	r3, r2
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	4413      	add	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	4403      	add	r3, r0
 8018264:	3304      	adds	r3, #4
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4299      	cmp	r1, r3
 801826a:	d102      	bne.n	8018272 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801826c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8018270:	e0e5      	b.n	801843e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018272:	7cfb      	ldrb	r3, [r7, #19]
 8018274:	2b01      	cmp	r3, #1
 8018276:	d13b      	bne.n	80182f0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018278:	7f3a      	ldrb	r2, [r7, #28]
 801827a:	4973      	ldr	r1, [pc, #460]	; (8018448 <etharp_find_entry+0x278>)
 801827c:	4613      	mov	r3, r2
 801827e:	005b      	lsls	r3, r3, #1
 8018280:	4413      	add	r3, r2
 8018282:	00db      	lsls	r3, r3, #3
 8018284:	440b      	add	r3, r1
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d018      	beq.n	80182be <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801828c:	7f3a      	ldrb	r2, [r7, #28]
 801828e:	496e      	ldr	r1, [pc, #440]	; (8018448 <etharp_find_entry+0x278>)
 8018290:	4613      	mov	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	4413      	add	r3, r2
 8018296:	00db      	lsls	r3, r3, #3
 8018298:	440b      	add	r3, r1
 801829a:	3312      	adds	r3, #18
 801829c:	881b      	ldrh	r3, [r3, #0]
 801829e:	8b3a      	ldrh	r2, [r7, #24]
 80182a0:	429a      	cmp	r2, r3
 80182a2:	d840      	bhi.n	8018326 <etharp_find_entry+0x156>
            old_queue = i;
 80182a4:	7f3b      	ldrb	r3, [r7, #28]
 80182a6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80182a8:	7f3a      	ldrb	r2, [r7, #28]
 80182aa:	4967      	ldr	r1, [pc, #412]	; (8018448 <etharp_find_entry+0x278>)
 80182ac:	4613      	mov	r3, r2
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	4413      	add	r3, r2
 80182b2:	00db      	lsls	r3, r3, #3
 80182b4:	440b      	add	r3, r1
 80182b6:	3312      	adds	r3, #18
 80182b8:	881b      	ldrh	r3, [r3, #0]
 80182ba:	833b      	strh	r3, [r7, #24]
 80182bc:	e033      	b.n	8018326 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80182be:	7f3a      	ldrb	r2, [r7, #28]
 80182c0:	4961      	ldr	r1, [pc, #388]	; (8018448 <etharp_find_entry+0x278>)
 80182c2:	4613      	mov	r3, r2
 80182c4:	005b      	lsls	r3, r3, #1
 80182c6:	4413      	add	r3, r2
 80182c8:	00db      	lsls	r3, r3, #3
 80182ca:	440b      	add	r3, r1
 80182cc:	3312      	adds	r3, #18
 80182ce:	881b      	ldrh	r3, [r3, #0]
 80182d0:	8afa      	ldrh	r2, [r7, #22]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	d827      	bhi.n	8018326 <etharp_find_entry+0x156>
            old_pending = i;
 80182d6:	7f3b      	ldrb	r3, [r7, #28]
 80182d8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80182da:	7f3a      	ldrb	r2, [r7, #28]
 80182dc:	495a      	ldr	r1, [pc, #360]	; (8018448 <etharp_find_entry+0x278>)
 80182de:	4613      	mov	r3, r2
 80182e0:	005b      	lsls	r3, r3, #1
 80182e2:	4413      	add	r3, r2
 80182e4:	00db      	lsls	r3, r3, #3
 80182e6:	440b      	add	r3, r1
 80182e8:	3312      	adds	r3, #18
 80182ea:	881b      	ldrh	r3, [r3, #0]
 80182ec:	82fb      	strh	r3, [r7, #22]
 80182ee:	e01a      	b.n	8018326 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80182f0:	7cfb      	ldrb	r3, [r7, #19]
 80182f2:	2b01      	cmp	r3, #1
 80182f4:	d917      	bls.n	8018326 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80182f6:	7f3a      	ldrb	r2, [r7, #28]
 80182f8:	4953      	ldr	r1, [pc, #332]	; (8018448 <etharp_find_entry+0x278>)
 80182fa:	4613      	mov	r3, r2
 80182fc:	005b      	lsls	r3, r3, #1
 80182fe:	4413      	add	r3, r2
 8018300:	00db      	lsls	r3, r3, #3
 8018302:	440b      	add	r3, r1
 8018304:	3312      	adds	r3, #18
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	8aba      	ldrh	r2, [r7, #20]
 801830a:	429a      	cmp	r2, r3
 801830c:	d80b      	bhi.n	8018326 <etharp_find_entry+0x156>
            old_stable = i;
 801830e:	7f3b      	ldrb	r3, [r7, #28]
 8018310:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8018312:	7f3a      	ldrb	r2, [r7, #28]
 8018314:	494c      	ldr	r1, [pc, #304]	; (8018448 <etharp_find_entry+0x278>)
 8018316:	4613      	mov	r3, r2
 8018318:	005b      	lsls	r3, r3, #1
 801831a:	4413      	add	r3, r2
 801831c:	00db      	lsls	r3, r3, #3
 801831e:	440b      	add	r3, r1
 8018320:	3312      	adds	r3, #18
 8018322:	881b      	ldrh	r3, [r3, #0]
 8018324:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018326:	7f3b      	ldrb	r3, [r7, #28]
 8018328:	3301      	adds	r3, #1
 801832a:	773b      	strb	r3, [r7, #28]
 801832c:	7f3b      	ldrb	r3, [r7, #28]
 801832e:	2b09      	cmp	r3, #9
 8018330:	f67f af68 	bls.w	8018204 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018334:	7afb      	ldrb	r3, [r7, #11]
 8018336:	f003 0302 	and.w	r3, r3, #2
 801833a:	2b00      	cmp	r3, #0
 801833c:	d108      	bne.n	8018350 <etharp_find_entry+0x180>
 801833e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018342:	2b0a      	cmp	r3, #10
 8018344:	d107      	bne.n	8018356 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018346:	7afb      	ldrb	r3, [r7, #11]
 8018348:	f003 0301 	and.w	r3, r3, #1
 801834c:	2b00      	cmp	r3, #0
 801834e:	d102      	bne.n	8018356 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8018350:	f04f 33ff 	mov.w	r3, #4294967295
 8018354:	e073      	b.n	801843e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018356:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801835a:	2b09      	cmp	r3, #9
 801835c:	dc02      	bgt.n	8018364 <etharp_find_entry+0x194>
    i = empty;
 801835e:	7f7b      	ldrb	r3, [r7, #29]
 8018360:	773b      	strb	r3, [r7, #28]
 8018362:	e036      	b.n	80183d2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018364:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018368:	2b09      	cmp	r3, #9
 801836a:	dc13      	bgt.n	8018394 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801836c:	7fbb      	ldrb	r3, [r7, #30]
 801836e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018370:	7f3a      	ldrb	r2, [r7, #28]
 8018372:	4935      	ldr	r1, [pc, #212]	; (8018448 <etharp_find_entry+0x278>)
 8018374:	4613      	mov	r3, r2
 8018376:	005b      	lsls	r3, r3, #1
 8018378:	4413      	add	r3, r2
 801837a:	00db      	lsls	r3, r3, #3
 801837c:	440b      	add	r3, r1
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d018      	beq.n	80183b6 <etharp_find_entry+0x1e6>
 8018384:	4b31      	ldr	r3, [pc, #196]	; (801844c <etharp_find_entry+0x27c>)
 8018386:	f240 126f 	movw	r2, #367	; 0x16f
 801838a:	4933      	ldr	r1, [pc, #204]	; (8018458 <etharp_find_entry+0x288>)
 801838c:	4831      	ldr	r0, [pc, #196]	; (8018454 <etharp_find_entry+0x284>)
 801838e:	f002 fb39 	bl	801aa04 <iprintf>
 8018392:	e010      	b.n	80183b6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018394:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018398:	2b09      	cmp	r3, #9
 801839a:	dc02      	bgt.n	80183a2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801839c:	7ffb      	ldrb	r3, [r7, #31]
 801839e:	773b      	strb	r3, [r7, #28]
 80183a0:	e009      	b.n	80183b6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80183a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80183a6:	2b09      	cmp	r3, #9
 80183a8:	dc02      	bgt.n	80183b0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80183aa:	7efb      	ldrb	r3, [r7, #27]
 80183ac:	773b      	strb	r3, [r7, #28]
 80183ae:	e002      	b.n	80183b6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80183b0:	f04f 33ff 	mov.w	r3, #4294967295
 80183b4:	e043      	b.n	801843e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183b6:	7f3b      	ldrb	r3, [r7, #28]
 80183b8:	2b09      	cmp	r3, #9
 80183ba:	d906      	bls.n	80183ca <etharp_find_entry+0x1fa>
 80183bc:	4b23      	ldr	r3, [pc, #140]	; (801844c <etharp_find_entry+0x27c>)
 80183be:	f240 1281 	movw	r2, #385	; 0x181
 80183c2:	4926      	ldr	r1, [pc, #152]	; (801845c <etharp_find_entry+0x28c>)
 80183c4:	4823      	ldr	r0, [pc, #140]	; (8018454 <etharp_find_entry+0x284>)
 80183c6:	f002 fb1d 	bl	801aa04 <iprintf>
    etharp_free_entry(i);
 80183ca:	7f3b      	ldrb	r3, [r7, #28]
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7ff fe25 	bl	801801c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183d2:	7f3b      	ldrb	r3, [r7, #28]
 80183d4:	2b09      	cmp	r3, #9
 80183d6:	d906      	bls.n	80183e6 <etharp_find_entry+0x216>
 80183d8:	4b1c      	ldr	r3, [pc, #112]	; (801844c <etharp_find_entry+0x27c>)
 80183da:	f240 1285 	movw	r2, #389	; 0x185
 80183de:	491f      	ldr	r1, [pc, #124]	; (801845c <etharp_find_entry+0x28c>)
 80183e0:	481c      	ldr	r0, [pc, #112]	; (8018454 <etharp_find_entry+0x284>)
 80183e2:	f002 fb0f 	bl	801aa04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80183e6:	7f3a      	ldrb	r2, [r7, #28]
 80183e8:	4917      	ldr	r1, [pc, #92]	; (8018448 <etharp_find_entry+0x278>)
 80183ea:	4613      	mov	r3, r2
 80183ec:	005b      	lsls	r3, r3, #1
 80183ee:	4413      	add	r3, r2
 80183f0:	00db      	lsls	r3, r3, #3
 80183f2:	440b      	add	r3, r1
 80183f4:	3314      	adds	r3, #20
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d006      	beq.n	801840a <etharp_find_entry+0x23a>
 80183fc:	4b13      	ldr	r3, [pc, #76]	; (801844c <etharp_find_entry+0x27c>)
 80183fe:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8018402:	4917      	ldr	r1, [pc, #92]	; (8018460 <etharp_find_entry+0x290>)
 8018404:	4813      	ldr	r0, [pc, #76]	; (8018454 <etharp_find_entry+0x284>)
 8018406:	f002 fafd 	bl	801aa04 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d00a      	beq.n	8018426 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018410:	7f3a      	ldrb	r2, [r7, #28]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6819      	ldr	r1, [r3, #0]
 8018416:	480c      	ldr	r0, [pc, #48]	; (8018448 <etharp_find_entry+0x278>)
 8018418:	4613      	mov	r3, r2
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	4413      	add	r3, r2
 801841e:	00db      	lsls	r3, r3, #3
 8018420:	4403      	add	r3, r0
 8018422:	3304      	adds	r3, #4
 8018424:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018426:	7f3a      	ldrb	r2, [r7, #28]
 8018428:	4907      	ldr	r1, [pc, #28]	; (8018448 <etharp_find_entry+0x278>)
 801842a:	4613      	mov	r3, r2
 801842c:	005b      	lsls	r3, r3, #1
 801842e:	4413      	add	r3, r2
 8018430:	00db      	lsls	r3, r3, #3
 8018432:	440b      	add	r3, r1
 8018434:	3312      	adds	r3, #18
 8018436:	2200      	movs	r2, #0
 8018438:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801843a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801843e:	4618      	mov	r0, r3
 8018440:	3720      	adds	r7, #32
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
 8018446:	bf00      	nop
 8018448:	2400772c 	.word	0x2400772c
 801844c:	0801e820 	.word	0x0801e820
 8018450:	0801e880 	.word	0x0801e880
 8018454:	0801e8c0 	.word	0x0801e8c0
 8018458:	0801e8e8 	.word	0x0801e8e8
 801845c:	0801e900 	.word	0x0801e900
 8018460:	0801e914 	.word	0x0801e914

08018464 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b088      	sub	sp, #32
 8018468:	af02      	add	r7, sp, #8
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
 8018470:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018478:	2b06      	cmp	r3, #6
 801847a:	d006      	beq.n	801848a <etharp_update_arp_entry+0x26>
 801847c:	4b48      	ldr	r3, [pc, #288]	; (80185a0 <etharp_update_arp_entry+0x13c>)
 801847e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018482:	4948      	ldr	r1, [pc, #288]	; (80185a4 <etharp_update_arp_entry+0x140>)
 8018484:	4848      	ldr	r0, [pc, #288]	; (80185a8 <etharp_update_arp_entry+0x144>)
 8018486:	f002 fabd 	bl	801aa04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d012      	beq.n	80184b6 <etharp_update_arp_entry+0x52>
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d00e      	beq.n	80184b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	68f9      	ldr	r1, [r7, #12]
 801849e:	4618      	mov	r0, r3
 80184a0:	f001 f8fe 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 80184a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d105      	bne.n	80184b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80184b2:	2be0      	cmp	r3, #224	; 0xe0
 80184b4:	d102      	bne.n	80184bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184b6:	f06f 030f 	mvn.w	r3, #15
 80184ba:	e06c      	b.n	8018596 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80184bc:	78fb      	ldrb	r3, [r7, #3]
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	4619      	mov	r1, r3
 80184c2:	68b8      	ldr	r0, [r7, #8]
 80184c4:	f7ff fe84 	bl	80181d0 <etharp_find_entry>
 80184c8:	4603      	mov	r3, r0
 80184ca:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80184cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	da02      	bge.n	80184da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80184d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80184d8:	e05d      	b.n	8018596 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80184da:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80184de:	4933      	ldr	r1, [pc, #204]	; (80185ac <etharp_update_arp_entry+0x148>)
 80184e0:	4613      	mov	r3, r2
 80184e2:	005b      	lsls	r3, r3, #1
 80184e4:	4413      	add	r3, r2
 80184e6:	00db      	lsls	r3, r3, #3
 80184e8:	440b      	add	r3, r1
 80184ea:	3314      	adds	r3, #20
 80184ec:	2202      	movs	r2, #2
 80184ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80184f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80184f4:	492d      	ldr	r1, [pc, #180]	; (80185ac <etharp_update_arp_entry+0x148>)
 80184f6:	4613      	mov	r3, r2
 80184f8:	005b      	lsls	r3, r3, #1
 80184fa:	4413      	add	r3, r2
 80184fc:	00db      	lsls	r3, r3, #3
 80184fe:	440b      	add	r3, r1
 8018500:	3308      	adds	r3, #8
 8018502:	68fa      	ldr	r2, [r7, #12]
 8018504:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8018506:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801850a:	4613      	mov	r3, r2
 801850c:	005b      	lsls	r3, r3, #1
 801850e:	4413      	add	r3, r2
 8018510:	00db      	lsls	r3, r3, #3
 8018512:	3308      	adds	r3, #8
 8018514:	4a25      	ldr	r2, [pc, #148]	; (80185ac <etharp_update_arp_entry+0x148>)
 8018516:	4413      	add	r3, r2
 8018518:	3304      	adds	r3, #4
 801851a:	2206      	movs	r2, #6
 801851c:	6879      	ldr	r1, [r7, #4]
 801851e:	4618      	mov	r0, r3
 8018520:	f002 fa5a 	bl	801a9d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018524:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018528:	4920      	ldr	r1, [pc, #128]	; (80185ac <etharp_update_arp_entry+0x148>)
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	00db      	lsls	r3, r3, #3
 8018532:	440b      	add	r3, r1
 8018534:	3312      	adds	r3, #18
 8018536:	2200      	movs	r2, #0
 8018538:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801853a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801853e:	491b      	ldr	r1, [pc, #108]	; (80185ac <etharp_update_arp_entry+0x148>)
 8018540:	4613      	mov	r3, r2
 8018542:	005b      	lsls	r3, r3, #1
 8018544:	4413      	add	r3, r2
 8018546:	00db      	lsls	r3, r3, #3
 8018548:	440b      	add	r3, r1
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d021      	beq.n	8018594 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018550:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018554:	4915      	ldr	r1, [pc, #84]	; (80185ac <etharp_update_arp_entry+0x148>)
 8018556:	4613      	mov	r3, r2
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	4413      	add	r3, r2
 801855c:	00db      	lsls	r3, r3, #3
 801855e:	440b      	add	r3, r1
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018564:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018568:	4910      	ldr	r1, [pc, #64]	; (80185ac <etharp_update_arp_entry+0x148>)
 801856a:	4613      	mov	r3, r2
 801856c:	005b      	lsls	r3, r3, #1
 801856e:	4413      	add	r3, r2
 8018570:	00db      	lsls	r3, r3, #3
 8018572:	440b      	add	r3, r1
 8018574:	2200      	movs	r2, #0
 8018576:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	f103 0231 	add.w	r2, r3, #49	; 0x31
 801857e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018582:	9300      	str	r3, [sp, #0]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6939      	ldr	r1, [r7, #16]
 8018588:	68f8      	ldr	r0, [r7, #12]
 801858a:	f001 ffb1 	bl	801a4f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801858e:	6938      	ldr	r0, [r7, #16]
 8018590:	f7f8 fa42 	bl	8010a18 <pbuf_free>
  }
  return ERR_OK;
 8018594:	2300      	movs	r3, #0
}
 8018596:	4618      	mov	r0, r3
 8018598:	3718      	adds	r7, #24
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}
 801859e:	bf00      	nop
 80185a0:	0801e820 	.word	0x0801e820
 80185a4:	0801e940 	.word	0x0801e940
 80185a8:	0801e8c0 	.word	0x0801e8c0
 80185ac:	2400772c 	.word	0x2400772c

080185b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185b8:	2300      	movs	r3, #0
 80185ba:	73fb      	strb	r3, [r7, #15]
 80185bc:	e01f      	b.n	80185fe <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80185be:	7bfa      	ldrb	r2, [r7, #15]
 80185c0:	4913      	ldr	r1, [pc, #76]	; (8018610 <etharp_cleanup_netif+0x60>)
 80185c2:	4613      	mov	r3, r2
 80185c4:	005b      	lsls	r3, r3, #1
 80185c6:	4413      	add	r3, r2
 80185c8:	00db      	lsls	r3, r3, #3
 80185ca:	440b      	add	r3, r1
 80185cc:	3314      	adds	r3, #20
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80185d2:	7bbb      	ldrb	r3, [r7, #14]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d00f      	beq.n	80185f8 <etharp_cleanup_netif+0x48>
 80185d8:	7bfa      	ldrb	r2, [r7, #15]
 80185da:	490d      	ldr	r1, [pc, #52]	; (8018610 <etharp_cleanup_netif+0x60>)
 80185dc:	4613      	mov	r3, r2
 80185de:	005b      	lsls	r3, r3, #1
 80185e0:	4413      	add	r3, r2
 80185e2:	00db      	lsls	r3, r3, #3
 80185e4:	440b      	add	r3, r1
 80185e6:	3308      	adds	r3, #8
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	687a      	ldr	r2, [r7, #4]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d103      	bne.n	80185f8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80185f0:	7bfb      	ldrb	r3, [r7, #15]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7ff fd12 	bl	801801c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185f8:	7bfb      	ldrb	r3, [r7, #15]
 80185fa:	3301      	adds	r3, #1
 80185fc:	73fb      	strb	r3, [r7, #15]
 80185fe:	7bfb      	ldrb	r3, [r7, #15]
 8018600:	2b09      	cmp	r3, #9
 8018602:	d9dc      	bls.n	80185be <etharp_cleanup_netif+0xe>
    }
  }
}
 8018604:	bf00      	nop
 8018606:	bf00      	nop
 8018608:	3710      	adds	r7, #16
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}
 801860e:	bf00      	nop
 8018610:	2400772c 	.word	0x2400772c

08018614 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018614:	b5b0      	push	{r4, r5, r7, lr}
 8018616:	b08a      	sub	sp, #40	; 0x28
 8018618:	af04      	add	r7, sp, #16
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d107      	bne.n	8018634 <etharp_input+0x20>
 8018624:	4b3f      	ldr	r3, [pc, #252]	; (8018724 <etharp_input+0x110>)
 8018626:	f44f 7222 	mov.w	r2, #648	; 0x288
 801862a:	493f      	ldr	r1, [pc, #252]	; (8018728 <etharp_input+0x114>)
 801862c:	483f      	ldr	r0, [pc, #252]	; (801872c <etharp_input+0x118>)
 801862e:	f002 f9e9 	bl	801aa04 <iprintf>
 8018632:	e074      	b.n	801871e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	881b      	ldrh	r3, [r3, #0]
 801863e:	b29b      	uxth	r3, r3
 8018640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018644:	d10c      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801864a:	2b06      	cmp	r3, #6
 801864c:	d108      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018652:	2b04      	cmp	r3, #4
 8018654:	d104      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018656:	693b      	ldr	r3, [r7, #16]
 8018658:	885b      	ldrh	r3, [r3, #2]
 801865a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801865c:	2b08      	cmp	r3, #8
 801865e:	d003      	beq.n	8018668 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f8 f9d9 	bl	8010a18 <pbuf_free>
    return;
 8018666:	e05a      	b.n	801871e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8018668:	693b      	ldr	r3, [r7, #16]
 801866a:	330e      	adds	r3, #14
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	3318      	adds	r3, #24
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	3304      	adds	r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d102      	bne.n	8018688 <etharp_input+0x74>
    for_us = 0;
 8018682:	2300      	movs	r3, #0
 8018684:	75fb      	strb	r3, [r7, #23]
 8018686:	e009      	b.n	801869c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018688:	68ba      	ldr	r2, [r7, #8]
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	3304      	adds	r3, #4
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	429a      	cmp	r2, r3
 8018692:	bf0c      	ite	eq
 8018694:	2301      	moveq	r3, #1
 8018696:	2300      	movne	r3, #0
 8018698:	b2db      	uxtb	r3, r3
 801869a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	f103 0208 	add.w	r2, r3, #8
 80186a2:	7dfb      	ldrb	r3, [r7, #23]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d001      	beq.n	80186ac <etharp_input+0x98>
 80186a8:	2301      	movs	r3, #1
 80186aa:	e000      	b.n	80186ae <etharp_input+0x9a>
 80186ac:	2302      	movs	r3, #2
 80186ae:	f107 010c 	add.w	r1, r7, #12
 80186b2:	6838      	ldr	r0, [r7, #0]
 80186b4:	f7ff fed6 	bl	8018464 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	88db      	ldrh	r3, [r3, #6]
 80186bc:	b29b      	uxth	r3, r3
 80186be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186c2:	d003      	beq.n	80186cc <etharp_input+0xb8>
 80186c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186c8:	d01e      	beq.n	8018708 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80186ca:	e025      	b.n	8018718 <etharp_input+0x104>
    if (for_us) {
 80186cc:	7dfb      	ldrb	r3, [r7, #23]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d021      	beq.n	8018716 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	f103 0031 	add.w	r0, r3, #49	; 0x31
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	f103 0531 	add.w	r5, r3, #49	; 0x31
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80186e8:	693a      	ldr	r2, [r7, #16]
 80186ea:	3208      	adds	r2, #8
      etharp_raw(netif,
 80186ec:	2102      	movs	r1, #2
 80186ee:	9103      	str	r1, [sp, #12]
 80186f0:	f107 010c 	add.w	r1, r7, #12
 80186f4:	9102      	str	r1, [sp, #8]
 80186f6:	9201      	str	r2, [sp, #4]
 80186f8:	9300      	str	r3, [sp, #0]
 80186fa:	462b      	mov	r3, r5
 80186fc:	4622      	mov	r2, r4
 80186fe:	4601      	mov	r1, r0
 8018700:	6838      	ldr	r0, [r7, #0]
 8018702:	f000 fae5 	bl	8018cd0 <etharp_raw>
    break;
 8018706:	e006      	b.n	8018716 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8018708:	f107 030c 	add.w	r3, r7, #12
 801870c:	4619      	mov	r1, r3
 801870e:	6838      	ldr	r0, [r7, #0]
 8018710:	f7fe fd30 	bl	8017174 <dhcp_arp_reply>
    break;
 8018714:	e000      	b.n	8018718 <etharp_input+0x104>
    break;
 8018716:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018718:	6878      	ldr	r0, [r7, #4]
 801871a:	f7f8 f97d 	bl	8010a18 <pbuf_free>
}
 801871e:	3718      	adds	r7, #24
 8018720:	46bd      	mov	sp, r7
 8018722:	bdb0      	pop	{r4, r5, r7, pc}
 8018724:	0801e820 	.word	0x0801e820
 8018728:	0801e998 	.word	0x0801e998
 801872c:	0801e8c0 	.word	0x0801e8c0

08018730 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b086      	sub	sp, #24
 8018734:	af02      	add	r7, sp, #8
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	60b9      	str	r1, [r7, #8]
 801873a:	4613      	mov	r3, r2
 801873c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801873e:	79fa      	ldrb	r2, [r7, #7]
 8018740:	4944      	ldr	r1, [pc, #272]	; (8018854 <etharp_output_to_arp_index+0x124>)
 8018742:	4613      	mov	r3, r2
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	4413      	add	r3, r2
 8018748:	00db      	lsls	r3, r3, #3
 801874a:	440b      	add	r3, r1
 801874c:	3314      	adds	r3, #20
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	2b01      	cmp	r3, #1
 8018752:	d806      	bhi.n	8018762 <etharp_output_to_arp_index+0x32>
 8018754:	4b40      	ldr	r3, [pc, #256]	; (8018858 <etharp_output_to_arp_index+0x128>)
 8018756:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 801875a:	4940      	ldr	r1, [pc, #256]	; (801885c <etharp_output_to_arp_index+0x12c>)
 801875c:	4840      	ldr	r0, [pc, #256]	; (8018860 <etharp_output_to_arp_index+0x130>)
 801875e:	f002 f951 	bl	801aa04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018762:	79fa      	ldrb	r2, [r7, #7]
 8018764:	493b      	ldr	r1, [pc, #236]	; (8018854 <etharp_output_to_arp_index+0x124>)
 8018766:	4613      	mov	r3, r2
 8018768:	005b      	lsls	r3, r3, #1
 801876a:	4413      	add	r3, r2
 801876c:	00db      	lsls	r3, r3, #3
 801876e:	440b      	add	r3, r1
 8018770:	3314      	adds	r3, #20
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	2b02      	cmp	r3, #2
 8018776:	d153      	bne.n	8018820 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018778:	79fa      	ldrb	r2, [r7, #7]
 801877a:	4936      	ldr	r1, [pc, #216]	; (8018854 <etharp_output_to_arp_index+0x124>)
 801877c:	4613      	mov	r3, r2
 801877e:	005b      	lsls	r3, r3, #1
 8018780:	4413      	add	r3, r2
 8018782:	00db      	lsls	r3, r3, #3
 8018784:	440b      	add	r3, r1
 8018786:	3312      	adds	r3, #18
 8018788:	881b      	ldrh	r3, [r3, #0]
 801878a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801878e:	d919      	bls.n	80187c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018790:	79fa      	ldrb	r2, [r7, #7]
 8018792:	4613      	mov	r3, r2
 8018794:	005b      	lsls	r3, r3, #1
 8018796:	4413      	add	r3, r2
 8018798:	00db      	lsls	r3, r3, #3
 801879a:	4a2e      	ldr	r2, [pc, #184]	; (8018854 <etharp_output_to_arp_index+0x124>)
 801879c:	4413      	add	r3, r2
 801879e:	3304      	adds	r3, #4
 80187a0:	4619      	mov	r1, r3
 80187a2:	68f8      	ldr	r0, [r7, #12]
 80187a4:	f000 fb42 	bl	8018e2c <etharp_request>
 80187a8:	4603      	mov	r3, r0
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d138      	bne.n	8018820 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80187ae:	79fa      	ldrb	r2, [r7, #7]
 80187b0:	4928      	ldr	r1, [pc, #160]	; (8018854 <etharp_output_to_arp_index+0x124>)
 80187b2:	4613      	mov	r3, r2
 80187b4:	005b      	lsls	r3, r3, #1
 80187b6:	4413      	add	r3, r2
 80187b8:	00db      	lsls	r3, r3, #3
 80187ba:	440b      	add	r3, r1
 80187bc:	3314      	adds	r3, #20
 80187be:	2203      	movs	r2, #3
 80187c0:	701a      	strb	r2, [r3, #0]
 80187c2:	e02d      	b.n	8018820 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80187c4:	79fa      	ldrb	r2, [r7, #7]
 80187c6:	4923      	ldr	r1, [pc, #140]	; (8018854 <etharp_output_to_arp_index+0x124>)
 80187c8:	4613      	mov	r3, r2
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	4413      	add	r3, r2
 80187ce:	00db      	lsls	r3, r3, #3
 80187d0:	440b      	add	r3, r1
 80187d2:	3312      	adds	r3, #18
 80187d4:	881b      	ldrh	r3, [r3, #0]
 80187d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80187da:	d321      	bcc.n	8018820 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80187dc:	79fa      	ldrb	r2, [r7, #7]
 80187de:	4613      	mov	r3, r2
 80187e0:	005b      	lsls	r3, r3, #1
 80187e2:	4413      	add	r3, r2
 80187e4:	00db      	lsls	r3, r3, #3
 80187e6:	4a1b      	ldr	r2, [pc, #108]	; (8018854 <etharp_output_to_arp_index+0x124>)
 80187e8:	4413      	add	r3, r2
 80187ea:	1d19      	adds	r1, r3, #4
 80187ec:	79fa      	ldrb	r2, [r7, #7]
 80187ee:	4613      	mov	r3, r2
 80187f0:	005b      	lsls	r3, r3, #1
 80187f2:	4413      	add	r3, r2
 80187f4:	00db      	lsls	r3, r3, #3
 80187f6:	3308      	adds	r3, #8
 80187f8:	4a16      	ldr	r2, [pc, #88]	; (8018854 <etharp_output_to_arp_index+0x124>)
 80187fa:	4413      	add	r3, r2
 80187fc:	3304      	adds	r3, #4
 80187fe:	461a      	mov	r2, r3
 8018800:	68f8      	ldr	r0, [r7, #12]
 8018802:	f000 faf1 	bl	8018de8 <etharp_request_dst>
 8018806:	4603      	mov	r3, r0
 8018808:	2b00      	cmp	r3, #0
 801880a:	d109      	bne.n	8018820 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801880c:	79fa      	ldrb	r2, [r7, #7]
 801880e:	4911      	ldr	r1, [pc, #68]	; (8018854 <etharp_output_to_arp_index+0x124>)
 8018810:	4613      	mov	r3, r2
 8018812:	005b      	lsls	r3, r3, #1
 8018814:	4413      	add	r3, r2
 8018816:	00db      	lsls	r3, r3, #3
 8018818:	440b      	add	r3, r1
 801881a:	3314      	adds	r3, #20
 801881c:	2203      	movs	r2, #3
 801881e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8018826:	79fa      	ldrb	r2, [r7, #7]
 8018828:	4613      	mov	r3, r2
 801882a:	005b      	lsls	r3, r3, #1
 801882c:	4413      	add	r3, r2
 801882e:	00db      	lsls	r3, r3, #3
 8018830:	3308      	adds	r3, #8
 8018832:	4a08      	ldr	r2, [pc, #32]	; (8018854 <etharp_output_to_arp_index+0x124>)
 8018834:	4413      	add	r3, r2
 8018836:	3304      	adds	r3, #4
 8018838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801883c:	9200      	str	r2, [sp, #0]
 801883e:	460a      	mov	r2, r1
 8018840:	68b9      	ldr	r1, [r7, #8]
 8018842:	68f8      	ldr	r0, [r7, #12]
 8018844:	f001 fe54 	bl	801a4f0 <ethernet_output>
 8018848:	4603      	mov	r3, r0
}
 801884a:	4618      	mov	r0, r3
 801884c:	3710      	adds	r7, #16
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	2400772c 	.word	0x2400772c
 8018858:	0801e820 	.word	0x0801e820
 801885c:	0801e9b8 	.word	0x0801e9b8
 8018860:	0801e8c0 	.word	0x0801e8c0

08018864 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b08a      	sub	sp, #40	; 0x28
 8018868:	af02      	add	r7, sp, #8
 801886a:	60f8      	str	r0, [r7, #12]
 801886c:	60b9      	str	r1, [r7, #8]
 801886e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d106      	bne.n	8018888 <etharp_output+0x24>
 801887a:	4b69      	ldr	r3, [pc, #420]	; (8018a20 <etharp_output+0x1bc>)
 801887c:	f240 321b 	movw	r2, #795	; 0x31b
 8018880:	4968      	ldr	r1, [pc, #416]	; (8018a24 <etharp_output+0x1c0>)
 8018882:	4869      	ldr	r0, [pc, #420]	; (8018a28 <etharp_output+0x1c4>)
 8018884:	f002 f8be 	bl	801aa04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d106      	bne.n	801889c <etharp_output+0x38>
 801888e:	4b64      	ldr	r3, [pc, #400]	; (8018a20 <etharp_output+0x1bc>)
 8018890:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018894:	4965      	ldr	r1, [pc, #404]	; (8018a2c <etharp_output+0x1c8>)
 8018896:	4864      	ldr	r0, [pc, #400]	; (8018a28 <etharp_output+0x1c4>)
 8018898:	f002 f8b4 	bl	801aa04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d106      	bne.n	80188b0 <etharp_output+0x4c>
 80188a2:	4b5f      	ldr	r3, [pc, #380]	; (8018a20 <etharp_output+0x1bc>)
 80188a4:	f240 321d 	movw	r2, #797	; 0x31d
 80188a8:	4961      	ldr	r1, [pc, #388]	; (8018a30 <etharp_output+0x1cc>)
 80188aa:	485f      	ldr	r0, [pc, #380]	; (8018a28 <etharp_output+0x1c4>)
 80188ac:	f002 f8aa 	bl	801aa04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	68f9      	ldr	r1, [r7, #12]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f000 fef2 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 80188bc:	4603      	mov	r3, r0
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d002      	beq.n	80188c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80188c2:	4b5c      	ldr	r3, [pc, #368]	; (8018a34 <etharp_output+0x1d0>)
 80188c4:	61fb      	str	r3, [r7, #28]
 80188c6:	e09b      	b.n	8018a00 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188d0:	2be0      	cmp	r3, #224	; 0xe0
 80188d2:	d118      	bne.n	8018906 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80188d4:	2301      	movs	r3, #1
 80188d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80188d8:	2300      	movs	r3, #0
 80188da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80188dc:	235e      	movs	r3, #94	; 0x5e
 80188de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	3301      	adds	r3, #1
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	3302      	adds	r3, #2
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	3303      	adds	r3, #3
 80188fa:	781b      	ldrb	r3, [r3, #0]
 80188fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80188fe:	f107 0310 	add.w	r3, r7, #16
 8018902:	61fb      	str	r3, [r7, #28]
 8018904:	e07c      	b.n	8018a00 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681a      	ldr	r2, [r3, #0]
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	3304      	adds	r3, #4
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	405a      	eors	r2, r3
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	3308      	adds	r3, #8
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4013      	ands	r3, r2
 801891a:	2b00      	cmp	r3, #0
 801891c:	d012      	beq.n	8018944 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018924:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018928:	4293      	cmp	r3, r2
 801892a:	d00b      	beq.n	8018944 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	330c      	adds	r3, #12
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d003      	beq.n	801893e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	330c      	adds	r3, #12
 801893a:	61bb      	str	r3, [r7, #24]
 801893c:	e002      	b.n	8018944 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801893e:	f06f 0303 	mvn.w	r3, #3
 8018942:	e069      	b.n	8018a18 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018944:	4b3c      	ldr	r3, [pc, #240]	; (8018a38 <etharp_output+0x1d4>)
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	4619      	mov	r1, r3
 801894a:	4a3c      	ldr	r2, [pc, #240]	; (8018a3c <etharp_output+0x1d8>)
 801894c:	460b      	mov	r3, r1
 801894e:	005b      	lsls	r3, r3, #1
 8018950:	440b      	add	r3, r1
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	4413      	add	r3, r2
 8018956:	3314      	adds	r3, #20
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	2b01      	cmp	r3, #1
 801895c:	d917      	bls.n	801898e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801895e:	69bb      	ldr	r3, [r7, #24]
 8018960:	681a      	ldr	r2, [r3, #0]
 8018962:	4b35      	ldr	r3, [pc, #212]	; (8018a38 <etharp_output+0x1d4>)
 8018964:	781b      	ldrb	r3, [r3, #0]
 8018966:	4618      	mov	r0, r3
 8018968:	4934      	ldr	r1, [pc, #208]	; (8018a3c <etharp_output+0x1d8>)
 801896a:	4603      	mov	r3, r0
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4403      	add	r3, r0
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3304      	adds	r3, #4
 8018976:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018978:	429a      	cmp	r2, r3
 801897a:	d108      	bne.n	801898e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801897c:	4b2e      	ldr	r3, [pc, #184]	; (8018a38 <etharp_output+0x1d4>)
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	461a      	mov	r2, r3
 8018982:	68b9      	ldr	r1, [r7, #8]
 8018984:	68f8      	ldr	r0, [r7, #12]
 8018986:	f7ff fed3 	bl	8018730 <etharp_output_to_arp_index>
 801898a:	4603      	mov	r3, r0
 801898c:	e044      	b.n	8018a18 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801898e:	2300      	movs	r3, #0
 8018990:	75fb      	strb	r3, [r7, #23]
 8018992:	e02a      	b.n	80189ea <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018994:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018998:	4928      	ldr	r1, [pc, #160]	; (8018a3c <etharp_output+0x1d8>)
 801899a:	4613      	mov	r3, r2
 801899c:	005b      	lsls	r3, r3, #1
 801899e:	4413      	add	r3, r2
 80189a0:	00db      	lsls	r3, r3, #3
 80189a2:	440b      	add	r3, r1
 80189a4:	3314      	adds	r3, #20
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	2b01      	cmp	r3, #1
 80189aa:	d918      	bls.n	80189de <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80189ac:	69bb      	ldr	r3, [r7, #24]
 80189ae:	6819      	ldr	r1, [r3, #0]
 80189b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80189b4:	4821      	ldr	r0, [pc, #132]	; (8018a3c <etharp_output+0x1d8>)
 80189b6:	4613      	mov	r3, r2
 80189b8:	005b      	lsls	r3, r3, #1
 80189ba:	4413      	add	r3, r2
 80189bc:	00db      	lsls	r3, r3, #3
 80189be:	4403      	add	r3, r0
 80189c0:	3304      	adds	r3, #4
 80189c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80189c4:	4299      	cmp	r1, r3
 80189c6:	d10a      	bne.n	80189de <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80189c8:	7dfa      	ldrb	r2, [r7, #23]
 80189ca:	4b1b      	ldr	r3, [pc, #108]	; (8018a38 <etharp_output+0x1d4>)
 80189cc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80189ce:	7dfb      	ldrb	r3, [r7, #23]
 80189d0:	461a      	mov	r2, r3
 80189d2:	68b9      	ldr	r1, [r7, #8]
 80189d4:	68f8      	ldr	r0, [r7, #12]
 80189d6:	f7ff feab 	bl	8018730 <etharp_output_to_arp_index>
 80189da:	4603      	mov	r3, r0
 80189dc:	e01c      	b.n	8018a18 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80189de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	3301      	adds	r3, #1
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	75fb      	strb	r3, [r7, #23]
 80189ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80189ee:	2b09      	cmp	r3, #9
 80189f0:	ddd0      	ble.n	8018994 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80189f2:	68ba      	ldr	r2, [r7, #8]
 80189f4:	69b9      	ldr	r1, [r7, #24]
 80189f6:	68f8      	ldr	r0, [r7, #12]
 80189f8:	f000 f822 	bl	8018a40 <etharp_query>
 80189fc:	4603      	mov	r3, r0
 80189fe:	e00b      	b.n	8018a18 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8018a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	68b9      	ldr	r1, [r7, #8]
 8018a10:	68f8      	ldr	r0, [r7, #12]
 8018a12:	f001 fd6d 	bl	801a4f0 <ethernet_output>
 8018a16:	4603      	mov	r3, r0
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3720      	adds	r7, #32
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}
 8018a20:	0801e820 	.word	0x0801e820
 8018a24:	0801e998 	.word	0x0801e998
 8018a28:	0801e8c0 	.word	0x0801e8c0
 8018a2c:	0801e9e8 	.word	0x0801e9e8
 8018a30:	0801e988 	.word	0x0801e988
 8018a34:	0801f220 	.word	0x0801f220
 8018a38:	2400781c 	.word	0x2400781c
 8018a3c:	2400772c 	.word	0x2400772c

08018a40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b08c      	sub	sp, #48	; 0x30
 8018a44:	af02      	add	r7, sp, #8
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	3331      	adds	r3, #49	; 0x31
 8018a50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018a52:	23ff      	movs	r3, #255	; 0xff
 8018a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a5c:	68bb      	ldr	r3, [r7, #8]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	68f9      	ldr	r1, [r7, #12]
 8018a62:	4618      	mov	r0, r3
 8018a64:	f000 fe1c 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d10c      	bne.n	8018a88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a76:	2be0      	cmp	r3, #224	; 0xe0
 8018a78:	d006      	beq.n	8018a88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d003      	beq.n	8018a88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d102      	bne.n	8018a8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018a88:	f06f 030f 	mvn.w	r3, #15
 8018a8c:	e10e      	b.n	8018cac <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	2101      	movs	r1, #1
 8018a92:	68b8      	ldr	r0, [r7, #8]
 8018a94:	f7ff fb9c 	bl	80181d0 <etharp_find_entry>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8018a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	da02      	bge.n	8018aaa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8018aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018aa8:	e100      	b.n	8018cac <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018aaa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018aae:	4981      	ldr	r1, [pc, #516]	; (8018cb4 <etharp_query+0x274>)
 8018ab0:	4613      	mov	r3, r2
 8018ab2:	005b      	lsls	r3, r3, #1
 8018ab4:	4413      	add	r3, r2
 8018ab6:	00db      	lsls	r3, r3, #3
 8018ab8:	440b      	add	r3, r1
 8018aba:	3314      	adds	r3, #20
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d117      	bne.n	8018af2 <etharp_query+0xb2>
    is_new_entry = 1;
 8018ac2:	2301      	movs	r3, #1
 8018ac4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018ac6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018aca:	497a      	ldr	r1, [pc, #488]	; (8018cb4 <etharp_query+0x274>)
 8018acc:	4613      	mov	r3, r2
 8018ace:	005b      	lsls	r3, r3, #1
 8018ad0:	4413      	add	r3, r2
 8018ad2:	00db      	lsls	r3, r3, #3
 8018ad4:	440b      	add	r3, r1
 8018ad6:	3314      	adds	r3, #20
 8018ad8:	2201      	movs	r2, #1
 8018ada:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018adc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018ae0:	4974      	ldr	r1, [pc, #464]	; (8018cb4 <etharp_query+0x274>)
 8018ae2:	4613      	mov	r3, r2
 8018ae4:	005b      	lsls	r3, r3, #1
 8018ae6:	4413      	add	r3, r2
 8018ae8:	00db      	lsls	r3, r3, #3
 8018aea:	440b      	add	r3, r1
 8018aec:	3308      	adds	r3, #8
 8018aee:	68fa      	ldr	r2, [r7, #12]
 8018af0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018af2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018af6:	496f      	ldr	r1, [pc, #444]	; (8018cb4 <etharp_query+0x274>)
 8018af8:	4613      	mov	r3, r2
 8018afa:	005b      	lsls	r3, r3, #1
 8018afc:	4413      	add	r3, r2
 8018afe:	00db      	lsls	r3, r3, #3
 8018b00:	440b      	add	r3, r1
 8018b02:	3314      	adds	r3, #20
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	d012      	beq.n	8018b30 <etharp_query+0xf0>
 8018b0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018b0e:	4969      	ldr	r1, [pc, #420]	; (8018cb4 <etharp_query+0x274>)
 8018b10:	4613      	mov	r3, r2
 8018b12:	005b      	lsls	r3, r3, #1
 8018b14:	4413      	add	r3, r2
 8018b16:	00db      	lsls	r3, r3, #3
 8018b18:	440b      	add	r3, r1
 8018b1a:	3314      	adds	r3, #20
 8018b1c:	781b      	ldrb	r3, [r3, #0]
 8018b1e:	2b01      	cmp	r3, #1
 8018b20:	d806      	bhi.n	8018b30 <etharp_query+0xf0>
 8018b22:	4b65      	ldr	r3, [pc, #404]	; (8018cb8 <etharp_query+0x278>)
 8018b24:	f240 32c7 	movw	r2, #967	; 0x3c7
 8018b28:	4964      	ldr	r1, [pc, #400]	; (8018cbc <etharp_query+0x27c>)
 8018b2a:	4865      	ldr	r0, [pc, #404]	; (8018cc0 <etharp_query+0x280>)
 8018b2c:	f001 ff6a 	bl	801aa04 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018b30:	6a3b      	ldr	r3, [r7, #32]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d102      	bne.n	8018b3c <etharp_query+0xfc>
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d10c      	bne.n	8018b56 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018b3c:	68b9      	ldr	r1, [r7, #8]
 8018b3e:	68f8      	ldr	r0, [r7, #12]
 8018b40:	f000 f974 	bl	8018e2c <etharp_request>
 8018b44:	4603      	mov	r3, r0
 8018b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d102      	bne.n	8018b56 <etharp_query+0x116>
      return result;
 8018b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b54:	e0aa      	b.n	8018cac <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d106      	bne.n	8018b6a <etharp_query+0x12a>
 8018b5c:	4b56      	ldr	r3, [pc, #344]	; (8018cb8 <etharp_query+0x278>)
 8018b5e:	f240 32db 	movw	r2, #987	; 0x3db
 8018b62:	4958      	ldr	r1, [pc, #352]	; (8018cc4 <etharp_query+0x284>)
 8018b64:	4856      	ldr	r0, [pc, #344]	; (8018cc0 <etharp_query+0x280>)
 8018b66:	f001 ff4d 	bl	801aa04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018b6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018b6e:	4951      	ldr	r1, [pc, #324]	; (8018cb4 <etharp_query+0x274>)
 8018b70:	4613      	mov	r3, r2
 8018b72:	005b      	lsls	r3, r3, #1
 8018b74:	4413      	add	r3, r2
 8018b76:	00db      	lsls	r3, r3, #3
 8018b78:	440b      	add	r3, r1
 8018b7a:	3314      	adds	r3, #20
 8018b7c:	781b      	ldrb	r3, [r3, #0]
 8018b7e:	2b01      	cmp	r3, #1
 8018b80:	d918      	bls.n	8018bb4 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8018b82:	7cfa      	ldrb	r2, [r7, #19]
 8018b84:	4b50      	ldr	r3, [pc, #320]	; (8018cc8 <etharp_query+0x288>)
 8018b86:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018b88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	005b      	lsls	r3, r3, #1
 8018b90:	4413      	add	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	3308      	adds	r3, #8
 8018b96:	4a47      	ldr	r2, [pc, #284]	; (8018cb4 <etharp_query+0x274>)
 8018b98:	4413      	add	r3, r2
 8018b9a:	3304      	adds	r3, #4
 8018b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018ba0:	9200      	str	r2, [sp, #0]
 8018ba2:	697a      	ldr	r2, [r7, #20]
 8018ba4:	6879      	ldr	r1, [r7, #4]
 8018ba6:	68f8      	ldr	r0, [r7, #12]
 8018ba8:	f001 fca2 	bl	801a4f0 <ethernet_output>
 8018bac:	4603      	mov	r3, r0
 8018bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bb2:	e079      	b.n	8018ca8 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018bb4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018bb8:	493e      	ldr	r1, [pc, #248]	; (8018cb4 <etharp_query+0x274>)
 8018bba:	4613      	mov	r3, r2
 8018bbc:	005b      	lsls	r3, r3, #1
 8018bbe:	4413      	add	r3, r2
 8018bc0:	00db      	lsls	r3, r3, #3
 8018bc2:	440b      	add	r3, r1
 8018bc4:	3314      	adds	r3, #20
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	2b01      	cmp	r3, #1
 8018bca:	d16d      	bne.n	8018ca8 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018bcc:	2300      	movs	r3, #0
 8018bce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018bd4:	e01a      	b.n	8018c0c <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018bd6:	69fb      	ldr	r3, [r7, #28]
 8018bd8:	895a      	ldrh	r2, [r3, #10]
 8018bda:	69fb      	ldr	r3, [r7, #28]
 8018bdc:	891b      	ldrh	r3, [r3, #8]
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d10a      	bne.n	8018bf8 <etharp_query+0x1b8>
 8018be2:	69fb      	ldr	r3, [r7, #28]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d006      	beq.n	8018bf8 <etharp_query+0x1b8>
 8018bea:	4b33      	ldr	r3, [pc, #204]	; (8018cb8 <etharp_query+0x278>)
 8018bec:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8018bf0:	4936      	ldr	r1, [pc, #216]	; (8018ccc <etharp_query+0x28c>)
 8018bf2:	4833      	ldr	r0, [pc, #204]	; (8018cc0 <etharp_query+0x280>)
 8018bf4:	f001 ff06 	bl	801aa04 <iprintf>
      if (p->type != PBUF_ROM) {
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	7b1b      	ldrb	r3, [r3, #12]
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d002      	beq.n	8018c06 <etharp_query+0x1c6>
        copy_needed = 1;
 8018c00:	2301      	movs	r3, #1
 8018c02:	61bb      	str	r3, [r7, #24]
        break;
 8018c04:	e005      	b.n	8018c12 <etharp_query+0x1d2>
      }
      p = p->next;
 8018c06:	69fb      	ldr	r3, [r7, #28]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018c0c:	69fb      	ldr	r3, [r7, #28]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1e1      	bne.n	8018bd6 <etharp_query+0x196>
    }
    if (copy_needed) {
 8018c12:	69bb      	ldr	r3, [r7, #24]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d017      	beq.n	8018c48 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8018c18:	69fb      	ldr	r3, [r7, #28]
 8018c1a:	891b      	ldrh	r3, [r3, #8]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	4619      	mov	r1, r3
 8018c20:	2002      	movs	r0, #2
 8018c22:	f7f7 fb81 	bl	8010328 <pbuf_alloc>
 8018c26:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8018c28:	69fb      	ldr	r3, [r7, #28]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d011      	beq.n	8018c52 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8018c2e:	6879      	ldr	r1, [r7, #4]
 8018c30:	69f8      	ldr	r0, [r7, #28]
 8018c32:	f7f8 f831 	bl	8010c98 <pbuf_copy>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d00a      	beq.n	8018c52 <etharp_query+0x212>
          pbuf_free(p);
 8018c3c:	69f8      	ldr	r0, [r7, #28]
 8018c3e:	f7f7 feeb 	bl	8010a18 <pbuf_free>
          p = NULL;
 8018c42:	2300      	movs	r3, #0
 8018c44:	61fb      	str	r3, [r7, #28]
 8018c46:	e004      	b.n	8018c52 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018c4c:	69f8      	ldr	r0, [r7, #28]
 8018c4e:	f7f7 ff95 	bl	8010b7c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018c52:	69fb      	ldr	r3, [r7, #28]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d024      	beq.n	8018ca2 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018c58:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c5c:	4915      	ldr	r1, [pc, #84]	; (8018cb4 <etharp_query+0x274>)
 8018c5e:	4613      	mov	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	4413      	add	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	440b      	add	r3, r1
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d00b      	beq.n	8018c86 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8018c6e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c72:	4910      	ldr	r1, [pc, #64]	; (8018cb4 <etharp_query+0x274>)
 8018c74:	4613      	mov	r3, r2
 8018c76:	005b      	lsls	r3, r3, #1
 8018c78:	4413      	add	r3, r2
 8018c7a:	00db      	lsls	r3, r3, #3
 8018c7c:	440b      	add	r3, r1
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7f7 fec9 	bl	8010a18 <pbuf_free>
      }
      arp_table[i].q = p;
 8018c86:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c8a:	490a      	ldr	r1, [pc, #40]	; (8018cb4 <etharp_query+0x274>)
 8018c8c:	4613      	mov	r3, r2
 8018c8e:	005b      	lsls	r3, r3, #1
 8018c90:	4413      	add	r3, r2
 8018c92:	00db      	lsls	r3, r3, #3
 8018c94:	440b      	add	r3, r1
 8018c96:	69fa      	ldr	r2, [r7, #28]
 8018c98:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ca0:	e002      	b.n	8018ca8 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018ca2:	23ff      	movs	r3, #255	; 0xff
 8018ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3728      	adds	r7, #40	; 0x28
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	2400772c 	.word	0x2400772c
 8018cb8:	0801e820 	.word	0x0801e820
 8018cbc:	0801e9f4 	.word	0x0801e9f4
 8018cc0:	0801e8c0 	.word	0x0801e8c0
 8018cc4:	0801e9e8 	.word	0x0801e9e8
 8018cc8:	2400781c 	.word	0x2400781c
 8018ccc:	0801ea1c 	.word	0x0801ea1c

08018cd0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b08a      	sub	sp, #40	; 0x28
 8018cd4:	af02      	add	r7, sp, #8
 8018cd6:	60f8      	str	r0, [r7, #12]
 8018cd8:	60b9      	str	r1, [r7, #8]
 8018cda:	607a      	str	r2, [r7, #4]
 8018cdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018cde:	2300      	movs	r3, #0
 8018ce0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d106      	bne.n	8018cf6 <etharp_raw+0x26>
 8018ce8:	4b3a      	ldr	r3, [pc, #232]	; (8018dd4 <etharp_raw+0x104>)
 8018cea:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8018cee:	493a      	ldr	r1, [pc, #232]	; (8018dd8 <etharp_raw+0x108>)
 8018cf0:	483a      	ldr	r0, [pc, #232]	; (8018ddc <etharp_raw+0x10c>)
 8018cf2:	f001 fe87 	bl	801aa04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	211c      	movs	r1, #28
 8018cfa:	2002      	movs	r0, #2
 8018cfc:	f7f7 fb14 	bl	8010328 <pbuf_alloc>
 8018d00:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018d02:	69bb      	ldr	r3, [r7, #24]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d102      	bne.n	8018d0e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018d08:	f04f 33ff 	mov.w	r3, #4294967295
 8018d0c:	e05d      	b.n	8018dca <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018d0e:	69bb      	ldr	r3, [r7, #24]
 8018d10:	895b      	ldrh	r3, [r3, #10]
 8018d12:	2b1b      	cmp	r3, #27
 8018d14:	d806      	bhi.n	8018d24 <etharp_raw+0x54>
 8018d16:	4b2f      	ldr	r3, [pc, #188]	; (8018dd4 <etharp_raw+0x104>)
 8018d18:	f240 4263 	movw	r2, #1123	; 0x463
 8018d1c:	4930      	ldr	r1, [pc, #192]	; (8018de0 <etharp_raw+0x110>)
 8018d1e:	482f      	ldr	r0, [pc, #188]	; (8018ddc <etharp_raw+0x10c>)
 8018d20:	f001 fe70 	bl	801aa04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018d2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7f6 fbfb 	bl	800f528 <lwip_htons>
 8018d32:	4603      	mov	r3, r0
 8018d34:	461a      	mov	r2, r3
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018d40:	2b06      	cmp	r3, #6
 8018d42:	d006      	beq.n	8018d52 <etharp_raw+0x82>
 8018d44:	4b23      	ldr	r3, [pc, #140]	; (8018dd4 <etharp_raw+0x104>)
 8018d46:	f240 426a 	movw	r2, #1130	; 0x46a
 8018d4a:	4926      	ldr	r1, [pc, #152]	; (8018de4 <etharp_raw+0x114>)
 8018d4c:	4823      	ldr	r0, [pc, #140]	; (8018ddc <etharp_raw+0x10c>)
 8018d4e:	f001 fe59 	bl	801aa04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8018d52:	697b      	ldr	r3, [r7, #20]
 8018d54:	3308      	adds	r3, #8
 8018d56:	2206      	movs	r2, #6
 8018d58:	6839      	ldr	r1, [r7, #0]
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f001 fe3c 	bl	801a9d8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	3312      	adds	r3, #18
 8018d64:	2206      	movs	r2, #6
 8018d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f001 fe35 	bl	801a9d8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	330e      	adds	r3, #14
 8018d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d74:	6812      	ldr	r2, [r2, #0]
 8018d76:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8018d78:	697b      	ldr	r3, [r7, #20]
 8018d7a:	3318      	adds	r3, #24
 8018d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d7e:	6812      	ldr	r2, [r2, #0]
 8018d80:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8018d82:	697b      	ldr	r3, [r7, #20]
 8018d84:	2200      	movs	r2, #0
 8018d86:	701a      	strb	r2, [r3, #0]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	f042 0201 	orr.w	r2, r2, #1
 8018d8e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	2200      	movs	r2, #0
 8018d94:	f042 0208 	orr.w	r2, r2, #8
 8018d98:	709a      	strb	r2, [r3, #2]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2206      	movs	r2, #6
 8018da2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	2204      	movs	r2, #4
 8018da8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018daa:	f640 0306 	movw	r3, #2054	; 0x806
 8018dae:	9300      	str	r3, [sp, #0]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	68ba      	ldr	r2, [r7, #8]
 8018db4:	69b9      	ldr	r1, [r7, #24]
 8018db6:	68f8      	ldr	r0, [r7, #12]
 8018db8:	f001 fb9a 	bl	801a4f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018dbc:	69b8      	ldr	r0, [r7, #24]
 8018dbe:	f7f7 fe2b 	bl	8010a18 <pbuf_free>
  p = NULL;
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018dc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3720      	adds	r7, #32
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}
 8018dd2:	bf00      	nop
 8018dd4:	0801e820 	.word	0x0801e820
 8018dd8:	0801e998 	.word	0x0801e998
 8018ddc:	0801e8c0 	.word	0x0801e8c0
 8018de0:	0801ea38 	.word	0x0801ea38
 8018de4:	0801ea6c 	.word	0x0801ea6c

08018de8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b088      	sub	sp, #32
 8018dec:	af04      	add	r7, sp, #16
 8018dee:	60f8      	str	r0, [r7, #12]
 8018df0:	60b9      	str	r1, [r7, #8]
 8018df2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	f103 0131 	add.w	r1, r3, #49	; 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	f103 0031 	add.w	r0, r3, #49	; 0x31
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e04:	2201      	movs	r2, #1
 8018e06:	9203      	str	r2, [sp, #12]
 8018e08:	68ba      	ldr	r2, [r7, #8]
 8018e0a:	9202      	str	r2, [sp, #8]
 8018e0c:	4a06      	ldr	r2, [pc, #24]	; (8018e28 <etharp_request_dst+0x40>)
 8018e0e:	9201      	str	r2, [sp, #4]
 8018e10:	9300      	str	r3, [sp, #0]
 8018e12:	4603      	mov	r3, r0
 8018e14:	687a      	ldr	r2, [r7, #4]
 8018e16:	68f8      	ldr	r0, [r7, #12]
 8018e18:	f7ff ff5a 	bl	8018cd0 <etharp_raw>
 8018e1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	0801f228 	.word	0x0801f228

08018e2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
 8018e34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018e36:	4a05      	ldr	r2, [pc, #20]	; (8018e4c <etharp_request+0x20>)
 8018e38:	6839      	ldr	r1, [r7, #0]
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7ff ffd4 	bl	8018de8 <etharp_request_dst>
 8018e40:	4603      	mov	r3, r0
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3708      	adds	r7, #8
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	0801f220 	.word	0x0801f220

08018e50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b08e      	sub	sp, #56	; 0x38
 8018e54:	af04      	add	r7, sp, #16
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018e5a:	4b7a      	ldr	r3, [pc, #488]	; (8019044 <icmp_input+0x1f4>)
 8018e5c:	689b      	ldr	r3, [r3, #8]
 8018e5e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8018e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	f003 030f 	and.w	r3, r3, #15
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	009b      	lsls	r3, r3, #2
 8018e6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018e72:	2b13      	cmp	r3, #19
 8018e74:	f240 80d1 	bls.w	801901a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	895b      	ldrh	r3, [r3, #10]
 8018e7c:	2b03      	cmp	r3, #3
 8018e7e:	f240 80ce 	bls.w	801901e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018e8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	f000 80bb 	beq.w	801900c <icmp_input+0x1bc>
 8018e96:	2b08      	cmp	r3, #8
 8018e98:	f040 80bb 	bne.w	8019012 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8018e9c:	4b6a      	ldr	r3, [pc, #424]	; (8019048 <icmp_input+0x1f8>)
 8018e9e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ea0:	4b68      	ldr	r3, [pc, #416]	; (8019044 <icmp_input+0x1f4>)
 8018ea2:	695b      	ldr	r3, [r3, #20]
 8018ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ea8:	2be0      	cmp	r3, #224	; 0xe0
 8018eaa:	f000 80bf 	beq.w	801902c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018eae:	4b65      	ldr	r3, [pc, #404]	; (8019044 <icmp_input+0x1f4>)
 8018eb0:	695b      	ldr	r3, [r3, #20]
 8018eb2:	4a64      	ldr	r2, [pc, #400]	; (8019044 <icmp_input+0x1f4>)
 8018eb4:	6812      	ldr	r2, [r2, #0]
 8018eb6:	4611      	mov	r1, r2
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f000 fbf1 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	f040 80b5 	bne.w	8019030 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	891b      	ldrh	r3, [r3, #8]
 8018eca:	2b07      	cmp	r3, #7
 8018ecc:	f240 80a9 	bls.w	8019022 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ed2:	330e      	adds	r3, #14
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	b21b      	sxth	r3, r3
 8018ed8:	4619      	mov	r1, r3
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7f7 fd78 	bl	80109d0 <pbuf_header>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d046      	beq.n	8018f74 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	891a      	ldrh	r2, [r3, #8]
 8018eea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018eec:	4413      	add	r3, r2
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	2002      	movs	r0, #2
 8018ef6:	f7f7 fa17 	bl	8010328 <pbuf_alloc>
 8018efa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8018efc:	69bb      	ldr	r3, [r7, #24]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f000 8098 	beq.w	8019034 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018f04:	69bb      	ldr	r3, [r7, #24]
 8018f06:	895b      	ldrh	r3, [r3, #10]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f0c:	3308      	adds	r3, #8
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d203      	bcs.n	8018f1a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8018f12:	69b8      	ldr	r0, [r7, #24]
 8018f14:	f7f7 fd80 	bl	8010a18 <pbuf_free>
        goto icmperr;
 8018f18:	e08d      	b.n	8019036 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8018f1a:	69bb      	ldr	r3, [r7, #24]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f22:	4618      	mov	r0, r3
 8018f24:	f001 fd58 	bl	801a9d8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8018f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f2a:	425b      	negs	r3, r3
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	b21b      	sxth	r3, r3
 8018f30:	4619      	mov	r1, r3
 8018f32:	69b8      	ldr	r0, [r7, #24]
 8018f34:	f7f7 fd4c 	bl	80109d0 <pbuf_header>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d009      	beq.n	8018f52 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018f3e:	4b43      	ldr	r3, [pc, #268]	; (801904c <icmp_input+0x1fc>)
 8018f40:	22af      	movs	r2, #175	; 0xaf
 8018f42:	4943      	ldr	r1, [pc, #268]	; (8019050 <icmp_input+0x200>)
 8018f44:	4843      	ldr	r0, [pc, #268]	; (8019054 <icmp_input+0x204>)
 8018f46:	f001 fd5d 	bl	801aa04 <iprintf>
        pbuf_free(r);
 8018f4a:	69b8      	ldr	r0, [r7, #24]
 8018f4c:	f7f7 fd64 	bl	8010a18 <pbuf_free>
        goto icmperr;
 8018f50:	e071      	b.n	8019036 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8018f52:	6879      	ldr	r1, [r7, #4]
 8018f54:	69b8      	ldr	r0, [r7, #24]
 8018f56:	f7f7 fe9f 	bl	8010c98 <pbuf_copy>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d003      	beq.n	8018f68 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8018f60:	69b8      	ldr	r0, [r7, #24]
 8018f62:	f7f7 fd59 	bl	8010a18 <pbuf_free>
        goto icmperr;
 8018f66:	e066      	b.n	8019036 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f7f7 fd55 	bl	8010a18 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8018f6e:	69bb      	ldr	r3, [r7, #24]
 8018f70:	607b      	str	r3, [r7, #4]
 8018f72:	e015      	b.n	8018fa0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018f74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f76:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8018f7a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8018f7e:	33f2      	adds	r3, #242	; 0xf2
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	b21b      	sxth	r3, r3
 8018f84:	4619      	mov	r1, r3
 8018f86:	6878      	ldr	r0, [r7, #4]
 8018f88:	f7f7 fd22 	bl	80109d0 <pbuf_header>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d006      	beq.n	8018fa0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018f92:	4b2e      	ldr	r3, [pc, #184]	; (801904c <icmp_input+0x1fc>)
 8018f94:	22c0      	movs	r2, #192	; 0xc0
 8018f96:	4930      	ldr	r1, [pc, #192]	; (8019058 <icmp_input+0x208>)
 8018f98:	482e      	ldr	r0, [pc, #184]	; (8019054 <icmp_input+0x204>)
 8018f9a:	f001 fd33 	bl	801aa04 <iprintf>
        goto icmperr;
 8018f9e:	e04a      	b.n	8019036 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	685b      	ldr	r3, [r3, #4]
 8018fa4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8018fa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018faa:	4619      	mov	r1, r3
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7f7 fd0f 	bl	80109d0 <pbuf_header>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d12b      	bne.n	8019010 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8018fbe:	69fb      	ldr	r3, [r7, #28]
 8018fc0:	681a      	ldr	r2, [r3, #0]
 8018fc2:	693b      	ldr	r3, [r7, #16]
 8018fc4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018fc6:	4b1f      	ldr	r3, [pc, #124]	; (8019044 <icmp_input+0x1f4>)
 8018fc8:	691a      	ldr	r2, [r3, #16]
 8018fca:	693b      	ldr	r3, [r7, #16]
 8018fcc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	709a      	strb	r2, [r3, #2]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	22ff      	movs	r2, #255	; 0xff
 8018fe2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8018fe4:	693b      	ldr	r3, [r7, #16]
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	729a      	strb	r2, [r3, #10]
 8018fea:	2200      	movs	r2, #0
 8018fec:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	9302      	str	r3, [sp, #8]
 8018ff2:	2301      	movs	r3, #1
 8018ff4:	9301      	str	r3, [sp, #4]
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	9300      	str	r3, [sp, #0]
 8018ffa:	23ff      	movs	r3, #255	; 0xff
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	69f9      	ldr	r1, [r7, #28]
 8019000:	6878      	ldr	r0, [r7, #4]
 8019002:	f000 fa7b 	bl	80194fc <ip4_output_if>
 8019006:	4603      	mov	r3, r0
 8019008:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801900a:	e001      	b.n	8019010 <icmp_input+0x1c0>
    break;
 801900c:	bf00      	nop
 801900e:	e000      	b.n	8019012 <icmp_input+0x1c2>
    break;
 8019010:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019012:	6878      	ldr	r0, [r7, #4]
 8019014:	f7f7 fd00 	bl	8010a18 <pbuf_free>
  return;
 8019018:	e011      	b.n	801903e <icmp_input+0x1ee>
    goto lenerr;
 801901a:	bf00      	nop
 801901c:	e002      	b.n	8019024 <icmp_input+0x1d4>
    goto lenerr;
 801901e:	bf00      	nop
 8019020:	e000      	b.n	8019024 <icmp_input+0x1d4>
      goto lenerr;
 8019022:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f7f7 fcf7 	bl	8010a18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801902a:	e008      	b.n	801903e <icmp_input+0x1ee>
      goto icmperr;
 801902c:	bf00      	nop
 801902e:	e002      	b.n	8019036 <icmp_input+0x1e6>
      goto icmperr;
 8019030:	bf00      	nop
 8019032:	e000      	b.n	8019036 <icmp_input+0x1e6>
        goto icmperr;
 8019034:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019036:	6878      	ldr	r0, [r7, #4]
 8019038:	f7f7 fcee 	bl	8010a18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801903c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801903e:	3728      	adds	r7, #40	; 0x28
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	240045a8 	.word	0x240045a8
 8019048:	240045bc 	.word	0x240045bc
 801904c:	0801eab0 	.word	0x0801eab0
 8019050:	0801eb0c 	.word	0x0801eb0c
 8019054:	0801eb44 	.word	0x0801eb44
 8019058:	0801eb6c 	.word	0x0801eb6c

0801905c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	460b      	mov	r3, r1
 8019066:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019068:	78fb      	ldrb	r3, [r7, #3]
 801906a:	461a      	mov	r2, r3
 801906c:	2103      	movs	r1, #3
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f000 f814 	bl	801909c <icmp_send_response>
}
 8019074:	bf00      	nop
 8019076:	3708      	adds	r7, #8
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b082      	sub	sp, #8
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	460b      	mov	r3, r1
 8019086:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019088:	78fb      	ldrb	r3, [r7, #3]
 801908a:	461a      	mov	r2, r3
 801908c:	210b      	movs	r1, #11
 801908e:	6878      	ldr	r0, [r7, #4]
 8019090:	f000 f804 	bl	801909c <icmp_send_response>
}
 8019094:	bf00      	nop
 8019096:	3708      	adds	r7, #8
 8019098:	46bd      	mov	sp, r7
 801909a:	bd80      	pop	{r7, pc}

0801909c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b08c      	sub	sp, #48	; 0x30
 80190a0:	af04      	add	r7, sp, #16
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	460b      	mov	r3, r1
 80190a6:	70fb      	strb	r3, [r7, #3]
 80190a8:	4613      	mov	r3, r2
 80190aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80190ac:	2200      	movs	r2, #0
 80190ae:	2124      	movs	r1, #36	; 0x24
 80190b0:	2001      	movs	r0, #1
 80190b2:	f7f7 f939 	bl	8010328 <pbuf_alloc>
 80190b6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80190b8:	69fb      	ldr	r3, [r7, #28]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d04c      	beq.n	8019158 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	895b      	ldrh	r3, [r3, #10]
 80190c2:	2b23      	cmp	r3, #35	; 0x23
 80190c4:	d806      	bhi.n	80190d4 <icmp_send_response+0x38>
 80190c6:	4b26      	ldr	r3, [pc, #152]	; (8019160 <icmp_send_response+0xc4>)
 80190c8:	f240 1261 	movw	r2, #353	; 0x161
 80190cc:	4925      	ldr	r1, [pc, #148]	; (8019164 <icmp_send_response+0xc8>)
 80190ce:	4826      	ldr	r0, [pc, #152]	; (8019168 <icmp_send_response+0xcc>)
 80190d0:	f001 fc98 	bl	801aa04 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80190da:	69fb      	ldr	r3, [r7, #28]
 80190dc:	685b      	ldr	r3, [r3, #4]
 80190de:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	78fa      	ldrb	r2, [r7, #3]
 80190e4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	78ba      	ldrb	r2, [r7, #2]
 80190ea:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	2200      	movs	r2, #0
 80190f0:	711a      	strb	r2, [r3, #4]
 80190f2:	2200      	movs	r2, #0
 80190f4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	2200      	movs	r2, #0
 80190fa:	719a      	strb	r2, [r3, #6]
 80190fc:	2200      	movs	r2, #0
 80190fe:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019100:	69fb      	ldr	r3, [r7, #28]
 8019102:	685b      	ldr	r3, [r3, #4]
 8019104:	f103 0008 	add.w	r0, r3, #8
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	221c      	movs	r2, #28
 801910e:	4619      	mov	r1, r3
 8019110:	f001 fc62 	bl	801a9d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019114:	69bb      	ldr	r3, [r7, #24]
 8019116:	68db      	ldr	r3, [r3, #12]
 8019118:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801911a:	f107 030c 	add.w	r3, r7, #12
 801911e:	4618      	mov	r0, r3
 8019120:	f000 f824 	bl	801916c <ip4_route>
 8019124:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d011      	beq.n	8019150 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	2200      	movs	r2, #0
 8019130:	709a      	strb	r2, [r3, #2]
 8019132:	2200      	movs	r2, #0
 8019134:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019136:	f107 020c 	add.w	r2, r7, #12
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	9302      	str	r3, [sp, #8]
 801913e:	2301      	movs	r3, #1
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	2300      	movs	r3, #0
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	23ff      	movs	r3, #255	; 0xff
 8019148:	2100      	movs	r1, #0
 801914a:	69f8      	ldr	r0, [r7, #28]
 801914c:	f000 f9d6 	bl	80194fc <ip4_output_if>
  }
  pbuf_free(q);
 8019150:	69f8      	ldr	r0, [r7, #28]
 8019152:	f7f7 fc61 	bl	8010a18 <pbuf_free>
 8019156:	e000      	b.n	801915a <icmp_send_response+0xbe>
    return;
 8019158:	bf00      	nop
}
 801915a:	3720      	adds	r7, #32
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	0801eab0 	.word	0x0801eab0
 8019164:	0801eba0 	.word	0x0801eba0
 8019168:	0801eb44 	.word	0x0801eb44

0801916c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801916c:	b480      	push	{r7}
 801916e:	b085      	sub	sp, #20
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8019174:	4b30      	ldr	r3, [pc, #192]	; (8019238 <ip4_route+0xcc>)
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	60fb      	str	r3, [r7, #12]
 801917a:	e036      	b.n	80191ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019182:	f003 0301 	and.w	r3, r3, #1
 8019186:	b2db      	uxtb	r3, r3
 8019188:	2b00      	cmp	r3, #0
 801918a:	d02b      	beq.n	80191e4 <ip4_route+0x78>
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019192:	089b      	lsrs	r3, r3, #2
 8019194:	f003 0301 	and.w	r3, r3, #1
 8019198:	b2db      	uxtb	r3, r3
 801919a:	2b00      	cmp	r3, #0
 801919c:	d022      	beq.n	80191e4 <ip4_route+0x78>
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	3304      	adds	r3, #4
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d01d      	beq.n	80191e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681a      	ldr	r2, [r3, #0]
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	3304      	adds	r3, #4
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	405a      	eors	r2, r3
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	3308      	adds	r3, #8
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	4013      	ands	r3, r2
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d101      	bne.n	80191c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	e033      	b.n	801922c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80191ca:	f003 0302 	and.w	r3, r3, #2
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d108      	bne.n	80191e4 <ip4_route+0x78>
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681a      	ldr	r2, [r3, #0]
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	330c      	adds	r3, #12
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d101      	bne.n	80191e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	e023      	b.n	801922c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	60fb      	str	r3, [r7, #12]
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d1c5      	bne.n	801917c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80191f0:	4b12      	ldr	r3, [pc, #72]	; (801923c <ip4_route+0xd0>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d015      	beq.n	8019224 <ip4_route+0xb8>
 80191f8:	4b10      	ldr	r3, [pc, #64]	; (801923c <ip4_route+0xd0>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019200:	f003 0301 	and.w	r3, r3, #1
 8019204:	2b00      	cmp	r3, #0
 8019206:	d00d      	beq.n	8019224 <ip4_route+0xb8>
 8019208:	4b0c      	ldr	r3, [pc, #48]	; (801923c <ip4_route+0xd0>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019210:	f003 0304 	and.w	r3, r3, #4
 8019214:	2b00      	cmp	r3, #0
 8019216:	d005      	beq.n	8019224 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8019218:	4b08      	ldr	r3, [pc, #32]	; (801923c <ip4_route+0xd0>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	3304      	adds	r3, #4
 801921e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019220:	2b00      	cmp	r3, #0
 8019222:	d101      	bne.n	8019228 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019224:	2300      	movs	r3, #0
 8019226:	e001      	b.n	801922c <ip4_route+0xc0>
  }

  return netif_default;
 8019228:	4b04      	ldr	r3, [pc, #16]	; (801923c <ip4_route+0xd0>)
 801922a:	681b      	ldr	r3, [r3, #0]
}
 801922c:	4618      	mov	r0, r3
 801922e:	3714      	adds	r7, #20
 8019230:	46bd      	mov	sp, r7
 8019232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019236:	4770      	bx	lr
 8019238:	240076b8 	.word	0x240076b8
 801923c:	240076bc 	.word	0x240076bc

08019240 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b088      	sub	sp, #32
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801924a:	2301      	movs	r3, #1
 801924c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	685b      	ldr	r3, [r3, #4]
 8019252:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019254:	69fb      	ldr	r3, [r7, #28]
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	091b      	lsrs	r3, r3, #4
 801925a:	b2db      	uxtb	r3, r3
 801925c:	2b04      	cmp	r3, #4
 801925e:	d004      	beq.n	801926a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7f7 fbd9 	bl	8010a18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019266:	2300      	movs	r3, #0
 8019268:	e140      	b.n	80194ec <ip4_input+0x2ac>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801926a:	69fb      	ldr	r3, [r7, #28]
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	b29b      	uxth	r3, r3
 8019270:	f003 030f 	and.w	r3, r3, #15
 8019274:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8019276:	89fb      	ldrh	r3, [r7, #14]
 8019278:	009b      	lsls	r3, r3, #2
 801927a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801927c:	69fb      	ldr	r3, [r7, #28]
 801927e:	885b      	ldrh	r3, [r3, #2]
 8019280:	b29b      	uxth	r3, r3
 8019282:	4618      	mov	r0, r3
 8019284:	f7f6 f950 	bl	800f528 <lwip_htons>
 8019288:	4603      	mov	r3, r0
 801928a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	891b      	ldrh	r3, [r3, #8]
 8019290:	89ba      	ldrh	r2, [r7, #12]
 8019292:	429a      	cmp	r2, r3
 8019294:	d204      	bcs.n	80192a0 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8019296:	89bb      	ldrh	r3, [r7, #12]
 8019298:	4619      	mov	r1, r3
 801929a:	6878      	ldr	r0, [r7, #4]
 801929c:	f7f7 fa48 	bl	8010730 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	895b      	ldrh	r3, [r3, #10]
 80192a4:	89fa      	ldrh	r2, [r7, #14]
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d807      	bhi.n	80192ba <ip4_input+0x7a>
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	891b      	ldrh	r3, [r3, #8]
 80192ae:	89ba      	ldrh	r2, [r7, #12]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d802      	bhi.n	80192ba <ip4_input+0x7a>
 80192b4:	89fb      	ldrh	r3, [r7, #14]
 80192b6:	2b13      	cmp	r3, #19
 80192b8:	d804      	bhi.n	80192c4 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f7f7 fbac 	bl	8010a18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80192c0:	2300      	movs	r3, #0
 80192c2:	e113      	b.n	80194ec <ip4_input+0x2ac>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80192c4:	69fb      	ldr	r3, [r7, #28]
 80192c6:	691b      	ldr	r3, [r3, #16]
 80192c8:	4a8a      	ldr	r2, [pc, #552]	; (80194f4 <ip4_input+0x2b4>)
 80192ca:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80192cc:	69fb      	ldr	r3, [r7, #28]
 80192ce:	68db      	ldr	r3, [r3, #12]
 80192d0:	4a88      	ldr	r2, [pc, #544]	; (80194f4 <ip4_input+0x2b4>)
 80192d2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80192d4:	4b87      	ldr	r3, [pc, #540]	; (80194f4 <ip4_input+0x2b4>)
 80192d6:	695b      	ldr	r3, [r3, #20]
 80192d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80192dc:	2be0      	cmp	r3, #224	; 0xe0
 80192de:	d112      	bne.n	8019306 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80192e6:	f003 0301 	and.w	r3, r3, #1
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d007      	beq.n	8019300 <ip4_input+0xc0>
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	3304      	adds	r3, #4
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d002      	beq.n	8019300 <ip4_input+0xc0>
      netif = inp;
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	61bb      	str	r3, [r7, #24]
 80192fe:	e041      	b.n	8019384 <ip4_input+0x144>
    } else {
      netif = NULL;
 8019300:	2300      	movs	r3, #0
 8019302:	61bb      	str	r3, [r7, #24]
 8019304:	e03e      	b.n	8019384 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8019306:	2301      	movs	r3, #1
 8019308:	613b      	str	r3, [r7, #16]
    netif = inp;
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801930e:	69bb      	ldr	r3, [r7, #24]
 8019310:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019314:	f003 0301 	and.w	r3, r3, #1
 8019318:	b2db      	uxtb	r3, r3
 801931a:	2b00      	cmp	r3, #0
 801931c:	d014      	beq.n	8019348 <ip4_input+0x108>
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	3304      	adds	r3, #4
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d00f      	beq.n	8019348 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019328:	4b72      	ldr	r3, [pc, #456]	; (80194f4 <ip4_input+0x2b4>)
 801932a:	695a      	ldr	r2, [r3, #20]
 801932c:	69bb      	ldr	r3, [r7, #24]
 801932e:	3304      	adds	r3, #4
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	429a      	cmp	r2, r3
 8019334:	d026      	beq.n	8019384 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019336:	4b6f      	ldr	r3, [pc, #444]	; (80194f4 <ip4_input+0x2b4>)
 8019338:	695b      	ldr	r3, [r3, #20]
 801933a:	69b9      	ldr	r1, [r7, #24]
 801933c:	4618      	mov	r0, r3
 801933e:	f000 f9af 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 8019342:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019344:	2b00      	cmp	r3, #0
 8019346:	d11d      	bne.n	8019384 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8019348:	693b      	ldr	r3, [r7, #16]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d00d      	beq.n	801936a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801934e:	4b69      	ldr	r3, [pc, #420]	; (80194f4 <ip4_input+0x2b4>)
 8019350:	695b      	ldr	r3, [r3, #20]
 8019352:	b2db      	uxtb	r3, r3
 8019354:	2b7f      	cmp	r3, #127	; 0x7f
 8019356:	d102      	bne.n	801935e <ip4_input+0x11e>
          netif = NULL;
 8019358:	2300      	movs	r3, #0
 801935a:	61bb      	str	r3, [r7, #24]
          break;
 801935c:	e012      	b.n	8019384 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801935e:	2300      	movs	r3, #0
 8019360:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8019362:	4b65      	ldr	r3, [pc, #404]	; (80194f8 <ip4_input+0x2b8>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	61bb      	str	r3, [r7, #24]
 8019368:	e002      	b.n	8019370 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801936a:	69bb      	ldr	r3, [r7, #24]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8019370:	69ba      	ldr	r2, [r7, #24]
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	429a      	cmp	r2, r3
 8019376:	d102      	bne.n	801937e <ip4_input+0x13e>
        netif = netif->next;
 8019378:	69bb      	ldr	r3, [r7, #24]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801937e:	69bb      	ldr	r3, [r7, #24]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d1c4      	bne.n	801930e <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019384:	69bb      	ldr	r3, [r7, #24]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d111      	bne.n	80193ae <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801938a:	69fb      	ldr	r3, [r7, #28]
 801938c:	7a5b      	ldrb	r3, [r3, #9]
 801938e:	2b11      	cmp	r3, #17
 8019390:	d10d      	bne.n	80193ae <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8019392:	89fb      	ldrh	r3, [r7, #14]
 8019394:	69fa      	ldr	r2, [r7, #28]
 8019396:	4413      	add	r3, r2
 8019398:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	885b      	ldrh	r3, [r3, #2]
 801939e:	b29b      	uxth	r3, r3
 80193a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80193a4:	d103      	bne.n	80193ae <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80193aa:	2300      	movs	r3, #0
 80193ac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80193ae:	697b      	ldr	r3, [r7, #20]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d017      	beq.n	80193e4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80193b4:	4b4f      	ldr	r3, [pc, #316]	; (80194f4 <ip4_input+0x2b4>)
 80193b6:	691b      	ldr	r3, [r3, #16]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d013      	beq.n	80193e4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80193bc:	4b4d      	ldr	r3, [pc, #308]	; (80194f4 <ip4_input+0x2b4>)
 80193be:	691b      	ldr	r3, [r3, #16]
 80193c0:	6839      	ldr	r1, [r7, #0]
 80193c2:	4618      	mov	r0, r3
 80193c4:	f000 f96c 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d105      	bne.n	80193da <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80193ce:	4b49      	ldr	r3, [pc, #292]	; (80194f4 <ip4_input+0x2b4>)
 80193d0:	691b      	ldr	r3, [r3, #16]
 80193d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80193d6:	2be0      	cmp	r3, #224	; 0xe0
 80193d8:	d104      	bne.n	80193e4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f7f7 fb1c 	bl	8010a18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80193e0:	2300      	movs	r3, #0
 80193e2:	e083      	b.n	80194ec <ip4_input+0x2ac>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80193e4:	69bb      	ldr	r3, [r7, #24]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d104      	bne.n	80193f4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80193ea:	6878      	ldr	r0, [r7, #4]
 80193ec:	f7f7 fb14 	bl	8010a18 <pbuf_free>
    return ERR_OK;
 80193f0:	2300      	movs	r3, #0
 80193f2:	e07b      	b.n	80194ec <ip4_input+0x2ac>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80193f4:	69fb      	ldr	r3, [r7, #28]
 80193f6:	88db      	ldrh	r3, [r3, #6]
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	461a      	mov	r2, r3
 80193fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019400:	4013      	ands	r3, r2
 8019402:	2b00      	cmp	r3, #0
 8019404:	d00b      	beq.n	801941e <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f000 fd10 	bl	8019e2c <ip4_reass>
 801940c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d101      	bne.n	8019418 <ip4_input+0x1d8>
      return ERR_OK;
 8019414:	2300      	movs	r3, #0
 8019416:	e069      	b.n	80194ec <ip4_input+0x2ac>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801941e:	4a35      	ldr	r2, [pc, #212]	; (80194f4 <ip4_input+0x2b4>)
 8019420:	69bb      	ldr	r3, [r7, #24]
 8019422:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019424:	4a33      	ldr	r2, [pc, #204]	; (80194f4 <ip4_input+0x2b4>)
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801942a:	4a32      	ldr	r2, [pc, #200]	; (80194f4 <ip4_input+0x2b4>)
 801942c:	69fb      	ldr	r3, [r7, #28]
 801942e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8019430:	69fb      	ldr	r3, [r7, #28]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	b29b      	uxth	r3, r3
 8019436:	f003 030f 	and.w	r3, r3, #15
 801943a:	b29b      	uxth	r3, r3
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	b29a      	uxth	r2, r3
 8019440:	4b2c      	ldr	r3, [pc, #176]	; (80194f4 <ip4_input+0x2b4>)
 8019442:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8019444:	89fb      	ldrh	r3, [r7, #14]
 8019446:	425b      	negs	r3, r3
 8019448:	b29b      	uxth	r3, r3
 801944a:	b21b      	sxth	r3, r3
 801944c:	4619      	mov	r1, r3
 801944e:	6878      	ldr	r0, [r7, #4]
 8019450:	f7f7 fabe 	bl	80109d0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	7a5b      	ldrb	r3, [r3, #9]
 8019458:	2b11      	cmp	r3, #17
 801945a:	d006      	beq.n	801946a <ip4_input+0x22a>
 801945c:	2b11      	cmp	r3, #17
 801945e:	dc13      	bgt.n	8019488 <ip4_input+0x248>
 8019460:	2b01      	cmp	r3, #1
 8019462:	d00c      	beq.n	801947e <ip4_input+0x23e>
 8019464:	2b06      	cmp	r3, #6
 8019466:	d005      	beq.n	8019474 <ip4_input+0x234>
 8019468:	e00e      	b.n	8019488 <ip4_input+0x248>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801946a:	6839      	ldr	r1, [r7, #0]
 801946c:	6878      	ldr	r0, [r7, #4]
 801946e:	f7fd f985 	bl	801677c <udp_input>
      break;
 8019472:	e028      	b.n	80194c6 <ip4_input+0x286>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8019474:	6839      	ldr	r1, [r7, #0]
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f7f9 f9b4 	bl	80127e4 <tcp_input>
      break;
 801947c:	e023      	b.n	80194c6 <ip4_input+0x286>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801947e:	6839      	ldr	r1, [r7, #0]
 8019480:	6878      	ldr	r0, [r7, #4]
 8019482:	f7ff fce5 	bl	8018e50 <icmp_input>
      break;
 8019486:	e01e      	b.n	80194c6 <ip4_input+0x286>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019488:	4b1a      	ldr	r3, [pc, #104]	; (80194f4 <ip4_input+0x2b4>)
 801948a:	695b      	ldr	r3, [r3, #20]
 801948c:	69b9      	ldr	r1, [r7, #24]
 801948e:	4618      	mov	r0, r3
 8019490:	f000 f906 	bl	80196a0 <ip4_addr_isbroadcast_u32>
 8019494:	4603      	mov	r3, r0
 8019496:	2b00      	cmp	r3, #0
 8019498:	d112      	bne.n	80194c0 <ip4_input+0x280>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801949a:	4b16      	ldr	r3, [pc, #88]	; (80194f4 <ip4_input+0x2b4>)
 801949c:	695b      	ldr	r3, [r3, #20]
 801949e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80194a2:	2be0      	cmp	r3, #224	; 0xe0
 80194a4:	d00c      	beq.n	80194c0 <ip4_input+0x280>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80194a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80194aa:	4619      	mov	r1, r3
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f7f7 faa1 	bl	80109f4 <pbuf_header_force>
        p->payload = iphdr;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	69fa      	ldr	r2, [r7, #28]
 80194b6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80194b8:	2102      	movs	r1, #2
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f7ff fdce 	bl	801905c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f7f7 faa9 	bl	8010a18 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80194c6:	4b0b      	ldr	r3, [pc, #44]	; (80194f4 <ip4_input+0x2b4>)
 80194c8:	2200      	movs	r2, #0
 80194ca:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80194cc:	4b09      	ldr	r3, [pc, #36]	; (80194f4 <ip4_input+0x2b4>)
 80194ce:	2200      	movs	r2, #0
 80194d0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80194d2:	4b08      	ldr	r3, [pc, #32]	; (80194f4 <ip4_input+0x2b4>)
 80194d4:	2200      	movs	r2, #0
 80194d6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80194d8:	4b06      	ldr	r3, [pc, #24]	; (80194f4 <ip4_input+0x2b4>)
 80194da:	2200      	movs	r2, #0
 80194dc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80194de:	4b05      	ldr	r3, [pc, #20]	; (80194f4 <ip4_input+0x2b4>)
 80194e0:	2200      	movs	r2, #0
 80194e2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80194e4:	4b03      	ldr	r3, [pc, #12]	; (80194f4 <ip4_input+0x2b4>)
 80194e6:	2200      	movs	r2, #0
 80194e8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80194ea:	2300      	movs	r3, #0
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	3720      	adds	r7, #32
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd80      	pop	{r7, pc}
 80194f4:	240045a8 	.word	0x240045a8
 80194f8:	240076b8 	.word	0x240076b8

080194fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b08a      	sub	sp, #40	; 0x28
 8019500:	af04      	add	r7, sp, #16
 8019502:	60f8      	str	r0, [r7, #12]
 8019504:	60b9      	str	r1, [r7, #8]
 8019506:	607a      	str	r2, [r7, #4]
 8019508:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d009      	beq.n	8019528 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d003      	beq.n	8019522 <ip4_output_if+0x26>
 801951a:	68bb      	ldr	r3, [r7, #8]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d102      	bne.n	8019528 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019524:	3304      	adds	r3, #4
 8019526:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019528:	78fa      	ldrb	r2, [r7, #3]
 801952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952c:	9302      	str	r3, [sp, #8]
 801952e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019532:	9301      	str	r3, [sp, #4]
 8019534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019538:	9300      	str	r3, [sp, #0]
 801953a:	4613      	mov	r3, r2
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	6979      	ldr	r1, [r7, #20]
 8019540:	68f8      	ldr	r0, [r7, #12]
 8019542:	f000 f805 	bl	8019550 <ip4_output_if_src>
 8019546:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019548:	4618      	mov	r0, r3
 801954a:	3718      	adds	r7, #24
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}

08019550 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b088      	sub	sp, #32
 8019554:	af00      	add	r7, sp, #0
 8019556:	60f8      	str	r0, [r7, #12]
 8019558:	60b9      	str	r1, [r7, #8]
 801955a:	607a      	str	r2, [r7, #4]
 801955c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	89db      	ldrh	r3, [r3, #14]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d006      	beq.n	8019574 <ip4_output_if_src+0x24>
 8019566:	4b48      	ldr	r3, [pc, #288]	; (8019688 <ip4_output_if_src+0x138>)
 8019568:	f240 3233 	movw	r2, #819	; 0x333
 801956c:	4947      	ldr	r1, [pc, #284]	; (801968c <ip4_output_if_src+0x13c>)
 801956e:	4848      	ldr	r0, [pc, #288]	; (8019690 <ip4_output_if_src+0x140>)
 8019570:	f001 fa48 	bl	801aa04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d060      	beq.n	801963c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801957a:	2314      	movs	r3, #20
 801957c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801957e:	2114      	movs	r1, #20
 8019580:	68f8      	ldr	r0, [r7, #12]
 8019582:	f7f7 fa25 	bl	80109d0 <pbuf_header>
 8019586:	4603      	mov	r3, r0
 8019588:	2b00      	cmp	r3, #0
 801958a:	d002      	beq.n	8019592 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801958c:	f06f 0301 	mvn.w	r3, #1
 8019590:	e075      	b.n	801967e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	685b      	ldr	r3, [r3, #4]
 8019596:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	895b      	ldrh	r3, [r3, #10]
 801959c:	2b13      	cmp	r3, #19
 801959e:	d806      	bhi.n	80195ae <ip4_output_if_src+0x5e>
 80195a0:	4b39      	ldr	r3, [pc, #228]	; (8019688 <ip4_output_if_src+0x138>)
 80195a2:	f44f 7258 	mov.w	r2, #864	; 0x360
 80195a6:	493b      	ldr	r1, [pc, #236]	; (8019694 <ip4_output_if_src+0x144>)
 80195a8:	4839      	ldr	r0, [pc, #228]	; (8019690 <ip4_output_if_src+0x140>)
 80195aa:	f001 fa2b 	bl	801aa04 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80195ae:	69fb      	ldr	r3, [r7, #28]
 80195b0:	78fa      	ldrb	r2, [r7, #3]
 80195b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80195b4:	69fb      	ldr	r3, [r7, #28]
 80195b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80195ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	681a      	ldr	r2, [r3, #0]
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80195c4:	8b7b      	ldrh	r3, [r7, #26]
 80195c6:	089b      	lsrs	r3, r3, #2
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195d0:	b2da      	uxtb	r2, r3
 80195d2:	69fb      	ldr	r3, [r7, #28]
 80195d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80195dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	891b      	ldrh	r3, [r3, #8]
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7f5 ffa0 	bl	800f528 <lwip_htons>
 80195e8:	4603      	mov	r3, r0
 80195ea:	461a      	mov	r2, r3
 80195ec:	69fb      	ldr	r3, [r7, #28]
 80195ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	2200      	movs	r2, #0
 80195f4:	719a      	strb	r2, [r3, #6]
 80195f6:	2200      	movs	r2, #0
 80195f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80195fa:	4b27      	ldr	r3, [pc, #156]	; (8019698 <ip4_output_if_src+0x148>)
 80195fc:	881b      	ldrh	r3, [r3, #0]
 80195fe:	4618      	mov	r0, r3
 8019600:	f7f5 ff92 	bl	800f528 <lwip_htons>
 8019604:	4603      	mov	r3, r0
 8019606:	461a      	mov	r2, r3
 8019608:	69fb      	ldr	r3, [r7, #28]
 801960a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801960c:	4b22      	ldr	r3, [pc, #136]	; (8019698 <ip4_output_if_src+0x148>)
 801960e:	881b      	ldrh	r3, [r3, #0]
 8019610:	3301      	adds	r3, #1
 8019612:	b29a      	uxth	r2, r3
 8019614:	4b20      	ldr	r3, [pc, #128]	; (8019698 <ip4_output_if_src+0x148>)
 8019616:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d104      	bne.n	8019628 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801961e:	4b1f      	ldr	r3, [pc, #124]	; (801969c <ip4_output_if_src+0x14c>)
 8019620:	681a      	ldr	r2, [r3, #0]
 8019622:	69fb      	ldr	r3, [r7, #28]
 8019624:	60da      	str	r2, [r3, #12]
 8019626:	e003      	b.n	8019630 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019628:	68bb      	ldr	r3, [r7, #8]
 801962a:	681a      	ldr	r2, [r3, #0]
 801962c:	69fb      	ldr	r3, [r7, #28]
 801962e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019630:	69fb      	ldr	r3, [r7, #28]
 8019632:	2200      	movs	r2, #0
 8019634:	729a      	strb	r2, [r3, #10]
 8019636:	2200      	movs	r2, #0
 8019638:	72da      	strb	r2, [r3, #11]
 801963a:	e008      	b.n	801964e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019642:	69fb      	ldr	r3, [r7, #28]
 8019644:	691b      	ldr	r3, [r3, #16]
 8019646:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019648:	f107 0314 	add.w	r3, r7, #20
 801964c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019652:	2b00      	cmp	r3, #0
 8019654:	d00c      	beq.n	8019670 <ip4_output_if_src+0x120>
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	891a      	ldrh	r2, [r3, #8]
 801965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801965e:	429a      	cmp	r2, r3
 8019660:	d906      	bls.n	8019670 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8019662:	687a      	ldr	r2, [r7, #4]
 8019664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019666:	68f8      	ldr	r0, [r7, #12]
 8019668:	f000 fd8c 	bl	801a184 <ip4_frag>
 801966c:	4603      	mov	r3, r0
 801966e:	e006      	b.n	801967e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019672:	695b      	ldr	r3, [r3, #20]
 8019674:	687a      	ldr	r2, [r7, #4]
 8019676:	68f9      	ldr	r1, [r7, #12]
 8019678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801967a:	4798      	blx	r3
 801967c:	4603      	mov	r3, r0
}
 801967e:	4618      	mov	r0, r3
 8019680:	3720      	adds	r7, #32
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	0801ebcc 	.word	0x0801ebcc
 801968c:	0801ec28 	.word	0x0801ec28
 8019690:	0801ec34 	.word	0x0801ec34
 8019694:	0801ec5c 	.word	0x0801ec5c
 8019698:	2400781e 	.word	0x2400781e
 801969c:	0801f218 	.word	0x0801f218

080196a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80196a0:	b480      	push	{r7}
 80196a2:	b085      	sub	sp, #20
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196b4:	d002      	beq.n	80196bc <ip4_addr_isbroadcast_u32+0x1c>
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d101      	bne.n	80196c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80196bc:	2301      	movs	r3, #1
 80196be:	e02a      	b.n	8019716 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80196c6:	f003 0302 	and.w	r3, r3, #2
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d101      	bne.n	80196d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80196ce:	2300      	movs	r3, #0
 80196d0:	e021      	b.n	8019716 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	3304      	adds	r3, #4
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	429a      	cmp	r2, r3
 80196dc:	d101      	bne.n	80196e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80196de:	2300      	movs	r3, #0
 80196e0:	e019      	b.n	8019716 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80196e2:	68fa      	ldr	r2, [r7, #12]
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	3304      	adds	r3, #4
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	405a      	eors	r2, r3
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	3308      	adds	r3, #8
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	4013      	ands	r3, r2
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d10d      	bne.n	8019714 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	3308      	adds	r3, #8
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	43da      	mvns	r2, r3
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	3308      	adds	r3, #8
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801970c:	429a      	cmp	r2, r3
 801970e:	d101      	bne.n	8019714 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019710:	2301      	movs	r3, #1
 8019712:	e000      	b.n	8019716 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019714:	2300      	movs	r3, #0
  }
}
 8019716:	4618      	mov	r0, r3
 8019718:	3714      	adds	r7, #20
 801971a:	46bd      	mov	sp, r7
 801971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019720:	4770      	bx	lr
	...

08019724 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019724:	b480      	push	{r7}
 8019726:	b08d      	sub	sp, #52	; 0x34
 8019728:	af00      	add	r7, sp, #0
 801972a:	60f8      	str	r0, [r7, #12]
 801972c:	60b9      	str	r1, [r7, #8]
 801972e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019730:	2300      	movs	r3, #0
 8019732:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801973e:	f107 0318 	add.w	r3, r7, #24
 8019742:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019744:	2300      	movs	r3, #0
 8019746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801974a:	e058      	b.n	80197fe <ip4addr_ntoa_r+0xda>
    i = 0;
 801974c:	2300      	movs	r3, #0
 801974e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8019752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019754:	781a      	ldrb	r2, [r3, #0]
 8019756:	4b32      	ldr	r3, [pc, #200]	; (8019820 <ip4addr_ntoa_r+0xfc>)
 8019758:	fba3 1302 	umull	r1, r3, r3, r2
 801975c:	08d9      	lsrs	r1, r3, #3
 801975e:	460b      	mov	r3, r1
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	440b      	add	r3, r1
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	1ad3      	subs	r3, r2, r3
 8019768:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976c:	781b      	ldrb	r3, [r3, #0]
 801976e:	4a2c      	ldr	r2, [pc, #176]	; (8019820 <ip4addr_ntoa_r+0xfc>)
 8019770:	fba2 2303 	umull	r2, r3, r2, r3
 8019774:	08db      	lsrs	r3, r3, #3
 8019776:	b2da      	uxtb	r2, r3
 8019778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801977a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801977c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019780:	1c5a      	adds	r2, r3, #1
 8019782:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019786:	4619      	mov	r1, r3
 8019788:	7ffb      	ldrb	r3, [r7, #31]
 801978a:	3330      	adds	r3, #48	; 0x30
 801978c:	b2da      	uxtb	r2, r3
 801978e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8019792:	443b      	add	r3, r7
 8019794:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d1d8      	bne.n	8019752 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80197a0:	e011      	b.n	80197c6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80197a2:	6a3b      	ldr	r3, [r7, #32]
 80197a4:	1c5a      	adds	r2, r3, #1
 80197a6:	623a      	str	r2, [r7, #32]
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	dc01      	bgt.n	80197b2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80197ae:	2300      	movs	r3, #0
 80197b0:	e030      	b.n	8019814 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80197b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80197b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197b8:	1c59      	adds	r1, r3, #1
 80197ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80197bc:	3230      	adds	r2, #48	; 0x30
 80197be:	443a      	add	r2, r7
 80197c0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80197c4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80197c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80197ca:	1e5a      	subs	r2, r3, #1
 80197cc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d1e6      	bne.n	80197a2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80197d4:	6a3b      	ldr	r3, [r7, #32]
 80197d6:	1c5a      	adds	r2, r3, #1
 80197d8:	623a      	str	r2, [r7, #32]
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	429a      	cmp	r2, r3
 80197de:	dc01      	bgt.n	80197e4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80197e0:	2300      	movs	r3, #0
 80197e2:	e017      	b.n	8019814 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80197e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80197ea:	222e      	movs	r2, #46	; 0x2e
 80197ec:	701a      	strb	r2, [r3, #0]
    ap++;
 80197ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f0:	3301      	adds	r3, #1
 80197f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80197f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197f8:	3301      	adds	r3, #1
 80197fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019802:	2b03      	cmp	r3, #3
 8019804:	d9a2      	bls.n	801974c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019808:	3b01      	subs	r3, #1
 801980a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801980e:	2200      	movs	r2, #0
 8019810:	701a      	strb	r2, [r3, #0]
  return buf;
 8019812:	68bb      	ldr	r3, [r7, #8]
}
 8019814:	4618      	mov	r0, r3
 8019816:	3734      	adds	r7, #52	; 0x34
 8019818:	46bd      	mov	sp, r7
 801981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981e:	4770      	bx	lr
 8019820:	cccccccd 	.word	0xcccccccd

08019824 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b084      	sub	sp, #16
 8019828:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801982a:	2300      	movs	r3, #0
 801982c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801982e:	4b12      	ldr	r3, [pc, #72]	; (8019878 <ip_reass_tmr+0x54>)
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019834:	e018      	b.n	8019868 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	7fdb      	ldrb	r3, [r3, #31]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d00b      	beq.n	8019856 <ip_reass_tmr+0x32>
      r->timer--;
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	7fdb      	ldrb	r3, [r3, #31]
 8019842:	3b01      	subs	r3, #1
 8019844:	b2da      	uxtb	r2, r3
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	60fb      	str	r3, [r7, #12]
 8019854:	e008      	b.n	8019868 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019860:	68b9      	ldr	r1, [r7, #8]
 8019862:	6878      	ldr	r0, [r7, #4]
 8019864:	f000 f80a 	bl	801987c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d1e3      	bne.n	8019836 <ip_reass_tmr+0x12>
     }
   }
}
 801986e:	bf00      	nop
 8019870:	bf00      	nop
 8019872:	3710      	adds	r7, #16
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	24007820 	.word	0x24007820

0801987c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b088      	sub	sp, #32
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019886:	2300      	movs	r3, #0
 8019888:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801988a:	683a      	ldr	r2, [r7, #0]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	429a      	cmp	r2, r3
 8019890:	d105      	bne.n	801989e <ip_reass_free_complete_datagram+0x22>
 8019892:	4b45      	ldr	r3, [pc, #276]	; (80199a8 <ip_reass_free_complete_datagram+0x12c>)
 8019894:	22ab      	movs	r2, #171	; 0xab
 8019896:	4945      	ldr	r1, [pc, #276]	; (80199ac <ip_reass_free_complete_datagram+0x130>)
 8019898:	4845      	ldr	r0, [pc, #276]	; (80199b0 <ip_reass_free_complete_datagram+0x134>)
 801989a:	f001 f8b3 	bl	801aa04 <iprintf>
  if (prev != NULL) {
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d00a      	beq.n	80198ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d005      	beq.n	80198ba <ip_reass_free_complete_datagram+0x3e>
 80198ae:	4b3e      	ldr	r3, [pc, #248]	; (80199a8 <ip_reass_free_complete_datagram+0x12c>)
 80198b0:	22ad      	movs	r2, #173	; 0xad
 80198b2:	4940      	ldr	r1, [pc, #256]	; (80199b4 <ip_reass_free_complete_datagram+0x138>)
 80198b4:	483e      	ldr	r0, [pc, #248]	; (80199b0 <ip_reass_free_complete_datagram+0x134>)
 80198b6:	f001 f8a5 	bl	801aa04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80198c2:	697b      	ldr	r3, [r7, #20]
 80198c4:	889b      	ldrh	r3, [r3, #4]
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d12a      	bne.n	8019922 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	685b      	ldr	r3, [r3, #4]
 80198d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80198da:	69bb      	ldr	r3, [r7, #24]
 80198dc:	6858      	ldr	r0, [r3, #4]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	3308      	adds	r3, #8
 80198e2:	2214      	movs	r2, #20
 80198e4:	4619      	mov	r1, r3
 80198e6:	f001 f877 	bl	801a9d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80198ea:	2101      	movs	r1, #1
 80198ec:	69b8      	ldr	r0, [r7, #24]
 80198ee:	f7ff fbc5 	bl	801907c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80198f2:	69b8      	ldr	r0, [r7, #24]
 80198f4:	f7f7 f92a 	bl	8010b4c <pbuf_clen>
 80198f8:	4603      	mov	r3, r0
 80198fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80198fc:	8bfa      	ldrh	r2, [r7, #30]
 80198fe:	8a7b      	ldrh	r3, [r7, #18]
 8019900:	4413      	add	r3, r2
 8019902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019906:	db05      	blt.n	8019914 <ip_reass_free_complete_datagram+0x98>
 8019908:	4b27      	ldr	r3, [pc, #156]	; (80199a8 <ip_reass_free_complete_datagram+0x12c>)
 801990a:	22bc      	movs	r2, #188	; 0xbc
 801990c:	492a      	ldr	r1, [pc, #168]	; (80199b8 <ip_reass_free_complete_datagram+0x13c>)
 801990e:	4828      	ldr	r0, [pc, #160]	; (80199b0 <ip_reass_free_complete_datagram+0x134>)
 8019910:	f001 f878 	bl	801aa04 <iprintf>
    pbufs_freed += clen;
 8019914:	8bfa      	ldrh	r2, [r7, #30]
 8019916:	8a7b      	ldrh	r3, [r7, #18]
 8019918:	4413      	add	r3, r2
 801991a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801991c:	69b8      	ldr	r0, [r7, #24]
 801991e:	f7f7 f87b 	bl	8010a18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	685b      	ldr	r3, [r3, #4]
 8019926:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019928:	e01f      	b.n	801996a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801992a:	69bb      	ldr	r3, [r7, #24]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019930:	69bb      	ldr	r3, [r7, #24]
 8019932:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019934:	697b      	ldr	r3, [r7, #20]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801993a:	68f8      	ldr	r0, [r7, #12]
 801993c:	f7f7 f906 	bl	8010b4c <pbuf_clen>
 8019940:	4603      	mov	r3, r0
 8019942:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019944:	8bfa      	ldrh	r2, [r7, #30]
 8019946:	8a7b      	ldrh	r3, [r7, #18]
 8019948:	4413      	add	r3, r2
 801994a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801994e:	db05      	blt.n	801995c <ip_reass_free_complete_datagram+0xe0>
 8019950:	4b15      	ldr	r3, [pc, #84]	; (80199a8 <ip_reass_free_complete_datagram+0x12c>)
 8019952:	22cc      	movs	r2, #204	; 0xcc
 8019954:	4918      	ldr	r1, [pc, #96]	; (80199b8 <ip_reass_free_complete_datagram+0x13c>)
 8019956:	4816      	ldr	r0, [pc, #88]	; (80199b0 <ip_reass_free_complete_datagram+0x134>)
 8019958:	f001 f854 	bl	801aa04 <iprintf>
    pbufs_freed += clen;
 801995c:	8bfa      	ldrh	r2, [r7, #30]
 801995e:	8a7b      	ldrh	r3, [r7, #18]
 8019960:	4413      	add	r3, r2
 8019962:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019964:	68f8      	ldr	r0, [r7, #12]
 8019966:	f7f7 f857 	bl	8010a18 <pbuf_free>
  while (p != NULL) {
 801996a:	69bb      	ldr	r3, [r7, #24]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d1dc      	bne.n	801992a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019970:	6839      	ldr	r1, [r7, #0]
 8019972:	6878      	ldr	r0, [r7, #4]
 8019974:	f000 f8c2 	bl	8019afc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8019978:	4b10      	ldr	r3, [pc, #64]	; (80199bc <ip_reass_free_complete_datagram+0x140>)
 801997a:	881b      	ldrh	r3, [r3, #0]
 801997c:	8bfa      	ldrh	r2, [r7, #30]
 801997e:	429a      	cmp	r2, r3
 8019980:	d905      	bls.n	801998e <ip_reass_free_complete_datagram+0x112>
 8019982:	4b09      	ldr	r3, [pc, #36]	; (80199a8 <ip_reass_free_complete_datagram+0x12c>)
 8019984:	22d2      	movs	r2, #210	; 0xd2
 8019986:	490e      	ldr	r1, [pc, #56]	; (80199c0 <ip_reass_free_complete_datagram+0x144>)
 8019988:	4809      	ldr	r0, [pc, #36]	; (80199b0 <ip_reass_free_complete_datagram+0x134>)
 801998a:	f001 f83b 	bl	801aa04 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801998e:	4b0b      	ldr	r3, [pc, #44]	; (80199bc <ip_reass_free_complete_datagram+0x140>)
 8019990:	881a      	ldrh	r2, [r3, #0]
 8019992:	8bfb      	ldrh	r3, [r7, #30]
 8019994:	1ad3      	subs	r3, r2, r3
 8019996:	b29a      	uxth	r2, r3
 8019998:	4b08      	ldr	r3, [pc, #32]	; (80199bc <ip_reass_free_complete_datagram+0x140>)
 801999a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801999c:	8bfb      	ldrh	r3, [r7, #30]
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3720      	adds	r7, #32
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	0801ec8c 	.word	0x0801ec8c
 80199ac:	0801ecec 	.word	0x0801ecec
 80199b0:	0801ecf8 	.word	0x0801ecf8
 80199b4:	0801ed20 	.word	0x0801ed20
 80199b8:	0801ed34 	.word	0x0801ed34
 80199bc:	24007824 	.word	0x24007824
 80199c0:	0801ed54 	.word	0x0801ed54

080199c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b08a      	sub	sp, #40	; 0x28
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
 80199cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80199ce:	2300      	movs	r3, #0
 80199d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80199d2:	2300      	movs	r3, #0
 80199d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80199d6:	2300      	movs	r3, #0
 80199d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80199da:	2300      	movs	r3, #0
 80199dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80199de:	2300      	movs	r3, #0
 80199e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80199e2:	4b28      	ldr	r3, [pc, #160]	; (8019a84 <ip_reass_remove_oldest_datagram+0xc0>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80199e8:	e030      	b.n	8019a4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80199ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ec:	695a      	ldr	r2, [r3, #20]
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	429a      	cmp	r2, r3
 80199f4:	d10c      	bne.n	8019a10 <ip_reass_remove_oldest_datagram+0x4c>
 80199f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f8:	699a      	ldr	r2, [r3, #24]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	691b      	ldr	r3, [r3, #16]
 80199fe:	429a      	cmp	r2, r3
 8019a00:	d106      	bne.n	8019a10 <ip_reass_remove_oldest_datagram+0x4c>
 8019a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a04:	899a      	ldrh	r2, [r3, #12]
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	889b      	ldrh	r3, [r3, #4]
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	429a      	cmp	r2, r3
 8019a0e:	d014      	beq.n	8019a3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	3301      	adds	r3, #1
 8019a14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019a16:	6a3b      	ldr	r3, [r7, #32]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d104      	bne.n	8019a26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	61bb      	str	r3, [r7, #24]
 8019a24:	e009      	b.n	8019a3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a28:	7fda      	ldrb	r2, [r3, #31]
 8019a2a:	6a3b      	ldr	r3, [r7, #32]
 8019a2c:	7fdb      	ldrb	r3, [r3, #31]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d803      	bhi.n	8019a3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d001      	beq.n	8019a46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d1cb      	bne.n	80199ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019a52:	6a3b      	ldr	r3, [r7, #32]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d008      	beq.n	8019a6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019a58:	69b9      	ldr	r1, [r7, #24]
 8019a5a:	6a38      	ldr	r0, [r7, #32]
 8019a5c:	f7ff ff0e 	bl	801987c <ip_reass_free_complete_datagram>
 8019a60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019a62:	697a      	ldr	r2, [r7, #20]
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	4413      	add	r3, r2
 8019a68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019a6a:	697a      	ldr	r2, [r7, #20]
 8019a6c:	683b      	ldr	r3, [r7, #0]
 8019a6e:	429a      	cmp	r2, r3
 8019a70:	da02      	bge.n	8019a78 <ip_reass_remove_oldest_datagram+0xb4>
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	2b01      	cmp	r3, #1
 8019a76:	dcac      	bgt.n	80199d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019a78:	697b      	ldr	r3, [r7, #20]
}
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	3728      	adds	r7, #40	; 0x28
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}
 8019a82:	bf00      	nop
 8019a84:	24007820 	.word	0x24007820

08019a88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b084      	sub	sp, #16
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
 8019a90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019a92:	2004      	movs	r0, #4
 8019a94:	f7f6 f954 	bl	800fd40 <memp_malloc>
 8019a98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d110      	bne.n	8019ac2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019aa0:	6839      	ldr	r1, [r7, #0]
 8019aa2:	6878      	ldr	r0, [r7, #4]
 8019aa4:	f7ff ff8e 	bl	80199c4 <ip_reass_remove_oldest_datagram>
 8019aa8:	4602      	mov	r2, r0
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	4293      	cmp	r3, r2
 8019aae:	dc03      	bgt.n	8019ab8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ab0:	2004      	movs	r0, #4
 8019ab2:	f7f6 f945 	bl	800fd40 <memp_malloc>
 8019ab6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d101      	bne.n	8019ac2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	e016      	b.n	8019af0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019ac2:	2220      	movs	r2, #32
 8019ac4:	2100      	movs	r1, #0
 8019ac6:	68f8      	ldr	r0, [r7, #12]
 8019ac8:	f000 ff94 	bl	801a9f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	2203      	movs	r2, #3
 8019ad0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019ad2:	4b09      	ldr	r3, [pc, #36]	; (8019af8 <ip_reass_enqueue_new_datagram+0x70>)
 8019ad4:	681a      	ldr	r2, [r3, #0]
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019ada:	4a07      	ldr	r2, [pc, #28]	; (8019af8 <ip_reass_enqueue_new_datagram+0x70>)
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	3308      	adds	r3, #8
 8019ae4:	2214      	movs	r2, #20
 8019ae6:	6879      	ldr	r1, [r7, #4]
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f000 ff75 	bl	801a9d8 <memcpy>
  return ipr;
 8019aee:	68fb      	ldr	r3, [r7, #12]
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	3710      	adds	r7, #16
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}
 8019af8:	24007820 	.word	0x24007820

08019afc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b082      	sub	sp, #8
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
 8019b04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019b06:	4b10      	ldr	r3, [pc, #64]	; (8019b48 <ip_reass_dequeue_datagram+0x4c>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	687a      	ldr	r2, [r7, #4]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d104      	bne.n	8019b1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	4a0c      	ldr	r2, [pc, #48]	; (8019b48 <ip_reass_dequeue_datagram+0x4c>)
 8019b16:	6013      	str	r3, [r2, #0]
 8019b18:	e00d      	b.n	8019b36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d106      	bne.n	8019b2e <ip_reass_dequeue_datagram+0x32>
 8019b20:	4b0a      	ldr	r3, [pc, #40]	; (8019b4c <ip_reass_dequeue_datagram+0x50>)
 8019b22:	f240 1245 	movw	r2, #325	; 0x145
 8019b26:	490a      	ldr	r1, [pc, #40]	; (8019b50 <ip_reass_dequeue_datagram+0x54>)
 8019b28:	480a      	ldr	r0, [pc, #40]	; (8019b54 <ip_reass_dequeue_datagram+0x58>)
 8019b2a:	f000 ff6b 	bl	801aa04 <iprintf>
    prev->next = ipr->next;
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681a      	ldr	r2, [r3, #0]
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019b36:	6879      	ldr	r1, [r7, #4]
 8019b38:	2004      	movs	r0, #4
 8019b3a:	f7f6 f977 	bl	800fe2c <memp_free>
}
 8019b3e:	bf00      	nop
 8019b40:	3708      	adds	r7, #8
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	24007820 	.word	0x24007820
 8019b4c:	0801ec8c 	.word	0x0801ec8c
 8019b50:	0801ed70 	.word	0x0801ed70
 8019b54:	0801ecf8 	.word	0x0801ecf8

08019b58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b08c      	sub	sp, #48	; 0x30
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	60b9      	str	r1, [r7, #8]
 8019b62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8019b64:	2300      	movs	r3, #0
 8019b66:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019b68:	2301      	movs	r3, #1
 8019b6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8019b6c:	68bb      	ldr	r3, [r7, #8]
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8019b72:	69fb      	ldr	r3, [r7, #28]
 8019b74:	885b      	ldrh	r3, [r3, #2]
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7f5 fcd5 	bl	800f528 <lwip_htons>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	461a      	mov	r2, r3
 8019b82:	69fb      	ldr	r3, [r7, #28]
 8019b84:	781b      	ldrb	r3, [r3, #0]
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	f003 030f 	and.w	r3, r3, #15
 8019b8c:	b29b      	uxth	r3, r3
 8019b8e:	009b      	lsls	r3, r3, #2
 8019b90:	b29b      	uxth	r3, r3
 8019b92:	1ad3      	subs	r3, r2, r3
 8019b94:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019b96:	69fb      	ldr	r3, [r7, #28]
 8019b98:	88db      	ldrh	r3, [r3, #6]
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7f5 fcc3 	bl	800f528 <lwip_htons>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	685b      	ldr	r3, [r3, #4]
 8019bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	701a      	strb	r2, [r3, #0]
 8019bba:	2200      	movs	r2, #0
 8019bbc:	705a      	strb	r2, [r3, #1]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	709a      	strb	r2, [r3, #2]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc8:	8b3a      	ldrh	r2, [r7, #24]
 8019bca:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8019bcc:	8b3a      	ldrh	r2, [r7, #24]
 8019bce:	8b7b      	ldrh	r3, [r7, #26]
 8019bd0:	4413      	add	r3, r2
 8019bd2:	b29a      	uxth	r2, r3
 8019bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8019bde:	e061      	b.n	8019ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8019be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be2:	685b      	ldr	r3, [r3, #4]
 8019be4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8019be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be8:	889b      	ldrh	r3, [r3, #4]
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	697b      	ldr	r3, [r7, #20]
 8019bee:	889b      	ldrh	r3, [r3, #4]
 8019bf0:	b29b      	uxth	r3, r3
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d232      	bcs.n	8019c5c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bfa:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d01f      	beq.n	8019c42 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c04:	889b      	ldrh	r3, [r3, #4]
 8019c06:	b29a      	uxth	r2, r3
 8019c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0a:	88db      	ldrh	r3, [r3, #6]
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	f0c0 80e3 	bcc.w	8019dda <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8019c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c16:	88db      	ldrh	r3, [r3, #6]
 8019c18:	b29a      	uxth	r2, r3
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	889b      	ldrh	r3, [r3, #4]
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	429a      	cmp	r2, r3
 8019c22:	f200 80da 	bhi.w	8019dda <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c28:	68ba      	ldr	r2, [r7, #8]
 8019c2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c2e:	88db      	ldrh	r3, [r3, #6]
 8019c30:	b29a      	uxth	r2, r3
 8019c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c34:	889b      	ldrh	r3, [r3, #4]
 8019c36:	b29b      	uxth	r3, r3
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	d037      	beq.n	8019cac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019c40:	e034      	b.n	8019cac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8019c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c44:	88db      	ldrh	r3, [r3, #6]
 8019c46:	b29a      	uxth	r2, r3
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	889b      	ldrh	r3, [r3, #4]
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	f200 80c5 	bhi.w	8019dde <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	68ba      	ldr	r2, [r7, #8]
 8019c58:	605a      	str	r2, [r3, #4]
      break;
 8019c5a:	e027      	b.n	8019cac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8019c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c5e:	889b      	ldrh	r3, [r3, #4]
 8019c60:	b29a      	uxth	r2, r3
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	889b      	ldrh	r3, [r3, #4]
 8019c66:	b29b      	uxth	r3, r3
 8019c68:	429a      	cmp	r2, r3
 8019c6a:	f000 80ba 	beq.w	8019de2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c70:	889b      	ldrh	r3, [r3, #4]
 8019c72:	b29a      	uxth	r2, r3
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	88db      	ldrh	r3, [r3, #6]
 8019c78:	b29b      	uxth	r3, r3
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	f0c0 80b3 	bcc.w	8019de6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d009      	beq.n	8019c9a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8019c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c88:	88db      	ldrh	r3, [r3, #6]
 8019c8a:	b29a      	uxth	r2, r3
 8019c8c:	697b      	ldr	r3, [r7, #20]
 8019c8e:	889b      	ldrh	r3, [r3, #4]
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d001      	beq.n	8019c9a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019c96:	2300      	movs	r3, #0
 8019c98:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d19a      	bne.n	8019be0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8019caa:	e000      	b.n	8019cae <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8019cac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d12d      	bne.n	8019d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8019cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d01c      	beq.n	8019cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cbc:	88db      	ldrh	r3, [r3, #6]
 8019cbe:	b29a      	uxth	r2, r3
 8019cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc2:	889b      	ldrh	r3, [r3, #4]
 8019cc4:	b29b      	uxth	r3, r3
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d906      	bls.n	8019cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8019cca:	4b51      	ldr	r3, [pc, #324]	; (8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019ccc:	f240 12ab 	movw	r2, #427	; 0x1ab
 8019cd0:	4950      	ldr	r1, [pc, #320]	; (8019e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019cd2:	4851      	ldr	r0, [pc, #324]	; (8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019cd4:	f000 fe96 	bl	801aa04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cda:	68ba      	ldr	r2, [r7, #8]
 8019cdc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ce0:	88db      	ldrh	r3, [r3, #6]
 8019ce2:	b29a      	uxth	r2, r3
 8019ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ce6:	889b      	ldrh	r3, [r3, #4]
 8019ce8:	b29b      	uxth	r3, r3
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d010      	beq.n	8019d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	623b      	str	r3, [r7, #32]
 8019cf2:	e00d      	b.n	8019d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d006      	beq.n	8019d0a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8019cfc:	4b44      	ldr	r3, [pc, #272]	; (8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019cfe:	f240 12b3 	movw	r2, #435	; 0x1b3
 8019d02:	4946      	ldr	r1, [pc, #280]	; (8019e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019d04:	4844      	ldr	r0, [pc, #272]	; (8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019d06:	f000 fe7d 	bl	801aa04 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	68ba      	ldr	r2, [r7, #8]
 8019d0e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d105      	bne.n	8019d22 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	7f9b      	ldrb	r3, [r3, #30]
 8019d1a:	f003 0301 	and.w	r3, r3, #1
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d059      	beq.n	8019dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8019d22:	6a3b      	ldr	r3, [r7, #32]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d04f      	beq.n	8019dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	685b      	ldr	r3, [r3, #4]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d006      	beq.n	8019d3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	685b      	ldr	r3, [r3, #4]
 8019d34:	685b      	ldr	r3, [r3, #4]
 8019d36:	889b      	ldrh	r3, [r3, #4]
 8019d38:	b29b      	uxth	r3, r3
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d002      	beq.n	8019d44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019d3e:	2300      	movs	r3, #0
 8019d40:	623b      	str	r3, [r7, #32]
 8019d42:	e041      	b.n	8019dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d46:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019d4e:	e012      	b.n	8019d76 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8019d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d52:	685b      	ldr	r3, [r3, #4]
 8019d54:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d58:	88db      	ldrh	r3, [r3, #6]
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d5e:	889b      	ldrh	r3, [r3, #4]
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d002      	beq.n	8019d6c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8019d66:	2300      	movs	r3, #0
 8019d68:	623b      	str	r3, [r7, #32]
            break;
 8019d6a:	e007      	b.n	8019d7c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8019d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d1e9      	bne.n	8019d50 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019d7c:	6a3b      	ldr	r3, [r7, #32]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d022      	beq.n	8019dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d106      	bne.n	8019d98 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8019d8a:	4b21      	ldr	r3, [pc, #132]	; (8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019d8c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8019d90:	4923      	ldr	r1, [pc, #140]	; (8019e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019d92:	4821      	ldr	r0, [pc, #132]	; (8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019d94:	f000 fe36 	bl	801aa04 <iprintf>
          LWIP_ASSERT("sanity check",
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	685b      	ldr	r3, [r3, #4]
 8019d9c:	685b      	ldr	r3, [r3, #4]
 8019d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019da0:	429a      	cmp	r2, r3
 8019da2:	d106      	bne.n	8019db2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8019da4:	4b1a      	ldr	r3, [pc, #104]	; (8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019da6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019daa:	491d      	ldr	r1, [pc, #116]	; (8019e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019dac:	481a      	ldr	r0, [pc, #104]	; (8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019dae:	f000 fe29 	bl	801aa04 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d006      	beq.n	8019dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8019dba:	4b15      	ldr	r3, [pc, #84]	; (8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019dbc:	f240 12d7 	movw	r2, #471	; 0x1d7
 8019dc0:	4918      	ldr	r1, [pc, #96]	; (8019e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019dc2:	4815      	ldr	r0, [pc, #84]	; (8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019dc4:	f000 fe1e 	bl	801aa04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019dc8:	6a3b      	ldr	r3, [r7, #32]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	bf14      	ite	ne
 8019dce:	2301      	movne	r3, #1
 8019dd0:	2300      	moveq	r3, #0
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	e018      	b.n	8019e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	e016      	b.n	8019e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8019dda:	bf00      	nop
 8019ddc:	e004      	b.n	8019de8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8019dde:	bf00      	nop
 8019de0:	e002      	b.n	8019de8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8019de2:	bf00      	nop
 8019de4:	e000      	b.n	8019de8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8019de6:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8019de8:	68b8      	ldr	r0, [r7, #8]
 8019dea:	f7f6 feaf 	bl	8010b4c <pbuf_clen>
 8019dee:	4603      	mov	r3, r0
 8019df0:	461a      	mov	r2, r3
 8019df2:	4b0d      	ldr	r3, [pc, #52]	; (8019e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019df4:	881b      	ldrh	r3, [r3, #0]
 8019df6:	1a9b      	subs	r3, r3, r2
 8019df8:	b29a      	uxth	r2, r3
 8019dfa:	4b0b      	ldr	r3, [pc, #44]	; (8019e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019dfc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8019dfe:	68b8      	ldr	r0, [r7, #8]
 8019e00:	f7f6 fe0a 	bl	8010a18 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e04:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8019e08:	4618      	mov	r0, r3
 8019e0a:	3730      	adds	r7, #48	; 0x30
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}
 8019e10:	0801ec8c 	.word	0x0801ec8c
 8019e14:	0801ed8c 	.word	0x0801ed8c
 8019e18:	0801ecf8 	.word	0x0801ecf8
 8019e1c:	0801edac 	.word	0x0801edac
 8019e20:	0801ede4 	.word	0x0801ede4
 8019e24:	0801edf4 	.word	0x0801edf4
 8019e28:	24007824 	.word	0x24007824

08019e2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b08e      	sub	sp, #56	; 0x38
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8019e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e3c:	781b      	ldrb	r3, [r3, #0]
 8019e3e:	f003 030f 	and.w	r3, r3, #15
 8019e42:	009b      	lsls	r3, r3, #2
 8019e44:	2b14      	cmp	r3, #20
 8019e46:	f040 8131 	bne.w	801a0ac <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4c:	88db      	ldrh	r3, [r3, #6]
 8019e4e:	b29b      	uxth	r3, r3
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7f5 fb69 	bl	800f528 <lwip_htons>
 8019e56:	4603      	mov	r3, r0
 8019e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	00db      	lsls	r3, r3, #3
 8019e60:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8019e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e64:	885b      	ldrh	r3, [r3, #2]
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7f5 fb5d 	bl	800f528 <lwip_htons>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	461a      	mov	r2, r3
 8019e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e74:	781b      	ldrb	r3, [r3, #0]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	f003 030f 	and.w	r3, r3, #15
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	009b      	lsls	r3, r3, #2
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	1ad3      	subs	r3, r2, r3
 8019e84:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019e86:	6878      	ldr	r0, [r7, #4]
 8019e88:	f7f6 fe60 	bl	8010b4c <pbuf_clen>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019e90:	4b8e      	ldr	r3, [pc, #568]	; (801a0cc <ip4_reass+0x2a0>)
 8019e92:	881b      	ldrh	r3, [r3, #0]
 8019e94:	461a      	mov	r2, r3
 8019e96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e98:	4413      	add	r3, r2
 8019e9a:	2b0a      	cmp	r3, #10
 8019e9c:	dd10      	ble.n	8019ec0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ea0:	4619      	mov	r1, r3
 8019ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ea4:	f7ff fd8e 	bl	80199c4 <ip_reass_remove_oldest_datagram>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	f000 8100 	beq.w	801a0b0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019eb0:	4b86      	ldr	r3, [pc, #536]	; (801a0cc <ip4_reass+0x2a0>)
 8019eb2:	881b      	ldrh	r3, [r3, #0]
 8019eb4:	461a      	mov	r2, r3
 8019eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019eb8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019eba:	2b0a      	cmp	r3, #10
 8019ebc:	f300 80f8 	bgt.w	801a0b0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019ec0:	4b83      	ldr	r3, [pc, #524]	; (801a0d0 <ip4_reass+0x2a4>)
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8019ec6:	e015      	b.n	8019ef4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eca:	695a      	ldr	r2, [r3, #20]
 8019ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ece:	68db      	ldr	r3, [r3, #12]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d10c      	bne.n	8019eee <ip4_reass+0xc2>
 8019ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ed6:	699a      	ldr	r2, [r3, #24]
 8019ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eda:	691b      	ldr	r3, [r3, #16]
 8019edc:	429a      	cmp	r2, r3
 8019ede:	d106      	bne.n	8019eee <ip4_reass+0xc2>
 8019ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ee2:	899a      	ldrh	r2, [r3, #12]
 8019ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee6:	889b      	ldrh	r3, [r3, #4]
 8019ee8:	b29b      	uxth	r3, r3
 8019eea:	429a      	cmp	r2, r3
 8019eec:	d006      	beq.n	8019efc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8019ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d1e6      	bne.n	8019ec8 <ip4_reass+0x9c>
 8019efa:	e000      	b.n	8019efe <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019efc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d109      	bne.n	8019f18 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f06:	4619      	mov	r1, r3
 8019f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f0a:	f7ff fdbd 	bl	8019a88 <ip_reass_enqueue_new_datagram>
 8019f0e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d11c      	bne.n	8019f50 <ip4_reass+0x124>
      goto nullreturn;
 8019f16:	e0d0      	b.n	801a0ba <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f1a:	88db      	ldrh	r3, [r3, #6]
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f7f5 fb02 	bl	800f528 <lwip_htons>
 8019f24:	4603      	mov	r3, r0
 8019f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d110      	bne.n	8019f50 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f30:	89db      	ldrh	r3, [r3, #14]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7f5 faf8 	bl	800f528 <lwip_htons>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d006      	beq.n	8019f50 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f44:	3308      	adds	r3, #8
 8019f46:	2214      	movs	r2, #20
 8019f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	f000 fd44 	bl	801a9d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f52:	88db      	ldrh	r3, [r3, #6]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	f003 0320 	and.w	r3, r3, #32
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	bf0c      	ite	eq
 8019f5e:	2301      	moveq	r3, #1
 8019f60:	2300      	movne	r3, #0
 8019f62:	b2db      	uxtb	r3, r3
 8019f64:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019f66:	69fb      	ldr	r3, [r7, #28]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d00e      	beq.n	8019f8a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8019f6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f70:	4413      	add	r3, r2
 8019f72:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019f74:	8b7a      	ldrh	r2, [r7, #26]
 8019f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019f78:	429a      	cmp	r2, r3
 8019f7a:	f0c0 809b 	bcc.w	801a0b4 <ip4_reass+0x288>
 8019f7e:	8b7b      	ldrh	r3, [r7, #26]
 8019f80:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019f84:	4293      	cmp	r3, r2
 8019f86:	f200 8095 	bhi.w	801a0b4 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019f8a:	69fa      	ldr	r2, [r7, #28]
 8019f8c:	6879      	ldr	r1, [r7, #4]
 8019f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019f90:	f7ff fde2 	bl	8019b58 <ip_reass_chain_frag_into_datagram_and_validate>
 8019f94:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f9c:	f000 808c 	beq.w	801a0b8 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019fa0:	4b4a      	ldr	r3, [pc, #296]	; (801a0cc <ip4_reass+0x2a0>)
 8019fa2:	881a      	ldrh	r2, [r3, #0]
 8019fa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019fa6:	4413      	add	r3, r2
 8019fa8:	b29a      	uxth	r2, r3
 8019faa:	4b48      	ldr	r3, [pc, #288]	; (801a0cc <ip4_reass+0x2a0>)
 8019fac:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019fae:	69fb      	ldr	r3, [r7, #28]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d00d      	beq.n	8019fd0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8019fb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fb8:	4413      	add	r3, r2
 8019fba:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fbe:	8a7a      	ldrh	r2, [r7, #18]
 8019fc0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc4:	7f9b      	ldrb	r3, [r3, #30]
 8019fc6:	f043 0301 	orr.w	r3, r3, #1
 8019fca:	b2da      	uxtb	r2, r3
 8019fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fce:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	2b01      	cmp	r3, #1
 8019fd4:	d168      	bne.n	801a0a8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8019fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fd8:	8b9b      	ldrh	r3, [r3, #28]
 8019fda:	3314      	adds	r3, #20
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8019fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe4:	685b      	ldr	r3, [r3, #4]
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8019fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fee:	685b      	ldr	r3, [r3, #4]
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff6:	3308      	adds	r3, #8
 8019ff8:	2214      	movs	r2, #20
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ffe:	f000 fceb 	bl	801a9d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a004:	8b9b      	ldrh	r3, [r3, #28]
 801a006:	4618      	mov	r0, r3
 801a008:	f7f5 fa8e 	bl	800f528 <lwip_htons>
 801a00c:	4603      	mov	r3, r0
 801a00e:	461a      	mov	r2, r3
 801a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a012:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a016:	2200      	movs	r2, #0
 801a018:	719a      	strb	r2, [r3, #6]
 801a01a:	2200      	movs	r2, #0
 801a01c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a020:	2200      	movs	r2, #0
 801a022:	729a      	strb	r2, [r3, #10]
 801a024:	2200      	movs	r2, #0
 801a026:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a02a:	685b      	ldr	r3, [r3, #4]
 801a02c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a02e:	e00e      	b.n	801a04e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801a030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a032:	685b      	ldr	r3, [r3, #4]
 801a034:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801a036:	f06f 0113 	mvn.w	r1, #19
 801a03a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a03c:	f7f6 fcc8 	bl	80109d0 <pbuf_header>
      pbuf_cat(p, r);
 801a040:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a042:	6878      	ldr	r0, [r7, #4]
 801a044:	f7f6 fdc2 	bl	8010bcc <pbuf_cat>
      r = iprh->next_pbuf;
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1ed      	bne.n	801a030 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a054:	4b1e      	ldr	r3, [pc, #120]	; (801a0d0 <ip4_reass+0x2a4>)
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d102      	bne.n	801a064 <ip4_reass+0x238>
      ipr_prev = NULL;
 801a05e:	2300      	movs	r3, #0
 801a060:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a062:	e010      	b.n	801a086 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a064:	4b1a      	ldr	r3, [pc, #104]	; (801a0d0 <ip4_reass+0x2a4>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a06a:	e007      	b.n	801a07c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a072:	429a      	cmp	r2, r3
 801a074:	d006      	beq.n	801a084 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d1f4      	bne.n	801a06c <ip4_reass+0x240>
 801a082:	e000      	b.n	801a086 <ip4_reass+0x25a>
          break;
 801a084:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a08a:	f7ff fd37 	bl	8019afc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801a08e:	6878      	ldr	r0, [r7, #4]
 801a090:	f7f6 fd5c 	bl	8010b4c <pbuf_clen>
 801a094:	4603      	mov	r3, r0
 801a096:	461a      	mov	r2, r3
 801a098:	4b0c      	ldr	r3, [pc, #48]	; (801a0cc <ip4_reass+0x2a0>)
 801a09a:	881b      	ldrh	r3, [r3, #0]
 801a09c:	1a9b      	subs	r3, r3, r2
 801a09e:	b29a      	uxth	r2, r3
 801a0a0:	4b0a      	ldr	r3, [pc, #40]	; (801a0cc <ip4_reass+0x2a0>)
 801a0a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	e00c      	b.n	801a0c2 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	e00a      	b.n	801a0c2 <ip4_reass+0x296>
    goto nullreturn;
 801a0ac:	bf00      	nop
 801a0ae:	e004      	b.n	801a0ba <ip4_reass+0x28e>
      goto nullreturn;
 801a0b0:	bf00      	nop
 801a0b2:	e002      	b.n	801a0ba <ip4_reass+0x28e>
      goto nullreturn;
 801a0b4:	bf00      	nop
 801a0b6:	e000      	b.n	801a0ba <ip4_reass+0x28e>
    goto nullreturn;
 801a0b8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7f6 fcac 	bl	8010a18 <pbuf_free>
  return NULL;
 801a0c0:	2300      	movs	r3, #0
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3738      	adds	r7, #56	; 0x38
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
 801a0ca:	bf00      	nop
 801a0cc:	24007824 	.word	0x24007824
 801a0d0:	24007820 	.word	0x24007820

0801a0d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801a0d8:	2005      	movs	r0, #5
 801a0da:	f7f5 fe31 	bl	800fd40 <memp_malloc>
 801a0de:	4603      	mov	r3, r0
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	bd80      	pop	{r7, pc}

0801a0e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b082      	sub	sp, #8
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d106      	bne.n	801a100 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a0f2:	4b07      	ldr	r3, [pc, #28]	; (801a110 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a0f4:	f240 22ae 	movw	r2, #686	; 0x2ae
 801a0f8:	4906      	ldr	r1, [pc, #24]	; (801a114 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a0fa:	4807      	ldr	r0, [pc, #28]	; (801a118 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a0fc:	f000 fc82 	bl	801aa04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a100:	6879      	ldr	r1, [r7, #4]
 801a102:	2005      	movs	r0, #5
 801a104:	f7f5 fe92 	bl	800fe2c <memp_free>
}
 801a108:	bf00      	nop
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	0801ec8c 	.word	0x0801ec8c
 801a114:	0801ee18 	.word	0x0801ee18
 801a118:	0801ecf8 	.word	0x0801ecf8

0801a11c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b084      	sub	sp, #16
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d106      	bne.n	801a13c <ipfrag_free_pbuf_custom+0x20>
 801a12e:	4b11      	ldr	r3, [pc, #68]	; (801a174 <ipfrag_free_pbuf_custom+0x58>)
 801a130:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801a134:	4910      	ldr	r1, [pc, #64]	; (801a178 <ipfrag_free_pbuf_custom+0x5c>)
 801a136:	4811      	ldr	r0, [pc, #68]	; (801a17c <ipfrag_free_pbuf_custom+0x60>)
 801a138:	f000 fc64 	bl	801aa04 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801a13c:	68fa      	ldr	r2, [r7, #12]
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	429a      	cmp	r2, r3
 801a142:	d006      	beq.n	801a152 <ipfrag_free_pbuf_custom+0x36>
 801a144:	4b0b      	ldr	r3, [pc, #44]	; (801a174 <ipfrag_free_pbuf_custom+0x58>)
 801a146:	f240 22b9 	movw	r2, #697	; 0x2b9
 801a14a:	490d      	ldr	r1, [pc, #52]	; (801a180 <ipfrag_free_pbuf_custom+0x64>)
 801a14c:	480b      	ldr	r0, [pc, #44]	; (801a17c <ipfrag_free_pbuf_custom+0x60>)
 801a14e:	f000 fc59 	bl	801aa04 <iprintf>
  if (pcr->original != NULL) {
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	695b      	ldr	r3, [r3, #20]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d004      	beq.n	801a164 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	695b      	ldr	r3, [r3, #20]
 801a15e:	4618      	mov	r0, r3
 801a160:	f7f6 fc5a 	bl	8010a18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a164:	68f8      	ldr	r0, [r7, #12]
 801a166:	f7ff ffbd 	bl	801a0e4 <ip_frag_free_pbuf_custom_ref>
}
 801a16a:	bf00      	nop
 801a16c:	3710      	adds	r7, #16
 801a16e:	46bd      	mov	sp, r7
 801a170:	bd80      	pop	{r7, pc}
 801a172:	bf00      	nop
 801a174:	0801ec8c 	.word	0x0801ec8c
 801a178:	0801ee24 	.word	0x0801ee24
 801a17c:	0801ecf8 	.word	0x0801ecf8
 801a180:	0801ee30 	.word	0x0801ee30

0801a184 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b092      	sub	sp, #72	; 0x48
 801a188:	af02      	add	r7, sp, #8
 801a18a:	60f8      	str	r0, [r7, #12]
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a190:	2300      	movs	r3, #0
 801a192:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a198:	3b14      	subs	r3, #20
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	da00      	bge.n	801a1a0 <ip4_frag+0x1c>
 801a19e:	3307      	adds	r3, #7
 801a1a0:	10db      	asrs	r3, r3, #3
 801a1a2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a1a4:	2314      	movs	r3, #20
 801a1a6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1b4:	781b      	ldrb	r3, [r3, #0]
 801a1b6:	f003 030f 	and.w	r3, r3, #15
 801a1ba:	009b      	lsls	r3, r3, #2
 801a1bc:	2b14      	cmp	r3, #20
 801a1be:	d009      	beq.n	801a1d4 <ip4_frag+0x50>
 801a1c0:	4b7a      	ldr	r3, [pc, #488]	; (801a3ac <ip4_frag+0x228>)
 801a1c2:	f240 22e1 	movw	r2, #737	; 0x2e1
 801a1c6:	497a      	ldr	r1, [pc, #488]	; (801a3b0 <ip4_frag+0x22c>)
 801a1c8:	487a      	ldr	r0, [pc, #488]	; (801a3b4 <ip4_frag+0x230>)
 801a1ca:	f000 fc1b 	bl	801aa04 <iprintf>
 801a1ce:	f06f 0305 	mvn.w	r3, #5
 801a1d2:	e0e6      	b.n	801a3a2 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d6:	88db      	ldrh	r3, [r3, #6]
 801a1d8:	b29b      	uxth	r3, r3
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7f5 f9a4 	bl	800f528 <lwip_htons>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801a1e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a1e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a1ea:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801a1ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a1ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d009      	beq.n	801a20a <ip4_frag+0x86>
 801a1f6:	4b6d      	ldr	r3, [pc, #436]	; (801a3ac <ip4_frag+0x228>)
 801a1f8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a1fc:	496e      	ldr	r1, [pc, #440]	; (801a3b8 <ip4_frag+0x234>)
 801a1fe:	486d      	ldr	r0, [pc, #436]	; (801a3b4 <ip4_frag+0x230>)
 801a200:	f000 fc00 	bl	801aa04 <iprintf>
 801a204:	f06f 0305 	mvn.w	r3, #5
 801a208:	e0cb      	b.n	801a3a2 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	891b      	ldrh	r3, [r3, #8]
 801a20e:	3b14      	subs	r3, #20
 801a210:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801a212:	e0bd      	b.n	801a390 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801a214:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a216:	00da      	lsls	r2, r3, #3
 801a218:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a21a:	4293      	cmp	r3, r2
 801a21c:	bfa8      	it	ge
 801a21e:	4613      	movge	r3, r2
 801a220:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a222:	2200      	movs	r2, #0
 801a224:	2114      	movs	r1, #20
 801a226:	2002      	movs	r0, #2
 801a228:	f7f6 f87e 	bl	8010328 <pbuf_alloc>
 801a22c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801a22e:	6a3b      	ldr	r3, [r7, #32]
 801a230:	2b00      	cmp	r3, #0
 801a232:	f000 80b3 	beq.w	801a39c <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	895b      	ldrh	r3, [r3, #10]
 801a23a:	2b13      	cmp	r3, #19
 801a23c:	d806      	bhi.n	801a24c <ip4_frag+0xc8>
 801a23e:	4b5b      	ldr	r3, [pc, #364]	; (801a3ac <ip4_frag+0x228>)
 801a240:	f44f 7242 	mov.w	r2, #776	; 0x308
 801a244:	495d      	ldr	r1, [pc, #372]	; (801a3bc <ip4_frag+0x238>)
 801a246:	485b      	ldr	r0, [pc, #364]	; (801a3b4 <ip4_frag+0x230>)
 801a248:	f000 fbdc 	bl	801aa04 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a24c:	6a3b      	ldr	r3, [r7, #32]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	2214      	movs	r2, #20
 801a252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a254:	4618      	mov	r0, r3
 801a256:	f000 fbbf 	bl	801a9d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a25a:	6a3b      	ldr	r3, [r7, #32]
 801a25c:	685b      	ldr	r3, [r3, #4]
 801a25e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801a260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a262:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801a264:	e04f      	b.n	801a306 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	895a      	ldrh	r2, [r3, #10]
 801a26a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a270:	8b7a      	ldrh	r2, [r7, #26]
 801a272:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a274:	4293      	cmp	r3, r2
 801a276:	bf28      	it	cs
 801a278:	4613      	movcs	r3, r2
 801a27a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a27c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d105      	bne.n	801a28e <ip4_frag+0x10a>
        poff = 0;
 801a282:	2300      	movs	r3, #0
 801a284:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	60fb      	str	r3, [r7, #12]
        continue;
 801a28c:	e03b      	b.n	801a306 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a28e:	f7ff ff21 	bl	801a0d4 <ip_frag_alloc_pbuf_custom_ref>
 801a292:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d103      	bne.n	801a2a2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801a29a:	6a38      	ldr	r0, [r7, #32]
 801a29c:	f7f6 fbbc 	bl	8010a18 <pbuf_free>
        goto memerr;
 801a2a0:	e07d      	b.n	801a39e <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a2a2:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a2a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a2aa:	4413      	add	r3, r2
 801a2ac:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801a2ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a2b0:	9201      	str	r2, [sp, #4]
 801a2b2:	9300      	str	r3, [sp, #0]
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2202      	movs	r2, #2
 801a2b8:	2004      	movs	r0, #4
 801a2ba:	f7f6 f9cf 	bl	801065c <pbuf_alloced_custom>
 801a2be:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801a2c0:	693b      	ldr	r3, [r7, #16]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d106      	bne.n	801a2d4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a2c6:	6978      	ldr	r0, [r7, #20]
 801a2c8:	f7ff ff0c 	bl	801a0e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a2cc:	6a38      	ldr	r0, [r7, #32]
 801a2ce:	f7f6 fba3 	bl	8010a18 <pbuf_free>
        goto memerr;
 801a2d2:	e064      	b.n	801a39e <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 801a2d4:	68f8      	ldr	r0, [r7, #12]
 801a2d6:	f7f6 fc51 	bl	8010b7c <pbuf_ref>
      pcr->original = p;
 801a2da:	697b      	ldr	r3, [r7, #20]
 801a2dc:	68fa      	ldr	r2, [r7, #12]
 801a2de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a2e0:	697b      	ldr	r3, [r7, #20]
 801a2e2:	4a37      	ldr	r2, [pc, #220]	; (801a3c0 <ip4_frag+0x23c>)
 801a2e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a2e6:	6939      	ldr	r1, [r7, #16]
 801a2e8:	6a38      	ldr	r0, [r7, #32]
 801a2ea:	f7f6 fc6f 	bl	8010bcc <pbuf_cat>
      left_to_copy -= newpbuflen;
 801a2ee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801a2f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a2f2:	1ad3      	subs	r3, r2, r3
 801a2f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801a2f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d004      	beq.n	801a306 <ip4_frag+0x182>
        poff = 0;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a306:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d1ac      	bne.n	801a266 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801a30c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801a30e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a310:	4413      	add	r3, r2
 801a312:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a318:	f1a3 0213 	sub.w	r2, r3, #19
 801a31c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a31e:	429a      	cmp	r2, r3
 801a320:	bfcc      	ite	gt
 801a322:	2301      	movgt	r3, #1
 801a324:	2300      	movle	r3, #0
 801a326:	b2db      	uxtb	r3, r3
 801a328:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a32a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a330:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801a332:	69fb      	ldr	r3, [r7, #28]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d103      	bne.n	801a340 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 801a338:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a33a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a33e:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a340:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a342:	4618      	mov	r0, r3
 801a344:	f7f5 f8f0 	bl	800f528 <lwip_htons>
 801a348:	4603      	mov	r3, r0
 801a34a:	461a      	mov	r2, r3
 801a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a34e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801a350:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a352:	3314      	adds	r3, #20
 801a354:	b29b      	uxth	r3, r3
 801a356:	4618      	mov	r0, r3
 801a358:	f7f5 f8e6 	bl	800f528 <lwip_htons>
 801a35c:	4603      	mov	r3, r0
 801a35e:	461a      	mov	r2, r3
 801a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a362:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a366:	2200      	movs	r2, #0
 801a368:	729a      	strb	r2, [r3, #10]
 801a36a:	2200      	movs	r2, #0
 801a36c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	695b      	ldr	r3, [r3, #20]
 801a372:	687a      	ldr	r2, [r7, #4]
 801a374:	6a39      	ldr	r1, [r7, #32]
 801a376:	68b8      	ldr	r0, [r7, #8]
 801a378:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a37a:	6a38      	ldr	r0, [r7, #32]
 801a37c:	f7f6 fb4c 	bl	8010a18 <pbuf_free>
    left -= fragsize;
 801a380:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a384:	1ad3      	subs	r3, r2, r3
 801a386:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801a388:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a38a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a38c:	4413      	add	r3, r2
 801a38e:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801a390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a392:	2b00      	cmp	r3, #0
 801a394:	f47f af3e 	bne.w	801a214 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a398:	2300      	movs	r3, #0
 801a39a:	e002      	b.n	801a3a2 <ip4_frag+0x21e>
      goto memerr;
 801a39c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a39e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	3740      	adds	r7, #64	; 0x40
 801a3a6:	46bd      	mov	sp, r7
 801a3a8:	bd80      	pop	{r7, pc}
 801a3aa:	bf00      	nop
 801a3ac:	0801ec8c 	.word	0x0801ec8c
 801a3b0:	0801ee3c 	.word	0x0801ee3c
 801a3b4:	0801ecf8 	.word	0x0801ecf8
 801a3b8:	0801ee64 	.word	0x0801ee64
 801a3bc:	0801ee80 	.word	0x0801ee80
 801a3c0:	0801a11d 	.word	0x0801a11d

0801a3c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b086      	sub	sp, #24
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801a3ce:	230e      	movs	r3, #14
 801a3d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	895b      	ldrh	r3, [r3, #10]
 801a3d6:	2b0e      	cmp	r3, #14
 801a3d8:	d977      	bls.n	801a4ca <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	685b      	ldr	r3, [r3, #4]
 801a3de:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a3e0:	693b      	ldr	r3, [r7, #16]
 801a3e2:	7b1a      	ldrb	r2, [r3, #12]
 801a3e4:	7b5b      	ldrb	r3, [r3, #13]
 801a3e6:	021b      	lsls	r3, r3, #8
 801a3e8:	4313      	orrs	r3, r2
 801a3ea:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a3ec:	693b      	ldr	r3, [r7, #16]
 801a3ee:	781b      	ldrb	r3, [r3, #0]
 801a3f0:	f003 0301 	and.w	r3, r3, #1
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d023      	beq.n	801a440 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a3f8:	693b      	ldr	r3, [r7, #16]
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	2b01      	cmp	r3, #1
 801a3fe:	d10f      	bne.n	801a420 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	785b      	ldrb	r3, [r3, #1]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d11b      	bne.n	801a440 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a40c:	2b5e      	cmp	r3, #94	; 0x5e
 801a40e:	d117      	bne.n	801a440 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	7b5b      	ldrb	r3, [r3, #13]
 801a414:	f043 0310 	orr.w	r3, r3, #16
 801a418:	b2da      	uxtb	r2, r3
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	735a      	strb	r2, [r3, #13]
 801a41e:	e00f      	b.n	801a440 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a420:	693b      	ldr	r3, [r7, #16]
 801a422:	2206      	movs	r2, #6
 801a424:	4931      	ldr	r1, [pc, #196]	; (801a4ec <ethernet_input+0x128>)
 801a426:	4618      	mov	r0, r3
 801a428:	f000 fac6 	bl	801a9b8 <memcmp>
 801a42c:	4603      	mov	r3, r0
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d106      	bne.n	801a440 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	7b5b      	ldrb	r3, [r3, #13]
 801a436:	f043 0308 	orr.w	r3, r3, #8
 801a43a:	b2da      	uxtb	r2, r3
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a440:	89fb      	ldrh	r3, [r7, #14]
 801a442:	2b08      	cmp	r3, #8
 801a444:	d003      	beq.n	801a44e <ethernet_input+0x8a>
 801a446:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a44a:	d01e      	beq.n	801a48a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a44c:	e046      	b.n	801a4dc <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a44e:	683b      	ldr	r3, [r7, #0]
 801a450:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801a454:	f003 0308 	and.w	r3, r3, #8
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d038      	beq.n	801a4ce <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	895b      	ldrh	r3, [r3, #10]
 801a460:	461a      	mov	r2, r3
 801a462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a466:	429a      	cmp	r2, r3
 801a468:	db33      	blt.n	801a4d2 <ethernet_input+0x10e>
 801a46a:	8afb      	ldrh	r3, [r7, #22]
 801a46c:	425b      	negs	r3, r3
 801a46e:	b29b      	uxth	r3, r3
 801a470:	b21b      	sxth	r3, r3
 801a472:	4619      	mov	r1, r3
 801a474:	6878      	ldr	r0, [r7, #4]
 801a476:	f7f6 faab 	bl	80109d0 <pbuf_header>
 801a47a:	4603      	mov	r3, r0
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d128      	bne.n	801a4d2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 801a480:	6839      	ldr	r1, [r7, #0]
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7fe fedc 	bl	8019240 <ip4_input>
      break;
 801a488:	e01d      	b.n	801a4c6 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a48a:	683b      	ldr	r3, [r7, #0]
 801a48c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801a490:	f003 0308 	and.w	r3, r3, #8
 801a494:	2b00      	cmp	r3, #0
 801a496:	d01e      	beq.n	801a4d6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	895b      	ldrh	r3, [r3, #10]
 801a49c:	461a      	mov	r2, r3
 801a49e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	db19      	blt.n	801a4da <ethernet_input+0x116>
 801a4a6:	8afb      	ldrh	r3, [r7, #22]
 801a4a8:	425b      	negs	r3, r3
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	b21b      	sxth	r3, r3
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	f7f6 fa8d 	bl	80109d0 <pbuf_header>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d10e      	bne.n	801a4da <ethernet_input+0x116>
        etharp_input(p, netif);
 801a4bc:	6839      	ldr	r1, [r7, #0]
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f7fe f8a8 	bl	8018614 <etharp_input>
      break;
 801a4c4:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	e00c      	b.n	801a4e4 <ethernet_input+0x120>
    goto free_and_return;
 801a4ca:	bf00      	nop
 801a4cc:	e006      	b.n	801a4dc <ethernet_input+0x118>
        goto free_and_return;
 801a4ce:	bf00      	nop
 801a4d0:	e004      	b.n	801a4dc <ethernet_input+0x118>
        goto free_and_return;
 801a4d2:	bf00      	nop
 801a4d4:	e002      	b.n	801a4dc <ethernet_input+0x118>
        goto free_and_return;
 801a4d6:	bf00      	nop
 801a4d8:	e000      	b.n	801a4dc <ethernet_input+0x118>
        goto free_and_return;
 801a4da:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a4dc:	6878      	ldr	r0, [r7, #4]
 801a4de:	f7f6 fa9b 	bl	8010a18 <pbuf_free>
  return ERR_OK;
 801a4e2:	2300      	movs	r3, #0
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3718      	adds	r7, #24
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}
 801a4ec:	0801f220 	.word	0x0801f220

0801a4f0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b086      	sub	sp, #24
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	60f8      	str	r0, [r7, #12]
 801a4f8:	60b9      	str	r1, [r7, #8]
 801a4fa:	607a      	str	r2, [r7, #4]
 801a4fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a4fe:	8c3b      	ldrh	r3, [r7, #32]
 801a500:	4618      	mov	r0, r3
 801a502:	f7f5 f811 	bl	800f528 <lwip_htons>
 801a506:	4603      	mov	r3, r0
 801a508:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801a50a:	210e      	movs	r1, #14
 801a50c:	68b8      	ldr	r0, [r7, #8]
 801a50e:	f7f6 fa5f 	bl	80109d0 <pbuf_header>
 801a512:	4603      	mov	r3, r0
 801a514:	2b00      	cmp	r3, #0
 801a516:	d125      	bne.n	801a564 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	685b      	ldr	r3, [r3, #4]
 801a51c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	8afa      	ldrh	r2, [r7, #22]
 801a522:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	2206      	movs	r2, #6
 801a528:	6839      	ldr	r1, [r7, #0]
 801a52a:	4618      	mov	r0, r3
 801a52c:	f000 fa54 	bl	801a9d8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 801a530:	693b      	ldr	r3, [r7, #16]
 801a532:	3306      	adds	r3, #6
 801a534:	2206      	movs	r2, #6
 801a536:	6879      	ldr	r1, [r7, #4]
 801a538:	4618      	mov	r0, r3
 801a53a:	f000 fa4d 	bl	801a9d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a544:	2b06      	cmp	r3, #6
 801a546:	d006      	beq.n	801a556 <ethernet_output+0x66>
 801a548:	4b0a      	ldr	r3, [pc, #40]	; (801a574 <ethernet_output+0x84>)
 801a54a:	f240 122b 	movw	r2, #299	; 0x12b
 801a54e:	490a      	ldr	r1, [pc, #40]	; (801a578 <ethernet_output+0x88>)
 801a550:	480a      	ldr	r0, [pc, #40]	; (801a57c <ethernet_output+0x8c>)
 801a552:	f000 fa57 	bl	801aa04 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	699b      	ldr	r3, [r3, #24]
 801a55a:	68b9      	ldr	r1, [r7, #8]
 801a55c:	68f8      	ldr	r0, [r7, #12]
 801a55e:	4798      	blx	r3
 801a560:	4603      	mov	r3, r0
 801a562:	e002      	b.n	801a56a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a564:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a566:	f06f 0301 	mvn.w	r3, #1
}
 801a56a:	4618      	mov	r0, r3
 801a56c:	3718      	adds	r7, #24
 801a56e:	46bd      	mov	sp, r7
 801a570:	bd80      	pop	{r7, pc}
 801a572:	bf00      	nop
 801a574:	0801eea0 	.word	0x0801eea0
 801a578:	0801eefc 	.word	0x0801eefc
 801a57c:	0801ef30 	.word	0x0801ef30

0801a580 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b086      	sub	sp, #24
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
 801a588:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a58a:	683b      	ldr	r3, [r7, #0]
 801a58c:	60bb      	str	r3, [r7, #8]
 801a58e:	2304      	movs	r3, #4
 801a590:	60fb      	str	r3, [r7, #12]
 801a592:	2300      	movs	r3, #0
 801a594:	613b      	str	r3, [r7, #16]
 801a596:	2300      	movs	r3, #0
 801a598:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a59a:	f107 0308 	add.w	r3, r7, #8
 801a59e:	2100      	movs	r1, #0
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f7ef ffd6 	bl	800a552 <osMessageCreate>
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d102      	bne.n	801a5ba <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a5b4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5b8:	e000      	b.n	801a5bc <sys_mbox_new+0x3c>

  return ERR_OK;
 801a5ba:	2300      	movs	r3, #0
}
 801a5bc:	4618      	mov	r0, r3
 801a5be:	3718      	adds	r7, #24
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}

0801a5c4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b082      	sub	sp, #8
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	f7f0 f89b 	bl	800a70c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7f0 f8ac 	bl	800a738 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a5e0:	bf00      	nop
 801a5e2:	3708      	adds	r7, #8
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}

0801a5e8 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b082      	sub	sp, #8
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	6078      	str	r0, [r7, #4]
 801a5f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a5f2:	bf00      	nop
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	6839      	ldr	r1, [r7, #0]
 801a5fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ef ffd0 	bl	800a5a4 <osMessagePut>
 801a604:	4603      	mov	r3, r0
 801a606:	2b00      	cmp	r3, #0
 801a608:	d1f4      	bne.n	801a5f4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801a60a:	bf00      	nop
 801a60c:	bf00      	nop
 801a60e:	3708      	adds	r7, #8
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}

0801a614 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b084      	sub	sp, #16
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
 801a61c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	6839      	ldr	r1, [r7, #0]
 801a624:	2200      	movs	r2, #0
 801a626:	4618      	mov	r0, r3
 801a628:	f7ef ffbc 	bl	800a5a4 <osMessagePut>
 801a62c:	4603      	mov	r3, r0
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d102      	bne.n	801a638 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a632:	2300      	movs	r3, #0
 801a634:	73fb      	strb	r3, [r7, #15]
 801a636:	e001      	b.n	801a63c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a638:	23ff      	movs	r3, #255	; 0xff
 801a63a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a640:	4618      	mov	r0, r3
 801a642:	3710      	adds	r7, #16
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}

0801a648 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b08c      	sub	sp, #48	; 0x30
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	61f8      	str	r0, [r7, #28]
 801a650:	61b9      	str	r1, [r7, #24]
 801a652:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a654:	f7ef fda7 	bl	800a1a6 <osKernelSysTick>
 801a658:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d017      	beq.n	801a690 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a660:	69fb      	ldr	r3, [r7, #28]
 801a662:	6819      	ldr	r1, [r3, #0]
 801a664:	f107 0320 	add.w	r3, r7, #32
 801a668:	697a      	ldr	r2, [r7, #20]
 801a66a:	4618      	mov	r0, r3
 801a66c:	f7ef ffda 	bl	800a624 <osMessageGet>

    if(event.status == osEventMessage)
 801a670:	6a3b      	ldr	r3, [r7, #32]
 801a672:	2b10      	cmp	r3, #16
 801a674:	d109      	bne.n	801a68a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a678:	461a      	mov	r2, r3
 801a67a:	69bb      	ldr	r3, [r7, #24]
 801a67c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a67e:	f7ef fd92 	bl	800a1a6 <osKernelSysTick>
 801a682:	4602      	mov	r2, r0
 801a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a686:	1ad3      	subs	r3, r2, r3
 801a688:	e019      	b.n	801a6be <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a68a:	f04f 33ff 	mov.w	r3, #4294967295
 801a68e:	e016      	b.n	801a6be <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a690:	69fb      	ldr	r3, [r7, #28]
 801a692:	6819      	ldr	r1, [r3, #0]
 801a694:	463b      	mov	r3, r7
 801a696:	f04f 32ff 	mov.w	r2, #4294967295
 801a69a:	4618      	mov	r0, r3
 801a69c:	f7ef ffc2 	bl	800a624 <osMessageGet>
 801a6a0:	f107 0320 	add.w	r3, r7, #32
 801a6a4:	463a      	mov	r2, r7
 801a6a6:	ca07      	ldmia	r2, {r0, r1, r2}
 801a6a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a6b4:	f7ef fd77 	bl	800a1a6 <osKernelSysTick>
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6bc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3730      	adds	r7, #48	; 0x30
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}

0801a6c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a6c6:	b580      	push	{r7, lr}
 801a6c8:	b086      	sub	sp, #24
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	6078      	str	r0, [r7, #4]
 801a6ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6819      	ldr	r1, [r3, #0]
 801a6d4:	f107 030c 	add.w	r3, r7, #12
 801a6d8:	2200      	movs	r2, #0
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7ef ffa2 	bl	800a624 <osMessageGet>

  if(event.status == osEventMessage)
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	2b10      	cmp	r3, #16
 801a6e4:	d105      	bne.n	801a6f2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	e001      	b.n	801a6f6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a6f2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	3718      	adds	r7, #24
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	bd80      	pop	{r7, pc}

0801a6fe <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a6fe:	b480      	push	{r7}
 801a700:	b083      	sub	sp, #12
 801a702:	af00      	add	r7, sp, #0
 801a704:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d101      	bne.n	801a712 <sys_mbox_valid+0x14>
    return 0;
 801a70e:	2300      	movs	r3, #0
 801a710:	e000      	b.n	801a714 <sys_mbox_valid+0x16>
  else
    return 1;
 801a712:	2301      	movs	r3, #1
}
 801a714:	4618      	mov	r0, r3
 801a716:	370c      	adds	r7, #12
 801a718:	46bd      	mov	sp, r7
 801a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71e:	4770      	bx	lr

0801a720 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a720:	b480      	push	{r7}
 801a722:	b083      	sub	sp, #12
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2200      	movs	r2, #0
 801a72c:	601a      	str	r2, [r3, #0]
}
 801a72e:	bf00      	nop
 801a730:	370c      	adds	r7, #12
 801a732:	46bd      	mov	sp, r7
 801a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a738:	4770      	bx	lr

0801a73a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a73a:	b580      	push	{r7, lr}
 801a73c:	b084      	sub	sp, #16
 801a73e:	af00      	add	r7, sp, #0
 801a740:	6078      	str	r0, [r7, #4]
 801a742:	460b      	mov	r3, r1
 801a744:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a746:	2300      	movs	r3, #0
 801a748:	60bb      	str	r3, [r7, #8]
 801a74a:	2300      	movs	r3, #0
 801a74c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a74e:	f107 0308 	add.w	r3, r7, #8
 801a752:	2101      	movs	r1, #1
 801a754:	4618      	mov	r0, r3
 801a756:	f7ef fe33 	bl	800a3c0 <osSemaphoreCreate>
 801a75a:	4602      	mov	r2, r0
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d102      	bne.n	801a76e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a768:	f04f 33ff 	mov.w	r3, #4294967295
 801a76c:	e009      	b.n	801a782 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a76e:	78fb      	ldrb	r3, [r7, #3]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d105      	bne.n	801a780 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	2100      	movs	r1, #0
 801a77a:	4618      	mov	r0, r3
 801a77c:	f7ef fe52 	bl	800a424 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a780:	2300      	movs	r3, #0
}
 801a782:	4618      	mov	r0, r3
 801a784:	3710      	adds	r7, #16
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}

0801a78a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a78a:	b580      	push	{r7, lr}
 801a78c:	b084      	sub	sp, #16
 801a78e:	af00      	add	r7, sp, #0
 801a790:	6078      	str	r0, [r7, #4]
 801a792:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a794:	f7ef fd07 	bl	800a1a6 <osKernelSysTick>
 801a798:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d011      	beq.n	801a7c4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	6839      	ldr	r1, [r7, #0]
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f7ef fe3c 	bl	800a424 <osSemaphoreWait>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d105      	bne.n	801a7be <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a7b2:	f7ef fcf8 	bl	800a1a6 <osKernelSysTick>
 801a7b6:	4602      	mov	r2, r0
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	e012      	b.n	801a7e4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a7be:	f04f 33ff 	mov.w	r3, #4294967295
 801a7c2:	e00f      	b.n	801a7e4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a7c4:	bf00      	nop
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	f04f 31ff 	mov.w	r1, #4294967295
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f7ef fe28 	bl	800a424 <osSemaphoreWait>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d1f5      	bne.n	801a7c6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a7da:	f7ef fce4 	bl	800a1a6 <osKernelSysTick>
 801a7de:	4602      	mov	r2, r0
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	3710      	adds	r7, #16
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd80      	pop	{r7, pc}

0801a7ec <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f7ef fe61 	bl	800a4c0 <osSemaphoreRelease>
}
 801a7fe:	bf00      	nop
 801a800:	3708      	adds	r7, #8
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}

0801a806 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a806:	b580      	push	{r7, lr}
 801a808:	b082      	sub	sp, #8
 801a80a:	af00      	add	r7, sp, #0
 801a80c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	4618      	mov	r0, r3
 801a814:	f7ef fe8a 	bl	800a52c <osSemaphoreDelete>
}
 801a818:	bf00      	nop
 801a81a:	3708      	adds	r7, #8
 801a81c:	46bd      	mov	sp, r7
 801a81e:	bd80      	pop	{r7, pc}

0801a820 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a820:	b480      	push	{r7}
 801a822:	b083      	sub	sp, #12
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d101      	bne.n	801a834 <sys_sem_valid+0x14>
    return 0;
 801a830:	2300      	movs	r3, #0
 801a832:	e000      	b.n	801a836 <sys_sem_valid+0x16>
  else
    return 1;
 801a834:	2301      	movs	r3, #1
}
 801a836:	4618      	mov	r0, r3
 801a838:	370c      	adds	r7, #12
 801a83a:	46bd      	mov	sp, r7
 801a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a840:	4770      	bx	lr

0801a842 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a842:	b480      	push	{r7}
 801a844:	b083      	sub	sp, #12
 801a846:	af00      	add	r7, sp, #0
 801a848:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	2200      	movs	r2, #0
 801a84e:	601a      	str	r2, [r3, #0]
}
 801a850:	bf00      	nop
 801a852:	370c      	adds	r7, #12
 801a854:	46bd      	mov	sp, r7
 801a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a85a:	4770      	bx	lr

0801a85c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a860:	4803      	ldr	r0, [pc, #12]	; (801a870 <sys_init+0x14>)
 801a862:	f7ef fd10 	bl	800a286 <osMutexCreate>
 801a866:	4603      	mov	r3, r0
 801a868:	4a02      	ldr	r2, [pc, #8]	; (801a874 <sys_init+0x18>)
 801a86a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a86c:	bf00      	nop
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	0801f230 	.word	0x0801f230
 801a874:	2400782c 	.word	0x2400782c

0801a878 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a878:	b580      	push	{r7, lr}
 801a87a:	b084      	sub	sp, #16
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a880:	2300      	movs	r3, #0
 801a882:	60bb      	str	r3, [r7, #8]
 801a884:	2300      	movs	r3, #0
 801a886:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a888:	f107 0308 	add.w	r3, r7, #8
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7ef fcfa 	bl	800a286 <osMutexCreate>
 801a892:	4602      	mov	r2, r0
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d102      	bne.n	801a8a6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8a4:	e000      	b.n	801a8a8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a8a6:	2300      	movs	r3, #0
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	3710      	adds	r7, #16
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}

0801a8b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b082      	sub	sp, #8
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f04f 31ff 	mov.w	r1, #4294967295
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7ef fcf9 	bl	800a2b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a8c6:	bf00      	nop
 801a8c8:	3708      	adds	r7, #8
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}

0801a8ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a8ce:	b580      	push	{r7, lr}
 801a8d0:	b082      	sub	sp, #8
 801a8d2:	af00      	add	r7, sp, #0
 801a8d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7ef fd3a 	bl	800a354 <osMutexRelease>
}
 801a8e0:	bf00      	nop
 801a8e2:	3708      	adds	r7, #8
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}

0801a8e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b08c      	sub	sp, #48	; 0x30
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
 801a8f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a8f6:	f107 0314 	add.w	r3, r7, #20
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	601a      	str	r2, [r3, #0]
 801a8fe:	605a      	str	r2, [r3, #4]
 801a900:	609a      	str	r2, [r3, #8]
 801a902:	60da      	str	r2, [r3, #12]
 801a904:	611a      	str	r2, [r3, #16]
 801a906:	615a      	str	r2, [r3, #20]
 801a908:	619a      	str	r2, [r3, #24]
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	617b      	str	r3, [r7, #20]
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	61bb      	str	r3, [r7, #24]
 801a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a914:	b21b      	sxth	r3, r3
 801a916:	83bb      	strh	r3, [r7, #28]
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a91c:	f107 0314 	add.w	r3, r7, #20
 801a920:	6879      	ldr	r1, [r7, #4]
 801a922:	4618      	mov	r0, r3
 801a924:	f7ef fc4f 	bl	800a1c6 <osThreadCreate>
 801a928:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3730      	adds	r7, #48	; 0x30
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}
	...

0801a934 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a934:	b580      	push	{r7, lr}
 801a936:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a938:	4b04      	ldr	r3, [pc, #16]	; (801a94c <sys_arch_protect+0x18>)
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	f04f 31ff 	mov.w	r1, #4294967295
 801a940:	4618      	mov	r0, r3
 801a942:	f7ef fcb9 	bl	800a2b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a946:	2301      	movs	r3, #1
}
 801a948:	4618      	mov	r0, r3
 801a94a:	bd80      	pop	{r7, pc}
 801a94c:	2400782c 	.word	0x2400782c

0801a950 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b082      	sub	sp, #8
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a958:	4b04      	ldr	r3, [pc, #16]	; (801a96c <sys_arch_unprotect+0x1c>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	4618      	mov	r0, r3
 801a95e:	f7ef fcf9 	bl	800a354 <osMutexRelease>
}
 801a962:	bf00      	nop
 801a964:	3708      	adds	r7, #8
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	2400782c 	.word	0x2400782c

0801a970 <__libc_init_array>:
 801a970:	b570      	push	{r4, r5, r6, lr}
 801a972:	4d0d      	ldr	r5, [pc, #52]	; (801a9a8 <__libc_init_array+0x38>)
 801a974:	4c0d      	ldr	r4, [pc, #52]	; (801a9ac <__libc_init_array+0x3c>)
 801a976:	1b64      	subs	r4, r4, r5
 801a978:	10a4      	asrs	r4, r4, #2
 801a97a:	2600      	movs	r6, #0
 801a97c:	42a6      	cmp	r6, r4
 801a97e:	d109      	bne.n	801a994 <__libc_init_array+0x24>
 801a980:	4d0b      	ldr	r5, [pc, #44]	; (801a9b0 <__libc_init_array+0x40>)
 801a982:	4c0c      	ldr	r4, [pc, #48]	; (801a9b4 <__libc_init_array+0x44>)
 801a984:	f001 fa70 	bl	801be68 <_init>
 801a988:	1b64      	subs	r4, r4, r5
 801a98a:	10a4      	asrs	r4, r4, #2
 801a98c:	2600      	movs	r6, #0
 801a98e:	42a6      	cmp	r6, r4
 801a990:	d105      	bne.n	801a99e <__libc_init_array+0x2e>
 801a992:	bd70      	pop	{r4, r5, r6, pc}
 801a994:	f855 3b04 	ldr.w	r3, [r5], #4
 801a998:	4798      	blx	r3
 801a99a:	3601      	adds	r6, #1
 801a99c:	e7ee      	b.n	801a97c <__libc_init_array+0xc>
 801a99e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a9a2:	4798      	blx	r3
 801a9a4:	3601      	adds	r6, #1
 801a9a6:	e7f2      	b.n	801a98e <__libc_init_array+0x1e>
 801a9a8:	0801f388 	.word	0x0801f388
 801a9ac:	0801f388 	.word	0x0801f388
 801a9b0:	0801f388 	.word	0x0801f388
 801a9b4:	0801f38c 	.word	0x0801f38c

0801a9b8 <memcmp>:
 801a9b8:	b510      	push	{r4, lr}
 801a9ba:	3901      	subs	r1, #1
 801a9bc:	4402      	add	r2, r0
 801a9be:	4290      	cmp	r0, r2
 801a9c0:	d101      	bne.n	801a9c6 <memcmp+0xe>
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	e005      	b.n	801a9d2 <memcmp+0x1a>
 801a9c6:	7803      	ldrb	r3, [r0, #0]
 801a9c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a9cc:	42a3      	cmp	r3, r4
 801a9ce:	d001      	beq.n	801a9d4 <memcmp+0x1c>
 801a9d0:	1b18      	subs	r0, r3, r4
 801a9d2:	bd10      	pop	{r4, pc}
 801a9d4:	3001      	adds	r0, #1
 801a9d6:	e7f2      	b.n	801a9be <memcmp+0x6>

0801a9d8 <memcpy>:
 801a9d8:	440a      	add	r2, r1
 801a9da:	4291      	cmp	r1, r2
 801a9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801a9e0:	d100      	bne.n	801a9e4 <memcpy+0xc>
 801a9e2:	4770      	bx	lr
 801a9e4:	b510      	push	{r4, lr}
 801a9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a9ee:	4291      	cmp	r1, r2
 801a9f0:	d1f9      	bne.n	801a9e6 <memcpy+0xe>
 801a9f2:	bd10      	pop	{r4, pc}

0801a9f4 <memset>:
 801a9f4:	4402      	add	r2, r0
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	4293      	cmp	r3, r2
 801a9fa:	d100      	bne.n	801a9fe <memset+0xa>
 801a9fc:	4770      	bx	lr
 801a9fe:	f803 1b01 	strb.w	r1, [r3], #1
 801aa02:	e7f9      	b.n	801a9f8 <memset+0x4>

0801aa04 <iprintf>:
 801aa04:	b40f      	push	{r0, r1, r2, r3}
 801aa06:	4b0a      	ldr	r3, [pc, #40]	; (801aa30 <iprintf+0x2c>)
 801aa08:	b513      	push	{r0, r1, r4, lr}
 801aa0a:	681c      	ldr	r4, [r3, #0]
 801aa0c:	b124      	cbz	r4, 801aa18 <iprintf+0x14>
 801aa0e:	69a3      	ldr	r3, [r4, #24]
 801aa10:	b913      	cbnz	r3, 801aa18 <iprintf+0x14>
 801aa12:	4620      	mov	r0, r4
 801aa14:	f000 f8f6 	bl	801ac04 <__sinit>
 801aa18:	ab05      	add	r3, sp, #20
 801aa1a:	9a04      	ldr	r2, [sp, #16]
 801aa1c:	68a1      	ldr	r1, [r4, #8]
 801aa1e:	9301      	str	r3, [sp, #4]
 801aa20:	4620      	mov	r0, r4
 801aa22:	f000 fc0f 	bl	801b244 <_vfiprintf_r>
 801aa26:	b002      	add	sp, #8
 801aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa2c:	b004      	add	sp, #16
 801aa2e:	4770      	bx	lr
 801aa30:	24000038 	.word	0x24000038

0801aa34 <rand>:
 801aa34:	4b16      	ldr	r3, [pc, #88]	; (801aa90 <rand+0x5c>)
 801aa36:	b510      	push	{r4, lr}
 801aa38:	681c      	ldr	r4, [r3, #0]
 801aa3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aa3c:	b9b3      	cbnz	r3, 801aa6c <rand+0x38>
 801aa3e:	2018      	movs	r0, #24
 801aa40:	f000 f992 	bl	801ad68 <malloc>
 801aa44:	63a0      	str	r0, [r4, #56]	; 0x38
 801aa46:	b928      	cbnz	r0, 801aa54 <rand+0x20>
 801aa48:	4602      	mov	r2, r0
 801aa4a:	4b12      	ldr	r3, [pc, #72]	; (801aa94 <rand+0x60>)
 801aa4c:	4812      	ldr	r0, [pc, #72]	; (801aa98 <rand+0x64>)
 801aa4e:	214e      	movs	r1, #78	; 0x4e
 801aa50:	f000 f862 	bl	801ab18 <__assert_func>
 801aa54:	4a11      	ldr	r2, [pc, #68]	; (801aa9c <rand+0x68>)
 801aa56:	4b12      	ldr	r3, [pc, #72]	; (801aaa0 <rand+0x6c>)
 801aa58:	e9c0 2300 	strd	r2, r3, [r0]
 801aa5c:	4b11      	ldr	r3, [pc, #68]	; (801aaa4 <rand+0x70>)
 801aa5e:	6083      	str	r3, [r0, #8]
 801aa60:	230b      	movs	r3, #11
 801aa62:	8183      	strh	r3, [r0, #12]
 801aa64:	2201      	movs	r2, #1
 801aa66:	2300      	movs	r3, #0
 801aa68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aa6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801aa6e:	4a0e      	ldr	r2, [pc, #56]	; (801aaa8 <rand+0x74>)
 801aa70:	6920      	ldr	r0, [r4, #16]
 801aa72:	6963      	ldr	r3, [r4, #20]
 801aa74:	490d      	ldr	r1, [pc, #52]	; (801aaac <rand+0x78>)
 801aa76:	4342      	muls	r2, r0
 801aa78:	fb01 2203 	mla	r2, r1, r3, r2
 801aa7c:	fba0 0101 	umull	r0, r1, r0, r1
 801aa80:	1c43      	adds	r3, r0, #1
 801aa82:	eb42 0001 	adc.w	r0, r2, r1
 801aa86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801aa8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aa8e:	bd10      	pop	{r4, pc}
 801aa90:	24000038 	.word	0x24000038
 801aa94:	0801f23c 	.word	0x0801f23c
 801aa98:	0801f253 	.word	0x0801f253
 801aa9c:	abcd330e 	.word	0xabcd330e
 801aaa0:	e66d1234 	.word	0xe66d1234
 801aaa4:	0005deec 	.word	0x0005deec
 801aaa8:	5851f42d 	.word	0x5851f42d
 801aaac:	4c957f2d 	.word	0x4c957f2d

0801aab0 <siprintf>:
 801aab0:	b40e      	push	{r1, r2, r3}
 801aab2:	b500      	push	{lr}
 801aab4:	b09c      	sub	sp, #112	; 0x70
 801aab6:	ab1d      	add	r3, sp, #116	; 0x74
 801aab8:	9002      	str	r0, [sp, #8]
 801aaba:	9006      	str	r0, [sp, #24]
 801aabc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aac0:	4809      	ldr	r0, [pc, #36]	; (801aae8 <siprintf+0x38>)
 801aac2:	9107      	str	r1, [sp, #28]
 801aac4:	9104      	str	r1, [sp, #16]
 801aac6:	4909      	ldr	r1, [pc, #36]	; (801aaec <siprintf+0x3c>)
 801aac8:	f853 2b04 	ldr.w	r2, [r3], #4
 801aacc:	9105      	str	r1, [sp, #20]
 801aace:	6800      	ldr	r0, [r0, #0]
 801aad0:	9301      	str	r3, [sp, #4]
 801aad2:	a902      	add	r1, sp, #8
 801aad4:	f000 fa8c 	bl	801aff0 <_svfiprintf_r>
 801aad8:	9b02      	ldr	r3, [sp, #8]
 801aada:	2200      	movs	r2, #0
 801aadc:	701a      	strb	r2, [r3, #0]
 801aade:	b01c      	add	sp, #112	; 0x70
 801aae0:	f85d eb04 	ldr.w	lr, [sp], #4
 801aae4:	b003      	add	sp, #12
 801aae6:	4770      	bx	lr
 801aae8:	24000038 	.word	0x24000038
 801aaec:	ffff0208 	.word	0xffff0208

0801aaf0 <strncmp>:
 801aaf0:	b510      	push	{r4, lr}
 801aaf2:	b17a      	cbz	r2, 801ab14 <strncmp+0x24>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	3901      	subs	r1, #1
 801aaf8:	1884      	adds	r4, r0, r2
 801aafa:	f813 0b01 	ldrb.w	r0, [r3], #1
 801aafe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ab02:	4290      	cmp	r0, r2
 801ab04:	d101      	bne.n	801ab0a <strncmp+0x1a>
 801ab06:	42a3      	cmp	r3, r4
 801ab08:	d101      	bne.n	801ab0e <strncmp+0x1e>
 801ab0a:	1a80      	subs	r0, r0, r2
 801ab0c:	bd10      	pop	{r4, pc}
 801ab0e:	2800      	cmp	r0, #0
 801ab10:	d1f3      	bne.n	801aafa <strncmp+0xa>
 801ab12:	e7fa      	b.n	801ab0a <strncmp+0x1a>
 801ab14:	4610      	mov	r0, r2
 801ab16:	e7f9      	b.n	801ab0c <strncmp+0x1c>

0801ab18 <__assert_func>:
 801ab18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab1a:	4614      	mov	r4, r2
 801ab1c:	461a      	mov	r2, r3
 801ab1e:	4b09      	ldr	r3, [pc, #36]	; (801ab44 <__assert_func+0x2c>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	4605      	mov	r5, r0
 801ab24:	68d8      	ldr	r0, [r3, #12]
 801ab26:	b14c      	cbz	r4, 801ab3c <__assert_func+0x24>
 801ab28:	4b07      	ldr	r3, [pc, #28]	; (801ab48 <__assert_func+0x30>)
 801ab2a:	9100      	str	r1, [sp, #0]
 801ab2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab30:	4906      	ldr	r1, [pc, #24]	; (801ab4c <__assert_func+0x34>)
 801ab32:	462b      	mov	r3, r5
 801ab34:	f000 f8e4 	bl	801ad00 <fiprintf>
 801ab38:	f000 ff6e 	bl	801ba18 <abort>
 801ab3c:	4b04      	ldr	r3, [pc, #16]	; (801ab50 <__assert_func+0x38>)
 801ab3e:	461c      	mov	r4, r3
 801ab40:	e7f3      	b.n	801ab2a <__assert_func+0x12>
 801ab42:	bf00      	nop
 801ab44:	24000038 	.word	0x24000038
 801ab48:	0801f2ae 	.word	0x0801f2ae
 801ab4c:	0801f2bb 	.word	0x0801f2bb
 801ab50:	0801f2e9 	.word	0x0801f2e9

0801ab54 <std>:
 801ab54:	2300      	movs	r3, #0
 801ab56:	b510      	push	{r4, lr}
 801ab58:	4604      	mov	r4, r0
 801ab5a:	e9c0 3300 	strd	r3, r3, [r0]
 801ab5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab62:	6083      	str	r3, [r0, #8]
 801ab64:	8181      	strh	r1, [r0, #12]
 801ab66:	6643      	str	r3, [r0, #100]	; 0x64
 801ab68:	81c2      	strh	r2, [r0, #14]
 801ab6a:	6183      	str	r3, [r0, #24]
 801ab6c:	4619      	mov	r1, r3
 801ab6e:	2208      	movs	r2, #8
 801ab70:	305c      	adds	r0, #92	; 0x5c
 801ab72:	f7ff ff3f 	bl	801a9f4 <memset>
 801ab76:	4b05      	ldr	r3, [pc, #20]	; (801ab8c <std+0x38>)
 801ab78:	6263      	str	r3, [r4, #36]	; 0x24
 801ab7a:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <std+0x3c>)
 801ab7c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab7e:	4b05      	ldr	r3, [pc, #20]	; (801ab94 <std+0x40>)
 801ab80:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab82:	4b05      	ldr	r3, [pc, #20]	; (801ab98 <std+0x44>)
 801ab84:	6224      	str	r4, [r4, #32]
 801ab86:	6323      	str	r3, [r4, #48]	; 0x30
 801ab88:	bd10      	pop	{r4, pc}
 801ab8a:	bf00      	nop
 801ab8c:	0801b7ed 	.word	0x0801b7ed
 801ab90:	0801b80f 	.word	0x0801b80f
 801ab94:	0801b847 	.word	0x0801b847
 801ab98:	0801b86b 	.word	0x0801b86b

0801ab9c <_cleanup_r>:
 801ab9c:	4901      	ldr	r1, [pc, #4]	; (801aba4 <_cleanup_r+0x8>)
 801ab9e:	f000 b8c1 	b.w	801ad24 <_fwalk_reent>
 801aba2:	bf00      	nop
 801aba4:	0801bb55 	.word	0x0801bb55

0801aba8 <__sfmoreglue>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	2268      	movs	r2, #104	; 0x68
 801abac:	1e4d      	subs	r5, r1, #1
 801abae:	4355      	muls	r5, r2
 801abb0:	460e      	mov	r6, r1
 801abb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abb6:	f000 f94b 	bl	801ae50 <_malloc_r>
 801abba:	4604      	mov	r4, r0
 801abbc:	b140      	cbz	r0, 801abd0 <__sfmoreglue+0x28>
 801abbe:	2100      	movs	r1, #0
 801abc0:	e9c0 1600 	strd	r1, r6, [r0]
 801abc4:	300c      	adds	r0, #12
 801abc6:	60a0      	str	r0, [r4, #8]
 801abc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abcc:	f7ff ff12 	bl	801a9f4 <memset>
 801abd0:	4620      	mov	r0, r4
 801abd2:	bd70      	pop	{r4, r5, r6, pc}

0801abd4 <__sfp_lock_acquire>:
 801abd4:	4801      	ldr	r0, [pc, #4]	; (801abdc <__sfp_lock_acquire+0x8>)
 801abd6:	f000 b8c5 	b.w	801ad64 <__retarget_lock_acquire_recursive>
 801abda:	bf00      	nop
 801abdc:	24007831 	.word	0x24007831

0801abe0 <__sfp_lock_release>:
 801abe0:	4801      	ldr	r0, [pc, #4]	; (801abe8 <__sfp_lock_release+0x8>)
 801abe2:	f000 b8c0 	b.w	801ad66 <__retarget_lock_release_recursive>
 801abe6:	bf00      	nop
 801abe8:	24007831 	.word	0x24007831

0801abec <__sinit_lock_acquire>:
 801abec:	4801      	ldr	r0, [pc, #4]	; (801abf4 <__sinit_lock_acquire+0x8>)
 801abee:	f000 b8b9 	b.w	801ad64 <__retarget_lock_acquire_recursive>
 801abf2:	bf00      	nop
 801abf4:	24007832 	.word	0x24007832

0801abf8 <__sinit_lock_release>:
 801abf8:	4801      	ldr	r0, [pc, #4]	; (801ac00 <__sinit_lock_release+0x8>)
 801abfa:	f000 b8b4 	b.w	801ad66 <__retarget_lock_release_recursive>
 801abfe:	bf00      	nop
 801ac00:	24007832 	.word	0x24007832

0801ac04 <__sinit>:
 801ac04:	b510      	push	{r4, lr}
 801ac06:	4604      	mov	r4, r0
 801ac08:	f7ff fff0 	bl	801abec <__sinit_lock_acquire>
 801ac0c:	69a3      	ldr	r3, [r4, #24]
 801ac0e:	b11b      	cbz	r3, 801ac18 <__sinit+0x14>
 801ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac14:	f7ff bff0 	b.w	801abf8 <__sinit_lock_release>
 801ac18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac1c:	6523      	str	r3, [r4, #80]	; 0x50
 801ac1e:	4b13      	ldr	r3, [pc, #76]	; (801ac6c <__sinit+0x68>)
 801ac20:	4a13      	ldr	r2, [pc, #76]	; (801ac70 <__sinit+0x6c>)
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac26:	42a3      	cmp	r3, r4
 801ac28:	bf04      	itt	eq
 801ac2a:	2301      	moveq	r3, #1
 801ac2c:	61a3      	streq	r3, [r4, #24]
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f000 f820 	bl	801ac74 <__sfp>
 801ac34:	6060      	str	r0, [r4, #4]
 801ac36:	4620      	mov	r0, r4
 801ac38:	f000 f81c 	bl	801ac74 <__sfp>
 801ac3c:	60a0      	str	r0, [r4, #8]
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f000 f818 	bl	801ac74 <__sfp>
 801ac44:	2200      	movs	r2, #0
 801ac46:	60e0      	str	r0, [r4, #12]
 801ac48:	2104      	movs	r1, #4
 801ac4a:	6860      	ldr	r0, [r4, #4]
 801ac4c:	f7ff ff82 	bl	801ab54 <std>
 801ac50:	68a0      	ldr	r0, [r4, #8]
 801ac52:	2201      	movs	r2, #1
 801ac54:	2109      	movs	r1, #9
 801ac56:	f7ff ff7d 	bl	801ab54 <std>
 801ac5a:	68e0      	ldr	r0, [r4, #12]
 801ac5c:	2202      	movs	r2, #2
 801ac5e:	2112      	movs	r1, #18
 801ac60:	f7ff ff78 	bl	801ab54 <std>
 801ac64:	2301      	movs	r3, #1
 801ac66:	61a3      	str	r3, [r4, #24]
 801ac68:	e7d2      	b.n	801ac10 <__sinit+0xc>
 801ac6a:	bf00      	nop
 801ac6c:	0801f238 	.word	0x0801f238
 801ac70:	0801ab9d 	.word	0x0801ab9d

0801ac74 <__sfp>:
 801ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac76:	4607      	mov	r7, r0
 801ac78:	f7ff ffac 	bl	801abd4 <__sfp_lock_acquire>
 801ac7c:	4b1e      	ldr	r3, [pc, #120]	; (801acf8 <__sfp+0x84>)
 801ac7e:	681e      	ldr	r6, [r3, #0]
 801ac80:	69b3      	ldr	r3, [r6, #24]
 801ac82:	b913      	cbnz	r3, 801ac8a <__sfp+0x16>
 801ac84:	4630      	mov	r0, r6
 801ac86:	f7ff ffbd 	bl	801ac04 <__sinit>
 801ac8a:	3648      	adds	r6, #72	; 0x48
 801ac8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac90:	3b01      	subs	r3, #1
 801ac92:	d503      	bpl.n	801ac9c <__sfp+0x28>
 801ac94:	6833      	ldr	r3, [r6, #0]
 801ac96:	b30b      	cbz	r3, 801acdc <__sfp+0x68>
 801ac98:	6836      	ldr	r6, [r6, #0]
 801ac9a:	e7f7      	b.n	801ac8c <__sfp+0x18>
 801ac9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aca0:	b9d5      	cbnz	r5, 801acd8 <__sfp+0x64>
 801aca2:	4b16      	ldr	r3, [pc, #88]	; (801acfc <__sfp+0x88>)
 801aca4:	60e3      	str	r3, [r4, #12]
 801aca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acaa:	6665      	str	r5, [r4, #100]	; 0x64
 801acac:	f000 f859 	bl	801ad62 <__retarget_lock_init_recursive>
 801acb0:	f7ff ff96 	bl	801abe0 <__sfp_lock_release>
 801acb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801acb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801acbc:	6025      	str	r5, [r4, #0]
 801acbe:	61a5      	str	r5, [r4, #24]
 801acc0:	2208      	movs	r2, #8
 801acc2:	4629      	mov	r1, r5
 801acc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acc8:	f7ff fe94 	bl	801a9f4 <memset>
 801accc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801acd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acd4:	4620      	mov	r0, r4
 801acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd8:	3468      	adds	r4, #104	; 0x68
 801acda:	e7d9      	b.n	801ac90 <__sfp+0x1c>
 801acdc:	2104      	movs	r1, #4
 801acde:	4638      	mov	r0, r7
 801ace0:	f7ff ff62 	bl	801aba8 <__sfmoreglue>
 801ace4:	4604      	mov	r4, r0
 801ace6:	6030      	str	r0, [r6, #0]
 801ace8:	2800      	cmp	r0, #0
 801acea:	d1d5      	bne.n	801ac98 <__sfp+0x24>
 801acec:	f7ff ff78 	bl	801abe0 <__sfp_lock_release>
 801acf0:	230c      	movs	r3, #12
 801acf2:	603b      	str	r3, [r7, #0]
 801acf4:	e7ee      	b.n	801acd4 <__sfp+0x60>
 801acf6:	bf00      	nop
 801acf8:	0801f238 	.word	0x0801f238
 801acfc:	ffff0001 	.word	0xffff0001

0801ad00 <fiprintf>:
 801ad00:	b40e      	push	{r1, r2, r3}
 801ad02:	b503      	push	{r0, r1, lr}
 801ad04:	4601      	mov	r1, r0
 801ad06:	ab03      	add	r3, sp, #12
 801ad08:	4805      	ldr	r0, [pc, #20]	; (801ad20 <fiprintf+0x20>)
 801ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad0e:	6800      	ldr	r0, [r0, #0]
 801ad10:	9301      	str	r3, [sp, #4]
 801ad12:	f000 fa97 	bl	801b244 <_vfiprintf_r>
 801ad16:	b002      	add	sp, #8
 801ad18:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad1c:	b003      	add	sp, #12
 801ad1e:	4770      	bx	lr
 801ad20:	24000038 	.word	0x24000038

0801ad24 <_fwalk_reent>:
 801ad24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad28:	4606      	mov	r6, r0
 801ad2a:	4688      	mov	r8, r1
 801ad2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad30:	2700      	movs	r7, #0
 801ad32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad36:	f1b9 0901 	subs.w	r9, r9, #1
 801ad3a:	d505      	bpl.n	801ad48 <_fwalk_reent+0x24>
 801ad3c:	6824      	ldr	r4, [r4, #0]
 801ad3e:	2c00      	cmp	r4, #0
 801ad40:	d1f7      	bne.n	801ad32 <_fwalk_reent+0xe>
 801ad42:	4638      	mov	r0, r7
 801ad44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad48:	89ab      	ldrh	r3, [r5, #12]
 801ad4a:	2b01      	cmp	r3, #1
 801ad4c:	d907      	bls.n	801ad5e <_fwalk_reent+0x3a>
 801ad4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad52:	3301      	adds	r3, #1
 801ad54:	d003      	beq.n	801ad5e <_fwalk_reent+0x3a>
 801ad56:	4629      	mov	r1, r5
 801ad58:	4630      	mov	r0, r6
 801ad5a:	47c0      	blx	r8
 801ad5c:	4307      	orrs	r7, r0
 801ad5e:	3568      	adds	r5, #104	; 0x68
 801ad60:	e7e9      	b.n	801ad36 <_fwalk_reent+0x12>

0801ad62 <__retarget_lock_init_recursive>:
 801ad62:	4770      	bx	lr

0801ad64 <__retarget_lock_acquire_recursive>:
 801ad64:	4770      	bx	lr

0801ad66 <__retarget_lock_release_recursive>:
 801ad66:	4770      	bx	lr

0801ad68 <malloc>:
 801ad68:	4b02      	ldr	r3, [pc, #8]	; (801ad74 <malloc+0xc>)
 801ad6a:	4601      	mov	r1, r0
 801ad6c:	6818      	ldr	r0, [r3, #0]
 801ad6e:	f000 b86f 	b.w	801ae50 <_malloc_r>
 801ad72:	bf00      	nop
 801ad74:	24000038 	.word	0x24000038

0801ad78 <_free_r>:
 801ad78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad7a:	2900      	cmp	r1, #0
 801ad7c:	d044      	beq.n	801ae08 <_free_r+0x90>
 801ad7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad82:	9001      	str	r0, [sp, #4]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f1a1 0404 	sub.w	r4, r1, #4
 801ad8a:	bfb8      	it	lt
 801ad8c:	18e4      	addlt	r4, r4, r3
 801ad8e:	f000 ffaf 	bl	801bcf0 <__malloc_lock>
 801ad92:	4a1e      	ldr	r2, [pc, #120]	; (801ae0c <_free_r+0x94>)
 801ad94:	9801      	ldr	r0, [sp, #4]
 801ad96:	6813      	ldr	r3, [r2, #0]
 801ad98:	b933      	cbnz	r3, 801ada8 <_free_r+0x30>
 801ad9a:	6063      	str	r3, [r4, #4]
 801ad9c:	6014      	str	r4, [r2, #0]
 801ad9e:	b003      	add	sp, #12
 801ada0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ada4:	f000 bfaa 	b.w	801bcfc <__malloc_unlock>
 801ada8:	42a3      	cmp	r3, r4
 801adaa:	d908      	bls.n	801adbe <_free_r+0x46>
 801adac:	6825      	ldr	r5, [r4, #0]
 801adae:	1961      	adds	r1, r4, r5
 801adb0:	428b      	cmp	r3, r1
 801adb2:	bf01      	itttt	eq
 801adb4:	6819      	ldreq	r1, [r3, #0]
 801adb6:	685b      	ldreq	r3, [r3, #4]
 801adb8:	1949      	addeq	r1, r1, r5
 801adba:	6021      	streq	r1, [r4, #0]
 801adbc:	e7ed      	b.n	801ad9a <_free_r+0x22>
 801adbe:	461a      	mov	r2, r3
 801adc0:	685b      	ldr	r3, [r3, #4]
 801adc2:	b10b      	cbz	r3, 801adc8 <_free_r+0x50>
 801adc4:	42a3      	cmp	r3, r4
 801adc6:	d9fa      	bls.n	801adbe <_free_r+0x46>
 801adc8:	6811      	ldr	r1, [r2, #0]
 801adca:	1855      	adds	r5, r2, r1
 801adcc:	42a5      	cmp	r5, r4
 801adce:	d10b      	bne.n	801ade8 <_free_r+0x70>
 801add0:	6824      	ldr	r4, [r4, #0]
 801add2:	4421      	add	r1, r4
 801add4:	1854      	adds	r4, r2, r1
 801add6:	42a3      	cmp	r3, r4
 801add8:	6011      	str	r1, [r2, #0]
 801adda:	d1e0      	bne.n	801ad9e <_free_r+0x26>
 801addc:	681c      	ldr	r4, [r3, #0]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	6053      	str	r3, [r2, #4]
 801ade2:	4421      	add	r1, r4
 801ade4:	6011      	str	r1, [r2, #0]
 801ade6:	e7da      	b.n	801ad9e <_free_r+0x26>
 801ade8:	d902      	bls.n	801adf0 <_free_r+0x78>
 801adea:	230c      	movs	r3, #12
 801adec:	6003      	str	r3, [r0, #0]
 801adee:	e7d6      	b.n	801ad9e <_free_r+0x26>
 801adf0:	6825      	ldr	r5, [r4, #0]
 801adf2:	1961      	adds	r1, r4, r5
 801adf4:	428b      	cmp	r3, r1
 801adf6:	bf04      	itt	eq
 801adf8:	6819      	ldreq	r1, [r3, #0]
 801adfa:	685b      	ldreq	r3, [r3, #4]
 801adfc:	6063      	str	r3, [r4, #4]
 801adfe:	bf04      	itt	eq
 801ae00:	1949      	addeq	r1, r1, r5
 801ae02:	6021      	streq	r1, [r4, #0]
 801ae04:	6054      	str	r4, [r2, #4]
 801ae06:	e7ca      	b.n	801ad9e <_free_r+0x26>
 801ae08:	b003      	add	sp, #12
 801ae0a:	bd30      	pop	{r4, r5, pc}
 801ae0c:	24007834 	.word	0x24007834

0801ae10 <sbrk_aligned>:
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	4e0e      	ldr	r6, [pc, #56]	; (801ae4c <sbrk_aligned+0x3c>)
 801ae14:	460c      	mov	r4, r1
 801ae16:	6831      	ldr	r1, [r6, #0]
 801ae18:	4605      	mov	r5, r0
 801ae1a:	b911      	cbnz	r1, 801ae22 <sbrk_aligned+0x12>
 801ae1c:	f000 fcd6 	bl	801b7cc <_sbrk_r>
 801ae20:	6030      	str	r0, [r6, #0]
 801ae22:	4621      	mov	r1, r4
 801ae24:	4628      	mov	r0, r5
 801ae26:	f000 fcd1 	bl	801b7cc <_sbrk_r>
 801ae2a:	1c43      	adds	r3, r0, #1
 801ae2c:	d00a      	beq.n	801ae44 <sbrk_aligned+0x34>
 801ae2e:	1cc4      	adds	r4, r0, #3
 801ae30:	f024 0403 	bic.w	r4, r4, #3
 801ae34:	42a0      	cmp	r0, r4
 801ae36:	d007      	beq.n	801ae48 <sbrk_aligned+0x38>
 801ae38:	1a21      	subs	r1, r4, r0
 801ae3a:	4628      	mov	r0, r5
 801ae3c:	f000 fcc6 	bl	801b7cc <_sbrk_r>
 801ae40:	3001      	adds	r0, #1
 801ae42:	d101      	bne.n	801ae48 <sbrk_aligned+0x38>
 801ae44:	f04f 34ff 	mov.w	r4, #4294967295
 801ae48:	4620      	mov	r0, r4
 801ae4a:	bd70      	pop	{r4, r5, r6, pc}
 801ae4c:	24007838 	.word	0x24007838

0801ae50 <_malloc_r>:
 801ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae54:	1ccd      	adds	r5, r1, #3
 801ae56:	f025 0503 	bic.w	r5, r5, #3
 801ae5a:	3508      	adds	r5, #8
 801ae5c:	2d0c      	cmp	r5, #12
 801ae5e:	bf38      	it	cc
 801ae60:	250c      	movcc	r5, #12
 801ae62:	2d00      	cmp	r5, #0
 801ae64:	4607      	mov	r7, r0
 801ae66:	db01      	blt.n	801ae6c <_malloc_r+0x1c>
 801ae68:	42a9      	cmp	r1, r5
 801ae6a:	d905      	bls.n	801ae78 <_malloc_r+0x28>
 801ae6c:	230c      	movs	r3, #12
 801ae6e:	603b      	str	r3, [r7, #0]
 801ae70:	2600      	movs	r6, #0
 801ae72:	4630      	mov	r0, r6
 801ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae78:	4e2e      	ldr	r6, [pc, #184]	; (801af34 <_malloc_r+0xe4>)
 801ae7a:	f000 ff39 	bl	801bcf0 <__malloc_lock>
 801ae7e:	6833      	ldr	r3, [r6, #0]
 801ae80:	461c      	mov	r4, r3
 801ae82:	bb34      	cbnz	r4, 801aed2 <_malloc_r+0x82>
 801ae84:	4629      	mov	r1, r5
 801ae86:	4638      	mov	r0, r7
 801ae88:	f7ff ffc2 	bl	801ae10 <sbrk_aligned>
 801ae8c:	1c43      	adds	r3, r0, #1
 801ae8e:	4604      	mov	r4, r0
 801ae90:	d14d      	bne.n	801af2e <_malloc_r+0xde>
 801ae92:	6834      	ldr	r4, [r6, #0]
 801ae94:	4626      	mov	r6, r4
 801ae96:	2e00      	cmp	r6, #0
 801ae98:	d140      	bne.n	801af1c <_malloc_r+0xcc>
 801ae9a:	6823      	ldr	r3, [r4, #0]
 801ae9c:	4631      	mov	r1, r6
 801ae9e:	4638      	mov	r0, r7
 801aea0:	eb04 0803 	add.w	r8, r4, r3
 801aea4:	f000 fc92 	bl	801b7cc <_sbrk_r>
 801aea8:	4580      	cmp	r8, r0
 801aeaa:	d13a      	bne.n	801af22 <_malloc_r+0xd2>
 801aeac:	6821      	ldr	r1, [r4, #0]
 801aeae:	3503      	adds	r5, #3
 801aeb0:	1a6d      	subs	r5, r5, r1
 801aeb2:	f025 0503 	bic.w	r5, r5, #3
 801aeb6:	3508      	adds	r5, #8
 801aeb8:	2d0c      	cmp	r5, #12
 801aeba:	bf38      	it	cc
 801aebc:	250c      	movcc	r5, #12
 801aebe:	4629      	mov	r1, r5
 801aec0:	4638      	mov	r0, r7
 801aec2:	f7ff ffa5 	bl	801ae10 <sbrk_aligned>
 801aec6:	3001      	adds	r0, #1
 801aec8:	d02b      	beq.n	801af22 <_malloc_r+0xd2>
 801aeca:	6823      	ldr	r3, [r4, #0]
 801aecc:	442b      	add	r3, r5
 801aece:	6023      	str	r3, [r4, #0]
 801aed0:	e00e      	b.n	801aef0 <_malloc_r+0xa0>
 801aed2:	6822      	ldr	r2, [r4, #0]
 801aed4:	1b52      	subs	r2, r2, r5
 801aed6:	d41e      	bmi.n	801af16 <_malloc_r+0xc6>
 801aed8:	2a0b      	cmp	r2, #11
 801aeda:	d916      	bls.n	801af0a <_malloc_r+0xba>
 801aedc:	1961      	adds	r1, r4, r5
 801aede:	42a3      	cmp	r3, r4
 801aee0:	6025      	str	r5, [r4, #0]
 801aee2:	bf18      	it	ne
 801aee4:	6059      	strne	r1, [r3, #4]
 801aee6:	6863      	ldr	r3, [r4, #4]
 801aee8:	bf08      	it	eq
 801aeea:	6031      	streq	r1, [r6, #0]
 801aeec:	5162      	str	r2, [r4, r5]
 801aeee:	604b      	str	r3, [r1, #4]
 801aef0:	4638      	mov	r0, r7
 801aef2:	f104 060b 	add.w	r6, r4, #11
 801aef6:	f000 ff01 	bl	801bcfc <__malloc_unlock>
 801aefa:	f026 0607 	bic.w	r6, r6, #7
 801aefe:	1d23      	adds	r3, r4, #4
 801af00:	1af2      	subs	r2, r6, r3
 801af02:	d0b6      	beq.n	801ae72 <_malloc_r+0x22>
 801af04:	1b9b      	subs	r3, r3, r6
 801af06:	50a3      	str	r3, [r4, r2]
 801af08:	e7b3      	b.n	801ae72 <_malloc_r+0x22>
 801af0a:	6862      	ldr	r2, [r4, #4]
 801af0c:	42a3      	cmp	r3, r4
 801af0e:	bf0c      	ite	eq
 801af10:	6032      	streq	r2, [r6, #0]
 801af12:	605a      	strne	r2, [r3, #4]
 801af14:	e7ec      	b.n	801aef0 <_malloc_r+0xa0>
 801af16:	4623      	mov	r3, r4
 801af18:	6864      	ldr	r4, [r4, #4]
 801af1a:	e7b2      	b.n	801ae82 <_malloc_r+0x32>
 801af1c:	4634      	mov	r4, r6
 801af1e:	6876      	ldr	r6, [r6, #4]
 801af20:	e7b9      	b.n	801ae96 <_malloc_r+0x46>
 801af22:	230c      	movs	r3, #12
 801af24:	603b      	str	r3, [r7, #0]
 801af26:	4638      	mov	r0, r7
 801af28:	f000 fee8 	bl	801bcfc <__malloc_unlock>
 801af2c:	e7a1      	b.n	801ae72 <_malloc_r+0x22>
 801af2e:	6025      	str	r5, [r4, #0]
 801af30:	e7de      	b.n	801aef0 <_malloc_r+0xa0>
 801af32:	bf00      	nop
 801af34:	24007834 	.word	0x24007834

0801af38 <__ssputs_r>:
 801af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af3c:	688e      	ldr	r6, [r1, #8]
 801af3e:	429e      	cmp	r6, r3
 801af40:	4682      	mov	sl, r0
 801af42:	460c      	mov	r4, r1
 801af44:	4690      	mov	r8, r2
 801af46:	461f      	mov	r7, r3
 801af48:	d838      	bhi.n	801afbc <__ssputs_r+0x84>
 801af4a:	898a      	ldrh	r2, [r1, #12]
 801af4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801af50:	d032      	beq.n	801afb8 <__ssputs_r+0x80>
 801af52:	6825      	ldr	r5, [r4, #0]
 801af54:	6909      	ldr	r1, [r1, #16]
 801af56:	eba5 0901 	sub.w	r9, r5, r1
 801af5a:	6965      	ldr	r5, [r4, #20]
 801af5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801af64:	3301      	adds	r3, #1
 801af66:	444b      	add	r3, r9
 801af68:	106d      	asrs	r5, r5, #1
 801af6a:	429d      	cmp	r5, r3
 801af6c:	bf38      	it	cc
 801af6e:	461d      	movcc	r5, r3
 801af70:	0553      	lsls	r3, r2, #21
 801af72:	d531      	bpl.n	801afd8 <__ssputs_r+0xa0>
 801af74:	4629      	mov	r1, r5
 801af76:	f7ff ff6b 	bl	801ae50 <_malloc_r>
 801af7a:	4606      	mov	r6, r0
 801af7c:	b950      	cbnz	r0, 801af94 <__ssputs_r+0x5c>
 801af7e:	230c      	movs	r3, #12
 801af80:	f8ca 3000 	str.w	r3, [sl]
 801af84:	89a3      	ldrh	r3, [r4, #12]
 801af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af8a:	81a3      	strh	r3, [r4, #12]
 801af8c:	f04f 30ff 	mov.w	r0, #4294967295
 801af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af94:	6921      	ldr	r1, [r4, #16]
 801af96:	464a      	mov	r2, r9
 801af98:	f7ff fd1e 	bl	801a9d8 <memcpy>
 801af9c:	89a3      	ldrh	r3, [r4, #12]
 801af9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801afa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801afa6:	81a3      	strh	r3, [r4, #12]
 801afa8:	6126      	str	r6, [r4, #16]
 801afaa:	6165      	str	r5, [r4, #20]
 801afac:	444e      	add	r6, r9
 801afae:	eba5 0509 	sub.w	r5, r5, r9
 801afb2:	6026      	str	r6, [r4, #0]
 801afb4:	60a5      	str	r5, [r4, #8]
 801afb6:	463e      	mov	r6, r7
 801afb8:	42be      	cmp	r6, r7
 801afba:	d900      	bls.n	801afbe <__ssputs_r+0x86>
 801afbc:	463e      	mov	r6, r7
 801afbe:	6820      	ldr	r0, [r4, #0]
 801afc0:	4632      	mov	r2, r6
 801afc2:	4641      	mov	r1, r8
 801afc4:	f000 fe7a 	bl	801bcbc <memmove>
 801afc8:	68a3      	ldr	r3, [r4, #8]
 801afca:	1b9b      	subs	r3, r3, r6
 801afcc:	60a3      	str	r3, [r4, #8]
 801afce:	6823      	ldr	r3, [r4, #0]
 801afd0:	4433      	add	r3, r6
 801afd2:	6023      	str	r3, [r4, #0]
 801afd4:	2000      	movs	r0, #0
 801afd6:	e7db      	b.n	801af90 <__ssputs_r+0x58>
 801afd8:	462a      	mov	r2, r5
 801afda:	f000 fe95 	bl	801bd08 <_realloc_r>
 801afde:	4606      	mov	r6, r0
 801afe0:	2800      	cmp	r0, #0
 801afe2:	d1e1      	bne.n	801afa8 <__ssputs_r+0x70>
 801afe4:	6921      	ldr	r1, [r4, #16]
 801afe6:	4650      	mov	r0, sl
 801afe8:	f7ff fec6 	bl	801ad78 <_free_r>
 801afec:	e7c7      	b.n	801af7e <__ssputs_r+0x46>
	...

0801aff0 <_svfiprintf_r>:
 801aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aff4:	4698      	mov	r8, r3
 801aff6:	898b      	ldrh	r3, [r1, #12]
 801aff8:	061b      	lsls	r3, r3, #24
 801affa:	b09d      	sub	sp, #116	; 0x74
 801affc:	4607      	mov	r7, r0
 801affe:	460d      	mov	r5, r1
 801b000:	4614      	mov	r4, r2
 801b002:	d50e      	bpl.n	801b022 <_svfiprintf_r+0x32>
 801b004:	690b      	ldr	r3, [r1, #16]
 801b006:	b963      	cbnz	r3, 801b022 <_svfiprintf_r+0x32>
 801b008:	2140      	movs	r1, #64	; 0x40
 801b00a:	f7ff ff21 	bl	801ae50 <_malloc_r>
 801b00e:	6028      	str	r0, [r5, #0]
 801b010:	6128      	str	r0, [r5, #16]
 801b012:	b920      	cbnz	r0, 801b01e <_svfiprintf_r+0x2e>
 801b014:	230c      	movs	r3, #12
 801b016:	603b      	str	r3, [r7, #0]
 801b018:	f04f 30ff 	mov.w	r0, #4294967295
 801b01c:	e0d1      	b.n	801b1c2 <_svfiprintf_r+0x1d2>
 801b01e:	2340      	movs	r3, #64	; 0x40
 801b020:	616b      	str	r3, [r5, #20]
 801b022:	2300      	movs	r3, #0
 801b024:	9309      	str	r3, [sp, #36]	; 0x24
 801b026:	2320      	movs	r3, #32
 801b028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b02c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b030:	2330      	movs	r3, #48	; 0x30
 801b032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b1dc <_svfiprintf_r+0x1ec>
 801b036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b03a:	f04f 0901 	mov.w	r9, #1
 801b03e:	4623      	mov	r3, r4
 801b040:	469a      	mov	sl, r3
 801b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b046:	b10a      	cbz	r2, 801b04c <_svfiprintf_r+0x5c>
 801b048:	2a25      	cmp	r2, #37	; 0x25
 801b04a:	d1f9      	bne.n	801b040 <_svfiprintf_r+0x50>
 801b04c:	ebba 0b04 	subs.w	fp, sl, r4
 801b050:	d00b      	beq.n	801b06a <_svfiprintf_r+0x7a>
 801b052:	465b      	mov	r3, fp
 801b054:	4622      	mov	r2, r4
 801b056:	4629      	mov	r1, r5
 801b058:	4638      	mov	r0, r7
 801b05a:	f7ff ff6d 	bl	801af38 <__ssputs_r>
 801b05e:	3001      	adds	r0, #1
 801b060:	f000 80aa 	beq.w	801b1b8 <_svfiprintf_r+0x1c8>
 801b064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b066:	445a      	add	r2, fp
 801b068:	9209      	str	r2, [sp, #36]	; 0x24
 801b06a:	f89a 3000 	ldrb.w	r3, [sl]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	f000 80a2 	beq.w	801b1b8 <_svfiprintf_r+0x1c8>
 801b074:	2300      	movs	r3, #0
 801b076:	f04f 32ff 	mov.w	r2, #4294967295
 801b07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b07e:	f10a 0a01 	add.w	sl, sl, #1
 801b082:	9304      	str	r3, [sp, #16]
 801b084:	9307      	str	r3, [sp, #28]
 801b086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b08a:	931a      	str	r3, [sp, #104]	; 0x68
 801b08c:	4654      	mov	r4, sl
 801b08e:	2205      	movs	r2, #5
 801b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b094:	4851      	ldr	r0, [pc, #324]	; (801b1dc <_svfiprintf_r+0x1ec>)
 801b096:	f7e5 f92b 	bl	80002f0 <memchr>
 801b09a:	9a04      	ldr	r2, [sp, #16]
 801b09c:	b9d8      	cbnz	r0, 801b0d6 <_svfiprintf_r+0xe6>
 801b09e:	06d0      	lsls	r0, r2, #27
 801b0a0:	bf44      	itt	mi
 801b0a2:	2320      	movmi	r3, #32
 801b0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0a8:	0711      	lsls	r1, r2, #28
 801b0aa:	bf44      	itt	mi
 801b0ac:	232b      	movmi	r3, #43	; 0x2b
 801b0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0b2:	f89a 3000 	ldrb.w	r3, [sl]
 801b0b6:	2b2a      	cmp	r3, #42	; 0x2a
 801b0b8:	d015      	beq.n	801b0e6 <_svfiprintf_r+0xf6>
 801b0ba:	9a07      	ldr	r2, [sp, #28]
 801b0bc:	4654      	mov	r4, sl
 801b0be:	2000      	movs	r0, #0
 801b0c0:	f04f 0c0a 	mov.w	ip, #10
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0ca:	3b30      	subs	r3, #48	; 0x30
 801b0cc:	2b09      	cmp	r3, #9
 801b0ce:	d94e      	bls.n	801b16e <_svfiprintf_r+0x17e>
 801b0d0:	b1b0      	cbz	r0, 801b100 <_svfiprintf_r+0x110>
 801b0d2:	9207      	str	r2, [sp, #28]
 801b0d4:	e014      	b.n	801b100 <_svfiprintf_r+0x110>
 801b0d6:	eba0 0308 	sub.w	r3, r0, r8
 801b0da:	fa09 f303 	lsl.w	r3, r9, r3
 801b0de:	4313      	orrs	r3, r2
 801b0e0:	9304      	str	r3, [sp, #16]
 801b0e2:	46a2      	mov	sl, r4
 801b0e4:	e7d2      	b.n	801b08c <_svfiprintf_r+0x9c>
 801b0e6:	9b03      	ldr	r3, [sp, #12]
 801b0e8:	1d19      	adds	r1, r3, #4
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	9103      	str	r1, [sp, #12]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	bfbb      	ittet	lt
 801b0f2:	425b      	neglt	r3, r3
 801b0f4:	f042 0202 	orrlt.w	r2, r2, #2
 801b0f8:	9307      	strge	r3, [sp, #28]
 801b0fa:	9307      	strlt	r3, [sp, #28]
 801b0fc:	bfb8      	it	lt
 801b0fe:	9204      	strlt	r2, [sp, #16]
 801b100:	7823      	ldrb	r3, [r4, #0]
 801b102:	2b2e      	cmp	r3, #46	; 0x2e
 801b104:	d10c      	bne.n	801b120 <_svfiprintf_r+0x130>
 801b106:	7863      	ldrb	r3, [r4, #1]
 801b108:	2b2a      	cmp	r3, #42	; 0x2a
 801b10a:	d135      	bne.n	801b178 <_svfiprintf_r+0x188>
 801b10c:	9b03      	ldr	r3, [sp, #12]
 801b10e:	1d1a      	adds	r2, r3, #4
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	9203      	str	r2, [sp, #12]
 801b114:	2b00      	cmp	r3, #0
 801b116:	bfb8      	it	lt
 801b118:	f04f 33ff 	movlt.w	r3, #4294967295
 801b11c:	3402      	adds	r4, #2
 801b11e:	9305      	str	r3, [sp, #20]
 801b120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b1ec <_svfiprintf_r+0x1fc>
 801b124:	7821      	ldrb	r1, [r4, #0]
 801b126:	2203      	movs	r2, #3
 801b128:	4650      	mov	r0, sl
 801b12a:	f7e5 f8e1 	bl	80002f0 <memchr>
 801b12e:	b140      	cbz	r0, 801b142 <_svfiprintf_r+0x152>
 801b130:	2340      	movs	r3, #64	; 0x40
 801b132:	eba0 000a 	sub.w	r0, r0, sl
 801b136:	fa03 f000 	lsl.w	r0, r3, r0
 801b13a:	9b04      	ldr	r3, [sp, #16]
 801b13c:	4303      	orrs	r3, r0
 801b13e:	3401      	adds	r4, #1
 801b140:	9304      	str	r3, [sp, #16]
 801b142:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b146:	4826      	ldr	r0, [pc, #152]	; (801b1e0 <_svfiprintf_r+0x1f0>)
 801b148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b14c:	2206      	movs	r2, #6
 801b14e:	f7e5 f8cf 	bl	80002f0 <memchr>
 801b152:	2800      	cmp	r0, #0
 801b154:	d038      	beq.n	801b1c8 <_svfiprintf_r+0x1d8>
 801b156:	4b23      	ldr	r3, [pc, #140]	; (801b1e4 <_svfiprintf_r+0x1f4>)
 801b158:	bb1b      	cbnz	r3, 801b1a2 <_svfiprintf_r+0x1b2>
 801b15a:	9b03      	ldr	r3, [sp, #12]
 801b15c:	3307      	adds	r3, #7
 801b15e:	f023 0307 	bic.w	r3, r3, #7
 801b162:	3308      	adds	r3, #8
 801b164:	9303      	str	r3, [sp, #12]
 801b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b168:	4433      	add	r3, r6
 801b16a:	9309      	str	r3, [sp, #36]	; 0x24
 801b16c:	e767      	b.n	801b03e <_svfiprintf_r+0x4e>
 801b16e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b172:	460c      	mov	r4, r1
 801b174:	2001      	movs	r0, #1
 801b176:	e7a5      	b.n	801b0c4 <_svfiprintf_r+0xd4>
 801b178:	2300      	movs	r3, #0
 801b17a:	3401      	adds	r4, #1
 801b17c:	9305      	str	r3, [sp, #20]
 801b17e:	4619      	mov	r1, r3
 801b180:	f04f 0c0a 	mov.w	ip, #10
 801b184:	4620      	mov	r0, r4
 801b186:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b18a:	3a30      	subs	r2, #48	; 0x30
 801b18c:	2a09      	cmp	r2, #9
 801b18e:	d903      	bls.n	801b198 <_svfiprintf_r+0x1a8>
 801b190:	2b00      	cmp	r3, #0
 801b192:	d0c5      	beq.n	801b120 <_svfiprintf_r+0x130>
 801b194:	9105      	str	r1, [sp, #20]
 801b196:	e7c3      	b.n	801b120 <_svfiprintf_r+0x130>
 801b198:	fb0c 2101 	mla	r1, ip, r1, r2
 801b19c:	4604      	mov	r4, r0
 801b19e:	2301      	movs	r3, #1
 801b1a0:	e7f0      	b.n	801b184 <_svfiprintf_r+0x194>
 801b1a2:	ab03      	add	r3, sp, #12
 801b1a4:	9300      	str	r3, [sp, #0]
 801b1a6:	462a      	mov	r2, r5
 801b1a8:	4b0f      	ldr	r3, [pc, #60]	; (801b1e8 <_svfiprintf_r+0x1f8>)
 801b1aa:	a904      	add	r1, sp, #16
 801b1ac:	4638      	mov	r0, r7
 801b1ae:	f3af 8000 	nop.w
 801b1b2:	1c42      	adds	r2, r0, #1
 801b1b4:	4606      	mov	r6, r0
 801b1b6:	d1d6      	bne.n	801b166 <_svfiprintf_r+0x176>
 801b1b8:	89ab      	ldrh	r3, [r5, #12]
 801b1ba:	065b      	lsls	r3, r3, #25
 801b1bc:	f53f af2c 	bmi.w	801b018 <_svfiprintf_r+0x28>
 801b1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b1c2:	b01d      	add	sp, #116	; 0x74
 801b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1c8:	ab03      	add	r3, sp, #12
 801b1ca:	9300      	str	r3, [sp, #0]
 801b1cc:	462a      	mov	r2, r5
 801b1ce:	4b06      	ldr	r3, [pc, #24]	; (801b1e8 <_svfiprintf_r+0x1f8>)
 801b1d0:	a904      	add	r1, sp, #16
 801b1d2:	4638      	mov	r0, r7
 801b1d4:	f000 f9d4 	bl	801b580 <_printf_i>
 801b1d8:	e7eb      	b.n	801b1b2 <_svfiprintf_r+0x1c2>
 801b1da:	bf00      	nop
 801b1dc:	0801f34c 	.word	0x0801f34c
 801b1e0:	0801f356 	.word	0x0801f356
 801b1e4:	00000000 	.word	0x00000000
 801b1e8:	0801af39 	.word	0x0801af39
 801b1ec:	0801f352 	.word	0x0801f352

0801b1f0 <__sfputc_r>:
 801b1f0:	6893      	ldr	r3, [r2, #8]
 801b1f2:	3b01      	subs	r3, #1
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	b410      	push	{r4}
 801b1f8:	6093      	str	r3, [r2, #8]
 801b1fa:	da08      	bge.n	801b20e <__sfputc_r+0x1e>
 801b1fc:	6994      	ldr	r4, [r2, #24]
 801b1fe:	42a3      	cmp	r3, r4
 801b200:	db01      	blt.n	801b206 <__sfputc_r+0x16>
 801b202:	290a      	cmp	r1, #10
 801b204:	d103      	bne.n	801b20e <__sfputc_r+0x1e>
 801b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b20a:	f000 bb33 	b.w	801b874 <__swbuf_r>
 801b20e:	6813      	ldr	r3, [r2, #0]
 801b210:	1c58      	adds	r0, r3, #1
 801b212:	6010      	str	r0, [r2, #0]
 801b214:	7019      	strb	r1, [r3, #0]
 801b216:	4608      	mov	r0, r1
 801b218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b21c:	4770      	bx	lr

0801b21e <__sfputs_r>:
 801b21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b220:	4606      	mov	r6, r0
 801b222:	460f      	mov	r7, r1
 801b224:	4614      	mov	r4, r2
 801b226:	18d5      	adds	r5, r2, r3
 801b228:	42ac      	cmp	r4, r5
 801b22a:	d101      	bne.n	801b230 <__sfputs_r+0x12>
 801b22c:	2000      	movs	r0, #0
 801b22e:	e007      	b.n	801b240 <__sfputs_r+0x22>
 801b230:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b234:	463a      	mov	r2, r7
 801b236:	4630      	mov	r0, r6
 801b238:	f7ff ffda 	bl	801b1f0 <__sfputc_r>
 801b23c:	1c43      	adds	r3, r0, #1
 801b23e:	d1f3      	bne.n	801b228 <__sfputs_r+0xa>
 801b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b244 <_vfiprintf_r>:
 801b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b248:	460d      	mov	r5, r1
 801b24a:	b09d      	sub	sp, #116	; 0x74
 801b24c:	4614      	mov	r4, r2
 801b24e:	4698      	mov	r8, r3
 801b250:	4606      	mov	r6, r0
 801b252:	b118      	cbz	r0, 801b25c <_vfiprintf_r+0x18>
 801b254:	6983      	ldr	r3, [r0, #24]
 801b256:	b90b      	cbnz	r3, 801b25c <_vfiprintf_r+0x18>
 801b258:	f7ff fcd4 	bl	801ac04 <__sinit>
 801b25c:	4b89      	ldr	r3, [pc, #548]	; (801b484 <_vfiprintf_r+0x240>)
 801b25e:	429d      	cmp	r5, r3
 801b260:	d11b      	bne.n	801b29a <_vfiprintf_r+0x56>
 801b262:	6875      	ldr	r5, [r6, #4]
 801b264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b266:	07d9      	lsls	r1, r3, #31
 801b268:	d405      	bmi.n	801b276 <_vfiprintf_r+0x32>
 801b26a:	89ab      	ldrh	r3, [r5, #12]
 801b26c:	059a      	lsls	r2, r3, #22
 801b26e:	d402      	bmi.n	801b276 <_vfiprintf_r+0x32>
 801b270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b272:	f7ff fd77 	bl	801ad64 <__retarget_lock_acquire_recursive>
 801b276:	89ab      	ldrh	r3, [r5, #12]
 801b278:	071b      	lsls	r3, r3, #28
 801b27a:	d501      	bpl.n	801b280 <_vfiprintf_r+0x3c>
 801b27c:	692b      	ldr	r3, [r5, #16]
 801b27e:	b9eb      	cbnz	r3, 801b2bc <_vfiprintf_r+0x78>
 801b280:	4629      	mov	r1, r5
 801b282:	4630      	mov	r0, r6
 801b284:	f000 fb5a 	bl	801b93c <__swsetup_r>
 801b288:	b1c0      	cbz	r0, 801b2bc <_vfiprintf_r+0x78>
 801b28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b28c:	07dc      	lsls	r4, r3, #31
 801b28e:	d50e      	bpl.n	801b2ae <_vfiprintf_r+0x6a>
 801b290:	f04f 30ff 	mov.w	r0, #4294967295
 801b294:	b01d      	add	sp, #116	; 0x74
 801b296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b29a:	4b7b      	ldr	r3, [pc, #492]	; (801b488 <_vfiprintf_r+0x244>)
 801b29c:	429d      	cmp	r5, r3
 801b29e:	d101      	bne.n	801b2a4 <_vfiprintf_r+0x60>
 801b2a0:	68b5      	ldr	r5, [r6, #8]
 801b2a2:	e7df      	b.n	801b264 <_vfiprintf_r+0x20>
 801b2a4:	4b79      	ldr	r3, [pc, #484]	; (801b48c <_vfiprintf_r+0x248>)
 801b2a6:	429d      	cmp	r5, r3
 801b2a8:	bf08      	it	eq
 801b2aa:	68f5      	ldreq	r5, [r6, #12]
 801b2ac:	e7da      	b.n	801b264 <_vfiprintf_r+0x20>
 801b2ae:	89ab      	ldrh	r3, [r5, #12]
 801b2b0:	0598      	lsls	r0, r3, #22
 801b2b2:	d4ed      	bmi.n	801b290 <_vfiprintf_r+0x4c>
 801b2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2b6:	f7ff fd56 	bl	801ad66 <__retarget_lock_release_recursive>
 801b2ba:	e7e9      	b.n	801b290 <_vfiprintf_r+0x4c>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	9309      	str	r3, [sp, #36]	; 0x24
 801b2c0:	2320      	movs	r3, #32
 801b2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2ca:	2330      	movs	r3, #48	; 0x30
 801b2cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b490 <_vfiprintf_r+0x24c>
 801b2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b2d4:	f04f 0901 	mov.w	r9, #1
 801b2d8:	4623      	mov	r3, r4
 801b2da:	469a      	mov	sl, r3
 801b2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2e0:	b10a      	cbz	r2, 801b2e6 <_vfiprintf_r+0xa2>
 801b2e2:	2a25      	cmp	r2, #37	; 0x25
 801b2e4:	d1f9      	bne.n	801b2da <_vfiprintf_r+0x96>
 801b2e6:	ebba 0b04 	subs.w	fp, sl, r4
 801b2ea:	d00b      	beq.n	801b304 <_vfiprintf_r+0xc0>
 801b2ec:	465b      	mov	r3, fp
 801b2ee:	4622      	mov	r2, r4
 801b2f0:	4629      	mov	r1, r5
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	f7ff ff93 	bl	801b21e <__sfputs_r>
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	f000 80aa 	beq.w	801b452 <_vfiprintf_r+0x20e>
 801b2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b300:	445a      	add	r2, fp
 801b302:	9209      	str	r2, [sp, #36]	; 0x24
 801b304:	f89a 3000 	ldrb.w	r3, [sl]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 80a2 	beq.w	801b452 <_vfiprintf_r+0x20e>
 801b30e:	2300      	movs	r3, #0
 801b310:	f04f 32ff 	mov.w	r2, #4294967295
 801b314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b318:	f10a 0a01 	add.w	sl, sl, #1
 801b31c:	9304      	str	r3, [sp, #16]
 801b31e:	9307      	str	r3, [sp, #28]
 801b320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b324:	931a      	str	r3, [sp, #104]	; 0x68
 801b326:	4654      	mov	r4, sl
 801b328:	2205      	movs	r2, #5
 801b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b32e:	4858      	ldr	r0, [pc, #352]	; (801b490 <_vfiprintf_r+0x24c>)
 801b330:	f7e4 ffde 	bl	80002f0 <memchr>
 801b334:	9a04      	ldr	r2, [sp, #16]
 801b336:	b9d8      	cbnz	r0, 801b370 <_vfiprintf_r+0x12c>
 801b338:	06d1      	lsls	r1, r2, #27
 801b33a:	bf44      	itt	mi
 801b33c:	2320      	movmi	r3, #32
 801b33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b342:	0713      	lsls	r3, r2, #28
 801b344:	bf44      	itt	mi
 801b346:	232b      	movmi	r3, #43	; 0x2b
 801b348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b34c:	f89a 3000 	ldrb.w	r3, [sl]
 801b350:	2b2a      	cmp	r3, #42	; 0x2a
 801b352:	d015      	beq.n	801b380 <_vfiprintf_r+0x13c>
 801b354:	9a07      	ldr	r2, [sp, #28]
 801b356:	4654      	mov	r4, sl
 801b358:	2000      	movs	r0, #0
 801b35a:	f04f 0c0a 	mov.w	ip, #10
 801b35e:	4621      	mov	r1, r4
 801b360:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b364:	3b30      	subs	r3, #48	; 0x30
 801b366:	2b09      	cmp	r3, #9
 801b368:	d94e      	bls.n	801b408 <_vfiprintf_r+0x1c4>
 801b36a:	b1b0      	cbz	r0, 801b39a <_vfiprintf_r+0x156>
 801b36c:	9207      	str	r2, [sp, #28]
 801b36e:	e014      	b.n	801b39a <_vfiprintf_r+0x156>
 801b370:	eba0 0308 	sub.w	r3, r0, r8
 801b374:	fa09 f303 	lsl.w	r3, r9, r3
 801b378:	4313      	orrs	r3, r2
 801b37a:	9304      	str	r3, [sp, #16]
 801b37c:	46a2      	mov	sl, r4
 801b37e:	e7d2      	b.n	801b326 <_vfiprintf_r+0xe2>
 801b380:	9b03      	ldr	r3, [sp, #12]
 801b382:	1d19      	adds	r1, r3, #4
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	9103      	str	r1, [sp, #12]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	bfbb      	ittet	lt
 801b38c:	425b      	neglt	r3, r3
 801b38e:	f042 0202 	orrlt.w	r2, r2, #2
 801b392:	9307      	strge	r3, [sp, #28]
 801b394:	9307      	strlt	r3, [sp, #28]
 801b396:	bfb8      	it	lt
 801b398:	9204      	strlt	r2, [sp, #16]
 801b39a:	7823      	ldrb	r3, [r4, #0]
 801b39c:	2b2e      	cmp	r3, #46	; 0x2e
 801b39e:	d10c      	bne.n	801b3ba <_vfiprintf_r+0x176>
 801b3a0:	7863      	ldrb	r3, [r4, #1]
 801b3a2:	2b2a      	cmp	r3, #42	; 0x2a
 801b3a4:	d135      	bne.n	801b412 <_vfiprintf_r+0x1ce>
 801b3a6:	9b03      	ldr	r3, [sp, #12]
 801b3a8:	1d1a      	adds	r2, r3, #4
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	9203      	str	r2, [sp, #12]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	bfb8      	it	lt
 801b3b2:	f04f 33ff 	movlt.w	r3, #4294967295
 801b3b6:	3402      	adds	r4, #2
 801b3b8:	9305      	str	r3, [sp, #20]
 801b3ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b4a0 <_vfiprintf_r+0x25c>
 801b3be:	7821      	ldrb	r1, [r4, #0]
 801b3c0:	2203      	movs	r2, #3
 801b3c2:	4650      	mov	r0, sl
 801b3c4:	f7e4 ff94 	bl	80002f0 <memchr>
 801b3c8:	b140      	cbz	r0, 801b3dc <_vfiprintf_r+0x198>
 801b3ca:	2340      	movs	r3, #64	; 0x40
 801b3cc:	eba0 000a 	sub.w	r0, r0, sl
 801b3d0:	fa03 f000 	lsl.w	r0, r3, r0
 801b3d4:	9b04      	ldr	r3, [sp, #16]
 801b3d6:	4303      	orrs	r3, r0
 801b3d8:	3401      	adds	r4, #1
 801b3da:	9304      	str	r3, [sp, #16]
 801b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3e0:	482c      	ldr	r0, [pc, #176]	; (801b494 <_vfiprintf_r+0x250>)
 801b3e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b3e6:	2206      	movs	r2, #6
 801b3e8:	f7e4 ff82 	bl	80002f0 <memchr>
 801b3ec:	2800      	cmp	r0, #0
 801b3ee:	d03f      	beq.n	801b470 <_vfiprintf_r+0x22c>
 801b3f0:	4b29      	ldr	r3, [pc, #164]	; (801b498 <_vfiprintf_r+0x254>)
 801b3f2:	bb1b      	cbnz	r3, 801b43c <_vfiprintf_r+0x1f8>
 801b3f4:	9b03      	ldr	r3, [sp, #12]
 801b3f6:	3307      	adds	r3, #7
 801b3f8:	f023 0307 	bic.w	r3, r3, #7
 801b3fc:	3308      	adds	r3, #8
 801b3fe:	9303      	str	r3, [sp, #12]
 801b400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b402:	443b      	add	r3, r7
 801b404:	9309      	str	r3, [sp, #36]	; 0x24
 801b406:	e767      	b.n	801b2d8 <_vfiprintf_r+0x94>
 801b408:	fb0c 3202 	mla	r2, ip, r2, r3
 801b40c:	460c      	mov	r4, r1
 801b40e:	2001      	movs	r0, #1
 801b410:	e7a5      	b.n	801b35e <_vfiprintf_r+0x11a>
 801b412:	2300      	movs	r3, #0
 801b414:	3401      	adds	r4, #1
 801b416:	9305      	str	r3, [sp, #20]
 801b418:	4619      	mov	r1, r3
 801b41a:	f04f 0c0a 	mov.w	ip, #10
 801b41e:	4620      	mov	r0, r4
 801b420:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b424:	3a30      	subs	r2, #48	; 0x30
 801b426:	2a09      	cmp	r2, #9
 801b428:	d903      	bls.n	801b432 <_vfiprintf_r+0x1ee>
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d0c5      	beq.n	801b3ba <_vfiprintf_r+0x176>
 801b42e:	9105      	str	r1, [sp, #20]
 801b430:	e7c3      	b.n	801b3ba <_vfiprintf_r+0x176>
 801b432:	fb0c 2101 	mla	r1, ip, r1, r2
 801b436:	4604      	mov	r4, r0
 801b438:	2301      	movs	r3, #1
 801b43a:	e7f0      	b.n	801b41e <_vfiprintf_r+0x1da>
 801b43c:	ab03      	add	r3, sp, #12
 801b43e:	9300      	str	r3, [sp, #0]
 801b440:	462a      	mov	r2, r5
 801b442:	4b16      	ldr	r3, [pc, #88]	; (801b49c <_vfiprintf_r+0x258>)
 801b444:	a904      	add	r1, sp, #16
 801b446:	4630      	mov	r0, r6
 801b448:	f3af 8000 	nop.w
 801b44c:	4607      	mov	r7, r0
 801b44e:	1c78      	adds	r0, r7, #1
 801b450:	d1d6      	bne.n	801b400 <_vfiprintf_r+0x1bc>
 801b452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b454:	07d9      	lsls	r1, r3, #31
 801b456:	d405      	bmi.n	801b464 <_vfiprintf_r+0x220>
 801b458:	89ab      	ldrh	r3, [r5, #12]
 801b45a:	059a      	lsls	r2, r3, #22
 801b45c:	d402      	bmi.n	801b464 <_vfiprintf_r+0x220>
 801b45e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b460:	f7ff fc81 	bl	801ad66 <__retarget_lock_release_recursive>
 801b464:	89ab      	ldrh	r3, [r5, #12]
 801b466:	065b      	lsls	r3, r3, #25
 801b468:	f53f af12 	bmi.w	801b290 <_vfiprintf_r+0x4c>
 801b46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b46e:	e711      	b.n	801b294 <_vfiprintf_r+0x50>
 801b470:	ab03      	add	r3, sp, #12
 801b472:	9300      	str	r3, [sp, #0]
 801b474:	462a      	mov	r2, r5
 801b476:	4b09      	ldr	r3, [pc, #36]	; (801b49c <_vfiprintf_r+0x258>)
 801b478:	a904      	add	r1, sp, #16
 801b47a:	4630      	mov	r0, r6
 801b47c:	f000 f880 	bl	801b580 <_printf_i>
 801b480:	e7e4      	b.n	801b44c <_vfiprintf_r+0x208>
 801b482:	bf00      	nop
 801b484:	0801f30c 	.word	0x0801f30c
 801b488:	0801f32c 	.word	0x0801f32c
 801b48c:	0801f2ec 	.word	0x0801f2ec
 801b490:	0801f34c 	.word	0x0801f34c
 801b494:	0801f356 	.word	0x0801f356
 801b498:	00000000 	.word	0x00000000
 801b49c:	0801b21f 	.word	0x0801b21f
 801b4a0:	0801f352 	.word	0x0801f352

0801b4a4 <_printf_common>:
 801b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4a8:	4616      	mov	r6, r2
 801b4aa:	4699      	mov	r9, r3
 801b4ac:	688a      	ldr	r2, [r1, #8]
 801b4ae:	690b      	ldr	r3, [r1, #16]
 801b4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	bfb8      	it	lt
 801b4b8:	4613      	movlt	r3, r2
 801b4ba:	6033      	str	r3, [r6, #0]
 801b4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b4c0:	4607      	mov	r7, r0
 801b4c2:	460c      	mov	r4, r1
 801b4c4:	b10a      	cbz	r2, 801b4ca <_printf_common+0x26>
 801b4c6:	3301      	adds	r3, #1
 801b4c8:	6033      	str	r3, [r6, #0]
 801b4ca:	6823      	ldr	r3, [r4, #0]
 801b4cc:	0699      	lsls	r1, r3, #26
 801b4ce:	bf42      	ittt	mi
 801b4d0:	6833      	ldrmi	r3, [r6, #0]
 801b4d2:	3302      	addmi	r3, #2
 801b4d4:	6033      	strmi	r3, [r6, #0]
 801b4d6:	6825      	ldr	r5, [r4, #0]
 801b4d8:	f015 0506 	ands.w	r5, r5, #6
 801b4dc:	d106      	bne.n	801b4ec <_printf_common+0x48>
 801b4de:	f104 0a19 	add.w	sl, r4, #25
 801b4e2:	68e3      	ldr	r3, [r4, #12]
 801b4e4:	6832      	ldr	r2, [r6, #0]
 801b4e6:	1a9b      	subs	r3, r3, r2
 801b4e8:	42ab      	cmp	r3, r5
 801b4ea:	dc26      	bgt.n	801b53a <_printf_common+0x96>
 801b4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b4f0:	1e13      	subs	r3, r2, #0
 801b4f2:	6822      	ldr	r2, [r4, #0]
 801b4f4:	bf18      	it	ne
 801b4f6:	2301      	movne	r3, #1
 801b4f8:	0692      	lsls	r2, r2, #26
 801b4fa:	d42b      	bmi.n	801b554 <_printf_common+0xb0>
 801b4fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b500:	4649      	mov	r1, r9
 801b502:	4638      	mov	r0, r7
 801b504:	47c0      	blx	r8
 801b506:	3001      	adds	r0, #1
 801b508:	d01e      	beq.n	801b548 <_printf_common+0xa4>
 801b50a:	6823      	ldr	r3, [r4, #0]
 801b50c:	68e5      	ldr	r5, [r4, #12]
 801b50e:	6832      	ldr	r2, [r6, #0]
 801b510:	f003 0306 	and.w	r3, r3, #6
 801b514:	2b04      	cmp	r3, #4
 801b516:	bf08      	it	eq
 801b518:	1aad      	subeq	r5, r5, r2
 801b51a:	68a3      	ldr	r3, [r4, #8]
 801b51c:	6922      	ldr	r2, [r4, #16]
 801b51e:	bf0c      	ite	eq
 801b520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b524:	2500      	movne	r5, #0
 801b526:	4293      	cmp	r3, r2
 801b528:	bfc4      	itt	gt
 801b52a:	1a9b      	subgt	r3, r3, r2
 801b52c:	18ed      	addgt	r5, r5, r3
 801b52e:	2600      	movs	r6, #0
 801b530:	341a      	adds	r4, #26
 801b532:	42b5      	cmp	r5, r6
 801b534:	d11a      	bne.n	801b56c <_printf_common+0xc8>
 801b536:	2000      	movs	r0, #0
 801b538:	e008      	b.n	801b54c <_printf_common+0xa8>
 801b53a:	2301      	movs	r3, #1
 801b53c:	4652      	mov	r2, sl
 801b53e:	4649      	mov	r1, r9
 801b540:	4638      	mov	r0, r7
 801b542:	47c0      	blx	r8
 801b544:	3001      	adds	r0, #1
 801b546:	d103      	bne.n	801b550 <_printf_common+0xac>
 801b548:	f04f 30ff 	mov.w	r0, #4294967295
 801b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b550:	3501      	adds	r5, #1
 801b552:	e7c6      	b.n	801b4e2 <_printf_common+0x3e>
 801b554:	18e1      	adds	r1, r4, r3
 801b556:	1c5a      	adds	r2, r3, #1
 801b558:	2030      	movs	r0, #48	; 0x30
 801b55a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b55e:	4422      	add	r2, r4
 801b560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b568:	3302      	adds	r3, #2
 801b56a:	e7c7      	b.n	801b4fc <_printf_common+0x58>
 801b56c:	2301      	movs	r3, #1
 801b56e:	4622      	mov	r2, r4
 801b570:	4649      	mov	r1, r9
 801b572:	4638      	mov	r0, r7
 801b574:	47c0      	blx	r8
 801b576:	3001      	adds	r0, #1
 801b578:	d0e6      	beq.n	801b548 <_printf_common+0xa4>
 801b57a:	3601      	adds	r6, #1
 801b57c:	e7d9      	b.n	801b532 <_printf_common+0x8e>
	...

0801b580 <_printf_i>:
 801b580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b584:	7e0f      	ldrb	r7, [r1, #24]
 801b586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b588:	2f78      	cmp	r7, #120	; 0x78
 801b58a:	4691      	mov	r9, r2
 801b58c:	4680      	mov	r8, r0
 801b58e:	460c      	mov	r4, r1
 801b590:	469a      	mov	sl, r3
 801b592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b596:	d807      	bhi.n	801b5a8 <_printf_i+0x28>
 801b598:	2f62      	cmp	r7, #98	; 0x62
 801b59a:	d80a      	bhi.n	801b5b2 <_printf_i+0x32>
 801b59c:	2f00      	cmp	r7, #0
 801b59e:	f000 80d8 	beq.w	801b752 <_printf_i+0x1d2>
 801b5a2:	2f58      	cmp	r7, #88	; 0x58
 801b5a4:	f000 80a3 	beq.w	801b6ee <_printf_i+0x16e>
 801b5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b5b0:	e03a      	b.n	801b628 <_printf_i+0xa8>
 801b5b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b5b6:	2b15      	cmp	r3, #21
 801b5b8:	d8f6      	bhi.n	801b5a8 <_printf_i+0x28>
 801b5ba:	a101      	add	r1, pc, #4	; (adr r1, 801b5c0 <_printf_i+0x40>)
 801b5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b5c0:	0801b619 	.word	0x0801b619
 801b5c4:	0801b62d 	.word	0x0801b62d
 801b5c8:	0801b5a9 	.word	0x0801b5a9
 801b5cc:	0801b5a9 	.word	0x0801b5a9
 801b5d0:	0801b5a9 	.word	0x0801b5a9
 801b5d4:	0801b5a9 	.word	0x0801b5a9
 801b5d8:	0801b62d 	.word	0x0801b62d
 801b5dc:	0801b5a9 	.word	0x0801b5a9
 801b5e0:	0801b5a9 	.word	0x0801b5a9
 801b5e4:	0801b5a9 	.word	0x0801b5a9
 801b5e8:	0801b5a9 	.word	0x0801b5a9
 801b5ec:	0801b739 	.word	0x0801b739
 801b5f0:	0801b65d 	.word	0x0801b65d
 801b5f4:	0801b71b 	.word	0x0801b71b
 801b5f8:	0801b5a9 	.word	0x0801b5a9
 801b5fc:	0801b5a9 	.word	0x0801b5a9
 801b600:	0801b75b 	.word	0x0801b75b
 801b604:	0801b5a9 	.word	0x0801b5a9
 801b608:	0801b65d 	.word	0x0801b65d
 801b60c:	0801b5a9 	.word	0x0801b5a9
 801b610:	0801b5a9 	.word	0x0801b5a9
 801b614:	0801b723 	.word	0x0801b723
 801b618:	682b      	ldr	r3, [r5, #0]
 801b61a:	1d1a      	adds	r2, r3, #4
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	602a      	str	r2, [r5, #0]
 801b620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b628:	2301      	movs	r3, #1
 801b62a:	e0a3      	b.n	801b774 <_printf_i+0x1f4>
 801b62c:	6820      	ldr	r0, [r4, #0]
 801b62e:	6829      	ldr	r1, [r5, #0]
 801b630:	0606      	lsls	r6, r0, #24
 801b632:	f101 0304 	add.w	r3, r1, #4
 801b636:	d50a      	bpl.n	801b64e <_printf_i+0xce>
 801b638:	680e      	ldr	r6, [r1, #0]
 801b63a:	602b      	str	r3, [r5, #0]
 801b63c:	2e00      	cmp	r6, #0
 801b63e:	da03      	bge.n	801b648 <_printf_i+0xc8>
 801b640:	232d      	movs	r3, #45	; 0x2d
 801b642:	4276      	negs	r6, r6
 801b644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b648:	485e      	ldr	r0, [pc, #376]	; (801b7c4 <_printf_i+0x244>)
 801b64a:	230a      	movs	r3, #10
 801b64c:	e019      	b.n	801b682 <_printf_i+0x102>
 801b64e:	680e      	ldr	r6, [r1, #0]
 801b650:	602b      	str	r3, [r5, #0]
 801b652:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b656:	bf18      	it	ne
 801b658:	b236      	sxthne	r6, r6
 801b65a:	e7ef      	b.n	801b63c <_printf_i+0xbc>
 801b65c:	682b      	ldr	r3, [r5, #0]
 801b65e:	6820      	ldr	r0, [r4, #0]
 801b660:	1d19      	adds	r1, r3, #4
 801b662:	6029      	str	r1, [r5, #0]
 801b664:	0601      	lsls	r1, r0, #24
 801b666:	d501      	bpl.n	801b66c <_printf_i+0xec>
 801b668:	681e      	ldr	r6, [r3, #0]
 801b66a:	e002      	b.n	801b672 <_printf_i+0xf2>
 801b66c:	0646      	lsls	r6, r0, #25
 801b66e:	d5fb      	bpl.n	801b668 <_printf_i+0xe8>
 801b670:	881e      	ldrh	r6, [r3, #0]
 801b672:	4854      	ldr	r0, [pc, #336]	; (801b7c4 <_printf_i+0x244>)
 801b674:	2f6f      	cmp	r7, #111	; 0x6f
 801b676:	bf0c      	ite	eq
 801b678:	2308      	moveq	r3, #8
 801b67a:	230a      	movne	r3, #10
 801b67c:	2100      	movs	r1, #0
 801b67e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b682:	6865      	ldr	r5, [r4, #4]
 801b684:	60a5      	str	r5, [r4, #8]
 801b686:	2d00      	cmp	r5, #0
 801b688:	bfa2      	ittt	ge
 801b68a:	6821      	ldrge	r1, [r4, #0]
 801b68c:	f021 0104 	bicge.w	r1, r1, #4
 801b690:	6021      	strge	r1, [r4, #0]
 801b692:	b90e      	cbnz	r6, 801b698 <_printf_i+0x118>
 801b694:	2d00      	cmp	r5, #0
 801b696:	d04d      	beq.n	801b734 <_printf_i+0x1b4>
 801b698:	4615      	mov	r5, r2
 801b69a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b69e:	fb03 6711 	mls	r7, r3, r1, r6
 801b6a2:	5dc7      	ldrb	r7, [r0, r7]
 801b6a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b6a8:	4637      	mov	r7, r6
 801b6aa:	42bb      	cmp	r3, r7
 801b6ac:	460e      	mov	r6, r1
 801b6ae:	d9f4      	bls.n	801b69a <_printf_i+0x11a>
 801b6b0:	2b08      	cmp	r3, #8
 801b6b2:	d10b      	bne.n	801b6cc <_printf_i+0x14c>
 801b6b4:	6823      	ldr	r3, [r4, #0]
 801b6b6:	07de      	lsls	r6, r3, #31
 801b6b8:	d508      	bpl.n	801b6cc <_printf_i+0x14c>
 801b6ba:	6923      	ldr	r3, [r4, #16]
 801b6bc:	6861      	ldr	r1, [r4, #4]
 801b6be:	4299      	cmp	r1, r3
 801b6c0:	bfde      	ittt	le
 801b6c2:	2330      	movle	r3, #48	; 0x30
 801b6c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b6c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b6cc:	1b52      	subs	r2, r2, r5
 801b6ce:	6122      	str	r2, [r4, #16]
 801b6d0:	f8cd a000 	str.w	sl, [sp]
 801b6d4:	464b      	mov	r3, r9
 801b6d6:	aa03      	add	r2, sp, #12
 801b6d8:	4621      	mov	r1, r4
 801b6da:	4640      	mov	r0, r8
 801b6dc:	f7ff fee2 	bl	801b4a4 <_printf_common>
 801b6e0:	3001      	adds	r0, #1
 801b6e2:	d14c      	bne.n	801b77e <_printf_i+0x1fe>
 801b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b6e8:	b004      	add	sp, #16
 801b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6ee:	4835      	ldr	r0, [pc, #212]	; (801b7c4 <_printf_i+0x244>)
 801b6f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b6f4:	6829      	ldr	r1, [r5, #0]
 801b6f6:	6823      	ldr	r3, [r4, #0]
 801b6f8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b6fc:	6029      	str	r1, [r5, #0]
 801b6fe:	061d      	lsls	r5, r3, #24
 801b700:	d514      	bpl.n	801b72c <_printf_i+0x1ac>
 801b702:	07df      	lsls	r7, r3, #31
 801b704:	bf44      	itt	mi
 801b706:	f043 0320 	orrmi.w	r3, r3, #32
 801b70a:	6023      	strmi	r3, [r4, #0]
 801b70c:	b91e      	cbnz	r6, 801b716 <_printf_i+0x196>
 801b70e:	6823      	ldr	r3, [r4, #0]
 801b710:	f023 0320 	bic.w	r3, r3, #32
 801b714:	6023      	str	r3, [r4, #0]
 801b716:	2310      	movs	r3, #16
 801b718:	e7b0      	b.n	801b67c <_printf_i+0xfc>
 801b71a:	6823      	ldr	r3, [r4, #0]
 801b71c:	f043 0320 	orr.w	r3, r3, #32
 801b720:	6023      	str	r3, [r4, #0]
 801b722:	2378      	movs	r3, #120	; 0x78
 801b724:	4828      	ldr	r0, [pc, #160]	; (801b7c8 <_printf_i+0x248>)
 801b726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b72a:	e7e3      	b.n	801b6f4 <_printf_i+0x174>
 801b72c:	0659      	lsls	r1, r3, #25
 801b72e:	bf48      	it	mi
 801b730:	b2b6      	uxthmi	r6, r6
 801b732:	e7e6      	b.n	801b702 <_printf_i+0x182>
 801b734:	4615      	mov	r5, r2
 801b736:	e7bb      	b.n	801b6b0 <_printf_i+0x130>
 801b738:	682b      	ldr	r3, [r5, #0]
 801b73a:	6826      	ldr	r6, [r4, #0]
 801b73c:	6961      	ldr	r1, [r4, #20]
 801b73e:	1d18      	adds	r0, r3, #4
 801b740:	6028      	str	r0, [r5, #0]
 801b742:	0635      	lsls	r5, r6, #24
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	d501      	bpl.n	801b74c <_printf_i+0x1cc>
 801b748:	6019      	str	r1, [r3, #0]
 801b74a:	e002      	b.n	801b752 <_printf_i+0x1d2>
 801b74c:	0670      	lsls	r0, r6, #25
 801b74e:	d5fb      	bpl.n	801b748 <_printf_i+0x1c8>
 801b750:	8019      	strh	r1, [r3, #0]
 801b752:	2300      	movs	r3, #0
 801b754:	6123      	str	r3, [r4, #16]
 801b756:	4615      	mov	r5, r2
 801b758:	e7ba      	b.n	801b6d0 <_printf_i+0x150>
 801b75a:	682b      	ldr	r3, [r5, #0]
 801b75c:	1d1a      	adds	r2, r3, #4
 801b75e:	602a      	str	r2, [r5, #0]
 801b760:	681d      	ldr	r5, [r3, #0]
 801b762:	6862      	ldr	r2, [r4, #4]
 801b764:	2100      	movs	r1, #0
 801b766:	4628      	mov	r0, r5
 801b768:	f7e4 fdc2 	bl	80002f0 <memchr>
 801b76c:	b108      	cbz	r0, 801b772 <_printf_i+0x1f2>
 801b76e:	1b40      	subs	r0, r0, r5
 801b770:	6060      	str	r0, [r4, #4]
 801b772:	6863      	ldr	r3, [r4, #4]
 801b774:	6123      	str	r3, [r4, #16]
 801b776:	2300      	movs	r3, #0
 801b778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b77c:	e7a8      	b.n	801b6d0 <_printf_i+0x150>
 801b77e:	6923      	ldr	r3, [r4, #16]
 801b780:	462a      	mov	r2, r5
 801b782:	4649      	mov	r1, r9
 801b784:	4640      	mov	r0, r8
 801b786:	47d0      	blx	sl
 801b788:	3001      	adds	r0, #1
 801b78a:	d0ab      	beq.n	801b6e4 <_printf_i+0x164>
 801b78c:	6823      	ldr	r3, [r4, #0]
 801b78e:	079b      	lsls	r3, r3, #30
 801b790:	d413      	bmi.n	801b7ba <_printf_i+0x23a>
 801b792:	68e0      	ldr	r0, [r4, #12]
 801b794:	9b03      	ldr	r3, [sp, #12]
 801b796:	4298      	cmp	r0, r3
 801b798:	bfb8      	it	lt
 801b79a:	4618      	movlt	r0, r3
 801b79c:	e7a4      	b.n	801b6e8 <_printf_i+0x168>
 801b79e:	2301      	movs	r3, #1
 801b7a0:	4632      	mov	r2, r6
 801b7a2:	4649      	mov	r1, r9
 801b7a4:	4640      	mov	r0, r8
 801b7a6:	47d0      	blx	sl
 801b7a8:	3001      	adds	r0, #1
 801b7aa:	d09b      	beq.n	801b6e4 <_printf_i+0x164>
 801b7ac:	3501      	adds	r5, #1
 801b7ae:	68e3      	ldr	r3, [r4, #12]
 801b7b0:	9903      	ldr	r1, [sp, #12]
 801b7b2:	1a5b      	subs	r3, r3, r1
 801b7b4:	42ab      	cmp	r3, r5
 801b7b6:	dcf2      	bgt.n	801b79e <_printf_i+0x21e>
 801b7b8:	e7eb      	b.n	801b792 <_printf_i+0x212>
 801b7ba:	2500      	movs	r5, #0
 801b7bc:	f104 0619 	add.w	r6, r4, #25
 801b7c0:	e7f5      	b.n	801b7ae <_printf_i+0x22e>
 801b7c2:	bf00      	nop
 801b7c4:	0801f35d 	.word	0x0801f35d
 801b7c8:	0801f36e 	.word	0x0801f36e

0801b7cc <_sbrk_r>:
 801b7cc:	b538      	push	{r3, r4, r5, lr}
 801b7ce:	4d06      	ldr	r5, [pc, #24]	; (801b7e8 <_sbrk_r+0x1c>)
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	4608      	mov	r0, r1
 801b7d6:	602b      	str	r3, [r5, #0]
 801b7d8:	f7e5 fd7a 	bl	80012d0 <_sbrk>
 801b7dc:	1c43      	adds	r3, r0, #1
 801b7de:	d102      	bne.n	801b7e6 <_sbrk_r+0x1a>
 801b7e0:	682b      	ldr	r3, [r5, #0]
 801b7e2:	b103      	cbz	r3, 801b7e6 <_sbrk_r+0x1a>
 801b7e4:	6023      	str	r3, [r4, #0]
 801b7e6:	bd38      	pop	{r3, r4, r5, pc}
 801b7e8:	24007828 	.word	0x24007828

0801b7ec <__sread>:
 801b7ec:	b510      	push	{r4, lr}
 801b7ee:	460c      	mov	r4, r1
 801b7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7f4:	f000 fab8 	bl	801bd68 <_read_r>
 801b7f8:	2800      	cmp	r0, #0
 801b7fa:	bfab      	itete	ge
 801b7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b7fe:	89a3      	ldrhlt	r3, [r4, #12]
 801b800:	181b      	addge	r3, r3, r0
 801b802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b806:	bfac      	ite	ge
 801b808:	6563      	strge	r3, [r4, #84]	; 0x54
 801b80a:	81a3      	strhlt	r3, [r4, #12]
 801b80c:	bd10      	pop	{r4, pc}

0801b80e <__swrite>:
 801b80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b812:	461f      	mov	r7, r3
 801b814:	898b      	ldrh	r3, [r1, #12]
 801b816:	05db      	lsls	r3, r3, #23
 801b818:	4605      	mov	r5, r0
 801b81a:	460c      	mov	r4, r1
 801b81c:	4616      	mov	r6, r2
 801b81e:	d505      	bpl.n	801b82c <__swrite+0x1e>
 801b820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b824:	2302      	movs	r3, #2
 801b826:	2200      	movs	r2, #0
 801b828:	f000 f9d0 	bl	801bbcc <_lseek_r>
 801b82c:	89a3      	ldrh	r3, [r4, #12]
 801b82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b836:	81a3      	strh	r3, [r4, #12]
 801b838:	4632      	mov	r2, r6
 801b83a:	463b      	mov	r3, r7
 801b83c:	4628      	mov	r0, r5
 801b83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b842:	f000 b869 	b.w	801b918 <_write_r>

0801b846 <__sseek>:
 801b846:	b510      	push	{r4, lr}
 801b848:	460c      	mov	r4, r1
 801b84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b84e:	f000 f9bd 	bl	801bbcc <_lseek_r>
 801b852:	1c43      	adds	r3, r0, #1
 801b854:	89a3      	ldrh	r3, [r4, #12]
 801b856:	bf15      	itete	ne
 801b858:	6560      	strne	r0, [r4, #84]	; 0x54
 801b85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b862:	81a3      	strheq	r3, [r4, #12]
 801b864:	bf18      	it	ne
 801b866:	81a3      	strhne	r3, [r4, #12]
 801b868:	bd10      	pop	{r4, pc}

0801b86a <__sclose>:
 801b86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b86e:	f000 b8db 	b.w	801ba28 <_close_r>
	...

0801b874 <__swbuf_r>:
 801b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b876:	460e      	mov	r6, r1
 801b878:	4614      	mov	r4, r2
 801b87a:	4605      	mov	r5, r0
 801b87c:	b118      	cbz	r0, 801b886 <__swbuf_r+0x12>
 801b87e:	6983      	ldr	r3, [r0, #24]
 801b880:	b90b      	cbnz	r3, 801b886 <__swbuf_r+0x12>
 801b882:	f7ff f9bf 	bl	801ac04 <__sinit>
 801b886:	4b21      	ldr	r3, [pc, #132]	; (801b90c <__swbuf_r+0x98>)
 801b888:	429c      	cmp	r4, r3
 801b88a:	d12b      	bne.n	801b8e4 <__swbuf_r+0x70>
 801b88c:	686c      	ldr	r4, [r5, #4]
 801b88e:	69a3      	ldr	r3, [r4, #24]
 801b890:	60a3      	str	r3, [r4, #8]
 801b892:	89a3      	ldrh	r3, [r4, #12]
 801b894:	071a      	lsls	r2, r3, #28
 801b896:	d52f      	bpl.n	801b8f8 <__swbuf_r+0x84>
 801b898:	6923      	ldr	r3, [r4, #16]
 801b89a:	b36b      	cbz	r3, 801b8f8 <__swbuf_r+0x84>
 801b89c:	6923      	ldr	r3, [r4, #16]
 801b89e:	6820      	ldr	r0, [r4, #0]
 801b8a0:	1ac0      	subs	r0, r0, r3
 801b8a2:	6963      	ldr	r3, [r4, #20]
 801b8a4:	b2f6      	uxtb	r6, r6
 801b8a6:	4283      	cmp	r3, r0
 801b8a8:	4637      	mov	r7, r6
 801b8aa:	dc04      	bgt.n	801b8b6 <__swbuf_r+0x42>
 801b8ac:	4621      	mov	r1, r4
 801b8ae:	4628      	mov	r0, r5
 801b8b0:	f000 f950 	bl	801bb54 <_fflush_r>
 801b8b4:	bb30      	cbnz	r0, 801b904 <__swbuf_r+0x90>
 801b8b6:	68a3      	ldr	r3, [r4, #8]
 801b8b8:	3b01      	subs	r3, #1
 801b8ba:	60a3      	str	r3, [r4, #8]
 801b8bc:	6823      	ldr	r3, [r4, #0]
 801b8be:	1c5a      	adds	r2, r3, #1
 801b8c0:	6022      	str	r2, [r4, #0]
 801b8c2:	701e      	strb	r6, [r3, #0]
 801b8c4:	6963      	ldr	r3, [r4, #20]
 801b8c6:	3001      	adds	r0, #1
 801b8c8:	4283      	cmp	r3, r0
 801b8ca:	d004      	beq.n	801b8d6 <__swbuf_r+0x62>
 801b8cc:	89a3      	ldrh	r3, [r4, #12]
 801b8ce:	07db      	lsls	r3, r3, #31
 801b8d0:	d506      	bpl.n	801b8e0 <__swbuf_r+0x6c>
 801b8d2:	2e0a      	cmp	r6, #10
 801b8d4:	d104      	bne.n	801b8e0 <__swbuf_r+0x6c>
 801b8d6:	4621      	mov	r1, r4
 801b8d8:	4628      	mov	r0, r5
 801b8da:	f000 f93b 	bl	801bb54 <_fflush_r>
 801b8de:	b988      	cbnz	r0, 801b904 <__swbuf_r+0x90>
 801b8e0:	4638      	mov	r0, r7
 801b8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8e4:	4b0a      	ldr	r3, [pc, #40]	; (801b910 <__swbuf_r+0x9c>)
 801b8e6:	429c      	cmp	r4, r3
 801b8e8:	d101      	bne.n	801b8ee <__swbuf_r+0x7a>
 801b8ea:	68ac      	ldr	r4, [r5, #8]
 801b8ec:	e7cf      	b.n	801b88e <__swbuf_r+0x1a>
 801b8ee:	4b09      	ldr	r3, [pc, #36]	; (801b914 <__swbuf_r+0xa0>)
 801b8f0:	429c      	cmp	r4, r3
 801b8f2:	bf08      	it	eq
 801b8f4:	68ec      	ldreq	r4, [r5, #12]
 801b8f6:	e7ca      	b.n	801b88e <__swbuf_r+0x1a>
 801b8f8:	4621      	mov	r1, r4
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	f000 f81e 	bl	801b93c <__swsetup_r>
 801b900:	2800      	cmp	r0, #0
 801b902:	d0cb      	beq.n	801b89c <__swbuf_r+0x28>
 801b904:	f04f 37ff 	mov.w	r7, #4294967295
 801b908:	e7ea      	b.n	801b8e0 <__swbuf_r+0x6c>
 801b90a:	bf00      	nop
 801b90c:	0801f30c 	.word	0x0801f30c
 801b910:	0801f32c 	.word	0x0801f32c
 801b914:	0801f2ec 	.word	0x0801f2ec

0801b918 <_write_r>:
 801b918:	b538      	push	{r3, r4, r5, lr}
 801b91a:	4d07      	ldr	r5, [pc, #28]	; (801b938 <_write_r+0x20>)
 801b91c:	4604      	mov	r4, r0
 801b91e:	4608      	mov	r0, r1
 801b920:	4611      	mov	r1, r2
 801b922:	2200      	movs	r2, #0
 801b924:	602a      	str	r2, [r5, #0]
 801b926:	461a      	mov	r2, r3
 801b928:	f7e4 ff24 	bl	8000774 <_write>
 801b92c:	1c43      	adds	r3, r0, #1
 801b92e:	d102      	bne.n	801b936 <_write_r+0x1e>
 801b930:	682b      	ldr	r3, [r5, #0]
 801b932:	b103      	cbz	r3, 801b936 <_write_r+0x1e>
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	bd38      	pop	{r3, r4, r5, pc}
 801b938:	24007828 	.word	0x24007828

0801b93c <__swsetup_r>:
 801b93c:	4b32      	ldr	r3, [pc, #200]	; (801ba08 <__swsetup_r+0xcc>)
 801b93e:	b570      	push	{r4, r5, r6, lr}
 801b940:	681d      	ldr	r5, [r3, #0]
 801b942:	4606      	mov	r6, r0
 801b944:	460c      	mov	r4, r1
 801b946:	b125      	cbz	r5, 801b952 <__swsetup_r+0x16>
 801b948:	69ab      	ldr	r3, [r5, #24]
 801b94a:	b913      	cbnz	r3, 801b952 <__swsetup_r+0x16>
 801b94c:	4628      	mov	r0, r5
 801b94e:	f7ff f959 	bl	801ac04 <__sinit>
 801b952:	4b2e      	ldr	r3, [pc, #184]	; (801ba0c <__swsetup_r+0xd0>)
 801b954:	429c      	cmp	r4, r3
 801b956:	d10f      	bne.n	801b978 <__swsetup_r+0x3c>
 801b958:	686c      	ldr	r4, [r5, #4]
 801b95a:	89a3      	ldrh	r3, [r4, #12]
 801b95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b960:	0719      	lsls	r1, r3, #28
 801b962:	d42c      	bmi.n	801b9be <__swsetup_r+0x82>
 801b964:	06dd      	lsls	r5, r3, #27
 801b966:	d411      	bmi.n	801b98c <__swsetup_r+0x50>
 801b968:	2309      	movs	r3, #9
 801b96a:	6033      	str	r3, [r6, #0]
 801b96c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b970:	81a3      	strh	r3, [r4, #12]
 801b972:	f04f 30ff 	mov.w	r0, #4294967295
 801b976:	e03e      	b.n	801b9f6 <__swsetup_r+0xba>
 801b978:	4b25      	ldr	r3, [pc, #148]	; (801ba10 <__swsetup_r+0xd4>)
 801b97a:	429c      	cmp	r4, r3
 801b97c:	d101      	bne.n	801b982 <__swsetup_r+0x46>
 801b97e:	68ac      	ldr	r4, [r5, #8]
 801b980:	e7eb      	b.n	801b95a <__swsetup_r+0x1e>
 801b982:	4b24      	ldr	r3, [pc, #144]	; (801ba14 <__swsetup_r+0xd8>)
 801b984:	429c      	cmp	r4, r3
 801b986:	bf08      	it	eq
 801b988:	68ec      	ldreq	r4, [r5, #12]
 801b98a:	e7e6      	b.n	801b95a <__swsetup_r+0x1e>
 801b98c:	0758      	lsls	r0, r3, #29
 801b98e:	d512      	bpl.n	801b9b6 <__swsetup_r+0x7a>
 801b990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b992:	b141      	cbz	r1, 801b9a6 <__swsetup_r+0x6a>
 801b994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b998:	4299      	cmp	r1, r3
 801b99a:	d002      	beq.n	801b9a2 <__swsetup_r+0x66>
 801b99c:	4630      	mov	r0, r6
 801b99e:	f7ff f9eb 	bl	801ad78 <_free_r>
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	6363      	str	r3, [r4, #52]	; 0x34
 801b9a6:	89a3      	ldrh	r3, [r4, #12]
 801b9a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b9ac:	81a3      	strh	r3, [r4, #12]
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	6063      	str	r3, [r4, #4]
 801b9b2:	6923      	ldr	r3, [r4, #16]
 801b9b4:	6023      	str	r3, [r4, #0]
 801b9b6:	89a3      	ldrh	r3, [r4, #12]
 801b9b8:	f043 0308 	orr.w	r3, r3, #8
 801b9bc:	81a3      	strh	r3, [r4, #12]
 801b9be:	6923      	ldr	r3, [r4, #16]
 801b9c0:	b94b      	cbnz	r3, 801b9d6 <__swsetup_r+0x9a>
 801b9c2:	89a3      	ldrh	r3, [r4, #12]
 801b9c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b9cc:	d003      	beq.n	801b9d6 <__swsetup_r+0x9a>
 801b9ce:	4621      	mov	r1, r4
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	f000 f933 	bl	801bc3c <__smakebuf_r>
 801b9d6:	89a0      	ldrh	r0, [r4, #12]
 801b9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9dc:	f010 0301 	ands.w	r3, r0, #1
 801b9e0:	d00a      	beq.n	801b9f8 <__swsetup_r+0xbc>
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	60a3      	str	r3, [r4, #8]
 801b9e6:	6963      	ldr	r3, [r4, #20]
 801b9e8:	425b      	negs	r3, r3
 801b9ea:	61a3      	str	r3, [r4, #24]
 801b9ec:	6923      	ldr	r3, [r4, #16]
 801b9ee:	b943      	cbnz	r3, 801ba02 <__swsetup_r+0xc6>
 801b9f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b9f4:	d1ba      	bne.n	801b96c <__swsetup_r+0x30>
 801b9f6:	bd70      	pop	{r4, r5, r6, pc}
 801b9f8:	0781      	lsls	r1, r0, #30
 801b9fa:	bf58      	it	pl
 801b9fc:	6963      	ldrpl	r3, [r4, #20]
 801b9fe:	60a3      	str	r3, [r4, #8]
 801ba00:	e7f4      	b.n	801b9ec <__swsetup_r+0xb0>
 801ba02:	2000      	movs	r0, #0
 801ba04:	e7f7      	b.n	801b9f6 <__swsetup_r+0xba>
 801ba06:	bf00      	nop
 801ba08:	24000038 	.word	0x24000038
 801ba0c:	0801f30c 	.word	0x0801f30c
 801ba10:	0801f32c 	.word	0x0801f32c
 801ba14:	0801f2ec 	.word	0x0801f2ec

0801ba18 <abort>:
 801ba18:	b508      	push	{r3, lr}
 801ba1a:	2006      	movs	r0, #6
 801ba1c:	f000 f9de 	bl	801bddc <raise>
 801ba20:	2001      	movs	r0, #1
 801ba22:	f7e5 fbf9 	bl	8001218 <_exit>
	...

0801ba28 <_close_r>:
 801ba28:	b538      	push	{r3, r4, r5, lr}
 801ba2a:	4d06      	ldr	r5, [pc, #24]	; (801ba44 <_close_r+0x1c>)
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	4604      	mov	r4, r0
 801ba30:	4608      	mov	r0, r1
 801ba32:	602b      	str	r3, [r5, #0]
 801ba34:	f7e5 fc17 	bl	8001266 <_close>
 801ba38:	1c43      	adds	r3, r0, #1
 801ba3a:	d102      	bne.n	801ba42 <_close_r+0x1a>
 801ba3c:	682b      	ldr	r3, [r5, #0]
 801ba3e:	b103      	cbz	r3, 801ba42 <_close_r+0x1a>
 801ba40:	6023      	str	r3, [r4, #0]
 801ba42:	bd38      	pop	{r3, r4, r5, pc}
 801ba44:	24007828 	.word	0x24007828

0801ba48 <__sflush_r>:
 801ba48:	898a      	ldrh	r2, [r1, #12]
 801ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba4e:	4605      	mov	r5, r0
 801ba50:	0710      	lsls	r0, r2, #28
 801ba52:	460c      	mov	r4, r1
 801ba54:	d458      	bmi.n	801bb08 <__sflush_r+0xc0>
 801ba56:	684b      	ldr	r3, [r1, #4]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	dc05      	bgt.n	801ba68 <__sflush_r+0x20>
 801ba5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	dc02      	bgt.n	801ba68 <__sflush_r+0x20>
 801ba62:	2000      	movs	r0, #0
 801ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba6a:	2e00      	cmp	r6, #0
 801ba6c:	d0f9      	beq.n	801ba62 <__sflush_r+0x1a>
 801ba6e:	2300      	movs	r3, #0
 801ba70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ba74:	682f      	ldr	r7, [r5, #0]
 801ba76:	602b      	str	r3, [r5, #0]
 801ba78:	d032      	beq.n	801bae0 <__sflush_r+0x98>
 801ba7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ba7c:	89a3      	ldrh	r3, [r4, #12]
 801ba7e:	075a      	lsls	r2, r3, #29
 801ba80:	d505      	bpl.n	801ba8e <__sflush_r+0x46>
 801ba82:	6863      	ldr	r3, [r4, #4]
 801ba84:	1ac0      	subs	r0, r0, r3
 801ba86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba88:	b10b      	cbz	r3, 801ba8e <__sflush_r+0x46>
 801ba8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba8c:	1ac0      	subs	r0, r0, r3
 801ba8e:	2300      	movs	r3, #0
 801ba90:	4602      	mov	r2, r0
 801ba92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba94:	6a21      	ldr	r1, [r4, #32]
 801ba96:	4628      	mov	r0, r5
 801ba98:	47b0      	blx	r6
 801ba9a:	1c43      	adds	r3, r0, #1
 801ba9c:	89a3      	ldrh	r3, [r4, #12]
 801ba9e:	d106      	bne.n	801baae <__sflush_r+0x66>
 801baa0:	6829      	ldr	r1, [r5, #0]
 801baa2:	291d      	cmp	r1, #29
 801baa4:	d82c      	bhi.n	801bb00 <__sflush_r+0xb8>
 801baa6:	4a2a      	ldr	r2, [pc, #168]	; (801bb50 <__sflush_r+0x108>)
 801baa8:	40ca      	lsrs	r2, r1
 801baaa:	07d6      	lsls	r6, r2, #31
 801baac:	d528      	bpl.n	801bb00 <__sflush_r+0xb8>
 801baae:	2200      	movs	r2, #0
 801bab0:	6062      	str	r2, [r4, #4]
 801bab2:	04d9      	lsls	r1, r3, #19
 801bab4:	6922      	ldr	r2, [r4, #16]
 801bab6:	6022      	str	r2, [r4, #0]
 801bab8:	d504      	bpl.n	801bac4 <__sflush_r+0x7c>
 801baba:	1c42      	adds	r2, r0, #1
 801babc:	d101      	bne.n	801bac2 <__sflush_r+0x7a>
 801babe:	682b      	ldr	r3, [r5, #0]
 801bac0:	b903      	cbnz	r3, 801bac4 <__sflush_r+0x7c>
 801bac2:	6560      	str	r0, [r4, #84]	; 0x54
 801bac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bac6:	602f      	str	r7, [r5, #0]
 801bac8:	2900      	cmp	r1, #0
 801baca:	d0ca      	beq.n	801ba62 <__sflush_r+0x1a>
 801bacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bad0:	4299      	cmp	r1, r3
 801bad2:	d002      	beq.n	801bada <__sflush_r+0x92>
 801bad4:	4628      	mov	r0, r5
 801bad6:	f7ff f94f 	bl	801ad78 <_free_r>
 801bada:	2000      	movs	r0, #0
 801badc:	6360      	str	r0, [r4, #52]	; 0x34
 801bade:	e7c1      	b.n	801ba64 <__sflush_r+0x1c>
 801bae0:	6a21      	ldr	r1, [r4, #32]
 801bae2:	2301      	movs	r3, #1
 801bae4:	4628      	mov	r0, r5
 801bae6:	47b0      	blx	r6
 801bae8:	1c41      	adds	r1, r0, #1
 801baea:	d1c7      	bne.n	801ba7c <__sflush_r+0x34>
 801baec:	682b      	ldr	r3, [r5, #0]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d0c4      	beq.n	801ba7c <__sflush_r+0x34>
 801baf2:	2b1d      	cmp	r3, #29
 801baf4:	d001      	beq.n	801bafa <__sflush_r+0xb2>
 801baf6:	2b16      	cmp	r3, #22
 801baf8:	d101      	bne.n	801bafe <__sflush_r+0xb6>
 801bafa:	602f      	str	r7, [r5, #0]
 801bafc:	e7b1      	b.n	801ba62 <__sflush_r+0x1a>
 801bafe:	89a3      	ldrh	r3, [r4, #12]
 801bb00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb04:	81a3      	strh	r3, [r4, #12]
 801bb06:	e7ad      	b.n	801ba64 <__sflush_r+0x1c>
 801bb08:	690f      	ldr	r7, [r1, #16]
 801bb0a:	2f00      	cmp	r7, #0
 801bb0c:	d0a9      	beq.n	801ba62 <__sflush_r+0x1a>
 801bb0e:	0793      	lsls	r3, r2, #30
 801bb10:	680e      	ldr	r6, [r1, #0]
 801bb12:	bf08      	it	eq
 801bb14:	694b      	ldreq	r3, [r1, #20]
 801bb16:	600f      	str	r7, [r1, #0]
 801bb18:	bf18      	it	ne
 801bb1a:	2300      	movne	r3, #0
 801bb1c:	eba6 0807 	sub.w	r8, r6, r7
 801bb20:	608b      	str	r3, [r1, #8]
 801bb22:	f1b8 0f00 	cmp.w	r8, #0
 801bb26:	dd9c      	ble.n	801ba62 <__sflush_r+0x1a>
 801bb28:	6a21      	ldr	r1, [r4, #32]
 801bb2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb2c:	4643      	mov	r3, r8
 801bb2e:	463a      	mov	r2, r7
 801bb30:	4628      	mov	r0, r5
 801bb32:	47b0      	blx	r6
 801bb34:	2800      	cmp	r0, #0
 801bb36:	dc06      	bgt.n	801bb46 <__sflush_r+0xfe>
 801bb38:	89a3      	ldrh	r3, [r4, #12]
 801bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb3e:	81a3      	strh	r3, [r4, #12]
 801bb40:	f04f 30ff 	mov.w	r0, #4294967295
 801bb44:	e78e      	b.n	801ba64 <__sflush_r+0x1c>
 801bb46:	4407      	add	r7, r0
 801bb48:	eba8 0800 	sub.w	r8, r8, r0
 801bb4c:	e7e9      	b.n	801bb22 <__sflush_r+0xda>
 801bb4e:	bf00      	nop
 801bb50:	20400001 	.word	0x20400001

0801bb54 <_fflush_r>:
 801bb54:	b538      	push	{r3, r4, r5, lr}
 801bb56:	690b      	ldr	r3, [r1, #16]
 801bb58:	4605      	mov	r5, r0
 801bb5a:	460c      	mov	r4, r1
 801bb5c:	b913      	cbnz	r3, 801bb64 <_fflush_r+0x10>
 801bb5e:	2500      	movs	r5, #0
 801bb60:	4628      	mov	r0, r5
 801bb62:	bd38      	pop	{r3, r4, r5, pc}
 801bb64:	b118      	cbz	r0, 801bb6e <_fflush_r+0x1a>
 801bb66:	6983      	ldr	r3, [r0, #24]
 801bb68:	b90b      	cbnz	r3, 801bb6e <_fflush_r+0x1a>
 801bb6a:	f7ff f84b 	bl	801ac04 <__sinit>
 801bb6e:	4b14      	ldr	r3, [pc, #80]	; (801bbc0 <_fflush_r+0x6c>)
 801bb70:	429c      	cmp	r4, r3
 801bb72:	d11b      	bne.n	801bbac <_fflush_r+0x58>
 801bb74:	686c      	ldr	r4, [r5, #4]
 801bb76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d0ef      	beq.n	801bb5e <_fflush_r+0xa>
 801bb7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bb80:	07d0      	lsls	r0, r2, #31
 801bb82:	d404      	bmi.n	801bb8e <_fflush_r+0x3a>
 801bb84:	0599      	lsls	r1, r3, #22
 801bb86:	d402      	bmi.n	801bb8e <_fflush_r+0x3a>
 801bb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb8a:	f7ff f8eb 	bl	801ad64 <__retarget_lock_acquire_recursive>
 801bb8e:	4628      	mov	r0, r5
 801bb90:	4621      	mov	r1, r4
 801bb92:	f7ff ff59 	bl	801ba48 <__sflush_r>
 801bb96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb98:	07da      	lsls	r2, r3, #31
 801bb9a:	4605      	mov	r5, r0
 801bb9c:	d4e0      	bmi.n	801bb60 <_fflush_r+0xc>
 801bb9e:	89a3      	ldrh	r3, [r4, #12]
 801bba0:	059b      	lsls	r3, r3, #22
 801bba2:	d4dd      	bmi.n	801bb60 <_fflush_r+0xc>
 801bba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bba6:	f7ff f8de 	bl	801ad66 <__retarget_lock_release_recursive>
 801bbaa:	e7d9      	b.n	801bb60 <_fflush_r+0xc>
 801bbac:	4b05      	ldr	r3, [pc, #20]	; (801bbc4 <_fflush_r+0x70>)
 801bbae:	429c      	cmp	r4, r3
 801bbb0:	d101      	bne.n	801bbb6 <_fflush_r+0x62>
 801bbb2:	68ac      	ldr	r4, [r5, #8]
 801bbb4:	e7df      	b.n	801bb76 <_fflush_r+0x22>
 801bbb6:	4b04      	ldr	r3, [pc, #16]	; (801bbc8 <_fflush_r+0x74>)
 801bbb8:	429c      	cmp	r4, r3
 801bbba:	bf08      	it	eq
 801bbbc:	68ec      	ldreq	r4, [r5, #12]
 801bbbe:	e7da      	b.n	801bb76 <_fflush_r+0x22>
 801bbc0:	0801f30c 	.word	0x0801f30c
 801bbc4:	0801f32c 	.word	0x0801f32c
 801bbc8:	0801f2ec 	.word	0x0801f2ec

0801bbcc <_lseek_r>:
 801bbcc:	b538      	push	{r3, r4, r5, lr}
 801bbce:	4d07      	ldr	r5, [pc, #28]	; (801bbec <_lseek_r+0x20>)
 801bbd0:	4604      	mov	r4, r0
 801bbd2:	4608      	mov	r0, r1
 801bbd4:	4611      	mov	r1, r2
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	602a      	str	r2, [r5, #0]
 801bbda:	461a      	mov	r2, r3
 801bbdc:	f7e5 fb6a 	bl	80012b4 <_lseek>
 801bbe0:	1c43      	adds	r3, r0, #1
 801bbe2:	d102      	bne.n	801bbea <_lseek_r+0x1e>
 801bbe4:	682b      	ldr	r3, [r5, #0]
 801bbe6:	b103      	cbz	r3, 801bbea <_lseek_r+0x1e>
 801bbe8:	6023      	str	r3, [r4, #0]
 801bbea:	bd38      	pop	{r3, r4, r5, pc}
 801bbec:	24007828 	.word	0x24007828

0801bbf0 <__swhatbuf_r>:
 801bbf0:	b570      	push	{r4, r5, r6, lr}
 801bbf2:	460e      	mov	r6, r1
 801bbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbf8:	2900      	cmp	r1, #0
 801bbfa:	b096      	sub	sp, #88	; 0x58
 801bbfc:	4614      	mov	r4, r2
 801bbfe:	461d      	mov	r5, r3
 801bc00:	da08      	bge.n	801bc14 <__swhatbuf_r+0x24>
 801bc02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bc06:	2200      	movs	r2, #0
 801bc08:	602a      	str	r2, [r5, #0]
 801bc0a:	061a      	lsls	r2, r3, #24
 801bc0c:	d410      	bmi.n	801bc30 <__swhatbuf_r+0x40>
 801bc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc12:	e00e      	b.n	801bc32 <__swhatbuf_r+0x42>
 801bc14:	466a      	mov	r2, sp
 801bc16:	f000 f8fd 	bl	801be14 <_fstat_r>
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	dbf1      	blt.n	801bc02 <__swhatbuf_r+0x12>
 801bc1e:	9a01      	ldr	r2, [sp, #4]
 801bc20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc28:	425a      	negs	r2, r3
 801bc2a:	415a      	adcs	r2, r3
 801bc2c:	602a      	str	r2, [r5, #0]
 801bc2e:	e7ee      	b.n	801bc0e <__swhatbuf_r+0x1e>
 801bc30:	2340      	movs	r3, #64	; 0x40
 801bc32:	2000      	movs	r0, #0
 801bc34:	6023      	str	r3, [r4, #0]
 801bc36:	b016      	add	sp, #88	; 0x58
 801bc38:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bc3c <__smakebuf_r>:
 801bc3c:	898b      	ldrh	r3, [r1, #12]
 801bc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc40:	079d      	lsls	r5, r3, #30
 801bc42:	4606      	mov	r6, r0
 801bc44:	460c      	mov	r4, r1
 801bc46:	d507      	bpl.n	801bc58 <__smakebuf_r+0x1c>
 801bc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc4c:	6023      	str	r3, [r4, #0]
 801bc4e:	6123      	str	r3, [r4, #16]
 801bc50:	2301      	movs	r3, #1
 801bc52:	6163      	str	r3, [r4, #20]
 801bc54:	b002      	add	sp, #8
 801bc56:	bd70      	pop	{r4, r5, r6, pc}
 801bc58:	ab01      	add	r3, sp, #4
 801bc5a:	466a      	mov	r2, sp
 801bc5c:	f7ff ffc8 	bl	801bbf0 <__swhatbuf_r>
 801bc60:	9900      	ldr	r1, [sp, #0]
 801bc62:	4605      	mov	r5, r0
 801bc64:	4630      	mov	r0, r6
 801bc66:	f7ff f8f3 	bl	801ae50 <_malloc_r>
 801bc6a:	b948      	cbnz	r0, 801bc80 <__smakebuf_r+0x44>
 801bc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc70:	059a      	lsls	r2, r3, #22
 801bc72:	d4ef      	bmi.n	801bc54 <__smakebuf_r+0x18>
 801bc74:	f023 0303 	bic.w	r3, r3, #3
 801bc78:	f043 0302 	orr.w	r3, r3, #2
 801bc7c:	81a3      	strh	r3, [r4, #12]
 801bc7e:	e7e3      	b.n	801bc48 <__smakebuf_r+0xc>
 801bc80:	4b0d      	ldr	r3, [pc, #52]	; (801bcb8 <__smakebuf_r+0x7c>)
 801bc82:	62b3      	str	r3, [r6, #40]	; 0x28
 801bc84:	89a3      	ldrh	r3, [r4, #12]
 801bc86:	6020      	str	r0, [r4, #0]
 801bc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc8c:	81a3      	strh	r3, [r4, #12]
 801bc8e:	9b00      	ldr	r3, [sp, #0]
 801bc90:	6163      	str	r3, [r4, #20]
 801bc92:	9b01      	ldr	r3, [sp, #4]
 801bc94:	6120      	str	r0, [r4, #16]
 801bc96:	b15b      	cbz	r3, 801bcb0 <__smakebuf_r+0x74>
 801bc98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc9c:	4630      	mov	r0, r6
 801bc9e:	f000 f8cb 	bl	801be38 <_isatty_r>
 801bca2:	b128      	cbz	r0, 801bcb0 <__smakebuf_r+0x74>
 801bca4:	89a3      	ldrh	r3, [r4, #12]
 801bca6:	f023 0303 	bic.w	r3, r3, #3
 801bcaa:	f043 0301 	orr.w	r3, r3, #1
 801bcae:	81a3      	strh	r3, [r4, #12]
 801bcb0:	89a0      	ldrh	r0, [r4, #12]
 801bcb2:	4305      	orrs	r5, r0
 801bcb4:	81a5      	strh	r5, [r4, #12]
 801bcb6:	e7cd      	b.n	801bc54 <__smakebuf_r+0x18>
 801bcb8:	0801ab9d 	.word	0x0801ab9d

0801bcbc <memmove>:
 801bcbc:	4288      	cmp	r0, r1
 801bcbe:	b510      	push	{r4, lr}
 801bcc0:	eb01 0402 	add.w	r4, r1, r2
 801bcc4:	d902      	bls.n	801bccc <memmove+0x10>
 801bcc6:	4284      	cmp	r4, r0
 801bcc8:	4623      	mov	r3, r4
 801bcca:	d807      	bhi.n	801bcdc <memmove+0x20>
 801bccc:	1e43      	subs	r3, r0, #1
 801bcce:	42a1      	cmp	r1, r4
 801bcd0:	d008      	beq.n	801bce4 <memmove+0x28>
 801bcd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bcd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcda:	e7f8      	b.n	801bcce <memmove+0x12>
 801bcdc:	4402      	add	r2, r0
 801bcde:	4601      	mov	r1, r0
 801bce0:	428a      	cmp	r2, r1
 801bce2:	d100      	bne.n	801bce6 <memmove+0x2a>
 801bce4:	bd10      	pop	{r4, pc}
 801bce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcee:	e7f7      	b.n	801bce0 <memmove+0x24>

0801bcf0 <__malloc_lock>:
 801bcf0:	4801      	ldr	r0, [pc, #4]	; (801bcf8 <__malloc_lock+0x8>)
 801bcf2:	f7ff b837 	b.w	801ad64 <__retarget_lock_acquire_recursive>
 801bcf6:	bf00      	nop
 801bcf8:	24007830 	.word	0x24007830

0801bcfc <__malloc_unlock>:
 801bcfc:	4801      	ldr	r0, [pc, #4]	; (801bd04 <__malloc_unlock+0x8>)
 801bcfe:	f7ff b832 	b.w	801ad66 <__retarget_lock_release_recursive>
 801bd02:	bf00      	nop
 801bd04:	24007830 	.word	0x24007830

0801bd08 <_realloc_r>:
 801bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd0c:	4680      	mov	r8, r0
 801bd0e:	4614      	mov	r4, r2
 801bd10:	460e      	mov	r6, r1
 801bd12:	b921      	cbnz	r1, 801bd1e <_realloc_r+0x16>
 801bd14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd18:	4611      	mov	r1, r2
 801bd1a:	f7ff b899 	b.w	801ae50 <_malloc_r>
 801bd1e:	b92a      	cbnz	r2, 801bd2c <_realloc_r+0x24>
 801bd20:	f7ff f82a 	bl	801ad78 <_free_r>
 801bd24:	4625      	mov	r5, r4
 801bd26:	4628      	mov	r0, r5
 801bd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd2c:	f000 f894 	bl	801be58 <_malloc_usable_size_r>
 801bd30:	4284      	cmp	r4, r0
 801bd32:	4607      	mov	r7, r0
 801bd34:	d802      	bhi.n	801bd3c <_realloc_r+0x34>
 801bd36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bd3a:	d812      	bhi.n	801bd62 <_realloc_r+0x5a>
 801bd3c:	4621      	mov	r1, r4
 801bd3e:	4640      	mov	r0, r8
 801bd40:	f7ff f886 	bl	801ae50 <_malloc_r>
 801bd44:	4605      	mov	r5, r0
 801bd46:	2800      	cmp	r0, #0
 801bd48:	d0ed      	beq.n	801bd26 <_realloc_r+0x1e>
 801bd4a:	42bc      	cmp	r4, r7
 801bd4c:	4622      	mov	r2, r4
 801bd4e:	4631      	mov	r1, r6
 801bd50:	bf28      	it	cs
 801bd52:	463a      	movcs	r2, r7
 801bd54:	f7fe fe40 	bl	801a9d8 <memcpy>
 801bd58:	4631      	mov	r1, r6
 801bd5a:	4640      	mov	r0, r8
 801bd5c:	f7ff f80c 	bl	801ad78 <_free_r>
 801bd60:	e7e1      	b.n	801bd26 <_realloc_r+0x1e>
 801bd62:	4635      	mov	r5, r6
 801bd64:	e7df      	b.n	801bd26 <_realloc_r+0x1e>
	...

0801bd68 <_read_r>:
 801bd68:	b538      	push	{r3, r4, r5, lr}
 801bd6a:	4d07      	ldr	r5, [pc, #28]	; (801bd88 <_read_r+0x20>)
 801bd6c:	4604      	mov	r4, r0
 801bd6e:	4608      	mov	r0, r1
 801bd70:	4611      	mov	r1, r2
 801bd72:	2200      	movs	r2, #0
 801bd74:	602a      	str	r2, [r5, #0]
 801bd76:	461a      	mov	r2, r3
 801bd78:	f7e5 fa58 	bl	800122c <_read>
 801bd7c:	1c43      	adds	r3, r0, #1
 801bd7e:	d102      	bne.n	801bd86 <_read_r+0x1e>
 801bd80:	682b      	ldr	r3, [r5, #0]
 801bd82:	b103      	cbz	r3, 801bd86 <_read_r+0x1e>
 801bd84:	6023      	str	r3, [r4, #0]
 801bd86:	bd38      	pop	{r3, r4, r5, pc}
 801bd88:	24007828 	.word	0x24007828

0801bd8c <_raise_r>:
 801bd8c:	291f      	cmp	r1, #31
 801bd8e:	b538      	push	{r3, r4, r5, lr}
 801bd90:	4604      	mov	r4, r0
 801bd92:	460d      	mov	r5, r1
 801bd94:	d904      	bls.n	801bda0 <_raise_r+0x14>
 801bd96:	2316      	movs	r3, #22
 801bd98:	6003      	str	r3, [r0, #0]
 801bd9a:	f04f 30ff 	mov.w	r0, #4294967295
 801bd9e:	bd38      	pop	{r3, r4, r5, pc}
 801bda0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bda2:	b112      	cbz	r2, 801bdaa <_raise_r+0x1e>
 801bda4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bda8:	b94b      	cbnz	r3, 801bdbe <_raise_r+0x32>
 801bdaa:	4620      	mov	r0, r4
 801bdac:	f000 f830 	bl	801be10 <_getpid_r>
 801bdb0:	462a      	mov	r2, r5
 801bdb2:	4601      	mov	r1, r0
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bdba:	f000 b817 	b.w	801bdec <_kill_r>
 801bdbe:	2b01      	cmp	r3, #1
 801bdc0:	d00a      	beq.n	801bdd8 <_raise_r+0x4c>
 801bdc2:	1c59      	adds	r1, r3, #1
 801bdc4:	d103      	bne.n	801bdce <_raise_r+0x42>
 801bdc6:	2316      	movs	r3, #22
 801bdc8:	6003      	str	r3, [r0, #0]
 801bdca:	2001      	movs	r0, #1
 801bdcc:	e7e7      	b.n	801bd9e <_raise_r+0x12>
 801bdce:	2400      	movs	r4, #0
 801bdd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bdd4:	4628      	mov	r0, r5
 801bdd6:	4798      	blx	r3
 801bdd8:	2000      	movs	r0, #0
 801bdda:	e7e0      	b.n	801bd9e <_raise_r+0x12>

0801bddc <raise>:
 801bddc:	4b02      	ldr	r3, [pc, #8]	; (801bde8 <raise+0xc>)
 801bdde:	4601      	mov	r1, r0
 801bde0:	6818      	ldr	r0, [r3, #0]
 801bde2:	f7ff bfd3 	b.w	801bd8c <_raise_r>
 801bde6:	bf00      	nop
 801bde8:	24000038 	.word	0x24000038

0801bdec <_kill_r>:
 801bdec:	b538      	push	{r3, r4, r5, lr}
 801bdee:	4d07      	ldr	r5, [pc, #28]	; (801be0c <_kill_r+0x20>)
 801bdf0:	2300      	movs	r3, #0
 801bdf2:	4604      	mov	r4, r0
 801bdf4:	4608      	mov	r0, r1
 801bdf6:	4611      	mov	r1, r2
 801bdf8:	602b      	str	r3, [r5, #0]
 801bdfa:	f7e5 f9fb 	bl	80011f4 <_kill>
 801bdfe:	1c43      	adds	r3, r0, #1
 801be00:	d102      	bne.n	801be08 <_kill_r+0x1c>
 801be02:	682b      	ldr	r3, [r5, #0]
 801be04:	b103      	cbz	r3, 801be08 <_kill_r+0x1c>
 801be06:	6023      	str	r3, [r4, #0]
 801be08:	bd38      	pop	{r3, r4, r5, pc}
 801be0a:	bf00      	nop
 801be0c:	24007828 	.word	0x24007828

0801be10 <_getpid_r>:
 801be10:	f7e5 b9e8 	b.w	80011e4 <_getpid>

0801be14 <_fstat_r>:
 801be14:	b538      	push	{r3, r4, r5, lr}
 801be16:	4d07      	ldr	r5, [pc, #28]	; (801be34 <_fstat_r+0x20>)
 801be18:	2300      	movs	r3, #0
 801be1a:	4604      	mov	r4, r0
 801be1c:	4608      	mov	r0, r1
 801be1e:	4611      	mov	r1, r2
 801be20:	602b      	str	r3, [r5, #0]
 801be22:	f7e5 fa2c 	bl	800127e <_fstat>
 801be26:	1c43      	adds	r3, r0, #1
 801be28:	d102      	bne.n	801be30 <_fstat_r+0x1c>
 801be2a:	682b      	ldr	r3, [r5, #0]
 801be2c:	b103      	cbz	r3, 801be30 <_fstat_r+0x1c>
 801be2e:	6023      	str	r3, [r4, #0]
 801be30:	bd38      	pop	{r3, r4, r5, pc}
 801be32:	bf00      	nop
 801be34:	24007828 	.word	0x24007828

0801be38 <_isatty_r>:
 801be38:	b538      	push	{r3, r4, r5, lr}
 801be3a:	4d06      	ldr	r5, [pc, #24]	; (801be54 <_isatty_r+0x1c>)
 801be3c:	2300      	movs	r3, #0
 801be3e:	4604      	mov	r4, r0
 801be40:	4608      	mov	r0, r1
 801be42:	602b      	str	r3, [r5, #0]
 801be44:	f7e5 fa2b 	bl	800129e <_isatty>
 801be48:	1c43      	adds	r3, r0, #1
 801be4a:	d102      	bne.n	801be52 <_isatty_r+0x1a>
 801be4c:	682b      	ldr	r3, [r5, #0]
 801be4e:	b103      	cbz	r3, 801be52 <_isatty_r+0x1a>
 801be50:	6023      	str	r3, [r4, #0]
 801be52:	bd38      	pop	{r3, r4, r5, pc}
 801be54:	24007828 	.word	0x24007828

0801be58 <_malloc_usable_size_r>:
 801be58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801be5c:	1f18      	subs	r0, r3, #4
 801be5e:	2b00      	cmp	r3, #0
 801be60:	bfbc      	itt	lt
 801be62:	580b      	ldrlt	r3, [r1, r0]
 801be64:	18c0      	addlt	r0, r0, r3
 801be66:	4770      	bx	lr

0801be68 <_init>:
 801be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be6a:	bf00      	nop
 801be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be6e:	bc08      	pop	{r3}
 801be70:	469e      	mov	lr, r3
 801be72:	4770      	bx	lr

0801be74 <_fini>:
 801be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be76:	bf00      	nop
 801be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be7a:	bc08      	pop	{r3}
 801be7c:	469e      	mov	lr, r3
 801be7e:	4770      	bx	lr
