
STM32H745_Ethernet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003604  0801beec  0801beec  0001ceec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f4f0  0801f4f0  000204f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f4f8  0801f4f8  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f4fc  0801f4fc  000204fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0801f500  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000078dc  24000094  0801f594  00021094  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007970  0801f594  00021970  2**0
                  ALLOC
  9 .lwip_sec     00001a00  30040000  0801f594  00022000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00021094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037a47  00000000  00000000  000210c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000089f6  00000000  00000000  00058b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027a8  00000000  00000000  00061500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001eb7  00000000  00000000  00063ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004d2cf  00000000  00000000  00065b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004310e  00000000  00000000  000b2e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a519c  00000000  00000000  000f5f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0029b0d8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ac34  00000000  00000000  0029b11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  002a5d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bed4 	.word	0x0801bed4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0801bed4 	.word	0x0801bed4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <SystemInit+0xc4>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <SystemInit+0xc4>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <SystemInit+0xc4>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a2a      	ldr	r2, [pc, #168]	@ (8000744 <SystemInit+0xc4>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemInit+0xc8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0xc8>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ac:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <SystemInit+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006b2:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemInit+0xc8>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4924      	ldr	r1, [pc, #144]	@ (8000748 <SystemInit+0xc8>)
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <SystemInit+0xcc>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SystemInit+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <SystemInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <SystemInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <SystemInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <SystemInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <SystemInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <SystemInit+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <SystemInit+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <SystemInit+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <SystemInit+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <SystemInit+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <SystemInit+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <SystemInit+0xc8>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <SystemInit+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <SystemInit+0xd0>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <SystemInit+0xd0>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071c:	6253      	str	r3, [r2, #36]	@ 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <SystemInit+0xd4>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <SystemInit+0xd8>)
 8000724:	4013      	ands	r3, r2
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <SystemInit+0xdc>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <SystemInit+0xc4>)
 8000734:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000738:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	580000c0 	.word	0x580000c0
 8000754:	5c001000 	.word	0x5c001000
 8000758:	ffff0000 	.word	0xffff0000
 800075c:	51008108 	.word	0x51008108

08000760 <_write>:
#include "main.h"
#include "usart.h"

int _write(int file, char *ptr, int len)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800078c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4a06      	ldr	r2, [pc, #24]	@ (80007ac <vApplicationGetIdleTaskMemory+0x30>)
 8000792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	240000b8 	.word	0x240000b8
 80007ac:	2400010c 	.word	0x2400010c

080007b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08e      	sub	sp, #56	@ 0x38
 80007b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_FREERTOS_Init+0x58>)
 80007b8:	f107 041c 	add.w	r4, r7, #28
 80007bc:	461d      	mov	r5, r3
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f009 fd56 	bl	800a282 <osThreadCreate>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <MX_FREERTOS_Init+0x5c>)
 80007da:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkTask */
  osThreadDef(BlinkTask, StartBlinkTask, osPriorityLow, 0, 256);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_FREERTOS_Init+0x60>)
 80007de:	463c      	mov	r4, r7
 80007e0:	461d      	mov	r5, r3
 80007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkTaskHandle = osThreadCreate(osThread(BlinkTask), NULL);
 80007ee:	463b      	mov	r3, r7
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 fd45 	bl	800a282 <osThreadCreate>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <MX_FREERTOS_Init+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007fe:	bf00      	nop
 8000800:	3738      	adds	r7, #56	@ 0x38
 8000802:	46bd      	mov	sp, r7
 8000804:	bdb0      	pop	{r4, r5, r7, pc}
 8000806:	bf00      	nop
 8000808:	0801bef8 	.word	0x0801bef8
 800080c:	240000b0 	.word	0x240000b0
 8000810:	0801bf20 	.word	0x0801bf20
 8000814:	240000b4 	.word	0x240000b4

08000818 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000820:	f008 ffea 	bl	80097f8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  http_server_netconn_init();
 8000824:	f000 fa18 	bl	8000c58 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f009 fd76 	bl	800a31a <osDelay>
 800082e:	e7fb      	b.n	8000828 <StartDefaultTask+0x10>

08000830 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	b0ad      	sub	sp, #180	@ 0xb4
 8000834:	af06      	add	r7, sp, #24
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */

	uint32_t id0 = HAL_GetUIDw0();
 8000838:	f001 f8aa 	bl	8001990 <HAL_GetUIDw0>
 800083c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

	uint8_t mac[6];

	// first 3 bytes are ST specific max prefixes
	mac[0] = 0x00;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	mac[1] = 0x80;
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	mac[2] = 0xE1;
 800084c:	23e1      	movs	r3, #225	@ 0xe1
 800084e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a

	// last 3 bytes are used to set unique mac based on UID
	mac[3] = (id0 >> 16) & 0x000000FF;
 8000852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	mac[4] = (id0 >> 8) & 0x000000FF;
 800085e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	mac[5] = (id0 >> 0) & 0x000000FF;
 800086a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

	uint8_t msg[128];
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000874:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 8000878:	461e      	mov	r6, r3
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800087a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800087e:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8000882:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8000886:	f897 008c 	ldrb.w	r0, [r7, #140]	@ 0x8c
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 800088a:	4604      	mov	r4, r0
			id0, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800088c:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
	size_t len = sprintf((char*)msg, "Unique ID:  %#x\r\nMAC address: %02X:%02X:%02X:%02X:%02X:%02X\r\n\r\n",
 8000890:	4605      	mov	r5, r0
 8000892:	f107 0008 	add.w	r0, r7, #8
 8000896:	9504      	str	r5, [sp, #16]
 8000898:	9403      	str	r4, [sp, #12]
 800089a:	9102      	str	r1, [sp, #8]
 800089c:	9201      	str	r2, [sp, #4]
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	4633      	mov	r3, r6
 80008a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <StartBlinkTask+0xac>)
 80008a8:	f01a fa42 	bl	801ad30 <siprintf>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	HAL_UART_Transmit(&huart3, msg, len, HAL_MAX_DELAY);
 80008b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	f107 0108 	add.w	r1, r7, #8
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <StartBlinkTask+0xb0>)
 80008c2:	f006 f8c9 	bl	8006a58 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008c6:	2102      	movs	r1, #2
 80008c8:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <StartBlinkTask+0xb4>)
 80008ca:	f003 fa60 	bl	8003d8e <HAL_GPIO_TogglePin>
    osDelay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d2:	f009 fd22 	bl	800a31a <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d6:	bf00      	nop
 80008d8:	e7f5      	b.n	80008c6 <StartBlinkTask+0x96>
 80008da:	bf00      	nop
 80008dc:	0801bf3c 	.word	0x0801bf3c
 80008e0:	24000590 	.word	0x24000590
 80008e4:	58021000 	.word	0x58021000

080008e8 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	4a51      	ldr	r2, [pc, #324]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	4a4a      	ldr	r2, [pc, #296]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b3c      	ldr	r3, [pc, #240]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	4a33      	ldr	r2, [pc, #204]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000994:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <MX_GPIO_Init+0x164>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	4a2c      	ldr	r2, [pc, #176]	@ (8000a4c <MX_GPIO_Init+0x164>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <MX_GPIO_Init+0x164>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <MX_GPIO_Init+0x164>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	4a24      	ldr	r2, [pc, #144]	@ (8000a4c <MX_GPIO_Init+0x164>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c2:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_GPIO_Init+0x164>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d6:	481e      	ldr	r0, [pc, #120]	@ (8000a50 <MX_GPIO_Init+0x168>)
 80009d8:	f003 f9c0 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2102      	movs	r1, #2
 80009e0:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0x16c>)
 80009e2:	f003 f9bb 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4814      	ldr	r0, [pc, #80]	@ (8000a50 <MX_GPIO_Init+0x168>)
 8000a00:	f002 fffc 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a04:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a16:	230a      	movs	r3, #10
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_GPIO_Init+0x170>)
 8000a22:	f002 ffeb 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_GPIO_Init+0x16c>)
 8000a3e:	f002 ffdd 	bl	80039fc <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	@ 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58021000 	.word	0x58021000
 8000a58:	58020000 	.word	0x58020000

08000a5c <get_board_info>:
#define WEBSERVER_THREAD_PRIO    ( tskIDLE_PRIORITY + 4 )

static const char http_html_hdr[] = "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n";
static const char http_404_hdr[] = "HTTP/1.1 404 ERROR\r\nContent-type: text/html\r\n\r\n";

void get_board_info(char *buffer, size_t size) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	@ 0x30
 8000a60:	af06      	add	r7, sp, #24
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    size_t heapSize = xPortGetFreeHeapSize();
 8000a66:	f00c fb25 	bl	800d0b4 <xPortGetFreeHeapSize>
 8000a6a:	6178      	str	r0, [r7, #20]
    size_t totalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000a70:	613b      	str	r3, [r7, #16]
    size_t totalRAM = 512 * 1024;
 8000a72:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000a76:	60fb      	str	r3, [r7, #12]
    size_t usedRAM = totalRAM - heapSize;
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	60bb      	str	r3, [r7, #8]

    snprintf(buffer, size,
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <get_board_info+0x5c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <get_board_info+0x60>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	0c99      	lsrs	r1, r3, #18
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	0a9b      	lsrs	r3, r3, #10
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	9204      	str	r2, [sp, #16]
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	9203      	str	r2, [sp, #12]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	9202      	str	r2, [sp, #8]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <get_board_info+0x64>)
 8000aa8:	6839      	ldr	r1, [r7, #0]
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f01a f90c 	bl	801acc8 <sniprintf>
        totalRAM / 1024UL,
        heapSize,
        totalHeapSize,
        usedRAM
    );
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000000 	.word	0x24000000
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	0801bf7c 	.word	0x0801bf7c

08000ac4 <http_server_netconn_serve>:

/** Serve one HTTP connection accepted in the http thread */
static void http_server_netconn_serve(struct netconn *conn) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8000aca:	af02      	add	r7, sp, #8
 8000acc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000ad0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000ad4:	6018      	str	r0, [r3, #0]
    char *buf;
    u16_t buflen;
    err_t err;

    /* Read the data from the port, blocking if nothing yet there. */
    err = netconn_recv(conn, &inbuf);
 8000ad6:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8000ada:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000ade:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f00c fe1d 	bl	800d724 <netconn_recv>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417

    if (err == ERR_OK) {
 8000af0:	f997 3417 	ldrsb.w	r3, [r7, #1047]	@ 0x417
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d150      	bne.n	8000b9a <http_server_netconn_serve+0xd6>
        netbuf_data(inbuf, (void**)&buf, &buflen);
 8000af8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000afc:	f207 420a 	addw	r2, r7, #1034	@ 0x40a
 8000b00:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00e fb8d 	bl	800f224 <netbuf_data>

        /* Is this an HTTP GET command? */
        if (strncmp((char const *)buf, "GET /index.html ", 16) == 0) {
 8000b0a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000b0e:	2210      	movs	r2, #16
 8000b10:	492a      	ldr	r1, [pc, #168]	@ (8000bbc <http_server_netconn_serve+0xf8>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f01a f987 	bl	801ae26 <strncmp>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d125      	bne.n	8000b6a <http_server_netconn_serve+0xa6>
            char board_info[1024]; // Увеличиваем размер буфера для HTML
            get_board_info(board_info, sizeof(board_info));
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff98 	bl	8000a5c <get_board_info>

            /* Send the HTML header */
            netconn_write(conn, http_html_hdr, sizeof(http_html_hdr) - 1, NETCONN_NOCOPY);
 8000b2c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000b30:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	222c      	movs	r2, #44	@ 0x2c
 8000b3c:	4920      	ldr	r1, [pc, #128]	@ (8000bc0 <http_server_netconn_serve+0xfc>)
 8000b3e:	6800      	ldr	r0, [r0, #0]
 8000b40:	f00c fe68 	bl	800d814 <netconn_write_partly>
            /* Send our HTML page with board info */
            netconn_write(conn, board_info, strlen(board_info), NETCONN_NOCOPY);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fbc9 	bl	80002e0 <strlen>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f107 0108 	add.w	r1, r7, #8
 8000b54:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000b58:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	6800      	ldr	r0, [r0, #0]
 8000b64:	f00c fe56 	bl	800d814 <netconn_write_partly>
 8000b68:	e017      	b.n	8000b9a <http_server_netconn_serve+0xd6>
        } else {
            netconn_write(conn, http_404_hdr, sizeof(http_404_hdr) - 1, NETCONN_NOCOPY);
 8000b6a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000b6e:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 8000b72:	2300      	movs	r3, #0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	222f      	movs	r2, #47	@ 0x2f
 8000b7a:	4912      	ldr	r1, [pc, #72]	@ (8000bc4 <http_server_netconn_serve+0x100>)
 8000b7c:	6800      	ldr	r0, [r0, #0]
 8000b7e:	f00c fe49 	bl	800d814 <netconn_write_partly>
            netconn_write(conn, "<html><head><title>Error</title></head><body><h1>404 Not Found</h1></body></html>", 100, NETCONN_NOCOPY);
 8000b82:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000b86:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2264      	movs	r2, #100	@ 0x64
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <http_server_netconn_serve+0x104>)
 8000b94:	6800      	ldr	r0, [r0, #0]
 8000b96:	f00c fe3d 	bl	800d814 <netconn_write_partly>
 }
    }
    /* Close the connection */
    netconn_close(conn);
 8000b9a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000b9e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f00c fede 	bl	800d964 <netconn_close>
    /* Delete the buffer */
    netbuf_delete(inbuf);
 8000ba8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00e fb19 	bl	800f1e4 <netbuf_delete>
}
 8000bb2:	bf00      	nop
 8000bb4:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	0801c0b0 	.word	0x0801c0b0
 8000bc0:	0801f264 	.word	0x0801f264
 8000bc4:	0801f294 	.word	0x0801f294
 8000bc8:	0801c0c4 	.word	0x0801c0c4

08000bcc <http_server_netconn_thread>:

/** The main function, never returns! */
static void http_server_netconn_thread(void *arg) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    struct netconn *conn, *newconn;
    err_t err;
    LWIP_UNUSED_ARG(arg);

    /* Create a new TCP connection handle */
    conn = netconn_new(NETCONN_TCP);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f00c fb51 	bl	800d280 <netconn_new_with_proto_and_callback>
 8000bde:	6178      	str	r0, [r7, #20]
    netconn_bind(conn, IP_ADDR_ANY, 80);
 8000be0:	2250      	movs	r2, #80	@ 0x50
 8000be2:	4919      	ldr	r1, [pc, #100]	@ (8000c48 <http_server_netconn_thread+0x7c>)
 8000be4:	6978      	ldr	r0, [r7, #20]
 8000be6:	f00c fbeb 	bl	800d3c0 <netconn_bind>
    LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d106      	bne.n	8000bfe <http_server_netconn_thread+0x32>
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <http_server_netconn_thread+0x80>)
 8000bf2:	2254      	movs	r2, #84	@ 0x54
 8000bf4:	4916      	ldr	r1, [pc, #88]	@ (8000c50 <http_server_netconn_thread+0x84>)
 8000bf6:	4817      	ldr	r0, [pc, #92]	@ (8000c54 <http_server_netconn_thread+0x88>)
 8000bf8:	f01a f854 	bl	801aca4 <iprintf>
 8000bfc:	e021      	b.n	8000c42 <http_server_netconn_thread+0x76>

    /* Put the connection into LISTEN state */
    netconn_listen(conn);
 8000bfe:	21ff      	movs	r1, #255	@ 0xff
 8000c00:	6978      	ldr	r0, [r7, #20]
 8000c02:	f00c fc15 	bl	800d430 <netconn_listen_with_backlog>

    do {
        err = netconn_accept(conn, &newconn);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f00c fc3b 	bl	800d488 <netconn_accept>
 8000c12:	4603      	mov	r3, r0
 8000c14:	74fb      	strb	r3, [r7, #19]
        if (err == ERR_OK) {
 8000c16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d107      	bne.n	8000c2e <http_server_netconn_thread+0x62>
            http_server_netconn_serve(newconn);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff4f 	bl	8000ac4 <http_server_netconn_serve>
            netconn_delete(newconn);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00c fba3 	bl	800d374 <netconn_delete>
        }
    } while (err == ERR_OK);
 8000c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0e7      	beq.n	8000c06 <http_server_netconn_thread+0x3a>

    netconn_close(conn);
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f00c fe94 	bl	800d964 <netconn_close>
    netconn_delete(conn);
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	f00c fb99 	bl	800d374 <netconn_delete>
}
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0801f3f0 	.word	0x0801f3f0
 8000c4c:	0801c118 	.word	0x0801c118
 8000c50:	0801c134 	.word	0x0801c134
 8000c54:	0801c150 	.word	0x0801c150

08000c58 <http_server_netconn_init>:

/** Initialize the HTTP server (start its thread) */
void http_server_netconn_init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
    sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000c5e:	2304      	movs	r3, #4
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	2200      	movs	r2, #0
 8000c68:	4903      	ldr	r1, [pc, #12]	@ (8000c78 <http_server_netconn_init+0x20>)
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <http_server_netconn_init+0x24>)
 8000c6c:	f019 fed6 	bl	801aa1c <sys_thread_new>
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	08000bcd 	.word	0x08000bcd
 8000c7c:	0801c178 	.word	0x0801c178

08000c80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c84:	f3bf 8f4f 	dsb	sy
}
 8000c88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c8a:	f3bf 8f6f 	isb	sy
}
 8000c8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c90:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <SCB_EnableICache+0x48>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <SCB_EnableICache+0x48>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <SCB_EnableICache+0x48>)
 8000caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
}
 8000cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb6:	f3bf 8f6f 	isb	sy
}
 8000cba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <SCB_EnableDCache+0x84>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
}
 8000cde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <SCB_EnableDCache+0x84>)
 8000ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ce6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0b5b      	lsrs	r3, r3, #13
 8000cec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cf0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cfa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000d04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d0a:	4911      	ldr	r1, [pc, #68]	@ (8000d50 <SCB_EnableDCache+0x84>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1e5a      	subs	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1ef      	bne.n	8000cfc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	60fa      	str	r2, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e5      	bne.n	8000cf2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d26:	f3bf 8f4f 	dsb	sy
}
 8000d2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <SCB_EnableDCache+0x84>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <SCB_EnableDCache+0x84>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d38:	f3bf 8f4f 	dsb	sy
}
 8000d3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3e:	f3bf 8f6f 	isb	sy
}
 8000d42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <SCB_CleanInvalidateDCache+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d62:	f3bf 8f4f 	dsb	sy
}
 8000d66:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <SCB_CleanInvalidateDCache+0x74>)
 8000d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6e:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	0b5b      	lsrs	r3, r3, #13
 8000d74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d78:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d82:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	015a      	lsls	r2, r3, #5
 8000d88:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000d8c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <SCB_CleanInvalidateDCache+0x74>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ef      	bne.n	8000d84 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	60fa      	str	r2, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1e5      	bne.n	8000d7a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dae:	f3bf 8f4f 	dsb	sy
}
 8000db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
}
 8000db8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dd2:	f000 f93d 	bl	8001050 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dd6:	f7ff ff53 	bl	8000c80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000dda:	f7ff ff77 	bl	8000ccc <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000de4:	bf00      	nop
 8000de6:	4b34      	ldr	r3, [pc, #208]	@ (8000eb8 <main+0xec>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <main+0x30>
 8000df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df4:	1e5a      	subs	r2, r3, #1
 8000df6:	637a      	str	r2, [r7, #52]	@ 0x34
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dcf4      	bgt.n	8000de6 <main+0x1a>
  if ( timeout < 0 )
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da01      	bge.n	8000e06 <main+0x3a>
  {
  Error_Handler();
 8000e02:	f000 f981 	bl	8001108 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fd5b 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f85d 	bl	8000ec8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <main+0xec>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <main+0xec>)
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <main+0xec>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f002 ffc9 	bl	8003dc4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f002 ffdf 	bl	8003df8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e40:	bf00      	nop
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <main+0xec>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d104      	bne.n	8000e58 <main+0x8c>
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e50:	1e5a      	subs	r2, r3, #1
 8000e52:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	dcf4      	bgt.n	8000e42 <main+0x76>
if ( timeout < 0 )
 8000e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da01      	bge.n	8000e62 <main+0x96>
{
Error_Handler();
 8000e5e:	f000 f953 	bl	8001108 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f7ff fd41 	bl	80008e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e66:	f000 fb0b 	bl	8001480 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000e6a:	f000 fabd 	bl	80013e8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2102      	movs	r1, #2
 8000e72:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <main+0xf0>)
 8000e74:	f002 ff72 	bl	8003d5c <HAL_GPIO_WritePin>

  uint8_t msg[] = "\r\n----\r\nBuild: "  __DATE__  " @ "   __TIME__   "\r\n----\r\n";
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <main+0xf4>)
 8000e7a:	1d3c      	adds	r4, r7, #4
 8000e7c:	461d      	mov	r5, r3
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e8a:	c407      	stmia	r4!, {r0, r1, r2}
 8000e8c:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, msg, strlen((char *)msg), HAL_MAX_DELAY);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa25 	bl	80002e0 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	1d39      	adds	r1, r7, #4
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <main+0xf8>)
 8000ea2:	f005 fdd9 	bl	8006a58 <HAL_UART_Transmit>
//  HAL_TIM_Base_Start_IT(&htim13);

  // seems to work without this addition too
  SCB_CleanInvalidateDCache();
 8000ea6:	f7ff ff55 	bl	8000d54 <SCB_CleanInvalidateDCache>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000eaa:	f7ff fc81 	bl	80007b0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000eae:	f009 f9d1 	bl	800a254 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <main+0xe6>
 8000eb6:	bf00      	nop
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58021000 	.word	0x58021000
 8000ec0:	0801c18c 	.word	0x0801c18c
 8000ec4:	24000590 	.word	0x24000590

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0cc      	sub	sp, #304	@ 0x130
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ed2:	224c      	movs	r2, #76	@ 0x4c
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f019 ff9d 	bl	801ae16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f019 ff96 	bl	801ae16 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	23bc      	movs	r3, #188	@ 0xbc
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f019 ff8c 	bl	801ae16 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f002 ff8e 	bl	8003e20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <SystemClock_Config+0x180>)
 8000f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <SystemClock_Config+0x180>)
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <SystemClock_Config+0x180>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <SystemClock_Config+0x184>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f36:	4a45      	ldr	r2, [pc, #276]	@ (800104c <SystemClock_Config+0x184>)
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b43      	ldr	r3, [pc, #268]	@ (800104c <SystemClock_Config+0x184>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8000f46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f58:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5a:	bf00      	nop
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <SystemClock_Config+0x184>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f68:	d1f8      	bne.n	8000f5c <SystemClock_Config+0x94>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000f8a:	234b      	movs	r3, #75	@ 0x4b
 8000f8c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 ff8b 	bl	8003ed4 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000fc4:	f000 f8a0 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	233f      	movs	r3, #63	@ 0x3f
 8000fca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe6:	2340      	movs	r3, #64	@ 0x40
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000ffe:	2102      	movs	r1, #2
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fb43 	bl	800468c <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800100c:	f000 f87c 	bl	8001108 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001010:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001014:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001018:	2202      	movs	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800101c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001020:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001024:	2200      	movs	r2, #0
 8001026:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fefb 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x174>
  {
    Error_Handler();
 8001038:	f000 f866 	bl	8001108 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58000400 	.word	0x58000400
 800104c:	58024800 	.word	0x58024800

08001050 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001062:	f000 fd95 	bl	8001b90 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001066:	2301      	movs	r3, #1
 8001068:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800106a:	2300      	movs	r3, #0
 800106c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MPU_Config+0x8c>)
 8001070:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001072:	2307      	movs	r3, #7
 8001074:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001076:	2300      	movs	r3, #0
 8001078:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800107a:	2300      	movs	r3, #0
 800107c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800107e:	2303      	movs	r3, #3
 8001080:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fdb3 	bl	8001c00 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800109a:	2301      	movs	r3, #1
 800109c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800109e:	2301      	movs	r3, #1
 80010a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MPU_Config+0x90>)
 80010a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80010a6:	230d      	movs	r3, #13
 80010a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010b2:	2303      	movs	r3, #3
 80010b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010c6:	463b      	mov	r3, r7
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fd99 	bl	8001c00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010ce:	2004      	movs	r0, #4
 80010d0:	f000 fd76 	bl	8001bc0 <HAL_MPU_Enable>

}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	30040000 	.word	0x30040000
 80010e0:	30044000 	.word	0x30044000

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f000 fc1f 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40001400 	.word	0x40001400

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  HAL_TIM_Base_Stop_IT(&htim13);
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <Error_Handler+0x18>)
 800110e:	f005 fa29 	bl	8006564 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <Error_Handler+0x1c>)
 8001118:	f002 fe20 	bl	8003d5c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	24000550 	.word	0x24000550
 8001124:	58021000 	.word	0x58021000

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_MspInit+0x38>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_MspInit+0x38>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_MspInit+0x38>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	210f      	movs	r1, #15
 8001150:	f06f 0001 	mvn.w	r0, #1
 8001154:	f000 fcf4 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58024400 	.word	0x58024400

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t              uwPrescalerValue = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2037      	movs	r0, #55	@ 0x37
 800117a:	f000 fce1 	bl	8001b40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 800117e:	2037      	movs	r0, #55	@ 0x37
 8001180:	f000 fcf8 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <HAL_InitTick+0xa8>)
 8001186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118a:	4a20      	ldr	r2, [pc, #128]	@ (800120c <HAL_InitTick+0xa8>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_InitTick+0xa8>)
 8001196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fdf9 	bl	8004da4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011b2:	f003 fdcb 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <HAL_InitTick+0xac>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0xb0>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <HAL_InitTick+0xb4>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_InitTick+0xb0>)
 80011d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_InitTick+0xb0>)
 80011da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011dc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_InitTick+0xb0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_InitTick+0xb0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_InitTick+0xb0>)
 80011ec:	f005 f964 	bl	80064b8 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d104      	bne.n	8001200 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <HAL_InitTick+0xb0>)
 80011f8:	f005 f98a 	bl	8006510 <HAL_TIM_Base_Start_IT>
 80011fc:	4603      	mov	r3, r0
 80011fe:	e000      	b.n	8001202 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3738      	adds	r7, #56	@ 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
 8001210:	431bde83 	.word	0x431bde83
 8001214:	2400050c 	.word	0x2400050c
 8001218:	40001400 	.word	0x40001400

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	bf00      	nop
 8001230:	e7fd      	b.n	800122e <HardFault_Handler+0x4>

08001232 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001236:	bf00      	nop
 8001238:	e7fd      	b.n	8001236 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <BusFault_Handler+0x4>

08001242 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001246:	bf00      	nop
 8001248:	e7fd      	b.n	8001246 <UsageFault_Handler+0x4>

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800125c:	4804      	ldr	r0, [pc, #16]	@ (8001270 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800125e:	f005 f9ac 	bl	80065ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001262:	2102      	movs	r1, #2
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8001266:	f002 fd92 	bl	8003d8e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24000550 	.word	0x24000550
 8001274:	58021000 	.word	0x58021000

08001278 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <TIM7_IRQHandler+0x10>)
 800127e:	f005 f99c 	bl	80065ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2400050c 	.word	0x2400050c

0800128c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <ETH_IRQHandler+0x10>)
 8001292:	f001 f9eb 	bl	800266c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2400066c 	.word	0x2400066c

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_kill>:

int _kill(int pid, int sig)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ba:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <_kill+0x20>)
 80012bc:	2216      	movs	r2, #22
 80012be:	601a      	str	r2, [r3, #0]
	return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	24007820 	.word	0x24007820

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe5 	bl	80012b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <_exit+0x12>

080012ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e00a      	b.n	8001312 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012fc:	f3af 8000 	nop.w
 8001300:	4601      	mov	r1, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbf0      	blt.n	80012fc <_read+0x12>
	}

return len;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	return -1;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800134c:	605a      	str	r2, [r3, #4]
	return 0;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_isatty>:

int _isatty(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
	return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x50>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x16>
		heap_end = &end;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <_sbrk+0x50>)
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <_sbrk+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <_sbrk+0x50>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <_sbrk+0x50>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	466a      	mov	r2, sp
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d905      	bls.n	80013c2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <_sbrk+0x58>)
 80013b8:	220c      	movs	r2, #12
 80013ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	e006      	b.n	80013d0 <_sbrk+0x44>
	}

	heap_end += incr;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <_sbrk+0x50>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <_sbrk+0x50>)
 80013cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	2400054c 	.word	0x2400054c
 80013e0:	24007970 	.word	0x24007970
 80013e4:	24007820 	.word	0x24007820

080013e8 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <MX_TIM13_Init+0x44>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 599;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013f4:	f240 2257 	movw	r2, #599	@ 0x257
 80013f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62499;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001402:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001406:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_TIM13_Init+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001416:	f005 f84f 	bl	80064b8 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001420:	f7ff fe72 	bl	8001108 <Error_Handler>
  }

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000550 	.word	0x24000550
 800142c:	40001c00 	.word	0x40001c00

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_TIM_Base_MspInit+0x48>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d116      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_TIM_Base_MspInit+0x4c>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_TIM_Base_MspInit+0x4c>)
 800144a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_TIM_Base_MspInit+0x4c>)
 8001454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	202c      	movs	r0, #44	@ 0x2c
 8001466:	f000 fb6b 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800146a:	202c      	movs	r0, #44	@ 0x2c
 800146c:	f000 fb82 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40001c00 	.word	0x40001c00
 800147c:	58024400 	.word	0x58024400

08001480 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <MX_USART3_UART_Init+0x94>)
 8001488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ca:	f005 fa75 	bl	80069b8 <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014d4:	f7ff fe18 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014dc:	f008 f867 	bl	80095ae <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014e6:	f7ff fe0f 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ee:	f008 f89c 	bl	800962a <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f8:	f7ff fe06 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014fe:	f008 f81d 	bl	800953c <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001508:	f7ff fdfe 	bl	8001108 <Error_Handler>
  }

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	24000590 	.word	0x24000590
 8001514:	40004800 	.word	0x40004800

08001518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <HAL_UART_MspInit+0x88>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12e      	bne.n	8001598 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 800153c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001540:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001546:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 800154c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_UART_MspInit+0x8c>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001576:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <HAL_UART_MspInit+0x90>)
 8001594:	f002 fa32 	bl	80039fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004800 	.word	0x40004800
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020c00 	.word	0x58020c00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr  r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015d6:	f7ff f853 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f019 fc7d 	bl	801aed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fbf5 	bl	8000dcc <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80015e8:	0801f500 	.word	0x0801f500
  ldr  r0, =_sdata
 80015ec:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80015f0:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 80015f4:	24000094 	.word	0x24000094
  ldr  r3, = _ebss
 80015f8:	24007970 	.word	0x24007970

080015fc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC3_IRQHandler>

080015fe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <LAN8742_RegisterBusIO+0x28>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <LAN8742_RegisterBusIO+0x28>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <LAN8742_RegisterBusIO+0x28>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e014      	b.n	8001656 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d17c      	bne.n	800177c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e01c      	b.n	80016d6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f107 0208 	add.w	r2, r7, #8
 80016a4:	2112      	movs	r1, #18
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	4798      	blx	r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da03      	bge.n	80016b8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80016b0:	f06f 0304 	mvn.w	r3, #4
 80016b4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80016b6:	e00b      	b.n	80016d0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d105      	bne.n	80016d0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
         break;
 80016ce:	e005      	b.n	80016dc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b1f      	cmp	r3, #31
 80016da:	d9df      	bls.n	800169c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b1f      	cmp	r3, #31
 80016e2:	d902      	bls.n	80016ea <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016e4:	f06f 0302 	mvn.w	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d145      	bne.n	800177c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6810      	ldr	r0, [r2, #0]
 80016f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016fc:	2100      	movs	r1, #0
 80016fe:	4798      	blx	r3
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	db37      	blt.n	8001776 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6810      	ldr	r0, [r2, #0]
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	2100      	movs	r1, #0
 8001714:	4798      	blx	r3
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	db28      	blt.n	800176e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4798      	blx	r3
 8001722:	4603      	mov	r3, r0
 8001724:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001726:	e01c      	b.n	8001762 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173a:	d80e      	bhi.n	800175a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6810      	ldr	r0, [r2, #0]
 8001744:	f107 0208 	add.w	r2, r7, #8
 8001748:	2100      	movs	r1, #0
 800174a:	4798      	blx	r3
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	da07      	bge.n	8001762 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001752:	f06f 0304 	mvn.w	r3, #4
 8001756:	613b      	str	r3, [r7, #16]
                 break;
 8001758:	e010      	b.n	800177c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800175a:	f06f 0301 	mvn.w	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
               break;
 8001760:	e00c      	b.n	800177c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1dd      	bne.n	8001728 <LAN8742_Init+0xc6>
 800176c:	e006      	b.n	800177c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800176e:	f06f 0304 	mvn.w	r3, #4
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	e002      	b.n	800177c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001776:	f06f 0303 	mvn.w	r3, #3
 800177a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d112      	bne.n	80017a8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4798      	blx	r3
 8001788:	4603      	mov	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800178c:	bf00      	nop
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4798      	blx	r3
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017a0:	d9f5      	bls.n	800178e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80017a8:	693b      	ldr	r3, [r7, #16]
 }
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6810      	ldr	r0, [r2, #0]
 80017c6:	f107 020c 	add.w	r2, r7, #12
 80017ca:	2101      	movs	r1, #1
 80017cc:	4798      	blx	r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da02      	bge.n	80017da <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017d4:	f06f 0304 	mvn.w	r3, #4
 80017d8:	e06e      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6810      	ldr	r0, [r2, #0]
 80017e2:	f107 020c 	add.w	r2, r7, #12
 80017e6:	2101      	movs	r1, #1
 80017e8:	4798      	blx	r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da02      	bge.n	80017f6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017f0:	f06f 0304 	mvn.w	r3, #4
 80017f4:	e060      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001800:	2301      	movs	r3, #1
 8001802:	e059      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	f107 020c 	add.w	r2, r7, #12
 8001810:	2100      	movs	r1, #0
 8001812:	4798      	blx	r3
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	da02      	bge.n	8001820 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800181a:	f06f 0304 	mvn.w	r3, #4
 800181e:	e04b      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d11b      	bne.n	8001862 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <LAN8742_GetLinkState+0x90>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800183e:	2302      	movs	r3, #2
 8001840:	e03a      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800184c:	2303      	movs	r3, #3
 800184e:	e033      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800185a:	2304      	movs	r3, #4
 800185c:	e02c      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800185e:	2305      	movs	r3, #5
 8001860:	e02a      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6810      	ldr	r0, [r2, #0]
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	211f      	movs	r1, #31
 8001870:	4798      	blx	r3
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	da02      	bge.n	800187e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001878:	f06f 0304 	mvn.w	r3, #4
 800187c:	e01c      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001888:	2306      	movs	r3, #6
 800188a:	e015      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 031c 	and.w	r3, r3, #28
 8001892:	2b18      	cmp	r3, #24
 8001894:	d101      	bne.n	800189a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001896:	2302      	movs	r3, #2
 8001898:	e00e      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 031c 	and.w	r3, r3, #28
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d101      	bne.n	80018a8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e007      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 031c 	and.w	r3, r3, #28
 80018ae:	2b14      	cmp	r3, #20
 80018b0:	d101      	bne.n	80018b6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018b2:	2304      	movs	r3, #4
 80018b4:	e000      	b.n	80018b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018b6:	2305      	movs	r3, #5
    }				
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f000 f92f 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018cc:	f003 f894 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_Init+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	4913      	ldr	r1, [pc, #76]	@ (800192c <HAL_Init+0x6c>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_Init+0x68>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <HAL_Init+0x6c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_Init+0x70>)
 8001902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_Init+0x74>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fc2a 	bl	8001164 <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e002      	b.n	8001920 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800191a:	f7ff fc05 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58024400 	.word	0x58024400
 800192c:	0801f254 	.word	0x0801f254
 8001930:	24000004 	.word	0x24000004
 8001934:	24000000 	.word	0x24000000

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2400000c 	.word	0x2400000c
 800195c:	2400061c 	.word	0x2400061c

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2400061c 	.word	0x2400061c

08001978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_GetREVID+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	5c001000 	.word	0x5c001000

08001990 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetUIDw0+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	1ff1e800 	.word	0x1ff1e800

080019a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80019b8:	4904      	ldr	r1, [pc, #16]	@ (80019cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	58000400 	.word	0x58000400

080019d0 <__NVIC_SetPriorityGrouping>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	05fa0000 	.word	0x05fa0000

08001a18 <__NVIC_GetPriorityGrouping>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4e:	f7ff ff63 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7ff ffb3 	bl	8001ac4 <NVIC_EncodePriority>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff82 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff56 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b94:	f3bf 8f5f 	dmb	sy
}
 8001b98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_MPU_Disable+0x28>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <HAL_MPU_Disable+0x28>)
 8001ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_MPU_Disable+0x2c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00
 8001bbc:	e000ed90 	.word	0xe000ed90

08001bc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_MPU_Enable+0x38>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_MPU_Enable+0x3c>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_MPU_Enable+0x3c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bde:	f3bf 8f4f 	dsb	sy
}
 8001be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be4:	f3bf 8f6f 	isb	sy
}
 8001be8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed90 	.word	0xe000ed90
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	785a      	ldrb	r2, [r3, #1]
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d029      	beq.n	8001c6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c18:	4a1a      	ldr	r2, [pc, #104]	@ (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
 8001c24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7adb      	ldrb	r3, [r3, #11]
 8001c2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7a9b      	ldrb	r3, [r3, #10]
 8001c32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7b5b      	ldrb	r3, [r3, #13]
 8001c3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7bdb      	ldrb	r3, [r3, #15]
 8001c4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7a5b      	ldrb	r3, [r3, #9]
 8001c52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a1b      	ldrb	r3, [r3, #8]
 8001c5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c6a:	e005      	b.n	8001c78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed90 	.word	0xe000ed90

08001c88 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_GetCurrentCPUID+0x24>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d101      	bne.n	8001c9e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e000      	b.n	8001ca0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001c9e:	2301      	movs	r3, #1
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0c8      	b.n	8001e54 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f007 fe40 	bl	8009950 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2223      	movs	r2, #35	@ 0x23
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	4b61      	ldr	r3, [pc, #388]	@ (8001e5c <HAL_ETH_Init+0x1ac>)
 8001cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8001e5c <HAL_ETH_Init+0x1ac>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e5c <HAL_ETH_Init+0x1ac>)
 8001ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7a1b      	ldrb	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d103      	bne.n	8001d04 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fe53 	bl	80019a8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d02:	e003      	b.n	8001d0c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d04:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001d08:	f7ff fe4e 	bl	80019a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d24:	f7ff fe1c 	bl	8001960 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d2a:	e00f      	b.n	8001d4c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001d2c:	f7ff fe18 	bl	8001960 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d3a:	d907      	bls.n	8001d4c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	22e0      	movs	r2, #224	@ 0xe0
 8001d46:	655a      	str	r2, [r3, #84]	@ 0x54
      /* Return Error */
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e083      	b.n	8001e54 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e6      	bne.n	8001d2c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f001 faf8 	bl	8003354 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d64:	f002 ffc2 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e60 <HAL_ETH_Init+0x1b0>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9a      	lsrs	r2, r3, #18
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3a01      	subs	r2, #1
 8001d78:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f001 fa4b 	bl	8003218 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001d8e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d9e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	22e0      	movs	r2, #224	@ 0xe0
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Return Error */
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04a      	b.n	8001e54 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001dca:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <HAL_ETH_Init+0x1b4>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6952      	ldr	r2, [r2, #20]
 8001dd2:	0051      	lsls	r1, r2, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dde:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f001 fb0e 	bl	8003404 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f001 fb54 	bl	8003496 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	3305      	adds	r3, #5
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021a      	lsls	r2, r3, #8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	3303      	adds	r3, #3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	061a      	lsls	r2, r3, #24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	3301      	adds	r3, #1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e3a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e3c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	65da      	str	r2, [r3, #92]	@ 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2210      	movs	r2, #16
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	ffff8001 	.word	0xffff8001

08001e68 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	330a      	adds	r3, #10
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_ETH_DescAssignMemory+0x28>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d904      	bls.n	8001e9a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e021      	b.n	8001ede <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	330a      	adds	r3, #10
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d17f      	bne.n	800200c <HAL_ETH_Start_IT+0x122>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2223      	movs	r2, #35	@ 0x23
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e018      	b.n	8001f4a <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d902      	bls.n	8001f36 <HAL_ETH_Start_IT+0x4c>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3b04      	subs	r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	330a      	adds	r3, #10
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	3301      	adds	r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d9e3      	bls.n	8001f18 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0202 	orr.w	r2, r2, #2
 8001f64:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f92:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fa2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fbe:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fca:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fda:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2222      	movs	r2, #34	@ 0x22
 8001fe8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8001ffe:	430b      	orrs	r3, r1
 8002000:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002004:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_ETH_Start_IT+0x124>
  }
  else
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	60bb      	str	r3, [r7, #8]
  uint32_t index;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	2b00      	cmp	r3, #0
 8002030:	d060      	beq.n	80020f4 <HAL_ETH_Stop_IT+0xd8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2223      	movs	r2, #35	@ 0x23
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt     */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002040:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b2e      	ldr	r3, [pc, #184]	@ (8002104 <HAL_ETH_Stop_IT+0xe8>)
 800204a:	400b      	ands	r3, r1
 800204c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002050:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800206c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002078:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002088:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0202 	bic.w	r2, r2, #2
 80020be:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e008      	b.n	80020d8 <HAL_ETH_Stop_IT+0xbc>
    {
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	60da      	str	r2, [r3, #12]
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d9f3      	bls.n	80020c6 <HAL_ETH_Stop_IT+0xaa>
    }

    heth->RxDescList.ItMode = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2210      	movs	r2, #16
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2210      	movs	r2, #16
 80020ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Return function status */
    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_ETH_Stop_IT+0xda>
  }
  else
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	ffff7fbe 	.word	0xffff7fbe

08002108 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e079      	b.n	800221e <HAL_ETH_Transmit+0x116>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212e:	2b10      	cmp	r3, #16
 8002130:	d174      	bne.n	800221c <HAL_ETH_Transmit+0x114>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002132:	2200      	movs	r2, #0
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f001 fa0c 	bl	8003554 <ETH_Prepare_Tx_Descriptors>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e065      	b.n	800221e <HAL_ETH_Transmit+0x116>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3206      	adds	r2, #6
 800215a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	2b03      	cmp	r3, #3
 8002170:	d904      	bls.n	800217c <HAL_ETH_Transmit+0x74>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	1f1a      	subs	r2, r3, #4
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3106      	adds	r1, #6
 8002188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800218c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002190:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8002194:	f7ff fbe4 	bl	8001960 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800219a:	e036      	b.n	800220a <HAL_ETH_Transmit+0x102>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80021a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_ETH_Transmit+0xce>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	f043 0208 	orr.w	r2, r3, #8
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	661a      	str	r2, [r3, #96]	@ 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	22e0      	movs	r2, #224	@ 0xe0
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* Return function status */
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e023      	b.n	800221e <HAL_ETH_Transmit+0x116>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d015      	beq.n	800220a <HAL_ETH_Transmit+0x102>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80021de:	f7ff fbbf 	bl	8001960 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <HAL_ETH_Transmit+0xec>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_ETH_Transmit+0x102>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2210      	movs	r2, #16
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e009      	b.n	800221e <HAL_ETH_Transmit+0x116>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	dbc4      	blt.n	800219c <HAL_ETH_Transmit+0x94>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <HAL_ETH_Transmit+0x116>
  }
  else
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002226:	b480      	push	{r7}
 8002228:	b089      	sub	sp, #36	@ 0x24
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	332c      	adds	r3, #44	@ 0x2c
 8002232:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d06b      	beq.n	8002330 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002258:	2300      	movs	r3, #0
 800225a:	e0bc      	b.n	80023d6 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d036      	beq.n	80022dc <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3301      	adds	r3, #1
 8002272:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d902      	bls.n	8002290 <HAL_ETH_IsRxDataAvailable+0x6a>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b04      	subs	r3, #4
 800228e:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db11      	blt.n	80022c6 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2201      	movs	r2, #1
 80022b2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d902      	bls.n	80022c6 <HAL_ETH_IsRxDataAvailable+0xa0>
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3b04      	subs	r3, #4
 80022c4:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	e07c      	b.n	80023d6 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d902      	bls.n	8002302 <HAL_ETH_IsRxDataAvailable+0xdc>
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3b04      	subs	r3, #4
 8002300:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e010      	b.n	8002330 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3301      	adds	r3, #1
 8002312:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3301      	adds	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d902      	bls.n	8002326 <HAL_ETH_IsRxDataAvailable+0x100>
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3b04      	subs	r3, #4
 8002324:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db02      	blt.n	800233e <HAL_ETH_IsRxDataAvailable+0x118>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d98e      	bls.n	800225c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d044      	beq.n	80023ce <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e036      	b.n	80023c6 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002366:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d902      	bls.n	80023b6 <HAL_ETH_IsRxDataAvailable+0x190>
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3b04      	subs	r3, #4
 80023b4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3c4      	bcc.n	8002358 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b08a      	sub	sp, #40	@ 0x28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	332c      	adds	r3, #44	@ 0x2c
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07d      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff feff 	bl	8002226 <HAL_ETH_IsRxDataAvailable>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e071      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	e031      	b.n	80024ac <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	461a      	mov	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002482:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	3301      	adds	r3, #1
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	2b03      	cmp	r3, #3
 800248e:	d902      	bls.n	8002496 <HAL_ETH_GetRxDataBuffer+0xb4>
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	3b04      	subs	r3, #4
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	3301      	adds	r3, #1
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3c7      	bcc.n	8002448 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	461a      	mov	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d803      	bhi.n	80024e2 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e018      	b.n	8002514 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	461a      	mov	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e001      	b.n	8002514 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	332c      	adds	r3, #44	@ 0x2c
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fe72 	bl	8002226 <HAL_ETH_IsRxDataAvailable>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e017      	b.n	800257c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4413      	add	r3, r2
 8002554:	3b01      	subs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d902      	bls.n	8002564 <HAL_ETH_GetRxDataLength+0x46>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3b04      	subs	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	332c      	adds	r3, #44	@ 0x2c
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e055      	b.n	8002660 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e03c      	b.n	8002642 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025d6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	3b01      	subs	r3, #1
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d20d      	bcs.n	800263c <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d902      	bls.n	8002632 <HAL_ETH_BuildRxDescriptors+0xae>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3b04      	subs	r3, #4
 8002630:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	3301      	adds	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3be      	bcc.n	80025c8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002654:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3724      	adds	r7, #36	@ 0x24
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d115      	bne.n	80026b4 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002690:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b40      	cmp	r3, #64	@ 0x40
 800269a:	d10b      	bne.n	80026b4 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 fa2d 	bl	8009afc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026aa:	461a      	mov	r2, r3
 80026ac:	f248 0340 	movw	r3, #32832	@ 0x8040
 80026b0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d115      	bne.n	80026f4 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10b      	bne.n	80026f4 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8cf 	bl	8002880 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ea:	461a      	mov	r2, r3
 80026ec:	f248 0301 	movw	r3, #32769	@ 0x8001
 80026f0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002708:	d14e      	bne.n	80027a8 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002712:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800271a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800271e:	d143      	bne.n	80027a8 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	f043 0208 	orr.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002734:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002740:	d11c      	bne.n	800277c <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800274a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800274e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002760:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800276c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002770:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	22e0      	movs	r2, #224	@ 0xe0
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
 800277a:	e012      	b.n	80027a2 <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002784:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002788:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	661a      	str	r2, [r3, #96]	@ 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002798:	461a      	mov	r2, r3
 800279a:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800279e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f876 	bl	8002894 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027b0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80027b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80027b8:	d10e      	bne.n	80027d8 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	665a      	str	r2, [r3, #100]	@ 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	22e0      	movs	r2, #224	@ 0xe0
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f86b 	bl	80028a8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d10d      	bne.n	8002804 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027f0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f85f 	bl	80028bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d10d      	bne.n	8002830 <HAL_ETH_IRQHandler+0x1c4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f853 	bl	80028d0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002830:	f7ff fa2a 	bl	8001c88 <HAL_GetCurrentCPUID>
 8002834:	4603      	mov	r3, r0
 8002836:	2b03      	cmp	r3, #3
 8002838:	d10d      	bne.n	8002856 <HAL_ETH_IRQHandler+0x1ea>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_ETH_IRQHandler+0x20c>)
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d014      	beq.n	8002870 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_ETH_IRQHandler+0x20c>)
 8002848:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f848 	bl	80028e4 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8002854:	e00c      	b.n	8002870 <HAL_ETH_IRQHandler+0x204>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_ETH_IRQHandler+0x210>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_ETH_IRQHandler+0x210>)
 8002864:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002868:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f83a 	bl	80028e4 <HAL_ETH_WakeUpCallback>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	58000080 	.word	0x58000080
 800287c:	580000c0 	.word	0x580000c0

08002880 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e03e      	b.n	8002998 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002922:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	055b      	lsls	r3, r3, #21
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f043 030c 	orr.w	r3, r3, #12
 8002946:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800295a:	f7ff f801 	bl	8001960 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002960:	e009      	b.n	8002976 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002962:	f7fe fffd 	bl	8001960 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002970:	d901      	bls.n	8002976 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e010      	b.n	8002998 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ed      	bne.n	8002962 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e03c      	b.n	8002a3c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029ca:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	055b      	lsls	r3, r3, #21
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 030c 	bic.w	r3, r3, #12
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002a06:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002a0e:	f7fe ffa7 	bl	8001960 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a14:	e009      	b.n	8002a2a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002a16:	f7fe ffa3 	bl	8001960 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a24:	d901      	bls.n	8002a2a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e008      	b.n	8002a3c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ed      	bne.n	8002a16 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40028000 	.word	0x40028000

08002a48 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e1c3      	b.n	8002de4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	f003 021f 	and.w	r2, r3, #31
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	63da      	str	r2, [r3, #60]	@ 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	649a      	str	r2, [r3, #72]	@ 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002d70:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002d80:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00a      	b.n	8002e1a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d105      	bne.n	8002e18 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e0c:	6839      	ldr	r1, [r7, #0]
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f860 	bl	8002ed4 <ETH_SetMACConfig>

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e34:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e3c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e3e:	f001 ff55 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8002e42:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d908      	bls.n	8002e5e <HAL_ETH_SetMDIOClockRange+0x3a>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d804      	bhi.n	8002e5e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e027      	b.n	8002eae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d908      	bls.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x54>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d204      	bcs.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e01a      	b.n	8002eae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d303      	bcc.n	8002e88 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d911      	bls.n	8002eac <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d908      	bls.n	8002ea2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d804      	bhi.n	8002ea2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e005      	b.n	8002eae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e000      	b.n	8002eae <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002eac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	01312cff 	.word	0x01312cff
 8002ec4:	02160ebf 	.word	0x02160ebf
 8002ec8:	03938700 	.word	0x03938700
 8002ecc:	05f5e0ff 	.word	0x05f5e0ff
 8002ed0:	08f0d17f 	.word	0x08f0d17f

08002ed4 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002ee6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002eee:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7b1b      	ldrb	r3, [r3, #12]
 8002ef4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002ef6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	7b5b      	ldrb	r3, [r3, #13]
 8002efc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002efe:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	7b9b      	ldrb	r3, [r3, #14]
 8002f04:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7bdb      	ldrb	r3, [r3, #15]
 8002f0c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f0e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	7c12      	ldrb	r2, [r2, #16]
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d102      	bne.n	8002f1e <ETH_SetMACConfig+0x4a>
 8002f18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f1c:	e000      	b.n	8002f20 <ETH_SetMACConfig+0x4c>
 8002f1e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f20:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	7c52      	ldrb	r2, [r2, #17]
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d102      	bne.n	8002f30 <ETH_SetMACConfig+0x5c>
 8002f2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f2e:	e000      	b.n	8002f32 <ETH_SetMACConfig+0x5e>
 8002f30:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f32:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	7c9b      	ldrb	r3, [r3, #18]
 8002f38:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f3a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f40:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002f46:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	7f1b      	ldrb	r3, [r3, #28]
 8002f4c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002f4e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	7f5b      	ldrb	r3, [r3, #29]
 8002f54:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f56:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	7f92      	ldrb	r2, [r2, #30]
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d102      	bne.n	8002f66 <ETH_SetMACConfig+0x92>
 8002f60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f64:	e000      	b.n	8002f68 <ETH_SetMACConfig+0x94>
 8002f66:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f68:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	7fdb      	ldrb	r3, [r3, #31]
 8002f6e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f70:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	d102      	bne.n	8002f82 <ETH_SetMACConfig+0xae>
 8002f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f80:	e000      	b.n	8002f84 <ETH_SetMACConfig+0xb0>
 8002f82:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f84:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f8a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f92:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002f94:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b56      	ldr	r3, [pc, #344]	@ (8003100 <ETH_SetMACConfig+0x22c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	68f9      	ldr	r1, [r7, #12]
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fbe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fc0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fc8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002fca:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002fd2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002fd4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	d102      	bne.n	8002fe6 <ETH_SetMACConfig+0x112>
 8002fe0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002fe4:	e000      	b.n	8002fe8 <ETH_SetMACConfig+0x114>
 8002fe6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002fe8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <ETH_SetMACConfig+0x230>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	430b      	orrs	r3, r1
 8003004:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <ETH_SetMACConfig+0x234>)
 800301e:	4013      	ands	r3, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	430b      	orrs	r3, r1
 8003028:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003030:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003036:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800303e:	2a00      	cmp	r2, #0
 8003040:	d101      	bne.n	8003046 <ETH_SetMACConfig+0x172>
 8003042:	2280      	movs	r2, #128	@ 0x80
 8003044:	e000      	b.n	8003048 <ETH_SetMACConfig+0x174>
 8003046:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003048:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800305a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	430b      	orrs	r3, r1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003070:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003078:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	f023 0103 	bic.w	r1, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	430a      	orrs	r2, r1
 8003092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800309e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d101      	bne.n	80030c2 <ETH_SetMACConfig+0x1ee>
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	e000      	b.n	80030c4 <ETH_SetMACConfig+0x1f0>
 80030c2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80030c4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80030cc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030ce:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80030d6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80030e4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	00048083 	.word	0x00048083
 8003104:	c0f88000 	.word	0xc0f88000
 8003108:	fffffef0 	.word	0xfffffef0

0800310c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b38      	ldr	r3, [pc, #224]	@ (8003204 <ETH_SetDMAConfig+0xf8>)
 8003122:	4013      	ands	r3, r2
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6811      	ldr	r1, [r2, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003132:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	791b      	ldrb	r3, [r3, #4]
 8003138:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800313e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	7b1b      	ldrb	r3, [r3, #12]
 8003144:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <ETH_SetDMAConfig+0xfc>)
 8003156:	4013      	ands	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	430b      	orrs	r3, r1
 8003160:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003164:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	7b5b      	ldrb	r3, [r3, #13]
 800316a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800317c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <ETH_SetDMAConfig+0x100>)
 8003182:	4013      	ands	r3, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	430b      	orrs	r3, r1
 800318c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003190:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	7d1b      	ldrb	r3, [r3, #20]
 800319c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800319e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	7f5b      	ldrb	r3, [r3, #29]
 80031a4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <ETH_SetDMAConfig+0x104>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031c6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	7f1b      	ldrb	r3, [r3, #28]
 80031ce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <ETH_SetDMAConfig+0x108>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	430b      	orrs	r3, r1
 80031f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031f4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	ffff87fd 	.word	0xffff87fd
 8003208:	ffff2ffe 	.word	0xffff2ffe
 800320c:	fffec000 	.word	0xfffec000
 8003210:	ffc0efef 	.word	0xffc0efef
 8003214:	7fc0ffff 	.word	0x7fc0ffff

08003218 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0a4      	sub	sp, #144	@ 0x90
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003226:	2300      	movs	r3, #0
 8003228:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003258:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003260:	2300      	movs	r3, #0
 8003262:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003270:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003274:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800327c:	2300      	movs	r3, #0
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003292:	2300      	movs	r3, #0
 8003294:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003296:	2300      	movs	r3, #0
 8003298:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800329a:	2300      	movs	r3, #0
 800329c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80032b0:	2320      	movs	r3, #32
 80032b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80032c2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80032c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032cc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80032d4:	2302      	movs	r3, #2
 80032d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80032f2:	2300      	movs	r3, #0
 80032f4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fde6 	bl	8002ed4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003308:	2301      	movs	r3, #1
 800330a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003322:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003326:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800332c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003330:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003338:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800333c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800333e:	f107 0308 	add.w	r3, r7, #8
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fee1 	bl	800310c <ETH_SetDMAConfig>
}
 800334a:	bf00      	nop
 800334c:	3790      	adds	r7, #144	@ 0x90
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003364:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800336c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800336e:	f001 fcbd 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8003372:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d908      	bls.n	800338e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d804      	bhi.n	800338e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e027      	b.n	80033de <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d908      	bls.n	80033a8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d204      	bcs.n	80033a8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e01a      	b.n	80033de <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a13      	ldr	r2, [pc, #76]	@ (80033f8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d303      	bcc.n	80033b8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d911      	bls.n	80033dc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a10      	ldr	r2, [pc, #64]	@ (80033fc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d908      	bls.n	80033d2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003400 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d804      	bhi.n	80033d2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e005      	b.n	80033de <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e000      	b.n	80033de <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80033dc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	01312cff 	.word	0x01312cff
 80033f4:	02160ebf 	.word	0x02160ebf
 80033f8:	03938700 	.word	0x03938700
 80033fc:	05f5e0ff 	.word	0x05f5e0ff
 8003400:	08f0d17f 	.word	0x08f0d17f

08003404 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e01d      	b.n	800344e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2200      	movs	r2, #0
 800342e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	3206      	adds	r2, #6
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d9de      	bls.n	8003412 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003462:	461a      	mov	r2, r3
 8003464:	2303      	movs	r3, #3
 8003466:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003476:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003486:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e024      	b.n	80034ee <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6919      	ldr	r1, [r3, #16]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	330a      	adds	r3, #10
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d9d7      	bls.n	80034a4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	64da      	str	r2, [r3, #76]	@ 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800351a:	461a      	mov	r2, r3
 800351c:	2303      	movs	r3, #3
 800351e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f503 62d8 	add.w	r2, r3, #1728	@ 0x6c0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003542:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003554:	b480      	push	{r7}
 8003556:	b08d      	sub	sp, #52	@ 0x34
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3318      	adds	r3, #24
 8003564:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8003572:	2300      	movs	r3, #0
 8003574:	62bb      	str	r3, [r7, #40]	@ 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003592:	d101      	bne.n	8003598 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e22b      	b.n	80039f0 <ETH_Prepare_Tx_Descriptors+0x49c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d044      	beq.n	800362e <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	4b72      	ldr	r3, [pc, #456]	@ (8003774 <ETH_Prepare_Tx_Descriptors+0x220>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80035d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d027      	beq.n	800362e <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003608:	431a      	orrs	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800361c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800362c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	4b4e      	ldr	r3, [pc, #312]	@ (8003778 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	6992      	ldr	r2, [r2, #24]
 8003646:	431a      	orrs	r2, r3
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <ETH_Prepare_Tx_Descriptors+0x11c>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d030      	beq.n	80036d2 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	3301      	adds	r3, #1
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b03      	cmp	r3, #3
 8003692:	d902      	bls.n	800369a <ETH_Prepare_Tx_Descriptors+0x146>
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	3b04      	subs	r3, #4
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	3301      	adds	r3, #1
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036b6:	d10c      	bne.n	80036d2 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	e18e      	b.n	80039f0 <ETH_Prepare_Tx_Descriptors+0x49c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	3301      	adds	r3, #1
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <ETH_Prepare_Tx_Descriptors+0x224>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	6852      	ldr	r2, [r2, #4]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <ETH_Prepare_Tx_Descriptors+0x228>)
 8003712:	4013      	ands	r3, r2
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	0412      	lsls	r2, r2, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e008      	b.n	8003734 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b13      	ldr	r3, [pc, #76]	@ (800377c <ETH_Prepare_Tx_Descriptors+0x228>)
 800372e:	4013      	ands	r3, r2
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d021      	beq.n	8003784 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	04db      	lsls	r3, r3, #19
 800374e:	431a      	orrs	r2, r3
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	69d2      	ldr	r2, [r2, #28]
 8003760:	431a      	orrs	r2, r3
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e02e      	b.n	80037d2 <ETH_Prepare_Tx_Descriptors+0x27e>
 8003774:	ffff0000 	.word	0xffff0000
 8003778:	ffffc000 	.word	0xffffc000
 800377c:	c000ffff 	.word	0xc000ffff
 8003780:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b8d      	ldr	r3, [pc, #564]	@ (80039c0 <ETH_Prepare_Tx_Descriptors+0x46c>)
 800378a:	4013      	ands	r3, r2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	431a      	orrs	r2, r3
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	431a      	orrs	r2, r3
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80c0 	beq.w	80039a2 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	431a      	orrs	r2, r3
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003834:	e0b5      	b.n	80039a2 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003844:	3301      	adds	r3, #1
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384a:	2b03      	cmp	r3, #3
 800384c:	d902      	bls.n	8003854 <ETH_Prepare_Tx_Descriptors+0x300>
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	3b04      	subs	r3, #4
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003876:	d126      	bne.n	80038c6 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003884:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
 800388a:	e016      	b.n	80038ba <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	3301      	adds	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d902      	bls.n	80038aa <ETH_Prepare_Tx_Descriptors+0x356>
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	3b04      	subs	r3, #4
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	3301      	adds	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3e4      	bcc.n	800388c <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	e094      	b.n	80039f0 <ETH_Prepare_Tx_Descriptors+0x49c>
    }

    descnbr += 1U;
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	3301      	adds	r3, #1
 80038ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	4b38      	ldr	r3, [pc, #224]	@ (80039c4 <ETH_Prepare_Tx_Descriptors+0x470>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	6852      	ldr	r2, [r2, #4]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b2f      	ldr	r3, [pc, #188]	@ (80039c8 <ETH_Prepare_Tx_Descriptors+0x474>)
 800390c:	4013      	ands	r3, r2
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	0412      	lsls	r2, r2, #16
 8003914:	431a      	orrs	r2, r3
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	e008      	b.n	800392e <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <ETH_Prepare_Tx_Descriptors+0x474>)
 8003928:	4013      	ands	r3, r2
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <ETH_Prepare_Tx_Descriptors+0x478>)
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	69d2      	ldr	r2, [r2, #28]
 8003946:	431a      	orrs	r2, r3
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	e017      	b.n	800398a <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	4b18      	ldr	r3, [pc, #96]	@ (80039c0 <ETH_Prepare_Tx_Descriptors+0x46c>)
 8003960:	4013      	ands	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	6852      	ldr	r2, [r2, #4]
 8003966:	431a      	orrs	r2, r3
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	431a      	orrs	r2, r3
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f47f af45 	bne.w	8003836 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00e      	beq.n	80039d0 <ETH_Prepare_Tx_Descriptors+0x47c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e00d      	b.n	80039dc <ETH_Prepare_Tx_Descriptors+0x488>
 80039c0:	ffff8000 	.word	0xffff8000
 80039c4:	ffffc000 	.word	0xffffc000
 80039c8:	c000ffff 	.word	0xc000ffff
 80039cc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ec:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3734      	adds	r7, #52	@ 0x34
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	@ 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a0a:	4b89      	ldr	r3, [pc, #548]	@ (8003c30 <HAL_GPIO_Init+0x234>)
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a0e:	e194      	b.n	8003d3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8186 	beq.w	8003d34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d00b      	beq.n	8003a48 <HAL_GPIO_Init+0x4c>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d007      	beq.n	8003a48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a3c:	2b11      	cmp	r3, #17
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b12      	cmp	r3, #18
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0xee>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80e0 	beq.w	8003d34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b2f      	ldr	r3, [pc, #188]	@ (8003c34 <HAL_GPIO_Init+0x238>)
 8003b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c34 <HAL_GPIO_Init+0x238>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b84:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <HAL_GPIO_Init+0x238>)
 8003b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b92:	4a29      	ldr	r2, [pc, #164]	@ (8003c38 <HAL_GPIO_Init+0x23c>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	220f      	movs	r2, #15
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_GPIO_Init+0x240>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d052      	beq.n	8003c64 <HAL_GPIO_Init+0x268>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_GPIO_Init+0x244>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d031      	beq.n	8003c2a <HAL_GPIO_Init+0x22e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c44 <HAL_GPIO_Init+0x248>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02b      	beq.n	8003c26 <HAL_GPIO_Init+0x22a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <HAL_GPIO_Init+0x24c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d025      	beq.n	8003c22 <HAL_GPIO_Init+0x226>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_GPIO_Init+0x250>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <HAL_GPIO_Init+0x222>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_GPIO_Init+0x254>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d019      	beq.n	8003c1a <HAL_GPIO_Init+0x21e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_GPIO_Init+0x258>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_GPIO_Init+0x21a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_GPIO_Init+0x25c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_GPIO_Init+0x216>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_GPIO_Init+0x260>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <HAL_GPIO_Init+0x212>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_GPIO_Init+0x264>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_GPIO_Init+0x20e>
 8003c06:	2309      	movs	r3, #9
 8003c08:	e02d      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	e02b      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	e029      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c12:	2307      	movs	r3, #7
 8003c14:	e027      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c16:	2306      	movs	r3, #6
 8003c18:	e025      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	e023      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	e021      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c22:	2303      	movs	r3, #3
 8003c24:	e01f      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e01d      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e01b      	b.n	8003c66 <HAL_GPIO_Init+0x26a>
 8003c2e:	bf00      	nop
 8003c30:	58000080 	.word	0x58000080
 8003c34:	58024400 	.word	0x58024400
 8003c38:	58000400 	.word	0x58000400
 8003c3c:	58020000 	.word	0x58020000
 8003c40:	58020400 	.word	0x58020400
 8003c44:	58020800 	.word	0x58020800
 8003c48:	58020c00 	.word	0x58020c00
 8003c4c:	58021000 	.word	0x58021000
 8003c50:	58021400 	.word	0x58021400
 8003c54:	58021800 	.word	0x58021800
 8003c58:	58021c00 	.word	0x58021c00
 8003c5c:	58022000 	.word	0x58022000
 8003c60:	58022400 	.word	0x58022400
 8003c64:	2300      	movs	r3, #0
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c76:	4938      	ldr	r1, [pc, #224]	@ (8003d58 <HAL_GPIO_Init+0x35c>)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f ae63 	bne.w	8003a10 <HAL_GPIO_Init+0x14>
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	3724      	adds	r7, #36	@ 0x24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	58000400 	.word	0x58000400

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d78:	e003      	b.n	8003d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	041a      	lsls	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	619a      	str	r2, [r3, #24]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	401a      	ands	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d104      	bne.n	8003db2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003dcc:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <HAL_HSEM_FastTake+0x2c>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3320      	adds	r3, #32
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	4a07      	ldr	r2, [pc, #28]	@ (8003df4 <HAL_HSEM_FastTake+0x30>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58026400 	.word	0x58026400
 8003df4:	80000300 	.word	0x80000300

08003df8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003e02:	4906      	ldr	r1, [pc, #24]	@ (8003e1c <HAL_HSEM_Release+0x24>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	58026400 	.word	0x58026400

08003e20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e28:	4b29      	ldr	r3, [pc, #164]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d00a      	beq.n	8003e4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e34:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e040      	b.n	8003ec8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e03e      	b.n	8003ec8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e4a:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003e52:	491f      	ldr	r1, [pc, #124]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e5a:	f7fd fd81 	bl	8001960 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e60:	e009      	b.n	8003e76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e62:	f7fd fd7d 	bl	8001960 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e70:	d901      	bls.n	8003e76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e028      	b.n	8003ec8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e82:	d1ee      	bne.n	8003e62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b1e      	cmp	r3, #30
 8003e88:	d008      	beq.n	8003e9c <HAL_PWREx_ConfigSupply+0x7c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e8e:	d005      	beq.n	8003e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b1d      	cmp	r3, #29
 8003e94:	d002      	beq.n	8003e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e9a:	d114      	bne.n	8003ec6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e9c:	f7fd fd60 	bl	8001960 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ea2:	e009      	b.n	8003eb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ea4:	f7fd fd5c 	bl	8001960 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003eb2:	d901      	bls.n	8003eb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e007      	b.n	8003ec8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003eb8:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec4:	d1ee      	bne.n	8003ea4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024800 	.word	0x58024800

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e3cb      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8087 	beq.w	8004002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003efe:	4b8a      	ldr	r3, [pc, #552]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d007      	beq.n	8003f1a <HAL_RCC_OscConfig+0x46>
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	d110      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5e>
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1a:	4b83      	ldr	r3, [pc, #524]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d06c      	beq.n	8004000 <HAL_RCC_OscConfig+0x12c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d168      	bne.n	8004000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e3a5      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCC_OscConfig+0x76>
 8003f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a79      	ldr	r2, [pc, #484]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	e02e      	b.n	8003fa8 <HAL_RCC_OscConfig+0xd4>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x98>
 8003f52:	4b75      	ldr	r3, [pc, #468]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a74      	ldr	r2, [pc, #464]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b72      	ldr	r3, [pc, #456]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a71      	ldr	r2, [pc, #452]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e01d      	b.n	8003fa8 <HAL_RCC_OscConfig+0xd4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0xbc>
 8003f76:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b69      	ldr	r3, [pc, #420]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a68      	ldr	r2, [pc, #416]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0xd4>
 8003f90:	4b65      	ldr	r3, [pc, #404]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a64      	ldr	r2, [pc, #400]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4b62      	ldr	r3, [pc, #392]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a61      	ldr	r2, [pc, #388]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d013      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fcd6 	bl	8001960 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fcd2 	bl	8001960 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	@ 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e359      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fca:	4b57      	ldr	r3, [pc, #348]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xe4>
 8003fd6:	e014      	b.n	8004002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fcc2 	bl	8001960 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fcbe 	bl	8001960 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	@ 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e345      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x10c>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8094 	beq.w	8004138 <HAL_RCC_OscConfig+0x264>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004010:	4b45      	ldr	r3, [pc, #276]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004018:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800401a:	4b43      	ldr	r3, [pc, #268]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_RCC_OscConfig+0x162>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2b18      	cmp	r3, #24
 800402a:	d12d      	bne.n	8004088 <HAL_RCC_OscConfig+0x1b4>
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d128      	bne.n	8004088 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004036:	4b3c      	ldr	r3, [pc, #240]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x17a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e317      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	f7fd fc93 	bl	8001978 <HAL_GetREVID>
 8004052:	4603      	mov	r3, r0
 8004054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004058:	4293      	cmp	r3, r2
 800405a:	d80a      	bhi.n	8004072 <HAL_RCC_OscConfig+0x19e>
 800405c:	4b32      	ldr	r3, [pc, #200]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	492f      	ldr	r1, [pc, #188]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	e062      	b.n	8004138 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	061b      	lsls	r3, r3, #24
 8004080:	4929      	ldr	r1, [pc, #164]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004086:	e057      	b.n	8004138 <HAL_RCC_OscConfig+0x264>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d038      	beq.n	8004102 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004090:	4b25      	ldr	r3, [pc, #148]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 0219 	bic.w	r2, r3, #25
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4922      	ldr	r1, [pc, #136]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd fc5d 	bl	8001960 <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fd fc59 	bl	8001960 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e2e0      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	f7fd fc56 	bl	8001978 <HAL_GetREVID>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d80a      	bhi.n	80040ec <HAL_RCC_OscConfig+0x218>
 80040d6:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	4910      	ldr	r1, [pc, #64]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]
 80040ea:	e025      	b.n	8004138 <HAL_RCC_OscConfig+0x264>
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	490b      	ldr	r1, [pc, #44]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	e01a      	b.n	8004138 <HAL_RCC_OscConfig+0x264>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <HAL_RCC_OscConfig+0x254>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd fc27 	bl	8001960 <HAL_GetTick>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004116:	f7fd fc23 	bl	8001960 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d903      	bls.n	800412c <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e2aa      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
 8004128:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800412c:	4b97      	ldr	r3, [pc, #604]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 808f 	beq.w	8004264 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004146:	4b91      	ldr	r3, [pc, #580]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800414e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004150:	4b8e      	ldr	r3, [pc, #568]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d007      	beq.n	800416c <HAL_RCC_OscConfig+0x298>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b18      	cmp	r3, #24
 8004160:	d12d      	bne.n	80041be <HAL_RCC_OscConfig+0x2ea>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d128      	bne.n	80041be <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800416c:	4b87      	ldr	r3, [pc, #540]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x2b0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b80      	cmp	r3, #128	@ 0x80
 800417e:	d001      	beq.n	8004184 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e27c      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004184:	f7fd fbf8 	bl	8001978 <HAL_GetREVID>
 8004188:	4603      	mov	r3, r0
 800418a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800418e:	4293      	cmp	r3, r2
 8004190:	d80a      	bhi.n	80041a8 <HAL_RCC_OscConfig+0x2d4>
 8004192:	4b7e      	ldr	r3, [pc, #504]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	069b      	lsls	r3, r3, #26
 80041a0:	497a      	ldr	r1, [pc, #488]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041a6:	e05d      	b.n	8004264 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a8:	4b78      	ldr	r3, [pc, #480]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	4975      	ldr	r1, [pc, #468]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041bc:	e052      	b.n	8004264 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d035      	beq.n	8004232 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041c6:	4b71      	ldr	r3, [pc, #452]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a70      	ldr	r2, [pc, #448]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd fbc5 	bl	8001960 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041da:	f7fd fbc1 	bl	8001960 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e248      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ec:	4b67      	ldr	r3, [pc, #412]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041f8:	f7fd fbbe 	bl	8001978 <HAL_GetREVID>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004202:	4293      	cmp	r3, r2
 8004204:	d80a      	bhi.n	800421c <HAL_RCC_OscConfig+0x348>
 8004206:	4b61      	ldr	r3, [pc, #388]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	495d      	ldr	r1, [pc, #372]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
 800421a:	e023      	b.n	8004264 <HAL_RCC_OscConfig+0x390>
 800421c:	4b5b      	ldr	r3, [pc, #364]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	4958      	ldr	r1, [pc, #352]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	60cb      	str	r3, [r1, #12]
 8004230:	e018      	b.n	8004264 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004232:	4b56      	ldr	r3, [pc, #344]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a55      	ldr	r2, [pc, #340]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fb8f 	bl	8001960 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004246:	f7fd fb8b 	bl	8001960 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e212      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004258:	4b4c      	ldr	r3, [pc, #304]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d036      	beq.n	80042de <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004278:	4b44      	ldr	r3, [pc, #272]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	4a43      	ldr	r2, [pc, #268]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fd fb6c 	bl	8001960 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428c:	f7fd fb68 	bl	8001960 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e1ef      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x3b8>
 80042aa:	e018      	b.n	80042de <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ac:	4b37      	ldr	r3, [pc, #220]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	4a36      	ldr	r2, [pc, #216]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fb52 	bl	8001960 <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c0:	f7fd fb4e 	bl	8001960 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1d5      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042d2:	4b2e      	ldr	r3, [pc, #184]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d036      	beq.n	8004358 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d019      	beq.n	8004326 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a25      	ldr	r2, [pc, #148]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042fe:	f7fd fb2f 	bl	8001960 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004306:	f7fd fb2b 	bl	8001960 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e1b2      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004318:	4b1c      	ldr	r3, [pc, #112]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x432>
 8004324:	e018      	b.n	8004358 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a18      	ldr	r2, [pc, #96]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004330:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004332:	f7fd fb15 	bl	8001960 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800433a:	f7fd fb11 	bl	8001960 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e198      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800434c:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <HAL_RCC_OscConfig+0x4b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8085 	beq.w	8004470 <HAL_RCC_OscConfig+0x59c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004366:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HAL_RCC_OscConfig+0x4bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <HAL_RCC_OscConfig+0x4bc>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004372:	f7fd faf5 	bl	8001960 <HAL_GetTick>
 8004376:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004378:	e00c      	b.n	8004394 <HAL_RCC_OscConfig+0x4c0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fd faf1 	bl	8001960 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	@ 0x64
 8004386:	d905      	bls.n	8004394 <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e178      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
 800438c:	58024400 	.word	0x58024400
 8004390:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004394:	4b96      	ldr	r3, [pc, #600]	@ (80045f0 <HAL_RCC_OscConfig+0x71c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ec      	beq.n	800437a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
 80043a8:	4b92      	ldr	r3, [pc, #584]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ac:	4a91      	ldr	r2, [pc, #580]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b4:	e02d      	b.n	8004412 <HAL_RCC_OscConfig+0x53e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x504>
 80043be:	4b8d      	ldr	r3, [pc, #564]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a8c      	ldr	r2, [pc, #560]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	4b8a      	ldr	r3, [pc, #552]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	4a89      	ldr	r2, [pc, #548]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x53e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x526>
 80043e0:	4b84      	ldr	r3, [pc, #528]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a83      	ldr	r2, [pc, #524]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ec:	4b81      	ldr	r3, [pc, #516]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	4a80      	ldr	r2, [pc, #512]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x53e>
 80043fa:	4b7e      	ldr	r3, [pc, #504]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a7d      	ldr	r2, [pc, #500]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b7b      	ldr	r3, [pc, #492]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a7a      	ldr	r2, [pc, #488]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x572>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd faa1 	bl	8001960 <HAL_GetTick>
 800441e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd fa9d 	bl	8001960 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e122      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004438:	4b6e      	ldr	r3, [pc, #440]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x54e>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x59c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd fa8b 	bl	8001960 <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x590>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fa87 	bl	8001960 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e10c      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004464:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x57a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8101 	beq.w	800467c <HAL_RCC_OscConfig+0x7a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800447a:	4b5e      	ldr	r3, [pc, #376]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004482:	2b18      	cmp	r3, #24
 8004484:	f000 80bc 	beq.w	8004600 <HAL_RCC_OscConfig+0x72c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 8095 	bne.w	80045bc <HAL_RCC_OscConfig+0x6e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd fa5f 	bl	8001960 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fd fa5b 	bl	8001960 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0e2      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044b8:	4b4e      	ldr	r3, [pc, #312]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5d2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c4:	4b4b      	ldr	r3, [pc, #300]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80044c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c8:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_RCC_OscConfig+0x724>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	430a      	orrs	r2, r1
 80044d8:	4946      	ldr	r1, [pc, #280]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	3b01      	subs	r3, #1
 80044e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	3b01      	subs	r3, #1
 80044ee:	025b      	lsls	r3, r3, #9
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004506:	3b01      	subs	r3, #1
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800450e:	4939      	ldr	r1, [pc, #228]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004510:	4313      	orrs	r3, r2
 8004512:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004514:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	4a36      	ldr	r2, [pc, #216]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004520:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004524:	4b35      	ldr	r3, [pc, #212]	@ (80045fc <HAL_RCC_OscConfig+0x728>)
 8004526:	4013      	ands	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800452c:	00d2      	lsls	r2, r2, #3
 800452e:	4931      	ldr	r1, [pc, #196]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004530:	4313      	orrs	r3, r2
 8004532:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004534:	4b2f      	ldr	r3, [pc, #188]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f023 020c 	bic.w	r2, r3, #12
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	492c      	ldr	r1, [pc, #176]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004542:	4313      	orrs	r3, r2
 8004544:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004546:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	f023 0202 	bic.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	4928      	ldr	r1, [pc, #160]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004554:	4313      	orrs	r3, r2
 8004556:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004558:	4b26      	ldr	r3, [pc, #152]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800456a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800457a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800457c:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 800458e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd f9e4 	bl	8001960 <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x6da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd f9e0 	bl	8001960 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x6da>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e067      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ae:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x6c8>
 80045ba:	e05f      	b.n	800467c <HAL_RCC_OscConfig+0x7a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80045c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd f9ca 	bl	8001960 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd f9c6 	bl	8001960 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e04d      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <HAL_RCC_OscConfig+0x720>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6fc>
 80045ee:	e045      	b.n	800467c <HAL_RCC_OscConfig+0x7a8>
 80045f0:	58024800 	.word	0x58024800
 80045f4:	58024400 	.word	0x58024400
 80045f8:	fffffc0c 	.word	0xfffffc0c
 80045fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004600:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004606:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <HAL_RCC_OscConfig+0x7b4>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	2b01      	cmp	r3, #1
 8004612:	d031      	beq.n	8004678 <HAL_RCC_OscConfig+0x7a4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f003 0203 	and.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d12a      	bne.n	8004678 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d122      	bne.n	8004678 <HAL_RCC_OscConfig+0x7a4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d11a      	bne.n	8004678 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0a5b      	lsrs	r3, r3, #9
 8004646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d111      	bne.n	8004678 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d108      	bne.n	8004678 <HAL_RCC_OscConfig+0x7a4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	0e1b      	lsrs	r3, r3, #24
 800466a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x7a8>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x7aa>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3730      	adds	r7, #48	@ 0x30
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400

0800468c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e19c      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d910      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b87      	ldr	r3, [pc, #540]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 020f 	bic.w	r2, r3, #15
 80046b6:	4985      	ldr	r1, [pc, #532]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b83      	ldr	r3, [pc, #524]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e184      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	4b7b      	ldr	r3, [pc, #492]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d908      	bls.n	80046fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046ec:	4b78      	ldr	r3, [pc, #480]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4975      	ldr	r1, [pc, #468]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	4b70      	ldr	r3, [pc, #448]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d908      	bls.n	800472c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800471a:	4b6d      	ldr	r3, [pc, #436]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	496a      	ldr	r1, [pc, #424]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004728:	4313      	orrs	r3, r2
 800472a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	4b64      	ldr	r3, [pc, #400]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004744:	429a      	cmp	r2, r3
 8004746:	d908      	bls.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004748:	4b61      	ldr	r3, [pc, #388]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	495e      	ldr	r1, [pc, #376]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004756:	4313      	orrs	r3, r2
 8004758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	4b59      	ldr	r3, [pc, #356]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004772:	429a      	cmp	r2, r3
 8004774:	d908      	bls.n	8004788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004776:	4b56      	ldr	r3, [pc, #344]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4953      	ldr	r1, [pc, #332]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004784:	4313      	orrs	r3, r2
 8004786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	4b4d      	ldr	r3, [pc, #308]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d908      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b4a      	ldr	r3, [pc, #296]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f023 020f 	bic.w	r2, r3, #15
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4947      	ldr	r1, [pc, #284]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d055      	beq.n	800486e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047c2:	4b43      	ldr	r3, [pc, #268]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	4940      	ldr	r1, [pc, #256]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d107      	bne.n	80047ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047dc:	4b3c      	ldr	r3, [pc, #240]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d121      	bne.n	800482c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0f6      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047f4:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d115      	bne.n	800482c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0ea      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800480c:	4b30      	ldr	r3, [pc, #192]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0de      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800481c:	4b2c      	ldr	r3, [pc, #176]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0d6      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800482c:	4b28      	ldr	r3, [pc, #160]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f023 0207 	bic.w	r2, r3, #7
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4925      	ldr	r1, [pc, #148]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800483a:	4313      	orrs	r3, r2
 800483c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fd f88f 	bl	8001960 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004844:	e00a      	b.n	800485c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004846:	f7fd f88b 	bl	8001960 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e0be      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485c:	4b1c      	ldr	r3, [pc, #112]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	429a      	cmp	r2, r3
 800486c:	d1eb      	bne.n	8004846 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	4b14      	ldr	r3, [pc, #80]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	429a      	cmp	r2, r3
 8004888:	d208      	bcs.n	800489c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488a:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	490e      	ldr	r1, [pc, #56]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004898:	4313      	orrs	r3, r2
 800489a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d214      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	4906      	ldr	r1, [pc, #24]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e086      	b.n	80049da <HAL_RCC_ClockConfig+0x34e>
 80048cc:	52002000 	.word	0x52002000
 80048d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d010      	beq.n	8004902 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	4b3f      	ldr	r3, [pc, #252]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d208      	bcs.n	8004902 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048f0:	4b3c      	ldr	r3, [pc, #240]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	4939      	ldr	r1, [pc, #228]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d010      	beq.n	8004930 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	4b34      	ldr	r3, [pc, #208]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800491a:	429a      	cmp	r2, r3
 800491c:	d208      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	492e      	ldr	r1, [pc, #184]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 800492c:	4313      	orrs	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	4b28      	ldr	r3, [pc, #160]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004948:	429a      	cmp	r2, r3
 800494a:	d208      	bcs.n	800495e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	4922      	ldr	r1, [pc, #136]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 800495a:	4313      	orrs	r3, r2
 800495c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004976:	429a      	cmp	r2, r3
 8004978:	d208      	bcs.n	800498c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800497a:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4917      	ldr	r1, [pc, #92]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004988:	4313      	orrs	r3, r2
 800498a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800498c:	f000 f834 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	4912      	ldr	r1, [pc, #72]	@ (80049e8 <HAL_RCC_ClockConfig+0x35c>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049aa:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <HAL_RCC_ClockConfig+0x358>)
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <HAL_RCC_ClockConfig+0x35c>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x360>)
 80049c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049c4:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <HAL_RCC_ClockConfig+0x364>)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80049ca:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <HAL_RCC_ClockConfig+0x368>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fc fbc8 	bl	8001164 <HAL_InitTick>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
 80049e8:	0801f254 	.word	0x0801f254
 80049ec:	24000004 	.word	0x24000004
 80049f0:	24000000 	.word	0x24000000
 80049f4:	24000008 	.word	0x24000008

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049fe:	4bb3      	ldr	r3, [pc, #716]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	f200 8155 	bhi.w	8004cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a79 	.word	0x08004a79
 8004a18:	08004cb7 	.word	0x08004cb7
 8004a1c:	08004cb7 	.word	0x08004cb7
 8004a20:	08004cb7 	.word	0x08004cb7
 8004a24:	08004cb7 	.word	0x08004cb7
 8004a28:	08004cb7 	.word	0x08004cb7
 8004a2c:	08004cb7 	.word	0x08004cb7
 8004a30:	08004cb7 	.word	0x08004cb7
 8004a34:	08004a9f 	.word	0x08004a9f
 8004a38:	08004cb7 	.word	0x08004cb7
 8004a3c:	08004cb7 	.word	0x08004cb7
 8004a40:	08004cb7 	.word	0x08004cb7
 8004a44:	08004cb7 	.word	0x08004cb7
 8004a48:	08004cb7 	.word	0x08004cb7
 8004a4c:	08004cb7 	.word	0x08004cb7
 8004a50:	08004cb7 	.word	0x08004cb7
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004cb7 	.word	0x08004cb7
 8004a5c:	08004cb7 	.word	0x08004cb7
 8004a60:	08004cb7 	.word	0x08004cb7
 8004a64:	08004cb7 	.word	0x08004cb7
 8004a68:	08004cb7 	.word	0x08004cb7
 8004a6c:	08004cb7 	.word	0x08004cb7
 8004a70:	08004cb7 	.word	0x08004cb7
 8004a74:	08004aab 	.word	0x08004aab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a78:	4b94      	ldr	r3, [pc, #592]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a84:	4b91      	ldr	r3, [pc, #580]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	4a90      	ldr	r2, [pc, #576]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a96:	e111      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a98:	4b8d      	ldr	r3, [pc, #564]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a9a:	61bb      	str	r3, [r7, #24]
    break;
 8004a9c:	e10e      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004aa0:	61bb      	str	r3, [r7, #24]
    break;
 8004aa2:	e10b      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004aa6:	61bb      	str	r3, [r7, #24]
    break;
 8004aa8:	e108      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aaa:	4b88      	ldr	r3, [pc, #544]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ab4:	4b85      	ldr	r3, [pc, #532]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ac0:	4b82      	ldr	r3, [pc, #520]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004aca:	4b80      	ldr	r3, [pc, #512]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	08db      	lsrs	r3, r3, #3
 8004ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80e1 	beq.w	8004cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f000 8083 	beq.w	8004bfc <HAL_RCC_GetSysClockFreq+0x204>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f200 80a1 	bhi.w	8004c40 <HAL_RCC_GetSysClockFreq+0x248>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x114>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d056      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b0a:	e099      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02d      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	4a6b      	ldr	r2, [pc, #428]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b62      	ldr	r3, [pc, #392]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b72:	e087      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b51      	ldr	r3, [pc, #324]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	e065      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b40      	ldr	r3, [pc, #256]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e043      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e021      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c84:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8e:	3301      	adds	r3, #1
 8004c90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca8:	ee17 3a90 	vmov	r3, s15
 8004cac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
    break;
 8004cb4:	e002      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004cb6:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cb8:	61bb      	str	r3, [r7, #24]
    break;
 8004cba:	bf00      	nop
  }

  return sysclockfreq;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	@ 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	03d09000 	.word	0x03d09000
 8004cd4:	003d0900 	.word	0x003d0900
 8004cd8:	007a1200 	.word	0x007a1200
 8004cdc:	46000000 	.word	0x46000000
 8004ce0:	4c742400 	.word	0x4c742400
 8004ce4:	4a742400 	.word	0x4a742400
 8004ce8:	4af42400 	.word	0x4af42400

08004cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cf2:	f7ff fe81 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	490f      	ldr	r1, [pc, #60]	@ (8004d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d04:	5ccb      	ldrb	r3, [r1, r3]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a07      	ldr	r2, [pc, #28]	@ (8004d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d2a:	4a07      	ldr	r2, [pc, #28]	@ (8004d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	0801f254 	.word	0x0801f254
 8004d44:	24000004 	.word	0x24000004
 8004d48:	24000000 	.word	0x24000000

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d50:	f7ff ffcc 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	0801f254 	.word	0x0801f254

08004d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d7c:	f7ff ffb6 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4904      	ldr	r1, [pc, #16]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	0801f254 	.word	0x0801f254

08004da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	223f      	movs	r2, #63	@ 0x3f
 8004db2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0207 	and.w	r2, r3, #7
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004dc0:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004dcc:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <HAL_RCC_GetClockConfig+0x7c>)
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e08:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_GetClockConfig+0x80>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	58024400 	.word	0x58024400
 8004e24:	52002000 	.word	0x52002000

08004e28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e34:	2300      	movs	r3, #0
 8004e36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d03f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e4c:	d02a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e52:	d824      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e58:	d018      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e5e:	d81e      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e68:	d007      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e6a:	e018      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6c:	4ba3      	ldr	r3, [pc, #652]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4aa2      	ldr	r2, [pc, #648]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e78:	e015      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f9b5 	bl	80061f0 <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e8a:	e00c      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3324      	adds	r3, #36	@ 0x24
 8004e90:	2102      	movs	r1, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fa5e 	bl	8006354 <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004eac:	4b93      	ldr	r3, [pc, #588]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb8:	4990      	ldr	r1, [pc, #576]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	650b      	str	r3, [r1, #80]	@ 0x50
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d03d      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d826      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004ef5 	.word	0x08004ef5
 8004ee4:	08004f03 	.word	0x08004f03
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef4:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	4a80      	ldr	r2, [pc, #512]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f00:	e015      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 f971 	bl	80061f0 <RCCEx_PLL2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f12:	e00c      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3324      	adds	r3, #36	@ 0x24
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fa1a 	bl	8006354 <RCCEx_PLL3_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f34:	4b71      	ldr	r3, [pc, #452]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f38:	f023 0207 	bic.w	r2, r3, #7
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	496e      	ldr	r1, [pc, #440]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	650b      	str	r3, [r1, #80]	@ 0x50
 8004f46:	e001      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d042      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f60:	d02b      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f66:	d825      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f68:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6a:	d028      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6e:	d821      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f70:	2b80      	cmp	r3, #128	@ 0x80
 8004f72:	d016      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004f74:	2b80      	cmp	r3, #128	@ 0x80
 8004f76:	d81d      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d007      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f80:	e018      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f82:	4b5e      	ldr	r3, [pc, #376]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a5d      	ldr	r2, [pc, #372]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e017      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 f92a 	bl	80061f0 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e00e      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3324      	adds	r3, #36	@ 0x24
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f9d3 	bl	8006354 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fca:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	494a      	ldr	r1, [pc, #296]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	650b      	str	r3, [r1, #80]	@ 0x50
 8004fd8:	e001      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d049      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ff4:	d030      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004ff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ffa:	d82a      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ffc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005000:	d02c      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005002:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005006:	d824      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800500c:	d018      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005012:	d81e      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800501c:	d007      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800501e:	e018      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4b36      	ldr	r3, [pc, #216]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	4a35      	ldr	r2, [pc, #212]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800502c:	e017      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f8db 	bl	80061f0 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800503e:	e00e      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3324      	adds	r3, #36	@ 0x24
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f001 f984 	bl	8006354 <RCCEx_PLL3_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005050:	e005      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      break;
 8005056:	e002      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800505c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005064:	4b25      	ldr	r3, [pc, #148]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005068:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005072:	4922      	ldr	r1, [pc, #136]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005074:	4313      	orrs	r3, r2
 8005076:	658b      	str	r3, [r1, #88]	@ 0x58
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04b      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005094:	d030      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800509a:	d82a      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800509c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a0:	d02e      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80050a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a6:	d824      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80050a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ac:	d018      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80050ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050b2:	d81e      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050bc:	d007      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80050be:	e018      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b0e      	ldr	r3, [pc, #56]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a0d      	ldr	r2, [pc, #52]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e019      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f88b 	bl	80061f0 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050de:	e010      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3324      	adds	r3, #36	@ 0x24
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 f934 	bl	8006354 <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050f0:	e007      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
      break;
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80050f8:	bf00      	nop
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80050fc:	58024400 	.word	0x58024400
      break;
 8005100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005108:	4b99      	ldr	r3, [pc, #612]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005116:	4996      	ldr	r1, [pc, #600]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005118:	4313      	orrs	r3, r2
 800511a:	658b      	str	r3, [r1, #88]	@ 0x58
 800511c:	e001      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d032      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005132:	2b30      	cmp	r3, #48	@ 0x30
 8005134:	d01c      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005136:	2b30      	cmp	r3, #48	@ 0x30
 8005138:	d817      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800513a:	2b20      	cmp	r3, #32
 800513c:	d00c      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800513e:	2b20      	cmp	r3, #32
 8005140:	d813      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005146:	2b10      	cmp	r3, #16
 8005148:	d10f      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514a:	4b89      	ldr	r3, [pc, #548]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	4a88      	ldr	r2, [pc, #544]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005154:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005156:	e00e      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	2102      	movs	r1, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f846 	bl	80061f0 <RCCEx_PLL2_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005168:	e005      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800517c:	4b7c      	ldr	r3, [pc, #496]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005188:	4979      	ldr	r1, [pc, #484]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800518a:	4313      	orrs	r3, r2
 800518c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d047      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a8:	d030      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ae:	d82a      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b4:	d02c      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80051b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051ba:	d824      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c0:	d018      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80051c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c6:	d81e      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d0:	d007      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80051d2:	e018      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4b66      	ldr	r3, [pc, #408]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4a65      	ldr	r2, [pc, #404]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051e0:	e017      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f801 	bl	80061f0 <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051f2:	e00e      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3324      	adds	r3, #36	@ 0x24
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 f8aa 	bl	8006354 <RCCEx_PLL3_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005204:	e005      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
      break;
 800520a:	e002      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005218:	4b55      	ldr	r3, [pc, #340]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	4952      	ldr	r1, [pc, #328]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005226:	4313      	orrs	r3, r2
 8005228:	650b      	str	r3, [r1, #80]	@ 0x50
 800522a:	e001      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d049      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005244:	d02e      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005246:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800524a:	d828      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800524c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005250:	d02a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005252:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005256:	d822      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800525c:	d026      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x484>
 800525e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005262:	d81c      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005268:	d010      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800526a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800526e:	d816      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01d      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d111      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f000 ffb5 	bl	80061f0 <RCCEx_PLL2_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800528a:	e012      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3324      	adds	r3, #36	@ 0x24
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f001 f85e 	bl	8006354 <RCCEx_PLL3_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800529c:	e009      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
      break;
 80052a2:	e006      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80052b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052bc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c4:	492a      	ldr	r1, [pc, #168]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	650b      	str	r3, [r1, #80]	@ 0x50
 80052ca:	e001      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d04d      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e6:	d02e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80052e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052ec:	d828      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f2:	d02a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f8:	d822      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052fe:	d026      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005300:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005304:	d81c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800530a:	d010      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800530c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005310:	d816      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01d      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800531a:	d111      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2101      	movs	r1, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 ff64 	bl	80061f0 <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800532c:	e012      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3324      	adds	r3, #36	@ 0x24
 8005332:	2101      	movs	r1, #1
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f80d 	bl	8006354 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	e006      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005346:	bf00      	nop
 8005348:	e004      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800534a:	bf00      	nop
 800534c:	e002      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005368:	4901      	ldr	r1, [pc, #4]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800536a:	4313      	orrs	r3, r2
 800536c:	658b      	str	r3, [r1, #88]	@ 0x58
 800536e:	e003      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02f      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538c:	d00e      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x584>
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005392:	d814      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d015      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800539c:	d10f      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539e:	4baf      	ldr	r3, [pc, #700]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4aae      	ldr	r2, [pc, #696]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053aa:	e00c      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 ff1c 	bl	80061f0 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80053c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053cc:	4ba3      	ldr	r3, [pc, #652]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d8:	49a0      	ldr	r1, [pc, #640]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	650b      	str	r3, [r1, #80]	@ 0x50
 80053de:	e001      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d032      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d81b      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005437 	.word	0x08005437
 8005404:	08005411 	.word	0x08005411
 8005408:	0800541f 	.word	0x0800541f
 800540c:	08005437 	.word	0x08005437
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b92      	ldr	r3, [pc, #584]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	4a91      	ldr	r2, [pc, #580]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800541a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800541c:	e00c      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fee3 	bl	80061f0 <RCCEx_PLL2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]
      break;
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800543e:	4b87      	ldr	r3, [pc, #540]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	4984      	ldr	r1, [pc, #528]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800544c:	4313      	orrs	r3, r2
 800544e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005450:	e001      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8086 	beq.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005464:	4b7e      	ldr	r3, [pc, #504]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7d      	ldr	r2, [pc, #500]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800546a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005470:	f7fc fa76 	bl	8001960 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005476:	e009      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005478:	f7fc fa72 	bl	8001960 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	@ 0x64
 8005484:	d902      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	75fb      	strb	r3, [r7, #23]
        break;
 800548a:	e005      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548c:	4b74      	ldr	r3, [pc, #464]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d166      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800549e:	4b6f      	ldr	r3, [pc, #444]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054a8:	4053      	eors	r3, r2
 80054aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d013      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054b2:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054bc:	4b67      	ldr	r3, [pc, #412]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c0:	4a66      	ldr	r2, [pc, #408]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c6:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054c8:	4b64      	ldr	r3, [pc, #400]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	4a63      	ldr	r2, [pc, #396]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d2:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054d4:	4a61      	ldr	r2, [pc, #388]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e4:	d115      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc fa3b 	bl	8001960 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ec:	e00b      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fc fa37 	bl	8001960 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d902      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	75fb      	strb	r3, [r7, #23]
            break;
 8005504:	e005      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005506:	4b55      	ldr	r3, [pc, #340]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ed      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d126      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800551e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005526:	d10d      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005528:	4b4c      	ldr	r3, [pc, #304]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005536:	0919      	lsrs	r1, r3, #4
 8005538:	4b4a      	ldr	r3, [pc, #296]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800553a:	400b      	ands	r3, r1
 800553c:	4947      	ldr	r1, [pc, #284]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
 8005542:	e005      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005544:	4b45      	ldr	r3, [pc, #276]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	4a44      	ldr	r2, [pc, #272]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800554a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800554e:	6113      	str	r3, [r2, #16]
 8005550:	4b42      	ldr	r3, [pc, #264]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005552:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800555a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555e:	493f      	ldr	r1, [pc, #252]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005560:	4313      	orrs	r3, r2
 8005562:	670b      	str	r3, [r1, #112]	@ 0x70
 8005564:	e004      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	75bb      	strb	r3, [r7, #22]
 800556a:	e001      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8085 	beq.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005582:	2b28      	cmp	r3, #40	@ 0x28
 8005584:	d866      	bhi.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	08005669 	.word	0x08005669
 8005590:	08005655 	.word	0x08005655
 8005594:	08005655 	.word	0x08005655
 8005598:	08005655 	.word	0x08005655
 800559c:	08005655 	.word	0x08005655
 80055a0:	08005655 	.word	0x08005655
 80055a4:	08005655 	.word	0x08005655
 80055a8:	08005655 	.word	0x08005655
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005655 	.word	0x08005655
 80055b4:	08005655 	.word	0x08005655
 80055b8:	08005655 	.word	0x08005655
 80055bc:	08005655 	.word	0x08005655
 80055c0:	08005655 	.word	0x08005655
 80055c4:	08005655 	.word	0x08005655
 80055c8:	08005655 	.word	0x08005655
 80055cc:	08005643 	.word	0x08005643
 80055d0:	08005655 	.word	0x08005655
 80055d4:	08005655 	.word	0x08005655
 80055d8:	08005655 	.word	0x08005655
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005655 	.word	0x08005655
 80055e8:	08005655 	.word	0x08005655
 80055ec:	08005669 	.word	0x08005669
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005655 	.word	0x08005655
 80055f8:	08005655 	.word	0x08005655
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	08005669 	.word	0x08005669
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	08005655 	.word	0x08005655
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	08005669 	.word	0x08005669
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fdda 	bl	80061f0 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005640:	e013      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3324      	adds	r3, #36	@ 0x24
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fe83 	bl	8006354 <RCCEx_PLL3_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005652:	e00a      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	e007      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
 8005660:	58024800 	.word	0x58024800
 8005664:	00ffffcf 	.word	0x00ffffcf
      break;
 8005668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005670:	4b96      	ldr	r3, [pc, #600]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800567c:	4993      	ldr	r1, [pc, #588]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	654b      	str	r3, [r1, #84]	@ 0x54
 8005682:	e001      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d038      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005698:	2b05      	cmp	r3, #5
 800569a:	d821      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056e7 	.word	0x080056e7
 80056a8:	080056bd 	.word	0x080056bd
 80056ac:	080056cf 	.word	0x080056cf
 80056b0:	080056e7 	.word	0x080056e7
 80056b4:	080056e7 	.word	0x080056e7
 80056b8:	080056e7 	.word	0x080056e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fd94 	bl	80061f0 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	2101      	movs	r1, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fe3d 	bl	8006354 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056de:	e003      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80056e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ee:	4b77      	ldr	r3, [pc, #476]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f023 0207 	bic.w	r2, r3, #7
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056fa:	4974      	ldr	r1, [pc, #464]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	654b      	str	r3, [r1, #84]	@ 0x54
 8005700:	e001      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d03a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005718:	2b05      	cmp	r3, #5
 800571a:	d821      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005767 	.word	0x08005767
 8005728:	0800573d 	.word	0x0800573d
 800572c:	0800574f 	.word	0x0800574f
 8005730:	08005767 	.word	0x08005767
 8005734:	08005767 	.word	0x08005767
 8005738:	08005767 	.word	0x08005767
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fd54 	bl	80061f0 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800574c:	e00c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3324      	adds	r3, #36	@ 0x24
 8005752:	2101      	movs	r1, #1
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fdfd 	bl	8006354 <RCCEx_PLL3_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
      break;
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576e:	4b57      	ldr	r3, [pc, #348]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005772:	f023 0207 	bic.w	r2, r3, #7
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577c:	4953      	ldr	r1, [pc, #332]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	658b      	str	r3, [r1, #88]	@ 0x58
 8005782:	e001      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d04b      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800579a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800579e:	d02e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80057a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a4:	d828      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057aa:	d02a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b0:	d822      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80057b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057b6:	d026      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80057b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057bc:	d81c      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c2:	d010      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80057c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c8:	d816      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01d      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d2:	d111      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd08 	bl	80061f0 <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057e4:	e012      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	@ 0x24
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fdb1 	bl	8006354 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057f6:	e009      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800580a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005812:	4b2e      	ldr	r3, [pc, #184]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005820:	492a      	ldr	r1, [pc, #168]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	654b      	str	r3, [r1, #84]	@ 0x54
 8005826:	e001      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d04d      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800583e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005842:	d02e      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005844:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005848:	d828      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584e:	d02a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005854:	d822      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800585a:	d026      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800585c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005860:	d81c      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005866:	d010      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586c:	d816      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01d      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005876:	d111      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fcb6 	bl	80061f0 <RCCEx_PLL2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005888:	e012      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3324      	adds	r3, #36	@ 0x24
 800588e:	2102      	movs	r1, #2
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fd5f 	bl	8006354 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800589a:	e009      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
      break;
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80058a2:	bf00      	nop
 80058a4:	e004      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80058ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058b6:	4b05      	ldr	r3, [pc, #20]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ba:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058c4:	4901      	ldr	r1, [pc, #4]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	658b      	str	r3, [r1, #88]	@ 0x58
 80058ca:	e003      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80058cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d04b      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058ea:	d02e      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80058ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058f0:	d828      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f6:	d02a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80058f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fc:	d822      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005902:	d026      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005904:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005908:	d81c      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800590a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800590e:	d010      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005914:	d816      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01d      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591e:	d111      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fc62 	bl	80061f0 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005930:	e012      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3324      	adds	r3, #36	@ 0x24
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fd0b 	bl	8006354 <RCCEx_PLL3_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005942:	e009      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	e006      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800594a:	bf00      	nop
 800594c:	e004      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800594e:	bf00      	nop
 8005950:	e002      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800595e:	4b9d      	ldr	r3, [pc, #628]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800596c:	4999      	ldr	r1, [pc, #612]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800596e:	4313      	orrs	r3, r2
 8005970:	658b      	str	r3, [r1, #88]	@ 0x58
 8005972:	e001      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598e:	d10a      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3324      	adds	r3, #36	@ 0x24
 8005994:	2102      	movs	r1, #2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fcdc 	bl	8006354 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059a6:	4b8b      	ldr	r3, [pc, #556]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b4:	4987      	ldr	r1, [pc, #540]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	654b      	str	r3, [r1, #84]	@ 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d0:	d10a      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3324      	adds	r3, #36	@ 0x24
 80059d6:	2102      	movs	r1, #2
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fcbb 	bl	8006354 <RCCEx_PLL3_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e8:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f6:	4977      	ldr	r1, [pc, #476]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d034      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a12:	d01d      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a18:	d817      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a22:	d009      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005a24:	e011      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fbdf 	bl	80061f0 <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a36:	e00c      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3324      	adds	r3, #36	@ 0x24
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fc88 	bl	8006354 <RCCEx_PLL3_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a48:	e003      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a58:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a66:	495b      	ldr	r1, [pc, #364]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	658b      	str	r3, [r1, #88]	@ 0x58
 8005a6c:	e001      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d033      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a88:	d01c      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005a8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a8e:	d816      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005a96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a9a:	d007      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005a9c:	e00f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005aaa:	e00c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3324      	adds	r3, #36	@ 0x24
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fc4e 	bl	8006354 <RCCEx_PLL3_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005acc:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ada:	493e      	ldr	r1, [pc, #248]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	654b      	str	r3, [r1, #84]	@ 0x54
 8005ae0:	e001      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d029      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afe:	d007      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b02:	4b34      	ldr	r3, [pc, #208]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a33      	ldr	r2, [pc, #204]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b0e:	e00b      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fb6a 	bl	80061f0 <RCCEx_PLL2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
      break;
 8005b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3a:	4926      	ldr	r1, [pc, #152]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005b40:	e001      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3324      	adds	r3, #36	@ 0x24
 8005b56:	2102      	movs	r1, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fbfb 	bl	8006354 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d033      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b7c:	d017      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b82:	d811      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b88:	d013      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b8e:	d80b      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b98:	d106      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005ba6:	e007      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bac:	e004      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bbe:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bca:	4902      	ldr	r1, [pc, #8]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	654b      	str	r3, [r1, #84]	@ 0x54
 8005bd0:	e004      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005be8:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf4:	491e      	ldr	r1, [pc, #120]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	650b      	str	r3, [r1, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d008      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c06:	4b1a      	ldr	r3, [pc, #104]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c12:	4917      	ldr	r1, [pc, #92]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c24:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	4a11      	ldr	r2, [pc, #68]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c2e:	6113      	str	r3, [r2, #16]
 8005c30:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c3a:	490d      	ldr	r1, [pc, #52]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da08      	bge.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xe32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c48:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c54:	4906      	ldr	r1, [pc, #24]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe48>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  if (status == HAL_OK)
 8005c5a:	7dbb      	ldrb	r3, [r7, #22]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
  {
    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xe3e>
  }
  return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400

08005c74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c78:	f7ff f838 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4904      	ldr	r1, [pc, #16]	@ (8005c9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	0801f254 	.word	0x0801f254

08005ca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	@ 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cb2:	4b9f      	ldr	r3, [pc, #636]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	0b1b      	lsrs	r3, r3, #12
 8005cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cbe:	4b9c      	ldr	r3, [pc, #624]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cca:	4b99      	ldr	r3, [pc, #612]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8111 	beq.w	8005f10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	f000 8083 	beq.w	8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	f200 80a1 	bhi.w	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d056      	beq.n	8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d0a:	e099      	b.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d0c:	4b88      	ldr	r3, [pc, #544]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02d      	beq.n	8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d18:	4b85      	ldr	r3, [pc, #532]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	4a84      	ldr	r2, [pc, #528]	@ (8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d42:	4b7b      	ldr	r3, [pc, #492]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d72:	e087      	b.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d86:	4b6a      	ldr	r3, [pc, #424]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005db6:	e065      	b.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dca:	4b59      	ldr	r3, [pc, #356]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dfa:	e043      	b.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b48      	ldr	r3, [pc, #288]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e3e:	e021      	b.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b37      	ldr	r3, [pc, #220]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e84:	4b2a      	ldr	r3, [pc, #168]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	0a5b      	lsrs	r3, r3, #9
 8005e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eaa:	ee17 2a90 	vmov	r2, s15
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	0c1b      	lsrs	r3, r3, #16
 8005eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed8:	ee17 2a90 	vmov	r2, s15
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ee0:	4b13      	ldr	r3, [pc, #76]	@ (8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	0e1b      	lsrs	r3, r3, #24
 8005ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f06:	ee17 2a90 	vmov	r2, s15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f0e:	e008      	b.n	8005f22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
}
 8005f22:	bf00      	nop
 8005f24:	3724      	adds	r7, #36	@ 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	03d09000 	.word	0x03d09000
 8005f38:	46000000 	.word	0x46000000
 8005f3c:	4c742400 	.word	0x4c742400
 8005f40:	4a742400 	.word	0x4a742400
 8005f44:	4af42400 	.word	0x4af42400

08005f48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f50:	4ba1      	ldr	r3, [pc, #644]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f5a:	4b9f      	ldr	r3, [pc, #636]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	0d1b      	lsrs	r3, r3, #20
 8005f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f66:	4b9c      	ldr	r3, [pc, #624]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f72:	4b99      	ldr	r3, [pc, #612]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8111 	beq.w	80061b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f000 8083 	beq.w	80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	f200 80a1 	bhi.w	80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d056      	beq.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fb2:	e099      	b.n	80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb4:	4b88      	ldr	r3, [pc, #544]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02d      	beq.n	800601c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fc0:	4b85      	ldr	r3, [pc, #532]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	08db      	lsrs	r3, r3, #3
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	4a84      	ldr	r2, [pc, #528]	@ (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	4b7b      	ldr	r3, [pc, #492]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006016:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800601a:	e087      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b6a      	ldr	r3, [pc, #424]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006042:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800605e:	e065      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b59      	ldr	r3, [pc, #356]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a03 	vldr	s12, [r7, #12]
 8006086:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060a2:	e043      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b48      	ldr	r3, [pc, #288]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060e6:	e021      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b37      	ldr	r3, [pc, #220]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a03 	vldr	s12, [r7, #12]
 800610e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800612c:	4b2a      	ldr	r3, [pc, #168]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006130:	0a5b      	lsrs	r3, r3, #9
 8006132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006146:	edd7 6a07 	vldr	s13, [r7, #28]
 800614a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006152:	ee17 2a90 	vmov	r2, s15
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800615a:	4b1f      	ldr	r3, [pc, #124]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006174:	edd7 6a07 	vldr	s13, [r7, #28]
 8006178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006180:	ee17 2a90 	vmov	r2, s15
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006188:	4b13      	ldr	r3, [pc, #76]	@ (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	0e1b      	lsrs	r3, r3, #24
 800618e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800619e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ae:	ee17 2a90 	vmov	r2, s15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061b6:	e008      	b.n	80061ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
}
 80061ca:	bf00      	nop
 80061cc:	3724      	adds	r7, #36	@ 0x24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
 80061dc:	03d09000 	.word	0x03d09000
 80061e0:	46000000 	.word	0x46000000
 80061e4:	4c742400 	.word	0x4c742400
 80061e8:	4a742400 	.word	0x4a742400
 80061ec:	4af42400 	.word	0x4af42400

080061f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061fe:	4b53      	ldr	r3, [pc, #332]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b03      	cmp	r3, #3
 8006208:	d101      	bne.n	800620e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e099      	b.n	8006342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800620e:	4b4f      	ldr	r3, [pc, #316]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4e      	ldr	r2, [pc, #312]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006214:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800621a:	f7fb fba1 	bl	8001960 <HAL_GetTick>
 800621e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006220:	e008      	b.n	8006234 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006222:	f7fb fb9d 	bl	8001960 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e086      	b.n	8006342 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006234:	4b45      	ldr	r3, [pc, #276]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f0      	bne.n	8006222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006240:	4b42      	ldr	r3, [pc, #264]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	493f      	ldr	r1, [pc, #252]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	628b      	str	r3, [r1, #40]	@ 0x28
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	3b01      	subs	r3, #1
 800625a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	3b01      	subs	r3, #1
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	b29b      	uxth	r3, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	3b01      	subs	r3, #1
 800627e:	061b      	lsls	r3, r3, #24
 8006280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006284:	4931      	ldr	r1, [pc, #196]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800628a:	4b30      	ldr	r3, [pc, #192]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	492d      	ldr	r1, [pc, #180]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800629c:	4b2b      	ldr	r3, [pc, #172]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	f023 0220 	bic.w	r2, r3, #32
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	4928      	ldr	r1, [pc, #160]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062ae:	4b27      	ldr	r3, [pc, #156]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	4a26      	ldr	r2, [pc, #152]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062b4:	f023 0310 	bic.w	r3, r3, #16
 80062b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062ba:	4b24      	ldr	r3, [pc, #144]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062be:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <RCCEx_PLL2_Config+0x160>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	69d2      	ldr	r2, [r2, #28]
 80062c6:	00d2      	lsls	r2, r2, #3
 80062c8:	4920      	ldr	r1, [pc, #128]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062ce:	4b1f      	ldr	r3, [pc, #124]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	4a1e      	ldr	r2, [pc, #120]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062d4:	f043 0310 	orr.w	r3, r3, #16
 80062d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062e0:	4b1a      	ldr	r3, [pc, #104]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	4a19      	ldr	r2, [pc, #100]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062ec:	e00f      	b.n	800630e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d106      	bne.n	8006302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062f4:	4b15      	ldr	r3, [pc, #84]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	4a14      	ldr	r2, [pc, #80]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 80062fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006300:	e005      	b.n	800630e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006302:	4b12      	ldr	r3, [pc, #72]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	4a11      	ldr	r2, [pc, #68]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800630c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800630e:	4b0f      	ldr	r3, [pc, #60]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a0e      	ldr	r2, [pc, #56]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fb fb21 	bl	8001960 <HAL_GetTick>
 800631e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006320:	e008      	b.n	8006334 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006322:	f7fb fb1d 	bl	8001960 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e006      	b.n	8006342 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <RCCEx_PLL2_Config+0x15c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	ffff0007 	.word	0xffff0007

08006354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006362:	4b53      	ldr	r3, [pc, #332]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b03      	cmp	r3, #3
 800636c:	d101      	bne.n	8006372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e099      	b.n	80064a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006372:	4b4f      	ldr	r3, [pc, #316]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a4e      	ldr	r2, [pc, #312]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800637e:	f7fb faef 	bl	8001960 <HAL_GetTick>
 8006382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006384:	e008      	b.n	8006398 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006386:	f7fb faeb 	bl	8001960 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e086      	b.n	80064a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006398:	4b45      	ldr	r3, [pc, #276]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063a4:	4b42      	ldr	r3, [pc, #264]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	051b      	lsls	r3, r3, #20
 80063b2:	493f      	ldr	r1, [pc, #252]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	3b01      	subs	r3, #1
 80063be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	025b      	lsls	r3, r3, #9
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	041b      	lsls	r3, r3, #16
 80063d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	061b      	lsls	r3, r3, #24
 80063e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063e8:	4931      	ldr	r1, [pc, #196]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063ee:	4b30      	ldr	r3, [pc, #192]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	492d      	ldr	r1, [pc, #180]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006400:	4b2b      	ldr	r3, [pc, #172]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	4928      	ldr	r1, [pc, #160]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800640e:	4313      	orrs	r3, r2
 8006410:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006412:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800641c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800641e:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006422:	4b24      	ldr	r3, [pc, #144]	@ (80064b4 <RCCEx_PLL3_Config+0x160>)
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	69d2      	ldr	r2, [r2, #28]
 800642a:	00d2      	lsls	r2, r2, #3
 800642c:	4920      	ldr	r1, [pc, #128]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800642e:	4313      	orrs	r3, r2
 8006430:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006432:	4b1f      	ldr	r3, [pc, #124]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	4a1e      	ldr	r2, [pc, #120]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800643c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006444:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800644a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800644e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006450:	e00f      	b.n	8006472 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d106      	bne.n	8006466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	4a14      	ldr	r2, [pc, #80]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800645e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006462:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006464:	e005      	b.n	8006472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006466:	4b12      	ldr	r3, [pc, #72]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646a:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800646c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006470:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006472:	4b0f      	ldr	r3, [pc, #60]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a0e      	ldr	r2, [pc, #56]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647e:	f7fb fa6f 	bl	8001960 <HAL_GetTick>
 8006482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006484:	e008      	b.n	8006498 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006486:	f7fb fa6b 	bl	8001960 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e006      	b.n	80064a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <RCCEx_PLL3_Config+0x15c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	58024400 	.word	0x58024400
 80064b4:	ffff0007 	.word	0xffff0007

080064b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e01d      	b.n	8006506 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fa ffa6 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 f9a6 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <HAL_TIM_Base_Start_IT+0x50>)
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b06      	cmp	r3, #6
 8006538:	d00b      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0x42>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006540:	d007      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	00010007 	.word	0x00010007

08006564 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10f      	bne.n	80065ac <HAL_TIM_Base_Stop_IT+0x48>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f240 4344 	movw	r3, #1092	@ 0x444
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d107      	bne.n	80065ac <HAL_TIM_Base_Stop_IT+0x48>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d122      	bne.n	8006616 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d11b      	bne.n	8006616 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0202 	mvn.w	r2, #2
 80065e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f905 	bl	800680c <HAL_TIM_IC_CaptureCallback>
 8006602:	e005      	b.n	8006610 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f8f7 	bl	80067f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f908 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b04      	cmp	r3, #4
 8006622:	d122      	bne.n	800666a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d11b      	bne.n	800666a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f06f 0204 	mvn.w	r2, #4
 800663a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8db 	bl	800680c <HAL_TIM_IC_CaptureCallback>
 8006656:	e005      	b.n	8006664 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8cd 	bl	80067f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8de 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b08      	cmp	r3, #8
 8006676:	d122      	bne.n	80066be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b08      	cmp	r3, #8
 8006684:	d11b      	bne.n	80066be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0208 	mvn.w	r2, #8
 800668e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2204      	movs	r2, #4
 8006694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8b1 	bl	800680c <HAL_TIM_IC_CaptureCallback>
 80066aa:	e005      	b.n	80066b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8a3 	bl	80067f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8b4 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d122      	bne.n	8006712 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d11b      	bne.n	8006712 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f06f 0210 	mvn.w	r2, #16
 80066e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2208      	movs	r2, #8
 80066e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f887 	bl	800680c <HAL_TIM_IC_CaptureCallback>
 80066fe:	e005      	b.n	800670c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f879 	bl	80067f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f88a 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d10e      	bne.n	800673e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0201 	mvn.w	r2, #1
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fa fcd3 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	2b80      	cmp	r3, #128	@ 0x80
 800674a:	d10e      	bne.n	800676a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d107      	bne.n	800676a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f913 	bl	8006990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006778:	d10e      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b80      	cmp	r3, #128	@ 0x80
 8006786:	d107      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f906 	bl	80069a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a2:	2b40      	cmp	r3, #64	@ 0x40
 80067a4:	d10e      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b0:	2b40      	cmp	r3, #64	@ 0x40
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f838 	bl	8006834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0220 	mvn.w	r2, #32
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8c6 	bl	800697c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a40      	ldr	r2, [pc, #256]	@ (800695c <TIM_Base_SetConfig+0x114>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a3d      	ldr	r2, [pc, #244]	@ (8006960 <TIM_Base_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3c      	ldr	r2, [pc, #240]	@ (8006964 <TIM_Base_SetConfig+0x11c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3b      	ldr	r2, [pc, #236]	@ (8006968 <TIM_Base_SetConfig+0x120>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3a      	ldr	r2, [pc, #232]	@ (800696c <TIM_Base_SetConfig+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2f      	ldr	r2, [pc, #188]	@ (800695c <TIM_Base_SetConfig+0x114>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a8:	d01b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <TIM_Base_SetConfig+0x118>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d017      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006964 <TIM_Base_SetConfig+0x11c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006968 <TIM_Base_SetConfig+0x120>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a29      	ldr	r2, [pc, #164]	@ (800696c <TIM_Base_SetConfig+0x124>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a28      	ldr	r2, [pc, #160]	@ (8006970 <TIM_Base_SetConfig+0x128>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a27      	ldr	r2, [pc, #156]	@ (8006974 <TIM_Base_SetConfig+0x12c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a26      	ldr	r2, [pc, #152]	@ (8006978 <TIM_Base_SetConfig+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d108      	bne.n	80068f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a10      	ldr	r2, [pc, #64]	@ (800695c <TIM_Base_SetConfig+0x114>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a12      	ldr	r2, [pc, #72]	@ (800696c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a11      	ldr	r2, [pc, #68]	@ (8006970 <TIM_Base_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a10      	ldr	r2, [pc, #64]	@ (8006974 <TIM_Base_SetConfig+0x12c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <TIM_Base_SetConfig+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d103      	bne.n	8006948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	615a      	str	r2, [r3, #20]
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40010400 	.word	0x40010400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e042      	b.n	8006a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fa fd9b 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	@ 0x24
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8c2 	bl	8006b84 <UART_SetConfig>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e022      	b.n	8006a50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 fc28 	bl	8009268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 fcaf 	bl	80093ac <UART_CheckIdleState>
 8006a4e:	4603      	mov	r3, r0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	f040 8083 	bne.w	8006b7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Transmit+0x28>
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e07b      	b.n	8006b7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_UART_Transmit+0x3a>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e074      	b.n	8006b7c <HAL_UART_Transmit+0x124>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2221      	movs	r2, #33	@ 0x21
 8006aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006aaa:	f7fa ff59 	bl	8001960 <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac8:	d108      	bne.n	8006adc <HAL_UART_Transmit+0x84>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e003      	b.n	8006ae4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ae4:	e02c      	b.n	8006b40 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2180      	movs	r1, #128	@ 0x80
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f002 fca3 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e03d      	b.n	8006b7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	3302      	adds	r3, #2
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	e007      	b.n	8006b2e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1cc      	bne.n	8006ae6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	2140      	movs	r1, #64	@ 0x40
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f002 fc70 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00a      	b.n	8006b7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e000      	b.n	8006b7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b88:	b0bc      	sub	sp, #240	@ 0xf0
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  tmpreg |= (uint32_t)huart->FifoMode;
 8006bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	49c9      	ldr	r1, [pc, #804]	@ (8006f04 <UART_SetConfig+0x380>)
 8006bde:	4019      	ands	r1, r3
 8006be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bea:	430b      	orrs	r3, r1
 8006bec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bfe:	68d9      	ldr	r1, [r3, #12]
 8006c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	ea40 0301 	orr.w	r3, r0, r1
 8006c0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4bba      	ldr	r3, [pc, #744]	@ (8006f08 <UART_SetConfig+0x384>)
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d007      	beq.n	8006c32 <UART_SetConfig+0xae>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	49b4      	ldr	r1, [pc, #720]	@ (8006f0c <UART_SetConfig+0x388>)
 8006c3c:	4019      	ands	r1, r3
 8006c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	f023 000f 	bic.w	r0, r3, #15
 8006c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	ea40 0301 	orr.w	r3, r0, r1
 8006c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4ba7      	ldr	r3, [pc, #668]	@ (8006f10 <UART_SetConfig+0x38c>)
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d176      	bne.n	8006d64 <UART_SetConfig+0x1e0>
 8006c76:	4ba7      	ldr	r3, [pc, #668]	@ (8006f14 <UART_SetConfig+0x390>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c7e:	2b28      	cmp	r3, #40	@ 0x28
 8006c80:	d86c      	bhi.n	8006d5c <UART_SetConfig+0x1d8>
 8006c82:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <UART_SetConfig+0x104>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006d2d 	.word	0x08006d2d
 8006c8c:	08006d5d 	.word	0x08006d5d
 8006c90:	08006d5d 	.word	0x08006d5d
 8006c94:	08006d5d 	.word	0x08006d5d
 8006c98:	08006d5d 	.word	0x08006d5d
 8006c9c:	08006d5d 	.word	0x08006d5d
 8006ca0:	08006d5d 	.word	0x08006d5d
 8006ca4:	08006d5d 	.word	0x08006d5d
 8006ca8:	08006d35 	.word	0x08006d35
 8006cac:	08006d5d 	.word	0x08006d5d
 8006cb0:	08006d5d 	.word	0x08006d5d
 8006cb4:	08006d5d 	.word	0x08006d5d
 8006cb8:	08006d5d 	.word	0x08006d5d
 8006cbc:	08006d5d 	.word	0x08006d5d
 8006cc0:	08006d5d 	.word	0x08006d5d
 8006cc4:	08006d5d 	.word	0x08006d5d
 8006cc8:	08006d3d 	.word	0x08006d3d
 8006ccc:	08006d5d 	.word	0x08006d5d
 8006cd0:	08006d5d 	.word	0x08006d5d
 8006cd4:	08006d5d 	.word	0x08006d5d
 8006cd8:	08006d5d 	.word	0x08006d5d
 8006cdc:	08006d5d 	.word	0x08006d5d
 8006ce0:	08006d5d 	.word	0x08006d5d
 8006ce4:	08006d5d 	.word	0x08006d5d
 8006ce8:	08006d45 	.word	0x08006d45
 8006cec:	08006d5d 	.word	0x08006d5d
 8006cf0:	08006d5d 	.word	0x08006d5d
 8006cf4:	08006d5d 	.word	0x08006d5d
 8006cf8:	08006d5d 	.word	0x08006d5d
 8006cfc:	08006d5d 	.word	0x08006d5d
 8006d00:	08006d5d 	.word	0x08006d5d
 8006d04:	08006d5d 	.word	0x08006d5d
 8006d08:	08006d4d 	.word	0x08006d4d
 8006d0c:	08006d5d 	.word	0x08006d5d
 8006d10:	08006d5d 	.word	0x08006d5d
 8006d14:	08006d5d 	.word	0x08006d5d
 8006d18:	08006d5d 	.word	0x08006d5d
 8006d1c:	08006d5d 	.word	0x08006d5d
 8006d20:	08006d5d 	.word	0x08006d5d
 8006d24:	08006d5d 	.word	0x08006d5d
 8006d28:	08006d55 	.word	0x08006d55
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d32:	e232      	b.n	800719a <UART_SetConfig+0x616>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d3a:	e22e      	b.n	800719a <UART_SetConfig+0x616>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d42:	e22a      	b.n	800719a <UART_SetConfig+0x616>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d4a:	e226      	b.n	800719a <UART_SetConfig+0x616>
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d52:	e222      	b.n	800719a <UART_SetConfig+0x616>
 8006d54:	2340      	movs	r3, #64	@ 0x40
 8006d56:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d5a:	e21e      	b.n	800719a <UART_SetConfig+0x616>
 8006d5c:	2380      	movs	r3, #128	@ 0x80
 8006d5e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006d62:	e21a      	b.n	800719a <UART_SetConfig+0x616>
 8006d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8006f18 <UART_SetConfig+0x394>)
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d131      	bne.n	8006dd4 <UART_SetConfig+0x250>
 8006d70:	4b68      	ldr	r3, [pc, #416]	@ (8006f14 <UART_SetConfig+0x390>)
 8006d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d827      	bhi.n	8006dcc <UART_SetConfig+0x248>
 8006d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <UART_SetConfig+0x200>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006d9d 	.word	0x08006d9d
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	08006dad 	.word	0x08006dad
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006da2:	e1fa      	b.n	800719a <UART_SetConfig+0x616>
 8006da4:	2304      	movs	r3, #4
 8006da6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006daa:	e1f6      	b.n	800719a <UART_SetConfig+0x616>
 8006dac:	2308      	movs	r3, #8
 8006dae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006db2:	e1f2      	b.n	800719a <UART_SetConfig+0x616>
 8006db4:	2310      	movs	r3, #16
 8006db6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006dba:	e1ee      	b.n	800719a <UART_SetConfig+0x616>
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006dc2:	e1ea      	b.n	800719a <UART_SetConfig+0x616>
 8006dc4:	2340      	movs	r3, #64	@ 0x40
 8006dc6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006dca:	e1e6      	b.n	800719a <UART_SetConfig+0x616>
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006dd2:	e1e2      	b.n	800719a <UART_SetConfig+0x616>
 8006dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4b50      	ldr	r3, [pc, #320]	@ (8006f1c <UART_SetConfig+0x398>)
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d131      	bne.n	8006e44 <UART_SetConfig+0x2c0>
 8006de0:	4b4c      	ldr	r3, [pc, #304]	@ (8006f14 <UART_SetConfig+0x390>)
 8006de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	2b05      	cmp	r3, #5
 8006dea:	d827      	bhi.n	8006e3c <UART_SetConfig+0x2b8>
 8006dec:	a201      	add	r2, pc, #4	@ (adr r2, 8006df4 <UART_SetConfig+0x270>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e12:	e1c2      	b.n	800719a <UART_SetConfig+0x616>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e1a:	e1be      	b.n	800719a <UART_SetConfig+0x616>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e22:	e1ba      	b.n	800719a <UART_SetConfig+0x616>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e2a:	e1b6      	b.n	800719a <UART_SetConfig+0x616>
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e32:	e1b2      	b.n	800719a <UART_SetConfig+0x616>
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e3a:	e1ae      	b.n	800719a <UART_SetConfig+0x616>
 8006e3c:	2380      	movs	r3, #128	@ 0x80
 8006e3e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e42:	e1aa      	b.n	800719a <UART_SetConfig+0x616>
 8006e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b35      	ldr	r3, [pc, #212]	@ (8006f20 <UART_SetConfig+0x39c>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d131      	bne.n	8006eb4 <UART_SetConfig+0x330>
 8006e50:	4b30      	ldr	r3, [pc, #192]	@ (8006f14 <UART_SetConfig+0x390>)
 8006e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d827      	bhi.n	8006eac <UART_SetConfig+0x328>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <UART_SetConfig+0x2e0>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e82:	e18a      	b.n	800719a <UART_SetConfig+0x616>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e8a:	e186      	b.n	800719a <UART_SetConfig+0x616>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e92:	e182      	b.n	800719a <UART_SetConfig+0x616>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006e9a:	e17e      	b.n	800719a <UART_SetConfig+0x616>
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006ea2:	e17a      	b.n	800719a <UART_SetConfig+0x616>
 8006ea4:	2340      	movs	r3, #64	@ 0x40
 8006ea6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006eaa:	e176      	b.n	800719a <UART_SetConfig+0x616>
 8006eac:	2380      	movs	r3, #128	@ 0x80
 8006eae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006eb2:	e172      	b.n	800719a <UART_SetConfig+0x616>
 8006eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <UART_SetConfig+0x3a0>)
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d143      	bne.n	8006f48 <UART_SetConfig+0x3c4>
 8006ec0:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <UART_SetConfig+0x390>)
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	d839      	bhi.n	8006f40 <UART_SetConfig+0x3bc>
 8006ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <UART_SetConfig+0x350>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006eed 	.word	0x08006eed
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006efd 	.word	0x08006efd
 8006ee0:	08006f29 	.word	0x08006f29
 8006ee4:	08006f31 	.word	0x08006f31
 8006ee8:	08006f39 	.word	0x08006f39
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006ef2:	e152      	b.n	800719a <UART_SetConfig+0x616>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006efa:	e14e      	b.n	800719a <UART_SetConfig+0x616>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006f02:	e14a      	b.n	800719a <UART_SetConfig+0x616>
 8006f04:	cfff69f3 	.word	0xcfff69f3
 8006f08:	58000c00 	.word	0x58000c00
 8006f0c:	11fff4ff 	.word	0x11fff4ff
 8006f10:	40011000 	.word	0x40011000
 8006f14:	58024400 	.word	0x58024400
 8006f18:	40004400 	.word	0x40004400
 8006f1c:	40004800 	.word	0x40004800
 8006f20:	40004c00 	.word	0x40004c00
 8006f24:	40005000 	.word	0x40005000
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006f2e:	e134      	b.n	800719a <UART_SetConfig+0x616>
 8006f30:	2320      	movs	r3, #32
 8006f32:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006f36:	e130      	b.n	800719a <UART_SetConfig+0x616>
 8006f38:	2340      	movs	r3, #64	@ 0x40
 8006f3a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006f3e:	e12c      	b.n	800719a <UART_SetConfig+0x616>
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8006f46:	e128      	b.n	800719a <UART_SetConfig+0x616>
 8006f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4bbe      	ldr	r3, [pc, #760]	@ (8007248 <UART_SetConfig+0x6c4>)
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d177      	bne.n	8007044 <UART_SetConfig+0x4c0>
 8006f54:	4bbd      	ldr	r3, [pc, #756]	@ (800724c <UART_SetConfig+0x6c8>)
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f5c:	2b28      	cmp	r3, #40	@ 0x28
 8006f5e:	d86d      	bhi.n	800703c <UART_SetConfig+0x4b8>
 8006f60:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <UART_SetConfig+0x3e4>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	0800700d 	.word	0x0800700d
 8006f6c:	0800703d 	.word	0x0800703d
 8006f70:	0800703d 	.word	0x0800703d
 8006f74:	0800703d 	.word	0x0800703d
 8006f78:	0800703d 	.word	0x0800703d
 8006f7c:	0800703d 	.word	0x0800703d
 8006f80:	0800703d 	.word	0x0800703d
 8006f84:	0800703d 	.word	0x0800703d
 8006f88:	08007015 	.word	0x08007015
 8006f8c:	0800703d 	.word	0x0800703d
 8006f90:	0800703d 	.word	0x0800703d
 8006f94:	0800703d 	.word	0x0800703d
 8006f98:	0800703d 	.word	0x0800703d
 8006f9c:	0800703d 	.word	0x0800703d
 8006fa0:	0800703d 	.word	0x0800703d
 8006fa4:	0800703d 	.word	0x0800703d
 8006fa8:	0800701d 	.word	0x0800701d
 8006fac:	0800703d 	.word	0x0800703d
 8006fb0:	0800703d 	.word	0x0800703d
 8006fb4:	0800703d 	.word	0x0800703d
 8006fb8:	0800703d 	.word	0x0800703d
 8006fbc:	0800703d 	.word	0x0800703d
 8006fc0:	0800703d 	.word	0x0800703d
 8006fc4:	0800703d 	.word	0x0800703d
 8006fc8:	08007025 	.word	0x08007025
 8006fcc:	0800703d 	.word	0x0800703d
 8006fd0:	0800703d 	.word	0x0800703d
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	0800703d 	.word	0x0800703d
 8006fdc:	0800703d 	.word	0x0800703d
 8006fe0:	0800703d 	.word	0x0800703d
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	0800702d 	.word	0x0800702d
 8006fec:	0800703d 	.word	0x0800703d
 8006ff0:	0800703d 	.word	0x0800703d
 8006ff4:	0800703d 	.word	0x0800703d
 8006ff8:	0800703d 	.word	0x0800703d
 8006ffc:	0800703d 	.word	0x0800703d
 8007000:	0800703d 	.word	0x0800703d
 8007004:	0800703d 	.word	0x0800703d
 8007008:	08007035 	.word	0x08007035
 800700c:	2301      	movs	r3, #1
 800700e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007012:	e0c2      	b.n	800719a <UART_SetConfig+0x616>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800701a:	e0be      	b.n	800719a <UART_SetConfig+0x616>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007022:	e0ba      	b.n	800719a <UART_SetConfig+0x616>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800702a:	e0b6      	b.n	800719a <UART_SetConfig+0x616>
 800702c:	2320      	movs	r3, #32
 800702e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007032:	e0b2      	b.n	800719a <UART_SetConfig+0x616>
 8007034:	2340      	movs	r3, #64	@ 0x40
 8007036:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800703a:	e0ae      	b.n	800719a <UART_SetConfig+0x616>
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007042:	e0aa      	b.n	800719a <UART_SetConfig+0x616>
 8007044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b81      	ldr	r3, [pc, #516]	@ (8007250 <UART_SetConfig+0x6cc>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d131      	bne.n	80070b4 <UART_SetConfig+0x530>
 8007050:	4b7e      	ldr	r3, [pc, #504]	@ (800724c <UART_SetConfig+0x6c8>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	2b05      	cmp	r3, #5
 800705a:	d827      	bhi.n	80070ac <UART_SetConfig+0x528>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <UART_SetConfig+0x4e0>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	0800707d 	.word	0x0800707d
 8007068:	08007085 	.word	0x08007085
 800706c:	0800708d 	.word	0x0800708d
 8007070:	08007095 	.word	0x08007095
 8007074:	0800709d 	.word	0x0800709d
 8007078:	080070a5 	.word	0x080070a5
 800707c:	2300      	movs	r3, #0
 800707e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007082:	e08a      	b.n	800719a <UART_SetConfig+0x616>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800708a:	e086      	b.n	800719a <UART_SetConfig+0x616>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007092:	e082      	b.n	800719a <UART_SetConfig+0x616>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800709a:	e07e      	b.n	800719a <UART_SetConfig+0x616>
 800709c:	2320      	movs	r3, #32
 800709e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80070a2:	e07a      	b.n	800719a <UART_SetConfig+0x616>
 80070a4:	2340      	movs	r3, #64	@ 0x40
 80070a6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80070aa:	e076      	b.n	800719a <UART_SetConfig+0x616>
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80070b2:	e072      	b.n	800719a <UART_SetConfig+0x616>
 80070b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b66      	ldr	r3, [pc, #408]	@ (8007254 <UART_SetConfig+0x6d0>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d131      	bne.n	8007124 <UART_SetConfig+0x5a0>
 80070c0:	4b62      	ldr	r3, [pc, #392]	@ (800724c <UART_SetConfig+0x6c8>)
 80070c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	d827      	bhi.n	800711c <UART_SetConfig+0x598>
 80070cc:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <UART_SetConfig+0x550>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070ed 	.word	0x080070ed
 80070d8:	080070f5 	.word	0x080070f5
 80070dc:	080070fd 	.word	0x080070fd
 80070e0:	08007105 	.word	0x08007105
 80070e4:	0800710d 	.word	0x0800710d
 80070e8:	08007115 	.word	0x08007115
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80070f2:	e052      	b.n	800719a <UART_SetConfig+0x616>
 80070f4:	2304      	movs	r3, #4
 80070f6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80070fa:	e04e      	b.n	800719a <UART_SetConfig+0x616>
 80070fc:	2308      	movs	r3, #8
 80070fe:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007102:	e04a      	b.n	800719a <UART_SetConfig+0x616>
 8007104:	2310      	movs	r3, #16
 8007106:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800710a:	e046      	b.n	800719a <UART_SetConfig+0x616>
 800710c:	2320      	movs	r3, #32
 800710e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007112:	e042      	b.n	800719a <UART_SetConfig+0x616>
 8007114:	2340      	movs	r3, #64	@ 0x40
 8007116:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800711a:	e03e      	b.n	800719a <UART_SetConfig+0x616>
 800711c:	2380      	movs	r3, #128	@ 0x80
 800711e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007122:	e03a      	b.n	800719a <UART_SetConfig+0x616>
 8007124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b4b      	ldr	r3, [pc, #300]	@ (8007258 <UART_SetConfig+0x6d4>)
 800712c:	429a      	cmp	r2, r3
 800712e:	d131      	bne.n	8007194 <UART_SetConfig+0x610>
 8007130:	4b46      	ldr	r3, [pc, #280]	@ (800724c <UART_SetConfig+0x6c8>)
 8007132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	2b05      	cmp	r3, #5
 800713a:	d827      	bhi.n	800718c <UART_SetConfig+0x608>
 800713c:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x5c0>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	0800715d 	.word	0x0800715d
 8007148:	08007165 	.word	0x08007165
 800714c:	0800716d 	.word	0x0800716d
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	2302      	movs	r3, #2
 800715e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007162:	e01a      	b.n	800719a <UART_SetConfig+0x616>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800716a:	e016      	b.n	800719a <UART_SetConfig+0x616>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007172:	e012      	b.n	800719a <UART_SetConfig+0x616>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800717a:	e00e      	b.n	800719a <UART_SetConfig+0x616>
 800717c:	2320      	movs	r3, #32
 800717e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007182:	e00a      	b.n	800719a <UART_SetConfig+0x616>
 8007184:	2340      	movs	r3, #64	@ 0x40
 8007186:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800718a:	e006      	b.n	800719a <UART_SetConfig+0x616>
 800718c:	2380      	movs	r3, #128	@ 0x80
 800718e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8007192:	e002      	b.n	800719a <UART_SetConfig+0x616>
 8007194:	2380      	movs	r3, #128	@ 0x80
 8007196:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800719a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007258 <UART_SetConfig+0x6d4>)
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f041 808a 	bne.w	80082bc <UART_SetConfig+0x1738>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071a8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	dc47      	bgt.n	8007240 <UART_SetConfig+0x6bc>
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f2c0 82fa 	blt.w	80077aa <UART_SetConfig+0xc26>
 80071b6:	3b02      	subs	r3, #2
 80071b8:	2b1e      	cmp	r3, #30
 80071ba:	f200 82f6 	bhi.w	80077aa <UART_SetConfig+0xc26>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <UART_SetConfig+0x640>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	0800725d 	.word	0x0800725d
 80071c8:	080077ab 	.word	0x080077ab
 80071cc:	08007319 	.word	0x08007319
 80071d0:	080077ab 	.word	0x080077ab
 80071d4:	080077ab 	.word	0x080077ab
 80071d8:	080077ab 	.word	0x080077ab
 80071dc:	080073dd 	.word	0x080073dd
 80071e0:	080077ab 	.word	0x080077ab
 80071e4:	080077ab 	.word	0x080077ab
 80071e8:	080077ab 	.word	0x080077ab
 80071ec:	080077ab 	.word	0x080077ab
 80071f0:	080077ab 	.word	0x080077ab
 80071f4:	080077ab 	.word	0x080077ab
 80071f8:	080077ab 	.word	0x080077ab
 80071fc:	080074a1 	.word	0x080074a1
 8007200:	080077ab 	.word	0x080077ab
 8007204:	080077ab 	.word	0x080077ab
 8007208:	080077ab 	.word	0x080077ab
 800720c:	080077ab 	.word	0x080077ab
 8007210:	080077ab 	.word	0x080077ab
 8007214:	080077ab 	.word	0x080077ab
 8007218:	080077ab 	.word	0x080077ab
 800721c:	080077ab 	.word	0x080077ab
 8007220:	080077ab 	.word	0x080077ab
 8007224:	080077ab 	.word	0x080077ab
 8007228:	080077ab 	.word	0x080077ab
 800722c:	080077ab 	.word	0x080077ab
 8007230:	080077ab 	.word	0x080077ab
 8007234:	080077ab 	.word	0x080077ab
 8007238:	080077ab 	.word	0x080077ab
 800723c:	0800762b 	.word	0x0800762b
 8007240:	2b40      	cmp	r3, #64	@ 0x40
 8007242:	f000 8255 	beq.w	80076f0 <UART_SetConfig+0xb6c>
 8007246:	e2b0      	b.n	80077aa <UART_SetConfig+0xc26>
 8007248:	40011400 	.word	0x40011400
 800724c:	58024400 	.word	0x58024400
 8007250:	40007800 	.word	0x40007800
 8007254:	40007c00 	.word	0x40007c00
 8007258:	58000c00 	.word	0x58000c00
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800725c:	f7fe fd0a 	bl	8005c74 <HAL_RCCEx_GetD3PCLK1Freq>
 8007260:	4602      	mov	r2, r0
 8007262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d04f      	beq.n	800730c <UART_SetConfig+0x788>
 800726c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	2b01      	cmp	r3, #1
 8007274:	d048      	beq.n	8007308 <UART_SetConfig+0x784>
 8007276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	2b02      	cmp	r3, #2
 800727e:	d041      	beq.n	8007304 <UART_SetConfig+0x780>
 8007280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2b03      	cmp	r3, #3
 8007288:	d03a      	beq.n	8007300 <UART_SetConfig+0x77c>
 800728a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	2b04      	cmp	r3, #4
 8007292:	d033      	beq.n	80072fc <UART_SetConfig+0x778>
 8007294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	2b05      	cmp	r3, #5
 800729c:	d02c      	beq.n	80072f8 <UART_SetConfig+0x774>
 800729e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d025      	beq.n	80072f4 <UART_SetConfig+0x770>
 80072a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ae:	2b07      	cmp	r3, #7
 80072b0:	d01e      	beq.n	80072f0 <UART_SetConfig+0x76c>
 80072b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d017      	beq.n	80072ec <UART_SetConfig+0x768>
 80072bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	2b09      	cmp	r3, #9
 80072c4:	d010      	beq.n	80072e8 <UART_SetConfig+0x764>
 80072c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	2b0a      	cmp	r3, #10
 80072ce:	d009      	beq.n	80072e4 <UART_SetConfig+0x760>
 80072d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d6:	2b0b      	cmp	r3, #11
 80072d8:	d102      	bne.n	80072e0 <UART_SetConfig+0x75c>
 80072da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072de:	e016      	b.n	800730e <UART_SetConfig+0x78a>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e014      	b.n	800730e <UART_SetConfig+0x78a>
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	e012      	b.n	800730e <UART_SetConfig+0x78a>
 80072e8:	2340      	movs	r3, #64	@ 0x40
 80072ea:	e010      	b.n	800730e <UART_SetConfig+0x78a>
 80072ec:	2320      	movs	r3, #32
 80072ee:	e00e      	b.n	800730e <UART_SetConfig+0x78a>
 80072f0:	2310      	movs	r3, #16
 80072f2:	e00c      	b.n	800730e <UART_SetConfig+0x78a>
 80072f4:	230c      	movs	r3, #12
 80072f6:	e00a      	b.n	800730e <UART_SetConfig+0x78a>
 80072f8:	230a      	movs	r3, #10
 80072fa:	e008      	b.n	800730e <UART_SetConfig+0x78a>
 80072fc:	2308      	movs	r3, #8
 80072fe:	e006      	b.n	800730e <UART_SetConfig+0x78a>
 8007300:	2306      	movs	r3, #6
 8007302:	e004      	b.n	800730e <UART_SetConfig+0x78a>
 8007304:	2304      	movs	r3, #4
 8007306:	e002      	b.n	800730e <UART_SetConfig+0x78a>
 8007308:	2302      	movs	r3, #2
 800730a:	e000      	b.n	800730e <UART_SetConfig+0x78a>
 800730c:	2301      	movs	r3, #1
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 8007316:	e24c      	b.n	80077b2 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007318:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fcbf 	bl	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007322:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8007326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d04f      	beq.n	80073d0 <UART_SetConfig+0x84c>
 8007330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	2b01      	cmp	r3, #1
 8007338:	d048      	beq.n	80073cc <UART_SetConfig+0x848>
 800733a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800733e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007340:	2b02      	cmp	r3, #2
 8007342:	d041      	beq.n	80073c8 <UART_SetConfig+0x844>
 8007344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734a:	2b03      	cmp	r3, #3
 800734c:	d03a      	beq.n	80073c4 <UART_SetConfig+0x840>
 800734e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	2b04      	cmp	r3, #4
 8007356:	d033      	beq.n	80073c0 <UART_SetConfig+0x83c>
 8007358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	2b05      	cmp	r3, #5
 8007360:	d02c      	beq.n	80073bc <UART_SetConfig+0x838>
 8007362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	2b06      	cmp	r3, #6
 800736a:	d025      	beq.n	80073b8 <UART_SetConfig+0x834>
 800736c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007372:	2b07      	cmp	r3, #7
 8007374:	d01e      	beq.n	80073b4 <UART_SetConfig+0x830>
 8007376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	2b08      	cmp	r3, #8
 800737e:	d017      	beq.n	80073b0 <UART_SetConfig+0x82c>
 8007380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	2b09      	cmp	r3, #9
 8007388:	d010      	beq.n	80073ac <UART_SetConfig+0x828>
 800738a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	2b0a      	cmp	r3, #10
 8007392:	d009      	beq.n	80073a8 <UART_SetConfig+0x824>
 8007394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	2b0b      	cmp	r3, #11
 800739c:	d102      	bne.n	80073a4 <UART_SetConfig+0x820>
 800739e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073a2:	e016      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e014      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073a8:	2380      	movs	r3, #128	@ 0x80
 80073aa:	e012      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073ac:	2340      	movs	r3, #64	@ 0x40
 80073ae:	e010      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073b0:	2320      	movs	r3, #32
 80073b2:	e00e      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073b4:	2310      	movs	r3, #16
 80073b6:	e00c      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073b8:	230c      	movs	r3, #12
 80073ba:	e00a      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073bc:	230a      	movs	r3, #10
 80073be:	e008      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073c0:	2308      	movs	r3, #8
 80073c2:	e006      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073c4:	2306      	movs	r3, #6
 80073c6:	e004      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073c8:	2304      	movs	r3, #4
 80073ca:	e002      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e000      	b.n	80073d2 <UART_SetConfig+0x84e>
 80073d0:	2301      	movs	r3, #1
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 80073da:	e1ea      	b.n	80077b2 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073dc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe fdb1 	bl	8005f48 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073e6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d04f      	beq.n	8007494 <UART_SetConfig+0x910>
 80073f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d048      	beq.n	8007490 <UART_SetConfig+0x90c>
 80073fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	2b02      	cmp	r3, #2
 8007406:	d041      	beq.n	800748c <UART_SetConfig+0x908>
 8007408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	2b03      	cmp	r3, #3
 8007410:	d03a      	beq.n	8007488 <UART_SetConfig+0x904>
 8007412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	2b04      	cmp	r3, #4
 800741a:	d033      	beq.n	8007484 <UART_SetConfig+0x900>
 800741c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	2b05      	cmp	r3, #5
 8007424:	d02c      	beq.n	8007480 <UART_SetConfig+0x8fc>
 8007426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	2b06      	cmp	r3, #6
 800742e:	d025      	beq.n	800747c <UART_SetConfig+0x8f8>
 8007430:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	2b07      	cmp	r3, #7
 8007438:	d01e      	beq.n	8007478 <UART_SetConfig+0x8f4>
 800743a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	2b08      	cmp	r3, #8
 8007442:	d017      	beq.n	8007474 <UART_SetConfig+0x8f0>
 8007444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	2b09      	cmp	r3, #9
 800744c:	d010      	beq.n	8007470 <UART_SetConfig+0x8ec>
 800744e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	2b0a      	cmp	r3, #10
 8007456:	d009      	beq.n	800746c <UART_SetConfig+0x8e8>
 8007458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800745c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745e:	2b0b      	cmp	r3, #11
 8007460:	d102      	bne.n	8007468 <UART_SetConfig+0x8e4>
 8007462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007466:	e016      	b.n	8007496 <UART_SetConfig+0x912>
 8007468:	2301      	movs	r3, #1
 800746a:	e014      	b.n	8007496 <UART_SetConfig+0x912>
 800746c:	2380      	movs	r3, #128	@ 0x80
 800746e:	e012      	b.n	8007496 <UART_SetConfig+0x912>
 8007470:	2340      	movs	r3, #64	@ 0x40
 8007472:	e010      	b.n	8007496 <UART_SetConfig+0x912>
 8007474:	2320      	movs	r3, #32
 8007476:	e00e      	b.n	8007496 <UART_SetConfig+0x912>
 8007478:	2310      	movs	r3, #16
 800747a:	e00c      	b.n	8007496 <UART_SetConfig+0x912>
 800747c:	230c      	movs	r3, #12
 800747e:	e00a      	b.n	8007496 <UART_SetConfig+0x912>
 8007480:	230a      	movs	r3, #10
 8007482:	e008      	b.n	8007496 <UART_SetConfig+0x912>
 8007484:	2308      	movs	r3, #8
 8007486:	e006      	b.n	8007496 <UART_SetConfig+0x912>
 8007488:	2306      	movs	r3, #6
 800748a:	e004      	b.n	8007496 <UART_SetConfig+0x912>
 800748c:	2304      	movs	r3, #4
 800748e:	e002      	b.n	8007496 <UART_SetConfig+0x912>
 8007490:	2302      	movs	r3, #2
 8007492:	e000      	b.n	8007496 <UART_SetConfig+0x912>
 8007494:	2301      	movs	r3, #1
 8007496:	fbb2 f3f3 	udiv	r3, r2, r3
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 800749e:	e188      	b.n	80077b2 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a0:	4b90      	ldr	r3, [pc, #576]	@ (80076e4 <UART_SetConfig+0xb60>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d062      	beq.n	8007572 <UART_SetConfig+0x9ee>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074ac:	4b8d      	ldr	r3, [pc, #564]	@ (80076e4 <UART_SetConfig+0xb60>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f003 0203 	and.w	r2, r3, #3
 80074b6:	4b8c      	ldr	r3, [pc, #560]	@ (80076e8 <UART_SetConfig+0xb64>)
 80074b8:	fa23 f202 	lsr.w	r2, r3, r2
 80074bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d04f      	beq.n	8007566 <UART_SetConfig+0x9e2>
 80074c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d048      	beq.n	8007562 <UART_SetConfig+0x9de>
 80074d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d041      	beq.n	800755e <UART_SetConfig+0x9da>
 80074da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d03a      	beq.n	800755a <UART_SetConfig+0x9d6>
 80074e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d033      	beq.n	8007556 <UART_SetConfig+0x9d2>
 80074ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d02c      	beq.n	8007552 <UART_SetConfig+0x9ce>
 80074f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fe:	2b06      	cmp	r3, #6
 8007500:	d025      	beq.n	800754e <UART_SetConfig+0x9ca>
 8007502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	2b07      	cmp	r3, #7
 800750a:	d01e      	beq.n	800754a <UART_SetConfig+0x9c6>
 800750c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007512:	2b08      	cmp	r3, #8
 8007514:	d017      	beq.n	8007546 <UART_SetConfig+0x9c2>
 8007516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	2b09      	cmp	r3, #9
 800751e:	d010      	beq.n	8007542 <UART_SetConfig+0x9be>
 8007520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	2b0a      	cmp	r3, #10
 8007528:	d009      	beq.n	800753e <UART_SetConfig+0x9ba>
 800752a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	2b0b      	cmp	r3, #11
 8007532:	d102      	bne.n	800753a <UART_SetConfig+0x9b6>
 8007534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007538:	e016      	b.n	8007568 <UART_SetConfig+0x9e4>
 800753a:	2301      	movs	r3, #1
 800753c:	e014      	b.n	8007568 <UART_SetConfig+0x9e4>
 800753e:	2380      	movs	r3, #128	@ 0x80
 8007540:	e012      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007542:	2340      	movs	r3, #64	@ 0x40
 8007544:	e010      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007546:	2320      	movs	r3, #32
 8007548:	e00e      	b.n	8007568 <UART_SetConfig+0x9e4>
 800754a:	2310      	movs	r3, #16
 800754c:	e00c      	b.n	8007568 <UART_SetConfig+0x9e4>
 800754e:	230c      	movs	r3, #12
 8007550:	e00a      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007552:	230a      	movs	r3, #10
 8007554:	e008      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007556:	2308      	movs	r3, #8
 8007558:	e006      	b.n	8007568 <UART_SetConfig+0x9e4>
 800755a:	2306      	movs	r3, #6
 800755c:	e004      	b.n	8007568 <UART_SetConfig+0x9e4>
 800755e:	2304      	movs	r3, #4
 8007560:	e002      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007562:	2302      	movs	r3, #2
 8007564:	e000      	b.n	8007568 <UART_SetConfig+0x9e4>
 8007566:	2301      	movs	r3, #1
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007570:	e11f      	b.n	80077b2 <UART_SetConfig+0xc2e>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d04f      	beq.n	800761c <UART_SetConfig+0xa98>
 800757c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	2b01      	cmp	r3, #1
 8007584:	d048      	beq.n	8007618 <UART_SetConfig+0xa94>
 8007586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800758a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758c:	2b02      	cmp	r3, #2
 800758e:	d041      	beq.n	8007614 <UART_SetConfig+0xa90>
 8007590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	2b03      	cmp	r3, #3
 8007598:	d03a      	beq.n	8007610 <UART_SetConfig+0xa8c>
 800759a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d033      	beq.n	800760c <UART_SetConfig+0xa88>
 80075a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d02c      	beq.n	8007608 <UART_SetConfig+0xa84>
 80075ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	d025      	beq.n	8007604 <UART_SetConfig+0xa80>
 80075b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	2b07      	cmp	r3, #7
 80075c0:	d01e      	beq.n	8007600 <UART_SetConfig+0xa7c>
 80075c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d017      	beq.n	80075fc <UART_SetConfig+0xa78>
 80075cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d2:	2b09      	cmp	r3, #9
 80075d4:	d010      	beq.n	80075f8 <UART_SetConfig+0xa74>
 80075d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075dc:	2b0a      	cmp	r3, #10
 80075de:	d009      	beq.n	80075f4 <UART_SetConfig+0xa70>
 80075e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	2b0b      	cmp	r3, #11
 80075e8:	d102      	bne.n	80075f0 <UART_SetConfig+0xa6c>
 80075ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075ee:	e016      	b.n	800761e <UART_SetConfig+0xa9a>
 80075f0:	2201      	movs	r2, #1
 80075f2:	e014      	b.n	800761e <UART_SetConfig+0xa9a>
 80075f4:	2280      	movs	r2, #128	@ 0x80
 80075f6:	e012      	b.n	800761e <UART_SetConfig+0xa9a>
 80075f8:	2240      	movs	r2, #64	@ 0x40
 80075fa:	e010      	b.n	800761e <UART_SetConfig+0xa9a>
 80075fc:	2220      	movs	r2, #32
 80075fe:	e00e      	b.n	800761e <UART_SetConfig+0xa9a>
 8007600:	2210      	movs	r2, #16
 8007602:	e00c      	b.n	800761e <UART_SetConfig+0xa9a>
 8007604:	220c      	movs	r2, #12
 8007606:	e00a      	b.n	800761e <UART_SetConfig+0xa9a>
 8007608:	220a      	movs	r2, #10
 800760a:	e008      	b.n	800761e <UART_SetConfig+0xa9a>
 800760c:	2208      	movs	r2, #8
 800760e:	e006      	b.n	800761e <UART_SetConfig+0xa9a>
 8007610:	2206      	movs	r2, #6
 8007612:	e004      	b.n	800761e <UART_SetConfig+0xa9a>
 8007614:	2204      	movs	r2, #4
 8007616:	e002      	b.n	800761e <UART_SetConfig+0xa9a>
 8007618:	2202      	movs	r2, #2
 800761a:	e000      	b.n	800761e <UART_SetConfig+0xa9a>
 800761c:	2201      	movs	r2, #1
 800761e:	4b32      	ldr	r3, [pc, #200]	@ (80076e8 <UART_SetConfig+0xb64>)
 8007620:	fbb3 f3f2 	udiv	r3, r3, r2
 8007624:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 8007628:	e0c3      	b.n	80077b2 <UART_SetConfig+0xc2e>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800762a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d04f      	beq.n	80076d4 <UART_SetConfig+0xb50>
 8007634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	2b01      	cmp	r3, #1
 800763c:	d048      	beq.n	80076d0 <UART_SetConfig+0xb4c>
 800763e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	2b02      	cmp	r3, #2
 8007646:	d041      	beq.n	80076cc <UART_SetConfig+0xb48>
 8007648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	2b03      	cmp	r3, #3
 8007650:	d03a      	beq.n	80076c8 <UART_SetConfig+0xb44>
 8007652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	2b04      	cmp	r3, #4
 800765a:	d033      	beq.n	80076c4 <UART_SetConfig+0xb40>
 800765c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007662:	2b05      	cmp	r3, #5
 8007664:	d02c      	beq.n	80076c0 <UART_SetConfig+0xb3c>
 8007666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800766a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766c:	2b06      	cmp	r3, #6
 800766e:	d025      	beq.n	80076bc <UART_SetConfig+0xb38>
 8007670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	2b07      	cmp	r3, #7
 8007678:	d01e      	beq.n	80076b8 <UART_SetConfig+0xb34>
 800767a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007680:	2b08      	cmp	r3, #8
 8007682:	d017      	beq.n	80076b4 <UART_SetConfig+0xb30>
 8007684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	2b09      	cmp	r3, #9
 800768c:	d010      	beq.n	80076b0 <UART_SetConfig+0xb2c>
 800768e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	2b0a      	cmp	r3, #10
 8007696:	d009      	beq.n	80076ac <UART_SetConfig+0xb28>
 8007698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	2b0b      	cmp	r3, #11
 80076a0:	d102      	bne.n	80076a8 <UART_SetConfig+0xb24>
 80076a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076a6:	e016      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076a8:	2201      	movs	r2, #1
 80076aa:	e014      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076ac:	2280      	movs	r2, #128	@ 0x80
 80076ae:	e012      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076b0:	2240      	movs	r2, #64	@ 0x40
 80076b2:	e010      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076b4:	2220      	movs	r2, #32
 80076b6:	e00e      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076b8:	2210      	movs	r2, #16
 80076ba:	e00c      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076bc:	220c      	movs	r2, #12
 80076be:	e00a      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076c0:	220a      	movs	r2, #10
 80076c2:	e008      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076c4:	2208      	movs	r2, #8
 80076c6:	e006      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076c8:	2206      	movs	r2, #6
 80076ca:	e004      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076cc:	2204      	movs	r2, #4
 80076ce:	e002      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076d0:	2202      	movs	r2, #2
 80076d2:	e000      	b.n	80076d6 <UART_SetConfig+0xb52>
 80076d4:	2201      	movs	r2, #1
 80076d6:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <UART_SetConfig+0xb68>)
 80076d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 80076e0:	e067      	b.n	80077b2 <UART_SetConfig+0xc2e>
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d04f      	beq.n	800779a <UART_SetConfig+0xc16>
 80076fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	2b01      	cmp	r3, #1
 8007702:	d048      	beq.n	8007796 <UART_SetConfig+0xc12>
 8007704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	2b02      	cmp	r3, #2
 800770c:	d041      	beq.n	8007792 <UART_SetConfig+0xc0e>
 800770e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	2b03      	cmp	r3, #3
 8007716:	d03a      	beq.n	800778e <UART_SetConfig+0xc0a>
 8007718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	2b04      	cmp	r3, #4
 8007720:	d033      	beq.n	800778a <UART_SetConfig+0xc06>
 8007722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007728:	2b05      	cmp	r3, #5
 800772a:	d02c      	beq.n	8007786 <UART_SetConfig+0xc02>
 800772c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	2b06      	cmp	r3, #6
 8007734:	d025      	beq.n	8007782 <UART_SetConfig+0xbfe>
 8007736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	2b07      	cmp	r3, #7
 800773e:	d01e      	beq.n	800777e <UART_SetConfig+0xbfa>
 8007740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	2b08      	cmp	r3, #8
 8007748:	d017      	beq.n	800777a <UART_SetConfig+0xbf6>
 800774a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	2b09      	cmp	r3, #9
 8007752:	d010      	beq.n	8007776 <UART_SetConfig+0xbf2>
 8007754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	2b0a      	cmp	r3, #10
 800775c:	d009      	beq.n	8007772 <UART_SetConfig+0xbee>
 800775e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	2b0b      	cmp	r3, #11
 8007766:	d102      	bne.n	800776e <UART_SetConfig+0xbea>
 8007768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800776c:	e016      	b.n	800779c <UART_SetConfig+0xc18>
 800776e:	2201      	movs	r2, #1
 8007770:	e014      	b.n	800779c <UART_SetConfig+0xc18>
 8007772:	2280      	movs	r2, #128	@ 0x80
 8007774:	e012      	b.n	800779c <UART_SetConfig+0xc18>
 8007776:	2240      	movs	r2, #64	@ 0x40
 8007778:	e010      	b.n	800779c <UART_SetConfig+0xc18>
 800777a:	2220      	movs	r2, #32
 800777c:	e00e      	b.n	800779c <UART_SetConfig+0xc18>
 800777e:	2210      	movs	r2, #16
 8007780:	e00c      	b.n	800779c <UART_SetConfig+0xc18>
 8007782:	220c      	movs	r2, #12
 8007784:	e00a      	b.n	800779c <UART_SetConfig+0xc18>
 8007786:	220a      	movs	r2, #10
 8007788:	e008      	b.n	800779c <UART_SetConfig+0xc18>
 800778a:	2208      	movs	r2, #8
 800778c:	e006      	b.n	800779c <UART_SetConfig+0xc18>
 800778e:	2206      	movs	r2, #6
 8007790:	e004      	b.n	800779c <UART_SetConfig+0xc18>
 8007792:	2204      	movs	r2, #4
 8007794:	e002      	b.n	800779c <UART_SetConfig+0xc18>
 8007796:	2202      	movs	r2, #2
 8007798:	e000      	b.n	800779c <UART_SetConfig+0xc18>
 800779a:	2201      	movs	r2, #1
 800779c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        break;
 80077a8:	e003      	b.n	80077b2 <UART_SetConfig+0xc2e>
      default:
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077b0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80077b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f001 853d 	beq.w	8009236 <UART_SetConfig+0x26b2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	441a      	add	r2, r3
 80077c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d307      	bcc.n	80077e0 <UART_SetConfig+0xc5c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077dc:	4293      	cmp	r3, r2
 80077de:	d904      	bls.n	80077ea <UART_SetConfig+0xc66>
      {
        ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 80077e6:	f001 bd26 	b.w	8009236 <UART_SetConfig+0x26b2>
      }
      else
      {
        switch (clocksource)
 80077ea:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	dc48      	bgt.n	8007884 <UART_SetConfig+0xd00>
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	f2c0 8547 	blt.w	8008286 <UART_SetConfig+0x1702>
 80077f8:	3b02      	subs	r3, #2
 80077fa:	2b1e      	cmp	r3, #30
 80077fc:	f200 8543 	bhi.w	8008286 <UART_SetConfig+0x1702>
 8007800:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0xc84>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800788f 	.word	0x0800788f
 800780c:	08008287 	.word	0x08008287
 8007810:	08007a0f 	.word	0x08007a0f
 8007814:	08008287 	.word	0x08008287
 8007818:	08008287 	.word	0x08008287
 800781c:	08008287 	.word	0x08008287
 8007820:	08007b87 	.word	0x08007b87
 8007824:	08008287 	.word	0x08008287
 8007828:	08008287 	.word	0x08008287
 800782c:	08008287 	.word	0x08008287
 8007830:	08008287 	.word	0x08008287
 8007834:	08008287 	.word	0x08008287
 8007838:	08008287 	.word	0x08008287
 800783c:	08008287 	.word	0x08008287
 8007840:	08007cf1 	.word	0x08007cf1
 8007844:	08008287 	.word	0x08008287
 8007848:	08008287 	.word	0x08008287
 800784c:	08008287 	.word	0x08008287
 8007850:	08008287 	.word	0x08008287
 8007854:	08008287 	.word	0x08008287
 8007858:	08008287 	.word	0x08008287
 800785c:	08008287 	.word	0x08008287
 8007860:	08008287 	.word	0x08008287
 8007864:	08008287 	.word	0x08008287
 8007868:	08008287 	.word	0x08008287
 800786c:	08008287 	.word	0x08008287
 8007870:	08008287 	.word	0x08008287
 8007874:	08008287 	.word	0x08008287
 8007878:	08008287 	.word	0x08008287
 800787c:	08008287 	.word	0x08008287
 8007880:	08007fd9 	.word	0x08007fd9
 8007884:	2b40      	cmp	r3, #64	@ 0x40
 8007886:	f000 8453 	beq.w	8008130 <UART_SetConfig+0x15ac>
 800788a:	f000 bcfc 	b.w	8008286 <UART_SetConfig+0x1702>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800788e:	f7fe f9f1 	bl	8005c74 <HAL_RCCEx_GetD3PCLK1Freq>
 8007892:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800789a:	2200      	movs	r2, #0
 800789c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80078a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d072      	beq.n	8007994 <UART_SetConfig+0xe10>
 80078ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d068      	beq.n	800798a <UART_SetConfig+0xe06>
 80078b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d05e      	beq.n	8007980 <UART_SetConfig+0xdfc>
 80078c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d054      	beq.n	8007976 <UART_SetConfig+0xdf2>
 80078cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d04a      	beq.n	800796c <UART_SetConfig+0xde8>
 80078d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	2b05      	cmp	r3, #5
 80078de:	d040      	beq.n	8007962 <UART_SetConfig+0xdde>
 80078e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e6:	2b06      	cmp	r3, #6
 80078e8:	d036      	beq.n	8007958 <UART_SetConfig+0xdd4>
 80078ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	2b07      	cmp	r3, #7
 80078f2:	d02c      	beq.n	800794e <UART_SetConfig+0xdca>
 80078f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d022      	beq.n	8007944 <UART_SetConfig+0xdc0>
 80078fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	2b09      	cmp	r3, #9
 8007906:	d018      	beq.n	800793a <UART_SetConfig+0xdb6>
 8007908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	2b0a      	cmp	r3, #10
 8007910:	d00e      	beq.n	8007930 <UART_SetConfig+0xdac>
 8007912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007918:	2b0b      	cmp	r3, #11
 800791a:	d104      	bne.n	8007926 <UART_SetConfig+0xda2>
 800791c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e03a      	b.n	800799c <UART_SetConfig+0xe18>
 8007926:	f04f 0201 	mov.w	r2, #1
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	e035      	b.n	800799c <UART_SetConfig+0xe18>
 8007930:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	e030      	b.n	800799c <UART_SetConfig+0xe18>
 800793a:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e02b      	b.n	800799c <UART_SetConfig+0xe18>
 8007944:	f04f 0220 	mov.w	r2, #32
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	e026      	b.n	800799c <UART_SetConfig+0xe18>
 800794e:	f04f 0210 	mov.w	r2, #16
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	e021      	b.n	800799c <UART_SetConfig+0xe18>
 8007958:	f04f 020c 	mov.w	r2, #12
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e01c      	b.n	800799c <UART_SetConfig+0xe18>
 8007962:	f04f 020a 	mov.w	r2, #10
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	e017      	b.n	800799c <UART_SetConfig+0xe18>
 800796c:	f04f 0208 	mov.w	r2, #8
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	e012      	b.n	800799c <UART_SetConfig+0xe18>
 8007976:	f04f 0206 	mov.w	r2, #6
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e00d      	b.n	800799c <UART_SetConfig+0xe18>
 8007980:	f04f 0204 	mov.w	r2, #4
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	e008      	b.n	800799c <UART_SetConfig+0xe18>
 800798a:	f04f 0202 	mov.w	r2, #2
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	e003      	b.n	800799c <UART_SetConfig+0xe18>
 8007994:	f04f 0201 	mov.w	r2, #1
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80079a0:	f7f8 fcf6 	bl	8000390 <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4610      	mov	r0, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	020b      	lsls	r3, r1, #8
 80079b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079ba:	0202      	lsls	r2, r0, #8
 80079bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80079c0:	6849      	ldr	r1, [r1, #4]
 80079c2:	0849      	lsrs	r1, r1, #1
 80079c4:	2000      	movs	r0, #0
 80079c6:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80079ca:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 80079ce:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80079d2:	4621      	mov	r1, r4
 80079d4:	1851      	adds	r1, r2, r1
 80079d6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80079da:	4629      	mov	r1, r5
 80079dc:	eb43 0101 	adc.w	r1, r3, r1
 80079e0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80079e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80079f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079fc:	f7f8 fcc8 	bl	8000390 <__aeabi_uldivmod>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4613      	mov	r3, r2
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 8007a0a:	f000 bc40 	b.w	800828e <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe f944 	bl	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a22:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d072      	beq.n	8007b16 <UART_SetConfig+0xf92>
 8007a30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d068      	beq.n	8007b0c <UART_SetConfig+0xf88>
 8007a3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d05e      	beq.n	8007b02 <UART_SetConfig+0xf7e>
 8007a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d054      	beq.n	8007af8 <UART_SetConfig+0xf74>
 8007a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d04a      	beq.n	8007aee <UART_SetConfig+0xf6a>
 8007a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d040      	beq.n	8007ae4 <UART_SetConfig+0xf60>
 8007a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	2b06      	cmp	r3, #6
 8007a6a:	d036      	beq.n	8007ada <UART_SetConfig+0xf56>
 8007a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	d02c      	beq.n	8007ad0 <UART_SetConfig+0xf4c>
 8007a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d022      	beq.n	8007ac6 <UART_SetConfig+0xf42>
 8007a80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	2b09      	cmp	r3, #9
 8007a88:	d018      	beq.n	8007abc <UART_SetConfig+0xf38>
 8007a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a90:	2b0a      	cmp	r3, #10
 8007a92:	d00e      	beq.n	8007ab2 <UART_SetConfig+0xf2e>
 8007a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	2b0b      	cmp	r3, #11
 8007a9c:	d104      	bne.n	8007aa8 <UART_SetConfig+0xf24>
 8007a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	e03a      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007aa8:	f04f 0201 	mov.w	r2, #1
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	e035      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007ab2:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007ab6:	f04f 0300 	mov.w	r3, #0
 8007aba:	e030      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007abc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e02b      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007ac6:	f04f 0220 	mov.w	r2, #32
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	e026      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007ad0:	f04f 0210 	mov.w	r2, #16
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	e021      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007ada:	f04f 020c 	mov.w	r2, #12
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e01c      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007ae4:	f04f 020a 	mov.w	r2, #10
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e017      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007aee:	f04f 0208 	mov.w	r2, #8
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	e012      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007af8:	f04f 0206 	mov.w	r2, #6
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	e00d      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007b02:	f04f 0204 	mov.w	r2, #4
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	e008      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007b0c:	f04f 0202 	mov.w	r2, #2
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	e003      	b.n	8007b1e <UART_SetConfig+0xf9a>
 8007b16:	f04f 0201 	mov.w	r2, #1
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007b22:	f7f8 fc35 	bl	8000390 <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	020b      	lsls	r3, r1, #8
 8007b38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b3c:	0202      	lsls	r2, r0, #8
 8007b3e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007b42:	6849      	ldr	r1, [r1, #4]
 8007b44:	0849      	lsrs	r1, r1, #1
 8007b46:	2000      	movs	r0, #0
 8007b48:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8007b4c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8007b50:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8007b54:	4621      	mov	r1, r4
 8007b56:	1851      	adds	r1, r2, r1
 8007b58:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	eb43 0101 	adc.w	r1, r3, r1
 8007b60:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8007b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007b72:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007b76:	f7f8 fc0b 	bl	8000390 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4613      	mov	r3, r2
 8007b80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 8007b84:	e383      	b.n	800828e <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b86:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe f9dc 	bl	8005f48 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b94:	2200      	movs	r2, #0
 8007b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d072      	beq.n	8007c8a <UART_SetConfig+0x1106>
 8007ba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d068      	beq.n	8007c80 <UART_SetConfig+0x10fc>
 8007bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d05e      	beq.n	8007c76 <UART_SetConfig+0x10f2>
 8007bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d054      	beq.n	8007c6c <UART_SetConfig+0x10e8>
 8007bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d04a      	beq.n	8007c62 <UART_SetConfig+0x10de>
 8007bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d040      	beq.n	8007c58 <UART_SetConfig+0x10d4>
 8007bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	2b06      	cmp	r3, #6
 8007bde:	d036      	beq.n	8007c4e <UART_SetConfig+0x10ca>
 8007be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	2b07      	cmp	r3, #7
 8007be8:	d02c      	beq.n	8007c44 <UART_SetConfig+0x10c0>
 8007bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d022      	beq.n	8007c3a <UART_SetConfig+0x10b6>
 8007bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d018      	beq.n	8007c30 <UART_SetConfig+0x10ac>
 8007bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	2b0a      	cmp	r3, #10
 8007c06:	d00e      	beq.n	8007c26 <UART_SetConfig+0x10a2>
 8007c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	2b0b      	cmp	r3, #11
 8007c10:	d104      	bne.n	8007c1c <UART_SetConfig+0x1098>
 8007c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c16:	f04f 0300 	mov.w	r3, #0
 8007c1a:	e03a      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c1c:	f04f 0201 	mov.w	r2, #1
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	e035      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c26:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	e030      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c30:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	e02b      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c3a:	f04f 0220 	mov.w	r2, #32
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	e026      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c44:	f04f 0210 	mov.w	r2, #16
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e021      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c4e:	f04f 020c 	mov.w	r2, #12
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	e01c      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c58:	f04f 020a 	mov.w	r2, #10
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	e017      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c62:	f04f 0208 	mov.w	r2, #8
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	e012      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c6c:	f04f 0206 	mov.w	r2, #6
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	e00d      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c76:	f04f 0204 	mov.w	r2, #4
 8007c7a:	f04f 0300 	mov.w	r3, #0
 8007c7e:	e008      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c80:	f04f 0202 	mov.w	r2, #2
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	e003      	b.n	8007c92 <UART_SetConfig+0x110e>
 8007c8a:	f04f 0201 	mov.w	r2, #1
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c96:	f7f8 fb7b 	bl	8000390 <__aeabi_uldivmod>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	020b      	lsls	r3, r1, #8
 8007cac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cb0:	0202      	lsls	r2, r0, #8
 8007cb2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	0849      	lsrs	r1, r1, #1
 8007cba:	2000      	movs	r0, #0
 8007cbc:	468a      	mov	sl, r1
 8007cbe:	4683      	mov	fp, r0
 8007cc0:	eb12 010a 	adds.w	r1, r2, sl
 8007cc4:	6639      	str	r1, [r7, #96]	@ 0x60
 8007cc6:	eb43 030b 	adc.w	r3, r3, fp
 8007cca:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007cd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8007ce0:	f7f8 fb56 	bl	8000390 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4613      	mov	r3, r2
 8007cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 8007cee:	e2ce      	b.n	800828e <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf0:	4bb7      	ldr	r3, [pc, #732]	@ (8007fd0 <UART_SetConfig+0x144c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80b9 	beq.w	8007e70 <UART_SetConfig+0x12ec>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfe:	4bb4      	ldr	r3, [pc, #720]	@ (8007fd0 <UART_SetConfig+0x144c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	08db      	lsrs	r3, r3, #3
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	4ab2      	ldr	r2, [pc, #712]	@ (8007fd4 <UART_SetConfig+0x1450>)
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	2200      	movs	r2, #0
 8007d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d12:	657a      	str	r2, [r7, #84]	@ 0x54
 8007d14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d072      	beq.n	8007e04 <UART_SetConfig+0x1280>
 8007d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d068      	beq.n	8007dfa <UART_SetConfig+0x1276>
 8007d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d05e      	beq.n	8007df0 <UART_SetConfig+0x126c>
 8007d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d054      	beq.n	8007de6 <UART_SetConfig+0x1262>
 8007d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d04a      	beq.n	8007ddc <UART_SetConfig+0x1258>
 8007d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d040      	beq.n	8007dd2 <UART_SetConfig+0x124e>
 8007d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	2b06      	cmp	r3, #6
 8007d58:	d036      	beq.n	8007dc8 <UART_SetConfig+0x1244>
 8007d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	2b07      	cmp	r3, #7
 8007d62:	d02c      	beq.n	8007dbe <UART_SetConfig+0x123a>
 8007d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d022      	beq.n	8007db4 <UART_SetConfig+0x1230>
 8007d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	d018      	beq.n	8007daa <UART_SetConfig+0x1226>
 8007d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	2b0a      	cmp	r3, #10
 8007d80:	d00e      	beq.n	8007da0 <UART_SetConfig+0x121c>
 8007d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d88:	2b0b      	cmp	r3, #11
 8007d8a:	d104      	bne.n	8007d96 <UART_SetConfig+0x1212>
 8007d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e03a      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007d96:	f04f 0201 	mov.w	r2, #1
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e035      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007da0:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e030      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007daa:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	e02b      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007db4:	f04f 0220 	mov.w	r2, #32
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	e026      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007dbe:	f04f 0210 	mov.w	r2, #16
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	e021      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007dc8:	f04f 020c 	mov.w	r2, #12
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	e01c      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007dd2:	f04f 020a 	mov.w	r2, #10
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	e017      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007ddc:	f04f 0208 	mov.w	r2, #8
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e012      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007de6:	f04f 0206 	mov.w	r2, #6
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e00d      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007df0:	f04f 0204 	mov.w	r2, #4
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	e008      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007dfa:	f04f 0202 	mov.w	r2, #2
 8007dfe:	f04f 0300 	mov.w	r3, #0
 8007e02:	e003      	b.n	8007e0c <UART_SetConfig+0x1288>
 8007e04:	f04f 0201 	mov.w	r2, #1
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007e10:	f7f8 fabe 	bl	8000390 <__aeabi_uldivmod>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	020b      	lsls	r3, r1, #8
 8007e26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e2a:	0202      	lsls	r2, r0, #8
 8007e2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007e30:	6849      	ldr	r1, [r1, #4]
 8007e32:	0849      	lsrs	r1, r1, #1
 8007e34:	2000      	movs	r0, #0
 8007e36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e38:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007e3a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8007e3e:	4621      	mov	r1, r4
 8007e40:	1851      	adds	r1, r2, r1
 8007e42:	6439      	str	r1, [r7, #64]	@ 0x40
 8007e44:	4629      	mov	r1, r5
 8007e46:	eb43 0101 	adc.w	r1, r3, r1
 8007e4a:	6479      	str	r1, [r7, #68]	@ 0x44
 8007e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e56:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007e60:	f7f8 fa96 	bl	8000390 <__aeabi_uldivmod>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4613      	mov	r3, r2
 8007e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007e6e:	e20e      	b.n	800828e <UART_SetConfig+0x170a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d072      	beq.n	8007f60 <UART_SetConfig+0x13dc>
 8007e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d068      	beq.n	8007f56 <UART_SetConfig+0x13d2>
 8007e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d05e      	beq.n	8007f4c <UART_SetConfig+0x13c8>
 8007e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d054      	beq.n	8007f42 <UART_SetConfig+0x13be>
 8007e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d04a      	beq.n	8007f38 <UART_SetConfig+0x13b4>
 8007ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	2b05      	cmp	r3, #5
 8007eaa:	d040      	beq.n	8007f2e <UART_SetConfig+0x13aa>
 8007eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d036      	beq.n	8007f24 <UART_SetConfig+0x13a0>
 8007eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	2b07      	cmp	r3, #7
 8007ebe:	d02c      	beq.n	8007f1a <UART_SetConfig+0x1396>
 8007ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d022      	beq.n	8007f10 <UART_SetConfig+0x138c>
 8007eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d018      	beq.n	8007f06 <UART_SetConfig+0x1382>
 8007ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	2b0a      	cmp	r3, #10
 8007edc:	d00e      	beq.n	8007efc <UART_SetConfig+0x1378>
 8007ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee4:	2b0b      	cmp	r3, #11
 8007ee6:	d104      	bne.n	8007ef2 <UART_SetConfig+0x136e>
 8007ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	e03a      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007ef2:	f04f 0201 	mov.w	r2, #1
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	e035      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007efc:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e030      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f06:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e02b      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f10:	f04f 0220 	mov.w	r2, #32
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e026      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f1a:	f04f 0210 	mov.w	r2, #16
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	e021      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f24:	f04f 020c 	mov.w	r2, #12
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	e01c      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f2e:	f04f 020a 	mov.w	r2, #10
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	e017      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f38:	f04f 0208 	mov.w	r2, #8
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	e012      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f42:	f04f 0206 	mov.w	r2, #6
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	e00d      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f4c:	f04f 0204 	mov.w	r2, #4
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e008      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f56:	f04f 0202 	mov.w	r2, #2
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e003      	b.n	8007f68 <UART_SetConfig+0x13e4>
 8007f60:	f04f 0201 	mov.w	r2, #1
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	481a      	ldr	r0, [pc, #104]	@ (8007fd4 <UART_SetConfig+0x1450>)
 8007f6a:	f04f 0100 	mov.w	r1, #0
 8007f6e:	f7f8 fa0f 	bl	8000390 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	020b      	lsls	r3, r1, #8
 8007f84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f88:	0202      	lsls	r2, r0, #8
 8007f8a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007f8e:	6849      	ldr	r1, [r1, #4]
 8007f90:	0849      	lsrs	r1, r1, #1
 8007f92:	2000      	movs	r0, #0
 8007f94:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f96:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	eb43 0101 	adc.w	r1, r3, r1
 8007fa8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	623b      	str	r3, [r7, #32]
 8007fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fbe:	f7f8 f9e7 	bl	8000390 <__aeabi_uldivmod>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 8007fcc:	e15f      	b.n	800828e <UART_SetConfig+0x170a>
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	03d09000 	.word	0x03d09000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d072      	beq.n	80080c8 <UART_SetConfig+0x1544>
 8007fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d068      	beq.n	80080be <UART_SetConfig+0x153a>
 8007fec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d05e      	beq.n	80080b4 <UART_SetConfig+0x1530>
 8007ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d054      	beq.n	80080aa <UART_SetConfig+0x1526>
 8008000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008006:	2b04      	cmp	r3, #4
 8008008:	d04a      	beq.n	80080a0 <UART_SetConfig+0x151c>
 800800a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	2b05      	cmp	r3, #5
 8008012:	d040      	beq.n	8008096 <UART_SetConfig+0x1512>
 8008014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	2b06      	cmp	r3, #6
 800801c:	d036      	beq.n	800808c <UART_SetConfig+0x1508>
 800801e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008024:	2b07      	cmp	r3, #7
 8008026:	d02c      	beq.n	8008082 <UART_SetConfig+0x14fe>
 8008028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800802c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802e:	2b08      	cmp	r3, #8
 8008030:	d022      	beq.n	8008078 <UART_SetConfig+0x14f4>
 8008032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008038:	2b09      	cmp	r3, #9
 800803a:	d018      	beq.n	800806e <UART_SetConfig+0x14ea>
 800803c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	2b0a      	cmp	r3, #10
 8008044:	d00e      	beq.n	8008064 <UART_SetConfig+0x14e0>
 8008046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	2b0b      	cmp	r3, #11
 800804e:	d104      	bne.n	800805a <UART_SetConfig+0x14d6>
 8008050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	e03a      	b.n	80080d0 <UART_SetConfig+0x154c>
 800805a:	f04f 0201 	mov.w	r2, #1
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	e035      	b.n	80080d0 <UART_SetConfig+0x154c>
 8008064:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	e030      	b.n	80080d0 <UART_SetConfig+0x154c>
 800806e:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8008072:	f04f 0300 	mov.w	r3, #0
 8008076:	e02b      	b.n	80080d0 <UART_SetConfig+0x154c>
 8008078:	f04f 0220 	mov.w	r2, #32
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e026      	b.n	80080d0 <UART_SetConfig+0x154c>
 8008082:	f04f 0210 	mov.w	r2, #16
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	e021      	b.n	80080d0 <UART_SetConfig+0x154c>
 800808c:	f04f 020c 	mov.w	r2, #12
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e01c      	b.n	80080d0 <UART_SetConfig+0x154c>
 8008096:	f04f 020a 	mov.w	r2, #10
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	e017      	b.n	80080d0 <UART_SetConfig+0x154c>
 80080a0:	f04f 0208 	mov.w	r2, #8
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e012      	b.n	80080d0 <UART_SetConfig+0x154c>
 80080aa:	f04f 0206 	mov.w	r2, #6
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e00d      	b.n	80080d0 <UART_SetConfig+0x154c>
 80080b4:	f04f 0204 	mov.w	r2, #4
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	e008      	b.n	80080d0 <UART_SetConfig+0x154c>
 80080be:	f04f 0202 	mov.w	r2, #2
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	e003      	b.n	80080d0 <UART_SetConfig+0x154c>
 80080c8:	f04f 0201 	mov.w	r2, #1
 80080cc:	f04f 0300 	mov.w	r3, #0
 80080d0:	48a7      	ldr	r0, [pc, #668]	@ (8008370 <UART_SetConfig+0x17ec>)
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	f7f8 f95b 	bl	8000390 <__aeabi_uldivmod>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4610      	mov	r0, r2
 80080e0:	4619      	mov	r1, r3
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	020b      	lsls	r3, r1, #8
 80080ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080f0:	0202      	lsls	r2, r0, #8
 80080f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80080f6:	6849      	ldr	r1, [r1, #4]
 80080f8:	0849      	lsrs	r1, r1, #1
 80080fa:	2000      	movs	r0, #0
 80080fc:	4688      	mov	r8, r1
 80080fe:	4681      	mov	r9, r0
 8008100:	eb12 0108 	adds.w	r1, r2, r8
 8008104:	61b9      	str	r1, [r7, #24]
 8008106:	eb43 0309 	adc.w	r3, r3, r9
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	617a      	str	r2, [r7, #20]
 8008118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800811c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008120:	f7f8 f936 	bl	8000390 <__aeabi_uldivmod>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4613      	mov	r3, r2
 800812a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 800812e:	e0ae      	b.n	800828e <UART_SetConfig+0x170a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d072      	beq.n	8008220 <UART_SetConfig+0x169c>
 800813a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	2b01      	cmp	r3, #1
 8008142:	d068      	beq.n	8008216 <UART_SetConfig+0x1692>
 8008144:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814a:	2b02      	cmp	r3, #2
 800814c:	d05e      	beq.n	800820c <UART_SetConfig+0x1688>
 800814e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	2b03      	cmp	r3, #3
 8008156:	d054      	beq.n	8008202 <UART_SetConfig+0x167e>
 8008158:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800815c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815e:	2b04      	cmp	r3, #4
 8008160:	d04a      	beq.n	80081f8 <UART_SetConfig+0x1674>
 8008162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008168:	2b05      	cmp	r3, #5
 800816a:	d040      	beq.n	80081ee <UART_SetConfig+0x166a>
 800816c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	2b06      	cmp	r3, #6
 8008174:	d036      	beq.n	80081e4 <UART_SetConfig+0x1660>
 8008176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	2b07      	cmp	r3, #7
 800817e:	d02c      	beq.n	80081da <UART_SetConfig+0x1656>
 8008180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	2b08      	cmp	r3, #8
 8008188:	d022      	beq.n	80081d0 <UART_SetConfig+0x164c>
 800818a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800818e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008190:	2b09      	cmp	r3, #9
 8008192:	d018      	beq.n	80081c6 <UART_SetConfig+0x1642>
 8008194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819a:	2b0a      	cmp	r3, #10
 800819c:	d00e      	beq.n	80081bc <UART_SetConfig+0x1638>
 800819e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a4:	2b0b      	cmp	r3, #11
 80081a6:	d104      	bne.n	80081b2 <UART_SetConfig+0x162e>
 80081a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	e03a      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081b2:	f04f 0201 	mov.w	r2, #1
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	e035      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081bc:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	e030      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081c6:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	e02b      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081d0:	f04f 0220 	mov.w	r2, #32
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	e026      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081da:	f04f 0210 	mov.w	r2, #16
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e021      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081e4:	f04f 020c 	mov.w	r2, #12
 80081e8:	f04f 0300 	mov.w	r3, #0
 80081ec:	e01c      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081ee:	f04f 020a 	mov.w	r2, #10
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	e017      	b.n	8008228 <UART_SetConfig+0x16a4>
 80081f8:	f04f 0208 	mov.w	r2, #8
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	e012      	b.n	8008228 <UART_SetConfig+0x16a4>
 8008202:	f04f 0206 	mov.w	r2, #6
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	e00d      	b.n	8008228 <UART_SetConfig+0x16a4>
 800820c:	f04f 0204 	mov.w	r2, #4
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	e008      	b.n	8008228 <UART_SetConfig+0x16a4>
 8008216:	f04f 0202 	mov.w	r2, #2
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	e003      	b.n	8008228 <UART_SetConfig+0x16a4>
 8008220:	f04f 0201 	mov.w	r2, #1
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800822c:	f04f 0100 	mov.w	r1, #0
 8008230:	f7f8 f8ae 	bl	8000390 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4610      	mov	r0, r2
 800823a:	4619      	mov	r1, r3
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	020b      	lsls	r3, r1, #8
 8008246:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800824a:	0202      	lsls	r2, r0, #8
 800824c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8008250:	6849      	ldr	r1, [r1, #4]
 8008252:	0849      	lsrs	r1, r1, #1
 8008254:	2000      	movs	r0, #0
 8008256:	460c      	mov	r4, r1
 8008258:	4605      	mov	r5, r0
 800825a:	1911      	adds	r1, r2, r4
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	416b      	adcs	r3, r5
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008276:	f7f8 f88b 	bl	8000390 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4613      	mov	r3, r2
 8008280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 8008284:	e003      	b.n	800828e <UART_SetConfig+0x170a>
          default:
            ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800828c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008296:	d30c      	bcc.n	80082b2 <UART_SetConfig+0x172e>
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082a0:	d207      	bcs.n	80082b2 <UART_SetConfig+0x172e>
        {
          huart->Instance->BRR = usartdiv;
 80082a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	f000 bfc2 	b.w	8009236 <UART_SetConfig+0x26b2>
        }
        else
        {
          ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 80082b8:	f000 bfbd 	b.w	8009236 <UART_SetConfig+0x26b2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082c6:	f040 83e9 	bne.w	8008a9c <UART_SetConfig+0x1f18>
  {
    switch (clocksource)
 80082ca:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	dc4a      	bgt.n	8008368 <UART_SetConfig+0x17e4>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f2c0 83b7 	blt.w	8008a46 <UART_SetConfig+0x1ec2>
 80082d8:	2b20      	cmp	r3, #32
 80082da:	f200 83b4 	bhi.w	8008a46 <UART_SetConfig+0x1ec2>
 80082de:	a201      	add	r2, pc, #4	@ (adr r2, 80082e4 <UART_SetConfig+0x1760>)
 80082e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e4:	08008375 	.word	0x08008375
 80082e8:	0800844f 	.word	0x0800844f
 80082ec:	08008a47 	.word	0x08008a47
 80082f0:	08008a47 	.word	0x08008a47
 80082f4:	08008529 	.word	0x08008529
 80082f8:	08008a47 	.word	0x08008a47
 80082fc:	08008a47 	.word	0x08008a47
 8008300:	08008a47 	.word	0x08008a47
 8008304:	08008605 	.word	0x08008605
 8008308:	08008a47 	.word	0x08008a47
 800830c:	08008a47 	.word	0x08008a47
 8008310:	08008a47 	.word	0x08008a47
 8008314:	08008a47 	.word	0x08008a47
 8008318:	08008a47 	.word	0x08008a47
 800831c:	08008a47 	.word	0x08008a47
 8008320:	08008a47 	.word	0x08008a47
 8008324:	080086e1 	.word	0x080086e1
 8008328:	08008a47 	.word	0x08008a47
 800832c:	08008a47 	.word	0x08008a47
 8008330:	08008a47 	.word	0x08008a47
 8008334:	08008a47 	.word	0x08008a47
 8008338:	08008a47 	.word	0x08008a47
 800833c:	08008a47 	.word	0x08008a47
 8008340:	08008a47 	.word	0x08008a47
 8008344:	08008a47 	.word	0x08008a47
 8008348:	08008a47 	.word	0x08008a47
 800834c:	08008a47 	.word	0x08008a47
 8008350:	08008a47 	.word	0x08008a47
 8008354:	08008a47 	.word	0x08008a47
 8008358:	08008a47 	.word	0x08008a47
 800835c:	08008a47 	.word	0x08008a47
 8008360:	08008a47 	.word	0x08008a47
 8008364:	08008899 	.word	0x08008899
 8008368:	2b40      	cmp	r3, #64	@ 0x40
 800836a:	f000 8303 	beq.w	8008974 <UART_SetConfig+0x1df0>
 800836e:	e36a      	b.n	8008a46 <UART_SetConfig+0x1ec2>
 8008370:	003d0900 	.word	0x003d0900
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008374:	f7fc fcea 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8008378:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	d04f      	beq.n	8008426 <UART_SetConfig+0x18a2>
 8008386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	2b01      	cmp	r3, #1
 800838e:	d048      	beq.n	8008422 <UART_SetConfig+0x189e>
 8008390:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	2b02      	cmp	r3, #2
 8008398:	d041      	beq.n	800841e <UART_SetConfig+0x189a>
 800839a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d03a      	beq.n	800841a <UART_SetConfig+0x1896>
 80083a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d033      	beq.n	8008416 <UART_SetConfig+0x1892>
 80083ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	d02c      	beq.n	8008412 <UART_SetConfig+0x188e>
 80083b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083be:	2b06      	cmp	r3, #6
 80083c0:	d025      	beq.n	800840e <UART_SetConfig+0x188a>
 80083c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c8:	2b07      	cmp	r3, #7
 80083ca:	d01e      	beq.n	800840a <UART_SetConfig+0x1886>
 80083cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d017      	beq.n	8008406 <UART_SetConfig+0x1882>
 80083d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	2b09      	cmp	r3, #9
 80083de:	d010      	beq.n	8008402 <UART_SetConfig+0x187e>
 80083e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	2b0a      	cmp	r3, #10
 80083e8:	d009      	beq.n	80083fe <UART_SetConfig+0x187a>
 80083ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	2b0b      	cmp	r3, #11
 80083f2:	d102      	bne.n	80083fa <UART_SetConfig+0x1876>
 80083f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80083f8:	e016      	b.n	8008428 <UART_SetConfig+0x18a4>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e014      	b.n	8008428 <UART_SetConfig+0x18a4>
 80083fe:	2380      	movs	r3, #128	@ 0x80
 8008400:	e012      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008402:	2340      	movs	r3, #64	@ 0x40
 8008404:	e010      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008406:	2320      	movs	r3, #32
 8008408:	e00e      	b.n	8008428 <UART_SetConfig+0x18a4>
 800840a:	2310      	movs	r3, #16
 800840c:	e00c      	b.n	8008428 <UART_SetConfig+0x18a4>
 800840e:	230c      	movs	r3, #12
 8008410:	e00a      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008412:	230a      	movs	r3, #10
 8008414:	e008      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008416:	2308      	movs	r3, #8
 8008418:	e006      	b.n	8008428 <UART_SetConfig+0x18a4>
 800841a:	2306      	movs	r3, #6
 800841c:	e004      	b.n	8008428 <UART_SetConfig+0x18a4>
 800841e:	2304      	movs	r3, #4
 8008420:	e002      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008422:	2302      	movs	r3, #2
 8008424:	e000      	b.n	8008428 <UART_SetConfig+0x18a4>
 8008426:	2301      	movs	r3, #1
 8008428:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800842c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008430:	005a      	lsls	r2, r3, #1
 8008432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	441a      	add	r2, r3
 800843c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	b29b      	uxth	r3, r3
 8008448:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 800844c:	e2ff      	b.n	8008a4e <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800844e:	f7fc fc93 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8008452:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d04f      	beq.n	8008500 <UART_SetConfig+0x197c>
 8008460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008466:	2b01      	cmp	r3, #1
 8008468:	d048      	beq.n	80084fc <UART_SetConfig+0x1978>
 800846a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	2b02      	cmp	r3, #2
 8008472:	d041      	beq.n	80084f8 <UART_SetConfig+0x1974>
 8008474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847a:	2b03      	cmp	r3, #3
 800847c:	d03a      	beq.n	80084f4 <UART_SetConfig+0x1970>
 800847e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008484:	2b04      	cmp	r3, #4
 8008486:	d033      	beq.n	80084f0 <UART_SetConfig+0x196c>
 8008488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800848c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848e:	2b05      	cmp	r3, #5
 8008490:	d02c      	beq.n	80084ec <UART_SetConfig+0x1968>
 8008492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	2b06      	cmp	r3, #6
 800849a:	d025      	beq.n	80084e8 <UART_SetConfig+0x1964>
 800849c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a2:	2b07      	cmp	r3, #7
 80084a4:	d01e      	beq.n	80084e4 <UART_SetConfig+0x1960>
 80084a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d017      	beq.n	80084e0 <UART_SetConfig+0x195c>
 80084b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	2b09      	cmp	r3, #9
 80084b8:	d010      	beq.n	80084dc <UART_SetConfig+0x1958>
 80084ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c0:	2b0a      	cmp	r3, #10
 80084c2:	d009      	beq.n	80084d8 <UART_SetConfig+0x1954>
 80084c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	2b0b      	cmp	r3, #11
 80084cc:	d102      	bne.n	80084d4 <UART_SetConfig+0x1950>
 80084ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084d2:	e016      	b.n	8008502 <UART_SetConfig+0x197e>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e014      	b.n	8008502 <UART_SetConfig+0x197e>
 80084d8:	2380      	movs	r3, #128	@ 0x80
 80084da:	e012      	b.n	8008502 <UART_SetConfig+0x197e>
 80084dc:	2340      	movs	r3, #64	@ 0x40
 80084de:	e010      	b.n	8008502 <UART_SetConfig+0x197e>
 80084e0:	2320      	movs	r3, #32
 80084e2:	e00e      	b.n	8008502 <UART_SetConfig+0x197e>
 80084e4:	2310      	movs	r3, #16
 80084e6:	e00c      	b.n	8008502 <UART_SetConfig+0x197e>
 80084e8:	230c      	movs	r3, #12
 80084ea:	e00a      	b.n	8008502 <UART_SetConfig+0x197e>
 80084ec:	230a      	movs	r3, #10
 80084ee:	e008      	b.n	8008502 <UART_SetConfig+0x197e>
 80084f0:	2308      	movs	r3, #8
 80084f2:	e006      	b.n	8008502 <UART_SetConfig+0x197e>
 80084f4:	2306      	movs	r3, #6
 80084f6:	e004      	b.n	8008502 <UART_SetConfig+0x197e>
 80084f8:	2304      	movs	r3, #4
 80084fa:	e002      	b.n	8008502 <UART_SetConfig+0x197e>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e000      	b.n	8008502 <UART_SetConfig+0x197e>
 8008500:	2301      	movs	r3, #1
 8008502:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8008506:	fbb2 f3f3 	udiv	r3, r2, r3
 800850a:	005a      	lsls	r2, r3, #1
 800850c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	441a      	add	r2, r3
 8008516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	b29b      	uxth	r3, r3
 8008522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008526:	e292      	b.n	8008a4e <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008528:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800852c:	4618      	mov	r0, r3
 800852e:	f7fd fbb7 	bl	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008532:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8008536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d04f      	beq.n	80085e0 <UART_SetConfig+0x1a5c>
 8008540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008546:	2b01      	cmp	r3, #1
 8008548:	d048      	beq.n	80085dc <UART_SetConfig+0x1a58>
 800854a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	2b02      	cmp	r3, #2
 8008552:	d041      	beq.n	80085d8 <UART_SetConfig+0x1a54>
 8008554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855a:	2b03      	cmp	r3, #3
 800855c:	d03a      	beq.n	80085d4 <UART_SetConfig+0x1a50>
 800855e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	2b04      	cmp	r3, #4
 8008566:	d033      	beq.n	80085d0 <UART_SetConfig+0x1a4c>
 8008568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800856c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856e:	2b05      	cmp	r3, #5
 8008570:	d02c      	beq.n	80085cc <UART_SetConfig+0x1a48>
 8008572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008578:	2b06      	cmp	r3, #6
 800857a:	d025      	beq.n	80085c8 <UART_SetConfig+0x1a44>
 800857c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008582:	2b07      	cmp	r3, #7
 8008584:	d01e      	beq.n	80085c4 <UART_SetConfig+0x1a40>
 8008586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800858a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858c:	2b08      	cmp	r3, #8
 800858e:	d017      	beq.n	80085c0 <UART_SetConfig+0x1a3c>
 8008590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	2b09      	cmp	r3, #9
 8008598:	d010      	beq.n	80085bc <UART_SetConfig+0x1a38>
 800859a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	2b0a      	cmp	r3, #10
 80085a2:	d009      	beq.n	80085b8 <UART_SetConfig+0x1a34>
 80085a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085aa:	2b0b      	cmp	r3, #11
 80085ac:	d102      	bne.n	80085b4 <UART_SetConfig+0x1a30>
 80085ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085b2:	e016      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e014      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	e012      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085bc:	2340      	movs	r3, #64	@ 0x40
 80085be:	e010      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085c0:	2320      	movs	r3, #32
 80085c2:	e00e      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085c4:	2310      	movs	r3, #16
 80085c6:	e00c      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085c8:	230c      	movs	r3, #12
 80085ca:	e00a      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085cc:	230a      	movs	r3, #10
 80085ce:	e008      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085d0:	2308      	movs	r3, #8
 80085d2:	e006      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085d4:	2306      	movs	r3, #6
 80085d6:	e004      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085d8:	2304      	movs	r3, #4
 80085da:	e002      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085dc:	2302      	movs	r3, #2
 80085de:	e000      	b.n	80085e2 <UART_SetConfig+0x1a5e>
 80085e0:	2301      	movs	r3, #1
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	005a      	lsls	r2, r3, #1
 80085e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	441a      	add	r2, r3
 80085f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008602:	e224      	b.n	8008a4e <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008604:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fc9d 	bl	8005f48 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800860e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	d04f      	beq.n	80086bc <UART_SetConfig+0x1b38>
 800861c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	2b01      	cmp	r3, #1
 8008624:	d048      	beq.n	80086b8 <UART_SetConfig+0x1b34>
 8008626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	2b02      	cmp	r3, #2
 800862e:	d041      	beq.n	80086b4 <UART_SetConfig+0x1b30>
 8008630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008636:	2b03      	cmp	r3, #3
 8008638:	d03a      	beq.n	80086b0 <UART_SetConfig+0x1b2c>
 800863a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800863e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008640:	2b04      	cmp	r3, #4
 8008642:	d033      	beq.n	80086ac <UART_SetConfig+0x1b28>
 8008644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864a:	2b05      	cmp	r3, #5
 800864c:	d02c      	beq.n	80086a8 <UART_SetConfig+0x1b24>
 800864e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	2b06      	cmp	r3, #6
 8008656:	d025      	beq.n	80086a4 <UART_SetConfig+0x1b20>
 8008658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	2b07      	cmp	r3, #7
 8008660:	d01e      	beq.n	80086a0 <UART_SetConfig+0x1b1c>
 8008662:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008668:	2b08      	cmp	r3, #8
 800866a:	d017      	beq.n	800869c <UART_SetConfig+0x1b18>
 800866c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	2b09      	cmp	r3, #9
 8008674:	d010      	beq.n	8008698 <UART_SetConfig+0x1b14>
 8008676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800867a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867c:	2b0a      	cmp	r3, #10
 800867e:	d009      	beq.n	8008694 <UART_SetConfig+0x1b10>
 8008680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	2b0b      	cmp	r3, #11
 8008688:	d102      	bne.n	8008690 <UART_SetConfig+0x1b0c>
 800868a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800868e:	e016      	b.n	80086be <UART_SetConfig+0x1b3a>
 8008690:	2301      	movs	r3, #1
 8008692:	e014      	b.n	80086be <UART_SetConfig+0x1b3a>
 8008694:	2380      	movs	r3, #128	@ 0x80
 8008696:	e012      	b.n	80086be <UART_SetConfig+0x1b3a>
 8008698:	2340      	movs	r3, #64	@ 0x40
 800869a:	e010      	b.n	80086be <UART_SetConfig+0x1b3a>
 800869c:	2320      	movs	r3, #32
 800869e:	e00e      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086a0:	2310      	movs	r3, #16
 80086a2:	e00c      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086a4:	230c      	movs	r3, #12
 80086a6:	e00a      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086a8:	230a      	movs	r3, #10
 80086aa:	e008      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086ac:	2308      	movs	r3, #8
 80086ae:	e006      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086b0:	2306      	movs	r3, #6
 80086b2:	e004      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086b4:	2304      	movs	r3, #4
 80086b6:	e002      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e000      	b.n	80086be <UART_SetConfig+0x1b3a>
 80086bc:	2301      	movs	r3, #1
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	005a      	lsls	r2, r3, #1
 80086c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	441a      	add	r2, r3
 80086ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	b29b      	uxth	r3, r3
 80086da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 80086de:	e1b6      	b.n	8008a4e <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086e0:	4ba1      	ldr	r3, [pc, #644]	@ (8008968 <UART_SetConfig+0x1de4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d06d      	beq.n	80087c8 <UART_SetConfig+0x1c44>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ec:	4b9e      	ldr	r3, [pc, #632]	@ (8008968 <UART_SetConfig+0x1de4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	08db      	lsrs	r3, r3, #3
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	4a9d      	ldr	r2, [pc, #628]	@ (800896c <UART_SetConfig+0x1de8>)
 80086f8:	40da      	lsrs	r2, r3
 80086fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008700:	2b00      	cmp	r3, #0
 8008702:	d04f      	beq.n	80087a4 <UART_SetConfig+0x1c20>
 8008704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870a:	2b01      	cmp	r3, #1
 800870c:	d048      	beq.n	80087a0 <UART_SetConfig+0x1c1c>
 800870e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	2b02      	cmp	r3, #2
 8008716:	d041      	beq.n	800879c <UART_SetConfig+0x1c18>
 8008718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	2b03      	cmp	r3, #3
 8008720:	d03a      	beq.n	8008798 <UART_SetConfig+0x1c14>
 8008722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	2b04      	cmp	r3, #4
 800872a:	d033      	beq.n	8008794 <UART_SetConfig+0x1c10>
 800872c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008732:	2b05      	cmp	r3, #5
 8008734:	d02c      	beq.n	8008790 <UART_SetConfig+0x1c0c>
 8008736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	2b06      	cmp	r3, #6
 800873e:	d025      	beq.n	800878c <UART_SetConfig+0x1c08>
 8008740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	2b07      	cmp	r3, #7
 8008748:	d01e      	beq.n	8008788 <UART_SetConfig+0x1c04>
 800874a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800874e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008750:	2b08      	cmp	r3, #8
 8008752:	d017      	beq.n	8008784 <UART_SetConfig+0x1c00>
 8008754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	2b09      	cmp	r3, #9
 800875c:	d010      	beq.n	8008780 <UART_SetConfig+0x1bfc>
 800875e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	2b0a      	cmp	r3, #10
 8008766:	d009      	beq.n	800877c <UART_SetConfig+0x1bf8>
 8008768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800876c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876e:	2b0b      	cmp	r3, #11
 8008770:	d102      	bne.n	8008778 <UART_SetConfig+0x1bf4>
 8008772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008776:	e016      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008778:	2301      	movs	r3, #1
 800877a:	e014      	b.n	80087a6 <UART_SetConfig+0x1c22>
 800877c:	2380      	movs	r3, #128	@ 0x80
 800877e:	e012      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008780:	2340      	movs	r3, #64	@ 0x40
 8008782:	e010      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008784:	2320      	movs	r3, #32
 8008786:	e00e      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008788:	2310      	movs	r3, #16
 800878a:	e00c      	b.n	80087a6 <UART_SetConfig+0x1c22>
 800878c:	230c      	movs	r3, #12
 800878e:	e00a      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008790:	230a      	movs	r3, #10
 8008792:	e008      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008794:	2308      	movs	r3, #8
 8008796:	e006      	b.n	80087a6 <UART_SetConfig+0x1c22>
 8008798:	2306      	movs	r3, #6
 800879a:	e004      	b.n	80087a6 <UART_SetConfig+0x1c22>
 800879c:	2304      	movs	r3, #4
 800879e:	e002      	b.n	80087a6 <UART_SetConfig+0x1c22>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e000      	b.n	80087a6 <UART_SetConfig+0x1c22>
 80087a4:	2301      	movs	r3, #1
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	005a      	lsls	r2, r3, #1
 80087ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80087c6:	e142      	b.n	8008a4e <UART_SetConfig+0x1eca>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04f      	beq.n	8008872 <UART_SetConfig+0x1cee>
 80087d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d048      	beq.n	800886e <UART_SetConfig+0x1cea>
 80087dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d041      	beq.n	800886a <UART_SetConfig+0x1ce6>
 80087e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d03a      	beq.n	8008866 <UART_SetConfig+0x1ce2>
 80087f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d033      	beq.n	8008862 <UART_SetConfig+0x1cde>
 80087fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	2b05      	cmp	r3, #5
 8008802:	d02c      	beq.n	800885e <UART_SetConfig+0x1cda>
 8008804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880a:	2b06      	cmp	r3, #6
 800880c:	d025      	beq.n	800885a <UART_SetConfig+0x1cd6>
 800880e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	2b07      	cmp	r3, #7
 8008816:	d01e      	beq.n	8008856 <UART_SetConfig+0x1cd2>
 8008818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800881c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881e:	2b08      	cmp	r3, #8
 8008820:	d017      	beq.n	8008852 <UART_SetConfig+0x1cce>
 8008822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	2b09      	cmp	r3, #9
 800882a:	d010      	beq.n	800884e <UART_SetConfig+0x1cca>
 800882c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008832:	2b0a      	cmp	r3, #10
 8008834:	d009      	beq.n	800884a <UART_SetConfig+0x1cc6>
 8008836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	2b0b      	cmp	r3, #11
 800883e:	d102      	bne.n	8008846 <UART_SetConfig+0x1cc2>
 8008840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008844:	e016      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008846:	2301      	movs	r3, #1
 8008848:	e014      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800884a:	2380      	movs	r3, #128	@ 0x80
 800884c:	e012      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800884e:	2340      	movs	r3, #64	@ 0x40
 8008850:	e010      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008852:	2320      	movs	r3, #32
 8008854:	e00e      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008856:	2310      	movs	r3, #16
 8008858:	e00c      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800885a:	230c      	movs	r3, #12
 800885c:	e00a      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800885e:	230a      	movs	r3, #10
 8008860:	e008      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008862:	2308      	movs	r3, #8
 8008864:	e006      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008866:	2306      	movs	r3, #6
 8008868:	e004      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800886a:	2304      	movs	r3, #4
 800886c:	e002      	b.n	8008874 <UART_SetConfig+0x1cf0>
 800886e:	2302      	movs	r3, #2
 8008870:	e000      	b.n	8008874 <UART_SetConfig+0x1cf0>
 8008872:	2301      	movs	r3, #1
 8008874:	4a3d      	ldr	r2, [pc, #244]	@ (800896c <UART_SetConfig+0x1de8>)
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	005a      	lsls	r2, r3, #1
 800887c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	441a      	add	r2, r3
 8008886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	b29b      	uxth	r3, r3
 8008892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008896:	e0da      	b.n	8008a4e <UART_SetConfig+0x1eca>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800889c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d04f      	beq.n	8008942 <UART_SetConfig+0x1dbe>
 80088a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d048      	beq.n	800893e <UART_SetConfig+0x1dba>
 80088ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d041      	beq.n	800893a <UART_SetConfig+0x1db6>
 80088b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d03a      	beq.n	8008936 <UART_SetConfig+0x1db2>
 80088c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d033      	beq.n	8008932 <UART_SetConfig+0x1dae>
 80088ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	d02c      	beq.n	800892e <UART_SetConfig+0x1daa>
 80088d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	2b06      	cmp	r3, #6
 80088dc:	d025      	beq.n	800892a <UART_SetConfig+0x1da6>
 80088de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	2b07      	cmp	r3, #7
 80088e6:	d01e      	beq.n	8008926 <UART_SetConfig+0x1da2>
 80088e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d017      	beq.n	8008922 <UART_SetConfig+0x1d9e>
 80088f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	2b09      	cmp	r3, #9
 80088fa:	d010      	beq.n	800891e <UART_SetConfig+0x1d9a>
 80088fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008902:	2b0a      	cmp	r3, #10
 8008904:	d009      	beq.n	800891a <UART_SetConfig+0x1d96>
 8008906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	2b0b      	cmp	r3, #11
 800890e:	d102      	bne.n	8008916 <UART_SetConfig+0x1d92>
 8008910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008914:	e016      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008916:	2301      	movs	r3, #1
 8008918:	e014      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	e012      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800891e:	2340      	movs	r3, #64	@ 0x40
 8008920:	e010      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008922:	2320      	movs	r3, #32
 8008924:	e00e      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008926:	2310      	movs	r3, #16
 8008928:	e00c      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800892a:	230c      	movs	r3, #12
 800892c:	e00a      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800892e:	230a      	movs	r3, #10
 8008930:	e008      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008932:	2308      	movs	r3, #8
 8008934:	e006      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008936:	2306      	movs	r3, #6
 8008938:	e004      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800893a:	2304      	movs	r3, #4
 800893c:	e002      	b.n	8008944 <UART_SetConfig+0x1dc0>
 800893e:	2302      	movs	r3, #2
 8008940:	e000      	b.n	8008944 <UART_SetConfig+0x1dc0>
 8008942:	2301      	movs	r3, #1
 8008944:	4a0a      	ldr	r2, [pc, #40]	@ (8008970 <UART_SetConfig+0x1dec>)
 8008946:	fbb2 f3f3 	udiv	r3, r2, r3
 800894a:	005a      	lsls	r2, r3, #1
 800894c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	441a      	add	r2, r3
 8008956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008960:	b29b      	uxth	r3, r3
 8008962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008966:	e072      	b.n	8008a4e <UART_SetConfig+0x1eca>
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04f      	beq.n	8008a1e <UART_SetConfig+0x1e9a>
 800897e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	2b01      	cmp	r3, #1
 8008986:	d048      	beq.n	8008a1a <UART_SetConfig+0x1e96>
 8008988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800898c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898e:	2b02      	cmp	r3, #2
 8008990:	d041      	beq.n	8008a16 <UART_SetConfig+0x1e92>
 8008992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008998:	2b03      	cmp	r3, #3
 800899a:	d03a      	beq.n	8008a12 <UART_SetConfig+0x1e8e>
 800899c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d033      	beq.n	8008a0e <UART_SetConfig+0x1e8a>
 80089a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d02c      	beq.n	8008a0a <UART_SetConfig+0x1e86>
 80089b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	d025      	beq.n	8008a06 <UART_SetConfig+0x1e82>
 80089ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	2b07      	cmp	r3, #7
 80089c2:	d01e      	beq.n	8008a02 <UART_SetConfig+0x1e7e>
 80089c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	2b08      	cmp	r3, #8
 80089cc:	d017      	beq.n	80089fe <UART_SetConfig+0x1e7a>
 80089ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d010      	beq.n	80089fa <UART_SetConfig+0x1e76>
 80089d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	2b0a      	cmp	r3, #10
 80089e0:	d009      	beq.n	80089f6 <UART_SetConfig+0x1e72>
 80089e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e8:	2b0b      	cmp	r3, #11
 80089ea:	d102      	bne.n	80089f2 <UART_SetConfig+0x1e6e>
 80089ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089f0:	e016      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e014      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 80089f6:	2380      	movs	r3, #128	@ 0x80
 80089f8:	e012      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 80089fa:	2340      	movs	r3, #64	@ 0x40
 80089fc:	e010      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 80089fe:	2320      	movs	r3, #32
 8008a00:	e00e      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a02:	2310      	movs	r3, #16
 8008a04:	e00c      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	e00a      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a0a:	230a      	movs	r3, #10
 8008a0c:	e008      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	e006      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a12:	2306      	movs	r3, #6
 8008a14:	e004      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a16:	2304      	movs	r3, #4
 8008a18:	e002      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e000      	b.n	8008a20 <UART_SetConfig+0x1e9c>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a28:	005a      	lsls	r2, r3, #1
 8008a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	441a      	add	r2, r3
 8008a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008a44:	e003      	b.n	8008a4e <UART_SetConfig+0x1eca>
      default:
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a52:	2b0f      	cmp	r3, #15
 8008a54:	d91e      	bls.n	8008a94 <UART_SetConfig+0x1f10>
 8008a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5e:	d219      	bcs.n	8008a94 <UART_SetConfig+0x1f10>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	f023 030f 	bic.w	r3, r3, #15
 8008a6a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
      huart->Instance->BRR = brrtemp;
 8008a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e3d0      	b.n	8009236 <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8008a9a:	e3cc      	b.n	8009236 <UART_SetConfig+0x26b2>
    }
  }
  else
  {
    switch (clocksource)
 8008a9c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	dc4b      	bgt.n	8008b3c <UART_SetConfig+0x1fb8>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f2c0 83af 	blt.w	8009208 <UART_SetConfig+0x2684>
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	f200 83ac 	bhi.w	8009208 <UART_SetConfig+0x2684>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <UART_SetConfig+0x1f34>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008c1d 	.word	0x08008c1d
 8008ac0:	08009209 	.word	0x08009209
 8008ac4:	08009209 	.word	0x08009209
 8008ac8:	08008cf5 	.word	0x08008cf5
 8008acc:	08009209 	.word	0x08009209
 8008ad0:	08009209 	.word	0x08009209
 8008ad4:	08009209 	.word	0x08009209
 8008ad8:	08008dcf 	.word	0x08008dcf
 8008adc:	08009209 	.word	0x08009209
 8008ae0:	08009209 	.word	0x08009209
 8008ae4:	08009209 	.word	0x08009209
 8008ae8:	08009209 	.word	0x08009209
 8008aec:	08009209 	.word	0x08009209
 8008af0:	08009209 	.word	0x08009209
 8008af4:	08009209 	.word	0x08009209
 8008af8:	08008ea9 	.word	0x08008ea9
 8008afc:	08009209 	.word	0x08009209
 8008b00:	08009209 	.word	0x08009209
 8008b04:	08009209 	.word	0x08009209
 8008b08:	08009209 	.word	0x08009209
 8008b0c:	08009209 	.word	0x08009209
 8008b10:	08009209 	.word	0x08009209
 8008b14:	08009209 	.word	0x08009209
 8008b18:	08009209 	.word	0x08009209
 8008b1c:	08009209 	.word	0x08009209
 8008b20:	08009209 	.word	0x08009209
 8008b24:	08009209 	.word	0x08009209
 8008b28:	08009209 	.word	0x08009209
 8008b2c:	08009209 	.word	0x08009209
 8008b30:	08009209 	.word	0x08009209
 8008b34:	08009209 	.word	0x08009209
 8008b38:	0800905d 	.word	0x0800905d
 8008b3c:	2b40      	cmp	r3, #64	@ 0x40
 8008b3e:	f000 82fb 	beq.w	8009138 <UART_SetConfig+0x25b4>
 8008b42:	e361      	b.n	8009208 <UART_SetConfig+0x2684>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b44:	f7fc f902 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8008b48:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d04f      	beq.n	8008bf6 <UART_SetConfig+0x2072>
 8008b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d048      	beq.n	8008bf2 <UART_SetConfig+0x206e>
 8008b60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d041      	beq.n	8008bee <UART_SetConfig+0x206a>
 8008b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d03a      	beq.n	8008bea <UART_SetConfig+0x2066>
 8008b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d033      	beq.n	8008be6 <UART_SetConfig+0x2062>
 8008b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d02c      	beq.n	8008be2 <UART_SetConfig+0x205e>
 8008b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	d025      	beq.n	8008bde <UART_SetConfig+0x205a>
 8008b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	2b07      	cmp	r3, #7
 8008b9a:	d01e      	beq.n	8008bda <UART_SetConfig+0x2056>
 8008b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d017      	beq.n	8008bd6 <UART_SetConfig+0x2052>
 8008ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d010      	beq.n	8008bd2 <UART_SetConfig+0x204e>
 8008bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb6:	2b0a      	cmp	r3, #10
 8008bb8:	d009      	beq.n	8008bce <UART_SetConfig+0x204a>
 8008bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	2b0b      	cmp	r3, #11
 8008bc2:	d102      	bne.n	8008bca <UART_SetConfig+0x2046>
 8008bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bc8:	e016      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e014      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bce:	2380      	movs	r3, #128	@ 0x80
 8008bd0:	e012      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bd2:	2340      	movs	r3, #64	@ 0x40
 8008bd4:	e010      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	e00e      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bda:	2310      	movs	r3, #16
 8008bdc:	e00c      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bde:	230c      	movs	r3, #12
 8008be0:	e00a      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008be2:	230a      	movs	r3, #10
 8008be4:	e008      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008be6:	2308      	movs	r3, #8
 8008be8:	e006      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bea:	2306      	movs	r3, #6
 8008bec:	e004      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bee:	2304      	movs	r3, #4
 8008bf0:	e002      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e000      	b.n	8008bf8 <UART_SetConfig+0x2074>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8008bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	441a      	add	r2, r3
 8008c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008c1a:	e2f9      	b.n	8009210 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c1c:	f7fc f8ac 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8008c20:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d04f      	beq.n	8008cce <UART_SetConfig+0x214a>
 8008c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d048      	beq.n	8008cca <UART_SetConfig+0x2146>
 8008c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d041      	beq.n	8008cc6 <UART_SetConfig+0x2142>
 8008c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d03a      	beq.n	8008cc2 <UART_SetConfig+0x213e>
 8008c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d033      	beq.n	8008cbe <UART_SetConfig+0x213a>
 8008c56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d02c      	beq.n	8008cba <UART_SetConfig+0x2136>
 8008c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c66:	2b06      	cmp	r3, #6
 8008c68:	d025      	beq.n	8008cb6 <UART_SetConfig+0x2132>
 8008c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c70:	2b07      	cmp	r3, #7
 8008c72:	d01e      	beq.n	8008cb2 <UART_SetConfig+0x212e>
 8008c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d017      	beq.n	8008cae <UART_SetConfig+0x212a>
 8008c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d010      	beq.n	8008caa <UART_SetConfig+0x2126>
 8008c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	2b0a      	cmp	r3, #10
 8008c90:	d009      	beq.n	8008ca6 <UART_SetConfig+0x2122>
 8008c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c98:	2b0b      	cmp	r3, #11
 8008c9a:	d102      	bne.n	8008ca2 <UART_SetConfig+0x211e>
 8008c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ca0:	e016      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e014      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008ca6:	2380      	movs	r3, #128	@ 0x80
 8008ca8:	e012      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008caa:	2340      	movs	r3, #64	@ 0x40
 8008cac:	e010      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cae:	2320      	movs	r3, #32
 8008cb0:	e00e      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cb2:	2310      	movs	r3, #16
 8008cb4:	e00c      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	e00a      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e008      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	e006      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cc2:	2306      	movs	r3, #6
 8008cc4:	e004      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cc6:	2304      	movs	r3, #4
 8008cc8:	e002      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e000      	b.n	8008cd0 <UART_SetConfig+0x214c>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8008cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	441a      	add	r2, r3
 8008ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008cf2:	e28d      	b.n	8009210 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fc ffd1 	bl	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8008d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d04f      	beq.n	8008dac <UART_SetConfig+0x2228>
 8008d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d048      	beq.n	8008da8 <UART_SetConfig+0x2224>
 8008d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d041      	beq.n	8008da4 <UART_SetConfig+0x2220>
 8008d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d03a      	beq.n	8008da0 <UART_SetConfig+0x221c>
 8008d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d033      	beq.n	8008d9c <UART_SetConfig+0x2218>
 8008d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d02c      	beq.n	8008d98 <UART_SetConfig+0x2214>
 8008d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d44:	2b06      	cmp	r3, #6
 8008d46:	d025      	beq.n	8008d94 <UART_SetConfig+0x2210>
 8008d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4e:	2b07      	cmp	r3, #7
 8008d50:	d01e      	beq.n	8008d90 <UART_SetConfig+0x220c>
 8008d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d017      	beq.n	8008d8c <UART_SetConfig+0x2208>
 8008d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	2b09      	cmp	r3, #9
 8008d64:	d010      	beq.n	8008d88 <UART_SetConfig+0x2204>
 8008d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6c:	2b0a      	cmp	r3, #10
 8008d6e:	d009      	beq.n	8008d84 <UART_SetConfig+0x2200>
 8008d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d76:	2b0b      	cmp	r3, #11
 8008d78:	d102      	bne.n	8008d80 <UART_SetConfig+0x21fc>
 8008d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d7e:	e016      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e014      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d84:	2380      	movs	r3, #128	@ 0x80
 8008d86:	e012      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d88:	2340      	movs	r3, #64	@ 0x40
 8008d8a:	e010      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	e00e      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d90:	2310      	movs	r3, #16
 8008d92:	e00c      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d94:	230c      	movs	r3, #12
 8008d96:	e00a      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d98:	230a      	movs	r3, #10
 8008d9a:	e008      	b.n	8008dae <UART_SetConfig+0x222a>
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	e006      	b.n	8008dae <UART_SetConfig+0x222a>
 8008da0:	2306      	movs	r3, #6
 8008da2:	e004      	b.n	8008dae <UART_SetConfig+0x222a>
 8008da4:	2304      	movs	r3, #4
 8008da6:	e002      	b.n	8008dae <UART_SetConfig+0x222a>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e000      	b.n	8008dae <UART_SetConfig+0x222a>
 8008dac:	2301      	movs	r3, #1
 8008dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8008db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	441a      	add	r2, r3
 8008dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008dcc:	e220      	b.n	8009210 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dce:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fd f8b8 	bl	8005f48 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d04f      	beq.n	8008e86 <UART_SetConfig+0x2302>
 8008de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d048      	beq.n	8008e82 <UART_SetConfig+0x22fe>
 8008df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d041      	beq.n	8008e7e <UART_SetConfig+0x22fa>
 8008dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d03a      	beq.n	8008e7a <UART_SetConfig+0x22f6>
 8008e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d033      	beq.n	8008e76 <UART_SetConfig+0x22f2>
 8008e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	2b05      	cmp	r3, #5
 8008e16:	d02c      	beq.n	8008e72 <UART_SetConfig+0x22ee>
 8008e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	d025      	beq.n	8008e6e <UART_SetConfig+0x22ea>
 8008e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	2b07      	cmp	r3, #7
 8008e2a:	d01e      	beq.n	8008e6a <UART_SetConfig+0x22e6>
 8008e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d017      	beq.n	8008e66 <UART_SetConfig+0x22e2>
 8008e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3c:	2b09      	cmp	r3, #9
 8008e3e:	d010      	beq.n	8008e62 <UART_SetConfig+0x22de>
 8008e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e46:	2b0a      	cmp	r3, #10
 8008e48:	d009      	beq.n	8008e5e <UART_SetConfig+0x22da>
 8008e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e50:	2b0b      	cmp	r3, #11
 8008e52:	d102      	bne.n	8008e5a <UART_SetConfig+0x22d6>
 8008e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e58:	e016      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e014      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e5e:	2380      	movs	r3, #128	@ 0x80
 8008e60:	e012      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e62:	2340      	movs	r3, #64	@ 0x40
 8008e64:	e010      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e66:	2320      	movs	r3, #32
 8008e68:	e00e      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	e00c      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	e00a      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e72:	230a      	movs	r3, #10
 8008e74:	e008      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e76:	2308      	movs	r3, #8
 8008e78:	e006      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e7a:	2306      	movs	r3, #6
 8008e7c:	e004      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e7e:	2304      	movs	r3, #4
 8008e80:	e002      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e000      	b.n	8008e88 <UART_SetConfig+0x2304>
 8008e86:	2301      	movs	r3, #1
 8008e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	085b      	lsrs	r3, r3, #1
 8008e94:	441a      	add	r2, r3
 8008e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8008ea6:	e1b3      	b.n	8009210 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800912c <UART_SetConfig+0x25a8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d06c      	beq.n	8008f8e <UART_SetConfig+0x240a>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800912c <UART_SetConfig+0x25a8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	08db      	lsrs	r3, r3, #3
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	4a9c      	ldr	r2, [pc, #624]	@ (8009130 <UART_SetConfig+0x25ac>)
 8008ec0:	40da      	lsrs	r2, r3
 8008ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d04f      	beq.n	8008f6c <UART_SetConfig+0x23e8>
 8008ecc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d048      	beq.n	8008f68 <UART_SetConfig+0x23e4>
 8008ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d041      	beq.n	8008f64 <UART_SetConfig+0x23e0>
 8008ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d03a      	beq.n	8008f60 <UART_SetConfig+0x23dc>
 8008eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d033      	beq.n	8008f5c <UART_SetConfig+0x23d8>
 8008ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	d02c      	beq.n	8008f58 <UART_SetConfig+0x23d4>
 8008efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f04:	2b06      	cmp	r3, #6
 8008f06:	d025      	beq.n	8008f54 <UART_SetConfig+0x23d0>
 8008f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	d01e      	beq.n	8008f50 <UART_SetConfig+0x23cc>
 8008f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d017      	beq.n	8008f4c <UART_SetConfig+0x23c8>
 8008f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d010      	beq.n	8008f48 <UART_SetConfig+0x23c4>
 8008f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2c:	2b0a      	cmp	r3, #10
 8008f2e:	d009      	beq.n	8008f44 <UART_SetConfig+0x23c0>
 8008f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	2b0b      	cmp	r3, #11
 8008f38:	d102      	bne.n	8008f40 <UART_SetConfig+0x23bc>
 8008f3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f3e:	e016      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e014      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	e012      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f48:	2340      	movs	r3, #64	@ 0x40
 8008f4a:	e010      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	e00e      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f50:	2310      	movs	r3, #16
 8008f52:	e00c      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f54:	230c      	movs	r3, #12
 8008f56:	e00a      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f58:	230a      	movs	r3, #10
 8008f5a:	e008      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	e006      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f60:	2306      	movs	r3, #6
 8008f62:	e004      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f64:	2304      	movs	r3, #4
 8008f66:	e002      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e000      	b.n	8008f6e <UART_SetConfig+0x23ea>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	441a      	add	r2, r3
 8008f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008f8c:	e140      	b.n	8009210 <UART_SetConfig+0x268c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d04f      	beq.n	8009038 <UART_SetConfig+0x24b4>
 8008f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d048      	beq.n	8009034 <UART_SetConfig+0x24b0>
 8008fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d041      	beq.n	8009030 <UART_SetConfig+0x24ac>
 8008fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d03a      	beq.n	800902c <UART_SetConfig+0x24a8>
 8008fb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d033      	beq.n	8009028 <UART_SetConfig+0x24a4>
 8008fc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	d02c      	beq.n	8009024 <UART_SetConfig+0x24a0>
 8008fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd0:	2b06      	cmp	r3, #6
 8008fd2:	d025      	beq.n	8009020 <UART_SetConfig+0x249c>
 8008fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	2b07      	cmp	r3, #7
 8008fdc:	d01e      	beq.n	800901c <UART_SetConfig+0x2498>
 8008fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d017      	beq.n	8009018 <UART_SetConfig+0x2494>
 8008fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d010      	beq.n	8009014 <UART_SetConfig+0x2490>
 8008ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	2b0a      	cmp	r3, #10
 8008ffa:	d009      	beq.n	8009010 <UART_SetConfig+0x248c>
 8008ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009002:	2b0b      	cmp	r3, #11
 8009004:	d102      	bne.n	800900c <UART_SetConfig+0x2488>
 8009006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800900a:	e016      	b.n	800903a <UART_SetConfig+0x24b6>
 800900c:	2301      	movs	r3, #1
 800900e:	e014      	b.n	800903a <UART_SetConfig+0x24b6>
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	e012      	b.n	800903a <UART_SetConfig+0x24b6>
 8009014:	2340      	movs	r3, #64	@ 0x40
 8009016:	e010      	b.n	800903a <UART_SetConfig+0x24b6>
 8009018:	2320      	movs	r3, #32
 800901a:	e00e      	b.n	800903a <UART_SetConfig+0x24b6>
 800901c:	2310      	movs	r3, #16
 800901e:	e00c      	b.n	800903a <UART_SetConfig+0x24b6>
 8009020:	230c      	movs	r3, #12
 8009022:	e00a      	b.n	800903a <UART_SetConfig+0x24b6>
 8009024:	230a      	movs	r3, #10
 8009026:	e008      	b.n	800903a <UART_SetConfig+0x24b6>
 8009028:	2308      	movs	r3, #8
 800902a:	e006      	b.n	800903a <UART_SetConfig+0x24b6>
 800902c:	2306      	movs	r3, #6
 800902e:	e004      	b.n	800903a <UART_SetConfig+0x24b6>
 8009030:	2304      	movs	r3, #4
 8009032:	e002      	b.n	800903a <UART_SetConfig+0x24b6>
 8009034:	2302      	movs	r3, #2
 8009036:	e000      	b.n	800903a <UART_SetConfig+0x24b6>
 8009038:	2301      	movs	r3, #1
 800903a:	4a3d      	ldr	r2, [pc, #244]	@ (8009130 <UART_SetConfig+0x25ac>)
 800903c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	085b      	lsrs	r3, r3, #1
 8009048:	441a      	add	r2, r3
 800904a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	fbb2 f3f3 	udiv	r3, r2, r3
 8009054:	b29b      	uxth	r3, r3
 8009056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 800905a:	e0d9      	b.n	8009210 <UART_SetConfig+0x268c>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d04f      	beq.n	8009106 <UART_SetConfig+0x2582>
 8009066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	2b01      	cmp	r3, #1
 800906e:	d048      	beq.n	8009102 <UART_SetConfig+0x257e>
 8009070:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009076:	2b02      	cmp	r3, #2
 8009078:	d041      	beq.n	80090fe <UART_SetConfig+0x257a>
 800907a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800907e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009080:	2b03      	cmp	r3, #3
 8009082:	d03a      	beq.n	80090fa <UART_SetConfig+0x2576>
 8009084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	2b04      	cmp	r3, #4
 800908c:	d033      	beq.n	80090f6 <UART_SetConfig+0x2572>
 800908e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	2b05      	cmp	r3, #5
 8009096:	d02c      	beq.n	80090f2 <UART_SetConfig+0x256e>
 8009098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800909c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909e:	2b06      	cmp	r3, #6
 80090a0:	d025      	beq.n	80090ee <UART_SetConfig+0x256a>
 80090a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	2b07      	cmp	r3, #7
 80090aa:	d01e      	beq.n	80090ea <UART_SetConfig+0x2566>
 80090ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b2:	2b08      	cmp	r3, #8
 80090b4:	d017      	beq.n	80090e6 <UART_SetConfig+0x2562>
 80090b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	2b09      	cmp	r3, #9
 80090be:	d010      	beq.n	80090e2 <UART_SetConfig+0x255e>
 80090c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	2b0a      	cmp	r3, #10
 80090c8:	d009      	beq.n	80090de <UART_SetConfig+0x255a>
 80090ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	2b0b      	cmp	r3, #11
 80090d2:	d102      	bne.n	80090da <UART_SetConfig+0x2556>
 80090d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090d8:	e016      	b.n	8009108 <UART_SetConfig+0x2584>
 80090da:	2301      	movs	r3, #1
 80090dc:	e014      	b.n	8009108 <UART_SetConfig+0x2584>
 80090de:	2380      	movs	r3, #128	@ 0x80
 80090e0:	e012      	b.n	8009108 <UART_SetConfig+0x2584>
 80090e2:	2340      	movs	r3, #64	@ 0x40
 80090e4:	e010      	b.n	8009108 <UART_SetConfig+0x2584>
 80090e6:	2320      	movs	r3, #32
 80090e8:	e00e      	b.n	8009108 <UART_SetConfig+0x2584>
 80090ea:	2310      	movs	r3, #16
 80090ec:	e00c      	b.n	8009108 <UART_SetConfig+0x2584>
 80090ee:	230c      	movs	r3, #12
 80090f0:	e00a      	b.n	8009108 <UART_SetConfig+0x2584>
 80090f2:	230a      	movs	r3, #10
 80090f4:	e008      	b.n	8009108 <UART_SetConfig+0x2584>
 80090f6:	2308      	movs	r3, #8
 80090f8:	e006      	b.n	8009108 <UART_SetConfig+0x2584>
 80090fa:	2306      	movs	r3, #6
 80090fc:	e004      	b.n	8009108 <UART_SetConfig+0x2584>
 80090fe:	2304      	movs	r3, #4
 8009100:	e002      	b.n	8009108 <UART_SetConfig+0x2584>
 8009102:	2302      	movs	r3, #2
 8009104:	e000      	b.n	8009108 <UART_SetConfig+0x2584>
 8009106:	2301      	movs	r3, #1
 8009108:	4a0a      	ldr	r2, [pc, #40]	@ (8009134 <UART_SetConfig+0x25b0>)
 800910a:	fbb2 f2f3 	udiv	r2, r2, r3
 800910e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	085b      	lsrs	r3, r3, #1
 8009116:	441a      	add	r2, r3
 8009118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009122:	b29b      	uxth	r3, r3
 8009124:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8009128:	e072      	b.n	8009210 <UART_SetConfig+0x268c>
 800912a:	bf00      	nop
 800912c:	58024400 	.word	0x58024400
 8009130:	03d09000 	.word	0x03d09000
 8009134:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	2b00      	cmp	r3, #0
 8009140:	d04f      	beq.n	80091e2 <UART_SetConfig+0x265e>
 8009142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009148:	2b01      	cmp	r3, #1
 800914a:	d048      	beq.n	80091de <UART_SetConfig+0x265a>
 800914c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	2b02      	cmp	r3, #2
 8009154:	d041      	beq.n	80091da <UART_SetConfig+0x2656>
 8009156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800915a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915c:	2b03      	cmp	r3, #3
 800915e:	d03a      	beq.n	80091d6 <UART_SetConfig+0x2652>
 8009160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	2b04      	cmp	r3, #4
 8009168:	d033      	beq.n	80091d2 <UART_SetConfig+0x264e>
 800916a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800916e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009170:	2b05      	cmp	r3, #5
 8009172:	d02c      	beq.n	80091ce <UART_SetConfig+0x264a>
 8009174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	2b06      	cmp	r3, #6
 800917c:	d025      	beq.n	80091ca <UART_SetConfig+0x2646>
 800917e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009184:	2b07      	cmp	r3, #7
 8009186:	d01e      	beq.n	80091c6 <UART_SetConfig+0x2642>
 8009188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	2b08      	cmp	r3, #8
 8009190:	d017      	beq.n	80091c2 <UART_SetConfig+0x263e>
 8009192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	2b09      	cmp	r3, #9
 800919a:	d010      	beq.n	80091be <UART_SetConfig+0x263a>
 800919c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	2b0a      	cmp	r3, #10
 80091a4:	d009      	beq.n	80091ba <UART_SetConfig+0x2636>
 80091a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	2b0b      	cmp	r3, #11
 80091ae:	d102      	bne.n	80091b6 <UART_SetConfig+0x2632>
 80091b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091b4:	e016      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e014      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091ba:	2380      	movs	r3, #128	@ 0x80
 80091bc:	e012      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091be:	2340      	movs	r3, #64	@ 0x40
 80091c0:	e010      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091c2:	2320      	movs	r3, #32
 80091c4:	e00e      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091c6:	2310      	movs	r3, #16
 80091c8:	e00c      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091ca:	230c      	movs	r3, #12
 80091cc:	e00a      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091ce:	230a      	movs	r3, #10
 80091d0:	e008      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091d2:	2308      	movs	r3, #8
 80091d4:	e006      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091d6:	2306      	movs	r3, #6
 80091d8:	e004      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091da:	2304      	movs	r3, #4
 80091dc:	e002      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091de:	2302      	movs	r3, #2
 80091e0:	e000      	b.n	80091e4 <UART_SetConfig+0x2660>
 80091e2:	2301      	movs	r3, #1
 80091e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80091ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009200:	b29b      	uxth	r3, r3
 8009202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        break;
 8009206:	e003      	b.n	8009210 <UART_SetConfig+0x268c>
      default:
        ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800920e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009214:	2b0f      	cmp	r3, #15
 8009216:	d90b      	bls.n	8009230 <UART_SetConfig+0x26ac>
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009220:	d206      	bcs.n	8009230 <UART_SetConfig+0x26ac>
    {
      huart->Instance->BRR = usartdiv;
 8009222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800922c:	60da      	str	r2, [r3, #12]
 800922e:	e002      	b.n	8009236 <UART_SetConfig+0x26b2>
    }
    else
    {
      ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800923a:	2201      	movs	r2, #1
 800923c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009244:	2201      	movs	r2, #1
 8009246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800924a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800924e:	2200      	movs	r2, #0
 8009250:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->TxISR = NULL;
 8009252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009256:	2200      	movs	r2, #0
 8009258:	671a      	str	r2, [r3, #112]	@ 0x70

  return ret;
 800925a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
}
 800925e:	4618      	mov	r0, r3
 8009260:	37f0      	adds	r7, #240	@ 0xf0
 8009262:	46bd      	mov	sp, r7
 8009264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01a      	beq.n	800937e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009366:	d10a      	bne.n	800937e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80093bc:	f7f8 fad0 	bl	8001960 <HAL_GetTick>
 80093c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d10e      	bne.n	80093ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f82c 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e022      	b.n	8009434 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d10e      	bne.n	800941a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f816 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e00c      	b.n	8009434 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UNLOCK(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	e062      	b.n	8009514 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d05e      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	f7f8 fa83 	bl	8001960 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <UART_WaitOnFlagUntilTimeout+0x30>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d11d      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800947a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        __HAL_UNLOCK(huart);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e045      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d02e      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094c4:	d126      	bne.n	8009514 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094ce:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80094de:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0201 	bic.w	r2, r2, #1
 80094ee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          
          return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e00f      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69da      	ldr	r2, [r3, #28]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	4013      	ands	r3, r2
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	429a      	cmp	r2, r3
 8009522:	bf0c      	ite	eq
 8009524:	2301      	moveq	r3, #1
 8009526:	2300      	movne	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	461a      	mov	r2, r3
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	429a      	cmp	r2, r3
 8009530:	d08d      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_UARTEx_DisableFifoMode+0x16>
 800954e:	2302      	movs	r3, #2
 8009550:	e027      	b.n	80095a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2224      	movs	r2, #36	@ 0x24
 800955e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0201 	bic.w	r2, r2, #1
 8009578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e02d      	b.n	8009622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2224      	movs	r2, #36	@ 0x24
 80095d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f850 	bl	80096a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800963e:	2302      	movs	r3, #2
 8009640:	e02d      	b.n	800969e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2224      	movs	r2, #36	@ 0x24
 800964e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f812 	bl	80096a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b089      	sub	sp, #36	@ 0x24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80096b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009768 <UARTEx_SetNbDataToProcess+0xc0>)
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80096be:	4a2b      	ldr	r2, [pc, #172]	@ (800976c <UARTEx_SetNbDataToProcess+0xc4>)
 80096c0:	f107 030c 	add.w	r3, r7, #12
 80096c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d108      	bne.n	80096e6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096e4:	e039      	b.n	800975a <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096e6:	2308      	movs	r3, #8
 80096e8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ea:	2308      	movs	r3, #8
 80096ec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	0e5b      	lsrs	r3, r3, #25
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	0f5b      	lsrs	r3, r3, #29
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800970e:	7fbb      	ldrb	r3, [r7, #30]
 8009710:	7f3a      	ldrb	r2, [r7, #28]
 8009712:	3220      	adds	r2, #32
 8009714:	443a      	add	r2, r7
 8009716:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	7f3a      	ldrb	r2, [r7, #28]
 8009720:	3220      	adds	r2, #32
 8009722:	443a      	add	r2, r7
 8009724:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009728:	fb93 f3f2 	sdiv	r3, r3, r2
 800972c:	b29a      	uxth	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009734:	7ffb      	ldrb	r3, [r7, #31]
 8009736:	7f7a      	ldrb	r2, [r7, #29]
 8009738:	3220      	adds	r2, #32
 800973a:	443a      	add	r2, r7
 800973c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	7f7a      	ldrb	r2, [r7, #29]
 8009746:	3220      	adds	r2, #32
 8009748:	443a      	add	r2, r7
 800974a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800974e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800975a:	bf00      	nop
 800975c:	3724      	adds	r7, #36	@ 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	0801c1bc 	.word	0x0801c1bc
 800976c:	0801c1c4 	.word	0x0801c1c4

08009770 <ethernet_status_callback>:
ip4_addr_t gw;

/* USER CODE BEGIN 2 */

void ethernet_status_callback(struct netif *netif)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b094      	sub	sp, #80	@ 0x50
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	uint8_t msg[48];
	size_t msg_len;

	if (netif_is_up(netif))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <ethernet_status_callback+0x3e>
	{
		uint8_t msg_ip[20];
		ipaddr_ntoa_r(&netif->ip_addr, (char* )msg_ip, 20);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3304      	adds	r3, #4
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	2214      	movs	r2, #20
 8009792:	4618      	mov	r0, r3
 8009794:	f010 f864 	bl	8019860 <ip4addr_ntoa_r>
		msg_len = sprintf((char*) msg, "STATUS connected @ %s\r\n", (char*) msg_ip);
 8009798:	f107 0208 	add.w	r2, r7, #8
 800979c:	f107 031c 	add.w	r3, r7, #28
 80097a0:	4911      	ldr	r1, [pc, #68]	@ (80097e8 <ethernet_status_callback+0x78>)
 80097a2:	4618      	mov	r0, r3
 80097a4:	f011 fac4 	bl	801ad30 <siprintf>
 80097a8:	4603      	mov	r3, r0
 80097aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ac:	e00e      	b.n	80097cc <ethernet_status_callback+0x5c>
	}
	else
	{
		 msg_len = sprintf((char *)msg, "STATUS down @ %lu\r\n", HAL_GetTick()/1000);
 80097ae:	f7f8 f8d7 	bl	8001960 <HAL_GetTick>
 80097b2:	4603      	mov	r3, r0
 80097b4:	4a0d      	ldr	r2, [pc, #52]	@ (80097ec <ethernet_status_callback+0x7c>)
 80097b6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ba:	099a      	lsrs	r2, r3, #6
 80097bc:	f107 031c 	add.w	r3, r7, #28
 80097c0:	490b      	ldr	r1, [pc, #44]	@ (80097f0 <ethernet_status_callback+0x80>)
 80097c2:	4618      	mov	r0, r3
 80097c4:	f011 fab4 	bl	801ad30 <siprintf>
 80097c8:	4603      	mov	r3, r0
 80097ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	HAL_UART_Transmit(&huart3, msg, msg_len, HAL_MAX_DELAY);
 80097cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	f107 011c 	add.w	r1, r7, #28
 80097d4:	f04f 33ff 	mov.w	r3, #4294967295
 80097d8:	4806      	ldr	r0, [pc, #24]	@ (80097f4 <ethernet_status_callback+0x84>)
 80097da:	f7fd f93d 	bl	8006a58 <HAL_UART_Transmit>
}
 80097de:	bf00      	nop
 80097e0:	3750      	adds	r7, #80	@ 0x50
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	0801c1cc 	.word	0x0801c1cc
 80097ec:	10624dd3 	.word	0x10624dd3
 80097f0:	0801c1e4 	.word	0x0801c1e4
 80097f4:	24000590 	.word	0x24000590

080097f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b08c      	sub	sp, #48	@ 0x30
 80097fc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80097fe:	2100      	movs	r1, #0
 8009800:	2000      	movs	r0, #0
 8009802:	f005 fee9 	bl	800f5d8 <tcpip_init>

  /* Set static IP addresses */
  IP4_ADDR(&ipaddr, 192, 168, 1, 3);
 8009806:	4b1c      	ldr	r3, [pc, #112]	@ (8009878 <MX_LWIP_Init+0x80>)
 8009808:	4a1c      	ldr	r2, [pc, #112]	@ (800987c <MX_LWIP_Init+0x84>)
 800980a:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask, 255, 255, 255, 0);
 800980c:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <MX_LWIP_Init+0x88>)
 800980e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009812:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw, 192, 168, 1, 1);
 8009814:	4b1b      	ldr	r3, [pc, #108]	@ (8009884 <MX_LWIP_Init+0x8c>)
 8009816:	4a1c      	ldr	r2, [pc, #112]	@ (8009888 <MX_LWIP_Init+0x90>)
 8009818:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800981a:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <MX_LWIP_Init+0x94>)
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	4b1c      	ldr	r3, [pc, #112]	@ (8009890 <MX_LWIP_Init+0x98>)
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	2300      	movs	r3, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4b17      	ldr	r3, [pc, #92]	@ (8009884 <MX_LWIP_Init+0x8c>)
 8009828:	4a15      	ldr	r2, [pc, #84]	@ (8009880 <MX_LWIP_Init+0x88>)
 800982a:	4913      	ldr	r1, [pc, #76]	@ (8009878 <MX_LWIP_Init+0x80>)
 800982c:	4819      	ldr	r0, [pc, #100]	@ (8009894 <MX_LWIP_Init+0x9c>)
 800982e:	f006 fbd1 	bl	800ffd4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009832:	4818      	ldr	r0, [pc, #96]	@ (8009894 <MX_LWIP_Init+0x9c>)
 8009834:	f006 fcc4 	bl	80101c0 <netif_set_default>

  /* Set the network interface up */
  netif_set_up(&gnetif);
 8009838:	4816      	ldr	r0, [pc, #88]	@ (8009894 <MX_LWIP_Init+0x9c>)
 800983a:	f006 fcd1 	bl	80101e0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status */
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800983e:	4916      	ldr	r1, [pc, #88]	@ (8009898 <MX_LWIP_Init+0xa0>)
 8009840:	4814      	ldr	r0, [pc, #80]	@ (8009894 <MX_LWIP_Init+0x9c>)
 8009842:	f006 fda2 	bl	801038a <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8009846:	4b15      	ldr	r3, [pc, #84]	@ (800989c <MX_LWIP_Init+0xa4>)
 8009848:	1d3c      	adds	r4, r7, #4
 800984a:	461d      	mov	r5, r3
 800984c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800984e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(EthLink), &gnetif);
 8009858:	1d3b      	adds	r3, r7, #4
 800985a:	490e      	ldr	r1, [pc, #56]	@ (8009894 <MX_LWIP_Init+0x9c>)
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fd10 	bl	800a282 <osThreadCreate>

  /* Add status callback for future status updates */
  netif_set_status_callback(&gnetif, ethernet_status_callback);
 8009862:	490f      	ldr	r1, [pc, #60]	@ (80098a0 <MX_LWIP_Init+0xa8>)
 8009864:	480b      	ldr	r0, [pc, #44]	@ (8009894 <MX_LWIP_Init+0x9c>)
 8009866:	f006 fd31 	bl	80102cc <netif_set_status_callback>

  // Check the link status initially
  ethernet_link_status_updated(&gnetif);
 800986a:	480a      	ldr	r0, [pc, #40]	@ (8009894 <MX_LWIP_Init+0x9c>)
 800986c:	f000 f81a 	bl	80098a4 <ethernet_link_status_updated>
}
 8009870:	bf00      	nop
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bdb0      	pop	{r4, r5, r7, pc}
 8009878:	2400065c 	.word	0x2400065c
 800987c:	0301a8c0 	.word	0x0301a8c0
 8009880:	24000660 	.word	0x24000660
 8009884:	24000664 	.word	0x24000664
 8009888:	0101a8c0 	.word	0x0101a8c0
 800988c:	0800f4a5 	.word	0x0800f4a5
 8009890:	08009fbd 	.word	0x08009fbd
 8009894:	24000620 	.word	0x24000620
 8009898:	080098a5 	.word	0x080098a5
 800989c:	0801c238 	.word	0x0801c238
 80098a0:	08009771 	.word	0x08009771

080098a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif) 
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	  if (netif_is_up(netif))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <ethernet_link_status_updated+0x20>
	  {
	    /* USER CODE BEGIN 5 */

	    // Do we have an IP?
	    if (netif->ip_addr.addr != 0)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	e00e      	b.n	80098e2 <ethernet_link_status_updated+0x3e>
	  {
	    /* USER CODE BEGIN 6 */

	    // Ethernet cable disconnected
	    // Release IP
	    ipaddr.addr = 0;
 80098c4:	4b08      	ldr	r3, [pc, #32]	@ (80098e8 <ethernet_link_status_updated+0x44>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	    netmask.addr = 0;
 80098ca:	4b08      	ldr	r3, [pc, #32]	@ (80098ec <ethernet_link_status_updated+0x48>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
	    gw.addr = 0;
 80098d0:	4b07      	ldr	r3, [pc, #28]	@ (80098f0 <ethernet_link_status_updated+0x4c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
	    netifapi_netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 80098d6:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <ethernet_link_status_updated+0x4c>)
 80098d8:	4a04      	ldr	r2, [pc, #16]	@ (80098ec <ethernet_link_status_updated+0x48>)
 80098da:	4903      	ldr	r1, [pc, #12]	@ (80098e8 <ethernet_link_status_updated+0x44>)
 80098dc:	4805      	ldr	r0, [pc, #20]	@ (80098f4 <ethernet_link_status_updated+0x50>)
 80098de:	f005 fd01 	bl	800f2e4 <netifapi_netif_set_addr>

	    /* USER CODE END 6 */
	  }
}
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	2400065c 	.word	0x2400065c
 80098ec:	24000660 	.word	0x24000660
 80098f0:	24000664 	.word	0x24000664
 80098f4:	24000620 	.word	0x24000620

080098f8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800990a:	2320      	movs	r3, #32
 800990c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800990e:	f3bf 8f4f 	dsb	sy
}
 8009912:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009914:	e00b      	b.n	800992e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009916:	4a0d      	ldr	r2, [pc, #52]	@ (800994c <SCB_InvalidateDCache_by_Addr+0x54>)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4413      	add	r3, r2
 8009924:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	dcf0      	bgt.n	8009916 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009934:	f3bf 8f4f 	dsb	sy
}
 8009938:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800993a:	f3bf 8f6f 	isb	sy
}
 800993e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8009940:	bf00      	nop
 8009942:	371c      	adds	r7, #28
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	e000ed00 	.word	0xe000ed00

08009950 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	@ 0x38
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	609a      	str	r2, [r3, #8]
 8009964:	60da      	str	r2, [r3, #12]
 8009966:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a5d      	ldr	r2, [pc, #372]	@ (8009ae4 <HAL_ETH_MspInit+0x194>)
 800996e:	4293      	cmp	r3, r2
 8009970:	f040 80b3 	bne.w	8009ada <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009974:	4b5c      	ldr	r3, [pc, #368]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800997a:	4a5b      	ldr	r2, [pc, #364]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 800997c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009980:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009984:	4b58      	ldr	r3, [pc, #352]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800998a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800998e:	623b      	str	r3, [r7, #32]
 8009990:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009992:	4b55      	ldr	r3, [pc, #340]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009998:	4a53      	ldr	r2, [pc, #332]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 800999a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800999e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80099a2:	4b51      	ldr	r3, [pc, #324]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80099a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099ac:	61fb      	str	r3, [r7, #28]
 80099ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80099b0:	4b4d      	ldr	r3, [pc, #308]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80099b6:	4a4c      	ldr	r2, [pc, #304]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80099c0:	4b49      	ldr	r3, [pc, #292]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80099c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80099ce:	4b46      	ldr	r3, [pc, #280]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099d4:	4a44      	ldr	r2, [pc, #272]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099d6:	f043 0304 	orr.w	r3, r3, #4
 80099da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80099de:	4b42      	ldr	r3, [pc, #264]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ec:	4b3e      	ldr	r3, [pc, #248]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099f2:	4a3d      	ldr	r2, [pc, #244]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099f4:	f043 0301 	orr.w	r3, r3, #1
 80099f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80099fc:	4b3a      	ldr	r3, [pc, #232]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 80099fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a0a:	4b37      	ldr	r3, [pc, #220]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a10:	4a35      	ldr	r2, [pc, #212]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a12:	f043 0302 	orr.w	r3, r3, #2
 8009a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009a1a:	4b33      	ldr	r3, [pc, #204]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a28:	4b2f      	ldr	r3, [pc, #188]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009a38:	4b2b      	ldr	r3, [pc, #172]	@ (8009ae8 <HAL_ETH_MspInit+0x198>)
 8009a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a42:	60bb      	str	r3, [r7, #8]
 8009a44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009a46:	2332      	movs	r3, #50	@ 0x32
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a52:	2300      	movs	r3, #0
 8009a54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a56:	230b      	movs	r3, #11
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4822      	ldr	r0, [pc, #136]	@ (8009aec <HAL_ETH_MspInit+0x19c>)
 8009a62:	f7f9 ffcb 	bl	80039fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009a66:	2386      	movs	r3, #134	@ 0x86
 8009a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a72:	2300      	movs	r3, #0
 8009a74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a76:	230b      	movs	r3, #11
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a7e:	4619      	mov	r1, r3
 8009a80:	481b      	ldr	r0, [pc, #108]	@ (8009af0 <HAL_ETH_MspInit+0x1a0>)
 8009a82:	f7f9 ffbb 	bl	80039fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009a86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a94:	2300      	movs	r3, #0
 8009a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a98:	230b      	movs	r3, #11
 8009a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4814      	ldr	r0, [pc, #80]	@ (8009af4 <HAL_ETH_MspInit+0x1a4>)
 8009aa4:	f7f9 ffaa 	bl	80039fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009aa8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009aba:	230b      	movs	r3, #11
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	480c      	ldr	r0, [pc, #48]	@ (8009af8 <HAL_ETH_MspInit+0x1a8>)
 8009ac6:	f7f9 ff99 	bl	80039fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009aca:	2200      	movs	r2, #0
 8009acc:	2105      	movs	r1, #5
 8009ace:	203d      	movs	r0, #61	@ 0x3d
 8009ad0:	f7f8 f836 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009ad4:	203d      	movs	r0, #61	@ 0x3d
 8009ad6:	f7f8 f84d 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009ada:	bf00      	nop
 8009adc:	3738      	adds	r7, #56	@ 0x38
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	40028000 	.word	0x40028000
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	58020800 	.word	0x58020800
 8009af0:	58020000 	.word	0x58020000
 8009af4:	58020400 	.word	0x58020400
 8009af8:	58021800 	.word	0x58021800

08009afc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009b04:	4b04      	ldr	r3, [pc, #16]	@ (8009b18 <HAL_ETH_RxCpltCallback+0x1c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fd37 	bl	800a57c <osSemaphoreRelease>
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	24000668 	.word	0x24000668

08009b1c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009b1c:	b5b0      	push	{r4, r5, r7, lr}
 8009b1e:	b0ae      	sub	sp, #184	@ 0xb8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009b30:	4ba1      	ldr	r3, [pc, #644]	@ (8009db8 <low_level_init+0x29c>)
 8009b32:	4aa2      	ldr	r2, [pc, #648]	@ (8009dbc <low_level_init+0x2a0>)
 8009b34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8009b3c:	2380      	movs	r3, #128	@ 0x80
 8009b3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8009b42:	23e1      	movs	r3, #225	@ 0xe1
 8009b44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8009b5a:	4a97      	ldr	r2, [pc, #604]	@ (8009db8 <low_level_init+0x29c>)
 8009b5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009b60:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009b62:	4b95      	ldr	r3, [pc, #596]	@ (8009db8 <low_level_init+0x29c>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009b68:	4b93      	ldr	r3, [pc, #588]	@ (8009db8 <low_level_init+0x29c>)
 8009b6a:	4a95      	ldr	r2, [pc, #596]	@ (8009dc0 <low_level_init+0x2a4>)
 8009b6c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009b6e:	4b92      	ldr	r3, [pc, #584]	@ (8009db8 <low_level_init+0x29c>)
 8009b70:	4a94      	ldr	r2, [pc, #592]	@ (8009dc4 <low_level_init+0x2a8>)
 8009b72:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8009b74:	4b90      	ldr	r3, [pc, #576]	@ (8009db8 <low_level_init+0x29c>)
 8009b76:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8009b7a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
	uint32_t id0 = HAL_GetUIDw0();
 8009b7c:	f7f7 ff08 	bl	8001990 <HAL_GetUIDw0>
 8009b80:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

	uint8_t mac[6];

	// first 3 bytes are ST specific max prefixes
	mac[0] = 0x00;
 8009b84:	2300      	movs	r3, #0
 8009b86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	mac[1] = 0x80;
 8009b8a:	2380      	movs	r3, #128	@ 0x80
 8009b8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	mac[2] = 0xE1;
 8009b90:	23e1      	movs	r3, #225	@ 0xe1
 8009b92:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	// last 3 bytes are used to set unique mac based on UID
	mac[3] = (id0 >> 16) & 0x000000FF;
 8009b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b9a:	0c1b      	lsrs	r3, r3, #16
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	mac[4] = (id0 >> 8) & 0x000000FF;
 8009ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ba6:	0a1b      	lsrs	r3, r3, #8
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	mac[5] = (id0 >> 0) & 0x000000FF;
 8009bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	heth.Init.MACAddr = &mac[0];
 8009bb8:	4a7f      	ldr	r2, [pc, #508]	@ (8009db8 <low_level_init+0x29c>)
 8009bba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009bbe:	6053      	str	r3, [r2, #4]

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009bc0:	487d      	ldr	r0, [pc, #500]	@ (8009db8 <low_level_init+0x29c>)
 8009bc2:	f7f8 f875 	bl	8001cb0 <HAL_ETH_Init>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009bcc:	2234      	movs	r2, #52	@ 0x34
 8009bce:	2100      	movs	r1, #0
 8009bd0:	487d      	ldr	r0, [pc, #500]	@ (8009dc8 <low_level_init+0x2ac>)
 8009bd2:	f011 f920 	bl	801ae16 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8009dc8 <low_level_init+0x2ac>)
 8009bd8:	2221      	movs	r2, #33	@ 0x21
 8009bda:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009bdc:	4b7a      	ldr	r3, [pc, #488]	@ (8009dc8 <low_level_init+0x2ac>)
 8009bde:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009be2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009be4:	4b78      	ldr	r3, [pc, #480]	@ (8009dc8 <low_level_init+0x2ac>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009bea:	4878      	ldr	r0, [pc, #480]	@ (8009dcc <low_level_init+0x2b0>)
 8009bec:	f006 f8ac 	bl	800fd48 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2206      	movs	r2, #6
 8009bf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8009db8 <low_level_init+0x29c>)
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009c04:	4b6c      	ldr	r3, [pc, #432]	@ (8009db8 <low_level_init+0x29c>)
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	785a      	ldrb	r2, [r3, #1]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009c10:	4b69      	ldr	r3, [pc, #420]	@ (8009db8 <low_level_init+0x29c>)
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	789a      	ldrb	r2, [r3, #2]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009c1c:	4b66      	ldr	r3, [pc, #408]	@ (8009db8 <low_level_init+0x29c>)
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	78da      	ldrb	r2, [r3, #3]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009c28:	4b63      	ldr	r3, [pc, #396]	@ (8009db8 <low_level_init+0x29c>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	791a      	ldrb	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009c34:	4b60      	ldr	r3, [pc, #384]	@ (8009db8 <low_level_init+0x29c>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	795a      	ldrb	r2, [r3, #5]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009c46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8009c4e:	f043 030a 	orr.w	r3, r3, #10
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c60:	e012      	b.n	8009c88 <low_level_init+0x16c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c66:	4613      	mov	r3, r2
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	025b      	lsls	r3, r3, #9
 8009c6e:	4a58      	ldr	r2, [pc, #352]	@ (8009dd0 <low_level_init+0x2b4>)
 8009c70:	441a      	add	r2, r3
 8009c72:	2300      	movs	r3, #0
 8009c74:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8009c78:	484f      	ldr	r0, [pc, #316]	@ (8009db8 <low_level_init+0x29c>)
 8009c7a:	f7f8 f8f5 	bl	8001e68 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c82:	3301      	adds	r3, #1
 8009c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d9e8      	bls.n	8009c62 <low_level_init+0x146>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009c90:	2300      	movs	r3, #0
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c94:	2300      	movs	r3, #0
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fbec 	bl	800a47c <osSemaphoreCreate>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8009dd4 <low_level_init+0x2b8>)
 8009ca8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009caa:	4b4b      	ldr	r3, [pc, #300]	@ (8009dd8 <low_level_init+0x2bc>)
 8009cac:	f107 0408 	add.w	r4, r7, #8
 8009cb0:	461d      	mov	r5, r3
 8009cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009cbe:	f107 0308 	add.w	r3, r7, #8
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fadc 	bl	800a282 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009cca:	4944      	ldr	r1, [pc, #272]	@ (8009ddc <low_level_init+0x2c0>)
 8009ccc:	4844      	ldr	r0, [pc, #272]	@ (8009de0 <low_level_init+0x2c4>)
 8009cce:	f7f7 fc96 	bl	80015fe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009cd2:	4843      	ldr	r0, [pc, #268]	@ (8009de0 <low_level_init+0x2c4>)
 8009cd4:	f7f7 fcc5 	bl	8001662 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009cd8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d164      	bne.n	8009daa <low_level_init+0x28e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009ce0:	483f      	ldr	r0, [pc, #252]	@ (8009de0 <low_level_init+0x2c4>)
 8009ce2:	f7f7 fd66 	bl	80017b2 <LAN8742_GetLinkState>
 8009ce6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	dc06      	bgt.n	8009d00 <low_level_init+0x1e4>
    {
      netif_set_link_down(netif);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f006 fb29 	bl	801034a <netif_set_link_down>
      netif_set_down(netif);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f006 fabd 	bl	8010278 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009cfe:	e056      	b.n	8009dae <low_level_init+0x292>
      switch (PHYLinkState)
 8009d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d04:	3b02      	subs	r3, #2
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d82a      	bhi.n	8009d60 <low_level_init+0x244>
 8009d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d10 <low_level_init+0x1f4>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d21 	.word	0x08009d21
 8009d14:	08009d33 	.word	0x08009d33
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d53 	.word	0x08009d53
        duplex = ETH_FULLDUPLEX_MODE;
 8009d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        speed = ETH_SPEED_100M;
 8009d28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        break;
 8009d30:	e01f      	b.n	8009d72 <low_level_init+0x256>
        duplex = ETH_HALFDUPLEX_MODE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        speed = ETH_SPEED_100M;
 8009d38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        break;
 8009d40:	e017      	b.n	8009d72 <low_level_init+0x256>
        duplex = ETH_FULLDUPLEX_MODE;
 8009d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        speed = ETH_SPEED_10M;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        break;
 8009d50:	e00f      	b.n	8009d72 <low_level_init+0x256>
        duplex = ETH_HALFDUPLEX_MODE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        speed = ETH_SPEED_10M;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        break;
 8009d5e:	e008      	b.n	8009d72 <low_level_init+0x256>
        duplex = ETH_FULLDUPLEX_MODE;
 8009d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        speed = ETH_SPEED_100M;
 8009d68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        break;      
 8009d70:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 8009d72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009d76:	4619      	mov	r1, r3
 8009d78:	480f      	ldr	r0, [pc, #60]	@ (8009db8 <low_level_init+0x29c>)
 8009d7a:	f7f8 fe65 	bl	8002a48 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d82:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8009d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d88:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009d8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4809      	ldr	r0, [pc, #36]	@ (8009db8 <low_level_init+0x29c>)
 8009d92:	f7f9 f82d 	bl	8002df0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8009d96:	4808      	ldr	r0, [pc, #32]	@ (8009db8 <low_level_init+0x29c>)
 8009d98:	f7f8 f8a7 	bl	8001eea <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f006 fa1f 	bl	80101e0 <netif_set_up>
    netif_set_link_up(netif);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f006 faa3 	bl	80102ee <netif_set_link_up>
}
 8009da8:	e001      	b.n	8009dae <low_level_init+0x292>
    Error_Handler();
 8009daa:	f7f7 f9ad 	bl	8001108 <Error_Handler>
}
 8009dae:	bf00      	nop
 8009db0:	37b8      	adds	r7, #184	@ 0xb8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bdb0      	pop	{r4, r5, r7, pc}
 8009db6:	bf00      	nop
 8009db8:	2400066c 	.word	0x2400066c
 8009dbc:	40028000 	.word	0x40028000
 8009dc0:	30040060 	.word	0x30040060
 8009dc4:	30040000 	.word	0x30040000
 8009dc8:	240006dc 	.word	0x240006dc
 8009dcc:	0801f2c4 	.word	0x0801f2c4
 8009dd0:	30040200 	.word	0x30040200
 8009dd4:	24000668 	.word	0x24000668
 8009dd8:	0801c25c 	.word	0x0801c25c
 8009ddc:	24000010 	.word	0x24000010
 8009de0:	240007e0 	.word	0x240007e0

08009de4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b092      	sub	sp, #72	@ 0x48
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df2:	2300      	movs	r3, #0
 8009df4:	643b      	str	r3, [r7, #64]	@ 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009dfc:	f107 0308 	add.w	r3, r7, #8
 8009e00:	2230      	movs	r2, #48	@ 0x30
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f011 f806 	bl	801ae16 <memset>
  
  for(q = p; q != NULL; q = q->next)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e0e:	e04b      	b.n	8009ea8 <low_level_output+0xc4>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8009e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d902      	bls.n	8009e1c <low_level_output+0x38>
      return ERR_IF;
 8009e16:	f06f 030b 	mvn.w	r3, #11
 8009e1a:	e056      	b.n	8009eca <low_level_output+0xe6>
    
    Txbuffer[i].buffer = q->payload;
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e1e:	6859      	ldr	r1, [r3, #4]
 8009e20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e22:	4613      	mov	r3, r2
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	3348      	adds	r3, #72	@ 0x48
 8009e2c:	443b      	add	r3, r7
 8009e2e:	3b40      	subs	r3, #64	@ 0x40
 8009e30:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e34:	895b      	ldrh	r3, [r3, #10]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	3348      	adds	r3, #72	@ 0x48
 8009e44:	443b      	add	r3, r7
 8009e46:	3b3c      	subs	r3, #60	@ 0x3c
 8009e48:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8009e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e4c:	895b      	ldrh	r3, [r3, #10]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e52:	4413      	add	r3, r2
 8009e54:	643b      	str	r3, [r7, #64]	@ 0x40
    
    if(i>0)
 8009e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d011      	beq.n	8009e80 <low_level_output+0x9c>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e5e:	1e5a      	subs	r2, r3, #1
 8009e60:	f107 0008 	add.w	r0, r7, #8
 8009e64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e66:	460b      	mov	r3, r1
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	440b      	add	r3, r1
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	18c1      	adds	r1, r0, r3
 8009e70:	4613      	mov	r3, r2
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	3348      	adds	r3, #72	@ 0x48
 8009e7a:	443b      	add	r3, r7
 8009e7c:	3b38      	subs	r3, #56	@ 0x38
 8009e7e:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8009e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <low_level_output+0xb8>
    {
      Txbuffer[i].next = NULL;
 8009e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	3348      	adds	r3, #72	@ 0x48
 8009e94:	443b      	add	r3, r7
 8009e96:	3b38      	subs	r3, #56	@ 0x38
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1b0      	bne.n	8009e10 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8009eae:	4a09      	ldr	r2, [pc, #36]	@ (8009ed4 <low_level_output+0xf0>)
 8009eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eb2:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009eb4:	4a07      	ldr	r2, [pc, #28]	@ (8009ed4 <low_level_output+0xf0>)
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009ebc:	2214      	movs	r2, #20
 8009ebe:	4905      	ldr	r1, [pc, #20]	@ (8009ed4 <low_level_output+0xf0>)
 8009ec0:	4805      	ldr	r0, [pc, #20]	@ (8009ed8 <low_level_output+0xf4>)
 8009ec2:	f7f8 f921 	bl	8002108 <HAL_ETH_Transmit>
  
  return errval;
 8009ec6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3748      	adds	r7, #72	@ 0x48
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	240006dc 	.word	0x240006dc
 8009ed8:	2400066c 	.word	0x2400066c

08009edc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	@ 0x28
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4817      	ldr	r0, [pc, #92]	@ (8009f50 <low_level_input+0x74>)
 8009ef4:	f7f8 fa75 	bl	80023e2 <HAL_ETH_GetRxDataBuffer>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d122      	bne.n	8009f44 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	4619      	mov	r1, r3
 8009f04:	4812      	ldr	r0, [pc, #72]	@ (8009f50 <low_level_input+0x74>)
 8009f06:	f7f8 fb0a 	bl	800251e <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009f0a:	4811      	ldr	r0, [pc, #68]	@ (8009f50 <low_level_input+0x74>)
 8009f0c:	f7f8 fb3a 	bl	8002584 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fcee 	bl	80098f8 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009f1c:	480d      	ldr	r0, [pc, #52]	@ (8009f54 <low_level_input+0x78>)
 8009f1e:	f005 ff8f 	bl	800fe40 <memp_malloc_pool>
 8009f22:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	4a0c      	ldr	r2, [pc, #48]	@ (8009f58 <low_level_input+0x7c>)
 8009f28:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	b299      	uxth	r1, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009f34:	9201      	str	r2, [sp, #4]
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	2004      	movs	r0, #4
 8009f3e:	f006 fc2f 	bl	80107a0 <pbuf_alloced_custom>
 8009f42:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8009f44:	69fb      	ldr	r3, [r7, #28]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2400066c 	.word	0x2400066c
 8009f54:	0801f2c4 	.word	0x0801f2c4
 8009f58:	0800a019 	.word	0x0800a019

08009f5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009f68:	4b12      	ldr	r3, [pc, #72]	@ (8009fb4 <ethernetif_input+0x58>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fab5 	bl	800a4e0 <osSemaphoreWait>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f5      	bne.n	8009f68 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009f7c:	480e      	ldr	r0, [pc, #56]	@ (8009fb8 <ethernetif_input+0x5c>)
 8009f7e:	f010 fd31 	bl	801a9e4 <sys_mutex_lock>
        p = low_level_input( netif );
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7ff ffaa 	bl	8009edc <low_level_input>
 8009f88:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	68b8      	ldr	r0, [r7, #8]
 8009f98:	4798      	blx	r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 8009fa0:	68b8      	ldr	r0, [r7, #8]
 8009fa2:	f006 fddb 	bl	8010b5c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009fa6:	4804      	ldr	r0, [pc, #16]	@ (8009fb8 <ethernetif_input+0x5c>)
 8009fa8:	f010 fd2b 	bl	801aa02 <sys_mutex_unlock>
      } while(p!=NULL);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e4      	bne.n	8009f7c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009fb2:	e7d9      	b.n	8009f68 <ethernetif_input+0xc>
 8009fb4:	24000668 	.word	0x24000668
 8009fb8:	2400459c 	.word	0x2400459c

08009fbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <ethernetif_init+0x1c>
 8009fca:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <ethernetif_init+0x48>)
 8009fcc:	f240 2251 	movw	r2, #593	@ 0x251
 8009fd0:	490d      	ldr	r1, [pc, #52]	@ (800a008 <ethernetif_init+0x4c>)
 8009fd2:	480e      	ldr	r0, [pc, #56]	@ (800a00c <ethernetif_init+0x50>)
 8009fd4:	f010 fe66 	bl	801aca4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2273      	movs	r2, #115	@ 0x73
 8009fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->name[1] = IFNAME1;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2274      	movs	r2, #116	@ 0x74
 8009fe4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a09      	ldr	r2, [pc, #36]	@ (800a010 <ethernetif_init+0x54>)
 8009fec:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a08      	ldr	r2, [pc, #32]	@ (800a014 <ethernetif_init+0x58>)
 8009ff2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fd91 	bl	8009b1c <low_level_init>

  return ERR_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	0801c278 	.word	0x0801c278
 800a008:	0801c294 	.word	0x0801c294
 800a00c:	0801c2a4 	.word	0x0801c2a4
 800a010:	080189a5 	.word	0x080189a5
 800a014:	08009de5 	.word	0x08009de5

0800a018 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	891b      	ldrh	r3, [r3, #8]
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7ff fc62 	bl	80098f8 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	4803      	ldr	r0, [pc, #12]	@ (800a044 <pbuf_free_custom+0x2c>)
 800a038:	f005 ff76 	bl	800ff28 <memp_free_pool>
}
 800a03c:	bf00      	nop
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	0801f2c4 	.word	0x0801f2c4

0800a048 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a04c:	f7f7 fc88 	bl	8001960 <HAL_GetTick>
 800a050:	4603      	mov	r3, r0
}
 800a052:	4618      	mov	r0, r3
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a05c:	4802      	ldr	r0, [pc, #8]	@ (800a068 <ETH_PHY_IO_Init+0x10>)
 800a05e:	f7f8 fee1 	bl	8002e24 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	bd80      	pop	{r7, pc}
 800a068:	2400066c 	.word	0x2400066c

0800a06c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  return 0;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	4807      	ldr	r0, [pc, #28]	@ (800a0ac <ETH_PHY_IO_ReadReg+0x30>)
 800a090:	f7f8 fc32 	bl	80028f8 <HAL_ETH_ReadPHYRegister>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a09a:	f04f 33ff 	mov.w	r3, #4294967295
 800a09e:	e000      	b.n	800a0a2 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2400066c 	.word	0x2400066c

0800a0b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	4807      	ldr	r0, [pc, #28]	@ (800a0e0 <ETH_PHY_IO_WriteReg+0x30>)
 800a0c4:	f7f8 fc6c 	bl	80029a0 <HAL_ETH_WritePHYRegister>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d2:	e000      	b.n	800a0d6 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	2400066c 	.word	0x2400066c

0800a0e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a0e8:	f7f7 fc3a 	bl	8001960 <HAL_GetTick>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */
 
void ethernet_link_thread(void const * argument)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b0a0      	sub	sp, #128	@ 0x80
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a100:	2300      	movs	r3, #0
 800a102:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a104:	2300      	movs	r3, #0
 800a106:	677b      	str	r3, [r7, #116]	@ 0x74
  
  struct netif *netif = (struct netif *) argument;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	673b      	str	r3, [r7, #112]	@ 0x70

/* USER CODE END ETH link init */
  
  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a10c:	483a      	ldr	r0, [pc, #232]	@ (800a1f8 <ethernet_link_thread+0x104>)
 800a10e:	f7f7 fb50 	bl	80017b2 <LAN8742_GetLinkState>
 800a112:	4603      	mov	r3, r0
 800a114:	66fb      	str	r3, [r7, #108]	@ 0x6c
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a116:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a118:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800a11c:	089b      	lsrs	r3, r3, #2
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <ethernet_link_thread+0x4e>
 800a128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d809      	bhi.n	800a142 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a12e:	4833      	ldr	r0, [pc, #204]	@ (800a1fc <ethernet_link_thread+0x108>)
 800a130:	f7f7 ff74 	bl	800201c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a134:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a136:	f006 f89f 	bl	8010278 <netif_set_down>
    netif_set_link_down(netif);
 800a13a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a13c:	f006 f905 	bl	801034a <netif_set_link_down>
 800a140:	e055      	b.n	800a1ee <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a144:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d14e      	bne.n	800a1ee <ethernet_link_thread+0xfa>
 800a150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a152:	2b01      	cmp	r3, #1
 800a154:	d94b      	bls.n	800a1ee <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800a156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a158:	3b02      	subs	r3, #2
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d82a      	bhi.n	800a1b4 <ethernet_link_thread+0xc0>
 800a15e:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <ethernet_link_thread+0x70>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a187 	.word	0x0800a187
 800a16c:	0800a197 	.word	0x0800a197
 800a170:	0800a1a7 	.word	0x0800a1a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a178:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a17a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a17e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a184:	e017      	b.n	800a1b6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a186:	2300      	movs	r3, #0
 800a188:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a18a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a18e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a190:	2301      	movs	r3, #1
 800a192:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a194:	e00f      	b.n	800a1b6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a19a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a19c:	2300      	movs	r3, #0
 800a19e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a1a4:	e007      	b.n	800a1b6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a1b2:	e000      	b.n	800a1b6 <ethernet_link_thread+0xc2>
    default:
      break;      
 800a1b4:	bf00      	nop
    }
    
    if(linkchanged)
 800a1b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d018      	beq.n	800a1ee <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	480e      	ldr	r0, [pc, #56]	@ (800a1fc <ethernet_link_thread+0x108>)
 800a1c4:	f7f8 fc40 	bl	8002a48 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a1c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a1d0:	f107 0308 	add.w	r3, r7, #8
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4809      	ldr	r0, [pc, #36]	@ (800a1fc <ethernet_link_thread+0x108>)
 800a1d8:	f7f8 fe0a 	bl	8002df0 <HAL_ETH_SetMACConfig>
      
      HAL_ETH_Start_IT(&heth);
 800a1dc:	4807      	ldr	r0, [pc, #28]	@ (800a1fc <ethernet_link_thread+0x108>)
 800a1de:	f7f7 fe84 	bl	8001eea <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a1e2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a1e4:	f005 fffc 	bl	80101e0 <netif_set_up>
      netif_set_link_up(netif);
 800a1e8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a1ea:	f006 f880 	bl	80102ee <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a1ee:	2064      	movs	r0, #100	@ 0x64
 800a1f0:	f000 f893 	bl	800a31a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a1f4:	e78a      	b.n	800a10c <ethernet_link_thread+0x18>
 800a1f6:	bf00      	nop
 800a1f8:	240007e0 	.word	0x240007e0
 800a1fc:	2400066c 	.word	0x2400066c

0800a200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a20e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a212:	2b84      	cmp	r3, #132	@ 0x84
 800a214:	d005      	beq.n	800a222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4413      	add	r3, r2
 800a21e:	3303      	adds	r3, #3
 800a220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a222:	68fb      	ldr	r3, [r7, #12]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a236:	f3ef 8305 	mrs	r3, IPSR
 800a23a:	607b      	str	r3, [r7, #4]
  return(result);
 800a23c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bf14      	ite	ne
 800a242:	2301      	movne	r3, #1
 800a244:	2300      	moveq	r3, #0
 800a246:	b2db      	uxtb	r3, r3
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a258:	f001 fd4c 	bl	800bcf4 <vTaskStartScheduler>
  
  return osOK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	bd80      	pop	{r7, pc}

0800a262 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a266:	f7ff ffe3 	bl	800a230 <inHandlerMode>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a270:	f001 fe5e 	bl	800bf30 <xTaskGetTickCountFromISR>
 800a274:	4603      	mov	r3, r0
 800a276:	e002      	b.n	800a27e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a278:	f001 fe4a 	bl	800bf10 <xTaskGetTickCount>
 800a27c:	4603      	mov	r3, r0
  }
}
 800a27e:	4618      	mov	r0, r3
 800a280:	bd80      	pop	{r7, pc}

0800a282 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a282:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a284:	b089      	sub	sp, #36	@ 0x24
 800a286:	af04      	add	r7, sp, #16
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d020      	beq.n	800a2d6 <osThreadCreate+0x54>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01c      	beq.n	800a2d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685c      	ldr	r4, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691e      	ldr	r6, [r3, #16]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff ffa6 	bl	800a200 <makeFreeRtosPriority>
 800a2b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2be:	9202      	str	r2, [sp, #8]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	9100      	str	r1, [sp, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f001 fb44 	bl	800b958 <xTaskCreateStatic>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e01c      	b.n	800a310 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685c      	ldr	r4, [r3, #4]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff ff88 	bl	800a200 <makeFreeRtosPriority>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	f107 030c 	add.w	r3, r7, #12
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	9200      	str	r2, [sp, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	4629      	mov	r1, r5
 800a300:	4620      	mov	r0, r4
 800a302:	f001 fb89 	bl	800ba18 <xTaskCreate>
 800a306:	4603      	mov	r3, r0
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d001      	beq.n	800a310 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a310:	68fb      	ldr	r3, [r7, #12]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a31a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <osDelay+0x16>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	e000      	b.n	800a332 <osDelay+0x18>
 800a330:	2301      	movs	r3, #1
 800a332:	4618      	mov	r0, r3
 800a334:	f001 fca8 	bl	800bc88 <vTaskDelay>
  
  return osOK;
 800a338:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d007      	beq.n	800a362 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	4619      	mov	r1, r3
 800a358:	2001      	movs	r0, #1
 800a35a:	f000 fc8c 	bl	800ac76 <xQueueCreateMutexStatic>
 800a35e:	4603      	mov	r3, r0
 800a360:	e003      	b.n	800a36a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a362:	2001      	movs	r0, #1
 800a364:	f000 fc6f 	bl	800ac46 <xQueueCreateMutex>
 800a368:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a37e:	2300      	movs	r3, #0
 800a380:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <osMutexWait+0x18>
    return osErrorParameter;
 800a388:	2380      	movs	r3, #128	@ 0x80
 800a38a:	e03a      	b.n	800a402 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d103      	bne.n	800a3a0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	e009      	b.n	800a3b4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d006      	beq.n	800a3b4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <osMutexWait+0x40>
      ticks = 1;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a3b4:	f7ff ff3c 	bl	800a230 <inHandlerMode>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d017      	beq.n	800a3ee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 f890 	bl	800b4ec <xQueueReceiveFromISR>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d001      	beq.n	800a3d6 <osMutexWait+0x62>
      return osErrorOS;
 800a3d2:	23ff      	movs	r3, #255	@ 0xff
 800a3d4:	e015      	b.n	800a402 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d011      	beq.n	800a400 <osMutexWait+0x8c>
 800a3dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a40c <osMutexWait+0x98>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	e008      	b.n	800a400 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 ff6b 	bl	800b2cc <xQueueSemaphoreTake>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d001      	beq.n	800a400 <osMutexWait+0x8c>
    return osErrorOS;
 800a3fc:	23ff      	movs	r3, #255	@ 0xff
 800a3fe:	e000      	b.n	800a402 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a420:	f7ff ff06 	bl	800a230 <inHandlerMode>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d016      	beq.n	800a458 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a42a:	f107 0308 	add.w	r3, r7, #8
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fdd8 	bl	800afe6 <xQueueGiveFromISR>
 800a436:	4603      	mov	r3, r0
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d001      	beq.n	800a440 <osMutexRelease+0x30>
      return osErrorOS;
 800a43c:	23ff      	movs	r3, #255	@ 0xff
 800a43e:	e017      	b.n	800a470 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d013      	beq.n	800a46e <osMutexRelease+0x5e>
 800a446:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <osMutexRelease+0x68>)
 800a448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	e00a      	b.n	800a46e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a458:	2300      	movs	r3, #0
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fc24 	bl	800acac <xQueueGenericSend>
 800a464:	4603      	mov	r3, r0
 800a466:	2b01      	cmp	r3, #1
 800a468:	d001      	beq.n	800a46e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a46a:	23ff      	movs	r3, #255	@ 0xff
 800a46c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af02      	add	r7, sp, #8
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00f      	beq.n	800a4ae <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d10a      	bne.n	800a4aa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2203      	movs	r2, #3
 800a49a:	9200      	str	r2, [sp, #0]
 800a49c:	2200      	movs	r2, #0
 800a49e:	2100      	movs	r1, #0
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	f000 fad9 	bl	800aa58 <xQueueGenericCreateStatic>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	e016      	b.n	800a4d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e014      	b.n	800a4d8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d110      	bne.n	800a4d6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f000 fb4a 	bl	800ab52 <xQueueGenericCreate>
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <osSemaphoreCreate+0x56>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fbed 	bl	800acac <xQueueGenericSend>
      return sema;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	e000      	b.n	800a4d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a4d6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a4f4:	2380      	movs	r3, #128	@ 0x80
 800a4f6:	e03a      	b.n	800a56e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a502:	d103      	bne.n	800a50c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e009      	b.n	800a520 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d006      	beq.n	800a520 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <osSemaphoreWait+0x40>
      ticks = 1;
 800a51c:	2301      	movs	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a520:	f7ff fe86 	bl	800a230 <inHandlerMode>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d017      	beq.n	800a55a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	461a      	mov	r2, r3
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 ffda 	bl	800b4ec <xQueueReceiveFromISR>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d001      	beq.n	800a542 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a53e:	23ff      	movs	r3, #255	@ 0xff
 800a540:	e015      	b.n	800a56e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d011      	beq.n	800a56c <osSemaphoreWait+0x8c>
 800a548:	4b0b      	ldr	r3, [pc, #44]	@ (800a578 <osSemaphoreWait+0x98>)
 800a54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	e008      	b.n	800a56c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 feb5 	bl	800b2cc <xQueueSemaphoreTake>
 800a562:	4603      	mov	r3, r0
 800a564:	2b01      	cmp	r3, #1
 800a566:	d001      	beq.n	800a56c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a568:	23ff      	movs	r3, #255	@ 0xff
 800a56a:	e000      	b.n	800a56e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a588:	2300      	movs	r3, #0
 800a58a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a58c:	f7ff fe50 	bl	800a230 <inHandlerMode>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d016      	beq.n	800a5c4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a596:	f107 0308 	add.w	r3, r7, #8
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fd22 	bl	800afe6 <xQueueGiveFromISR>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d001      	beq.n	800a5ac <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a5a8:	23ff      	movs	r3, #255	@ 0xff
 800a5aa:	e017      	b.n	800a5dc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d013      	beq.n	800a5da <osSemaphoreRelease+0x5e>
 800a5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e4 <osSemaphoreRelease+0x68>)
 800a5b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	e00a      	b.n	800a5da <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fb6e 	bl	800acac <xQueueGenericSend>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d001      	beq.n	800a5da <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a5d6:	23ff      	movs	r3, #255	@ 0xff
 800a5d8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a5da:	68fb      	ldr	r3, [r7, #12]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a5f0:	f7ff fe1e 	bl	800a230 <inHandlerMode>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a5fa:	2382      	movs	r3, #130	@ 0x82
 800a5fc:	e003      	b.n	800a606 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 f834 	bl	800b66c <vQueueDelete>

  return osOK; 
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a60e:	b590      	push	{r4, r7, lr}
 800a610:	b085      	sub	sp, #20
 800a612:	af02      	add	r7, sp, #8
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d011      	beq.n	800a644 <osMessageCreate+0x36>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00d      	beq.n	800a644 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6859      	ldr	r1, [r3, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2400      	movs	r4, #0
 800a63a:	9400      	str	r4, [sp, #0]
 800a63c:	f000 fa0c 	bl	800aa58 <xQueueGenericCreateStatic>
 800a640:	4603      	mov	r3, r0
 800a642:	e008      	b.n	800a656 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	4619      	mov	r1, r3
 800a650:	f000 fa7f 	bl	800ab52 <xQueueGenericCreate>
 800a654:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd90      	pop	{r4, r7, pc}
	...

0800a660 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <osMessagePut+0x1e>
    ticks = 1;
 800a67a:	2301      	movs	r3, #1
 800a67c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a67e:	f7ff fdd7 	bl	800a230 <inHandlerMode>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d018      	beq.n	800a6ba <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a688:	f107 0210 	add.w	r2, r7, #16
 800a68c:	f107 0108 	add.w	r1, r7, #8
 800a690:	2300      	movs	r3, #0
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fc0c 	bl	800aeb0 <xQueueGenericSendFromISR>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d001      	beq.n	800a6a2 <osMessagePut+0x42>
      return osErrorOS;
 800a69e:	23ff      	movs	r3, #255	@ 0xff
 800a6a0:	e018      	b.n	800a6d4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d014      	beq.n	800a6d2 <osMessagePut+0x72>
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a6dc <osMessagePut+0x7c>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	e00b      	b.n	800a6d2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a6ba:	f107 0108 	add.w	r1, r7, #8
 800a6be:	2300      	movs	r3, #0
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 faf2 	bl	800acac <xQueueGenericSend>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d001      	beq.n	800a6d2 <osMessagePut+0x72>
      return osErrorOS;
 800a6ce:	23ff      	movs	r3, #255	@ 0xff
 800a6d0:	e000      	b.n	800a6d4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	e000ed04 	.word	0xe000ed04

0800a6e0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b08b      	sub	sp, #44	@ 0x2c
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a6fa:	2380      	movs	r3, #128	@ 0x80
 800a6fc:	617b      	str	r3, [r7, #20]
    return event;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	461c      	mov	r4, r3
 800a702:	f107 0314 	add.w	r3, r7, #20
 800a706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a70a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a70e:	e054      	b.n	800a7ba <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a710:	2300      	movs	r3, #0
 800a712:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d103      	bne.n	800a728 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a720:	f04f 33ff 	mov.w	r3, #4294967295
 800a724:	627b      	str	r3, [r7, #36]	@ 0x24
 800a726:	e009      	b.n	800a73c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d006      	beq.n	800a73c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <osMessageGet+0x5c>
      ticks = 1;
 800a738:	2301      	movs	r3, #1
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a73c:	f7ff fd78 	bl	800a230 <inHandlerMode>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d01c      	beq.n	800a780 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a746:	f107 0220 	add.w	r2, r7, #32
 800a74a:	f107 0314 	add.w	r3, r7, #20
 800a74e:	3304      	adds	r3, #4
 800a750:	4619      	mov	r1, r3
 800a752:	68b8      	ldr	r0, [r7, #8]
 800a754:	f000 feca 	bl	800b4ec <xQueueReceiveFromISR>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d102      	bne.n	800a764 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a75e:	2310      	movs	r3, #16
 800a760:	617b      	str	r3, [r7, #20]
 800a762:	e001      	b.n	800a768 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d01d      	beq.n	800a7aa <osMessageGet+0xca>
 800a76e:	4b15      	ldr	r3, [pc, #84]	@ (800a7c4 <osMessageGet+0xe4>)
 800a770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	e014      	b.n	800a7aa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a780:	f107 0314 	add.w	r3, r7, #20
 800a784:	3304      	adds	r3, #4
 800a786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a788:	4619      	mov	r1, r3
 800a78a:	68b8      	ldr	r0, [r7, #8]
 800a78c:	f000 fcbc 	bl	800b108 <xQueueReceive>
 800a790:	4603      	mov	r3, r0
 800a792:	2b01      	cmp	r3, #1
 800a794:	d102      	bne.n	800a79c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a796:	2310      	movs	r3, #16
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	e006      	b.n	800a7aa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <osMessageGet+0xc6>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e000      	b.n	800a7a8 <osMessageGet+0xc8>
 800a7a6:	2340      	movs	r3, #64	@ 0x40
 800a7a8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	461c      	mov	r4, r3
 800a7ae:	f107 0314 	add.w	r3, r7, #20
 800a7b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	372c      	adds	r7, #44	@ 0x2c
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd90      	pop	{r4, r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a7d0:	f7ff fd2e 	bl	800a230 <inHandlerMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 ff27 	bl	800b62e <uxQueueMessagesWaitingFromISR>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	e003      	b.n	800a7ec <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 ff03 	bl	800b5f0 <uxQueueMessagesWaiting>
 800a7ea:	4603      	mov	r3, r0
  }
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a7fc:	f7ff fd18 	bl	800a230 <inHandlerMode>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <osMessageDelete+0x16>
    return osErrorISR;
 800a806:	2382      	movs	r3, #130	@ 0x82
 800a808:	e003      	b.n	800a812 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 ff2e 	bl	800b66c <vQueueDelete>

  return osOK; 
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f103 0208 	add.w	r2, r3, #8
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f103 0208 	add.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f103 0208 	add.w	r2, r3, #8
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d103      	bne.n	800a8dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	e00c      	b.n	800a8f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e002      	b.n	800a8ea <vListInsert+0x2e>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d2f6      	bcs.n	800a8e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6892      	ldr	r2, [r2, #8]
 800a944:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	6852      	ldr	r2, [r2, #4]
 800a94e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d103      	bne.n	800a962 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689a      	ldr	r2, [r3, #8]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	1e5a      	subs	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
	...

0800a984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a9b0:	f002 f93a 	bl	800cc28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9bc:	68f9      	ldr	r1, [r7, #12]
 800a9be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	68f9      	ldr	r1, [r7, #12]
 800a9e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	441a      	add	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	22ff      	movs	r2, #255	@ 0xff
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	22ff      	movs	r2, #255	@ 0xff
 800a9fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d114      	bne.n	800aa30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d01a      	beq.n	800aa44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3310      	adds	r3, #16
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 fbda 	bl	800c1cc <xTaskRemoveFromEventList>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d012      	beq.n	800aa44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <xQueueGenericReset+0xd0>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e009      	b.n	800aa44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3310      	adds	r3, #16
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fef0 	bl	800a81a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3324      	adds	r3, #36	@ 0x24
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff feeb 	bl	800a81a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa44:	f002 f922 	bl	800cc8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa48:	2301      	movs	r3, #1
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	e000ed04 	.word	0xe000ed04

0800aa58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08e      	sub	sp, #56	@ 0x38
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10b      	bne.n	800aa84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <xQueueGenericCreateStatic+0x56>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <xQueueGenericCreateStatic+0x5a>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <xQueueGenericCreateStatic+0x5c>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10b      	bne.n	800aad0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	623b      	str	r3, [r7, #32]
}
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
 800aace:	e7fd      	b.n	800aacc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <xQueueGenericCreateStatic+0x84>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <xQueueGenericCreateStatic+0x88>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <xQueueGenericCreateStatic+0x8a>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10b      	bne.n	800aafe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	61fb      	str	r3, [r7, #28]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aafe:	2348      	movs	r3, #72	@ 0x48
 800ab00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b48      	cmp	r3, #72	@ 0x48
 800ab06:	d00b      	beq.n	800ab20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	61bb      	str	r3, [r7, #24]
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ab26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	68b9      	ldr	r1, [r7, #8]
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 f846 	bl	800abd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3730      	adds	r7, #48	@ 0x30
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b08a      	sub	sp, #40	@ 0x28
 800ab56:	af02      	add	r7, sp, #8
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	613b      	str	r3, [r7, #16]
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	e004      	b.n	800ab94 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	fb02 f303 	mul.w	r3, r2, r3
 800ab92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	3348      	adds	r3, #72	@ 0x48
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f002 f967 	bl	800ce6c <pvPortMalloc>
 800ab9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d011      	beq.n	800abca <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	3348      	adds	r3, #72	@ 0x48
 800abae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abb8:	79fa      	ldrb	r2, [r7, #7]
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	4613      	mov	r3, r2
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	68b9      	ldr	r1, [r7, #8]
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 f805 	bl	800abd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abca:	69bb      	ldr	r3, [r7, #24]
	}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	e002      	b.n	800abf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac02:	2101      	movs	r1, #1
 800ac04:	69b8      	ldr	r0, [r7, #24]
 800ac06:	f7ff febd 	bl	800a984 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac0a:	bf00      	nop
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00e      	beq.n	800ac3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ac32:	2300      	movs	r3, #0
 800ac34:	2200      	movs	r2, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f837 	bl	800acac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac50:	2301      	movs	r3, #1
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	2300      	movs	r3, #0
 800ac56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6939      	ldr	r1, [r7, #16]
 800ac5e:	6978      	ldr	r0, [r7, #20]
 800ac60:	f7ff ff77 	bl	800ab52 <xQueueGenericCreate>
 800ac64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff ffd3 	bl	800ac12 <prvInitialiseMutex>

		return xNewQueue;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b088      	sub	sp, #32
 800ac7a:	af02      	add	r7, sp, #8
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	6039      	str	r1, [r7, #0]
 800ac80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac82:	2301      	movs	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	2300      	movs	r3, #0
 800ac88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2200      	movs	r2, #0
 800ac92:	6939      	ldr	r1, [r7, #16]
 800ac94:	6978      	ldr	r0, [r7, #20]
 800ac96:	f7ff fedf 	bl	800aa58 <xQueueGenericCreateStatic>
 800ac9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7ff ffb8 	bl	800ac12 <prvInitialiseMutex>

		return xNewQueue;
 800aca2:	68fb      	ldr	r3, [r7, #12]
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08e      	sub	sp, #56	@ 0x38
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acba:	2300      	movs	r3, #0
 800acbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10b      	bne.n	800ace0 <xQueueGenericSend+0x34>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	e7fd      	b.n	800acdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <xQueueGenericSend+0x42>
 800ace6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <xQueueGenericSend+0x46>
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <xQueueGenericSend+0x48>
 800acf2:	2300      	movs	r3, #0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <xQueueGenericSend+0x64>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d103      	bne.n	800ad1e <xQueueGenericSend+0x72>
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d101      	bne.n	800ad22 <xQueueGenericSend+0x76>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueGenericSend+0x78>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10b      	bne.n	800ad40 <xQueueGenericSend+0x94>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	623b      	str	r3, [r7, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	e7fd      	b.n	800ad3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad40:	f001 fc04 	bl	800c54c <xTaskGetSchedulerState>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <xQueueGenericSend+0xa4>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <xQueueGenericSend+0xa8>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e000      	b.n	800ad56 <xQueueGenericSend+0xaa>
 800ad54:	2300      	movs	r3, #0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10b      	bne.n	800ad72 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	61fb      	str	r3, [r7, #28]
}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	e7fd      	b.n	800ad6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad72:	f001 ff59 	bl	800cc28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d302      	bcc.n	800ad88 <xQueueGenericSend+0xdc>
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d129      	bne.n	800addc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	68b9      	ldr	r1, [r7, #8]
 800ad8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad8e:	f000 fca9 	bl	800b6e4 <prvCopyDataToQueue>
 800ad92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d010      	beq.n	800adbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9e:	3324      	adds	r3, #36	@ 0x24
 800ada0:	4618      	mov	r0, r3
 800ada2:	f001 fa13 	bl	800c1cc <xTaskRemoveFromEventList>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d013      	beq.n	800add4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adac:	4b3f      	ldr	r3, [pc, #252]	@ (800aeac <xQueueGenericSend+0x200>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	e00a      	b.n	800add4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adc4:	4b39      	ldr	r3, [pc, #228]	@ (800aeac <xQueueGenericSend+0x200>)
 800adc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800add4:	f001 ff5a 	bl	800cc8c <vPortExitCritical>
				return pdPASS;
 800add8:	2301      	movs	r3, #1
 800adda:	e063      	b.n	800aea4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ade2:	f001 ff53 	bl	800cc8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	e05c      	b.n	800aea4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 fa4d 	bl	800c294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adfa:	2301      	movs	r3, #1
 800adfc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adfe:	f001 ff45 	bl	800cc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae02:	f000 ffd9 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae06:	f001 ff0f 	bl	800cc28 <vPortEnterCritical>
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae10:	b25b      	sxtb	r3, r3
 800ae12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae16:	d103      	bne.n	800ae20 <xQueueGenericSend+0x174>
 800ae18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae26:	b25b      	sxtb	r3, r3
 800ae28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2c:	d103      	bne.n	800ae36 <xQueueGenericSend+0x18a>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae36:	f001 ff29 	bl	800cc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae3a:	1d3a      	adds	r2, r7, #4
 800ae3c:	f107 0314 	add.w	r3, r7, #20
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f001 fa3c 	bl	800c2c0 <xTaskCheckForTimeOut>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d124      	bne.n	800ae98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae50:	f000 fd40 	bl	800b8d4 <prvIsQueueFull>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d018      	beq.n	800ae8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	4611      	mov	r1, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 f98c 	bl	800c180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae6a:	f000 fccb 	bl	800b804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae6e:	f000 ffb1 	bl	800bdd4 <xTaskResumeAll>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f47f af7c 	bne.w	800ad72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	@ (800aeac <xQueueGenericSend+0x200>)
 800ae7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	e772      	b.n	800ad72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae8e:	f000 fcb9 	bl	800b804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae92:	f000 ff9f 	bl	800bdd4 <xTaskResumeAll>
 800ae96:	e76c      	b.n	800ad72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae9a:	f000 fcb3 	bl	800b804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae9e:	f000 ff99 	bl	800bdd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3738      	adds	r7, #56	@ 0x38
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	@ 0x38
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10b      	bne.n	800aee0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d103      	bne.n	800aeee <xQueueGenericSendFromISR+0x3e>
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <xQueueGenericSendFromISR+0x42>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <xQueueGenericSendFromISR+0x44>
 800aef2:	2300      	movs	r3, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10b      	bne.n	800af10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	623b      	str	r3, [r7, #32]
}
 800af0a:	bf00      	nop
 800af0c:	bf00      	nop
 800af0e:	e7fd      	b.n	800af0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b02      	cmp	r3, #2
 800af14:	d103      	bne.n	800af1e <xQueueGenericSendFromISR+0x6e>
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d101      	bne.n	800af22 <xQueueGenericSendFromISR+0x72>
 800af1e:	2301      	movs	r3, #1
 800af20:	e000      	b.n	800af24 <xQueueGenericSendFromISR+0x74>
 800af22:	2300      	movs	r3, #0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10b      	bne.n	800af40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	61fb      	str	r3, [r7, #28]
}
 800af3a:	bf00      	nop
 800af3c:	bf00      	nop
 800af3e:	e7fd      	b.n	800af3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af40:	f001 ff52 	bl	800cde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af44:	f3ef 8211 	mrs	r2, BASEPRI
 800af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	61ba      	str	r2, [r7, #24]
 800af5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af68:	429a      	cmp	r2, r3
 800af6a:	d302      	bcc.n	800af72 <xQueueGenericSendFromISR+0xc2>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d12c      	bne.n	800afcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af82:	f000 fbaf 	bl	800b6e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af86:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d112      	bne.n	800afb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d016      	beq.n	800afc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	3324      	adds	r3, #36	@ 0x24
 800af9c:	4618      	mov	r0, r3
 800af9e:	f001 f915 	bl	800c1cc <xTaskRemoveFromEventList>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00e      	beq.n	800afc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e007      	b.n	800afc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afba:	3301      	adds	r3, #1
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	b25a      	sxtb	r2, r3
 800afc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800afc6:	2301      	movs	r3, #1
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800afca:	e001      	b.n	800afd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800afda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800afdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3738      	adds	r7, #56	@ 0x38
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b08e      	sub	sp, #56	@ 0x38
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10b      	bne.n	800b012 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	623b      	str	r3, [r7, #32]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00b      	beq.n	800b032 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	61fb      	str	r3, [r7, #28]
}
 800b02c:	bf00      	nop
 800b02e:	bf00      	nop
 800b030:	e7fd      	b.n	800b02e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <xQueueGiveFromISR+0x5c>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <xQueueGiveFromISR+0x60>
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <xQueueGiveFromISR+0x62>
 800b046:	2300      	movs	r3, #0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10b      	bne.n	800b064 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	61bb      	str	r3, [r7, #24]
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	e7fd      	b.n	800b060 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b064:	f001 fec0 	bl	800cde8 <vPortValidateInterruptPriority>
	__asm volatile
 800b068:	f3ef 8211 	mrs	r2, BASEPRI
 800b06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	617a      	str	r2, [r7, #20]
 800b07e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b080:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b082:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b088:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b090:	429a      	cmp	r2, r3
 800b092:	d22b      	bcs.n	800b0ec <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b09a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d112      	bne.n	800b0d6 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d016      	beq.n	800b0e6 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	3324      	adds	r3, #36	@ 0x24
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f001 f885 	bl	800c1cc <xTaskRemoveFromEventList>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00e      	beq.n	800b0e6 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00b      	beq.n	800b0e6 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	e007      	b.n	800b0e6 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0da:	3301      	adds	r3, #1
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	b25a      	sxtb	r2, r3
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ea:	e001      	b.n	800b0f0 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f383 8811 	msr	BASEPRI, r3
}
 800b0fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3738      	adds	r7, #56	@ 0x38
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08c      	sub	sp, #48	@ 0x30
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b114:	2300      	movs	r3, #0
 800b116:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10b      	bne.n	800b13a <xQueueReceive+0x32>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	623b      	str	r3, [r7, #32]
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	e7fd      	b.n	800b136 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <xQueueReceive+0x40>
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <xQueueReceive+0x44>
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <xQueueReceive+0x46>
 800b14c:	2300      	movs	r3, #0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <xQueueReceive+0x62>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	61fb      	str	r3, [r7, #28]
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b16a:	f001 f9ef 	bl	800c54c <xTaskGetSchedulerState>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <xQueueReceive+0x72>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <xQueueReceive+0x76>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <xQueueReceive+0x78>
 800b17e:	2300      	movs	r3, #0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10b      	bne.n	800b19c <xQueueReceive+0x94>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	61bb      	str	r3, [r7, #24]
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	e7fd      	b.n	800b198 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b19c:	f001 fd44 	bl	800cc28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01f      	beq.n	800b1ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1b0:	f000 fb02 	bl	800b7b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	1e5a      	subs	r2, r3, #1
 800b1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00f      	beq.n	800b1e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c6:	3310      	adds	r3, #16
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 ffff 	bl	800c1cc <xTaskRemoveFromEventList>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d007      	beq.n	800b1e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b2c8 <xQueueReceive+0x1c0>)
 800b1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1e4:	f001 fd52 	bl	800cc8c <vPortExitCritical>
				return pdPASS;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e069      	b.n	800b2c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1f2:	f001 fd4b 	bl	800cc8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e062      	b.n	800b2c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b200:	f107 0310 	add.w	r3, r7, #16
 800b204:	4618      	mov	r0, r3
 800b206:	f001 f845 	bl	800c294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b20e:	f001 fd3d 	bl	800cc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b212:	f000 fdd1 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b216:	f001 fd07 	bl	800cc28 <vPortEnterCritical>
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b220:	b25b      	sxtb	r3, r3
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b226:	d103      	bne.n	800b230 <xQueueReceive+0x128>
 800b228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b236:	b25b      	sxtb	r3, r3
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d103      	bne.n	800b246 <xQueueReceive+0x13e>
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b246:	f001 fd21 	bl	800cc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b24a:	1d3a      	adds	r2, r7, #4
 800b24c:	f107 0310 	add.w	r3, r7, #16
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f001 f834 	bl	800c2c0 <xTaskCheckForTimeOut>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d123      	bne.n	800b2a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b25e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b260:	f000 fb22 	bl	800b8a8 <prvIsQueueEmpty>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d017      	beq.n	800b29a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	3324      	adds	r3, #36	@ 0x24
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f000 ff84 	bl	800c180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b27a:	f000 fac3 	bl	800b804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b27e:	f000 fda9 	bl	800bdd4 <xTaskResumeAll>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d189      	bne.n	800b19c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b288:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <xQueueReceive+0x1c0>)
 800b28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	e780      	b.n	800b19c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29c:	f000 fab2 	bl	800b804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a0:	f000 fd98 	bl	800bdd4 <xTaskResumeAll>
 800b2a4:	e77a      	b.n	800b19c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2a8:	f000 faac 	bl	800b804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ac:	f000 fd92 	bl	800bdd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b2:	f000 faf9 	bl	800b8a8 <prvIsQueueEmpty>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f43f af6f 	beq.w	800b19c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3730      	adds	r7, #48	@ 0x30
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	e000ed04 	.word	0xe000ed04

0800b2cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08e      	sub	sp, #56	@ 0x38
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10b      	bne.n	800b300 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	623b      	str	r3, [r7, #32]
}
 800b2fa:	bf00      	nop
 800b2fc:	bf00      	nop
 800b2fe:	e7fd      	b.n	800b2fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	61fb      	str	r3, [r7, #28]
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b320:	f001 f914 	bl	800c54c <xTaskGetSchedulerState>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <xQueueSemaphoreTake+0x64>
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <xQueueSemaphoreTake+0x68>
 800b330:	2301      	movs	r3, #1
 800b332:	e000      	b.n	800b336 <xQueueSemaphoreTake+0x6a>
 800b334:	2300      	movs	r3, #0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	61bb      	str	r3, [r7, #24]
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b352:	f001 fc69 	bl	800cc28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b35a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d024      	beq.n	800b3ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b368:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d104      	bne.n	800b37c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b372:	f001 faad 	bl	800c8d0 <pvTaskIncrementMutexHeldCount>
 800b376:	4602      	mov	r2, r0
 800b378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00f      	beq.n	800b3a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	3310      	adds	r3, #16
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 ff1f 	bl	800c1cc <xTaskRemoveFromEventList>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d007      	beq.n	800b3a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b394:	4b54      	ldr	r3, [pc, #336]	@ (800b4e8 <xQueueSemaphoreTake+0x21c>)
 800b396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3a4:	f001 fc72 	bl	800cc8c <vPortExitCritical>
				return pdPASS;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e098      	b.n	800b4de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d112      	bne.n	800b3d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	617b      	str	r3, [r7, #20]
}
 800b3ca:	bf00      	nop
 800b3cc:	bf00      	nop
 800b3ce:	e7fd      	b.n	800b3cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b3d0:	f001 fc5c 	bl	800cc8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e082      	b.n	800b4de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3de:	f107 030c 	add.w	r3, r7, #12
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 ff56 	bl	800c294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ec:	f001 fc4e 	bl	800cc8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3f0:	f000 fce2 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3f4:	f001 fc18 	bl	800cc28 <vPortEnterCritical>
 800b3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3fe:	b25b      	sxtb	r3, r3
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d103      	bne.n	800b40e <xQueueSemaphoreTake+0x142>
 800b406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b414:	b25b      	sxtb	r3, r3
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41a:	d103      	bne.n	800b424 <xQueueSemaphoreTake+0x158>
 800b41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b424:	f001 fc32 	bl	800cc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b428:	463a      	mov	r2, r7
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	4611      	mov	r1, r2
 800b430:	4618      	mov	r0, r3
 800b432:	f000 ff45 	bl	800c2c0 <xTaskCheckForTimeOut>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d132      	bne.n	800b4a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b43c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b43e:	f000 fa33 	bl	800b8a8 <prvIsQueueEmpty>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d026      	beq.n	800b496 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d109      	bne.n	800b464 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b450:	f001 fbea 	bl	800cc28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 f895 	bl	800c588 <xTaskPriorityInherit>
 800b45e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b460:	f001 fc14 	bl	800cc8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	3324      	adds	r3, #36	@ 0x24
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fe87 	bl	800c180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b474:	f000 f9c6 	bl	800b804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b478:	f000 fcac 	bl	800bdd4 <xTaskResumeAll>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f47f af67 	bne.w	800b352 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b484:	4b18      	ldr	r3, [pc, #96]	@ (800b4e8 <xQueueSemaphoreTake+0x21c>)
 800b486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	e75d      	b.n	800b352 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b498:	f000 f9b4 	bl	800b804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b49c:	f000 fc9a 	bl	800bdd4 <xTaskResumeAll>
 800b4a0:	e757      	b.n	800b352 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4a4:	f000 f9ae 	bl	800b804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4a8:	f000 fc94 	bl	800bdd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4ae:	f000 f9fb 	bl	800b8a8 <prvIsQueueEmpty>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f43f af4c 	beq.w	800b352 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00d      	beq.n	800b4dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b4c0:	f001 fbb2 	bl	800cc28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4c6:	f000 f8f5 	bl	800b6b4 <prvGetDisinheritPriorityAfterTimeout>
 800b4ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f960 	bl	800c798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b4d8:	f001 fbd8 	bl	800cc8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3738      	adds	r7, #56	@ 0x38
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08e      	sub	sp, #56	@ 0x38
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	623b      	str	r3, [r7, #32]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d103      	bne.n	800b528 <xQueueReceiveFromISR+0x3c>
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <xQueueReceiveFromISR+0x40>
 800b528:	2301      	movs	r3, #1
 800b52a:	e000      	b.n	800b52e <xQueueReceiveFromISR+0x42>
 800b52c:	2300      	movs	r3, #0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10b      	bne.n	800b54a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	61fb      	str	r3, [r7, #28]
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	e7fd      	b.n	800b546 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b54a:	f001 fc4d 	bl	800cde8 <vPortValidateInterruptPriority>
	__asm volatile
 800b54e:	f3ef 8211 	mrs	r2, BASEPRI
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	61ba      	str	r2, [r7, #24]
 800b564:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b566:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d02f      	beq.n	800b5d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b57c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b584:	f000 f918 	bl	800b7b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58a:	1e5a      	subs	r2, r3, #1
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b590:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d112      	bne.n	800b5c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d016      	beq.n	800b5d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fe10 	bl	800c1cc <xTaskRemoveFromEventList>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e007      	b.n	800b5d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	b25a      	sxtb	r2, r3
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d4:	e001      	b.n	800b5da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f383 8811 	msr	BASEPRI, r3
}
 800b5e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3738      	adds	r7, #56	@ 0x38
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10b      	bne.n	800b616 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	60bb      	str	r3, [r7, #8]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b616:	f001 fb07 	bl	800cc28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b620:	f001 fb34 	bl	800cc8c <vPortExitCritical>

	return uxReturn;
 800b624:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b62e:	b480      	push	{r7}
 800b630:	b087      	sub	sp, #28
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10b      	bne.n	800b658 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	60fb      	str	r3, [r7, #12]
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b65e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b660:	4618      	mov	r0, r3
 800b662:	371c      	adds	r7, #28
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10b      	bne.n	800b696 <vQueueDelete+0x2a>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	60bb      	str	r3, [r7, #8]
}
 800b690:	bf00      	nop
 800b692:	bf00      	nop
 800b694:	e7fd      	b.n	800b692 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f934 	bl	800b904 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f001 fca8 	bl	800cffc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f1c3 0307 	rsb	r3, r3, #7
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	e001      	b.n	800b6d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10d      	bne.n	800b71e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d14d      	bne.n	800b7a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 ffba 	bl	800c688 <xTaskPriorityDisinherit>
 800b714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	e043      	b.n	800b7a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d119      	bne.n	800b758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6858      	ldr	r0, [r3, #4]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72c:	461a      	mov	r2, r3
 800b72e:	68b9      	ldr	r1, [r7, #8]
 800b730:	f00f fbf9 	bl	801af26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d32b      	bcc.n	800b7a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
 800b756:	e026      	b.n	800b7a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	68d8      	ldr	r0, [r3, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b760:	461a      	mov	r2, r3
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	f00f fbdf 	bl	801af26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b770:	425b      	negs	r3, r3
 800b772:	441a      	add	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d207      	bcs.n	800b794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b78c:	425b      	negs	r3, r3
 800b78e:	441a      	add	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d105      	bne.n	800b7a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b7ae:	697b      	ldr	r3, [r7, #20]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d018      	beq.n	800b7fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68da      	ldr	r2, [r3, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d2:	441a      	add	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68da      	ldr	r2, [r3, #12]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d303      	bcc.n	800b7ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68d9      	ldr	r1, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6838      	ldr	r0, [r7, #0]
 800b7f8:	f00f fb95 	bl	801af26 <memcpy>
	}
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b80c:	f001 fa0c 	bl	800cc28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b818:	e011      	b.n	800b83e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d012      	beq.n	800b848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	3324      	adds	r3, #36	@ 0x24
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fcd0 	bl	800c1cc <xTaskRemoveFromEventList>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b832:	f000 fda9 	bl	800c388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	3b01      	subs	r3, #1
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	dce9      	bgt.n	800b81a <prvUnlockQueue+0x16>
 800b846:	e000      	b.n	800b84a <prvUnlockQueue+0x46>
					break;
 800b848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	22ff      	movs	r2, #255	@ 0xff
 800b84e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b852:	f001 fa1b 	bl	800cc8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b856:	f001 f9e7 	bl	800cc28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b862:	e011      	b.n	800b888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d012      	beq.n	800b892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3310      	adds	r3, #16
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fcab 	bl	800c1cc <xTaskRemoveFromEventList>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b87c:	f000 fd84 	bl	800c388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	3b01      	subs	r3, #1
 800b884:	b2db      	uxtb	r3, r3
 800b886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dce9      	bgt.n	800b864 <prvUnlockQueue+0x60>
 800b890:	e000      	b.n	800b894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	22ff      	movs	r2, #255	@ 0xff
 800b898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b89c:	f001 f9f6 	bl	800cc8c <vPortExitCritical>
}
 800b8a0:	bf00      	nop
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8b0:	f001 f9ba 	bl	800cc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	e001      	b.n	800b8c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8c6:	f001 f9e1 	bl	800cc8c <vPortExitCritical>

	return xReturn;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8dc:	f001 f9a4 	bl	800cc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d102      	bne.n	800b8f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e001      	b.n	800b8f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8f6:	f001 f9c9 	bl	800cc8c <vPortExitCritical>

	return xReturn;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b90c:	2300      	movs	r3, #0
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	e016      	b.n	800b940 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b912:	4a10      	ldr	r2, [pc, #64]	@ (800b954 <vQueueUnregisterQueue+0x50>)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	4413      	add	r3, r2
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d10b      	bne.n	800b93a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b922:	4a0c      	ldr	r2, [pc, #48]	@ (800b954 <vQueueUnregisterQueue+0x50>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2100      	movs	r1, #0
 800b928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b92c:	4a09      	ldr	r2, [pc, #36]	@ (800b954 <vQueueUnregisterQueue+0x50>)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	4413      	add	r3, r2
 800b934:	2200      	movs	r2, #0
 800b936:	605a      	str	r2, [r3, #4]
				break;
 800b938:	e006      	b.n	800b948 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b07      	cmp	r3, #7
 800b944:	d9e5      	bls.n	800b912 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b946:	bf00      	nop
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	24000800 	.word	0x24000800

0800b958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08e      	sub	sp, #56	@ 0x38
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	623b      	str	r3, [r7, #32]
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10b      	bne.n	800b9a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	61fb      	str	r3, [r7, #28]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b9a2:	2354      	movs	r3, #84	@ 0x54
 800b9a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2b54      	cmp	r3, #84	@ 0x54
 800b9aa:	d00b      	beq.n	800b9c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	61bb      	str	r3, [r7, #24]
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	e7fd      	b.n	800b9c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b9c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01e      	beq.n	800ba0a <xTaskCreateStatic+0xb2>
 800b9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01b      	beq.n	800ba0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	f107 0314 	add.w	r3, r7, #20
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 f850 	bl	800baa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba04:	f000 f8d6 	bl	800bbb4 <prvAddNewTaskToReadyList>
 800ba08:	e001      	b.n	800ba0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba0e:	697b      	ldr	r3, [r7, #20]
	}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3728      	adds	r7, #40	@ 0x28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08c      	sub	sp, #48	@ 0x30
 800ba1c:	af04      	add	r7, sp, #16
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	4613      	mov	r3, r2
 800ba26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba28:	88fb      	ldrh	r3, [r7, #6]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 fa1d 	bl	800ce6c <pvPortMalloc>
 800ba32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00e      	beq.n	800ba58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba3a:	2054      	movs	r0, #84	@ 0x54
 800ba3c:	f001 fa16 	bl	800ce6c <pvPortMalloc>
 800ba40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba4e:	e005      	b.n	800ba5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba50:	6978      	ldr	r0, [r7, #20]
 800ba52:	f001 fad3 	bl	800cffc <vPortFree>
 800ba56:	e001      	b.n	800ba5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d017      	beq.n	800ba92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9303      	str	r3, [sp, #12]
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	9302      	str	r3, [sp, #8]
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 f80e 	bl	800baa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba86:	69f8      	ldr	r0, [r7, #28]
 800ba88:	f000 f894 	bl	800bbb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	61bb      	str	r3, [r7, #24]
 800ba90:	e002      	b.n	800ba98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba92:	f04f 33ff 	mov.w	r3, #4294967295
 800ba96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba98:	69bb      	ldr	r3, [r7, #24]
	}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b088      	sub	sp, #32
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
 800baae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800baba:	440b      	add	r3, r1
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	f023 0307 	bic.w	r3, r3, #7
 800bac8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <prvInitialiseNewTask+0x4a>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	617b      	str	r3, [r7, #20]
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	e7fd      	b.n	800bae8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d01f      	beq.n	800bb32 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baf2:	2300      	movs	r3, #0
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	e012      	b.n	800bb1e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	7819      	ldrb	r1, [r3, #0]
 800bb00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	4413      	add	r3, r2
 800bb06:	3334      	adds	r3, #52	@ 0x34
 800bb08:	460a      	mov	r2, r1
 800bb0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	4413      	add	r3, r2
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d006      	beq.n	800bb26 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	2b0f      	cmp	r3, #15
 800bb22:	d9e9      	bls.n	800baf8 <prvInitialiseNewTask+0x56>
 800bb24:	e000      	b.n	800bb28 <prvInitialiseNewTask+0x86>
			{
				break;
 800bb26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb30:	e003      	b.n	800bb3a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	2b06      	cmp	r3, #6
 800bb3e:	d901      	bls.n	800bb44 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb40:	2306      	movs	r3, #6
 800bb42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb4e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb52:	2200      	movs	r2, #0
 800bb54:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	3304      	adds	r3, #4
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe fe7d 	bl	800a85a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	3318      	adds	r3, #24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fe78 	bl	800a85a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb72:	f1c3 0207 	rsb	r2, r3, #7
 800bb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	2200      	movs	r2, #0
 800bb84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	68f9      	ldr	r1, [r7, #12]
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f000 ff16 	bl	800c9c4 <pxPortInitialiseStack>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbaa:	bf00      	nop
 800bbac:	3720      	adds	r7, #32
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbbc:	f001 f834 	bl	800cc28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	@ (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	4a29      	ldr	r2, [pc, #164]	@ (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbca:	4b29      	ldr	r3, [pc, #164]	@ (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d109      	bne.n	800bbe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbd2:	4a27      	ldr	r2, [pc, #156]	@ (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbd8:	4b24      	ldr	r3, [pc, #144]	@ (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d110      	bne.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbe0:	f000 fbf6 	bl	800c3d0 <prvInitialiseTaskLists>
 800bbe4:	e00d      	b.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbe6:	4b23      	ldr	r3, [pc, #140]	@ (800bc74 <prvAddNewTaskToReadyList+0xc0>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbee:	4b20      	ldr	r3, [pc, #128]	@ (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d802      	bhi.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbfc:	4a1c      	ldr	r2, [pc, #112]	@ (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <prvAddNewTaskToReadyList+0xc4>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <prvAddNewTaskToReadyList+0xc4>)
 800bc0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc10:	2201      	movs	r2, #1
 800bc12:	409a      	lsls	r2, r3
 800bc14:	4b19      	ldr	r3, [pc, #100]	@ (800bc7c <prvAddNewTaskToReadyList+0xc8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	4a18      	ldr	r2, [pc, #96]	@ (800bc7c <prvAddNewTaskToReadyList+0xc8>)
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4a15      	ldr	r2, [pc, #84]	@ (800bc80 <prvAddNewTaskToReadyList+0xcc>)
 800bc2c:	441a      	add	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fe fe1d 	bl	800a874 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc3a:	f001 f827 	bl	800cc8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <prvAddNewTaskToReadyList+0xc0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00e      	beq.n	800bc64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc46:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d207      	bcs.n	800bc64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc54:	4b0b      	ldr	r3, [pc, #44]	@ (800bc84 <prvAddNewTaskToReadyList+0xd0>)
 800bc56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	24000940 	.word	0x24000940
 800bc70:	24000840 	.word	0x24000840
 800bc74:	2400094c 	.word	0x2400094c
 800bc78:	2400095c 	.word	0x2400095c
 800bc7c:	24000948 	.word	0x24000948
 800bc80:	24000844 	.word	0x24000844
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d018      	beq.n	800bccc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc9a:	4b14      	ldr	r3, [pc, #80]	@ (800bcec <vTaskDelay+0x64>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <vTaskDelay+0x32>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	60bb      	str	r3, [r7, #8]
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop
 800bcb8:	e7fd      	b.n	800bcb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bcba:	f000 f87d 	bl	800bdb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fe19 	bl	800c8f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcc6:	f000 f885 	bl	800bdd4 <xTaskResumeAll>
 800bcca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d107      	bne.n	800bce2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bcd2:	4b07      	ldr	r3, [pc, #28]	@ (800bcf0 <vTaskDelay+0x68>)
 800bcd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bce2:	bf00      	nop
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	24000968 	.word	0x24000968
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	@ 0x28
 800bcf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd02:	463a      	mov	r2, r7
 800bd04:	1d39      	adds	r1, r7, #4
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7f4 fd36 	bl	800077c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	9202      	str	r2, [sp, #8]
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	460a      	mov	r2, r1
 800bd22:	491f      	ldr	r1, [pc, #124]	@ (800bda0 <vTaskStartScheduler+0xac>)
 800bd24:	481f      	ldr	r0, [pc, #124]	@ (800bda4 <vTaskStartScheduler+0xb0>)
 800bd26:	f7ff fe17 	bl	800b958 <xTaskCreateStatic>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	4a1e      	ldr	r2, [pc, #120]	@ (800bda8 <vTaskStartScheduler+0xb4>)
 800bd2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd30:	4b1d      	ldr	r3, [pc, #116]	@ (800bda8 <vTaskStartScheduler+0xb4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e001      	b.n	800bd42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d116      	bne.n	800bd76 <vTaskStartScheduler+0x82>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	613b      	str	r3, [r7, #16]
}
 800bd5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd5c:	4b13      	ldr	r3, [pc, #76]	@ (800bdac <vTaskStartScheduler+0xb8>)
 800bd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd64:	4b12      	ldr	r3, [pc, #72]	@ (800bdb0 <vTaskStartScheduler+0xbc>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd6a:	4b12      	ldr	r3, [pc, #72]	@ (800bdb4 <vTaskStartScheduler+0xc0>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd70:	f000 feb6 	bl	800cae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd74:	e00f      	b.n	800bd96 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d10b      	bne.n	800bd96 <vTaskStartScheduler+0xa2>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	60fb      	str	r3, [r7, #12]
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <vTaskStartScheduler+0x9e>
}
 800bd96:	bf00      	nop
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	0801c2cc 	.word	0x0801c2cc
 800bda4:	0800c3a1 	.word	0x0800c3a1
 800bda8:	24000964 	.word	0x24000964
 800bdac:	24000960 	.word	0x24000960
 800bdb0:	2400094c 	.word	0x2400094c
 800bdb4:	24000944 	.word	0x24000944

0800bdb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bdbc:	4b04      	ldr	r3, [pc, #16]	@ (800bdd0 <vTaskSuspendAll+0x18>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	4a03      	ldr	r2, [pc, #12]	@ (800bdd0 <vTaskSuspendAll+0x18>)
 800bdc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bdc6:	bf00      	nop
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	24000968 	.word	0x24000968

0800bdd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bde2:	4b42      	ldr	r3, [pc, #264]	@ (800beec <xTaskResumeAll+0x118>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <xTaskResumeAll+0x2e>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	603b      	str	r3, [r7, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	e7fd      	b.n	800bdfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be02:	f000 ff11 	bl	800cc28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be06:	4b39      	ldr	r3, [pc, #228]	@ (800beec <xTaskResumeAll+0x118>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4a37      	ldr	r2, [pc, #220]	@ (800beec <xTaskResumeAll+0x118>)
 800be0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be10:	4b36      	ldr	r3, [pc, #216]	@ (800beec <xTaskResumeAll+0x118>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d161      	bne.n	800bedc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be18:	4b35      	ldr	r3, [pc, #212]	@ (800bef0 <xTaskResumeAll+0x11c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d05d      	beq.n	800bedc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be20:	e02e      	b.n	800be80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be22:	4b34      	ldr	r3, [pc, #208]	@ (800bef4 <xTaskResumeAll+0x120>)
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3318      	adds	r3, #24
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fd7d 	bl	800a92e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3304      	adds	r3, #4
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fd78 	bl	800a92e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be42:	2201      	movs	r2, #1
 800be44:	409a      	lsls	r2, r3
 800be46:	4b2c      	ldr	r3, [pc, #176]	@ (800bef8 <xTaskResumeAll+0x124>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	4a2a      	ldr	r2, [pc, #168]	@ (800bef8 <xTaskResumeAll+0x124>)
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4a27      	ldr	r2, [pc, #156]	@ (800befc <xTaskResumeAll+0x128>)
 800be5e:	441a      	add	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe fd04 	bl	800a874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be70:	4b23      	ldr	r3, [pc, #140]	@ (800bf00 <xTaskResumeAll+0x12c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be76:	429a      	cmp	r2, r3
 800be78:	d302      	bcc.n	800be80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800be7a:	4b22      	ldr	r3, [pc, #136]	@ (800bf04 <xTaskResumeAll+0x130>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be80:	4b1c      	ldr	r3, [pc, #112]	@ (800bef4 <xTaskResumeAll+0x120>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1cc      	bne.n	800be22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be8e:	f000 fb3d 	bl	800c50c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be92:	4b1d      	ldr	r3, [pc, #116]	@ (800bf08 <xTaskResumeAll+0x134>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d010      	beq.n	800bec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be9e:	f000 f859 	bl	800bf54 <xTaskIncrementTick>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bea8:	4b16      	ldr	r3, [pc, #88]	@ (800bf04 <xTaskResumeAll+0x130>)
 800beaa:	2201      	movs	r2, #1
 800beac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3b01      	subs	r3, #1
 800beb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1f1      	bne.n	800be9e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800beba:	4b13      	ldr	r3, [pc, #76]	@ (800bf08 <xTaskResumeAll+0x134>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bec0:	4b10      	ldr	r3, [pc, #64]	@ (800bf04 <xTaskResumeAll+0x130>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d009      	beq.n	800bedc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bec8:	2301      	movs	r3, #1
 800beca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800becc:	4b0f      	ldr	r3, [pc, #60]	@ (800bf0c <xTaskResumeAll+0x138>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bedc:	f000 fed6 	bl	800cc8c <vPortExitCritical>

	return xAlreadyYielded;
 800bee0:	68bb      	ldr	r3, [r7, #8]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	24000968 	.word	0x24000968
 800bef0:	24000940 	.word	0x24000940
 800bef4:	24000900 	.word	0x24000900
 800bef8:	24000948 	.word	0x24000948
 800befc:	24000844 	.word	0x24000844
 800bf00:	24000840 	.word	0x24000840
 800bf04:	24000954 	.word	0x24000954
 800bf08:	24000950 	.word	0x24000950
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf16:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <xTaskGetTickCount+0x1c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf1c:	687b      	ldr	r3, [r7, #4]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	24000944 	.word	0x24000944

0800bf30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf36:	f000 ff57 	bl	800cde8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bf3e:	4b04      	ldr	r3, [pc, #16]	@ (800bf50 <xTaskGetTickCountFromISR+0x20>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf44:	683b      	ldr	r3, [r7, #0]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	24000944 	.word	0x24000944

0800bf54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf5e:	4b4f      	ldr	r3, [pc, #316]	@ (800c09c <xTaskIncrementTick+0x148>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f040 8089 	bne.w	800c07a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf68:	4b4d      	ldr	r3, [pc, #308]	@ (800c0a0 <xTaskIncrementTick+0x14c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf70:	4a4b      	ldr	r2, [pc, #300]	@ (800c0a0 <xTaskIncrementTick+0x14c>)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d121      	bne.n	800bfc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf7c:	4b49      	ldr	r3, [pc, #292]	@ (800c0a4 <xTaskIncrementTick+0x150>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00b      	beq.n	800bf9e <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	603b      	str	r3, [r7, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	e7fd      	b.n	800bf9a <xTaskIncrementTick+0x46>
 800bf9e:	4b41      	ldr	r3, [pc, #260]	@ (800c0a4 <xTaskIncrementTick+0x150>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	4b40      	ldr	r3, [pc, #256]	@ (800c0a8 <xTaskIncrementTick+0x154>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a3e      	ldr	r2, [pc, #248]	@ (800c0a4 <xTaskIncrementTick+0x150>)
 800bfaa:	6013      	str	r3, [r2, #0]
 800bfac:	4a3e      	ldr	r2, [pc, #248]	@ (800c0a8 <xTaskIncrementTick+0x154>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	4b3e      	ldr	r3, [pc, #248]	@ (800c0ac <xTaskIncrementTick+0x158>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	4a3c      	ldr	r2, [pc, #240]	@ (800c0ac <xTaskIncrementTick+0x158>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	f000 faa6 	bl	800c50c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfc0:	4b3b      	ldr	r3, [pc, #236]	@ (800c0b0 <xTaskIncrementTick+0x15c>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d348      	bcc.n	800c05c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfca:	4b36      	ldr	r3, [pc, #216]	@ (800c0a4 <xTaskIncrementTick+0x150>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d104      	bne.n	800bfde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	4b36      	ldr	r3, [pc, #216]	@ (800c0b0 <xTaskIncrementTick+0x15c>)
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfda:	601a      	str	r2, [r3, #0]
					break;
 800bfdc:	e03e      	b.n	800c05c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfde:	4b31      	ldr	r3, [pc, #196]	@ (800c0a4 <xTaskIncrementTick+0x150>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d203      	bcs.n	800bffe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bff6:	4a2e      	ldr	r2, [pc, #184]	@ (800c0b0 <xTaskIncrementTick+0x15c>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bffc:	e02e      	b.n	800c05c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fc93 	bl	800a92e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d004      	beq.n	800c01a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	3318      	adds	r3, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f7fe fc8a 	bl	800a92e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	2201      	movs	r2, #1
 800c020:	409a      	lsls	r2, r3
 800c022:	4b24      	ldr	r3, [pc, #144]	@ (800c0b4 <xTaskIncrementTick+0x160>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4313      	orrs	r3, r2
 800c028:	4a22      	ldr	r2, [pc, #136]	@ (800c0b4 <xTaskIncrementTick+0x160>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a1f      	ldr	r2, [pc, #124]	@ (800c0b8 <xTaskIncrementTick+0x164>)
 800c03a:	441a      	add	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fc16 	bl	800a874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04c:	4b1b      	ldr	r3, [pc, #108]	@ (800c0bc <xTaskIncrementTick+0x168>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c052:	429a      	cmp	r2, r3
 800c054:	d3b9      	bcc.n	800bfca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c056:	2301      	movs	r3, #1
 800c058:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c05a:	e7b6      	b.n	800bfca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c05c:	4b17      	ldr	r3, [pc, #92]	@ (800c0bc <xTaskIncrementTick+0x168>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c062:	4915      	ldr	r1, [pc, #84]	@ (800c0b8 <xTaskIncrementTick+0x164>)
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d907      	bls.n	800c084 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e004      	b.n	800c084 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c07a:	4b11      	ldr	r3, [pc, #68]	@ (800c0c0 <xTaskIncrementTick+0x16c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3301      	adds	r3, #1
 800c080:	4a0f      	ldr	r2, [pc, #60]	@ (800c0c0 <xTaskIncrementTick+0x16c>)
 800c082:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c084:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c4 <xTaskIncrementTick+0x170>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c08c:	2301      	movs	r3, #1
 800c08e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c090:	697b      	ldr	r3, [r7, #20]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	24000968 	.word	0x24000968
 800c0a0:	24000944 	.word	0x24000944
 800c0a4:	240008f8 	.word	0x240008f8
 800c0a8:	240008fc 	.word	0x240008fc
 800c0ac:	24000958 	.word	0x24000958
 800c0b0:	24000960 	.word	0x24000960
 800c0b4:	24000948 	.word	0x24000948
 800c0b8:	24000844 	.word	0x24000844
 800c0bc:	24000840 	.word	0x24000840
 800c0c0:	24000950 	.word	0x24000950
 800c0c4:	24000954 	.word	0x24000954

0800c0c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b087      	sub	sp, #28
 800c0cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0ce:	4b27      	ldr	r3, [pc, #156]	@ (800c16c <vTaskSwitchContext+0xa4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0d6:	4b26      	ldr	r3, [pc, #152]	@ (800c170 <vTaskSwitchContext+0xa8>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0dc:	e040      	b.n	800c160 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c0de:	4b24      	ldr	r3, [pc, #144]	@ (800c170 <vTaskSwitchContext+0xa8>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e4:	4b23      	ldr	r3, [pc, #140]	@ (800c174 <vTaskSwitchContext+0xac>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	fab3 f383 	clz	r3, r3
 800c0f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	f1c3 031f 	rsb	r3, r3, #31
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	491f      	ldr	r1, [pc, #124]	@ (800c178 <vTaskSwitchContext+0xb0>)
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10b      	bne.n	800c126 <vTaskSwitchContext+0x5e>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	607b      	str	r3, [r7, #4]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <vTaskSwitchContext+0x5a>
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4a11      	ldr	r2, [pc, #68]	@ (800c178 <vTaskSwitchContext+0xb0>)
 800c132:	4413      	add	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	605a      	str	r2, [r3, #4]
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	3308      	adds	r3, #8
 800c148:	429a      	cmp	r2, r3
 800c14a:	d104      	bne.n	800c156 <vTaskSwitchContext+0x8e>
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	605a      	str	r2, [r3, #4]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	4a07      	ldr	r2, [pc, #28]	@ (800c17c <vTaskSwitchContext+0xb4>)
 800c15e:	6013      	str	r3, [r2, #0]
}
 800c160:	bf00      	nop
 800c162:	371c      	adds	r7, #28
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	24000968 	.word	0x24000968
 800c170:	24000954 	.word	0x24000954
 800c174:	24000948 	.word	0x24000948
 800c178:	24000844 	.word	0x24000844
 800c17c:	24000840 	.word	0x24000840

0800c180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10b      	bne.n	800c1a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	60fb      	str	r3, [r7, #12]
}
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	e7fd      	b.n	800c1a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1a8:	4b07      	ldr	r3, [pc, #28]	@ (800c1c8 <vTaskPlaceOnEventList+0x48>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3318      	adds	r3, #24
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe fb83 	bl	800a8bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	6838      	ldr	r0, [r7, #0]
 800c1ba:	f000 fb9d 	bl	800c8f8 <prvAddCurrentTaskToDelayedList>
}
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	24000840 	.word	0x24000840

0800c1cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10b      	bne.n	800c1fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60fb      	str	r3, [r7, #12]
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	e7fd      	b.n	800c1f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	3318      	adds	r3, #24
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fb95 	bl	800a92e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c204:	4b1d      	ldr	r3, [pc, #116]	@ (800c27c <xTaskRemoveFromEventList+0xb0>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d11c      	bne.n	800c246 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	3304      	adds	r3, #4
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe fb8c 	bl	800a92e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21a:	2201      	movs	r2, #1
 800c21c:	409a      	lsls	r2, r3
 800c21e:	4b18      	ldr	r3, [pc, #96]	@ (800c280 <xTaskRemoveFromEventList+0xb4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4313      	orrs	r3, r2
 800c224:	4a16      	ldr	r2, [pc, #88]	@ (800c280 <xTaskRemoveFromEventList+0xb4>)
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c22c:	4613      	mov	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4a13      	ldr	r2, [pc, #76]	@ (800c284 <xTaskRemoveFromEventList+0xb8>)
 800c236:	441a      	add	r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	3304      	adds	r3, #4
 800c23c:	4619      	mov	r1, r3
 800c23e:	4610      	mov	r0, r2
 800c240:	f7fe fb18 	bl	800a874 <vListInsertEnd>
 800c244:	e005      	b.n	800c252 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	3318      	adds	r3, #24
 800c24a:	4619      	mov	r1, r3
 800c24c:	480e      	ldr	r0, [pc, #56]	@ (800c288 <xTaskRemoveFromEventList+0xbc>)
 800c24e:	f7fe fb11 	bl	800a874 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c256:	4b0d      	ldr	r3, [pc, #52]	@ (800c28c <xTaskRemoveFromEventList+0xc0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d905      	bls.n	800c26c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c260:	2301      	movs	r3, #1
 800c262:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c264:	4b0a      	ldr	r3, [pc, #40]	@ (800c290 <xTaskRemoveFromEventList+0xc4>)
 800c266:	2201      	movs	r2, #1
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e001      	b.n	800c270 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c26c:	2300      	movs	r3, #0
 800c26e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c270:	697b      	ldr	r3, [r7, #20]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	24000968 	.word	0x24000968
 800c280:	24000948 	.word	0x24000948
 800c284:	24000844 	.word	0x24000844
 800c288:	24000900 	.word	0x24000900
 800c28c:	24000840 	.word	0x24000840
 800c290:	24000954 	.word	0x24000954

0800c294 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c29c:	4b06      	ldr	r3, [pc, #24]	@ (800c2b8 <vTaskInternalSetTimeOutState+0x24>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2a4:	4b05      	ldr	r3, [pc, #20]	@ (800c2bc <vTaskInternalSetTimeOutState+0x28>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	605a      	str	r2, [r3, #4]
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr
 800c2b8:	24000958 	.word	0x24000958
 800c2bc:	24000944 	.word	0x24000944

0800c2c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b088      	sub	sp, #32
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	613b      	str	r3, [r7, #16]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d10b      	bne.n	800c306 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	60fb      	str	r3, [r7, #12]
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	e7fd      	b.n	800c302 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c306:	f000 fc8f 	bl	800cc28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c30a:	4b1d      	ldr	r3, [pc, #116]	@ (800c380 <xTaskCheckForTimeOut+0xc0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c322:	d102      	bne.n	800c32a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c324:	2300      	movs	r3, #0
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	e023      	b.n	800c372 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	4b15      	ldr	r3, [pc, #84]	@ (800c384 <xTaskCheckForTimeOut+0xc4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d007      	beq.n	800c346 <xTaskCheckForTimeOut+0x86>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d302      	bcc.n	800c346 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c340:	2301      	movs	r3, #1
 800c342:	61fb      	str	r3, [r7, #28]
 800c344:	e015      	b.n	800c372 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d20b      	bcs.n	800c368 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	1ad2      	subs	r2, r2, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff ff99 	bl	800c294 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	61fb      	str	r3, [r7, #28]
 800c366:	e004      	b.n	800c372 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2200      	movs	r2, #0
 800c36c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c36e:	2301      	movs	r3, #1
 800c370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c372:	f000 fc8b 	bl	800cc8c <vPortExitCritical>

	return xReturn;
 800c376:	69fb      	ldr	r3, [r7, #28]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3720      	adds	r7, #32
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	24000944 	.word	0x24000944
 800c384:	24000958 	.word	0x24000958

0800c388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c388:	b480      	push	{r7}
 800c38a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c38c:	4b03      	ldr	r3, [pc, #12]	@ (800c39c <vTaskMissedYield+0x14>)
 800c38e:	2201      	movs	r2, #1
 800c390:	601a      	str	r2, [r3, #0]
}
 800c392:	bf00      	nop
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	24000954 	.word	0x24000954

0800c3a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3a8:	f000 f852 	bl	800c450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3ac:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <prvIdleTask+0x28>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d9f9      	bls.n	800c3a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3b4:	4b05      	ldr	r3, [pc, #20]	@ (800c3cc <prvIdleTask+0x2c>)
 800c3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3c4:	e7f0      	b.n	800c3a8 <prvIdleTask+0x8>
 800c3c6:	bf00      	nop
 800c3c8:	24000844 	.word	0x24000844
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e00c      	b.n	800c3f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4a12      	ldr	r2, [pc, #72]	@ (800c430 <prvInitialiseTaskLists+0x60>)
 800c3e8:	4413      	add	r3, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fa15 	bl	800a81a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b06      	cmp	r3, #6
 800c3fa:	d9ef      	bls.n	800c3dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3fc:	480d      	ldr	r0, [pc, #52]	@ (800c434 <prvInitialiseTaskLists+0x64>)
 800c3fe:	f7fe fa0c 	bl	800a81a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c402:	480d      	ldr	r0, [pc, #52]	@ (800c438 <prvInitialiseTaskLists+0x68>)
 800c404:	f7fe fa09 	bl	800a81a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c408:	480c      	ldr	r0, [pc, #48]	@ (800c43c <prvInitialiseTaskLists+0x6c>)
 800c40a:	f7fe fa06 	bl	800a81a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c40e:	480c      	ldr	r0, [pc, #48]	@ (800c440 <prvInitialiseTaskLists+0x70>)
 800c410:	f7fe fa03 	bl	800a81a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c414:	480b      	ldr	r0, [pc, #44]	@ (800c444 <prvInitialiseTaskLists+0x74>)
 800c416:	f7fe fa00 	bl	800a81a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c41a:	4b0b      	ldr	r3, [pc, #44]	@ (800c448 <prvInitialiseTaskLists+0x78>)
 800c41c:	4a05      	ldr	r2, [pc, #20]	@ (800c434 <prvInitialiseTaskLists+0x64>)
 800c41e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c420:	4b0a      	ldr	r3, [pc, #40]	@ (800c44c <prvInitialiseTaskLists+0x7c>)
 800c422:	4a05      	ldr	r2, [pc, #20]	@ (800c438 <prvInitialiseTaskLists+0x68>)
 800c424:	601a      	str	r2, [r3, #0]
}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	24000844 	.word	0x24000844
 800c434:	240008d0 	.word	0x240008d0
 800c438:	240008e4 	.word	0x240008e4
 800c43c:	24000900 	.word	0x24000900
 800c440:	24000914 	.word	0x24000914
 800c444:	2400092c 	.word	0x2400092c
 800c448:	240008f8 	.word	0x240008f8
 800c44c:	240008fc 	.word	0x240008fc

0800c450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c456:	e019      	b.n	800c48c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c458:	f000 fbe6 	bl	800cc28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	4b10      	ldr	r3, [pc, #64]	@ (800c4a0 <prvCheckTasksWaitingTermination+0x50>)
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3304      	adds	r3, #4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe fa60 	bl	800a92e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c46e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <prvCheckTasksWaitingTermination+0x54>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3b01      	subs	r3, #1
 800c474:	4a0b      	ldr	r2, [pc, #44]	@ (800c4a4 <prvCheckTasksWaitingTermination+0x54>)
 800c476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c478:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	4a0a      	ldr	r2, [pc, #40]	@ (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c482:	f000 fc03 	bl	800cc8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f810 	bl	800c4ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c48c:	4b06      	ldr	r3, [pc, #24]	@ (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e1      	bne.n	800c458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	24000914 	.word	0x24000914
 800c4a4:	24000940 	.word	0x24000940
 800c4a8:	24000928 	.word	0x24000928

0800c4ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d108      	bne.n	800c4d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fd9a 	bl	800cffc <vPortFree>
				vPortFree( pxTCB );
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fd97 	bl	800cffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4ce:	e019      	b.n	800c504 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d103      	bne.n	800c4e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fd8e 	bl	800cffc <vPortFree>
	}
 800c4e0:	e010      	b.n	800c504 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d00b      	beq.n	800c504 <prvDeleteTCB+0x58>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	60fb      	str	r3, [r7, #12]
}
 800c4fe:	bf00      	nop
 800c500:	bf00      	nop
 800c502:	e7fd      	b.n	800c500 <prvDeleteTCB+0x54>
	}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c512:	4b0c      	ldr	r3, [pc, #48]	@ (800c544 <prvResetNextTaskUnblockTime+0x38>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d104      	bne.n	800c526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <prvResetNextTaskUnblockTime+0x3c>)
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295
 800c522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c524:	e008      	b.n	800c538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c526:	4b07      	ldr	r3, [pc, #28]	@ (800c544 <prvResetNextTaskUnblockTime+0x38>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	4a04      	ldr	r2, [pc, #16]	@ (800c548 <prvResetNextTaskUnblockTime+0x3c>)
 800c536:	6013      	str	r3, [r2, #0]
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	240008f8 	.word	0x240008f8
 800c548:	24000960 	.word	0x24000960

0800c54c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c552:	4b0b      	ldr	r3, [pc, #44]	@ (800c580 <xTaskGetSchedulerState+0x34>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d102      	bne.n	800c560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c55a:	2301      	movs	r3, #1
 800c55c:	607b      	str	r3, [r7, #4]
 800c55e:	e008      	b.n	800c572 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c560:	4b08      	ldr	r3, [pc, #32]	@ (800c584 <xTaskGetSchedulerState+0x38>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c568:	2302      	movs	r3, #2
 800c56a:	607b      	str	r3, [r7, #4]
 800c56c:	e001      	b.n	800c572 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c56e:	2300      	movs	r3, #0
 800c570:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c572:	687b      	ldr	r3, [r7, #4]
	}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	2400094c 	.word	0x2400094c
 800c584:	24000968 	.word	0x24000968

0800c588 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d069      	beq.n	800c672 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a2:	4b36      	ldr	r3, [pc, #216]	@ (800c67c <xTaskPriorityInherit+0xf4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d259      	bcs.n	800c660 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	db06      	blt.n	800c5c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b4:	4b31      	ldr	r3, [pc, #196]	@ (800c67c <xTaskPriorityInherit+0xf4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ba:	f1c3 0207 	rsb	r2, r3, #7
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	6959      	ldr	r1, [r3, #20]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c680 <xTaskPriorityInherit+0xf8>)
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	d13a      	bne.n	800c650 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fe f9a5 	bl	800a92e <uxListRemove>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d115      	bne.n	800c616 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ee:	4924      	ldr	r1, [pc, #144]	@ (800c680 <xTaskPriorityInherit+0xf8>)
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10a      	bne.n	800c616 <xTaskPriorityInherit+0x8e>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c604:	2201      	movs	r2, #1
 800c606:	fa02 f303 	lsl.w	r3, r2, r3
 800c60a:	43da      	mvns	r2, r3
 800c60c:	4b1d      	ldr	r3, [pc, #116]	@ (800c684 <xTaskPriorityInherit+0xfc>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4013      	ands	r3, r2
 800c612:	4a1c      	ldr	r2, [pc, #112]	@ (800c684 <xTaskPriorityInherit+0xfc>)
 800c614:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c616:	4b19      	ldr	r3, [pc, #100]	@ (800c67c <xTaskPriorityInherit+0xf4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	2201      	movs	r2, #1
 800c626:	409a      	lsls	r2, r3
 800c628:	4b16      	ldr	r3, [pc, #88]	@ (800c684 <xTaskPriorityInherit+0xfc>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	4a15      	ldr	r2, [pc, #84]	@ (800c684 <xTaskPriorityInherit+0xfc>)
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4a10      	ldr	r2, [pc, #64]	@ (800c680 <xTaskPriorityInherit+0xf8>)
 800c640:	441a      	add	r2, r3
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	3304      	adds	r3, #4
 800c646:	4619      	mov	r1, r3
 800c648:	4610      	mov	r0, r2
 800c64a:	f7fe f913 	bl	800a874 <vListInsertEnd>
 800c64e:	e004      	b.n	800c65a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c650:	4b0a      	ldr	r3, [pc, #40]	@ (800c67c <xTaskPriorityInherit+0xf4>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	e008      	b.n	800c672 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c664:	4b05      	ldr	r3, [pc, #20]	@ (800c67c <xTaskPriorityInherit+0xf4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d201      	bcs.n	800c672 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c672:	68fb      	ldr	r3, [r7, #12]
	}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	24000840 	.word	0x24000840
 800c680:	24000844 	.word	0x24000844
 800c684:	24000948 	.word	0x24000948

0800c688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c694:	2300      	movs	r3, #0
 800c696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d070      	beq.n	800c780 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c69e:	4b3b      	ldr	r3, [pc, #236]	@ (800c78c <xTaskPriorityDisinherit+0x104>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d00b      	beq.n	800c6c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	60fb      	str	r3, [r7, #12]
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	e7fd      	b.n	800c6bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10b      	bne.n	800c6e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	60bb      	str	r3, [r7, #8]
}
 800c6da:	bf00      	nop
 800c6dc:	bf00      	nop
 800c6de:	e7fd      	b.n	800c6dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6e4:	1e5a      	subs	r2, r3, #1
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d044      	beq.n	800c780 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d140      	bne.n	800c780 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	3304      	adds	r3, #4
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe f913 	bl	800a92e <uxListRemove>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d115      	bne.n	800c73a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c712:	491f      	ldr	r1, [pc, #124]	@ (800c790 <xTaskPriorityDisinherit+0x108>)
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <xTaskPriorityDisinherit+0xb2>
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c728:	2201      	movs	r2, #1
 800c72a:	fa02 f303 	lsl.w	r3, r2, r3
 800c72e:	43da      	mvns	r2, r3
 800c730:	4b18      	ldr	r3, [pc, #96]	@ (800c794 <xTaskPriorityDisinherit+0x10c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4013      	ands	r3, r2
 800c736:	4a17      	ldr	r2, [pc, #92]	@ (800c794 <xTaskPriorityDisinherit+0x10c>)
 800c738:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c746:	f1c3 0207 	rsb	r2, r3, #7
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c752:	2201      	movs	r2, #1
 800c754:	409a      	lsls	r2, r3
 800c756:	4b0f      	ldr	r3, [pc, #60]	@ (800c794 <xTaskPriorityDisinherit+0x10c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	4a0d      	ldr	r2, [pc, #52]	@ (800c794 <xTaskPriorityDisinherit+0x10c>)
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c764:	4613      	mov	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4a08      	ldr	r2, [pc, #32]	@ (800c790 <xTaskPriorityDisinherit+0x108>)
 800c76e:	441a      	add	r2, r3
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	3304      	adds	r3, #4
 800c774:	4619      	mov	r1, r3
 800c776:	4610      	mov	r0, r2
 800c778:	f7fe f87c 	bl	800a874 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c77c:	2301      	movs	r3, #1
 800c77e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c780:	697b      	ldr	r3, [r7, #20]
	}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	24000840 	.word	0x24000840
 800c790:	24000844 	.word	0x24000844
 800c794:	24000948 	.word	0x24000948

0800c798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8085 	beq.w	800c8bc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10b      	bne.n	800c7d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	60fb      	str	r3, [r7, #12]
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	e7fd      	b.n	800c7ce <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d902      	bls.n	800c7e2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	e002      	b.n	800c7e8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d064      	beq.n	800c8bc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d15f      	bne.n	800c8bc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c7fc:	4b31      	ldr	r3, [pc, #196]	@ (800c8c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	429a      	cmp	r2, r3
 800c804:	d10b      	bne.n	800c81e <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60bb      	str	r3, [r7, #8]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c822:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	69fa      	ldr	r2, [r7, #28]
 800c828:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	db04      	blt.n	800c83c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f1c3 0207 	rsb	r2, r3, #7
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	6959      	ldr	r1, [r3, #20]
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4a1f      	ldr	r2, [pc, #124]	@ (800c8c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c84c:	4413      	add	r3, r2
 800c84e:	4299      	cmp	r1, r3
 800c850:	d134      	bne.n	800c8bc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	3304      	adds	r3, #4
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe f869 	bl	800a92e <uxListRemove>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d115      	bne.n	800c88e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c866:	4918      	ldr	r1, [pc, #96]	@ (800c8c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c868:	4613      	mov	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	440b      	add	r3, r1
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c87c:	2201      	movs	r2, #1
 800c87e:	fa02 f303 	lsl.w	r3, r2, r3
 800c882:	43da      	mvns	r2, r3
 800c884:	4b11      	ldr	r3, [pc, #68]	@ (800c8cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4013      	ands	r3, r2
 800c88a:	4a10      	ldr	r2, [pc, #64]	@ (800c8cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c88c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c892:	2201      	movs	r2, #1
 800c894:	409a      	lsls	r2, r3
 800c896:	4b0d      	ldr	r3, [pc, #52]	@ (800c8cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	4a0b      	ldr	r2, [pc, #44]	@ (800c8cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4a06      	ldr	r2, [pc, #24]	@ (800c8c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c8ae:	441a      	add	r2, r3
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	f7fd ffdc 	bl	800a874 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8bc:	bf00      	nop
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	24000840 	.word	0x24000840
 800c8c8:	24000844 	.word	0x24000844
 800c8cc:	24000948 	.word	0x24000948

0800c8d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c8d0:	b480      	push	{r7}
 800c8d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c8d4:	4b07      	ldr	r3, [pc, #28]	@ (800c8f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c8dc:	4b05      	ldr	r3, [pc, #20]	@ (800c8f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8e2:	3201      	adds	r2, #1
 800c8e4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c8e6:	4b03      	ldr	r3, [pc, #12]	@ (800c8f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
	}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr
 800c8f4:	24000840 	.word	0x24000840

0800c8f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c902:	4b29      	ldr	r3, [pc, #164]	@ (800c9a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c908:	4b28      	ldr	r3, [pc, #160]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe f80d 	bl	800a92e <uxListRemove>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10b      	bne.n	800c932 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c91a:	4b24      	ldr	r3, [pc, #144]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c920:	2201      	movs	r2, #1
 800c922:	fa02 f303 	lsl.w	r3, r2, r3
 800c926:	43da      	mvns	r2, r3
 800c928:	4b21      	ldr	r3, [pc, #132]	@ (800c9b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4013      	ands	r3, r2
 800c92e:	4a20      	ldr	r2, [pc, #128]	@ (800c9b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c930:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d10a      	bne.n	800c950 <prvAddCurrentTaskToDelayedList+0x58>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d007      	beq.n	800c950 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c940:	4b1a      	ldr	r3, [pc, #104]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3304      	adds	r3, #4
 800c946:	4619      	mov	r1, r3
 800c948:	481a      	ldr	r0, [pc, #104]	@ (800c9b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c94a:	f7fd ff93 	bl	800a874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c94e:	e026      	b.n	800c99e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4413      	add	r3, r2
 800c956:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c958:	4b14      	ldr	r3, [pc, #80]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	429a      	cmp	r2, r3
 800c966:	d209      	bcs.n	800c97c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c968:	4b13      	ldr	r3, [pc, #76]	@ (800c9b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	4b0f      	ldr	r3, [pc, #60]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	4610      	mov	r0, r2
 800c976:	f7fd ffa1 	bl	800a8bc <vListInsert>
}
 800c97a:	e010      	b.n	800c99e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c97c:	4b0f      	ldr	r3, [pc, #60]	@ (800c9bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3304      	adds	r3, #4
 800c986:	4619      	mov	r1, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	f7fd ff97 	bl	800a8bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c98e:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	429a      	cmp	r2, r3
 800c996:	d202      	bcs.n	800c99e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c998:	4a09      	ldr	r2, [pc, #36]	@ (800c9c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6013      	str	r3, [r2, #0]
}
 800c99e:	bf00      	nop
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	24000944 	.word	0x24000944
 800c9ac:	24000840 	.word	0x24000840
 800c9b0:	24000948 	.word	0x24000948
 800c9b4:	2400092c 	.word	0x2400092c
 800c9b8:	240008fc 	.word	0x240008fc
 800c9bc:	240008f8 	.word	0x240008f8
 800c9c0:	24000960 	.word	0x24000960

0800c9c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3b04      	subs	r3, #4
 800c9d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3b04      	subs	r3, #4
 800c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f023 0201 	bic.w	r2, r3, #1
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3b04      	subs	r3, #4
 800c9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9f4:	4a0c      	ldr	r2, [pc, #48]	@ (800ca28 <pxPortInitialiseStack+0x64>)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3b14      	subs	r3, #20
 800c9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3b04      	subs	r3, #4
 800ca0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f06f 0202 	mvn.w	r2, #2
 800ca12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3b20      	subs	r3, #32
 800ca18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	0800ca2d 	.word	0x0800ca2d

0800ca2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca36:	4b13      	ldr	r3, [pc, #76]	@ (800ca84 <prvTaskExitError+0x58>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d00b      	beq.n	800ca58 <prvTaskExitError+0x2c>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
}
 800ca52:	bf00      	nop
 800ca54:	bf00      	nop
 800ca56:	e7fd      	b.n	800ca54 <prvTaskExitError+0x28>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	60bb      	str	r3, [r7, #8]
}
 800ca6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca6c:	bf00      	nop
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d0fc      	beq.n	800ca6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	24000024 	.word	0x24000024
	...

0800ca90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca90:	4b07      	ldr	r3, [pc, #28]	@ (800cab0 <pxCurrentTCBConst2>)
 800ca92:	6819      	ldr	r1, [r3, #0]
 800ca94:	6808      	ldr	r0, [r1, #0]
 800ca96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9a:	f380 8809 	msr	PSP, r0
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f04f 0000 	mov.w	r0, #0
 800caa6:	f380 8811 	msr	BASEPRI, r0
 800caaa:	4770      	bx	lr
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst2>:
 800cab0:	24000840 	.word	0x24000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop

0800cab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cab8:	4808      	ldr	r0, [pc, #32]	@ (800cadc <prvPortStartFirstTask+0x24>)
 800caba:	6800      	ldr	r0, [r0, #0]
 800cabc:	6800      	ldr	r0, [r0, #0]
 800cabe:	f380 8808 	msr	MSP, r0
 800cac2:	f04f 0000 	mov.w	r0, #0
 800cac6:	f380 8814 	msr	CONTROL, r0
 800caca:	b662      	cpsie	i
 800cacc:	b661      	cpsie	f
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	df00      	svc	0
 800cad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cada:	bf00      	nop
 800cadc:	e000ed08 	.word	0xe000ed08

0800cae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cae6:	4b47      	ldr	r3, [pc, #284]	@ (800cc04 <xPortStartScheduler+0x124>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a47      	ldr	r2, [pc, #284]	@ (800cc08 <xPortStartScheduler+0x128>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d10b      	bne.n	800cb08 <xPortStartScheduler+0x28>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	613b      	str	r3, [r7, #16]
}
 800cb02:	bf00      	nop
 800cb04:	bf00      	nop
 800cb06:	e7fd      	b.n	800cb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb08:	4b3e      	ldr	r3, [pc, #248]	@ (800cc04 <xPortStartScheduler+0x124>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a3f      	ldr	r2, [pc, #252]	@ (800cc0c <xPortStartScheduler+0x12c>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d10b      	bne.n	800cb2a <xPortStartScheduler+0x4a>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	60fb      	str	r3, [r7, #12]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb2a:	4b39      	ldr	r3, [pc, #228]	@ (800cc10 <xPortStartScheduler+0x130>)
 800cb2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	22ff      	movs	r2, #255	@ 0xff
 800cb3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	4b31      	ldr	r3, [pc, #196]	@ (800cc14 <xPortStartScheduler+0x134>)
 800cb50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb52:	4b31      	ldr	r3, [pc, #196]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cb54:	2207      	movs	r2, #7
 800cb56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb58:	e009      	b.n	800cb6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cb5a:	4b2f      	ldr	r3, [pc, #188]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	4a2d      	ldr	r2, [pc, #180]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cb62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb64:	78fb      	ldrb	r3, [r7, #3]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb76:	2b80      	cmp	r3, #128	@ 0x80
 800cb78:	d0ef      	beq.n	800cb5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb7a:	4b27      	ldr	r3, [pc, #156]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f1c3 0307 	rsb	r3, r3, #7
 800cb82:	2b04      	cmp	r3, #4
 800cb84:	d00b      	beq.n	800cb9e <xPortStartScheduler+0xbe>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	60bb      	str	r3, [r7, #8]
}
 800cb98:	bf00      	nop
 800cb9a:	bf00      	nop
 800cb9c:	e7fd      	b.n	800cb9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb9e:	4b1e      	ldr	r3, [pc, #120]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	4a1c      	ldr	r2, [pc, #112]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cba8:	4b1b      	ldr	r3, [pc, #108]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cbb0:	4a19      	ldr	r2, [pc, #100]	@ (800cc18 <xPortStartScheduler+0x138>)
 800cbb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbbc:	4b17      	ldr	r3, [pc, #92]	@ (800cc1c <xPortStartScheduler+0x13c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a16      	ldr	r2, [pc, #88]	@ (800cc1c <xPortStartScheduler+0x13c>)
 800cbc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cbc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbc8:	4b14      	ldr	r3, [pc, #80]	@ (800cc1c <xPortStartScheduler+0x13c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a13      	ldr	r2, [pc, #76]	@ (800cc1c <xPortStartScheduler+0x13c>)
 800cbce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cbd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbd4:	f000 f8da 	bl	800cd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbd8:	4b11      	ldr	r3, [pc, #68]	@ (800cc20 <xPortStartScheduler+0x140>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbde:	f000 f8f9 	bl	800cdd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbe2:	4b10      	ldr	r3, [pc, #64]	@ (800cc24 <xPortStartScheduler+0x144>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a0f      	ldr	r2, [pc, #60]	@ (800cc24 <xPortStartScheduler+0x144>)
 800cbe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cbec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbee:	f7ff ff63 	bl	800cab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbf2:	f7ff fa69 	bl	800c0c8 <vTaskSwitchContext>
	prvTaskExitError();
 800cbf6:	f7ff ff19 	bl	800ca2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	e000ed00 	.word	0xe000ed00
 800cc08:	410fc271 	.word	0x410fc271
 800cc0c:	410fc270 	.word	0x410fc270
 800cc10:	e000e400 	.word	0xe000e400
 800cc14:	2400096c 	.word	0x2400096c
 800cc18:	24000970 	.word	0x24000970
 800cc1c:	e000ed20 	.word	0xe000ed20
 800cc20:	24000024 	.word	0x24000024
 800cc24:	e000ef34 	.word	0xe000ef34

0800cc28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	607b      	str	r3, [r7, #4]
}
 800cc40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc42:	4b10      	ldr	r3, [pc, #64]	@ (800cc84 <vPortEnterCritical+0x5c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	4a0e      	ldr	r2, [pc, #56]	@ (800cc84 <vPortEnterCritical+0x5c>)
 800cc4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <vPortEnterCritical+0x5c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d110      	bne.n	800cc76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc54:	4b0c      	ldr	r3, [pc, #48]	@ (800cc88 <vPortEnterCritical+0x60>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <vPortEnterCritical+0x4e>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	603b      	str	r3, [r7, #0]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <vPortEnterCritical+0x4a>
	}
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	24000024 	.word	0x24000024
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc92:	4b12      	ldr	r3, [pc, #72]	@ (800ccdc <vPortExitCritical+0x50>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10b      	bne.n	800ccb2 <vPortExitCritical+0x26>
	__asm volatile
 800cc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	607b      	str	r3, [r7, #4]
}
 800ccac:	bf00      	nop
 800ccae:	bf00      	nop
 800ccb0:	e7fd      	b.n	800ccae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ccdc <vPortExitCritical+0x50>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	4a08      	ldr	r2, [pc, #32]	@ (800ccdc <vPortExitCritical+0x50>)
 800ccba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccbc:	4b07      	ldr	r3, [pc, #28]	@ (800ccdc <vPortExitCritical+0x50>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d105      	bne.n	800ccd0 <vPortExitCritical+0x44>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f383 8811 	msr	BASEPRI, r3
}
 800ccce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	24000024 	.word	0x24000024

0800cce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cce0:	f3ef 8009 	mrs	r0, PSP
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	4b15      	ldr	r3, [pc, #84]	@ (800cd40 <pxCurrentTCBConst>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	f01e 0f10 	tst.w	lr, #16
 800ccf0:	bf08      	it	eq
 800ccf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfa:	6010      	str	r0, [r2, #0]
 800ccfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd04:	f380 8811 	msr	BASEPRI, r0
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f7ff f9da 	bl	800c0c8 <vTaskSwitchContext>
 800cd14:	f04f 0000 	mov.w	r0, #0
 800cd18:	f380 8811 	msr	BASEPRI, r0
 800cd1c:	bc09      	pop	{r0, r3}
 800cd1e:	6819      	ldr	r1, [r3, #0]
 800cd20:	6808      	ldr	r0, [r1, #0]
 800cd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd26:	f01e 0f10 	tst.w	lr, #16
 800cd2a:	bf08      	it	eq
 800cd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd30:	f380 8809 	msr	PSP, r0
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	f3af 8000 	nop.w

0800cd40 <pxCurrentTCBConst>:
 800cd40:	24000840 	.word	0x24000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop

0800cd48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	607b      	str	r3, [r7, #4]
}
 800cd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd62:	f7ff f8f7 	bl	800bf54 <xTaskIncrementTick>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d003      	beq.n	800cd74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd6c:	4b06      	ldr	r3, [pc, #24]	@ (800cd88 <SysTick_Handler+0x40>)
 800cd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	2300      	movs	r3, #0
 800cd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	f383 8811 	msr	BASEPRI, r3
}
 800cd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd90:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc0 <vPortSetupTimerInterrupt+0x34>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd96:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc4 <vPortSetupTimerInterrupt+0x38>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc8 <vPortSetupTimerInterrupt+0x3c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a0a      	ldr	r2, [pc, #40]	@ (800cdcc <vPortSetupTimerInterrupt+0x40>)
 800cda2:	fba2 2303 	umull	r2, r3, r2, r3
 800cda6:	099b      	lsrs	r3, r3, #6
 800cda8:	4a09      	ldr	r2, [pc, #36]	@ (800cdd0 <vPortSetupTimerInterrupt+0x44>)
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdae:	4b04      	ldr	r3, [pc, #16]	@ (800cdc0 <vPortSetupTimerInterrupt+0x34>)
 800cdb0:	2207      	movs	r2, #7
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	e000e010 	.word	0xe000e010
 800cdc4:	e000e018 	.word	0xe000e018
 800cdc8:	24000000 	.word	0x24000000
 800cdcc:	10624dd3 	.word	0x10624dd3
 800cdd0:	e000e014 	.word	0xe000e014

0800cdd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cde4 <vPortEnableVFP+0x10>
 800cdd8:	6801      	ldr	r1, [r0, #0]
 800cdda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cdde:	6001      	str	r1, [r0, #0]
 800cde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cde2:	bf00      	nop
 800cde4:	e000ed88 	.word	0xe000ed88

0800cde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdee:	f3ef 8305 	mrs	r3, IPSR
 800cdf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b0f      	cmp	r3, #15
 800cdf8:	d915      	bls.n	800ce26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdfa:	4a18      	ldr	r2, [pc, #96]	@ (800ce5c <vPortValidateInterruptPriority+0x74>)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce04:	4b16      	ldr	r3, [pc, #88]	@ (800ce60 <vPortValidateInterruptPriority+0x78>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	7afa      	ldrb	r2, [r7, #11]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d20b      	bcs.n	800ce26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	607b      	str	r3, [r7, #4]
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	e7fd      	b.n	800ce22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce26:	4b0f      	ldr	r3, [pc, #60]	@ (800ce64 <vPortValidateInterruptPriority+0x7c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ce2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce68 <vPortValidateInterruptPriority+0x80>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d90b      	bls.n	800ce4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	603b      	str	r3, [r7, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <vPortValidateInterruptPriority+0x62>
	}
 800ce4e:	bf00      	nop
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	e000e3f0 	.word	0xe000e3f0
 800ce60:	2400096c 	.word	0x2400096c
 800ce64:	e000ed0c 	.word	0xe000ed0c
 800ce68:	24000970 	.word	0x24000970

0800ce6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08a      	sub	sp, #40	@ 0x28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce78:	f7fe ff9e 	bl	800bdb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce7c:	4b5a      	ldr	r3, [pc, #360]	@ (800cfe8 <pvPortMalloc+0x17c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce84:	f000 f922 	bl	800d0cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce88:	4b58      	ldr	r3, [pc, #352]	@ (800cfec <pvPortMalloc+0x180>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4013      	ands	r3, r2
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f040 8090 	bne.w	800cfb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01e      	beq.n	800ceda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ce9c:	2208      	movs	r2, #8
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f003 0307 	and.w	r3, r3, #7
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d015      	beq.n	800ceda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f023 0307 	bic.w	r3, r3, #7
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f003 0307 	and.w	r3, r3, #7
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00b      	beq.n	800ceda <pvPortMalloc+0x6e>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	617b      	str	r3, [r7, #20]
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	e7fd      	b.n	800ced6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d06a      	beq.n	800cfb6 <pvPortMalloc+0x14a>
 800cee0:	4b43      	ldr	r3, [pc, #268]	@ (800cff0 <pvPortMalloc+0x184>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d865      	bhi.n	800cfb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceea:	4b42      	ldr	r3, [pc, #264]	@ (800cff4 <pvPortMalloc+0x188>)
 800ceec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ceee:	4b41      	ldr	r3, [pc, #260]	@ (800cff4 <pvPortMalloc+0x188>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cef4:	e004      	b.n	800cf00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d903      	bls.n	800cf12 <pvPortMalloc+0xa6>
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1f1      	bne.n	800cef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf12:	4b35      	ldr	r3, [pc, #212]	@ (800cfe8 <pvPortMalloc+0x17c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d04c      	beq.n	800cfb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2208      	movs	r2, #8
 800cf22:	4413      	add	r3, r2
 800cf24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	1ad2      	subs	r2, r2, r3
 800cf36:	2308      	movs	r3, #8
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d920      	bls.n	800cf80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4413      	add	r3, r2
 800cf44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	f003 0307 	and.w	r3, r3, #7
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00b      	beq.n	800cf68 <pvPortMalloc+0xfc>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	613b      	str	r3, [r7, #16]
}
 800cf62:	bf00      	nop
 800cf64:	bf00      	nop
 800cf66:	e7fd      	b.n	800cf64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	1ad2      	subs	r2, r2, r3
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf7a:	69b8      	ldr	r0, [r7, #24]
 800cf7c:	f000 f908 	bl	800d190 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf80:	4b1b      	ldr	r3, [pc, #108]	@ (800cff0 <pvPortMalloc+0x184>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	4a19      	ldr	r2, [pc, #100]	@ (800cff0 <pvPortMalloc+0x184>)
 800cf8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf8e:	4b18      	ldr	r3, [pc, #96]	@ (800cff0 <pvPortMalloc+0x184>)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	4b19      	ldr	r3, [pc, #100]	@ (800cff8 <pvPortMalloc+0x18c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d203      	bcs.n	800cfa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf9a:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <pvPortMalloc+0x184>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a16      	ldr	r2, [pc, #88]	@ (800cff8 <pvPortMalloc+0x18c>)
 800cfa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	4b11      	ldr	r3, [pc, #68]	@ (800cfec <pvPortMalloc+0x180>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfb6:	f7fe ff0d 	bl	800bdd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	f003 0307 	and.w	r3, r3, #7
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <pvPortMalloc+0x170>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	60fb      	str	r3, [r7, #12]
}
 800cfd6:	bf00      	nop
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <pvPortMalloc+0x16c>
	return pvReturn;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3728      	adds	r7, #40	@ 0x28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2400457c 	.word	0x2400457c
 800cfec:	24004588 	.word	0x24004588
 800cff0:	24004580 	.word	0x24004580
 800cff4:	24004574 	.word	0x24004574
 800cff8:	24004584 	.word	0x24004584

0800cffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d04a      	beq.n	800d0a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d00e:	2308      	movs	r3, #8
 800d010:	425b      	negs	r3, r3
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	4413      	add	r3, r2
 800d016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	4b22      	ldr	r3, [pc, #136]	@ (800d0ac <vPortFree+0xb0>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4013      	ands	r3, r2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10b      	bne.n	800d042 <vPortFree+0x46>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	60fb      	str	r3, [r7, #12]
}
 800d03c:	bf00      	nop
 800d03e:	bf00      	nop
 800d040:	e7fd      	b.n	800d03e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00b      	beq.n	800d062 <vPortFree+0x66>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	60bb      	str	r3, [r7, #8]
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	e7fd      	b.n	800d05e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	4b11      	ldr	r3, [pc, #68]	@ (800d0ac <vPortFree+0xb0>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d019      	beq.n	800d0a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d115      	bne.n	800d0a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	4b0b      	ldr	r3, [pc, #44]	@ (800d0ac <vPortFree+0xb0>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	43db      	mvns	r3, r3
 800d082:	401a      	ands	r2, r3
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d088:	f7fe fe96 	bl	800bdb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	4b07      	ldr	r3, [pc, #28]	@ (800d0b0 <vPortFree+0xb4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4413      	add	r3, r2
 800d096:	4a06      	ldr	r2, [pc, #24]	@ (800d0b0 <vPortFree+0xb4>)
 800d098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d09a:	6938      	ldr	r0, [r7, #16]
 800d09c:	f000 f878 	bl	800d190 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0a0:	f7fe fe98 	bl	800bdd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0a4:	bf00      	nop
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	24004588 	.word	0x24004588
 800d0b0:	24004580 	.word	0x24004580

0800d0b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800d0b8:	4b03      	ldr	r3, [pc, #12]	@ (800d0c8 <xPortGetFreeHeapSize+0x14>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	24004580 	.word	0x24004580

0800d0cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d0d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0d8:	4b27      	ldr	r3, [pc, #156]	@ (800d178 <prvHeapInit+0xac>)
 800d0da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00c      	beq.n	800d100 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3307      	adds	r3, #7
 800d0ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f023 0307 	bic.w	r3, r3, #7
 800d0f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d178 <prvHeapInit+0xac>)
 800d0fc:	4413      	add	r3, r2
 800d0fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d104:	4a1d      	ldr	r2, [pc, #116]	@ (800d17c <prvHeapInit+0xb0>)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d10a:	4b1c      	ldr	r3, [pc, #112]	@ (800d17c <prvHeapInit+0xb0>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	4413      	add	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d118:	2208      	movs	r2, #8
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	1a9b      	subs	r3, r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4a15      	ldr	r2, [pc, #84]	@ (800d180 <prvHeapInit+0xb4>)
 800d12c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d12e:	4b14      	ldr	r3, [pc, #80]	@ (800d180 <prvHeapInit+0xb4>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2200      	movs	r2, #0
 800d134:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d136:	4b12      	ldr	r3, [pc, #72]	@ (800d180 <prvHeapInit+0xb4>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2200      	movs	r2, #0
 800d13c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d14c:	4b0c      	ldr	r3, [pc, #48]	@ (800d180 <prvHeapInit+0xb4>)
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	4a0a      	ldr	r2, [pc, #40]	@ (800d184 <prvHeapInit+0xb8>)
 800d15a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4a09      	ldr	r2, [pc, #36]	@ (800d188 <prvHeapInit+0xbc>)
 800d162:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d164:	4b09      	ldr	r3, [pc, #36]	@ (800d18c <prvHeapInit+0xc0>)
 800d166:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d16a:	601a      	str	r2, [r3, #0]
}
 800d16c:	bf00      	nop
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	24000974 	.word	0x24000974
 800d17c:	24004574 	.word	0x24004574
 800d180:	2400457c 	.word	0x2400457c
 800d184:	24004584 	.word	0x24004584
 800d188:	24004580 	.word	0x24004580
 800d18c:	24004588 	.word	0x24004588

0800d190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d198:	4b28      	ldr	r3, [pc, #160]	@ (800d23c <prvInsertBlockIntoFreeList+0xac>)
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	e002      	b.n	800d1a4 <prvInsertBlockIntoFreeList+0x14>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60fb      	str	r3, [r7, #12]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d8f7      	bhi.n	800d19e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d108      	bne.n	800d1d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	441a      	add	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	441a      	add	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d118      	bne.n	800d218 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	4b15      	ldr	r3, [pc, #84]	@ (800d240 <prvInsertBlockIntoFreeList+0xb0>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d00d      	beq.n	800d20e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	441a      	add	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	601a      	str	r2, [r3, #0]
 800d20c:	e008      	b.n	800d220 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d20e:	4b0c      	ldr	r3, [pc, #48]	@ (800d240 <prvInsertBlockIntoFreeList+0xb0>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e003      	b.n	800d220 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	429a      	cmp	r2, r3
 800d226:	d002      	beq.n	800d22e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d22e:	bf00      	nop
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	24004574 	.word	0x24004574
 800d240:	2400457c 	.word	0x2400457c

0800d244 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	330c      	adds	r3, #12
 800d254:	461a      	mov	r2, r3
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f002 f98f 	bl	800f57c <tcpip_send_msg_wait_sem>
 800d25e:	4603      	mov	r3, r0
 800d260:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d103      	bne.n	800d272 <netconn_apimsg+0x2e>
    return apimsg->err;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d270:	e001      	b.n	800d276 <netconn_apimsg+0x32>
  }
  return err;
 800d272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	@ 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	603a      	str	r2, [r7, #0]
 800d28a:	71fb      	strb	r3, [r7, #7]
 800d28c:	460b      	mov	r3, r1
 800d28e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	4618      	mov	r0, r3
 800d296:	f000 ff83 	bl	800e1a0 <netconn_alloc>
 800d29a:	6278      	str	r0, [r7, #36]	@ 0x24
  if (conn != NULL) {
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d054      	beq.n	800d34c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d2a2:	79bb      	ldrb	r3, [r7, #6]
 800d2a4:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4829      	ldr	r0, [pc, #164]	@ (800d358 <netconn_new_with_proto_and_callback+0xd8>)
 800d2b2:	f7ff ffc7 	bl	800d244 <netconn_apimsg>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (err != ERR_OK) {
 800d2bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d043      	beq.n	800d34c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d005      	beq.n	800d2d8 <netconn_new_with_proto_and_callback+0x58>
 800d2cc:	4b23      	ldr	r3, [pc, #140]	@ (800d35c <netconn_new_with_proto_and_callback+0xdc>)
 800d2ce:	2289      	movs	r2, #137	@ 0x89
 800d2d0:	4923      	ldr	r1, [pc, #140]	@ (800d360 <netconn_new_with_proto_and_callback+0xe0>)
 800d2d2:	4824      	ldr	r0, [pc, #144]	@ (800d364 <netconn_new_with_proto_and_callback+0xe4>)
 800d2d4:	f00d fce6 	bl	801aca4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	3310      	adds	r3, #16
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f00d faa8 	bl	801a832 <sys_mbox_valid>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d105      	bne.n	800d2f4 <netconn_new_with_proto_and_callback+0x74>
 800d2e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d35c <netconn_new_with_proto_and_callback+0xdc>)
 800d2ea:	228a      	movs	r2, #138	@ 0x8a
 800d2ec:	491e      	ldr	r1, [pc, #120]	@ (800d368 <netconn_new_with_proto_and_callback+0xe8>)
 800d2ee:	481d      	ldr	r0, [pc, #116]	@ (800d364 <netconn_new_with_proto_and_callback+0xe4>)
 800d2f0:	f00d fcd8 	bl	801aca4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	3314      	adds	r3, #20
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f00d fa9a 	bl	801a832 <sys_mbox_valid>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d005      	beq.n	800d310 <netconn_new_with_proto_and_callback+0x90>
 800d304:	4b15      	ldr	r3, [pc, #84]	@ (800d35c <netconn_new_with_proto_and_callback+0xdc>)
 800d306:	228c      	movs	r2, #140	@ 0x8c
 800d308:	4918      	ldr	r1, [pc, #96]	@ (800d36c <netconn_new_with_proto_and_callback+0xec>)
 800d30a:	4816      	ldr	r0, [pc, #88]	@ (800d364 <netconn_new_with_proto_and_callback+0xe4>)
 800d30c:	f00d fcca 	bl	801aca4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	330c      	adds	r3, #12
 800d314:	4618      	mov	r0, r3
 800d316:	f00d fb1d 	bl	801a954 <sys_sem_valid>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d105      	bne.n	800d32c <netconn_new_with_proto_and_callback+0xac>
 800d320:	4b0e      	ldr	r3, [pc, #56]	@ (800d35c <netconn_new_with_proto_and_callback+0xdc>)
 800d322:	228f      	movs	r2, #143	@ 0x8f
 800d324:	4912      	ldr	r1, [pc, #72]	@ (800d370 <netconn_new_with_proto_and_callback+0xf0>)
 800d326:	480f      	ldr	r0, [pc, #60]	@ (800d364 <netconn_new_with_proto_and_callback+0xe4>)
 800d328:	f00d fcbc 	bl	801aca4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	330c      	adds	r3, #12
 800d330:	4618      	mov	r0, r3
 800d332:	f00d fb02 	bl	801a93a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d338:	3310      	adds	r3, #16
 800d33a:	4618      	mov	r0, r3
 800d33c:	f00d f9dc 	bl	801a6f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d342:	2007      	movs	r0, #7
 800d344:	f002 fe14 	bl	800ff70 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	e000      	b.n	800d34e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	@ 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	0800e149 	.word	0x0800e149
 800d35c:	0801c2d4 	.word	0x0801c2d4
 800d360:	0801c33c 	.word	0x0801c33c
 800d364:	0801c360 	.word	0x0801c360
 800d368:	0801c388 	.word	0x0801c388
 800d36c:	0801c3a0 	.word	0x0801c3a0
 800d370:	0801c3c4 	.word	0x0801c3c4

0800d374 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <netconn_delete+0x12>
    return ERR_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	e016      	b.n	800d3b4 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d38a:	2329      	movs	r3, #41	@ 0x29
 800d38c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d38e:	f107 0308 	add.w	r3, r7, #8
 800d392:	4619      	mov	r1, r3
 800d394:	4809      	ldr	r0, [pc, #36]	@ (800d3bc <netconn_delete+0x48>)
 800d396:	f7ff ff55 	bl	800d244 <netconn_apimsg>
 800d39a:	4603      	mov	r3, r0
 800d39c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d39e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <netconn_delete+0x38>
    return err;
 800d3a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3aa:	e003      	b.n	800d3b4 <netconn_delete+0x40>
  }

  netconn_free(conn);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 ff67 	bl	800e280 <netconn_free>

  return ERR_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3720      	adds	r7, #32
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	0800e70d 	.word	0x0800e70d

0800d3c0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08a      	sub	sp, #40	@ 0x28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d108      	bne.n	800d3e6 <netconn_bind+0x26>
 800d3d4:	4b11      	ldr	r3, [pc, #68]	@ (800d41c <netconn_bind+0x5c>)
 800d3d6:	22ff      	movs	r2, #255	@ 0xff
 800d3d8:	4911      	ldr	r1, [pc, #68]	@ (800d420 <netconn_bind+0x60>)
 800d3da:	4812      	ldr	r0, [pc, #72]	@ (800d424 <netconn_bind+0x64>)
 800d3dc:	f00d fc62 	bl	801aca4 <iprintf>
 800d3e0:	f06f 030f 	mvn.w	r3, #15
 800d3e4:	e015      	b.n	800d412 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800d3ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d428 <netconn_bind+0x68>)
 800d3ee:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d3fc:	f107 0310 	add.w	r3, r7, #16
 800d400:	4619      	mov	r1, r3
 800d402:	480a      	ldr	r0, [pc, #40]	@ (800d42c <netconn_bind+0x6c>)
 800d404:	f7ff ff1e 	bl	800d244 <netconn_apimsg>
 800d408:	4603      	mov	r3, r0
 800d40a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800d40e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d412:	4618      	mov	r0, r3
 800d414:	3728      	adds	r7, #40	@ 0x28
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	0801c2d4 	.word	0x0801c2d4
 800d420:	0801c440 	.word	0x0801c440
 800d424:	0801c360 	.word	0x0801c360
 800d428:	0801f3f0 	.word	0x0801f3f0
 800d42c:	0800e911 	.word	0x0800e911

0800d430 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d109      	bne.n	800d456 <netconn_listen_with_backlog+0x26>
 800d442:	4b0d      	ldr	r3, [pc, #52]	@ (800d478 <netconn_listen_with_backlog+0x48>)
 800d444:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d448:	490c      	ldr	r1, [pc, #48]	@ (800d47c <netconn_listen_with_backlog+0x4c>)
 800d44a:	480d      	ldr	r0, [pc, #52]	@ (800d480 <netconn_listen_with_backlog+0x50>)
 800d44c:	f00d fc2a 	bl	801aca4 <iprintf>
 800d450:	f06f 030f 	mvn.w	r3, #15
 800d454:	e00b      	b.n	800d46e <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d45a:	f107 0308 	add.w	r3, r7, #8
 800d45e:	4619      	mov	r1, r3
 800d460:	4808      	ldr	r0, [pc, #32]	@ (800d484 <netconn_listen_with_backlog+0x54>)
 800d462:	f7ff feef 	bl	800d244 <netconn_apimsg>
 800d466:	4603      	mov	r3, r0
 800d468:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d46a:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	0801c2d4 	.word	0x0801c2d4
 800d47c:	0801c4a0 	.word	0x0801c4a0
 800d480:	0801c360 	.word	0x0801c360
 800d484:	0800e9d1 	.word	0x0800e9d1

0800d488 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d109      	bne.n	800d4ac <netconn_accept+0x24>
 800d498:	4b34      	ldr	r3, [pc, #208]	@ (800d56c <netconn_accept+0xe4>)
 800d49a:	f240 128d 	movw	r2, #397	@ 0x18d
 800d49e:	4934      	ldr	r1, [pc, #208]	@ (800d570 <netconn_accept+0xe8>)
 800d4a0:	4834      	ldr	r0, [pc, #208]	@ (800d574 <netconn_accept+0xec>)
 800d4a2:	f00d fbff 	bl	801aca4 <iprintf>
 800d4a6:	f06f 030f 	mvn.w	r3, #15
 800d4aa:	e05b      	b.n	800d564 <netconn_accept+0xdc>
  *new_conn = NULL;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <netconn_accept+0x44>
 800d4b8:	4b2c      	ldr	r3, [pc, #176]	@ (800d56c <netconn_accept+0xe4>)
 800d4ba:	f240 128f 	movw	r2, #399	@ 0x18f
 800d4be:	492e      	ldr	r1, [pc, #184]	@ (800d578 <netconn_accept+0xf0>)
 800d4c0:	482c      	ldr	r0, [pc, #176]	@ (800d574 <netconn_accept+0xec>)
 800d4c2:	f00d fbef 	bl	801aca4 <iprintf>
 800d4c6:	f06f 030f 	mvn.w	r3, #15
 800d4ca:	e04b      	b.n	800d564 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4d2:	f113 0f0c 	cmn.w	r3, #12
 800d4d6:	da03      	bge.n	800d4e0 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4de:	e041      	b.n	800d564 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3314      	adds	r3, #20
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f00d f9a4 	bl	801a832 <sys_mbox_valid>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <netconn_accept+0x6e>
    return ERR_CLSD;
 800d4f0:	f06f 030e 	mvn.w	r3, #14
 800d4f4:	e036      	b.n	800d564 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3314      	adds	r3, #20
 800d4fa:	f107 010c 	add.w	r1, r7, #12
 800d4fe:	2200      	movs	r2, #0
 800d500:	4618      	mov	r0, r3
 800d502:	f00d f93b 	bl	801a77c <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d005      	beq.n	800d51e <netconn_accept+0x96>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d516:	2200      	movs	r2, #0
 800d518:	2101      	movs	r1, #1
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	4a16      	ldr	r2, [pc, #88]	@ (800d57c <netconn_accept+0xf4>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d102      	bne.n	800d52c <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800d526:	f06f 030c 	mvn.w	r3, #12
 800d52a:	e01b      	b.n	800d564 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d114      	bne.n	800d55c <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00e      	beq.n	800d556 <netconn_accept+0xce>
 800d538:	f00d fa96 	bl	801aa68 <sys_arch_protect>
 800d53c:	6138      	str	r0, [r7, #16]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d544:	f113 0f0c 	cmn.w	r3, #12
 800d548:	db02      	blt.n	800d550 <netconn_accept+0xc8>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	22f1      	movs	r2, #241	@ 0xf1
 800d54e:	721a      	strb	r2, [r3, #8]
 800d550:	6938      	ldr	r0, [r7, #16]
 800d552:	f00d fa97 	bl	801aa84 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800d556:	f06f 030e 	mvn.w	r3, #14
 800d55a:	e003      	b.n	800d564 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	697a      	ldr	r2, [r7, #20]
 800d560:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d562:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	0801c2d4 	.word	0x0801c2d4
 800d570:	0801c4c0 	.word	0x0801c4c0
 800d574:	0801c360 	.word	0x0801c360
 800d578:	0801c4e0 	.word	0x0801c4e0
 800d57c:	2400458c 	.word	0x2400458c

0800d580 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08a      	sub	sp, #40	@ 0x28
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d109      	bne.n	800d5a8 <netconn_recv_data+0x28>
 800d594:	4b5c      	ldr	r3, [pc, #368]	@ (800d708 <netconn_recv_data+0x188>)
 800d596:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800d59a:	495c      	ldr	r1, [pc, #368]	@ (800d70c <netconn_recv_data+0x18c>)
 800d59c:	485c      	ldr	r0, [pc, #368]	@ (800d710 <netconn_recv_data+0x190>)
 800d59e:	f00d fb81 	bl	801aca4 <iprintf>
 800d5a2:	f06f 030f 	mvn.w	r3, #15
 800d5a6:	e0aa      	b.n	800d6fe <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d109      	bne.n	800d5c8 <netconn_recv_data+0x48>
 800d5b4:	4b54      	ldr	r3, [pc, #336]	@ (800d708 <netconn_recv_data+0x188>)
 800d5b6:	f240 12e9 	movw	r2, #489	@ 0x1e9
 800d5ba:	4956      	ldr	r1, [pc, #344]	@ (800d714 <netconn_recv_data+0x194>)
 800d5bc:	4854      	ldr	r0, [pc, #336]	@ (800d710 <netconn_recv_data+0x190>)
 800d5be:	f00d fb71 	bl	801aca4 <iprintf>
 800d5c2:	f06f 030f 	mvn.w	r3, #15
 800d5c6:	e09a      	b.n	800d6fe <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5d0:	2b10      	cmp	r3, #16
 800d5d2:	d115      	bne.n	800d600 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3310      	adds	r3, #16
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f00d f92a 	bl	801a832 <sys_mbox_valid>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10d      	bne.n	800d600 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3314      	adds	r3, #20
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f00d f922 	bl	801a832 <sys_mbox_valid>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <netconn_recv_data+0x7a>
 800d5f4:	f06f 030a 	mvn.w	r3, #10
 800d5f8:	e081      	b.n	800d6fe <netconn_recv_data+0x17e>
 800d5fa:	f06f 030e 	mvn.w	r3, #14
 800d5fe:	e07e      	b.n	800d6fe <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3310      	adds	r3, #16
 800d604:	4618      	mov	r0, r3
 800d606:	f00d f914 	bl	801a832 <sys_mbox_valid>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d109      	bne.n	800d624 <netconn_recv_data+0xa4>
 800d610:	4b3d      	ldr	r3, [pc, #244]	@ (800d708 <netconn_recv_data+0x188>)
 800d612:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800d616:	4940      	ldr	r1, [pc, #256]	@ (800d718 <netconn_recv_data+0x198>)
 800d618:	483d      	ldr	r0, [pc, #244]	@ (800d710 <netconn_recv_data+0x190>)
 800d61a:	f00d fb43 	bl	801aca4 <iprintf>
 800d61e:	f06f 030a 	mvn.w	r3, #10
 800d622:	e06c      	b.n	800d6fe <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d62a:	f113 0f0c 	cmn.w	r3, #12
 800d62e:	da03      	bge.n	800d638 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d636:	e062      	b.n	800d6fe <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3310      	adds	r3, #16
 800d63c:	f107 0120 	add.w	r1, r7, #32
 800d640:	2200      	movs	r2, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f00d f89a 	bl	801a77c <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d650:	2b10      	cmp	r3, #16
 800d652:	d138      	bne.n	800d6c6 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	891b      	ldrh	r3, [r3, #8]
 800d662:	617b      	str	r3, [r7, #20]
 800d664:	e001      	b.n	800d66a <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d666:	2301      	movs	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	4619      	mov	r1, r3
 800d670:	482a      	ldr	r0, [pc, #168]	@ (800d71c <netconn_recv_data+0x19c>)
 800d672:	f7ff fde7 	bl	800d244 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d120      	bne.n	800d6be <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d680:	2b00      	cmp	r3, #0
 800d682:	d005      	beq.n	800d690 <netconn_recv_data+0x110>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d688:	2200      	movs	r2, #0
 800d68a:	2101      	movs	r1, #1
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10b      	bne.n	800d6b0 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <netconn_recv_data+0x12a>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d6a8:	e029      	b.n	800d6fe <netconn_recv_data+0x17e>
 800d6aa:	f06f 030d 	mvn.w	r3, #13
 800d6ae:	e026      	b.n	800d6fe <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f926 	bl	800d904 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d6b8:	f06f 030e 	mvn.w	r3, #14
 800d6bc:	e01f      	b.n	800d6fe <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	891b      	ldrh	r3, [r3, #8]
 800d6c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d6c4:	e00d      	b.n	800d6e2 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <netconn_recv_data+0x15a>
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d708 <netconn_recv_data+0x188>)
 800d6ce:	f240 223e 	movw	r2, #574	@ 0x23e
 800d6d2:	4913      	ldr	r1, [pc, #76]	@ (800d720 <netconn_recv_data+0x1a0>)
 800d6d4:	480e      	ldr	r0, [pc, #56]	@ (800d710 <netconn_recv_data+0x190>)
 800d6d6:	f00d fae5 	bl	801aca4 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	891b      	ldrh	r3, [r3, #8]
 800d6e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <netconn_recv_data+0x176>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d6f6:	6a3a      	ldr	r2, [r7, #32]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3728      	adds	r7, #40	@ 0x28
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	0801c2d4 	.word	0x0801c2d4
 800d70c:	0801c500 	.word	0x0801c500
 800d710:	0801c360 	.word	0x0801c360
 800d714:	0801c520 	.word	0x0801c520
 800d718:	0801c53c 	.word	0x0801c53c
 800d71c:	0800eb55 	.word	0x0800eb55
 800d720:	0801c55c 	.word	0x0801c55c

0800d724 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <netconn_recv+0x28>
 800d738:	4b31      	ldr	r3, [pc, #196]	@ (800d800 <netconn_recv+0xdc>)
 800d73a:	f44f 721d 	mov.w	r2, #628	@ 0x274
 800d73e:	4931      	ldr	r1, [pc, #196]	@ (800d804 <netconn_recv+0xe0>)
 800d740:	4831      	ldr	r0, [pc, #196]	@ (800d808 <netconn_recv+0xe4>)
 800d742:	f00d faaf 	bl	801aca4 <iprintf>
 800d746:	f06f 030f 	mvn.w	r3, #15
 800d74a:	e054      	b.n	800d7f6 <netconn_recv+0xd2>
  *new_buf = NULL;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2200      	movs	r2, #0
 800d750:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d109      	bne.n	800d76c <netconn_recv+0x48>
 800d758:	4b29      	ldr	r3, [pc, #164]	@ (800d800 <netconn_recv+0xdc>)
 800d75a:	f240 2276 	movw	r2, #630	@ 0x276
 800d75e:	492b      	ldr	r1, [pc, #172]	@ (800d80c <netconn_recv+0xe8>)
 800d760:	4829      	ldr	r0, [pc, #164]	@ (800d808 <netconn_recv+0xe4>)
 800d762:	f00d fa9f 	bl	801aca4 <iprintf>
 800d766:	f06f 030f 	mvn.w	r3, #15
 800d76a:	e044      	b.n	800d7f6 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d774:	2b10      	cmp	r3, #16
 800d776:	d139      	bne.n	800d7ec <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d77c:	2006      	movs	r0, #6
 800d77e:	f002 fb81 	bl	800fe84 <memp_malloc>
 800d782:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <netconn_recv+0x6c>
      return ERR_MEM;
 800d78a:	f04f 33ff 	mov.w	r3, #4294967295
 800d78e:	e032      	b.n	800d7f6 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d790:	f107 030c 	add.w	r3, r7, #12
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fef2 	bl	800d580 <netconn_recv_data>
 800d79c:	4603      	mov	r3, r0
 800d79e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d7a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d006      	beq.n	800d7b6 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d7a8:	6979      	ldr	r1, [r7, #20]
 800d7aa:	2006      	movs	r0, #6
 800d7ac:	f002 fbe0 	bl	800ff70 <memp_free>
      return err;
 800d7b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7b4:	e01f      	b.n	800d7f6 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <netconn_recv+0xa6>
 800d7bc:	4b10      	ldr	r3, [pc, #64]	@ (800d800 <netconn_recv+0xdc>)
 800d7be:	f240 228a 	movw	r2, #650	@ 0x28a
 800d7c2:	4913      	ldr	r1, [pc, #76]	@ (800d810 <netconn_recv+0xec>)
 800d7c4:	4810      	ldr	r0, [pc, #64]	@ (800d808 <netconn_recv+0xe4>)
 800d7c6:	f00d fa6d 	bl	801aca4 <iprintf>

    buf->p = p;
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e004      	b.n	800d7f6 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fec6 	bl	800d580 <netconn_recv_data>
 800d7f4:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3718      	adds	r7, #24
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	0801c2d4 	.word	0x0801c2d4
 800d804:	0801c500 	.word	0x0801c500
 800d808:	0801c360 	.word	0x0801c360
 800d80c:	0801c520 	.word	0x0801c520
 800d810:	0801c568 	.word	0x0801c568

0800d814 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08a      	sub	sp, #40	@ 0x28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d109      	bne.n	800d83c <netconn_write_partly+0x28>
 800d828:	4b31      	ldr	r3, [pc, #196]	@ (800d8f0 <netconn_write_partly+0xdc>)
 800d82a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d82e:	4931      	ldr	r1, [pc, #196]	@ (800d8f4 <netconn_write_partly+0xe0>)
 800d830:	4831      	ldr	r0, [pc, #196]	@ (800d8f8 <netconn_write_partly+0xe4>)
 800d832:	f00d fa37 	bl	801aca4 <iprintf>
 800d836:	f06f 030f 	mvn.w	r3, #15
 800d83a:	e054      	b.n	800d8e6 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d844:	2b10      	cmp	r3, #16
 800d846:	d009      	beq.n	800d85c <netconn_write_partly+0x48>
 800d848:	4b29      	ldr	r3, [pc, #164]	@ (800d8f0 <netconn_write_partly+0xdc>)
 800d84a:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800d84e:	492b      	ldr	r1, [pc, #172]	@ (800d8fc <netconn_write_partly+0xe8>)
 800d850:	4829      	ldr	r0, [pc, #164]	@ (800d8f8 <netconn_write_partly+0xe4>)
 800d852:	f00d fa27 	bl	801aca4 <iprintf>
 800d856:	f06f 0305 	mvn.w	r3, #5
 800d85a:	e044      	b.n	800d8e6 <netconn_write_partly+0xd2>
  if (size == 0) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <netconn_write_partly+0x52>
    return ERR_OK;
 800d862:	2300      	movs	r3, #0
 800d864:	e03f      	b.n	800d8e6 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	7f1b      	ldrb	r3, [r3, #28]
 800d86a:	f003 0302 	and.w	r3, r3, #2
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d104      	bne.n	800d87c <netconn_write_partly+0x68>
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	f003 0304 	and.w	r3, r3, #4
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <netconn_write_partly+0x6c>
 800d87c:	2301      	movs	r3, #1
 800d87e:	e000      	b.n	800d882 <netconn_write_partly+0x6e>
 800d880:	2300      	movs	r3, #0
 800d882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d005      	beq.n	800d89a <netconn_write_partly+0x86>
 800d88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d894:	f06f 0305 	mvn.w	r3, #5
 800d898:	e025      	b.n	800d8e6 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d8a2:	78fb      	ldrb	r3, [r7, #3]
 800d8a4:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d8ac:	f107 0310 	add.w	r3, r7, #16
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4813      	ldr	r0, [pc, #76]	@ (800d900 <netconn_write_partly+0xec>)
 800d8b4:	f7ff fcc6 	bl	800d244 <netconn_apimsg>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d8be:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10d      	bne.n	800d8e2 <netconn_write_partly+0xce>
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <netconn_write_partly+0xce>
    if (dontblock) {
 800d8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d8d4:	69fa      	ldr	r2, [r7, #28]
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d8:	601a      	str	r2, [r3, #0]
 800d8da:	e002      	b.n	800d8e2 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d8e2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3728      	adds	r7, #40	@ 0x28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0801c2d4 	.word	0x0801c2d4
 800d8f4:	0801c590 	.word	0x0801c590
 800d8f8:	0801c360 	.word	0x0801c360
 800d8fc:	0801c5ac 	.word	0x0801c5ac
 800d900:	0800ef35 	.word	0x0800ef35

0800d904 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d109      	bne.n	800d92a <netconn_close_shutdown+0x26>
 800d916:	4b0f      	ldr	r3, [pc, #60]	@ (800d954 <netconn_close_shutdown+0x50>)
 800d918:	f44f 724a 	mov.w	r2, #808	@ 0x328
 800d91c:	490e      	ldr	r1, [pc, #56]	@ (800d958 <netconn_close_shutdown+0x54>)
 800d91e:	480f      	ldr	r0, [pc, #60]	@ (800d95c <netconn_close_shutdown+0x58>)
 800d920:	f00d f9c0 	bl	801aca4 <iprintf>
 800d924:	f06f 030f 	mvn.w	r3, #15
 800d928:	e00f      	b.n	800d94a <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d92e:	78fb      	ldrb	r3, [r7, #3]
 800d930:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d932:	2329      	movs	r3, #41	@ 0x29
 800d934:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d936:	f107 0308 	add.w	r3, r7, #8
 800d93a:	4619      	mov	r1, r3
 800d93c:	4808      	ldr	r0, [pc, #32]	@ (800d960 <netconn_close_shutdown+0x5c>)
 800d93e:	f7ff fc81 	bl	800d244 <netconn_apimsg>
 800d942:	4603      	mov	r3, r0
 800d944:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d946:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3720      	adds	r7, #32
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	0801c2d4 	.word	0x0801c2d4
 800d958:	0801c5d0 	.word	0x0801c5d0
 800d95c:	0801c360 	.word	0x0801c360
 800d960:	0800f095 	.word	0x0800f095

0800d964 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d96c:	2103      	movs	r1, #3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff ffc8 	bl	800d904 <netconn_close_shutdown>
 800d974:	4603      	mov	r3, r0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
	...

0800d980 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d105      	bne.n	800d9a0 <recv_udp+0x20>
 800d994:	4b34      	ldr	r3, [pc, #208]	@ (800da68 <recv_udp+0xe8>)
 800d996:	22b1      	movs	r2, #177	@ 0xb1
 800d998:	4934      	ldr	r1, [pc, #208]	@ (800da6c <recv_udp+0xec>)
 800d99a:	4835      	ldr	r0, [pc, #212]	@ (800da70 <recv_udp+0xf0>)
 800d99c:	f00d f982 	bl	801aca4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d105      	bne.n	800d9b2 <recv_udp+0x32>
 800d9a6:	4b30      	ldr	r3, [pc, #192]	@ (800da68 <recv_udp+0xe8>)
 800d9a8:	22b2      	movs	r2, #178	@ 0xb2
 800d9aa:	4932      	ldr	r1, [pc, #200]	@ (800da74 <recv_udp+0xf4>)
 800d9ac:	4830      	ldr	r0, [pc, #192]	@ (800da70 <recv_udp+0xf0>)
 800d9ae:	f00d f979 	bl	801aca4 <iprintf>
  conn = (struct netconn *)arg;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d103      	bne.n	800d9c4 <recv_udp+0x44>
    pbuf_free(p);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f003 f8cd 	bl	8010b5c <pbuf_free>
    return;
 800d9c2:	e04d      	b.n	800da60 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d005      	beq.n	800d9da <recv_udp+0x5a>
 800d9ce:	4b26      	ldr	r3, [pc, #152]	@ (800da68 <recv_udp+0xe8>)
 800d9d0:	22ba      	movs	r2, #186	@ 0xba
 800d9d2:	4929      	ldr	r1, [pc, #164]	@ (800da78 <recv_udp+0xf8>)
 800d9d4:	4826      	ldr	r0, [pc, #152]	@ (800da70 <recv_udp+0xf0>)
 800d9d6:	f00d f965 	bl	801aca4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	3310      	adds	r3, #16
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f00c ff27 	bl	801a832 <sys_mbox_valid>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d103      	bne.n	800d9f2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f003 f8b6 	bl	8010b5c <pbuf_free>
    return;
 800d9f0:	e036      	b.n	800da60 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d9f2:	2006      	movs	r0, #6
 800d9f4:	f002 fa46 	bl	800fe84 <memp_malloc>
 800d9f8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d103      	bne.n	800da08 <recv_udp+0x88>
    pbuf_free(p);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f003 f8ab 	bl	8010b5c <pbuf_free>
    return;
 800da06:	e02b      	b.n	800da60 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <recv_udp+0xa0>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	e000      	b.n	800da22 <recv_udp+0xa2>
 800da20:	2300      	movs	r3, #0
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800da2a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	891b      	ldrh	r3, [r3, #8]
 800da30:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	3310      	adds	r3, #16
 800da36:	69b9      	ldr	r1, [r7, #24]
 800da38:	4618      	mov	r0, r3
 800da3a:	f00c fe85 	bl	801a748 <sys_mbox_trypost>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <recv_udp+0xcc>
    netbuf_delete(buf);
 800da44:	69b8      	ldr	r0, [r7, #24]
 800da46:	f001 fbcd 	bl	800f1e4 <netbuf_delete>
    return;
 800da4a:	e009      	b.n	800da60 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <recv_udp+0xe0>
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da58:	8afa      	ldrh	r2, [r7, #22]
 800da5a:	2100      	movs	r1, #0
 800da5c:	69f8      	ldr	r0, [r7, #28]
 800da5e:	4798      	blx	r3
  }
}
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	0801c5ec 	.word	0x0801c5ec
 800da6c:	0801c654 	.word	0x0801c654
 800da70:	0801c678 	.word	0x0801c678
 800da74:	0801c6a0 	.word	0x0801c6a0
 800da78:	0801c6c0 	.word	0x0801c6c0

0800da7c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d105      	bne.n	800da9c <recv_tcp+0x20>
 800da90:	4b39      	ldr	r3, [pc, #228]	@ (800db78 <recv_tcp+0xfc>)
 800da92:	22f9      	movs	r2, #249	@ 0xf9
 800da94:	4939      	ldr	r1, [pc, #228]	@ (800db7c <recv_tcp+0x100>)
 800da96:	483a      	ldr	r0, [pc, #232]	@ (800db80 <recv_tcp+0x104>)
 800da98:	f00d f904 	bl	801aca4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d105      	bne.n	800daae <recv_tcp+0x32>
 800daa2:	4b35      	ldr	r3, [pc, #212]	@ (800db78 <recv_tcp+0xfc>)
 800daa4:	22fa      	movs	r2, #250	@ 0xfa
 800daa6:	4937      	ldr	r1, [pc, #220]	@ (800db84 <recv_tcp+0x108>)
 800daa8:	4835      	ldr	r0, [pc, #212]	@ (800db80 <recv_tcp+0x104>)
 800daaa:	f00d f8fb 	bl	801aca4 <iprintf>
  conn = (struct netconn *)arg;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <recv_tcp+0x42>
    return ERR_VAL;
 800dab8:	f06f 0305 	mvn.w	r3, #5
 800dabc:	e057      	b.n	800db6e <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d006      	beq.n	800dad6 <recv_tcp+0x5a>
 800dac8:	4b2b      	ldr	r3, [pc, #172]	@ (800db78 <recv_tcp+0xfc>)
 800daca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dace:	492e      	ldr	r1, [pc, #184]	@ (800db88 <recv_tcp+0x10c>)
 800dad0:	482b      	ldr	r0, [pc, #172]	@ (800db80 <recv_tcp+0x104>)
 800dad2:	f00d f8e7 	bl	801aca4 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	3310      	adds	r3, #16
 800dada:	4618      	mov	r0, r3
 800dadc:	f00c fea9 	bl	801a832 <sys_mbox_valid>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10d      	bne.n	800db02 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d008      	beq.n	800dafe <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	891b      	ldrh	r3, [r3, #8]
 800daf0:	4619      	mov	r1, r3
 800daf2:	68b8      	ldr	r0, [r7, #8]
 800daf4:	f003 ff26 	bl	8011944 <tcp_recved>
      pbuf_free(p);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f003 f82f 	bl	8010b5c <pbuf_free>
    }
    return ERR_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	e035      	b.n	800db6e <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800db02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d011      	beq.n	800db2e <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00e      	beq.n	800db2e <recv_tcp+0xb2>
 800db10:	f00c ffaa 	bl	801aa68 <sys_arch_protect>
 800db14:	6178      	str	r0, [r7, #20]
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800db1c:	f113 0f0c 	cmn.w	r3, #12
 800db20:	db02      	blt.n	800db28 <recv_tcp+0xac>
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	78fa      	ldrb	r2, [r7, #3]
 800db26:	721a      	strb	r2, [r3, #8]
 800db28:	6978      	ldr	r0, [r7, #20]
 800db2a:	f00c ffab 	bl	801aa84 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <recv_tcp+0xc0>
    len = p->tot_len;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	891b      	ldrh	r3, [r3, #8]
 800db38:	83fb      	strh	r3, [r7, #30]
 800db3a:	e001      	b.n	800db40 <recv_tcp+0xc4>
  } else {
    len = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	3310      	adds	r3, #16
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	f00c fdfe 	bl	801a748 <sys_mbox_trypost>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800db52:	f04f 33ff 	mov.w	r3, #4294967295
 800db56:	e00a      	b.n	800db6e <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d005      	beq.n	800db6c <recv_tcp+0xf0>
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db64:	8bfa      	ldrh	r2, [r7, #30]
 800db66:	2100      	movs	r1, #0
 800db68:	69b8      	ldr	r0, [r7, #24]
 800db6a:	4798      	blx	r3
  }

  return ERR_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	0801c5ec 	.word	0x0801c5ec
 800db7c:	0801c6e0 	.word	0x0801c6e0
 800db80:	0801c678 	.word	0x0801c678
 800db84:	0801c704 	.word	0x0801c704
 800db88:	0801c724 	.word	0x0801c724

0800db8c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d106      	bne.n	800dbae <poll_tcp+0x22>
 800dba0:	4b29      	ldr	r3, [pc, #164]	@ (800dc48 <poll_tcp+0xbc>)
 800dba2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800dba6:	4929      	ldr	r1, [pc, #164]	@ (800dc4c <poll_tcp+0xc0>)
 800dba8:	4829      	ldr	r0, [pc, #164]	@ (800dc50 <poll_tcp+0xc4>)
 800dbaa:	f00d f87b 	bl	801aca4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	785b      	ldrb	r3, [r3, #1]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d104      	bne.n	800dbc0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dbb6:	2101      	movs	r1, #1
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f001 f817 	bl	800ebec <lwip_netconn_do_writemore>
 800dbbe:	e016      	b.n	800dbee <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d112      	bne.n	800dbee <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <poll_tcp+0x5a>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd4:	7a5b      	ldrb	r3, [r3, #9]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d005      	beq.n	800dbe6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbde:	7a5a      	ldrb	r2, [r3, #9]
 800dbe0:	3a01      	subs	r2, #1
 800dbe2:	b2d2      	uxtb	r2, r2
 800dbe4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 fc13 	bl	800e414 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	7f1b      	ldrb	r3, [r3, #28]
 800dbf2:	f003 0310 	and.w	r3, r3, #16
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d021      	beq.n	800dc3e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d01d      	beq.n	800dc3e <poll_tcp+0xb2>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc0a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800dc0e:	d316      	bcc.n	800dc3e <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dc18:	2b04      	cmp	r3, #4
 800dc1a:	d810      	bhi.n	800dc3e <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	7f1b      	ldrb	r3, [r3, #28]
 800dc20:	f023 0310 	bic.w	r3, r3, #16
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <poll_tcp+0xb2>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc36:	2200      	movs	r2, #0
 800dc38:	2102      	movs	r1, #2
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	0801c5ec 	.word	0x0801c5ec
 800dc4c:	0801c744 	.word	0x0801c744
 800dc50:	0801c678 	.word	0x0801c678

0800dc54 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <sent_tcp+0x26>
 800dc6c:	4b20      	ldr	r3, [pc, #128]	@ (800dcf0 <sent_tcp+0x9c>)
 800dc6e:	f240 1261 	movw	r2, #353	@ 0x161
 800dc72:	4920      	ldr	r1, [pc, #128]	@ (800dcf4 <sent_tcp+0xa0>)
 800dc74:	4820      	ldr	r0, [pc, #128]	@ (800dcf8 <sent_tcp+0xa4>)
 800dc76:	f00d f815 	bl	801aca4 <iprintf>

  if (conn) {
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d032      	beq.n	800dce6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	785b      	ldrb	r3, [r3, #1]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d104      	bne.n	800dc92 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dc88:	2101      	movs	r1, #1
 800dc8a:	6978      	ldr	r0, [r7, #20]
 800dc8c:	f000 ffae 	bl	800ebec <lwip_netconn_do_writemore>
 800dc90:	e007      	b.n	800dca2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	785b      	ldrb	r3, [r3, #1]
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d103      	bne.n	800dca2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	6978      	ldr	r0, [r7, #20]
 800dc9e:	f000 fbb9 	bl	800e414 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01d      	beq.n	800dce6 <sent_tcp+0x92>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dcb2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800dcb6:	d316      	bcc.n	800dce6 <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d810      	bhi.n	800dce6 <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	7f1b      	ldrb	r3, [r3, #28]
 800dcc8:	f023 0310 	bic.w	r3, r3, #16
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d005      	beq.n	800dce6 <sent_tcp+0x92>
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcde:	88fa      	ldrh	r2, [r7, #6]
 800dce0:	2102      	movs	r1, #2
 800dce2:	6978      	ldr	r0, [r7, #20]
 800dce4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	0801c5ec 	.word	0x0801c5ec
 800dcf4:	0801c744 	.word	0x0801c744
 800dcf8:	0801c678 	.word	0x0801c678

0800dcfc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	@ 0x28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	627b      	str	r3, [r7, #36]	@ 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d106      	bne.n	800dd20 <err_tcp+0x24>
 800dd12:	4b6c      	ldr	r3, [pc, #432]	@ (800dec4 <err_tcp+0x1c8>)
 800dd14:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800dd18:	496b      	ldr	r1, [pc, #428]	@ (800dec8 <err_tcp+0x1cc>)
 800dd1a:	486c      	ldr	r0, [pc, #432]	@ (800decc <err_tcp+0x1d0>)
 800dd1c:	f00c ffc2 	bl	801aca4 <iprintf>

  conn->pcb.tcp = NULL;
 800dd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd22:	2200      	movs	r2, #0
 800dd24:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd28:	785b      	ldrb	r3, [r3, #1]
 800dd2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  conn->state = NETCONN_NONE;
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd30:	2200      	movs	r2, #0
 800dd32:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800dd34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd38:	2b04      	cmp	r3, #4
 800dd3a:	d114      	bne.n	800dd66 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d018      	beq.n	800dd78 <err_tcp+0x7c>
 800dd46:	f00c fe8f 	bl	801aa68 <sys_arch_protect>
 800dd4a:	61b8      	str	r0, [r7, #24]
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dd52:	f113 0f0c 	cmn.w	r3, #12
 800dd56:	db02      	blt.n	800dd5e <err_tcp+0x62>
 800dd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	721a      	strb	r2, [r3, #8]
 800dd5e:	69b8      	ldr	r0, [r7, #24]
 800dd60:	f00c fe90 	bl	801aa84 <sys_arch_unprotect>
 800dd64:	e008      	b.n	800dd78 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800dd66:	f00c fe7f 	bl	801aa68 <sys_arch_protect>
 800dd6a:	61f8      	str	r0, [r7, #28]
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6e:	78fa      	ldrb	r2, [r7, #3]
 800dd70:	721a      	strb	r2, [r3, #8]
 800dd72:	69f8      	ldr	r0, [r7, #28]
 800dd74:	f00c fe86 	bl	801aa84 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d005      	beq.n	800dd8c <err_tcp+0x90>
 800dd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd84:	2200      	movs	r2, #0
 800dd86:	2104      	movs	r1, #4
 800dd88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd8a:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <err_tcp+0xa4>
 800dd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd9e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d005      	beq.n	800ddb4 <err_tcp+0xb8>
 800dda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddac:	2200      	movs	r2, #0
 800ddae:	2102      	movs	r1, #2
 800ddb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddb2:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb6:	3310      	adds	r3, #16
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f00c fd3a 	bl	801a832 <sys_mbox_valid>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc6:	3310      	adds	r3, #16
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f00c fcbc 	bl	801a748 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	3314      	adds	r3, #20
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f00c fd2c 	bl	801a832 <sys_mbox_valid>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d005      	beq.n	800ddec <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	3314      	adds	r3, #20
 800dde4:	2100      	movs	r1, #0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f00c fcae 	bl	801a748 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ddec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d007      	beq.n	800de04 <err_tcp+0x108>
 800ddf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ddf8:	2b04      	cmp	r3, #4
 800ddfa:	d003      	beq.n	800de04 <err_tcp+0x108>
 800ddfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de00:	2b03      	cmp	r3, #3
 800de02:	d14d      	bne.n	800dea0 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800de04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de06:	7f1b      	ldrb	r3, [r3, #28]
 800de08:	f003 0304 	and.w	r3, r3, #4
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	bf14      	ite	ne
 800de10:	2301      	movne	r3, #1
 800de12:	2300      	moveq	r3, #0
 800de14:	b2db      	uxtb	r3, r3
 800de16:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800de18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1a:	7f1b      	ldrb	r3, [r3, #28]
 800de1c:	f023 0304 	bic.w	r3, r3, #4
 800de20:	b2da      	uxtb	r2, r3
 800de22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de24:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d145      	bne.n	800deb8 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de30:	2b00      	cmp	r3, #0
 800de32:	d106      	bne.n	800de42 <err_tcp+0x146>
 800de34:	4b23      	ldr	r3, [pc, #140]	@ (800dec4 <err_tcp+0x1c8>)
 800de36:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800de3a:	4925      	ldr	r1, [pc, #148]	@ (800ded0 <err_tcp+0x1d4>)
 800de3c:	4823      	ldr	r0, [pc, #140]	@ (800decc <err_tcp+0x1d0>)
 800de3e:	f00c ff31 	bl	801aca4 <iprintf>
      conn->current_msg->err = err;
 800de42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de46:	78fa      	ldrb	r2, [r7, #3]
 800de48:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800de4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	330c      	adds	r3, #12
 800de52:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800de54:	6938      	ldr	r0, [r7, #16]
 800de56:	f00c fd7d 	bl	801a954 <sys_sem_valid>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d106      	bne.n	800de6e <err_tcp+0x172>
 800de60:	4b18      	ldr	r3, [pc, #96]	@ (800dec4 <err_tcp+0x1c8>)
 800de62:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800de66:	491b      	ldr	r1, [pc, #108]	@ (800ded4 <err_tcp+0x1d8>)
 800de68:	4818      	ldr	r0, [pc, #96]	@ (800decc <err_tcp+0x1d0>)
 800de6a:	f00c ff1b 	bl	801aca4 <iprintf>
      conn->current_msg = NULL;
 800de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de70:	2200      	movs	r2, #0
 800de72:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800de74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00e      	beq.n	800de98 <err_tcp+0x19c>
 800de7a:	f00c fdf5 	bl	801aa68 <sys_arch_protect>
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de86:	f113 0f0c 	cmn.w	r3, #12
 800de8a:	db02      	blt.n	800de92 <err_tcp+0x196>
 800de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8e:	78fa      	ldrb	r2, [r7, #3]
 800de90:	721a      	strb	r2, [r3, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f00c fdf6 	bl	801aa84 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800de98:	6938      	ldr	r0, [r7, #16]
 800de9a:	f00c fd41 	bl	801a920 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800de9e:	e00b      	b.n	800deb8 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d008      	beq.n	800deba <err_tcp+0x1be>
 800dea8:	4b06      	ldr	r3, [pc, #24]	@ (800dec4 <err_tcp+0x1c8>)
 800deaa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800deae:	490a      	ldr	r1, [pc, #40]	@ (800ded8 <err_tcp+0x1dc>)
 800deb0:	4806      	ldr	r0, [pc, #24]	@ (800decc <err_tcp+0x1d0>)
 800deb2:	f00c fef7 	bl	801aca4 <iprintf>
  }
}
 800deb6:	e000      	b.n	800deba <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800deb8:	bf00      	nop
}
 800deba:	bf00      	nop
 800debc:	3728      	adds	r7, #40	@ 0x28
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	0801c5ec 	.word	0x0801c5ec
 800dec8:	0801c744 	.word	0x0801c744
 800decc:	0801c678 	.word	0x0801c678
 800ded0:	0801c754 	.word	0x0801c754
 800ded4:	0801c770 	.word	0x0801c770
 800ded8:	0801c78c 	.word	0x0801c78c

0800dedc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f004 fb0f 	bl	8012510 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800def2:	490a      	ldr	r1, [pc, #40]	@ (800df1c <setup_tcp+0x40>)
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f004 fb1d 	bl	8012534 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800defa:	4909      	ldr	r1, [pc, #36]	@ (800df20 <setup_tcp+0x44>)
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f004 fb3b 	bl	8012578 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800df02:	2202      	movs	r2, #2
 800df04:	4907      	ldr	r1, [pc, #28]	@ (800df24 <setup_tcp+0x48>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f004 fb90 	bl	801262c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800df0c:	4906      	ldr	r1, [pc, #24]	@ (800df28 <setup_tcp+0x4c>)
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f004 fb52 	bl	80125b8 <tcp_err>
}
 800df14:	bf00      	nop
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0800da7d 	.word	0x0800da7d
 800df20:	0800dc55 	.word	0x0800dc55
 800df24:	0800db8d 	.word	0x0800db8d
 800df28:	0800dcfd 	.word	0x0800dcfd

0800df2c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	4613      	mov	r3, r2
 800df38:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d102      	bne.n	800df4a <accept_function+0x1e>
    return ERR_VAL;
 800df44:	f06f 0305 	mvn.w	r3, #5
 800df48:	e08d      	b.n	800e066 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	3314      	adds	r3, #20
 800df4e:	4618      	mov	r0, r3
 800df50:	f00c fc6f 	bl	801a832 <sys_mbox_valid>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d102      	bne.n	800df60 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800df5a:	f06f 0305 	mvn.w	r3, #5
 800df5e:	e082      	b.n	800e066 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d115      	bne.n	800df92 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	3314      	adds	r3, #20
 800df6a:	4941      	ldr	r1, [pc, #260]	@ (800e070 <accept_function+0x144>)
 800df6c:	4618      	mov	r0, r3
 800df6e:	f00c fbeb 	bl	801a748 <sys_mbox_trypost>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d109      	bne.n	800df8c <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <accept_function+0x60>
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df84:	2200      	movs	r2, #0
 800df86:	2100      	movs	r1, #0
 800df88:	69f8      	ldr	r0, [r7, #28]
 800df8a:	4798      	blx	r3
    }
    return ERR_VAL;
 800df8c:	f06f 0305 	mvn.w	r3, #5
 800df90:	e069      	b.n	800e066 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	781a      	ldrb	r2, [r3, #0]
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df9a:	4619      	mov	r1, r3
 800df9c:	4610      	mov	r0, r2
 800df9e:	f000 f8ff 	bl	800e1a0 <netconn_alloc>
 800dfa2:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d115      	bne.n	800dfd6 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	3314      	adds	r3, #20
 800dfae:	4930      	ldr	r1, [pc, #192]	@ (800e070 <accept_function+0x144>)
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f00c fbc9 	bl	801a748 <sys_mbox_trypost>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d005      	beq.n	800dfd0 <accept_function+0xa4>
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2100      	movs	r1, #0
 800dfcc:	69f8      	ldr	r0, [r7, #28]
 800dfce:	4798      	blx	r3
    }
    return ERR_MEM;
 800dfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd4:	e047      	b.n	800e066 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800dfdc:	69b8      	ldr	r0, [r7, #24]
 800dfde:	f7ff ff7d 	bl	800dedc <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	79fa      	ldrb	r2, [r7, #7]
 800dfe6:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	3314      	adds	r3, #20
 800dfec:	69b9      	ldr	r1, [r7, #24]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f00c fbaa 	bl	801a748 <sys_mbox_trypost>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d02a      	beq.n	800e050 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800e000:	2100      	movs	r1, #0
 800e002:	6978      	ldr	r0, [r7, #20]
 800e004:	f004 fa84 	bl	8012510 <tcp_arg>
    tcp_recv(pcb, NULL);
 800e008:	2100      	movs	r1, #0
 800e00a:	6978      	ldr	r0, [r7, #20]
 800e00c:	f004 fa92 	bl	8012534 <tcp_recv>
    tcp_sent(pcb, NULL);
 800e010:	2100      	movs	r1, #0
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	f004 fab0 	bl	8012578 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800e018:	2200      	movs	r2, #0
 800e01a:	2100      	movs	r1, #0
 800e01c:	6978      	ldr	r0, [r7, #20]
 800e01e:	f004 fb05 	bl	801262c <tcp_poll>
    tcp_err(pcb, NULL);
 800e022:	2100      	movs	r1, #0
 800e024:	6978      	ldr	r0, [r7, #20]
 800e026:	f004 fac7 	bl	80125b8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2200      	movs	r2, #0
 800e02e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	3310      	adds	r3, #16
 800e034:	4618      	mov	r0, r3
 800e036:	f00c fb5f 	bl	801a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	3310      	adds	r3, #16
 800e03e:	4618      	mov	r0, r3
 800e040:	f00c fc08 	bl	801a854 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800e044:	69b8      	ldr	r0, [r7, #24]
 800e046:	f000 f91b 	bl	800e280 <netconn_free>
    return ERR_MEM;
 800e04a:	f04f 33ff 	mov.w	r3, #4294967295
 800e04e:	e00a      	b.n	800e066 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <accept_function+0x138>
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	2200      	movs	r2, #0
 800e05e:	2100      	movs	r1, #0
 800e060:	69f8      	ldr	r0, [r7, #28]
 800e062:	4798      	blx	r3
  }

  return ERR_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3720      	adds	r7, #32
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	2400458c 	.word	0x2400458c

0800e074 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d006      	beq.n	800e098 <pcb_new+0x24>
 800e08a:	4b2b      	ldr	r3, [pc, #172]	@ (800e138 <pcb_new+0xc4>)
 800e08c:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800e090:	492a      	ldr	r1, [pc, #168]	@ (800e13c <pcb_new+0xc8>)
 800e092:	482b      	ldr	r0, [pc, #172]	@ (800e140 <pcb_new+0xcc>)
 800e094:	f00c fe06 	bl	801aca4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e0a2:	2b10      	cmp	r3, #16
 800e0a4:	d022      	beq.n	800e0ec <pcb_new+0x78>
 800e0a6:	2b20      	cmp	r3, #32
 800e0a8:	d133      	bne.n	800e112 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681c      	ldr	r4, [r3, #0]
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f008 fe8c 	bl	8016dce <udp_new_ip_type>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d02a      	beq.n	800e11a <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	2b22      	cmp	r3, #34	@ 0x22
 800e0cc:	d104      	bne.n	800e0d8 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6858      	ldr	r0, [r3, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	4917      	ldr	r1, [pc, #92]	@ (800e144 <pcb_new+0xd0>)
 800e0e6:	f008 fe17 	bl	8016d18 <udp_recv>
    }
    break;
 800e0ea:	e016      	b.n	800e11a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681c      	ldr	r4, [r3, #0]
 800e0f0:	7bfb      	ldrb	r3, [r7, #15]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f004 f9fe 	bl	80124f4 <tcp_new_ip_type>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00b      	beq.n	800e11e <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fee6 	bl	800dedc <setup_tcp>
    }
    break;
 800e110:	e005      	b.n	800e11e <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	22fa      	movs	r2, #250	@ 0xfa
 800e116:	711a      	strb	r2, [r3, #4]
    return;
 800e118:	e00a      	b.n	800e130 <pcb_new+0xbc>
    break;
 800e11a:	bf00      	nop
 800e11c:	e000      	b.n	800e120 <pcb_new+0xac>
    break;
 800e11e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d102      	bne.n	800e130 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	22ff      	movs	r2, #255	@ 0xff
 800e12e:	711a      	strb	r2, [r3, #4]
  }
}
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	bd90      	pop	{r4, r7, pc}
 800e136:	bf00      	nop
 800e138:	0801c5ec 	.word	0x0801c5ec
 800e13c:	0801c7a8 	.word	0x0801c7a8
 800e140:	0801c678 	.word	0x0801c678
 800e144:	0800d981 	.word	0x0800d981

0800e148 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f7ff ff85 	bl	800e074 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d012      	beq.n	800e198 <lwip_netconn_do_newconn+0x50>
 800e172:	f00c fc79 	bl	801aa68 <sys_arch_protect>
 800e176:	60b8      	str	r0, [r7, #8]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e180:	f113 0f0c 	cmn.w	r3, #12
 800e184:	db05      	blt.n	800e192 <lwip_netconn_do_newconn+0x4a>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e190:	721a      	strb	r2, [r3, #8]
 800e192:	68b8      	ldr	r0, [r7, #8]
 800e194:	f00c fc76 	bl	801aa84 <sys_arch_unprotect>
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	6039      	str	r1, [r7, #0]
 800e1aa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e1ac:	2007      	movs	r0, #7
 800e1ae:	f001 fe69 	bl	800fe84 <memp_malloc>
 800e1b2:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <netconn_alloc+0x1e>
    return NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e055      	b.n	800e26a <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	79fa      	ldrb	r2, [r7, #7]
 800e1c8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e1d6:	2b10      	cmp	r3, #16
 800e1d8:	d004      	beq.n	800e1e4 <netconn_alloc+0x44>
 800e1da:	2b20      	cmp	r3, #32
 800e1dc:	d105      	bne.n	800e1ea <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e1de:	2306      	movs	r3, #6
 800e1e0:	60fb      	str	r3, [r7, #12]
    break;
 800e1e2:	e00a      	b.n	800e1fa <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e1e4:	2306      	movs	r3, #6
 800e1e6:	60fb      	str	r3, [r7, #12]
    break;
 800e1e8:	e007      	b.n	800e1fa <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e1ea:	4b22      	ldr	r3, [pc, #136]	@ (800e274 <netconn_alloc+0xd4>)
 800e1ec:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e1f0:	4921      	ldr	r1, [pc, #132]	@ (800e278 <netconn_alloc+0xd8>)
 800e1f2:	4822      	ldr	r0, [pc, #136]	@ (800e27c <netconn_alloc+0xdc>)
 800e1f4:	f00c fd56 	bl	801aca4 <iprintf>
    goto free_and_return;
 800e1f8:	e032      	b.n	800e260 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	3310      	adds	r3, #16
 800e1fe:	68f9      	ldr	r1, [r7, #12]
 800e200:	4618      	mov	r0, r3
 800e202:	f00c fa57 	bl	801a6b4 <sys_mbox_new>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d128      	bne.n	800e25e <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	330c      	adds	r3, #12
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f00c fb2b 	bl	801a86e <sys_sem_new>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d005      	beq.n	800e22a <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	3310      	adds	r3, #16
 800e222:	4618      	mov	r0, r3
 800e224:	f00c fa68 	bl	801a6f8 <sys_mbox_free>
    goto free_and_return;
 800e228:	e01a      	b.n	800e260 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	3314      	adds	r3, #20
 800e22e:	4618      	mov	r0, r3
 800e230:	f00c fb10 	bl	801a854 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	2200      	movs	r2, #0
 800e238:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f04f 32ff 	mov.w	r2, #4294967295
 800e240:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2200      	movs	r2, #0
 800e24c:	625a      	str	r2, [r3, #36]	@ 0x24
  conn->write_offset = 0;
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2200      	movs	r2, #0
 800e252:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2200      	movs	r2, #0
 800e258:	771a      	strb	r2, [r3, #28]
  return conn;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	e005      	b.n	800e26a <netconn_alloc+0xca>
    goto free_and_return;
 800e25e:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e260:	68b9      	ldr	r1, [r7, #8]
 800e262:	2007      	movs	r0, #7
 800e264:	f001 fe84 	bl	800ff70 <memp_free>
  return NULL;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	0801c5ec 	.word	0x0801c5ec
 800e278:	0801c7c8 	.word	0x0801c7c8
 800e27c:	0801c678 	.word	0x0801c678

0800e280 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d006      	beq.n	800e29e <netconn_free+0x1e>
 800e290:	4b1b      	ldr	r3, [pc, #108]	@ (800e300 <netconn_free+0x80>)
 800e292:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800e296:	491b      	ldr	r1, [pc, #108]	@ (800e304 <netconn_free+0x84>)
 800e298:	481b      	ldr	r0, [pc, #108]	@ (800e308 <netconn_free+0x88>)
 800e29a:	f00c fd03 	bl	801aca4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3310      	adds	r3, #16
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f00c fac5 	bl	801a832 <sys_mbox_valid>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d006      	beq.n	800e2bc <netconn_free+0x3c>
 800e2ae:	4b14      	ldr	r3, [pc, #80]	@ (800e300 <netconn_free+0x80>)
 800e2b0:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800e2b4:	4915      	ldr	r1, [pc, #84]	@ (800e30c <netconn_free+0x8c>)
 800e2b6:	4814      	ldr	r0, [pc, #80]	@ (800e308 <netconn_free+0x88>)
 800e2b8:	f00c fcf4 	bl	801aca4 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3314      	adds	r3, #20
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f00c fab6 	bl	801a832 <sys_mbox_valid>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d006      	beq.n	800e2da <netconn_free+0x5a>
 800e2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e300 <netconn_free+0x80>)
 800e2ce:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e2d2:	490f      	ldr	r1, [pc, #60]	@ (800e310 <netconn_free+0x90>)
 800e2d4:	480c      	ldr	r0, [pc, #48]	@ (800e308 <netconn_free+0x88>)
 800e2d6:	f00c fce5 	bl	801aca4 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	330c      	adds	r3, #12
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f00c fb2b 	bl	801a93a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f00c fb44 	bl	801a976 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	2007      	movs	r0, #7
 800e2f2:	f001 fe3d 	bl	800ff70 <memp_free>
}
 800e2f6:	bf00      	nop
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	0801c5ec 	.word	0x0801c5ec
 800e304:	0801c7f0 	.word	0x0801c7f0
 800e308:	0801c678 	.word	0x0801c678
 800e30c:	0801c820 	.word	0x0801c820
 800e310:	0801c85c 	.word	0x0801c85c

0800e314 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b086      	sub	sp, #24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3310      	adds	r3, #16
 800e320:	4618      	mov	r0, r3
 800e322:	f00c fa86 	bl	801a832 <sys_mbox_valid>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d035      	beq.n	800e398 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e32c:	e01e      	b.n	800e36c <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e336:	2b10      	cmp	r3, #16
 800e338:	d114      	bne.n	800e364 <netconn_drain+0x50>
        if (mem != NULL) {
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d015      	beq.n	800e36c <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685a      	ldr	r2, [r3, #4]
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	891b      	ldrh	r3, [r3, #8]
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f003 faf4 	bl	8011944 <tcp_recved>
          }
          pbuf_free(p);
 800e35c:	6978      	ldr	r0, [r7, #20]
 800e35e:	f002 fbfd 	bl	8010b5c <pbuf_free>
 800e362:	e003      	b.n	800e36c <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 ff3c 	bl	800f1e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3310      	adds	r3, #16
 800e370:	f107 020c 	add.w	r2, r7, #12
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f00c fa3f 	bl	801a7fa <sys_arch_mbox_tryfetch>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e382:	d1d4      	bne.n	800e32e <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3310      	adds	r3, #16
 800e388:	4618      	mov	r0, r3
 800e38a:	f00c f9b5 	bl	801a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3310      	adds	r3, #16
 800e392:	4618      	mov	r0, r3
 800e394:	f00c fa5e 	bl	801a854 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3314      	adds	r3, #20
 800e39c:	4618      	mov	r0, r3
 800e39e:	f00c fa48 	bl	801a832 <sys_mbox_valid>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d02e      	beq.n	800e406 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e3a8:	e017      	b.n	800e3da <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	4a18      	ldr	r2, [pc, #96]	@ (800e410 <netconn_drain+0xfc>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d013      	beq.n	800e3da <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800e3b6:	6938      	ldr	r0, [r7, #16]
 800e3b8:	f7ff ffac 	bl	800e314 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d007      	beq.n	800e3d4 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f003 f927 	bl	801161c <tcp_abort>
          newconn->pcb.tcp = NULL;
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800e3d4:	6938      	ldr	r0, [r7, #16]
 800e3d6:	f7ff ff53 	bl	800e280 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	3314      	adds	r3, #20
 800e3de:	f107 020c 	add.w	r2, r7, #12
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f00c fa08 	bl	801a7fa <sys_arch_mbox_tryfetch>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f0:	d1db      	bne.n	800e3aa <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	3314      	adds	r3, #20
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f00c f97e 	bl	801a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3314      	adds	r3, #20
 800e400:	4618      	mov	r0, r3
 800e402:	f00c fa27 	bl	801a854 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e406:	bf00      	nop
 800e408:	3718      	adds	r7, #24
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	2400458c 	.word	0x2400458c

0800e414 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d106      	bne.n	800e438 <lwip_netconn_do_close_internal+0x24>
 800e42a:	4b90      	ldr	r3, [pc, #576]	@ (800e66c <lwip_netconn_do_close_internal+0x258>)
 800e42c:	f240 3243 	movw	r2, #835	@ 0x343
 800e430:	498f      	ldr	r1, [pc, #572]	@ (800e670 <lwip_netconn_do_close_internal+0x25c>)
 800e432:	4890      	ldr	r0, [pc, #576]	@ (800e674 <lwip_netconn_do_close_internal+0x260>)
 800e434:	f00c fc36 	bl	801aca4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e440:	2b10      	cmp	r3, #16
 800e442:	d006      	beq.n	800e452 <lwip_netconn_do_close_internal+0x3e>
 800e444:	4b89      	ldr	r3, [pc, #548]	@ (800e66c <lwip_netconn_do_close_internal+0x258>)
 800e446:	f44f 7251 	mov.w	r2, #836	@ 0x344
 800e44a:	498b      	ldr	r1, [pc, #556]	@ (800e678 <lwip_netconn_do_close_internal+0x264>)
 800e44c:	4889      	ldr	r0, [pc, #548]	@ (800e674 <lwip_netconn_do_close_internal+0x260>)
 800e44e:	f00c fc29 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	2b04      	cmp	r3, #4
 800e458:	d006      	beq.n	800e468 <lwip_netconn_do_close_internal+0x54>
 800e45a:	4b84      	ldr	r3, [pc, #528]	@ (800e66c <lwip_netconn_do_close_internal+0x258>)
 800e45c:	f240 3245 	movw	r2, #837	@ 0x345
 800e460:	4986      	ldr	r1, [pc, #536]	@ (800e67c <lwip_netconn_do_close_internal+0x268>)
 800e462:	4884      	ldr	r0, [pc, #528]	@ (800e674 <lwip_netconn_do_close_internal+0x260>)
 800e464:	f00c fc1e 	bl	801aca4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d106      	bne.n	800e47e <lwip_netconn_do_close_internal+0x6a>
 800e470:	4b7e      	ldr	r3, [pc, #504]	@ (800e66c <lwip_netconn_do_close_internal+0x258>)
 800e472:	f240 3246 	movw	r2, #838	@ 0x346
 800e476:	4982      	ldr	r1, [pc, #520]	@ (800e680 <lwip_netconn_do_close_internal+0x26c>)
 800e478:	487e      	ldr	r0, [pc, #504]	@ (800e674 <lwip_netconn_do_close_internal+0x260>)
 800e47a:	f00c fc13 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	d106      	bne.n	800e494 <lwip_netconn_do_close_internal+0x80>
 800e486:	4b79      	ldr	r3, [pc, #484]	@ (800e66c <lwip_netconn_do_close_internal+0x258>)
 800e488:	f240 3247 	movw	r2, #839	@ 0x347
 800e48c:	497d      	ldr	r1, [pc, #500]	@ (800e684 <lwip_netconn_do_close_internal+0x270>)
 800e48e:	4879      	ldr	r0, [pc, #484]	@ (800e674 <lwip_netconn_do_close_internal+0x260>)
 800e490:	f00c fc08 	bl	801aca4 <iprintf>

  tpcb = conn->pcb.tcp;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49e:	7a1b      	ldrb	r3, [r3, #8]
 800e4a0:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	f003 0302 	and.w	r3, r3, #2
 800e4b0:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d102      	bne.n	800e4be <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	77bb      	strb	r3, [r7, #30]
 800e4bc:	e01f      	b.n	800e4fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e4be:	7dbb      	ldrb	r3, [r7, #22]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00e      	beq.n	800e4e2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e4c8:	2b05      	cmp	r3, #5
 800e4ca:	d007      	beq.n	800e4dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e4d0:	2b06      	cmp	r3, #6
 800e4d2:	d003      	beq.n	800e4dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e4d8:	2b08      	cmp	r3, #8
 800e4da:	d102      	bne.n	800e4e2 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	77bb      	strb	r3, [r7, #30]
 800e4e0:	e00d      	b.n	800e4fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e4e2:	7d7b      	ldrb	r3, [r7, #21]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d008      	beq.n	800e4fa <lwip_netconn_do_close_internal+0xe6>
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	7e9b      	ldrb	r3, [r3, #26]
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	77bb      	strb	r3, [r7, #30]
 800e4f8:	e001      	b.n	800e4fe <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800e4fe:	7fbb      	ldrb	r3, [r7, #30]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e504:	2100      	movs	r1, #0
 800e506:	69b8      	ldr	r0, [r7, #24]
 800e508:	f004 f802 	bl	8012510 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	7d1b      	ldrb	r3, [r3, #20]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d104      	bne.n	800e51e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e514:	2100      	movs	r1, #0
 800e516:	69b8      	ldr	r0, [r7, #24]
 800e518:	f004 f870 	bl	80125fc <tcp_accept>
 800e51c:	e01d      	b.n	800e55a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e51e:	7dbb      	ldrb	r3, [r7, #22]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d007      	beq.n	800e534 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e524:	2100      	movs	r1, #0
 800e526:	69b8      	ldr	r0, [r7, #24]
 800e528:	f004 f804 	bl	8012534 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e52c:	2100      	movs	r1, #0
 800e52e:	69b8      	ldr	r0, [r7, #24]
 800e530:	f004 f864 	bl	80125fc <tcp_accept>
    }
    if (shut_tx) {
 800e534:	7d7b      	ldrb	r3, [r7, #21]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e53a:	2100      	movs	r1, #0
 800e53c:	69b8      	ldr	r0, [r7, #24]
 800e53e:	f004 f81b 	bl	8012578 <tcp_sent>
    }
    if (close) {
 800e542:	7fbb      	ldrb	r3, [r7, #30]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d008      	beq.n	800e55a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e548:	2200      	movs	r2, #0
 800e54a:	2100      	movs	r1, #0
 800e54c:	69b8      	ldr	r0, [r7, #24]
 800e54e:	f004 f86d 	bl	801262c <tcp_poll>
      tcp_err(tpcb, NULL);
 800e552:	2100      	movs	r1, #0
 800e554:	69b8      	ldr	r0, [r7, #24]
 800e556:	f004 f82f 	bl	80125b8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800e55a:	7fbb      	ldrb	r3, [r7, #30]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e560:	69b8      	ldr	r0, [r7, #24]
 800e562:	f002 ff49 	bl	80113f8 <tcp_close>
 800e566:	4603      	mov	r3, r0
 800e568:	77fb      	strb	r3, [r7, #31]
 800e56a:	e007      	b.n	800e57c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e56c:	7dbb      	ldrb	r3, [r7, #22]
 800e56e:	7d7a      	ldrb	r2, [r7, #21]
 800e570:	4619      	mov	r1, r3
 800e572:	69b8      	ldr	r0, [r7, #24]
 800e574:	f002 ff58 	bl	8011428 <tcp_shutdown>
 800e578:	4603      	mov	r3, r0
 800e57a:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800e57c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d102      	bne.n	800e58a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e584:	2301      	movs	r3, #1
 800e586:	777b      	strb	r3, [r7, #29]
 800e588:	e016      	b.n	800e5b8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e58a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e592:	d10f      	bne.n	800e5b4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e598:	7a5b      	ldrb	r3, [r3, #9]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10c      	bne.n	800e5b8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	777b      	strb	r3, [r7, #29]
        if (close) {
 800e5a2:	7fbb      	ldrb	r3, [r7, #30]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d007      	beq.n	800e5b8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e5a8:	69b8      	ldr	r0, [r7, #24]
 800e5aa:	f003 f837 	bl	801161c <tcp_abort>
          err = ERR_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	77fb      	strb	r3, [r7, #31]
 800e5b2:	e001      	b.n	800e5b8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800e5b8:	7f7b      	ldrb	r3, [r7, #29]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d064      	beq.n	800e688 <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	330c      	adds	r3, #12
 800e5c6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5cc:	7ffa      	ldrb	r2, [r7, #31]
 800e5ce:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e5dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d129      	bne.n	800e638 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800e5e4:	7fbb      	ldrb	r3, [r7, #30]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00c      	beq.n	800e604 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <lwip_netconn_do_close_internal+0x1f0>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	2104      	movs	r1, #4
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	4798      	blx	r3
      }
      if (shut_rx) {
 800e604:	7dbb      	ldrb	r3, [r7, #22]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d009      	beq.n	800e61e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d005      	beq.n	800e61e <lwip_netconn_do_close_internal+0x20a>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e616:	2200      	movs	r2, #0
 800e618:	2100      	movs	r1, #0
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	4798      	blx	r3
      }
      if (shut_tx) {
 800e61e:	7d7b      	ldrb	r3, [r7, #21]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d009      	beq.n	800e638 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d005      	beq.n	800e638 <lwip_netconn_do_close_internal+0x224>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e630:	2200      	movs	r2, #0
 800e632:	2102      	movs	r1, #2
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00e      	beq.n	800e65c <lwip_netconn_do_close_internal+0x248>
 800e63e:	f00c fa13 	bl	801aa68 <sys_arch_protect>
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e64a:	f113 0f0c 	cmn.w	r3, #12
 800e64e:	db02      	blt.n	800e656 <lwip_netconn_do_close_internal+0x242>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7ffa      	ldrb	r2, [r7, #31]
 800e654:	721a      	strb	r2, [r3, #8]
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f00c fa14 	bl	801aa84 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d002      	beq.n	800e668 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e662:	6938      	ldr	r0, [r7, #16]
 800e664:	f00c f95c 	bl	801a920 <sys_sem_signal>
    }
    return ERR_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	e03c      	b.n	800e6e6 <lwip_netconn_do_close_internal+0x2d2>
 800e66c:	0801c5ec 	.word	0x0801c5ec
 800e670:	0801c898 	.word	0x0801c898
 800e674:	0801c678 	.word	0x0801c678
 800e678:	0801c8a8 	.word	0x0801c8a8
 800e67c:	0801c8c8 	.word	0x0801c8c8
 800e680:	0801c8ec 	.word	0x0801c8ec
 800e684:	0801c754 	.word	0x0801c754
  }
  if (!close_finished) {
 800e688:	7f7b      	ldrb	r3, [r7, #29]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d11e      	bne.n	800e6cc <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	7d1b      	ldrb	r3, [r3, #20]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d106      	bne.n	800e6a4 <lwip_netconn_do_close_internal+0x290>
 800e696:	4b16      	ldr	r3, [pc, #88]	@ (800e6f0 <lwip_netconn_do_close_internal+0x2dc>)
 800e698:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800e69c:	4915      	ldr	r1, [pc, #84]	@ (800e6f4 <lwip_netconn_do_close_internal+0x2e0>)
 800e69e:	4816      	ldr	r0, [pc, #88]	@ (800e6f8 <lwip_netconn_do_close_internal+0x2e4>)
 800e6a0:	f00c fb00 	bl	801aca4 <iprintf>
    if (shut_tx) {
 800e6a4:	7d7b      	ldrb	r3, [r7, #21]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 800e6aa:	4914      	ldr	r1, [pc, #80]	@ (800e6fc <lwip_netconn_do_close_internal+0x2e8>)
 800e6ac:	69b8      	ldr	r0, [r7, #24]
 800e6ae:	f003 ff63 	bl	8012578 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	4912      	ldr	r1, [pc, #72]	@ (800e700 <lwip_netconn_do_close_internal+0x2ec>)
 800e6b6:	69b8      	ldr	r0, [r7, #24]
 800e6b8:	f003 ffb8 	bl	801262c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e6bc:	4911      	ldr	r1, [pc, #68]	@ (800e704 <lwip_netconn_do_close_internal+0x2f0>)
 800e6be:	69b8      	ldr	r0, [r7, #24]
 800e6c0:	f003 ff7a 	bl	80125b8 <tcp_err>
    tcp_arg(tpcb, conn);
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	69b8      	ldr	r0, [r7, #24]
 800e6c8:	f003 ff22 	bl	8012510 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e6cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d106      	bne.n	800e6e2 <lwip_netconn_do_close_internal+0x2ce>
 800e6d4:	4b06      	ldr	r3, [pc, #24]	@ (800e6f0 <lwip_netconn_do_close_internal+0x2dc>)
 800e6d6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800e6da:	490b      	ldr	r1, [pc, #44]	@ (800e708 <lwip_netconn_do_close_internal+0x2f4>)
 800e6dc:	4806      	ldr	r0, [pc, #24]	@ (800e6f8 <lwip_netconn_do_close_internal+0x2e4>)
 800e6de:	f00c fae1 	bl	801aca4 <iprintf>
  return err;
 800e6e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801c5ec 	.word	0x0801c5ec
 800e6f4:	0801c900 	.word	0x0801c900
 800e6f8:	0801c678 	.word	0x0801c678
 800e6fc:	0800dc55 	.word	0x0800dc55
 800e700:	0800db8d 	.word	0x0800db8d
 800e704:	0800dcfd 	.word	0x0800dcfd
 800e708:	0801c924 	.word	0x0801c924

0800e70c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	785b      	ldrb	r3, [r3, #1]
 800e71e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e720:	7cfb      	ldrb	r3, [r7, #19]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00d      	beq.n	800e742 <lwip_netconn_do_delconn+0x36>
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e730:	2b10      	cmp	r3, #16
 800e732:	d006      	beq.n	800e742 <lwip_netconn_do_delconn+0x36>
 800e734:	4b6f      	ldr	r3, [pc, #444]	@ (800e8f4 <lwip_netconn_do_delconn+0x1e8>)
 800e736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e73a:	496f      	ldr	r1, [pc, #444]	@ (800e8f8 <lwip_netconn_do_delconn+0x1ec>)
 800e73c:	486f      	ldr	r0, [pc, #444]	@ (800e8fc <lwip_netconn_do_delconn+0x1f0>)
 800e73e:	f00c fab1 	bl	801aca4 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e742:	7cfb      	ldrb	r3, [r7, #19]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <lwip_netconn_do_delconn+0x48>
 800e748:	7cfb      	ldrb	r3, [r7, #19]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d002      	beq.n	800e754 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e74e:	7cfb      	ldrb	r3, [r7, #19]
 800e750:	2b03      	cmp	r3, #3
 800e752:	d109      	bne.n	800e768 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e754:	7cfb      	ldrb	r3, [r7, #19]
 800e756:	2b03      	cmp	r3, #3
 800e758:	d10a      	bne.n	800e770 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	7f1b      	ldrb	r3, [r3, #28]
 800e760:	f003 0304 	and.w	r3, r3, #4
 800e764:	2b00      	cmp	r3, #0
 800e766:	d103      	bne.n	800e770 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	22fb      	movs	r2, #251	@ 0xfb
 800e76c:	711a      	strb	r2, [r3, #4]
 800e76e:	e09c      	b.n	800e8aa <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e770:	7cfb      	ldrb	r3, [r7, #19]
 800e772:	2b03      	cmp	r3, #3
 800e774:	d10d      	bne.n	800e792 <lwip_netconn_do_delconn+0x86>
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	7f1b      	ldrb	r3, [r3, #28]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <lwip_netconn_do_delconn+0x86>
 800e784:	4b5b      	ldr	r3, [pc, #364]	@ (800e8f4 <lwip_netconn_do_delconn+0x1e8>)
 800e786:	f240 421e 	movw	r2, #1054	@ 0x41e
 800e78a:	495d      	ldr	r1, [pc, #372]	@ (800e900 <lwip_netconn_do_delconn+0x1f4>)
 800e78c:	485b      	ldr	r0, [pc, #364]	@ (800e8fc <lwip_netconn_do_delconn+0x1f0>)
 800e78e:	f00c fa89 	bl	801aca4 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2200      	movs	r2, #0
 800e796:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff fdb9 	bl	800e314 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d064      	beq.n	800e876 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7b6:	2b10      	cmp	r3, #16
 800e7b8:	d00d      	beq.n	800e7d6 <lwip_netconn_do_delconn+0xca>
 800e7ba:	2b20      	cmp	r3, #32
 800e7bc:	d156      	bne.n	800e86c <lwip_netconn_do_delconn+0x160>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f008 fab4 	bl	8016d3c <udp_remove>
        break;
 800e7d4:	e04b      	b.n	800e86e <lwip_netconn_do_delconn+0x162>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d104      	bne.n	800e7ea <lwip_netconn_do_delconn+0xde>
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6a1b      	ldr	r3, [r3, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d006      	beq.n	800e7f8 <lwip_netconn_do_delconn+0xec>
 800e7ea:	4b42      	ldr	r3, [pc, #264]	@ (800e8f4 <lwip_netconn_do_delconn+0x1e8>)
 800e7ec:	f240 4234 	movw	r2, #1076	@ 0x434
 800e7f0:	4944      	ldr	r1, [pc, #272]	@ (800e904 <lwip_netconn_do_delconn+0x1f8>)
 800e7f2:	4842      	ldr	r0, [pc, #264]	@ (800e8fc <lwip_netconn_do_delconn+0x1f0>)
 800e7f4:	f00c fa56 	bl	801aca4 <iprintf>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2203      	movs	r2, #3
 800e804:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	697a      	ldr	r2, [r7, #20]
 800e80c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2100      	movs	r1, #0
 800e814:	4618      	mov	r0, r3
 800e816:	f7ff fdfd 	bl	800e414 <lwip_netconn_do_close_internal>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d065      	beq.n	800e8ec <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	785b      	ldrb	r3, [r3, #1]
 800e826:	2b04      	cmp	r3, #4
 800e828:	d006      	beq.n	800e838 <lwip_netconn_do_delconn+0x12c>
 800e82a:	4b32      	ldr	r3, [pc, #200]	@ (800e8f4 <lwip_netconn_do_delconn+0x1e8>)
 800e82c:	f240 423b 	movw	r2, #1083	@ 0x43b
 800e830:	4935      	ldr	r1, [pc, #212]	@ (800e908 <lwip_netconn_do_delconn+0x1fc>)
 800e832:	4832      	ldr	r0, [pc, #200]	@ (800e8fc <lwip_netconn_do_delconn+0x1f0>)
 800e834:	f00c fa36 	bl	801aca4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e838:	4834      	ldr	r0, [pc, #208]	@ (800e90c <lwip_netconn_do_delconn+0x200>)
 800e83a:	f00c f8e2 	bl	801aa02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	330c      	adds	r3, #12
 800e844:	2100      	movs	r1, #0
 800e846:	4618      	mov	r0, r3
 800e848:	f00c f839 	bl	801a8be <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e84c:	482f      	ldr	r0, [pc, #188]	@ (800e90c <lwip_netconn_do_delconn+0x200>)
 800e84e:	f00c f8c9 	bl	801a9e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	785b      	ldrb	r3, [r3, #1]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d047      	beq.n	800e8ec <lwip_netconn_do_delconn+0x1e0>
 800e85c:	4b25      	ldr	r3, [pc, #148]	@ (800e8f4 <lwip_netconn_do_delconn+0x1e8>)
 800e85e:	f240 423f 	movw	r2, #1087	@ 0x43f
 800e862:	4929      	ldr	r1, [pc, #164]	@ (800e908 <lwip_netconn_do_delconn+0x1fc>)
 800e864:	4825      	ldr	r0, [pc, #148]	@ (800e8fc <lwip_netconn_do_delconn+0x1f0>)
 800e866:	f00c fa1d 	bl	801aca4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 800e86a:	e03f      	b.n	800e8ec <lwip_netconn_do_delconn+0x1e0>
#endif /* LWIP_TCP */
      default:
        break;
 800e86c:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2200      	movs	r2, #0
 800e874:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <lwip_netconn_do_delconn+0x184>
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	6810      	ldr	r0, [r2, #0]
 800e88a:	2200      	movs	r2, #0
 800e88c:	2100      	movs	r1, #0
 800e88e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <lwip_netconn_do_delconn+0x19e>
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	6810      	ldr	r0, [r2, #0]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2102      	movs	r1, #2
 800e8a8:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	330c      	adds	r3, #12
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f00c f84f 	bl	801a954 <sys_sem_valid>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d018      	beq.n	800e8ee <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d014      	beq.n	800e8ee <lwip_netconn_do_delconn+0x1e2>
 800e8c4:	f00c f8d0 	bl	801aa68 <sys_arch_protect>
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e8d2:	f113 0f0c 	cmn.w	r3, #12
 800e8d6:	db05      	blt.n	800e8e4 <lwip_netconn_do_delconn+0x1d8>
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e8e2:	721a      	strb	r2, [r3, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f00c f8cd 	bl	801aa84 <sys_arch_unprotect>
 800e8ea:	e000      	b.n	800e8ee <lwip_netconn_do_delconn+0x1e2>
        return;
 800e8ec:	bf00      	nop
  }
}
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	0801c5ec 	.word	0x0801c5ec
 800e8f8:	0801c934 	.word	0x0801c934
 800e8fc:	0801c678 	.word	0x0801c678
 800e900:	0801c948 	.word	0x0801c948
 800e904:	0801c968 	.word	0x0801c968
 800e908:	0801c984 	.word	0x0801c984
 800e90c:	2400459c 	.word	0x2400459c

0800e910 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e924:	f113 0f0c 	cmn.w	r3, #12
 800e928:	da06      	bge.n	800e938 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	711a      	strb	r2, [r3, #4]
 800e936:	e02f      	b.n	800e998 <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	22fa      	movs	r2, #250	@ 0xfa
 800e93c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d027      	beq.n	800e998 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e952:	2b10      	cmp	r3, #16
 800e954:	d010      	beq.n	800e978 <lwip_netconn_do_bind+0x68>
 800e956:	2b20      	cmp	r3, #32
 800e958:	d11d      	bne.n	800e996 <lwip_netconn_do_bind+0x86>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	6858      	ldr	r0, [r3, #4]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6899      	ldr	r1, [r3, #8]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	899b      	ldrh	r3, [r3, #12]
 800e968:	461a      	mov	r2, r3
 800e96a:	f008 f965 	bl	8016c38 <udp_bind>
 800e96e:	4603      	mov	r3, r0
 800e970:	461a      	mov	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	711a      	strb	r2, [r3, #4]
        break;
 800e976:	e00f      	b.n	800e998 <lwip_netconn_do_bind+0x88>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6858      	ldr	r0, [r3, #4]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6899      	ldr	r1, [r3, #8]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	461a      	mov	r2, r3
 800e988:	f002 fe54 	bl	8011634 <tcp_bind>
 800e98c:	4603      	mov	r3, r0
 800e98e:	461a      	mov	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	711a      	strb	r2, [r3, #4]
        break;
 800e994:	e000      	b.n	800e998 <lwip_netconn_do_bind+0x88>
#endif /* LWIP_TCP */
      default:
        break;
 800e996:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d012      	beq.n	800e9c6 <lwip_netconn_do_bind+0xb6>
 800e9a0:	f00c f862 	bl	801aa68 <sys_arch_protect>
 800e9a4:	60b8      	str	r0, [r7, #8]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9ae:	f113 0f0c 	cmn.w	r3, #12
 800e9b2:	db05      	blt.n	800e9c0 <lwip_netconn_do_bind+0xb0>
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e9be:	721a      	strb	r2, [r3, #8]
 800e9c0:	68b8      	ldr	r0, [r7, #8]
 800e9c2:	f00c f85f 	bl	801aa84 <sys_arch_unprotect>
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
	...

0800e9d0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9e4:	f113 0f0c 	cmn.w	r3, #12
 800e9e8:	da06      	bge.n	800e9f8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	711a      	strb	r2, [r3, #4]
 800e9f6:	e090      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	22f5      	movs	r2, #245	@ 0xf5
 800e9fc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f000 8088 	beq.w	800eb1a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ea14:	2b10      	cmp	r3, #16
 800ea16:	d17d      	bne.n	800eb14 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	785b      	ldrb	r3, [r3, #1]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d16f      	bne.n	800eb02 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	7d1b      	ldrb	r3, [r3, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d003      	beq.n	800ea36 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	22fa      	movs	r2, #250	@ 0xfa
 800ea32:	711a      	strb	r2, [r3, #4]
 800ea34:	e071      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ea36:	23ff      	movs	r3, #255	@ 0xff
 800ea38:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	f107 020f 	add.w	r2, r7, #15
 800ea44:	7ef9      	ldrb	r1, [r7, #27]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f002 fe96 	bl	8011778 <tcp_listen_with_backlog_and_err>
 800ea4c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d104      	bne.n	800ea5e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800ea54:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	711a      	strb	r2, [r3, #4]
 800ea5c:	e05d      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3310      	adds	r3, #16
 800ea64:	4618      	mov	r0, r3
 800ea66:	f00b fee4 	bl	801a832 <sys_mbox_valid>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3310      	adds	r3, #16
 800ea76:	4618      	mov	r0, r3
 800ea78:	f00b fe3e 	bl	801a6f8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	3310      	adds	r3, #16
 800ea82:	4618      	mov	r0, r3
 800ea84:	f00b fee6 	bl	801a854 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3314      	adds	r3, #20
 800ea94:	4618      	mov	r0, r3
 800ea96:	f00b fecc 	bl	801a832 <sys_mbox_valid>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d10a      	bne.n	800eab6 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3314      	adds	r3, #20
 800eaa6:	2106      	movs	r1, #6
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f00b fe03 	bl	801a6b4 <sys_mbox_new>
 800eaae:	4603      	mov	r3, r0
 800eab0:	461a      	mov	r2, r3
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d118      	bne.n	800eaf2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2202      	movs	r2, #2
 800eac6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	697a      	ldr	r2, [r7, #20]
 800eace:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4619      	mov	r1, r3
 800eadc:	4610      	mov	r0, r2
 800eade:	f003 fd17 	bl	8012510 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	4919      	ldr	r1, [pc, #100]	@ (800eb50 <lwip_netconn_do_listen+0x180>)
 800eaea:	4618      	mov	r0, r3
 800eaec:	f003 fd86 	bl	80125fc <tcp_accept>
 800eaf0:	e013      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800eaf2:	6978      	ldr	r0, [r7, #20]
 800eaf4:	f002 fc80 	bl	80113f8 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2200      	movs	r2, #0
 800eafe:	605a      	str	r2, [r3, #4]
 800eb00:	e00b      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	785b      	ldrb	r3, [r3, #1]
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d106      	bne.n	800eb1a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	711a      	strb	r2, [r3, #4]
 800eb12:	e002      	b.n	800eb1a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	22f0      	movs	r2, #240	@ 0xf0
 800eb18:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d012      	beq.n	800eb48 <lwip_netconn_do_listen+0x178>
 800eb22:	f00b ffa1 	bl	801aa68 <sys_arch_protect>
 800eb26:	6138      	str	r0, [r7, #16]
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb30:	f113 0f0c 	cmn.w	r3, #12
 800eb34:	db05      	blt.n	800eb42 <lwip_netconn_do_listen+0x172>
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	69fa      	ldr	r2, [r7, #28]
 800eb3c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800eb40:	721a      	strb	r2, [r3, #8]
 800eb42:	6938      	ldr	r0, [r7, #16]
 800eb44:	f00b ff9e 	bl	801aa84 <sys_arch_unprotect>
}
 800eb48:	bf00      	nop
 800eb4a:	3720      	adds	r7, #32
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	0800df2d 	.word	0x0800df2d

0800eb54 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	2200      	movs	r2, #0
 800eb64:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d022      	beq.n	800ebb6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb7a:	2b10      	cmp	r3, #16
 800eb7c:	d11b      	bne.n	800ebb6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb8a:	d202      	bcs.n	800eb92 <lwip_netconn_do_recv+0x3e>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	e001      	b.n	800eb96 <lwip_netconn_do_recv+0x42>
 800eb92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb96:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	89fa      	ldrh	r2, [r7, #14]
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f002 fece 	bl	8011944 <tcp_recved>
        remaining -= recved;
 800eba8:	89fb      	ldrh	r3, [r7, #14]
 800ebaa:	697a      	ldr	r2, [r7, #20]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e6      	bne.n	800eb84 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d012      	beq.n	800ebe4 <lwip_netconn_do_recv+0x90>
 800ebbe:	f00b ff53 	bl	801aa68 <sys_arch_protect>
 800ebc2:	60b8      	str	r0, [r7, #8]
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ebcc:	f113 0f0c 	cmn.w	r3, #12
 800ebd0:	db05      	blt.n	800ebde <lwip_netconn_do_recv+0x8a>
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	693a      	ldr	r2, [r7, #16]
 800ebd8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ebdc:	721a      	strb	r2, [r3, #8]
 800ebde:	68b8      	ldr	r0, [r7, #8]
 800ebe0:	f00b ff50 	bl	801aa84 <sys_arch_unprotect>
}
 800ebe4:	bf00      	nop
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b08a      	sub	sp, #40	@ 0x28
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <lwip_netconn_do_writemore+0x26>
 800ec04:	4b9b      	ldr	r3, [pc, #620]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ec06:	f240 52e3 	movw	r2, #1507	@ 0x5e3
 800ec0a:	499b      	ldr	r1, [pc, #620]	@ (800ee78 <lwip_netconn_do_writemore+0x28c>)
 800ec0c:	489b      	ldr	r0, [pc, #620]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ec0e:	f00c f849 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	785b      	ldrb	r3, [r3, #1]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d006      	beq.n	800ec28 <lwip_netconn_do_writemore+0x3c>
 800ec1a:	4b96      	ldr	r3, [pc, #600]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ec1c:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 800ec20:	4997      	ldr	r1, [pc, #604]	@ (800ee80 <lwip_netconn_do_writemore+0x294>)
 800ec22:	4896      	ldr	r0, [pc, #600]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ec24:	f00c f83e 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <lwip_netconn_do_writemore+0x52>
 800ec30:	4b90      	ldr	r3, [pc, #576]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ec32:	f240 52e5 	movw	r2, #1509	@ 0x5e5
 800ec36:	4993      	ldr	r1, [pc, #588]	@ (800ee84 <lwip_netconn_do_writemore+0x298>)
 800ec38:	4890      	ldr	r0, [pc, #576]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ec3a:	f00c f833 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d106      	bne.n	800ec54 <lwip_netconn_do_writemore+0x68>
 800ec46:	4b8b      	ldr	r3, [pc, #556]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ec48:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 800ec4c:	498e      	ldr	r1, [pc, #568]	@ (800ee88 <lwip_netconn_do_writemore+0x29c>)
 800ec4e:	488b      	ldr	r0, [pc, #556]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ec50:	f00c f828 	bl	801aca4 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a1a      	ldr	r2, [r3, #32]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d306      	bcc.n	800ec70 <lwip_netconn_do_writemore+0x84>
 800ec62:	4b84      	ldr	r3, [pc, #528]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ec64:	f240 52e7 	movw	r2, #1511	@ 0x5e7
 800ec68:	4988      	ldr	r1, [pc, #544]	@ (800ee8c <lwip_netconn_do_writemore+0x2a0>)
 800ec6a:	4884      	ldr	r0, [pc, #528]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ec6c:	f00c f81a 	bl	801aca4 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec74:	7c1b      	ldrb	r3, [r3, #16]
 800ec76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	7f1b      	ldrb	r3, [r3, #28]
 800ec7e:	f003 0302 	and.w	r3, r3, #2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d105      	bne.n	800ec92 <lwip_netconn_do_writemore+0xa6>
 800ec86:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ec8a:	f003 0304 	and.w	r3, r3, #4
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <lwip_netconn_do_writemore+0xaa>
 800ec92:	2301      	movs	r3, #1
 800ec94:	e000      	b.n	800ec98 <lwip_netconn_do_writemore+0xac>
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca0:	689a      	ldr	r2, [r3, #8]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6a1b      	ldr	r3, [r3, #32]
 800eca6:	4413      	add	r3, r2
 800eca8:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a1b      	ldr	r3, [r3, #32]
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecbe:	d309      	bcc.n	800ecd4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800ecc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ecc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800ecc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ecca:	f043 0302 	orr.w	r3, r3, #2
 800ecce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ecd2:	e001      	b.n	800ecd8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ece0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800ece2:	8afa      	ldrh	r2, [r7, #22]
 800ece4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d212      	bcs.n	800ed10 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800ecea:	8afb      	ldrh	r3, [r7, #22]
 800ecec:	84bb      	strh	r3, [r7, #36]	@ 0x24
      if (dontblock) {
 800ecee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d006      	beq.n	800ed04 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800ecf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d109      	bne.n	800ed10 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800ecfc:	23f9      	movs	r3, #249	@ 0xf9
 800ecfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto err_mem;
 800ed02:	e02a      	b.n	800ed5a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ed04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a1a      	ldr	r2, [r3, #32]
 800ed14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed16:	441a      	add	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d906      	bls.n	800ed30 <lwip_netconn_do_writemore+0x144>
 800ed22:	4b54      	ldr	r3, [pc, #336]	@ (800ee74 <lwip_netconn_do_writemore+0x288>)
 800ed24:	f240 6213 	movw	r2, #1555	@ 0x613
 800ed28:	4959      	ldr	r1, [pc, #356]	@ (800ee90 <lwip_netconn_do_writemore+0x2a4>)
 800ed2a:	4854      	ldr	r0, [pc, #336]	@ (800ee7c <lwip_netconn_do_writemore+0x290>)
 800ed2c:	f00b ffba 	bl	801aca4 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6858      	ldr	r0, [r3, #4]
 800ed34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed3a:	69f9      	ldr	r1, [r7, #28]
 800ed3c:	f006 fa24 	bl	8015188 <tcp_write>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ed46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <lwip_netconn_do_writemore+0x16c>
 800ed4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed56:	d133      	bne.n	800edc0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800ed58:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800ed5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d017      	beq.n	800ed92 <lwip_netconn_do_writemore+0x1a6>
 800ed62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d211      	bcs.n	800ed92 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d005      	beq.n	800ed82 <lwip_netconn_do_writemore+0x196>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed7c:	2103      	movs	r1, #3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	7f1b      	ldrb	r3, [r3, #28]
 800ed86:	f043 0310 	orr.w	r3, r3, #16
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	771a      	strb	r2, [r3, #28]
 800ed90:	e016      	b.n	800edc0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed9a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ed9e:	d305      	bcc.n	800edac <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800eda8:	2b04      	cmp	r3, #4
 800edaa:	d909      	bls.n	800edc0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d005      	beq.n	800edc0 <lwip_netconn_do_writemore+0x1d4>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800edba:	2103      	movs	r1, #3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800edc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d134      	bne.n	800ee32 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6a1a      	ldr	r2, [r3, #32]
 800edcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edce:	441a      	add	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a1a      	ldr	r2, [r3, #32]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d003      	beq.n	800edea <lwip_netconn_do_writemore+0x1fe>
 800ede2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d007      	beq.n	800edfa <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	6a12      	ldr	r2, [r2, #32]
 800edf2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800edf4:	2301      	movs	r3, #1
 800edf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f006 fe74 	bl	8015aec <tcp_output>
 800ee04:	4603      	mov	r3, r0
 800ee06:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ee08:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ee0c:	f113 0f0c 	cmn.w	r3, #12
 800ee10:	db04      	blt.n	800ee1c <lwip_netconn_do_writemore+0x230>
 800ee12:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ee16:	f113 0f04 	cmn.w	r3, #4
 800ee1a:	d151      	bne.n	800eec0 <lwip_netconn_do_writemore+0x2d4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ee1c:	7d3b      	ldrb	r3, [r7, #20]
 800ee1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 800ee22:	2301      	movs	r3, #1
 800ee24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	60da      	str	r2, [r3, #12]
 800ee30:	e046      	b.n	800eec0 <lwip_netconn_do_writemore+0x2d4>
      }
    } else if (err == ERR_MEM) {
 800ee32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ee36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3a:	d13a      	bne.n	800eeb2 <lwip_netconn_do_writemore+0x2c6>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f006 fe53 	bl	8015aec <tcp_output>
 800ee46:	4603      	mov	r3, r0
 800ee48:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ee4a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ee4e:	f113 0f0c 	cmn.w	r3, #12
 800ee52:	db04      	blt.n	800ee5e <lwip_netconn_do_writemore+0x272>
 800ee54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ee58:	f113 0f04 	cmn.w	r3, #4
 800ee5c:	d11a      	bne.n	800ee94 <lwip_netconn_do_writemore+0x2a8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ee5e:	7d7b      	ldrb	r3, [r7, #21]
 800ee60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 800ee64:	2301      	movs	r3, #1
 800ee66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6e:	2200      	movs	r2, #0
 800ee70:	60da      	str	r2, [r3, #12]
 800ee72:	e025      	b.n	800eec0 <lwip_netconn_do_writemore+0x2d4>
 800ee74:	0801c5ec 	.word	0x0801c5ec
 800ee78:	0801c744 	.word	0x0801c744
 800ee7c:	0801c678 	.word	0x0801c678
 800ee80:	0801ca24 	.word	0x0801ca24
 800ee84:	0801c754 	.word	0x0801c754
 800ee88:	0801ca44 	.word	0x0801ca44
 800ee8c:	0801ca5c 	.word	0x0801ca5c
 800ee90:	0801ca90 	.word	0x0801ca90
      } else if (dontblock) {
 800ee94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d011      	beq.n	800eec0 <lwip_netconn_do_writemore+0x2d4>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800ee9c:	23f9      	movs	r3, #249	@ 0xf9
 800ee9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeac:	2200      	movs	r2, #0
 800eeae:	60da      	str	r2, [r3, #12]
 800eeb0:	e006      	b.n	800eec0 <lwip_netconn_do_writemore+0x2d4>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      conn->current_msg->msg.w.len = 0;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eebc:	2200      	movs	r2, #0
 800eebe:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800eec0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d02c      	beq.n	800ef22 <lwip_netconn_do_writemore+0x336>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	330c      	adds	r3, #12
 800eed0:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eeda:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->write_offset = 0;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00f      	beq.n	800ef14 <lwip_netconn_do_writemore+0x328>
 800eef4:	f00b fdb8 	bl	801aa68 <sys_arch_protect>
 800eef8:	60f8      	str	r0, [r7, #12]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ef00:	f113 0f0c 	cmn.w	r3, #12
 800ef04:	db03      	blt.n	800ef0e <lwip_netconn_do_writemore+0x322>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ef0c:	721a      	strb	r2, [r3, #8]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f00b fdb8 	bl	801aa84 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ef14:	78fb      	ldrb	r3, [r7, #3]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d006      	beq.n	800ef28 <lwip_netconn_do_writemore+0x33c>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ef1a:	6938      	ldr	r0, [r7, #16]
 800ef1c:	f00b fd00 	bl	801a920 <sys_sem_signal>
 800ef20:	e002      	b.n	800ef28 <lwip_netconn_do_writemore+0x33c>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ef22:	f04f 33ff 	mov.w	r3, #4294967295
 800ef26:	e000      	b.n	800ef2a <lwip_netconn_do_writemore+0x33e>
  }
#endif
  return ERR_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3728      	adds	r7, #40	@ 0x28
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop

0800ef34 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ef48:	f113 0f0c 	cmn.w	r3, #12
 800ef4c:	da06      	bge.n	800ef5c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	711a      	strb	r2, [r3, #4]
 800ef5a:	e072      	b.n	800f042 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef66:	2b10      	cmp	r3, #16
 800ef68:	d168      	bne.n	800f03c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	785b      	ldrb	r3, [r3, #1]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d003      	beq.n	800ef7c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	22fb      	movs	r2, #251	@ 0xfb
 800ef78:	711a      	strb	r2, [r3, #4]
 800ef7a:	e062      	b.n	800f042 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d056      	beq.n	800f034 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d104      	bne.n	800efa2 <lwip_netconn_do_write+0x6e>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d006      	beq.n	800efb0 <lwip_netconn_do_write+0x7c>
 800efa2:	4b36      	ldr	r3, [pc, #216]	@ (800f07c <lwip_netconn_do_write+0x148>)
 800efa4:	f240 6282 	movw	r2, #1666	@ 0x682
 800efa8:	4935      	ldr	r1, [pc, #212]	@ (800f080 <lwip_netconn_do_write+0x14c>)
 800efaa:	4836      	ldr	r0, [pc, #216]	@ (800f084 <lwip_netconn_do_write+0x150>)
 800efac:	f00b fe7a 	bl	801aca4 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <lwip_netconn_do_write+0x92>
 800efb8:	4b30      	ldr	r3, [pc, #192]	@ (800f07c <lwip_netconn_do_write+0x148>)
 800efba:	f240 6284 	movw	r2, #1668	@ 0x684
 800efbe:	4932      	ldr	r1, [pc, #200]	@ (800f088 <lwip_netconn_do_write+0x154>)
 800efc0:	4830      	ldr	r0, [pc, #192]	@ (800f084 <lwip_netconn_do_write+0x150>)
 800efc2:	f00b fe6f 	bl	801aca4 <iprintf>
        msg->conn->current_msg = msg;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	625a      	str	r2, [r3, #36]	@ 0x24
        msg->conn->write_offset = 0;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2200      	movs	r2, #0
 800efd4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2100      	movs	r1, #0
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff fe05 	bl	800ebec <lwip_netconn_do_writemore>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d044      	beq.n	800f072 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	785b      	ldrb	r3, [r3, #1]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d006      	beq.n	800f000 <lwip_netconn_do_write+0xcc>
 800eff2:	4b22      	ldr	r3, [pc, #136]	@ (800f07c <lwip_netconn_do_write+0x148>)
 800eff4:	f240 6289 	movw	r2, #1673	@ 0x689
 800eff8:	4924      	ldr	r1, [pc, #144]	@ (800f08c <lwip_netconn_do_write+0x158>)
 800effa:	4822      	ldr	r0, [pc, #136]	@ (800f084 <lwip_netconn_do_write+0x150>)
 800effc:	f00b fe52 	bl	801aca4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f000:	4823      	ldr	r0, [pc, #140]	@ (800f090 <lwip_netconn_do_write+0x15c>)
 800f002:	f00b fcfe 	bl	801aa02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	330c      	adds	r3, #12
 800f00c:	2100      	movs	r1, #0
 800f00e:	4618      	mov	r0, r3
 800f010:	f00b fc55 	bl	801a8be <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f014:	481e      	ldr	r0, [pc, #120]	@ (800f090 <lwip_netconn_do_write+0x15c>)
 800f016:	f00b fce5 	bl	801a9e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	785b      	ldrb	r3, [r3, #1]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d126      	bne.n	800f072 <lwip_netconn_do_write+0x13e>
 800f024:	4b15      	ldr	r3, [pc, #84]	@ (800f07c <lwip_netconn_do_write+0x148>)
 800f026:	f240 628d 	movw	r2, #1677	@ 0x68d
 800f02a:	4918      	ldr	r1, [pc, #96]	@ (800f08c <lwip_netconn_do_write+0x158>)
 800f02c:	4815      	ldr	r0, [pc, #84]	@ (800f084 <lwip_netconn_do_write+0x150>)
 800f02e:	f00b fe39 	bl	801aca4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800f032:	e01e      	b.n	800f072 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	22f5      	movs	r2, #245	@ 0xf5
 800f038:	711a      	strb	r2, [r3, #4]
 800f03a:	e002      	b.n	800f042 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	22fa      	movs	r2, #250	@ 0xfa
 800f040:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d014      	beq.n	800f074 <lwip_netconn_do_write+0x140>
 800f04a:	f00b fd0d 	bl	801aa68 <sys_arch_protect>
 800f04e:	60b8      	str	r0, [r7, #8]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f058:	f113 0f0c 	cmn.w	r3, #12
 800f05c:	db05      	blt.n	800f06a <lwip_netconn_do_write+0x136>
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f068:	721a      	strb	r2, [r3, #8]
 800f06a:	68b8      	ldr	r0, [r7, #8]
 800f06c:	f00b fd0a 	bl	801aa84 <sys_arch_unprotect>
 800f070:	e000      	b.n	800f074 <lwip_netconn_do_write+0x140>
        return;
 800f072:	bf00      	nop
}
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	0801c5ec 	.word	0x0801c5ec
 800f080:	0801c968 	.word	0x0801c968
 800f084:	0801c678 	.word	0x0801c678
 800f088:	0801cabc 	.word	0x0801cabc
 800f08c:	0801c984 	.word	0x0801c984
 800f090:	2400459c 	.word	0x2400459c

0800f094 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	785b      	ldrb	r3, [r3, #1]
 800f0a6:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d06e      	beq.n	800f190 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800f0bc:	2b10      	cmp	r3, #16
 800f0be:	d167      	bne.n	800f190 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d002      	beq.n	800f0ce <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f0c8:	7cfb      	ldrb	r3, [r7, #19]
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d060      	beq.n	800f190 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800f0ce:	7cfb      	ldrb	r3, [r7, #19]
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d103      	bne.n	800f0dc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	22f5      	movs	r2, #245	@ 0xf5
 800f0d8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f0da:	e05c      	b.n	800f196 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800f0dc:	7cfb      	ldrb	r3, [r7, #19]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d103      	bne.n	800f0ea <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	22fb      	movs	r2, #251	@ 0xfb
 800f0e6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f0e8:	e055      	b.n	800f196 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	7a1b      	ldrb	r3, [r3, #8]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d004      	beq.n	800f100 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff f90a 	bl	800e314 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f106:	2b00      	cmp	r3, #0
 800f108:	d104      	bne.n	800f114 <lwip_netconn_do_close+0x80>
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6a1b      	ldr	r3, [r3, #32]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <lwip_netconn_do_close+0x8e>
 800f114:	4b2e      	ldr	r3, [pc, #184]	@ (800f1d0 <lwip_netconn_do_close+0x13c>)
 800f116:	f240 721b 	movw	r2, #1819	@ 0x71b
 800f11a:	492e      	ldr	r1, [pc, #184]	@ (800f1d4 <lwip_netconn_do_close+0x140>)
 800f11c:	482e      	ldr	r0, [pc, #184]	@ (800f1d8 <lwip_netconn_do_close+0x144>)
 800f11e:	f00b fdc1 	bl	801aca4 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2204      	movs	r2, #4
 800f128:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2100      	movs	r1, #0
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff f96b 	bl	800e414 <lwip_netconn_do_close_internal>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d040      	beq.n	800f1c6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	785b      	ldrb	r3, [r3, #1]
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d006      	beq.n	800f15c <lwip_netconn_do_close+0xc8>
 800f14e:	4b20      	ldr	r3, [pc, #128]	@ (800f1d0 <lwip_netconn_do_close+0x13c>)
 800f150:	f240 7221 	movw	r2, #1825	@ 0x721
 800f154:	4921      	ldr	r1, [pc, #132]	@ (800f1dc <lwip_netconn_do_close+0x148>)
 800f156:	4820      	ldr	r0, [pc, #128]	@ (800f1d8 <lwip_netconn_do_close+0x144>)
 800f158:	f00b fda4 	bl	801aca4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800f15c:	4820      	ldr	r0, [pc, #128]	@ (800f1e0 <lwip_netconn_do_close+0x14c>)
 800f15e:	f00b fc50 	bl	801aa02 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	330c      	adds	r3, #12
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f00b fba7 	bl	801a8be <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800f170:	481b      	ldr	r0, [pc, #108]	@ (800f1e0 <lwip_netconn_do_close+0x14c>)
 800f172:	f00b fc37 	bl	801a9e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	785b      	ldrb	r3, [r3, #1]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d022      	beq.n	800f1c6 <lwip_netconn_do_close+0x132>
 800f180:	4b13      	ldr	r3, [pc, #76]	@ (800f1d0 <lwip_netconn_do_close+0x13c>)
 800f182:	f240 7225 	movw	r2, #1829	@ 0x725
 800f186:	4915      	ldr	r1, [pc, #84]	@ (800f1dc <lwip_netconn_do_close+0x148>)
 800f188:	4813      	ldr	r0, [pc, #76]	@ (800f1d8 <lwip_netconn_do_close+0x144>)
 800f18a:	f00b fd8b 	bl	801aca4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800f18e:	e01a      	b.n	800f1c6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	22f5      	movs	r2, #245	@ 0xf5
 800f194:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d014      	beq.n	800f1c8 <lwip_netconn_do_close+0x134>
 800f19e:	f00b fc63 	bl	801aa68 <sys_arch_protect>
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f1ac:	f113 0f0c 	cmn.w	r3, #12
 800f1b0:	db05      	blt.n	800f1be <lwip_netconn_do_close+0x12a>
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f1bc:	721a      	strb	r2, [r3, #8]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f00b fc60 	bl	801aa84 <sys_arch_unprotect>
 800f1c4:	e000      	b.n	800f1c8 <lwip_netconn_do_close+0x134>
      return;
 800f1c6:	bf00      	nop
}
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	0801c5ec 	.word	0x0801c5ec
 800f1d4:	0801c968 	.word	0x0801c968
 800f1d8:	0801c678 	.word	0x0801c678
 800f1dc:	0801c984 	.word	0x0801c984
 800f1e0:	2400459c 	.word	0x2400459c

0800f1e4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d013      	beq.n	800f21a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00b      	beq.n	800f212 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f001 fcac 	bl	8010b5c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	605a      	str	r2, [r3, #4]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f212:	6879      	ldr	r1, [r7, #4]
 800f214:	2006      	movs	r0, #6
 800f216:	f000 feab 	bl	800ff70 <memp_free>
  }
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
	...

0800f224 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d108      	bne.n	800f248 <netbuf_data+0x24>
 800f236:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a4 <netbuf_data+0x80>)
 800f238:	22c2      	movs	r2, #194	@ 0xc2
 800f23a:	491b      	ldr	r1, [pc, #108]	@ (800f2a8 <netbuf_data+0x84>)
 800f23c:	481b      	ldr	r0, [pc, #108]	@ (800f2ac <netbuf_data+0x88>)
 800f23e:	f00b fd31 	bl	801aca4 <iprintf>
 800f242:	f06f 030f 	mvn.w	r3, #15
 800f246:	e029      	b.n	800f29c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d108      	bne.n	800f260 <netbuf_data+0x3c>
 800f24e:	4b15      	ldr	r3, [pc, #84]	@ (800f2a4 <netbuf_data+0x80>)
 800f250:	22c3      	movs	r2, #195	@ 0xc3
 800f252:	4917      	ldr	r1, [pc, #92]	@ (800f2b0 <netbuf_data+0x8c>)
 800f254:	4815      	ldr	r0, [pc, #84]	@ (800f2ac <netbuf_data+0x88>)
 800f256:	f00b fd25 	bl	801aca4 <iprintf>
 800f25a:	f06f 030f 	mvn.w	r3, #15
 800f25e:	e01d      	b.n	800f29c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d108      	bne.n	800f278 <netbuf_data+0x54>
 800f266:	4b0f      	ldr	r3, [pc, #60]	@ (800f2a4 <netbuf_data+0x80>)
 800f268:	22c4      	movs	r2, #196	@ 0xc4
 800f26a:	4912      	ldr	r1, [pc, #72]	@ (800f2b4 <netbuf_data+0x90>)
 800f26c:	480f      	ldr	r0, [pc, #60]	@ (800f2ac <netbuf_data+0x88>)
 800f26e:	f00b fd19 	bl	801aca4 <iprintf>
 800f272:	f06f 030f 	mvn.w	r3, #15
 800f276:	e011      	b.n	800f29c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d102      	bne.n	800f286 <netbuf_data+0x62>
    return ERR_BUF;
 800f280:	f06f 0301 	mvn.w	r3, #1
 800f284:	e00a      	b.n	800f29c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	895a      	ldrh	r2, [r3, #10]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	0801cae8 	.word	0x0801cae8
 800f2a8:	0801cc24 	.word	0x0801cc24
 800f2ac:	0801cb6c 	.word	0x0801cb6c
 800f2b0:	0801cc40 	.word	0x0801cc40
 800f2b4:	0801cc60 	.word	0x0801cc60

0800f2b8 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	60fb      	str	r3, [r7, #12]

  netif_set_addr( msg->netif,
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6858      	ldr	r0, [r3, #4]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6899      	ldr	r1, [r3, #8]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	68da      	ldr	r2, [r3, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	f000 fee0 	bl	8010098 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b08e      	sub	sp, #56	@ 0x38
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
 800f2f0:	603b      	str	r3, [r7, #0]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <netifapi_netif_set_addr+0x18>
    ipaddr = IP4_ADDR_ANY4;
 800f2f8:	4b11      	ldr	r3, [pc, #68]	@ (800f340 <netifapi_netif_set_addr+0x5c>)
 800f2fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d101      	bne.n	800f306 <netifapi_netif_set_addr+0x22>
    netmask = IP4_ADDR_ANY4;
 800f302:	4b0f      	ldr	r3, [pc, #60]	@ (800f340 <netifapi_netif_set_addr+0x5c>)
 800f304:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <netifapi_netif_set_addr+0x2c>
    gw = IP4_ADDR_ANY4;
 800f30c:	4b0c      	ldr	r3, [pc, #48]	@ (800f340 <netifapi_netif_set_addr+0x5c>)
 800f30e:	603b      	str	r3, [r7, #0]
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	623b      	str	r3, [r7, #32]
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	627b      	str	r3, [r7, #36]	@ 0x24
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 800f320:	f107 0314 	add.w	r3, r7, #20
 800f324:	4619      	mov	r1, r3
 800f326:	4807      	ldr	r0, [pc, #28]	@ (800f344 <netifapi_netif_set_addr+0x60>)
 800f328:	f000 f93e 	bl	800f5a8 <tcpip_api_call>
 800f32c:	4603      	mov	r3, r0
 800f32e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800f332:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f336:	4618      	mov	r0, r3
 800f338:	3738      	adds	r7, #56	@ 0x38
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	0801f3f0 	.word	0x0801f3f0
 800f344:	0800f2b9 	.word	0x0800f2b9

0800f348 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800f350:	4b2b      	ldr	r3, [pc, #172]	@ (800f400 <tcpip_thread+0xb8>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d005      	beq.n	800f364 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800f358:	4b29      	ldr	r3, [pc, #164]	@ (800f400 <tcpip_thread+0xb8>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a29      	ldr	r2, [pc, #164]	@ (800f404 <tcpip_thread+0xbc>)
 800f35e:	6812      	ldr	r2, [r2, #0]
 800f360:	4610      	mov	r0, r2
 800f362:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800f364:	4828      	ldr	r0, [pc, #160]	@ (800f408 <tcpip_thread+0xc0>)
 800f366:	f00b fb3d 	bl	801a9e4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800f36a:	4827      	ldr	r0, [pc, #156]	@ (800f408 <tcpip_thread+0xc0>)
 800f36c:	f00b fb49 	bl	801aa02 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800f370:	f107 030c 	add.w	r3, r7, #12
 800f374:	4619      	mov	r1, r3
 800f376:	4825      	ldr	r0, [pc, #148]	@ (800f40c <tcpip_thread+0xc4>)
 800f378:	f007 f9fe 	bl	8016778 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f37c:	4822      	ldr	r0, [pc, #136]	@ (800f408 <tcpip_thread+0xc0>)
 800f37e:	f00b fb31 	bl	801a9e4 <sys_mutex_lock>
    if (msg == NULL) {
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d106      	bne.n	800f396 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f388:	4b21      	ldr	r3, [pc, #132]	@ (800f410 <tcpip_thread+0xc8>)
 800f38a:	2269      	movs	r2, #105	@ 0x69
 800f38c:	4921      	ldr	r1, [pc, #132]	@ (800f414 <tcpip_thread+0xcc>)
 800f38e:	4822      	ldr	r0, [pc, #136]	@ (800f418 <tcpip_thread+0xd0>)
 800f390:	f00b fc88 	bl	801aca4 <iprintf>
      continue;
 800f394:	e032      	b.n	800f3fc <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	d020      	beq.n	800f3e0 <tcpip_thread+0x98>
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	dc25      	bgt.n	800f3ee <tcpip_thread+0xa6>
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d002      	beq.n	800f3ac <tcpip_thread+0x64>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d00e      	beq.n	800f3c8 <tcpip_thread+0x80>
 800f3aa:	e020      	b.n	800f3ee <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	6850      	ldr	r0, [r2, #4]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	6892      	ldr	r2, [r2, #8]
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	2009      	movs	r0, #9
 800f3c2:	f000 fdd5 	bl	800ff70 <memp_free>
      break;
 800f3c6:	e019      	b.n	800f3fc <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	6892      	ldr	r2, [r2, #8]
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	2008      	movs	r0, #8
 800f3da:	f000 fdc9 	bl	800ff70 <memp_free>
      break;
 800f3de:	e00d      	b.n	800f3fc <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	6892      	ldr	r2, [r2, #8]
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	4798      	blx	r3
      break;
 800f3ec:	e006      	b.n	800f3fc <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f3ee:	4b08      	ldr	r3, [pc, #32]	@ (800f410 <tcpip_thread+0xc8>)
 800f3f0:	229b      	movs	r2, #155	@ 0x9b
 800f3f2:	4908      	ldr	r1, [pc, #32]	@ (800f414 <tcpip_thread+0xcc>)
 800f3f4:	4808      	ldr	r0, [pc, #32]	@ (800f418 <tcpip_thread+0xd0>)
 800f3f6:	f00b fc55 	bl	801aca4 <iprintf>
      break;
 800f3fa:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800f3fc:	e7b5      	b.n	800f36a <tcpip_thread+0x22>
 800f3fe:	bf00      	nop
 800f400:	24004590 	.word	0x24004590
 800f404:	24004594 	.word	0x24004594
 800f408:	2400459c 	.word	0x2400459c
 800f40c:	24004598 	.word	0x24004598
 800f410:	0801ccb4 	.word	0x0801ccb4
 800f414:	0801cd18 	.word	0x0801cd18
 800f418:	0801cd38 	.word	0x0801cd38

0800f41c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b086      	sub	sp, #24
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f428:	481a      	ldr	r0, [pc, #104]	@ (800f494 <tcpip_inpkt+0x78>)
 800f42a:	f00b fa02 	bl	801a832 <sys_mbox_valid>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <tcpip_inpkt+0x24>
 800f434:	4b18      	ldr	r3, [pc, #96]	@ (800f498 <tcpip_inpkt+0x7c>)
 800f436:	22b5      	movs	r2, #181	@ 0xb5
 800f438:	4918      	ldr	r1, [pc, #96]	@ (800f49c <tcpip_inpkt+0x80>)
 800f43a:	4819      	ldr	r0, [pc, #100]	@ (800f4a0 <tcpip_inpkt+0x84>)
 800f43c:	f00b fc32 	bl	801aca4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f440:	2009      	movs	r0, #9
 800f442:	f000 fd1f 	bl	800fe84 <memp_malloc>
 800f446:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d102      	bne.n	800f454 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f44e:	f04f 33ff 	mov.w	r3, #4294967295
 800f452:	e01a      	b.n	800f48a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2202      	movs	r2, #2
 800f458:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f46c:	6979      	ldr	r1, [r7, #20]
 800f46e:	4809      	ldr	r0, [pc, #36]	@ (800f494 <tcpip_inpkt+0x78>)
 800f470:	f00b f96a 	bl	801a748 <sys_mbox_trypost>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f47a:	6979      	ldr	r1, [r7, #20]
 800f47c:	2009      	movs	r0, #9
 800f47e:	f000 fd77 	bl	800ff70 <memp_free>
    return ERR_MEM;
 800f482:	f04f 33ff 	mov.w	r3, #4294967295
 800f486:	e000      	b.n	800f48a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f488:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3718      	adds	r7, #24
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	24004598 	.word	0x24004598
 800f498:	0801ccb4 	.word	0x0801ccb4
 800f49c:	0801cd60 	.word	0x0801cd60
 800f4a0:	0801cd38 	.word	0x0801cd38

0800f4a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800f4b4:	f003 0318 	and.w	r3, r3, #24
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d006      	beq.n	800f4ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f4bc:	4a08      	ldr	r2, [pc, #32]	@ (800f4e0 <tcpip_input+0x3c>)
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ffab 	bl	800f41c <tcpip_inpkt>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	e005      	b.n	800f4d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800f4ca:	4a06      	ldr	r2, [pc, #24]	@ (800f4e4 <tcpip_input+0x40>)
 800f4cc:	6839      	ldr	r1, [r7, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ffa4 	bl	800f41c <tcpip_inpkt>
 800f4d4:	4603      	mov	r3, r0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	0801a4f9 	.word	0x0801a4f9
 800f4e4:	08019381 	.word	0x08019381

0800f4e8 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f4f6:	481d      	ldr	r0, [pc, #116]	@ (800f56c <tcpip_callback_with_block+0x84>)
 800f4f8:	f00b f99b 	bl	801a832 <sys_mbox_valid>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <tcpip_callback_with_block+0x26>
 800f502:	4b1b      	ldr	r3, [pc, #108]	@ (800f570 <tcpip_callback_with_block+0x88>)
 800f504:	22ee      	movs	r2, #238	@ 0xee
 800f506:	491b      	ldr	r1, [pc, #108]	@ (800f574 <tcpip_callback_with_block+0x8c>)
 800f508:	481b      	ldr	r0, [pc, #108]	@ (800f578 <tcpip_callback_with_block+0x90>)
 800f50a:	f00b fbcb 	bl	801aca4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f50e:	2008      	movs	r0, #8
 800f510:	f000 fcb8 	bl	800fe84 <memp_malloc>
 800f514:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	e01f      	b.n	800f562 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2203      	movs	r2, #3
 800f526:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	609a      	str	r2, [r3, #8]
  if (block) {
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d004      	beq.n	800f544 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800f53a:	6979      	ldr	r1, [r7, #20]
 800f53c:	480b      	ldr	r0, [pc, #44]	@ (800f56c <tcpip_callback_with_block+0x84>)
 800f53e:	f00b f8ed 	bl	801a71c <sys_mbox_post>
 800f542:	e00d      	b.n	800f560 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f544:	6979      	ldr	r1, [r7, #20]
 800f546:	4809      	ldr	r0, [pc, #36]	@ (800f56c <tcpip_callback_with_block+0x84>)
 800f548:	f00b f8fe 	bl	801a748 <sys_mbox_trypost>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d006      	beq.n	800f560 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f552:	6979      	ldr	r1, [r7, #20]
 800f554:	2008      	movs	r0, #8
 800f556:	f000 fd0b 	bl	800ff70 <memp_free>
      return ERR_MEM;
 800f55a:	f04f 33ff 	mov.w	r3, #4294967295
 800f55e:	e000      	b.n	800f562 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	24004598 	.word	0x24004598
 800f570:	0801ccb4 	.word	0x0801ccb4
 800f574:	0801cd60 	.word	0x0801cd60
 800f578:	0801cd38 	.word	0x0801cd38

0800f57c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f588:	4806      	ldr	r0, [pc, #24]	@ (800f5a4 <tcpip_send_msg_wait_sem+0x28>)
 800f58a:	f00b fa2b 	bl	801a9e4 <sys_mutex_lock>
  fn(apimsg);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	68b8      	ldr	r0, [r7, #8]
 800f592:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f594:	4803      	ldr	r0, [pc, #12]	@ (800f5a4 <tcpip_send_msg_wait_sem+0x28>)
 800f596:	f00b fa34 	bl	801aa02 <sys_mutex_unlock>
  return ERR_OK;
 800f59a:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	2400459c 	.word	0x2400459c

0800f5a8 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800f5b2:	4808      	ldr	r0, [pc, #32]	@ (800f5d4 <tcpip_api_call+0x2c>)
 800f5b4:	f00b fa16 	bl	801a9e4 <sys_mutex_lock>
  err = fn(call);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6838      	ldr	r0, [r7, #0]
 800f5bc:	4798      	blx	r3
 800f5be:	4603      	mov	r3, r0
 800f5c0:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800f5c2:	4804      	ldr	r0, [pc, #16]	@ (800f5d4 <tcpip_api_call+0x2c>)
 800f5c4:	f00b fa1d 	bl	801aa02 <sys_mutex_unlock>
  return err;
 800f5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	2400459c 	.word	0x2400459c

0800f5d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af02      	add	r7, sp, #8
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f5e2:	f000 f86a 	bl	800f6ba <lwip_init>

  tcpip_init_done = initfunc;
 800f5e6:	4a17      	ldr	r2, [pc, #92]	@ (800f644 <tcpip_init+0x6c>)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f5ec:	4a16      	ldr	r2, [pc, #88]	@ (800f648 <tcpip_init+0x70>)
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f5f2:	2106      	movs	r1, #6
 800f5f4:	4815      	ldr	r0, [pc, #84]	@ (800f64c <tcpip_init+0x74>)
 800f5f6:	f00b f85d 	bl	801a6b4 <sys_mbox_new>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d006      	beq.n	800f60e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f600:	4b13      	ldr	r3, [pc, #76]	@ (800f650 <tcpip_init+0x78>)
 800f602:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800f606:	4913      	ldr	r1, [pc, #76]	@ (800f654 <tcpip_init+0x7c>)
 800f608:	4813      	ldr	r0, [pc, #76]	@ (800f658 <tcpip_init+0x80>)
 800f60a:	f00b fb4b 	bl	801aca4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f60e:	4813      	ldr	r0, [pc, #76]	@ (800f65c <tcpip_init+0x84>)
 800f610:	f00b f9cc 	bl	801a9ac <sys_mutex_new>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d006      	beq.n	800f628 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f61a:	4b0d      	ldr	r3, [pc, #52]	@ (800f650 <tcpip_init+0x78>)
 800f61c:	f240 12d9 	movw	r2, #473	@ 0x1d9
 800f620:	490f      	ldr	r1, [pc, #60]	@ (800f660 <tcpip_init+0x88>)
 800f622:	480d      	ldr	r0, [pc, #52]	@ (800f658 <tcpip_init+0x80>)
 800f624:	f00b fb3e 	bl	801aca4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f628:	2300      	movs	r3, #0
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f630:	2200      	movs	r2, #0
 800f632:	490c      	ldr	r1, [pc, #48]	@ (800f664 <tcpip_init+0x8c>)
 800f634:	480c      	ldr	r0, [pc, #48]	@ (800f668 <tcpip_init+0x90>)
 800f636:	f00b f9f1 	bl	801aa1c <sys_thread_new>
}
 800f63a:	bf00      	nop
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	24004590 	.word	0x24004590
 800f648:	24004594 	.word	0x24004594
 800f64c:	24004598 	.word	0x24004598
 800f650:	0801ccb4 	.word	0x0801ccb4
 800f654:	0801cd70 	.word	0x0801cd70
 800f658:	0801cd38 	.word	0x0801cd38
 800f65c:	2400459c 	.word	0x2400459c
 800f660:	0801cd94 	.word	0x0801cd94
 800f664:	0800f349 	.word	0x0800f349
 800f668:	0801cdb8 	.word	0x0801cdb8

0800f66c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	4603      	mov	r3, r0
 800f674:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800f676:	88fb      	ldrh	r3, [r7, #6]
 800f678:	ba5b      	rev16	r3, r3
 800f67a:	b29b      	uxth	r3, r3
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	061a      	lsls	r2, r3, #24
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	021b      	lsls	r3, r3, #8
 800f698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f69c:	431a      	orrs	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	0a1b      	lsrs	r3, r3, #8
 800f6a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	0e1b      	lsrs	r3, r3, #24
 800f6ac:	4313      	orrs	r3, r2
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	370c      	adds	r7, #12
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr

0800f6ba <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b082      	sub	sp, #8
 800f6be:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f6c4:	f00b f964 	bl	801a990 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f6c8:	f000 f8a6 	bl	800f818 <mem_init>
  memp_init();
 800f6cc:	f000 fb6c 	bl	800fda8 <memp_init>
  pbuf_init();
  netif_init();
 800f6d0:	f000 fc78 	bl	800ffc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f6d4:	f007 f876 	bl	80167c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f6d8:	f001 fcc6 	bl	8011068 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f6dc:	f006 ff08 	bl	80164f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f6e0:	bf00      	nop
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f6f0:	4b40      	ldr	r3, [pc, #256]	@ (800f7f4 <plug_holes+0x10c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d206      	bcs.n	800f708 <plug_holes+0x20>
 800f6fa:	4b3f      	ldr	r3, [pc, #252]	@ (800f7f8 <plug_holes+0x110>)
 800f6fc:	f240 125d 	movw	r2, #349	@ 0x15d
 800f700:	493e      	ldr	r1, [pc, #248]	@ (800f7fc <plug_holes+0x114>)
 800f702:	483f      	ldr	r0, [pc, #252]	@ (800f800 <plug_holes+0x118>)
 800f704:	f00b face 	bl	801aca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f708:	4b3e      	ldr	r3, [pc, #248]	@ (800f804 <plug_holes+0x11c>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d306      	bcc.n	800f720 <plug_holes+0x38>
 800f712:	4b39      	ldr	r3, [pc, #228]	@ (800f7f8 <plug_holes+0x110>)
 800f714:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f718:	493b      	ldr	r1, [pc, #236]	@ (800f808 <plug_holes+0x120>)
 800f71a:	4839      	ldr	r0, [pc, #228]	@ (800f800 <plug_holes+0x118>)
 800f71c:	f00b fac2 	bl	801aca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	791b      	ldrb	r3, [r3, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d006      	beq.n	800f736 <plug_holes+0x4e>
 800f728:	4b33      	ldr	r3, [pc, #204]	@ (800f7f8 <plug_holes+0x110>)
 800f72a:	f240 125f 	movw	r2, #351	@ 0x15f
 800f72e:	4937      	ldr	r1, [pc, #220]	@ (800f80c <plug_holes+0x124>)
 800f730:	4833      	ldr	r0, [pc, #204]	@ (800f800 <plug_holes+0x118>)
 800f732:	f00b fab7 	bl	801aca4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f73e:	d906      	bls.n	800f74e <plug_holes+0x66>
 800f740:	4b2d      	ldr	r3, [pc, #180]	@ (800f7f8 <plug_holes+0x110>)
 800f742:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800f746:	4932      	ldr	r1, [pc, #200]	@ (800f810 <plug_holes+0x128>)
 800f748:	482d      	ldr	r0, [pc, #180]	@ (800f800 <plug_holes+0x118>)
 800f74a:	f00b faab 	bl	801aca4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f74e:	4b29      	ldr	r3, [pc, #164]	@ (800f7f4 <plug_holes+0x10c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	8812      	ldrh	r2, [r2, #0]
 800f756:	4413      	add	r3, r2
 800f758:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d01f      	beq.n	800f7a2 <plug_holes+0xba>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	791b      	ldrb	r3, [r3, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d11b      	bne.n	800f7a2 <plug_holes+0xba>
 800f76a:	4b26      	ldr	r3, [pc, #152]	@ (800f804 <plug_holes+0x11c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	429a      	cmp	r2, r3
 800f772:	d016      	beq.n	800f7a2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f774:	4b27      	ldr	r3, [pc, #156]	@ (800f814 <plug_holes+0x12c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d102      	bne.n	800f784 <plug_holes+0x9c>
      lfree = mem;
 800f77e:	4a25      	ldr	r2, [pc, #148]	@ (800f814 <plug_holes+0x12c>)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	881a      	ldrh	r2, [r3, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f78c:	4b19      	ldr	r3, [pc, #100]	@ (800f7f4 <plug_holes+0x10c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	1ad1      	subs	r1, r2, r3
 800f794:	4b17      	ldr	r3, [pc, #92]	@ (800f7f4 <plug_holes+0x10c>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	8812      	ldrh	r2, [r2, #0]
 800f79c:	4413      	add	r3, r2
 800f79e:	b28a      	uxth	r2, r1
 800f7a0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f7a2:	4b14      	ldr	r3, [pc, #80]	@ (800f7f4 <plug_holes+0x10c>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	8852      	ldrh	r2, [r2, #2]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d01a      	beq.n	800f7ec <plug_holes+0x104>
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	791b      	ldrb	r3, [r3, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d116      	bne.n	800f7ec <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f7be:	4b15      	ldr	r3, [pc, #84]	@ (800f814 <plug_holes+0x12c>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d102      	bne.n	800f7ce <plug_holes+0xe6>
      lfree = pmem;
 800f7c8:	4a12      	ldr	r2, [pc, #72]	@ (800f814 <plug_holes+0x12c>)
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	881a      	ldrh	r2, [r3, #0]
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f7d6:	4b07      	ldr	r3, [pc, #28]	@ (800f7f4 <plug_holes+0x10c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	1ad1      	subs	r1, r2, r3
 800f7de:	4b05      	ldr	r3, [pc, #20]	@ (800f7f4 <plug_holes+0x10c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	8812      	ldrh	r2, [r2, #0]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	b28a      	uxth	r2, r1
 800f7ea:	805a      	strh	r2, [r3, #2]
  }
}
 800f7ec:	bf00      	nop
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	240045b8 	.word	0x240045b8
 800f7f8:	0801cdc8 	.word	0x0801cdc8
 800f7fc:	0801ce2c 	.word	0x0801ce2c
 800f800:	0801ce44 	.word	0x0801ce44
 800f804:	240045bc 	.word	0x240045bc
 800f808:	0801ce6c 	.word	0x0801ce6c
 800f80c:	0801ce88 	.word	0x0801ce88
 800f810:	0801cea4 	.word	0x0801cea4
 800f814:	240045c0 	.word	0x240045c0

0800f818 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f81e:	4b1c      	ldr	r3, [pc, #112]	@ (800f890 <mem_init+0x78>)
 800f820:	4a1c      	ldr	r2, [pc, #112]	@ (800f894 <mem_init+0x7c>)
 800f822:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f824:	4b1a      	ldr	r3, [pc, #104]	@ (800f890 <mem_init+0x78>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f830:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f83e:	4b14      	ldr	r3, [pc, #80]	@ (800f890 <mem_init+0x78>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800f846:	4a14      	ldr	r2, [pc, #80]	@ (800f898 <mem_init+0x80>)
 800f848:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f84a:	4b13      	ldr	r3, [pc, #76]	@ (800f898 <mem_init+0x80>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2201      	movs	r2, #1
 800f850:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f852:	4b11      	ldr	r3, [pc, #68]	@ (800f898 <mem_init+0x80>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f85a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f85c:	4b0e      	ldr	r3, [pc, #56]	@ (800f898 <mem_init+0x80>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f864:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f866:	4b0a      	ldr	r3, [pc, #40]	@ (800f890 <mem_init+0x78>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a0c      	ldr	r2, [pc, #48]	@ (800f89c <mem_init+0x84>)
 800f86c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f86e:	480c      	ldr	r0, [pc, #48]	@ (800f8a0 <mem_init+0x88>)
 800f870:	f00b f89c 	bl	801a9ac <sys_mutex_new>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d006      	beq.n	800f888 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f87a:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a4 <mem_init+0x8c>)
 800f87c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f880:	4909      	ldr	r1, [pc, #36]	@ (800f8a8 <mem_init+0x90>)
 800f882:	480a      	ldr	r0, [pc, #40]	@ (800f8ac <mem_init+0x94>)
 800f884:	f00b fa0e 	bl	801aca4 <iprintf>
  }
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	240045b8 	.word	0x240045b8
 800f894:	30044000 	.word	0x30044000
 800f898:	240045bc 	.word	0x240045bc
 800f89c:	240045c0 	.word	0x240045c0
 800f8a0:	240045c4 	.word	0x240045c4
 800f8a4:	0801cdc8 	.word	0x0801cdc8
 800f8a8:	0801ced0 	.word	0x0801ced0
 800f8ac:	0801ce44 	.word	0x0801ce44

0800f8b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d050      	beq.n	800f960 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f003 0303 	and.w	r3, r3, #3
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d006      	beq.n	800f8d6 <mem_free+0x26>
 800f8c8:	4b27      	ldr	r3, [pc, #156]	@ (800f968 <mem_free+0xb8>)
 800f8ca:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 800f8ce:	4927      	ldr	r1, [pc, #156]	@ (800f96c <mem_free+0xbc>)
 800f8d0:	4827      	ldr	r0, [pc, #156]	@ (800f970 <mem_free+0xc0>)
 800f8d2:	f00b f9e7 	bl	801aca4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f8d6:	4b27      	ldr	r3, [pc, #156]	@ (800f974 <mem_free+0xc4>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d304      	bcc.n	800f8ea <mem_free+0x3a>
 800f8e0:	4b25      	ldr	r3, [pc, #148]	@ (800f978 <mem_free+0xc8>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d306      	bcc.n	800f8f8 <mem_free+0x48>
 800f8ea:	4b1f      	ldr	r3, [pc, #124]	@ (800f968 <mem_free+0xb8>)
 800f8ec:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800f8f0:	4922      	ldr	r1, [pc, #136]	@ (800f97c <mem_free+0xcc>)
 800f8f2:	481f      	ldr	r0, [pc, #124]	@ (800f970 <mem_free+0xc0>)
 800f8f4:	f00b f9d6 	bl	801aca4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f8f8:	4b1e      	ldr	r3, [pc, #120]	@ (800f974 <mem_free+0xc4>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d304      	bcc.n	800f90c <mem_free+0x5c>
 800f902:	4b1d      	ldr	r3, [pc, #116]	@ (800f978 <mem_free+0xc8>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d306      	bcc.n	800f91a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f90c:	f00b f8ac 	bl	801aa68 <sys_arch_protect>
 800f910:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f912:	68b8      	ldr	r0, [r7, #8]
 800f914:	f00b f8b6 	bl	801aa84 <sys_arch_unprotect>
    return;
 800f918:	e023      	b.n	800f962 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f91a:	4819      	ldr	r0, [pc, #100]	@ (800f980 <mem_free+0xd0>)
 800f91c:	f00b f862 	bl	801a9e4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3b08      	subs	r3, #8
 800f924:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	791b      	ldrb	r3, [r3, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d106      	bne.n	800f93c <mem_free+0x8c>
 800f92e:	4b0e      	ldr	r3, [pc, #56]	@ (800f968 <mem_free+0xb8>)
 800f930:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800f934:	4913      	ldr	r1, [pc, #76]	@ (800f984 <mem_free+0xd4>)
 800f936:	480e      	ldr	r0, [pc, #56]	@ (800f970 <mem_free+0xc0>)
 800f938:	f00b f9b4 	bl	801aca4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2200      	movs	r2, #0
 800f940:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f942:	4b11      	ldr	r3, [pc, #68]	@ (800f988 <mem_free+0xd8>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d202      	bcs.n	800f952 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f94c:	4a0e      	ldr	r2, [pc, #56]	@ (800f988 <mem_free+0xd8>)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fec8 	bl	800f6e8 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f958:	4809      	ldr	r0, [pc, #36]	@ (800f980 <mem_free+0xd0>)
 800f95a:	f00b f852 	bl	801aa02 <sys_mutex_unlock>
 800f95e:	e000      	b.n	800f962 <mem_free+0xb2>
    return;
 800f960:	bf00      	nop
}
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	0801cdc8 	.word	0x0801cdc8
 800f96c:	0801ceec 	.word	0x0801ceec
 800f970:	0801ce44 	.word	0x0801ce44
 800f974:	240045b8 	.word	0x240045b8
 800f978:	240045bc 	.word	0x240045bc
 800f97c:	0801cf10 	.word	0x0801cf10
 800f980:	240045c4 	.word	0x240045c4
 800f984:	0801cf28 	.word	0x0801cf28
 800f988:	240045c0 	.word	0x240045c0

0800f98c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f998:	887b      	ldrh	r3, [r7, #2]
 800f99a:	3303      	adds	r3, #3
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	f023 0303 	bic.w	r3, r3, #3
 800f9a2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f9a4:	887b      	ldrh	r3, [r7, #2]
 800f9a6:	2b0b      	cmp	r3, #11
 800f9a8:	d801      	bhi.n	800f9ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f9aa:	230c      	movs	r3, #12
 800f9ac:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f9ae:	887b      	ldrh	r3, [r7, #2]
 800f9b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f9b4:	d901      	bls.n	800f9ba <mem_trim+0x2e>
    return NULL;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	e0bd      	b.n	800fb36 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f9ba:	4b61      	ldr	r3, [pc, #388]	@ (800fb40 <mem_trim+0x1b4>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d304      	bcc.n	800f9ce <mem_trim+0x42>
 800f9c4:	4b5f      	ldr	r3, [pc, #380]	@ (800fb44 <mem_trim+0x1b8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d306      	bcc.n	800f9dc <mem_trim+0x50>
 800f9ce:	4b5e      	ldr	r3, [pc, #376]	@ (800fb48 <mem_trim+0x1bc>)
 800f9d0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800f9d4:	495d      	ldr	r1, [pc, #372]	@ (800fb4c <mem_trim+0x1c0>)
 800f9d6:	485e      	ldr	r0, [pc, #376]	@ (800fb50 <mem_trim+0x1c4>)
 800f9d8:	f00b f964 	bl	801aca4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f9dc:	4b58      	ldr	r3, [pc, #352]	@ (800fb40 <mem_trim+0x1b4>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d304      	bcc.n	800f9f0 <mem_trim+0x64>
 800f9e6:	4b57      	ldr	r3, [pc, #348]	@ (800fb44 <mem_trim+0x1b8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d307      	bcc.n	800fa00 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f9f0:	f00b f83a 	bl	801aa68 <sys_arch_protect>
 800f9f4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f00b f844 	bl	801aa84 <sys_arch_unprotect>
    return rmem;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	e09a      	b.n	800fb36 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3b08      	subs	r3, #8
 800fa04:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800fa06:	4b4e      	ldr	r3, [pc, #312]	@ (800fb40 <mem_trim+0x1b4>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	69fa      	ldr	r2, [r7, #28]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	881a      	ldrh	r2, [r3, #0]
 800fa14:	8b7b      	ldrh	r3, [r7, #26]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	3b08      	subs	r3, #8
 800fa1c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fa1e:	887a      	ldrh	r2, [r7, #2]
 800fa20:	8b3b      	ldrh	r3, [r7, #24]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d906      	bls.n	800fa34 <mem_trim+0xa8>
 800fa26:	4b48      	ldr	r3, [pc, #288]	@ (800fb48 <mem_trim+0x1bc>)
 800fa28:	f240 2206 	movw	r2, #518	@ 0x206
 800fa2c:	4949      	ldr	r1, [pc, #292]	@ (800fb54 <mem_trim+0x1c8>)
 800fa2e:	4848      	ldr	r0, [pc, #288]	@ (800fb50 <mem_trim+0x1c4>)
 800fa30:	f00b f938 	bl	801aca4 <iprintf>
  if (newsize > size) {
 800fa34:	887a      	ldrh	r2, [r7, #2]
 800fa36:	8b3b      	ldrh	r3, [r7, #24]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d901      	bls.n	800fa40 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e07a      	b.n	800fb36 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800fa40:	887a      	ldrh	r2, [r7, #2]
 800fa42:	8b3b      	ldrh	r3, [r7, #24]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d101      	bne.n	800fa4c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	e074      	b.n	800fb36 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fa4c:	4842      	ldr	r0, [pc, #264]	@ (800fb58 <mem_trim+0x1cc>)
 800fa4e:	f00a ffc9 	bl	801a9e4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800fa52:	4b3b      	ldr	r3, [pc, #236]	@ (800fb40 <mem_trim+0x1b4>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69fa      	ldr	r2, [r7, #28]
 800fa58:	8812      	ldrh	r2, [r2, #0]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	791b      	ldrb	r3, [r3, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d131      	bne.n	800faca <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fa6c:	8b7a      	ldrh	r2, [r7, #26]
 800fa6e:	887b      	ldrh	r3, [r7, #2]
 800fa70:	4413      	add	r3, r2
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	3308      	adds	r3, #8
 800fa76:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800fa78:	4b38      	ldr	r3, [pc, #224]	@ (800fb5c <mem_trim+0x1d0>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d105      	bne.n	800fa8e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800fa82:	4b2f      	ldr	r3, [pc, #188]	@ (800fb40 <mem_trim+0x1b4>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	8a7b      	ldrh	r3, [r7, #18]
 800fa88:	4413      	add	r3, r2
 800fa8a:	4a34      	ldr	r2, [pc, #208]	@ (800fb5c <mem_trim+0x1d0>)
 800fa8c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800fa8e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb40 <mem_trim+0x1b4>)
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	8a7b      	ldrh	r3, [r7, #18]
 800fa94:	4413      	add	r3, r2
 800fa96:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	8a3a      	ldrh	r2, [r7, #16]
 800faa2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	8b7a      	ldrh	r2, [r7, #26]
 800faa8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	8a7a      	ldrh	r2, [r7, #18]
 800faae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fab8:	d039      	beq.n	800fb2e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800faba:	4b21      	ldr	r3, [pc, #132]	@ (800fb40 <mem_trim+0x1b4>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	8812      	ldrh	r2, [r2, #0]
 800fac2:	4413      	add	r3, r2
 800fac4:	8a7a      	ldrh	r2, [r7, #18]
 800fac6:	805a      	strh	r2, [r3, #2]
 800fac8:	e031      	b.n	800fb2e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800faca:	887b      	ldrh	r3, [r7, #2]
 800facc:	f103 0214 	add.w	r2, r3, #20
 800fad0:	8b3b      	ldrh	r3, [r7, #24]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d82b      	bhi.n	800fb2e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fad6:	8b7a      	ldrh	r2, [r7, #26]
 800fad8:	887b      	ldrh	r3, [r7, #2]
 800fada:	4413      	add	r3, r2
 800fadc:	b29b      	uxth	r3, r3
 800fade:	3308      	adds	r3, #8
 800fae0:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800fae2:	4b17      	ldr	r3, [pc, #92]	@ (800fb40 <mem_trim+0x1b4>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	8a7b      	ldrh	r3, [r7, #18]
 800fae8:	4413      	add	r3, r2
 800faea:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800faec:	4b1b      	ldr	r3, [pc, #108]	@ (800fb5c <mem_trim+0x1d0>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d202      	bcs.n	800fafc <mem_trim+0x170>
      lfree = mem2;
 800faf6:	4a19      	ldr	r2, [pc, #100]	@ (800fb5c <mem_trim+0x1d0>)
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2200      	movs	r2, #0
 800fb00:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	881a      	ldrh	r2, [r3, #0]
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	8b7a      	ldrh	r2, [r7, #26]
 800fb0e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	8a7a      	ldrh	r2, [r7, #18]
 800fb14:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb1e:	d006      	beq.n	800fb2e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fb20:	4b07      	ldr	r3, [pc, #28]	@ (800fb40 <mem_trim+0x1b4>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	8812      	ldrh	r2, [r2, #0]
 800fb28:	4413      	add	r3, r2
 800fb2a:	8a7a      	ldrh	r2, [r7, #18]
 800fb2c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fb2e:	480a      	ldr	r0, [pc, #40]	@ (800fb58 <mem_trim+0x1cc>)
 800fb30:	f00a ff67 	bl	801aa02 <sys_mutex_unlock>
  return rmem;
 800fb34:	687b      	ldr	r3, [r7, #4]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3720      	adds	r7, #32
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	240045b8 	.word	0x240045b8
 800fb44:	240045bc 	.word	0x240045bc
 800fb48:	0801cdc8 	.word	0x0801cdc8
 800fb4c:	0801cf3c 	.word	0x0801cf3c
 800fb50:	0801ce44 	.word	0x0801ce44
 800fb54:	0801cf54 	.word	0x0801cf54
 800fb58:	240045c4 	.word	0x240045c4
 800fb5c:	240045c0 	.word	0x240045c0

0800fb60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b088      	sub	sp, #32
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	4603      	mov	r3, r0
 800fb68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <mem_malloc+0x14>
    return NULL;
 800fb70:	2300      	movs	r3, #0
 800fb72:	e0d0      	b.n	800fd16 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800fb74:	88fb      	ldrh	r3, [r7, #6]
 800fb76:	3303      	adds	r3, #3
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	f023 0303 	bic.w	r3, r3, #3
 800fb7e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800fb80:	88fb      	ldrh	r3, [r7, #6]
 800fb82:	2b0b      	cmp	r3, #11
 800fb84:	d801      	bhi.n	800fb8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fb86:	230c      	movs	r3, #12
 800fb88:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb90:	d901      	bls.n	800fb96 <mem_malloc+0x36>
    return NULL;
 800fb92:	2300      	movs	r3, #0
 800fb94:	e0bf      	b.n	800fd16 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fb96:	4862      	ldr	r0, [pc, #392]	@ (800fd20 <mem_malloc+0x1c0>)
 800fb98:	f00a ff24 	bl	801a9e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fb9c:	4b61      	ldr	r3, [pc, #388]	@ (800fd24 <mem_malloc+0x1c4>)
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	4b61      	ldr	r3, [pc, #388]	@ (800fd28 <mem_malloc+0x1c8>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	83fb      	strh	r3, [r7, #30]
 800fba8:	e0aa      	b.n	800fd00 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800fbaa:	4b5f      	ldr	r3, [pc, #380]	@ (800fd28 <mem_malloc+0x1c8>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	8bfb      	ldrh	r3, [r7, #30]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	791b      	ldrb	r3, [r3, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f040 809b 	bne.w	800fcf4 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	8bfb      	ldrh	r3, [r7, #30]
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	f1a3 0208 	sub.w	r2, r3, #8
 800fbcc:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	f0c0 8090 	bcc.w	800fcf4 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	8bfb      	ldrh	r3, [r7, #30]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	f1a3 0208 	sub.w	r2, r3, #8
 800fbe2:	88fb      	ldrh	r3, [r7, #6]
 800fbe4:	3314      	adds	r3, #20
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d327      	bcc.n	800fc3a <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800fbea:	8bfa      	ldrh	r2, [r7, #30]
 800fbec:	88fb      	ldrh	r3, [r7, #6]
 800fbee:	4413      	add	r3, r2
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	3308      	adds	r3, #8
 800fbf4:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800fbf6:	4b4c      	ldr	r3, [pc, #304]	@ (800fd28 <mem_malloc+0x1c8>)
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	8a7b      	ldrh	r3, [r7, #18]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	881a      	ldrh	r2, [r3, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	8bfa      	ldrh	r2, [r7, #30]
 800fc12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	8a7a      	ldrh	r2, [r7, #18]
 800fc18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	881b      	ldrh	r3, [r3, #0]
 800fc24:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fc28:	d00a      	beq.n	800fc40 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fc2a:	4b3f      	ldr	r3, [pc, #252]	@ (800fd28 <mem_malloc+0x1c8>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	4413      	add	r3, r2
 800fc34:	8a7a      	ldrh	r2, [r7, #18]
 800fc36:	805a      	strh	r2, [r3, #2]
 800fc38:	e002      	b.n	800fc40 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fc40:	4b38      	ldr	r3, [pc, #224]	@ (800fd24 <mem_malloc+0x1c4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	697a      	ldr	r2, [r7, #20]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d127      	bne.n	800fc9a <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800fc4a:	4b36      	ldr	r3, [pc, #216]	@ (800fd24 <mem_malloc+0x1c4>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fc50:	e005      	b.n	800fc5e <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800fc52:	4b35      	ldr	r3, [pc, #212]	@ (800fd28 <mem_malloc+0x1c8>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	69ba      	ldr	r2, [r7, #24]
 800fc58:	8812      	ldrh	r2, [r2, #0]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	791b      	ldrb	r3, [r3, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d004      	beq.n	800fc70 <mem_malloc+0x110>
 800fc66:	4b31      	ldr	r3, [pc, #196]	@ (800fd2c <mem_malloc+0x1cc>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	69ba      	ldr	r2, [r7, #24]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d1f0      	bne.n	800fc52 <mem_malloc+0xf2>
          }
          lfree = cur;
 800fc70:	4a2c      	ldr	r2, [pc, #176]	@ (800fd24 <mem_malloc+0x1c4>)
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fc76:	4b2b      	ldr	r3, [pc, #172]	@ (800fd24 <mem_malloc+0x1c4>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd2c <mem_malloc+0x1cc>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d00b      	beq.n	800fc9a <mem_malloc+0x13a>
 800fc82:	4b28      	ldr	r3, [pc, #160]	@ (800fd24 <mem_malloc+0x1c4>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	791b      	ldrb	r3, [r3, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d006      	beq.n	800fc9a <mem_malloc+0x13a>
 800fc8c:	4b28      	ldr	r3, [pc, #160]	@ (800fd30 <mem_malloc+0x1d0>)
 800fc8e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800fc92:	4928      	ldr	r1, [pc, #160]	@ (800fd34 <mem_malloc+0x1d4>)
 800fc94:	4828      	ldr	r0, [pc, #160]	@ (800fd38 <mem_malloc+0x1d8>)
 800fc96:	f00b f805 	bl	801aca4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fc9a:	4821      	ldr	r0, [pc, #132]	@ (800fd20 <mem_malloc+0x1c0>)
 800fc9c:	f00a feb1 	bl	801aa02 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fca0:	88fa      	ldrh	r2, [r7, #6]
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	4413      	add	r3, r2
 800fca6:	3308      	adds	r3, #8
 800fca8:	4a20      	ldr	r2, [pc, #128]	@ (800fd2c <mem_malloc+0x1cc>)
 800fcaa:	6812      	ldr	r2, [r2, #0]
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d906      	bls.n	800fcbe <mem_malloc+0x15e>
 800fcb0:	4b1f      	ldr	r3, [pc, #124]	@ (800fd30 <mem_malloc+0x1d0>)
 800fcb2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fcb6:	4921      	ldr	r1, [pc, #132]	@ (800fd3c <mem_malloc+0x1dc>)
 800fcb8:	481f      	ldr	r0, [pc, #124]	@ (800fd38 <mem_malloc+0x1d8>)
 800fcba:	f00a fff3 	bl	801aca4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d006      	beq.n	800fcd6 <mem_malloc+0x176>
 800fcc8:	4b19      	ldr	r3, [pc, #100]	@ (800fd30 <mem_malloc+0x1d0>)
 800fcca:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fcce:	491c      	ldr	r1, [pc, #112]	@ (800fd40 <mem_malloc+0x1e0>)
 800fcd0:	4819      	ldr	r0, [pc, #100]	@ (800fd38 <mem_malloc+0x1d8>)
 800fcd2:	f00a ffe7 	bl	801aca4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f003 0303 	and.w	r3, r3, #3
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d006      	beq.n	800fcee <mem_malloc+0x18e>
 800fce0:	4b13      	ldr	r3, [pc, #76]	@ (800fd30 <mem_malloc+0x1d0>)
 800fce2:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800fce6:	4917      	ldr	r1, [pc, #92]	@ (800fd44 <mem_malloc+0x1e4>)
 800fce8:	4813      	ldr	r0, [pc, #76]	@ (800fd38 <mem_malloc+0x1d8>)
 800fcea:	f00a ffdb 	bl	801aca4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	e010      	b.n	800fd16 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd28 <mem_malloc+0x1c8>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	8bfb      	ldrh	r3, [r7, #30]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fd00:	8bfa      	ldrh	r2, [r7, #30]
 800fd02:	88fb      	ldrh	r3, [r7, #6]
 800fd04:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	f4ff af4e 	bcc.w	800fbaa <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fd0e:	4804      	ldr	r0, [pc, #16]	@ (800fd20 <mem_malloc+0x1c0>)
 800fd10:	f00a fe77 	bl	801aa02 <sys_mutex_unlock>
  return NULL;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3720      	adds	r7, #32
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	240045c4 	.word	0x240045c4
 800fd24:	240045c0 	.word	0x240045c0
 800fd28:	240045b8 	.word	0x240045b8
 800fd2c:	240045bc 	.word	0x240045bc
 800fd30:	0801cdc8 	.word	0x0801cdc8
 800fd34:	0801cf74 	.word	0x0801cf74
 800fd38:	0801ce44 	.word	0x0801ce44
 800fd3c:	0801cf90 	.word	0x0801cf90
 800fd40:	0801cfc0 	.word	0x0801cfc0
 800fd44:	0801cff0 	.word	0x0801cff0

0800fd48 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	3303      	adds	r3, #3
 800fd5e:	f023 0303 	bic.w	r3, r3, #3
 800fd62:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fd64:	2300      	movs	r3, #0
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	e011      	b.n	800fd8e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	689b      	ldr	r3, [r3, #8]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	461a      	mov	r2, r3
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	4413      	add	r3, r2
 800fd86:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	60fb      	str	r3, [r7, #12]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	885b      	ldrh	r3, [r3, #2]
 800fd92:	461a      	mov	r2, r3
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	4293      	cmp	r3, r2
 800fd98:	dbe7      	blt.n	800fd6a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fd9a:	bf00      	nop
 800fd9c:	bf00      	nop
 800fd9e:	3714      	adds	r7, #20
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fdae:	2300      	movs	r3, #0
 800fdb0:	80fb      	strh	r3, [r7, #6]
 800fdb2:	e009      	b.n	800fdc8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fdb4:	88fb      	ldrh	r3, [r7, #6]
 800fdb6:	4a08      	ldr	r2, [pc, #32]	@ (800fdd8 <memp_init+0x30>)
 800fdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7ff ffc3 	bl	800fd48 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fdc2:	88fb      	ldrh	r3, [r7, #6]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	80fb      	strh	r3, [r7, #6]
 800fdc8:	88fb      	ldrh	r3, [r7, #6]
 800fdca:	2b0c      	cmp	r3, #12
 800fdcc:	d9f2      	bls.n	800fdb4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fdce:	bf00      	nop
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	0801f36c 	.word	0x0801f36c

0800fddc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fde4:	f00a fe40 	bl	801aa68 <sys_arch_protect>
 800fde8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d015      	beq.n	800fe24 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	6812      	ldr	r2, [r2, #0]
 800fe00:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	f003 0303 	and.w	r3, r3, #3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d006      	beq.n	800fe1a <do_memp_malloc_pool+0x3e>
 800fe0c:	4b09      	ldr	r3, [pc, #36]	@ (800fe34 <do_memp_malloc_pool+0x58>)
 800fe0e:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800fe12:	4909      	ldr	r1, [pc, #36]	@ (800fe38 <do_memp_malloc_pool+0x5c>)
 800fe14:	4809      	ldr	r0, [pc, #36]	@ (800fe3c <do_memp_malloc_pool+0x60>)
 800fe16:	f00a ff45 	bl	801aca4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f00a fe32 	bl	801aa84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	e003      	b.n	800fe2c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800fe24:	68f8      	ldr	r0, [r7, #12]
 800fe26:	f00a fe2d 	bl	801aa84 <sys_arch_unprotect>
  return NULL;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	0801d014 	.word	0x0801d014
 800fe38:	0801d078 	.word	0x0801d078
 800fe3c:	0801d09c 	.word	0x0801d09c

0800fe40 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <memp_malloc_pool+0x1c>
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe78 <memp_malloc_pool+0x38>)
 800fe50:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800fe54:	4909      	ldr	r1, [pc, #36]	@ (800fe7c <memp_malloc_pool+0x3c>)
 800fe56:	480a      	ldr	r0, [pc, #40]	@ (800fe80 <memp_malloc_pool+0x40>)
 800fe58:	f00a ff24 	bl	801aca4 <iprintf>
  if (desc == NULL) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <memp_malloc_pool+0x26>
    return NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	e003      	b.n	800fe6e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7ff ffb8 	bl	800fddc <do_memp_malloc_pool>
 800fe6c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	0801d014 	.word	0x0801d014
 800fe7c:	0801d0c4 	.word	0x0801d0c4
 800fe80:	0801d09c 	.word	0x0801d09c

0800fe84 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	2b0c      	cmp	r3, #12
 800fe92:	d908      	bls.n	800fea6 <memp_malloc+0x22>
 800fe94:	4b0a      	ldr	r3, [pc, #40]	@ (800fec0 <memp_malloc+0x3c>)
 800fe96:	f240 1287 	movw	r2, #391	@ 0x187
 800fe9a:	490a      	ldr	r1, [pc, #40]	@ (800fec4 <memp_malloc+0x40>)
 800fe9c:	480a      	ldr	r0, [pc, #40]	@ (800fec8 <memp_malloc+0x44>)
 800fe9e:	f00a ff01 	bl	801aca4 <iprintf>
 800fea2:	2300      	movs	r3, #0
 800fea4:	e008      	b.n	800feb8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	4a08      	ldr	r2, [pc, #32]	@ (800fecc <memp_malloc+0x48>)
 800feaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff ff94 	bl	800fddc <do_memp_malloc_pool>
 800feb4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800feb6:	68fb      	ldr	r3, [r7, #12]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	0801d014 	.word	0x0801d014
 800fec4:	0801d0d8 	.word	0x0801d0d8
 800fec8:	0801d09c 	.word	0x0801d09c
 800fecc:	0801f36c 	.word	0x0801f36c

0800fed0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	f003 0303 	and.w	r3, r3, #3
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d006      	beq.n	800fef2 <do_memp_free_pool+0x22>
 800fee4:	4b0d      	ldr	r3, [pc, #52]	@ (800ff1c <do_memp_free_pool+0x4c>)
 800fee6:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800feea:	490d      	ldr	r1, [pc, #52]	@ (800ff20 <do_memp_free_pool+0x50>)
 800feec:	480d      	ldr	r0, [pc, #52]	@ (800ff24 <do_memp_free_pool+0x54>)
 800feee:	f00a fed9 	bl	801aca4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fef6:	f00a fdb7 	bl	801aa68 <sys_arch_protect>
 800fefa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ff0e:	68b8      	ldr	r0, [r7, #8]
 800ff10:	f00a fdb8 	bl	801aa84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ff14:	bf00      	nop
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	0801d014 	.word	0x0801d014
 800ff20:	0801d0f8 	.word	0x0801d0f8
 800ff24:	0801d09c 	.word	0x0801d09c

0800ff28 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d106      	bne.n	800ff46 <memp_free_pool+0x1e>
 800ff38:	4b0a      	ldr	r3, [pc, #40]	@ (800ff64 <memp_free_pool+0x3c>)
 800ff3a:	f44f 72e3 	mov.w	r2, #454	@ 0x1c6
 800ff3e:	490a      	ldr	r1, [pc, #40]	@ (800ff68 <memp_free_pool+0x40>)
 800ff40:	480a      	ldr	r0, [pc, #40]	@ (800ff6c <memp_free_pool+0x44>)
 800ff42:	f00a feaf 	bl	801aca4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d007      	beq.n	800ff5c <memp_free_pool+0x34>
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d004      	beq.n	800ff5c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ff52:	6839      	ldr	r1, [r7, #0]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff ffbb 	bl	800fed0 <do_memp_free_pool>
 800ff5a:	e000      	b.n	800ff5e <memp_free_pool+0x36>
    return;
 800ff5c:	bf00      	nop
}
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	0801d014 	.word	0x0801d014
 800ff68:	0801d0c4 	.word	0x0801d0c4
 800ff6c:	0801d09c 	.word	0x0801d09c

0800ff70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b0c      	cmp	r3, #12
 800ff80:	d907      	bls.n	800ff92 <memp_free+0x22>
 800ff82:	4b0c      	ldr	r3, [pc, #48]	@ (800ffb4 <memp_free+0x44>)
 800ff84:	f240 12db 	movw	r2, #475	@ 0x1db
 800ff88:	490b      	ldr	r1, [pc, #44]	@ (800ffb8 <memp_free+0x48>)
 800ff8a:	480c      	ldr	r0, [pc, #48]	@ (800ffbc <memp_free+0x4c>)
 800ff8c:	f00a fe8a 	bl	801aca4 <iprintf>
 800ff90:	e00c      	b.n	800ffac <memp_free+0x3c>

  if (mem == NULL) {
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d008      	beq.n	800ffaa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	4a09      	ldr	r2, [pc, #36]	@ (800ffc0 <memp_free+0x50>)
 800ff9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ff94 	bl	800fed0 <do_memp_free_pool>
 800ffa8:	e000      	b.n	800ffac <memp_free+0x3c>
    return;
 800ffaa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	0801d014 	.word	0x0801d014
 800ffb8:	0801d118 	.word	0x0801d118
 800ffbc:	0801d09c 	.word	0x0801d09c
 800ffc0:	0801f36c 	.word	0x0801f36c

0800ffc4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ffc8:	bf00      	nop
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
	...

0800ffd4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
 800ffe0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d105      	bne.n	800fff4 <netif_add+0x20>
 800ffe8:	4b26      	ldr	r3, [pc, #152]	@ (8010084 <netif_add+0xb0>)
 800ffea:	22fb      	movs	r2, #251	@ 0xfb
 800ffec:	4926      	ldr	r1, [pc, #152]	@ (8010088 <netif_add+0xb4>)
 800ffee:	4827      	ldr	r0, [pc, #156]	@ (801008c <netif_add+0xb8>)
 800fff0:	f00a fe58 	bl	801aca4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2200      	movs	r2, #0
 800fff8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2200      	movs	r2, #0
 800fffe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2200      	movs	r2, #0
 8010004:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3328      	adds	r3, #40	@ 0x28
 8010012:	2204      	movs	r2, #4
 8010014:	2100      	movs	r1, #0
 8010016:	4618      	mov	r0, r3
 8010018:	f00a fefd 	bl	801ae16 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2203      	movs	r2, #3
 8010020:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	69ba      	ldr	r2, [r7, #24]
 8010034:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num++;
 8010036:	4b16      	ldr	r3, [pc, #88]	@ (8010090 <netif_add+0xbc>)
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	1c5a      	adds	r2, r3, #1
 801003c:	b2d1      	uxtb	r1, r2
 801003e:	4a14      	ldr	r2, [pc, #80]	@ (8010090 <netif_add+0xbc>)
 8010040:	7011      	strb	r1, [r2, #0]
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
  netif->input = input;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6a3a      	ldr	r2, [r7, #32]
 801004c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	68b9      	ldr	r1, [r7, #8]
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f000 f81f 	bl	8010098 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	4798      	blx	r3
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <netif_add+0x96>
    return NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	e007      	b.n	801007a <netif_add+0xa6>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801006a:	4b0a      	ldr	r3, [pc, #40]	@ (8010094 <netif_add+0xc0>)
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010072:	4a08      	ldr	r2, [pc, #32]	@ (8010094 <netif_add+0xc0>)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010078:	68fb      	ldr	r3, [r7, #12]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	0801d134 	.word	0x0801d134
 8010088:	0801d19c 	.word	0x0801d19c
 801008c:	0801d1b4 	.word	0x0801d1b4
 8010090:	240076b8 	.word	0x240076b8
 8010094:	240076b0 	.word	0x240076b0

08010098 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d003      	beq.n	80100b4 <netif_set_addr+0x1c>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10c      	bne.n	80100ce <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80100b4:	68b9      	ldr	r1, [r7, #8]
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f000 f81a 	bl	80100f0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 f86a 	bl	8010198 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80100c4:	6839      	ldr	r1, [r7, #0]
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f000 f852 	bl	8010170 <netif_set_gw>
 80100cc:	e00c      	b.n	80100e8 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 80100ce:	6879      	ldr	r1, [r7, #4]
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f000 f861 	bl	8010198 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f000 f849 	bl	8010170 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 80100de:	68b9      	ldr	r1, [r7, #8]
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f000 f805 	bl	80100f0 <netif_set_ipaddr>
  }
}
 80100e6:	bf00      	nop
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d003      	beq.n	8010108 <netif_set_ipaddr+0x18>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	60fb      	str	r3, [r7, #12]
 8010106:	e002      	b.n	801010e <netif_set_ipaddr+0x1e>
 8010108:	4b18      	ldr	r3, [pc, #96]	@ (801016c <netif_set_ipaddr+0x7c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3304      	adds	r3, #4
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	d024      	beq.n	8010164 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3304      	adds	r3, #4
 801011e:	f107 020c 	add.w	r2, r7, #12
 8010122:	4611      	mov	r1, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f002 fbc1 	bl	80128ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	3304      	adds	r3, #4
 801012e:	f107 020c 	add.w	r2, r7, #12
 8010132:	4611      	mov	r1, r2
 8010134:	4618      	mov	r0, r3
 8010136:	f006 fe57 	bl	8016de8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <netif_set_ipaddr+0x56>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	e000      	b.n	8010148 <netif_set_ipaddr+0x58>
 8010146:	2300      	movs	r3, #0
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801014c:	2101      	movs	r1, #1
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f871 	bl	8010236 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d003      	beq.n	8010164 <netif_set_ipaddr+0x74>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	69db      	ldr	r3, [r3, #28]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8010164:	bf00      	nop
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	0801f3f0 	.word	0x0801f3f0

08010170 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d002      	beq.n	8010186 <netif_set_gw+0x16>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	e000      	b.n	8010188 <netif_set_gw+0x18>
 8010186:	2300      	movs	r3, #0
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <netif_set_netmask+0x16>
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	e000      	b.n	80101b0 <netif_set_netmask+0x18>
 80101ae:	2300      	movs	r3, #0
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80101c8:	4a04      	ldr	r2, [pc, #16]	@ (80101dc <netif_set_default+0x1c>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	240076b4 	.word	0x240076b4

080101e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d11b      	bne.n	801022e <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80101fc:	f043 0301 	orr.w	r3, r3, #1
 8010200:	b2da      	uxtb	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d003      	beq.n	8010218 <netif_set_up+0x38>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801021e:	f003 0304 	and.w	r3, r3, #4
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8010226:	2103      	movs	r1, #3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f804 	bl	8010236 <netif_issue_reports>
    }
  }
}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	460b      	mov	r3, r1
 8010240:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010242:	78fb      	ldrb	r3, [r7, #3]
 8010244:	f003 0301 	and.w	r3, r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	d011      	beq.n	8010270 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	3304      	adds	r3, #4
 8010250:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00c      	beq.n	8010270 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801025c:	f003 0308 	and.w	r3, r3, #8
 8010260:	2b00      	cmp	r3, #0
 8010262:	d005      	beq.n	8010270 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3304      	adds	r3, #4
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f008 fe7e 	bl	8018f6c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8010286:	f003 0301 	and.w	r3, r3, #1
 801028a:	2b00      	cmp	r3, #0
 801028c:	d01a      	beq.n	80102c4 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8010294:	f023 0301 	bic.w	r3, r3, #1
 8010298:	b2da      	uxtb	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80102a6:	f003 0308 	and.w	r3, r3, #8
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d002      	beq.n	80102b4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f008 fa1e 	bl	80186f0 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	69db      	ldr	r3, [r3, #28]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <netif_set_down+0x4c>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	69db      	ldr	r3, [r3, #28]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	4798      	blx	r3
  }
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  if (netif) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d002      	beq.n	80102e2 <netif_set_status_callback+0x16>
    netif->status_callback = status_callback;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	683a      	ldr	r2, [r7, #0]
 80102e0:	61da      	str	r2, [r3, #28]
  }
}
 80102e2:	bf00      	nop
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b082      	sub	sp, #8
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80102fc:	f003 0304 	and.w	r3, r3, #4
 8010300:	2b00      	cmp	r3, #0
 8010302:	d11e      	bne.n	8010342 <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801030a:	f043 0304 	orr.w	r3, r3, #4
 801030e:	b2da      	uxtb	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f006 ffa1 	bl	801725e <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	2b00      	cmp	r3, #0
 8010328:	d003      	beq.n	8010332 <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801032a:	2103      	movs	r1, #3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff ff82 	bl	8010236 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d003      	beq.n	8010342 <netif_set_link_up+0x54>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	4798      	blx	r3
  }
}
 8010342:	bf00      	nop
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8010358:	f003 0304 	and.w	r3, r3, #4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d010      	beq.n	8010382 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8010366:	f023 0304 	bic.w	r3, r3, #4
 801036a:	b2da      	uxtb	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    NETIF_LINK_CALLBACK(netif);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d003      	beq.n	8010382 <netif_set_link_down+0x38>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	4798      	blx	r3
  }
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801038a:	b480      	push	{r7}
 801038c:	b083      	sub	sp, #12
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
 8010392:	6039      	str	r1, [r7, #0]
  if (netif) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	683a      	ldr	r2, [r7, #0]
 801039e:	621a      	str	r2, [r3, #32]
  }
}
 80103a0:	bf00      	nop
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80103b2:	f00a fb59 	bl	801aa68 <sys_arch_protect>
 80103b6:	6038      	str	r0, [r7, #0]
 80103b8:	4b0f      	ldr	r3, [pc, #60]	@ (80103f8 <pbuf_free_ooseq+0x4c>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	701a      	strb	r2, [r3, #0]
 80103be:	6838      	ldr	r0, [r7, #0]
 80103c0:	f00a fb60 	bl	801aa84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80103c4:	4b0d      	ldr	r3, [pc, #52]	@ (80103fc <pbuf_free_ooseq+0x50>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	607b      	str	r3, [r7, #4]
 80103ca:	e00f      	b.n	80103ec <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d008      	beq.n	80103e6 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d8:	4618      	mov	r0, r3
 80103da:	f001 fee2 	bl	80121a2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 80103e4:	e005      	b.n	80103f2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	607b      	str	r3, [r7, #4]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1ec      	bne.n	80103cc <pbuf_free_ooseq+0x20>
    }
  }
}
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	240076b9 	.word	0x240076b9
 80103fc:	240076c8 	.word	0x240076c8

08010400 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010408:	f7ff ffd0 	bl	80103ac <pbuf_free_ooseq>
}
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801041a:	f00a fb25 	bl	801aa68 <sys_arch_protect>
 801041e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010420:	4b10      	ldr	r3, [pc, #64]	@ (8010464 <pbuf_pool_is_empty+0x50>)
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010426:	4b0f      	ldr	r3, [pc, #60]	@ (8010464 <pbuf_pool_is_empty+0x50>)
 8010428:	2201      	movs	r2, #1
 801042a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f00a fb29 	bl	801aa84 <sys_arch_unprotect>

  if (!queued) {
 8010432:	78fb      	ldrb	r3, [r7, #3]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d110      	bne.n	801045a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010438:	2200      	movs	r2, #0
 801043a:	2100      	movs	r1, #0
 801043c:	480a      	ldr	r0, [pc, #40]	@ (8010468 <pbuf_pool_is_empty+0x54>)
 801043e:	f7ff f853 	bl	800f4e8 <tcpip_callback_with_block>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d008      	beq.n	801045a <pbuf_pool_is_empty+0x46>
 8010448:	f00a fb0e 	bl	801aa68 <sys_arch_protect>
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	4b05      	ldr	r3, [pc, #20]	@ (8010464 <pbuf_pool_is_empty+0x50>)
 8010450:	2200      	movs	r2, #0
 8010452:	701a      	strb	r2, [r3, #0]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f00a fb15 	bl	801aa84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801045a:	bf00      	nop
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	240076b9 	.word	0x240076b9
 8010468:	08010401 	.word	0x08010401

0801046c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b088      	sub	sp, #32
 8010470:	af00      	add	r7, sp, #0
 8010472:	4603      	mov	r3, r0
 8010474:	71fb      	strb	r3, [r7, #7]
 8010476:	460b      	mov	r3, r1
 8010478:	80bb      	strh	r3, [r7, #4]
 801047a:	4613      	mov	r3, r2
 801047c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801047e:	79fb      	ldrb	r3, [r7, #7]
 8010480:	2b04      	cmp	r3, #4
 8010482:	d81c      	bhi.n	80104be <pbuf_alloc+0x52>
 8010484:	a201      	add	r2, pc, #4	@ (adr r2, 801048c <pbuf_alloc+0x20>)
 8010486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048a:	bf00      	nop
 801048c:	080104a1 	.word	0x080104a1
 8010490:	080104a7 	.word	0x080104a7
 8010494:	080104ad 	.word	0x080104ad
 8010498:	080104b3 	.word	0x080104b3
 801049c:	080104b9 	.word	0x080104b9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80104a0:	2336      	movs	r3, #54	@ 0x36
 80104a2:	82fb      	strh	r3, [r7, #22]
    break;
 80104a4:	e014      	b.n	80104d0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80104a6:	2322      	movs	r3, #34	@ 0x22
 80104a8:	82fb      	strh	r3, [r7, #22]
    break;
 80104aa:	e011      	b.n	80104d0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80104ac:	230e      	movs	r3, #14
 80104ae:	82fb      	strh	r3, [r7, #22]
    break;
 80104b0:	e00e      	b.n	80104d0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80104b2:	2300      	movs	r3, #0
 80104b4:	82fb      	strh	r3, [r7, #22]
    break;
 80104b6:	e00b      	b.n	80104d0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80104b8:	2300      	movs	r3, #0
 80104ba:	82fb      	strh	r3, [r7, #22]
    break;
 80104bc:	e008      	b.n	80104d0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80104be:	4ba1      	ldr	r3, [pc, #644]	@ (8010744 <pbuf_alloc+0x2d8>)
 80104c0:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80104c4:	49a0      	ldr	r1, [pc, #640]	@ (8010748 <pbuf_alloc+0x2dc>)
 80104c6:	48a1      	ldr	r0, [pc, #644]	@ (801074c <pbuf_alloc+0x2e0>)
 80104c8:	f00a fbec 	bl	801aca4 <iprintf>
    return NULL;
 80104cc:	2300      	movs	r3, #0
 80104ce:	e15c      	b.n	801078a <pbuf_alloc+0x31e>
  }

  switch (type) {
 80104d0:	79bb      	ldrb	r3, [r7, #6]
 80104d2:	2b03      	cmp	r3, #3
 80104d4:	d00d      	beq.n	80104f2 <pbuf_alloc+0x86>
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	f300 8146 	bgt.w	8010768 <pbuf_alloc+0x2fc>
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 80d0 	beq.w	8010682 <pbuf_alloc+0x216>
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f2c0 8140 	blt.w	8010768 <pbuf_alloc+0x2fc>
 80104e8:	3b01      	subs	r3, #1
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	f200 813c 	bhi.w	8010768 <pbuf_alloc+0x2fc>
 80104f0:	e10d      	b.n	801070e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80104f2:	200c      	movs	r0, #12
 80104f4:	f7ff fcc6 	bl	800fe84 <memp_malloc>
 80104f8:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d103      	bne.n	8010508 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8010500:	f7ff ff88 	bl	8010414 <pbuf_pool_is_empty>
      return NULL;
 8010504:	2300      	movs	r3, #0
 8010506:	e140      	b.n	801078a <pbuf_alloc+0x31e>
    }
    p->type = type;
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	79ba      	ldrb	r2, [r7, #6]
 801050c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	2200      	movs	r2, #0
 8010512:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8010514:	8afb      	ldrh	r3, [r7, #22]
 8010516:	3310      	adds	r3, #16
 8010518:	69fa      	ldr	r2, [r7, #28]
 801051a:	4413      	add	r3, r2
 801051c:	3303      	adds	r3, #3
 801051e:	f023 0303 	bic.w	r3, r3, #3
 8010522:	461a      	mov	r2, r3
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	f003 0303 	and.w	r3, r3, #3
 8010530:	2b00      	cmp	r3, #0
 8010532:	d006      	beq.n	8010542 <pbuf_alloc+0xd6>
 8010534:	4b83      	ldr	r3, [pc, #524]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010536:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801053a:	4985      	ldr	r1, [pc, #532]	@ (8010750 <pbuf_alloc+0x2e4>)
 801053c:	4883      	ldr	r0, [pc, #524]	@ (801074c <pbuf_alloc+0x2e0>)
 801053e:	f00a fbb1 	bl	801aca4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	88ba      	ldrh	r2, [r7, #4]
 8010546:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8010548:	8afb      	ldrh	r3, [r7, #22]
 801054a:	3303      	adds	r3, #3
 801054c:	f023 0303 	bic.w	r3, r3, #3
 8010550:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8010554:	88bb      	ldrh	r3, [r7, #4]
 8010556:	4293      	cmp	r3, r2
 8010558:	bf28      	it	cs
 801055a:	4613      	movcs	r3, r2
 801055c:	b29a      	uxth	r2, r3
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	69fa      	ldr	r2, [r7, #28]
 8010568:	8952      	ldrh	r2, [r2, #10]
 801056a:	441a      	add	r2, r3
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010572:	429a      	cmp	r2, r3
 8010574:	d906      	bls.n	8010584 <pbuf_alloc+0x118>
 8010576:	4b73      	ldr	r3, [pc, #460]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010578:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801057c:	4975      	ldr	r1, [pc, #468]	@ (8010754 <pbuf_alloc+0x2e8>)
 801057e:	4873      	ldr	r0, [pc, #460]	@ (801074c <pbuf_alloc+0x2e0>)
 8010580:	f00a fb90 	bl	801aca4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010584:	8afb      	ldrh	r3, [r7, #22]
 8010586:	3303      	adds	r3, #3
 8010588:	f023 0303 	bic.w	r3, r3, #3
 801058c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010590:	d106      	bne.n	80105a0 <pbuf_alloc+0x134>
 8010592:	4b6c      	ldr	r3, [pc, #432]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010594:	f240 1231 	movw	r2, #305	@ 0x131
 8010598:	496f      	ldr	r1, [pc, #444]	@ (8010758 <pbuf_alloc+0x2ec>)
 801059a:	486c      	ldr	r0, [pc, #432]	@ (801074c <pbuf_alloc+0x2e0>)
 801059c:	f00a fb82 	bl	801aca4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	2201      	movs	r2, #1
 80105a4:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80105aa:	88bb      	ldrh	r3, [r7, #4]
 80105ac:	69fa      	ldr	r2, [r7, #28]
 80105ae:	8952      	ldrh	r2, [r2, #10]
 80105b0:	1a9b      	subs	r3, r3, r2
 80105b2:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80105b4:	e061      	b.n	801067a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80105b6:	200c      	movs	r0, #12
 80105b8:	f7ff fc64 	bl	800fe84 <memp_malloc>
 80105bc:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80105c4:	f7ff ff26 	bl	8010414 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80105c8:	69f8      	ldr	r0, [r7, #28]
 80105ca:	f000 fac7 	bl	8010b5c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80105ce:	2300      	movs	r3, #0
 80105d0:	e0db      	b.n	801078a <pbuf_alloc+0x31e>
      }
      q->type = type;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	79ba      	ldrb	r2, [r7, #6]
 80105d6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2200      	movs	r2, #0
 80105dc:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2200      	movs	r2, #0
 80105e2:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80105f0:	4293      	cmp	r3, r2
 80105f2:	dd06      	ble.n	8010602 <pbuf_alloc+0x196>
 80105f4:	4b53      	ldr	r3, [pc, #332]	@ (8010744 <pbuf_alloc+0x2d8>)
 80105f6:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 80105fa:	4958      	ldr	r1, [pc, #352]	@ (801075c <pbuf_alloc+0x2f0>)
 80105fc:	4853      	ldr	r0, [pc, #332]	@ (801074c <pbuf_alloc+0x2e0>)
 80105fe:	f00a fb51 	bl	801aca4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	b29a      	uxth	r2, r3
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	b29b      	uxth	r3, r3
 801060e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010612:	bf28      	it	cs
 8010614:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8010618:	b29a      	uxth	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f103 0210 	add.w	r2, r3, #16
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	f003 0303 	and.w	r3, r3, #3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <pbuf_alloc+0x1d6>
 8010634:	4b43      	ldr	r3, [pc, #268]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010636:	f240 1251 	movw	r2, #337	@ 0x151
 801063a:	4949      	ldr	r1, [pc, #292]	@ (8010760 <pbuf_alloc+0x2f4>)
 801063c:	4843      	ldr	r0, [pc, #268]	@ (801074c <pbuf_alloc+0x2e0>)
 801063e:	f00a fb31 	bl	801aca4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	69fa      	ldr	r2, [r7, #28]
 8010648:	8952      	ldrh	r2, [r2, #10]
 801064a:	441a      	add	r2, r3
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010652:	429a      	cmp	r2, r3
 8010654:	d906      	bls.n	8010664 <pbuf_alloc+0x1f8>
 8010656:	4b3b      	ldr	r3, [pc, #236]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010658:	f240 1253 	movw	r2, #339	@ 0x153
 801065c:	493d      	ldr	r1, [pc, #244]	@ (8010754 <pbuf_alloc+0x2e8>)
 801065e:	483b      	ldr	r0, [pc, #236]	@ (801074c <pbuf_alloc+0x2e0>)
 8010660:	f00a fb20 	bl	801aca4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2201      	movs	r2, #1
 8010668:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	895b      	ldrh	r3, [r3, #10]
 801066e:	461a      	mov	r2, r3
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	1a9b      	subs	r3, r3, r2
 8010674:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	dc9a      	bgt.n	80105b6 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8010680:	e07c      	b.n	801077c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8010682:	8afb      	ldrh	r3, [r7, #22]
 8010684:	3313      	adds	r3, #19
 8010686:	b29b      	uxth	r3, r3
 8010688:	f023 0303 	bic.w	r3, r3, #3
 801068c:	b29a      	uxth	r2, r3
 801068e:	88bb      	ldrh	r3, [r7, #4]
 8010690:	3303      	adds	r3, #3
 8010692:	b29b      	uxth	r3, r3
 8010694:	f023 0303 	bic.w	r3, r3, #3
 8010698:	b29b      	uxth	r3, r3
 801069a:	4413      	add	r3, r2
 801069c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801069e:	897a      	ldrh	r2, [r7, #10]
 80106a0:	88bb      	ldrh	r3, [r7, #4]
 80106a2:	3303      	adds	r3, #3
 80106a4:	f023 0303 	bic.w	r3, r3, #3
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d201      	bcs.n	80106b0 <pbuf_alloc+0x244>
        return NULL;
 80106ac:	2300      	movs	r3, #0
 80106ae:	e06c      	b.n	801078a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80106b0:	897b      	ldrh	r3, [r7, #10]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fa54 	bl	800fb60 <mem_malloc>
 80106b8:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d101      	bne.n	80106c4 <pbuf_alloc+0x258>
      return NULL;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e062      	b.n	801078a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80106c4:	8afb      	ldrh	r3, [r7, #22]
 80106c6:	3310      	adds	r3, #16
 80106c8:	69fa      	ldr	r2, [r7, #28]
 80106ca:	4413      	add	r3, r2
 80106cc:	3303      	adds	r3, #3
 80106ce:	f023 0303 	bic.w	r3, r3, #3
 80106d2:	461a      	mov	r2, r3
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	88ba      	ldrh	r2, [r7, #4]
 80106dc:	811a      	strh	r2, [r3, #8]
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	891a      	ldrh	r2, [r3, #8]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]
    p->type = type;
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	79ba      	ldrb	r2, [r7, #6]
 80106f0:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	f003 0303 	and.w	r3, r3, #3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d03d      	beq.n	801077a <pbuf_alloc+0x30e>
 80106fe:	4b11      	ldr	r3, [pc, #68]	@ (8010744 <pbuf_alloc+0x2d8>)
 8010700:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8010704:	4917      	ldr	r1, [pc, #92]	@ (8010764 <pbuf_alloc+0x2f8>)
 8010706:	4811      	ldr	r0, [pc, #68]	@ (801074c <pbuf_alloc+0x2e0>)
 8010708:	f00a facc 	bl	801aca4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 801070c:	e035      	b.n	801077a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801070e:	200b      	movs	r0, #11
 8010710:	f7ff fbb8 	bl	800fe84 <memp_malloc>
 8010714:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 801071c:	2300      	movs	r3, #0
 801071e:	e034      	b.n	801078a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	2200      	movs	r2, #0
 8010724:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	88ba      	ldrh	r2, [r7, #4]
 801072a:	811a      	strh	r2, [r3, #8]
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	891a      	ldrh	r2, [r3, #8]
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8010734:	69fb      	ldr	r3, [r7, #28]
 8010736:	2200      	movs	r2, #0
 8010738:	601a      	str	r2, [r3, #0]
    p->type = type;
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	79ba      	ldrb	r2, [r7, #6]
 801073e:	731a      	strb	r2, [r3, #12]
    break;
 8010740:	e01c      	b.n	801077c <pbuf_alloc+0x310>
 8010742:	bf00      	nop
 8010744:	0801d1dc 	.word	0x0801d1dc
 8010748:	0801d240 	.word	0x0801d240
 801074c:	0801d25c 	.word	0x0801d25c
 8010750:	0801d284 	.word	0x0801d284
 8010754:	0801d2b4 	.word	0x0801d2b4
 8010758:	0801d2e8 	.word	0x0801d2e8
 801075c:	0801d31c 	.word	0x0801d31c
 8010760:	0801d330 	.word	0x0801d330
 8010764:	0801d360 	.word	0x0801d360
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010768:	4b0a      	ldr	r3, [pc, #40]	@ (8010794 <pbuf_alloc+0x328>)
 801076a:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 801076e:	490a      	ldr	r1, [pc, #40]	@ (8010798 <pbuf_alloc+0x32c>)
 8010770:	480a      	ldr	r0, [pc, #40]	@ (801079c <pbuf_alloc+0x330>)
 8010772:	f00a fa97 	bl	801aca4 <iprintf>
    return NULL;
 8010776:	2300      	movs	r3, #0
 8010778:	e007      	b.n	801078a <pbuf_alloc+0x31e>
    break;
 801077a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2201      	movs	r2, #1
 8010780:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	2200      	movs	r2, #0
 8010786:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010788:	69fb      	ldr	r3, [r7, #28]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3720      	adds	r7, #32
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	0801d1dc 	.word	0x0801d1dc
 8010798:	0801d38c 	.word	0x0801d38c
 801079c:	0801d25c 	.word	0x0801d25c

080107a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	603b      	str	r3, [r7, #0]
 80107a8:	4603      	mov	r3, r0
 80107aa:	71fb      	strb	r3, [r7, #7]
 80107ac:	460b      	mov	r3, r1
 80107ae:	80bb      	strh	r3, [r7, #4]
 80107b0:	4613      	mov	r3, r2
 80107b2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80107b4:	79fb      	ldrb	r3, [r7, #7]
 80107b6:	2b04      	cmp	r3, #4
 80107b8:	d81b      	bhi.n	80107f2 <pbuf_alloced_custom+0x52>
 80107ba:	a201      	add	r2, pc, #4	@ (adr r2, 80107c0 <pbuf_alloced_custom+0x20>)
 80107bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c0:	080107d5 	.word	0x080107d5
 80107c4:	080107db 	.word	0x080107db
 80107c8:	080107e1 	.word	0x080107e1
 80107cc:	080107e7 	.word	0x080107e7
 80107d0:	080107ed 	.word	0x080107ed
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80107d4:	2336      	movs	r3, #54	@ 0x36
 80107d6:	81fb      	strh	r3, [r7, #14]
    break;
 80107d8:	e014      	b.n	8010804 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80107da:	2322      	movs	r3, #34	@ 0x22
 80107dc:	81fb      	strh	r3, [r7, #14]
    break;
 80107de:	e011      	b.n	8010804 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80107e0:	230e      	movs	r3, #14
 80107e2:	81fb      	strh	r3, [r7, #14]
    break;
 80107e4:	e00e      	b.n	8010804 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80107e6:	2300      	movs	r3, #0
 80107e8:	81fb      	strh	r3, [r7, #14]
    break;
 80107ea:	e00b      	b.n	8010804 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80107ec:	2300      	movs	r3, #0
 80107ee:	81fb      	strh	r3, [r7, #14]
    break;
 80107f0:	e008      	b.n	8010804 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80107f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010868 <pbuf_alloced_custom+0xc8>)
 80107f4:	f240 12c5 	movw	r2, #453	@ 0x1c5
 80107f8:	491c      	ldr	r1, [pc, #112]	@ (801086c <pbuf_alloced_custom+0xcc>)
 80107fa:	481d      	ldr	r0, [pc, #116]	@ (8010870 <pbuf_alloced_custom+0xd0>)
 80107fc:	f00a fa52 	bl	801aca4 <iprintf>
    return NULL;
 8010800:	2300      	movs	r3, #0
 8010802:	e02d      	b.n	8010860 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010804:	89fb      	ldrh	r3, [r7, #14]
 8010806:	3303      	adds	r3, #3
 8010808:	f023 0203 	bic.w	r2, r3, #3
 801080c:	88bb      	ldrh	r3, [r7, #4]
 801080e:	441a      	add	r2, r3
 8010810:	8bbb      	ldrh	r3, [r7, #28]
 8010812:	429a      	cmp	r2, r3
 8010814:	d901      	bls.n	801081a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010816:	2300      	movs	r3, #0
 8010818:	e022      	b.n	8010860 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2200      	movs	r2, #0
 801081e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d008      	beq.n	8010838 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010826:	89fb      	ldrh	r3, [r7, #14]
 8010828:	3303      	adds	r3, #3
 801082a:	f023 0303 	bic.w	r3, r3, #3
 801082e:	69ba      	ldr	r2, [r7, #24]
 8010830:	441a      	add	r2, r3
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	605a      	str	r2, [r3, #4]
 8010836:	e002      	b.n	801083e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	2200      	movs	r2, #0
 801083c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2202      	movs	r2, #2
 8010842:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	88ba      	ldrh	r2, [r7, #4]
 8010848:	811a      	strh	r2, [r3, #8]
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	891a      	ldrh	r2, [r3, #8]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	79ba      	ldrb	r2, [r7, #6]
 8010856:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	2201      	movs	r2, #1
 801085c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801085e:	683b      	ldr	r3, [r7, #0]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	0801d1dc 	.word	0x0801d1dc
 801086c:	0801d3a8 	.word	0x0801d3a8
 8010870:	0801d25c 	.word	0x0801d25c

08010874 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d106      	bne.n	8010894 <pbuf_realloc+0x20>
 8010886:	4b4b      	ldr	r3, [pc, #300]	@ (80109b4 <pbuf_realloc+0x140>)
 8010888:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801088c:	494a      	ldr	r1, [pc, #296]	@ (80109b8 <pbuf_realloc+0x144>)
 801088e:	484b      	ldr	r0, [pc, #300]	@ (80109bc <pbuf_realloc+0x148>)
 8010890:	f00a fa08 	bl	801aca4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	7b1b      	ldrb	r3, [r3, #12]
 8010898:	2b03      	cmp	r3, #3
 801089a:	d012      	beq.n	80108c2 <pbuf_realloc+0x4e>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	7b1b      	ldrb	r3, [r3, #12]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d00e      	beq.n	80108c2 <pbuf_realloc+0x4e>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	7b1b      	ldrb	r3, [r3, #12]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00a      	beq.n	80108c2 <pbuf_realloc+0x4e>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	7b1b      	ldrb	r3, [r3, #12]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d006      	beq.n	80108c2 <pbuf_realloc+0x4e>
 80108b4:	4b3f      	ldr	r3, [pc, #252]	@ (80109b4 <pbuf_realloc+0x140>)
 80108b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80108ba:	4941      	ldr	r1, [pc, #260]	@ (80109c0 <pbuf_realloc+0x14c>)
 80108bc:	483f      	ldr	r0, [pc, #252]	@ (80109bc <pbuf_realloc+0x148>)
 80108be:	f00a f9f1 	bl	801aca4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	891b      	ldrh	r3, [r3, #8]
 80108c6:	887a      	ldrh	r2, [r7, #2]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d26e      	bcs.n	80109aa <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80108cc:	887b      	ldrh	r3, [r7, #2]
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	8912      	ldrh	r2, [r2, #8]
 80108d2:	1a9b      	subs	r3, r3, r2
 80108d4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80108d6:	887b      	ldrh	r3, [r7, #2]
 80108d8:	827b      	strh	r3, [r7, #18]
  q = p;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80108de:	e025      	b.n	801092c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	895b      	ldrh	r3, [r3, #10]
 80108e4:	8a7a      	ldrh	r2, [r7, #18]
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80108f0:	4293      	cmp	r3, r2
 80108f2:	dd06      	ble.n	8010902 <pbuf_realloc+0x8e>
 80108f4:	4b2f      	ldr	r3, [pc, #188]	@ (80109b4 <pbuf_realloc+0x140>)
 80108f6:	f240 220b 	movw	r2, #523	@ 0x20b
 80108fa:	4932      	ldr	r1, [pc, #200]	@ (80109c4 <pbuf_realloc+0x150>)
 80108fc:	482f      	ldr	r0, [pc, #188]	@ (80109bc <pbuf_realloc+0x148>)
 80108fe:	f00a f9d1 	bl	801aca4 <iprintf>
    q->tot_len += (u16_t)grow;
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	891a      	ldrh	r2, [r3, #8]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	b29b      	uxth	r3, r3
 801090a:	4413      	add	r3, r2
 801090c:	b29a      	uxth	r2, r3
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <pbuf_realloc+0xb8>
 801091e:	4b25      	ldr	r3, [pc, #148]	@ (80109b4 <pbuf_realloc+0x140>)
 8010920:	f240 220f 	movw	r2, #527	@ 0x20f
 8010924:	4928      	ldr	r1, [pc, #160]	@ (80109c8 <pbuf_realloc+0x154>)
 8010926:	4825      	ldr	r0, [pc, #148]	@ (80109bc <pbuf_realloc+0x148>)
 8010928:	f00a f9bc 	bl	801aca4 <iprintf>
  while (rem_len > q->len) {
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	895b      	ldrh	r3, [r3, #10]
 8010930:	8a7a      	ldrh	r2, [r7, #18]
 8010932:	429a      	cmp	r2, r3
 8010934:	d8d4      	bhi.n	80108e0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	7b1b      	ldrb	r3, [r3, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d121      	bne.n	8010982 <pbuf_realloc+0x10e>
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	895b      	ldrh	r3, [r3, #10]
 8010942:	8a7a      	ldrh	r2, [r7, #18]
 8010944:	429a      	cmp	r2, r3
 8010946:	d01c      	beq.n	8010982 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	7b5b      	ldrb	r3, [r3, #13]
 801094c:	f003 0302 	and.w	r3, r3, #2
 8010950:	2b00      	cmp	r3, #0
 8010952:	d116      	bne.n	8010982 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	685a      	ldr	r2, [r3, #4]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	b29a      	uxth	r2, r3
 801095e:	8a7b      	ldrh	r3, [r7, #18]
 8010960:	4413      	add	r3, r2
 8010962:	b29b      	uxth	r3, r3
 8010964:	4619      	mov	r1, r3
 8010966:	6978      	ldr	r0, [r7, #20]
 8010968:	f7ff f810 	bl	800f98c <mem_trim>
 801096c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <pbuf_realloc+0x10e>
 8010974:	4b0f      	ldr	r3, [pc, #60]	@ (80109b4 <pbuf_realloc+0x140>)
 8010976:	f240 221d 	movw	r2, #541	@ 0x21d
 801097a:	4914      	ldr	r1, [pc, #80]	@ (80109cc <pbuf_realloc+0x158>)
 801097c:	480f      	ldr	r0, [pc, #60]	@ (80109bc <pbuf_realloc+0x148>)
 801097e:	f00a f991 	bl	801aca4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	8a7a      	ldrh	r2, [r7, #18]
 8010986:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	895a      	ldrh	r2, [r3, #10]
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d004      	beq.n	80109a2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4618      	mov	r0, r3
 801099e:	f000 f8dd 	bl	8010b5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2200      	movs	r2, #0
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	e000      	b.n	80109ac <pbuf_realloc+0x138>
    return;
 80109aa:	bf00      	nop

}
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	0801d1dc 	.word	0x0801d1dc
 80109b8:	0801d3cc 	.word	0x0801d3cc
 80109bc:	0801d25c 	.word	0x0801d25c
 80109c0:	0801d3e4 	.word	0x0801d3e4
 80109c4:	0801d400 	.word	0x0801d400
 80109c8:	0801d414 	.word	0x0801d414
 80109cc:	0801d42c 	.word	0x0801d42c

080109d0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	807b      	strh	r3, [r7, #2]
 80109dc:	4613      	mov	r3, r2
 80109de:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <pbuf_header_impl+0x24>
 80109e6:	4b46      	ldr	r3, [pc, #280]	@ (8010b00 <pbuf_header_impl+0x130>)
 80109e8:	f240 223f 	movw	r2, #575	@ 0x23f
 80109ec:	4945      	ldr	r1, [pc, #276]	@ (8010b04 <pbuf_header_impl+0x134>)
 80109ee:	4846      	ldr	r0, [pc, #280]	@ (8010b08 <pbuf_header_impl+0x138>)
 80109f0:	f00a f958 	bl	801aca4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80109f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <pbuf_header_impl+0x32>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <pbuf_header_impl+0x36>
    return 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	e078      	b.n	8010af8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8010a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da10      	bge.n	8010a30 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8010a0e:	887b      	ldrh	r3, [r7, #2]
 8010a10:	425b      	negs	r3, r3
 8010a12:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	895b      	ldrh	r3, [r3, #10]
 8010a18:	89fa      	ldrh	r2, [r7, #14]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d90a      	bls.n	8010a34 <pbuf_header_impl+0x64>
 8010a1e:	4b38      	ldr	r3, [pc, #224]	@ (8010b00 <pbuf_header_impl+0x130>)
 8010a20:	f240 2247 	movw	r2, #583	@ 0x247
 8010a24:	4939      	ldr	r1, [pc, #228]	@ (8010b0c <pbuf_header_impl+0x13c>)
 8010a26:	4838      	ldr	r0, [pc, #224]	@ (8010b08 <pbuf_header_impl+0x138>)
 8010a28:	f00a f93c 	bl	801aca4 <iprintf>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e063      	b.n	8010af8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8010a30:	887b      	ldrh	r3, [r7, #2]
 8010a32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7b1b      	ldrb	r3, [r3, #12]
 8010a38:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8010a40:	89bb      	ldrh	r3, [r7, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <pbuf_header_impl+0x7c>
 8010a46:	89bb      	ldrh	r3, [r7, #12]
 8010a48:	2b03      	cmp	r3, #3
 8010a4a:	d112      	bne.n	8010a72 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685a      	ldr	r2, [r3, #4]
 8010a50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a54:	425b      	negs	r3, r3
 8010a56:	441a      	add	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	3310      	adds	r3, #16
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d238      	bcs.n	8010ada <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	68ba      	ldr	r2, [r7, #8]
 8010a6c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e042      	b.n	8010af8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010a72:	89bb      	ldrh	r3, [r7, #12]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d002      	beq.n	8010a7e <pbuf_header_impl+0xae>
 8010a78:	89bb      	ldrh	r3, [r7, #12]
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d124      	bne.n	8010ac8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	da0d      	bge.n	8010aa2 <pbuf_header_impl+0xd2>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	895b      	ldrh	r3, [r3, #10]
 8010a8a:	89fa      	ldrh	r2, [r7, #14]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d808      	bhi.n	8010aa2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685a      	ldr	r2, [r3, #4]
 8010a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a98:	425b      	negs	r3, r3
 8010a9a:	441a      	add	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	605a      	str	r2, [r3, #4]
 8010aa0:	e011      	b.n	8010ac6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8010aa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	dd0b      	ble.n	8010ac2 <pbuf_header_impl+0xf2>
 8010aaa:	787b      	ldrb	r3, [r7, #1]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d008      	beq.n	8010ac2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ab8:	425b      	negs	r3, r3
 8010aba:	441a      	add	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	605a      	str	r2, [r3, #4]
 8010ac0:	e001      	b.n	8010ac6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e018      	b.n	8010af8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010ac6:	e008      	b.n	8010ada <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b00 <pbuf_header_impl+0x130>)
 8010aca:	f240 2277 	movw	r2, #631	@ 0x277
 8010ace:	4910      	ldr	r1, [pc, #64]	@ (8010b10 <pbuf_header_impl+0x140>)
 8010ad0:	480d      	ldr	r0, [pc, #52]	@ (8010b08 <pbuf_header_impl+0x138>)
 8010ad2:	f00a f8e7 	bl	801aca4 <iprintf>
    return 1;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e00e      	b.n	8010af8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	895a      	ldrh	r2, [r3, #10]
 8010ade:	887b      	ldrh	r3, [r7, #2]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	891a      	ldrh	r2, [r3, #8]
 8010aec:	887b      	ldrh	r3, [r7, #2]
 8010aee:	4413      	add	r3, r2
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	0801d1dc 	.word	0x0801d1dc
 8010b04:	0801d448 	.word	0x0801d448
 8010b08:	0801d25c 	.word	0x0801d25c
 8010b0c:	0801d454 	.word	0x0801d454
 8010b10:	0801d474 	.word	0x0801d474

08010b14 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b24:	2200      	movs	r2, #0
 8010b26:	4619      	mov	r1, r3
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7ff ff51 	bl	80109d0 <pbuf_header_impl>
 8010b2e:	4603      	mov	r3, r0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	460b      	mov	r3, r1
 8010b42:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff ff3f 	bl	80109d0 <pbuf_header_impl>
 8010b52:	4603      	mov	r3, r0
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b088      	sub	sp, #32
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10b      	bne.n	8010b82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d106      	bne.n	8010b7e <pbuf_free+0x22>
 8010b70:	4b41      	ldr	r3, [pc, #260]	@ (8010c78 <pbuf_free+0x11c>)
 8010b72:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8010b76:	4941      	ldr	r1, [pc, #260]	@ (8010c7c <pbuf_free+0x120>)
 8010b78:	4841      	ldr	r0, [pc, #260]	@ (8010c80 <pbuf_free+0x124>)
 8010b7a:	f00a f893 	bl	801aca4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	e076      	b.n	8010c70 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	7b1b      	ldrb	r3, [r3, #12]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d012      	beq.n	8010bb0 <pbuf_free+0x54>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	7b1b      	ldrb	r3, [r3, #12]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d00e      	beq.n	8010bb0 <pbuf_free+0x54>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7b1b      	ldrb	r3, [r3, #12]
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d00a      	beq.n	8010bb0 <pbuf_free+0x54>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	7b1b      	ldrb	r3, [r3, #12]
 8010b9e:	2b03      	cmp	r3, #3
 8010ba0:	d006      	beq.n	8010bb0 <pbuf_free+0x54>
 8010ba2:	4b35      	ldr	r3, [pc, #212]	@ (8010c78 <pbuf_free+0x11c>)
 8010ba4:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010ba8:	4936      	ldr	r1, [pc, #216]	@ (8010c84 <pbuf_free+0x128>)
 8010baa:	4835      	ldr	r0, [pc, #212]	@ (8010c80 <pbuf_free+0x124>)
 8010bac:	f00a f87a 	bl	801aca4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010bb4:	e058      	b.n	8010c68 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010bb6:	f009 ff57 	bl	801aa68 <sys_arch_protect>
 8010bba:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	89db      	ldrh	r3, [r3, #14]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d106      	bne.n	8010bd2 <pbuf_free+0x76>
 8010bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8010c78 <pbuf_free+0x11c>)
 8010bc6:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8010bca:	492f      	ldr	r1, [pc, #188]	@ (8010c88 <pbuf_free+0x12c>)
 8010bcc:	482c      	ldr	r0, [pc, #176]	@ (8010c80 <pbuf_free+0x124>)
 8010bce:	f00a f869 	bl	801aca4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	89db      	ldrh	r3, [r3, #14]
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	81da      	strh	r2, [r3, #14]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	89db      	ldrh	r3, [r3, #14]
 8010be2:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010be4:	69b8      	ldr	r0, [r7, #24]
 8010be6:	f009 ff4d 	bl	801aa84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010bea:	8afb      	ldrh	r3, [r7, #22]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d139      	bne.n	8010c64 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	7b1b      	ldrb	r3, [r3, #12]
 8010bfa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7b5b      	ldrb	r3, [r3, #13]
 8010c00:	f003 0302 	and.w	r3, r3, #2
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d011      	beq.n	8010c2c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	691b      	ldr	r3, [r3, #16]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d106      	bne.n	8010c22 <pbuf_free+0xc6>
 8010c14:	4b18      	ldr	r3, [pc, #96]	@ (8010c78 <pbuf_free+0x11c>)
 8010c16:	f240 22f9 	movw	r2, #761	@ 0x2f9
 8010c1a:	491c      	ldr	r1, [pc, #112]	@ (8010c8c <pbuf_free+0x130>)
 8010c1c:	4818      	ldr	r0, [pc, #96]	@ (8010c80 <pbuf_free+0x124>)
 8010c1e:	f00a f841 	bl	801aca4 <iprintf>
        pc->custom_free_function(p);
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	4798      	blx	r3
 8010c2a:	e015      	b.n	8010c58 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010c2c:	89fb      	ldrh	r3, [r7, #14]
 8010c2e:	2b03      	cmp	r3, #3
 8010c30:	d104      	bne.n	8010c3c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	200c      	movs	r0, #12
 8010c36:	f7ff f99b 	bl	800ff70 <memp_free>
 8010c3a:	e00d      	b.n	8010c58 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010c3c:	89fb      	ldrh	r3, [r7, #14]
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d002      	beq.n	8010c48 <pbuf_free+0xec>
 8010c42:	89fb      	ldrh	r3, [r7, #14]
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d104      	bne.n	8010c52 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	200b      	movs	r0, #11
 8010c4c:	f7ff f990 	bl	800ff70 <memp_free>
 8010c50:	e002      	b.n	8010c58 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7fe fe2c 	bl	800f8b0 <mem_free>
        }
      }
      count++;
 8010c58:	7ffb      	ldrb	r3, [r7, #31]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	607b      	str	r3, [r7, #4]
 8010c62:	e001      	b.n	8010c68 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010c64:	2300      	movs	r3, #0
 8010c66:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1a3      	bne.n	8010bb6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3720      	adds	r7, #32
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	0801d1dc 	.word	0x0801d1dc
 8010c7c:	0801d448 	.word	0x0801d448
 8010c80:	0801d25c 	.word	0x0801d25c
 8010c84:	0801d484 	.word	0x0801d484
 8010c88:	0801d49c 	.word	0x0801d49c
 8010c8c:	0801d4b4 	.word	0x0801d4b4

08010c90 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010c9c:	e005      	b.n	8010caa <pbuf_clen+0x1a>
    ++len;
 8010c9e:	89fb      	ldrh	r3, [r7, #14]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1f6      	bne.n	8010c9e <pbuf_clen+0xe>
  }
  return len;
 8010cb0:	89fb      	ldrh	r3, [r7, #14]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3714      	adds	r7, #20
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
	...

08010cc0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d016      	beq.n	8010cfc <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010cce:	f009 fecb 	bl	801aa68 <sys_arch_protect>
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	89db      	ldrh	r3, [r3, #14]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	81da      	strh	r2, [r3, #14]
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f009 fecf 	bl	801aa84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	89db      	ldrh	r3, [r3, #14]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d106      	bne.n	8010cfc <pbuf_ref+0x3c>
 8010cee:	4b05      	ldr	r3, [pc, #20]	@ (8010d04 <pbuf_ref+0x44>)
 8010cf0:	f240 3239 	movw	r2, #825	@ 0x339
 8010cf4:	4904      	ldr	r1, [pc, #16]	@ (8010d08 <pbuf_ref+0x48>)
 8010cf6:	4805      	ldr	r0, [pc, #20]	@ (8010d0c <pbuf_ref+0x4c>)
 8010cf8:	f009 ffd4 	bl	801aca4 <iprintf>
  }
}
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	0801d1dc 	.word	0x0801d1dc
 8010d08:	0801d4d8 	.word	0x0801d4d8
 8010d0c:	0801d25c 	.word	0x0801d25c

08010d10 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <pbuf_cat+0x16>
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d107      	bne.n	8010d36 <pbuf_cat+0x26>
 8010d26:	4b20      	ldr	r3, [pc, #128]	@ (8010da8 <pbuf_cat+0x98>)
 8010d28:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8010d2c:	491f      	ldr	r1, [pc, #124]	@ (8010dac <pbuf_cat+0x9c>)
 8010d2e:	4820      	ldr	r0, [pc, #128]	@ (8010db0 <pbuf_cat+0xa0>)
 8010d30:	f009 ffb8 	bl	801aca4 <iprintf>
 8010d34:	e034      	b.n	8010da0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	e00a      	b.n	8010d52 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	891a      	ldrh	r2, [r3, #8]
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	891b      	ldrh	r3, [r3, #8]
 8010d44:	4413      	add	r3, r2
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	60fb      	str	r3, [r7, #12]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1f0      	bne.n	8010d3c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	891a      	ldrh	r2, [r3, #8]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	895b      	ldrh	r3, [r3, #10]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d006      	beq.n	8010d74 <pbuf_cat+0x64>
 8010d66:	4b10      	ldr	r3, [pc, #64]	@ (8010da8 <pbuf_cat+0x98>)
 8010d68:	f240 3255 	movw	r2, #853	@ 0x355
 8010d6c:	4911      	ldr	r1, [pc, #68]	@ (8010db4 <pbuf_cat+0xa4>)
 8010d6e:	4810      	ldr	r0, [pc, #64]	@ (8010db0 <pbuf_cat+0xa0>)
 8010d70:	f009 ff98 	bl	801aca4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d006      	beq.n	8010d8a <pbuf_cat+0x7a>
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8010da8 <pbuf_cat+0x98>)
 8010d7e:	f240 3256 	movw	r2, #854	@ 0x356
 8010d82:	490d      	ldr	r1, [pc, #52]	@ (8010db8 <pbuf_cat+0xa8>)
 8010d84:	480a      	ldr	r0, [pc, #40]	@ (8010db0 <pbuf_cat+0xa0>)
 8010d86:	f009 ff8d 	bl	801aca4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	891a      	ldrh	r2, [r3, #8]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	891b      	ldrh	r3, [r3, #8]
 8010d92:	4413      	add	r3, r2
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	683a      	ldr	r2, [r7, #0]
 8010d9e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	0801d1dc 	.word	0x0801d1dc
 8010dac:	0801d4ec 	.word	0x0801d4ec
 8010db0:	0801d25c 	.word	0x0801d25c
 8010db4:	0801d524 	.word	0x0801d524
 8010db8:	0801d554 	.word	0x0801d554

08010dbc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f7ff ffa1 	bl	8010d10 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010dce:	6838      	ldr	r0, [r7, #0]
 8010dd0:	f7ff ff76 	bl	8010cc0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010dd4:	bf00      	nop
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010de6:	2300      	movs	r3, #0
 8010de8:	81fb      	strh	r3, [r7, #14]
 8010dea:	2300      	movs	r3, #0
 8010dec:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d008      	beq.n	8010e06 <pbuf_copy+0x2a>
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d005      	beq.n	8010e06 <pbuf_copy+0x2a>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	891b      	ldrh	r3, [r3, #8]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d209      	bcs.n	8010e1a <pbuf_copy+0x3e>
 8010e06:	4b54      	ldr	r3, [pc, #336]	@ (8010f58 <pbuf_copy+0x17c>)
 8010e08:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8010e0c:	4953      	ldr	r1, [pc, #332]	@ (8010f5c <pbuf_copy+0x180>)
 8010e0e:	4854      	ldr	r0, [pc, #336]	@ (8010f60 <pbuf_copy+0x184>)
 8010e10:	f009 ff48 	bl	801aca4 <iprintf>
 8010e14:	f06f 030f 	mvn.w	r3, #15
 8010e18:	e099      	b.n	8010f4e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	895b      	ldrh	r3, [r3, #10]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	89fb      	ldrh	r3, [r7, #14]
 8010e22:	1ad2      	subs	r2, r2, r3
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	895b      	ldrh	r3, [r3, #10]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	89bb      	ldrh	r3, [r7, #12]
 8010e2c:	1acb      	subs	r3, r1, r3
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	db05      	blt.n	8010e3e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	895a      	ldrh	r2, [r3, #10]
 8010e36:	89bb      	ldrh	r3, [r7, #12]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	817b      	strh	r3, [r7, #10]
 8010e3c:	e004      	b.n	8010e48 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	895a      	ldrh	r2, [r3, #10]
 8010e42:	89fb      	ldrh	r3, [r7, #14]
 8010e44:	1ad3      	subs	r3, r2, r3
 8010e46:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685a      	ldr	r2, [r3, #4]
 8010e4c:	89fb      	ldrh	r3, [r7, #14]
 8010e4e:	18d0      	adds	r0, r2, r3
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	685a      	ldr	r2, [r3, #4]
 8010e54:	89bb      	ldrh	r3, [r7, #12]
 8010e56:	4413      	add	r3, r2
 8010e58:	897a      	ldrh	r2, [r7, #10]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	f00a f863 	bl	801af26 <memcpy>
    offset_to += len;
 8010e60:	89fa      	ldrh	r2, [r7, #14]
 8010e62:	897b      	ldrh	r3, [r7, #10]
 8010e64:	4413      	add	r3, r2
 8010e66:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010e68:	89ba      	ldrh	r2, [r7, #12]
 8010e6a:	897b      	ldrh	r3, [r7, #10]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	895b      	ldrh	r3, [r3, #10]
 8010e74:	89fa      	ldrh	r2, [r7, #14]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d906      	bls.n	8010e88 <pbuf_copy+0xac>
 8010e7a:	4b37      	ldr	r3, [pc, #220]	@ (8010f58 <pbuf_copy+0x17c>)
 8010e7c:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010e80:	4938      	ldr	r1, [pc, #224]	@ (8010f64 <pbuf_copy+0x188>)
 8010e82:	4837      	ldr	r0, [pc, #220]	@ (8010f60 <pbuf_copy+0x184>)
 8010e84:	f009 ff0e 	bl	801aca4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	895b      	ldrh	r3, [r3, #10]
 8010e8c:	89ba      	ldrh	r2, [r7, #12]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d906      	bls.n	8010ea0 <pbuf_copy+0xc4>
 8010e92:	4b31      	ldr	r3, [pc, #196]	@ (8010f58 <pbuf_copy+0x17c>)
 8010e94:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8010e98:	4933      	ldr	r1, [pc, #204]	@ (8010f68 <pbuf_copy+0x18c>)
 8010e9a:	4831      	ldr	r0, [pc, #196]	@ (8010f60 <pbuf_copy+0x184>)
 8010e9c:	f009 ff02 	bl	801aca4 <iprintf>
    if (offset_from >= p_from->len) {
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	895b      	ldrh	r3, [r3, #10]
 8010ea4:	89ba      	ldrh	r2, [r7, #12]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d304      	bcc.n	8010eb4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	89fa      	ldrh	r2, [r7, #14]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d114      	bne.n	8010ee8 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d10c      	bne.n	8010ee8 <pbuf_copy+0x10c>
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d009      	beq.n	8010ee8 <pbuf_copy+0x10c>
 8010ed4:	4b20      	ldr	r3, [pc, #128]	@ (8010f58 <pbuf_copy+0x17c>)
 8010ed6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010eda:	4924      	ldr	r1, [pc, #144]	@ (8010f6c <pbuf_copy+0x190>)
 8010edc:	4820      	ldr	r0, [pc, #128]	@ (8010f60 <pbuf_copy+0x184>)
 8010ede:	f009 fee1 	bl	801aca4 <iprintf>
 8010ee2:	f06f 030f 	mvn.w	r3, #15
 8010ee6:	e032      	b.n	8010f4e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d013      	beq.n	8010f16 <pbuf_copy+0x13a>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	895a      	ldrh	r2, [r3, #10]
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	891b      	ldrh	r3, [r3, #8]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d10d      	bne.n	8010f16 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d009      	beq.n	8010f16 <pbuf_copy+0x13a>
 8010f02:	4b15      	ldr	r3, [pc, #84]	@ (8010f58 <pbuf_copy+0x17c>)
 8010f04:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8010f08:	4919      	ldr	r1, [pc, #100]	@ (8010f70 <pbuf_copy+0x194>)
 8010f0a:	4815      	ldr	r0, [pc, #84]	@ (8010f60 <pbuf_copy+0x184>)
 8010f0c:	f009 feca 	bl	801aca4 <iprintf>
 8010f10:	f06f 0305 	mvn.w	r3, #5
 8010f14:	e01b      	b.n	8010f4e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d013      	beq.n	8010f44 <pbuf_copy+0x168>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	895a      	ldrh	r2, [r3, #10]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	891b      	ldrh	r3, [r3, #8]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d10d      	bne.n	8010f44 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d009      	beq.n	8010f44 <pbuf_copy+0x168>
 8010f30:	4b09      	ldr	r3, [pc, #36]	@ (8010f58 <pbuf_copy+0x17c>)
 8010f32:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8010f36:	490e      	ldr	r1, [pc, #56]	@ (8010f70 <pbuf_copy+0x194>)
 8010f38:	4809      	ldr	r0, [pc, #36]	@ (8010f60 <pbuf_copy+0x184>)
 8010f3a:	f009 feb3 	bl	801aca4 <iprintf>
 8010f3e:	f06f 0305 	mvn.w	r3, #5
 8010f42:	e004      	b.n	8010f4e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f47f af67 	bne.w	8010e1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	0801d1dc 	.word	0x0801d1dc
 8010f5c:	0801d5a0 	.word	0x0801d5a0
 8010f60:	0801d25c 	.word	0x0801d25c
 8010f64:	0801d5d0 	.word	0x0801d5d0
 8010f68:	0801d5e8 	.word	0x0801d5e8
 8010f6c:	0801d604 	.word	0x0801d604
 8010f70:	0801d614 	.word	0x0801d614

08010f74 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b088      	sub	sp, #32
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	4611      	mov	r1, r2
 8010f80:	461a      	mov	r2, r3
 8010f82:	460b      	mov	r3, r1
 8010f84:	80fb      	strh	r3, [r7, #6]
 8010f86:	4613      	mov	r3, r2
 8010f88:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d108      	bne.n	8010fa6 <pbuf_copy_partial+0x32>
 8010f94:	4b30      	ldr	r3, [pc, #192]	@ (8011058 <pbuf_copy_partial+0xe4>)
 8010f96:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8010f9a:	4930      	ldr	r1, [pc, #192]	@ (801105c <pbuf_copy_partial+0xe8>)
 8010f9c:	4830      	ldr	r0, [pc, #192]	@ (8011060 <pbuf_copy_partial+0xec>)
 8010f9e:	f009 fe81 	bl	801aca4 <iprintf>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	e054      	b.n	8011050 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d108      	bne.n	8010fbe <pbuf_copy_partial+0x4a>
 8010fac:	4b2a      	ldr	r3, [pc, #168]	@ (8011058 <pbuf_copy_partial+0xe4>)
 8010fae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010fb2:	492c      	ldr	r1, [pc, #176]	@ (8011064 <pbuf_copy_partial+0xf0>)
 8010fb4:	482a      	ldr	r0, [pc, #168]	@ (8011060 <pbuf_copy_partial+0xec>)
 8010fb6:	f009 fe75 	bl	801aca4 <iprintf>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e048      	b.n	8011050 <pbuf_copy_partial+0xdc>

  left = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <pbuf_copy_partial+0x5a>
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d101      	bne.n	8010fd2 <pbuf_copy_partial+0x5e>
    return 0;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e03e      	b.n	8011050 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	61fb      	str	r3, [r7, #28]
 8010fd6:	e034      	b.n	8011042 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010fd8:	88bb      	ldrh	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00a      	beq.n	8010ff4 <pbuf_copy_partial+0x80>
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	895b      	ldrh	r3, [r3, #10]
 8010fe2:	88ba      	ldrh	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d305      	bcc.n	8010ff4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	895b      	ldrh	r3, [r3, #10]
 8010fec:	88ba      	ldrh	r2, [r7, #4]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	80bb      	strh	r3, [r7, #4]
 8010ff2:	e023      	b.n	801103c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	895a      	ldrh	r2, [r3, #10]
 8010ff8:	88bb      	ldrh	r3, [r7, #4]
 8010ffa:	1ad3      	subs	r3, r2, r3
 8010ffc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010ffe:	8b3a      	ldrh	r2, [r7, #24]
 8011000:	88fb      	ldrh	r3, [r7, #6]
 8011002:	429a      	cmp	r2, r3
 8011004:	d901      	bls.n	801100a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8011006:	88fb      	ldrh	r3, [r7, #6]
 8011008:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801100a:	8b7b      	ldrh	r3, [r7, #26]
 801100c:	68ba      	ldr	r2, [r7, #8]
 801100e:	18d0      	adds	r0, r2, r3
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	88bb      	ldrh	r3, [r7, #4]
 8011016:	4413      	add	r3, r2
 8011018:	8b3a      	ldrh	r2, [r7, #24]
 801101a:	4619      	mov	r1, r3
 801101c:	f009 ff83 	bl	801af26 <memcpy>
      copied_total += buf_copy_len;
 8011020:	8afa      	ldrh	r2, [r7, #22]
 8011022:	8b3b      	ldrh	r3, [r7, #24]
 8011024:	4413      	add	r3, r2
 8011026:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8011028:	8b7a      	ldrh	r2, [r7, #26]
 801102a:	8b3b      	ldrh	r3, [r7, #24]
 801102c:	4413      	add	r3, r2
 801102e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8011030:	88fa      	ldrh	r2, [r7, #6]
 8011032:	8b3b      	ldrh	r3, [r7, #24]
 8011034:	1ad3      	subs	r3, r2, r3
 8011036:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	61fb      	str	r3, [r7, #28]
 8011042:	88fb      	ldrh	r3, [r7, #6]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <pbuf_copy_partial+0xda>
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1c4      	bne.n	8010fd8 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801104e:	8afb      	ldrh	r3, [r7, #22]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3720      	adds	r7, #32
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	0801d1dc 	.word	0x0801d1dc
 801105c:	0801d640 	.word	0x0801d640
 8011060:	0801d25c 	.word	0x0801d25c
 8011064:	0801d660 	.word	0x0801d660

08011068 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011068:	b480      	push	{r7}
 801106a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801106c:	bf00      	nop
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
	...

08011078 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801107c:	f000 ffc4 	bl	8012008 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011080:	4b07      	ldr	r3, [pc, #28]	@ (80110a0 <tcp_tmr+0x28>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	3301      	adds	r3, #1
 8011086:	b2da      	uxtb	r2, r3
 8011088:	4b05      	ldr	r3, [pc, #20]	@ (80110a0 <tcp_tmr+0x28>)
 801108a:	701a      	strb	r2, [r3, #0]
 801108c:	4b04      	ldr	r3, [pc, #16]	@ (80110a0 <tcp_tmr+0x28>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	2b00      	cmp	r3, #0
 8011096:	d001      	beq.n	801109c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011098:	f000 fcf2 	bl	8011a80 <tcp_slowtmr>
  }
}
 801109c:	bf00      	nop
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	240076d1 	.word	0x240076d1

080110a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	60fb      	str	r3, [r7, #12]
 80110b2:	e00a      	b.n	80110ca <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d102      	bne.n	80110c4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2200      	movs	r2, #0
 80110c2:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	60fb      	str	r3, [r7, #12]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1f1      	bne.n	80110b4 <tcp_remove_listener+0x10>
      }
   }
}
 80110d0:	bf00      	nop
 80110d2:	bf00      	nop
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
	...

080110e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d105      	bne.n	80110fa <tcp_listen_closed+0x1a>
 80110ee:	4b13      	ldr	r3, [pc, #76]	@ (801113c <tcp_listen_closed+0x5c>)
 80110f0:	22c0      	movs	r2, #192	@ 0xc0
 80110f2:	4913      	ldr	r1, [pc, #76]	@ (8011140 <tcp_listen_closed+0x60>)
 80110f4:	4813      	ldr	r0, [pc, #76]	@ (8011144 <tcp_listen_closed+0x64>)
 80110f6:	f009 fdd5 	bl	801aca4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7d1b      	ldrb	r3, [r3, #20]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d005      	beq.n	801110e <tcp_listen_closed+0x2e>
 8011102:	4b0e      	ldr	r3, [pc, #56]	@ (801113c <tcp_listen_closed+0x5c>)
 8011104:	22c1      	movs	r2, #193	@ 0xc1
 8011106:	4910      	ldr	r1, [pc, #64]	@ (8011148 <tcp_listen_closed+0x68>)
 8011108:	480e      	ldr	r0, [pc, #56]	@ (8011144 <tcp_listen_closed+0x64>)
 801110a:	f009 fdcb 	bl	801aca4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801110e:	2301      	movs	r3, #1
 8011110:	60fb      	str	r3, [r7, #12]
 8011112:	e00b      	b.n	801112c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8011114:	4a0d      	ldr	r2, [pc, #52]	@ (801114c <tcp_listen_closed+0x6c>)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	6879      	ldr	r1, [r7, #4]
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff ffbf 	bl	80110a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	3301      	adds	r3, #1
 801112a:	60fb      	str	r3, [r7, #12]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b03      	cmp	r3, #3
 8011130:	d9f0      	bls.n	8011114 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011132:	bf00      	nop
 8011134:	bf00      	nop
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	0801d794 	.word	0x0801d794
 8011140:	0801d7f8 	.word	0x0801d7f8
 8011144:	0801d804 	.word	0x0801d804
 8011148:	0801d82c 	.word	0x0801d82c
 801114c:	0801f3b8 	.word	0x0801f3b8

08011150 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011150:	b5b0      	push	{r4, r5, r7, lr}
 8011152:	b086      	sub	sp, #24
 8011154:	af02      	add	r7, sp, #8
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	460b      	mov	r3, r1
 801115a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801115c:	78fb      	ldrb	r3, [r7, #3]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d075      	beq.n	801124e <tcp_close_shutdown+0xfe>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	7d1b      	ldrb	r3, [r3, #20]
 8011166:	2b04      	cmp	r3, #4
 8011168:	d003      	beq.n	8011172 <tcp_close_shutdown+0x22>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7d1b      	ldrb	r3, [r3, #20]
 801116e:	2b07      	cmp	r3, #7
 8011170:	d16d      	bne.n	801124e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011176:	2b00      	cmp	r3, #0
 8011178:	d104      	bne.n	8011184 <tcp_close_shutdown+0x34>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801117e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011182:	d064      	beq.n	801124e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	7e9b      	ldrb	r3, [r3, #26]
 8011188:	f003 0310 	and.w	r3, r3, #16
 801118c:	2b00      	cmp	r3, #0
 801118e:	d106      	bne.n	801119e <tcp_close_shutdown+0x4e>
 8011190:	4b5b      	ldr	r3, [pc, #364]	@ (8011300 <tcp_close_shutdown+0x1b0>)
 8011192:	f240 120f 	movw	r2, #271	@ 0x10f
 8011196:	495b      	ldr	r1, [pc, #364]	@ (8011304 <tcp_close_shutdown+0x1b4>)
 8011198:	485b      	ldr	r0, [pc, #364]	@ (8011308 <tcp_close_shutdown+0x1b8>)
 801119a:	f009 fd83 	bl	801aca4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80111a6:	687c      	ldr	r4, [r7, #4]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	1d1d      	adds	r5, r3, #4
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	8adb      	ldrh	r3, [r3, #22]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	8b12      	ldrh	r2, [r2, #24]
 80111b4:	9201      	str	r2, [sp, #4]
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	462b      	mov	r3, r5
 80111ba:	4622      	mov	r2, r4
 80111bc:	f004 ff1a 	bl	8015ff4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f001 fa57 	bl	8012674 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80111c6:	4b51      	ldr	r3, [pc, #324]	@ (801130c <tcp_close_shutdown+0x1bc>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d105      	bne.n	80111dc <tcp_close_shutdown+0x8c>
 80111d0:	4b4e      	ldr	r3, [pc, #312]	@ (801130c <tcp_close_shutdown+0x1bc>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	4a4d      	ldr	r2, [pc, #308]	@ (801130c <tcp_close_shutdown+0x1bc>)
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	e013      	b.n	8011204 <tcp_close_shutdown+0xb4>
 80111dc:	4b4b      	ldr	r3, [pc, #300]	@ (801130c <tcp_close_shutdown+0x1bc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60fb      	str	r3, [r7, #12]
 80111e2:	e00c      	b.n	80111fe <tcp_close_shutdown+0xae>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d104      	bne.n	80111f8 <tcp_close_shutdown+0xa8>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	68da      	ldr	r2, [r3, #12]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	60da      	str	r2, [r3, #12]
 80111f6:	e005      	b.n	8011204 <tcp_close_shutdown+0xb4>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	60fb      	str	r3, [r7, #12]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1ef      	bne.n	80111e4 <tcp_close_shutdown+0x94>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	60da      	str	r2, [r3, #12]
 801120a:	4b41      	ldr	r3, [pc, #260]	@ (8011310 <tcp_close_shutdown+0x1c0>)
 801120c:	2201      	movs	r2, #1
 801120e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7d1b      	ldrb	r3, [r3, #20]
 8011214:	2b04      	cmp	r3, #4
 8011216:	d10c      	bne.n	8011232 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	220a      	movs	r2, #10
 801121c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801121e:	4b3d      	ldr	r3, [pc, #244]	@ (8011314 <tcp_close_shutdown+0x1c4>)
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	60da      	str	r2, [r3, #12]
 8011226:	4a3b      	ldr	r2, [pc, #236]	@ (8011314 <tcp_close_shutdown+0x1c4>)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6013      	str	r3, [r2, #0]
 801122c:	f005 f92a 	bl	8016484 <tcp_timer_needed>
 8011230:	e00b      	b.n	801124a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8011232:	4b39      	ldr	r3, [pc, #228]	@ (8011318 <tcp_close_shutdown+0x1c8>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	429a      	cmp	r2, r3
 801123a:	d102      	bne.n	8011242 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801123c:	f003 fd7c 	bl	8014d38 <tcp_trigger_input_pcb_close>
 8011240:	e003      	b.n	801124a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8011242:	6879      	ldr	r1, [r7, #4]
 8011244:	2001      	movs	r0, #1
 8011246:	f7fe fe93 	bl	800ff70 <memp_free>
        }
      }
      return ERR_OK;
 801124a:	2300      	movs	r3, #0
 801124c:	e053      	b.n	80112f6 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	7d1b      	ldrb	r3, [r3, #20]
 8011252:	2b02      	cmp	r3, #2
 8011254:	d03d      	beq.n	80112d2 <tcp_close_shutdown+0x182>
 8011256:	2b02      	cmp	r3, #2
 8011258:	dc47      	bgt.n	80112ea <tcp_close_shutdown+0x19a>
 801125a:	2b00      	cmp	r3, #0
 801125c:	d002      	beq.n	8011264 <tcp_close_shutdown+0x114>
 801125e:	2b01      	cmp	r3, #1
 8011260:	d02b      	beq.n	80112ba <tcp_close_shutdown+0x16a>
 8011262:	e042      	b.n	80112ea <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	8adb      	ldrh	r3, [r3, #22]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d021      	beq.n	80112b0 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801126c:	4b2b      	ldr	r3, [pc, #172]	@ (801131c <tcp_close_shutdown+0x1cc>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	429a      	cmp	r2, r3
 8011274:	d105      	bne.n	8011282 <tcp_close_shutdown+0x132>
 8011276:	4b29      	ldr	r3, [pc, #164]	@ (801131c <tcp_close_shutdown+0x1cc>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	4a27      	ldr	r2, [pc, #156]	@ (801131c <tcp_close_shutdown+0x1cc>)
 801127e:	6013      	str	r3, [r2, #0]
 8011280:	e013      	b.n	80112aa <tcp_close_shutdown+0x15a>
 8011282:	4b26      	ldr	r3, [pc, #152]	@ (801131c <tcp_close_shutdown+0x1cc>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	60bb      	str	r3, [r7, #8]
 8011288:	e00c      	b.n	80112a4 <tcp_close_shutdown+0x154>
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	429a      	cmp	r2, r3
 8011292:	d104      	bne.n	801129e <tcp_close_shutdown+0x14e>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	68da      	ldr	r2, [r3, #12]
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	60da      	str	r2, [r3, #12]
 801129c:	e005      	b.n	80112aa <tcp_close_shutdown+0x15a>
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	60bb      	str	r3, [r7, #8]
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d1ef      	bne.n	801128a <tcp_close_shutdown+0x13a>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2200      	movs	r2, #0
 80112ae:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80112b0:	6879      	ldr	r1, [r7, #4]
 80112b2:	2001      	movs	r0, #1
 80112b4:	f7fe fe5c 	bl	800ff70 <memp_free>
    break;
 80112b8:	e01c      	b.n	80112f4 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f7ff ff10 	bl	80110e0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80112c0:	6879      	ldr	r1, [r7, #4]
 80112c2:	4817      	ldr	r0, [pc, #92]	@ (8011320 <tcp_close_shutdown+0x1d0>)
 80112c4:	f001 fa18 	bl	80126f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80112c8:	6879      	ldr	r1, [r7, #4]
 80112ca:	2002      	movs	r0, #2
 80112cc:	f7fe fe50 	bl	800ff70 <memp_free>
    break;
 80112d0:	e010      	b.n	80112f4 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	480d      	ldr	r0, [pc, #52]	@ (801130c <tcp_close_shutdown+0x1bc>)
 80112d6:	f001 fa0f 	bl	80126f8 <tcp_pcb_remove>
 80112da:	4b0d      	ldr	r3, [pc, #52]	@ (8011310 <tcp_close_shutdown+0x1c0>)
 80112dc:	2201      	movs	r2, #1
 80112de:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80112e0:	6879      	ldr	r1, [r7, #4]
 80112e2:	2001      	movs	r0, #1
 80112e4:	f7fe fe44 	bl	800ff70 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80112e8:	e004      	b.n	80112f4 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f000 f81a 	bl	8011324 <tcp_close_shutdown_fin>
 80112f0:	4603      	mov	r3, r0
 80112f2:	e000      	b.n	80112f6 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bdb0      	pop	{r4, r5, r7, pc}
 80112fe:	bf00      	nop
 8011300:	0801d794 	.word	0x0801d794
 8011304:	0801d844 	.word	0x0801d844
 8011308:	0801d804 	.word	0x0801d804
 801130c:	240076c8 	.word	0x240076c8
 8011310:	240076d0 	.word	0x240076d0
 8011314:	240076cc 	.word	0x240076cc
 8011318:	24007708 	.word	0x24007708
 801131c:	240076c0 	.word	0x240076c0
 8011320:	240076c4 	.word	0x240076c4

08011324 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d106      	bne.n	8011340 <tcp_close_shutdown_fin+0x1c>
 8011332:	4b2e      	ldr	r3, [pc, #184]	@ (80113ec <tcp_close_shutdown_fin+0xc8>)
 8011334:	f240 124d 	movw	r2, #333	@ 0x14d
 8011338:	492d      	ldr	r1, [pc, #180]	@ (80113f0 <tcp_close_shutdown_fin+0xcc>)
 801133a:	482e      	ldr	r0, [pc, #184]	@ (80113f4 <tcp_close_shutdown_fin+0xd0>)
 801133c:	f009 fcb2 	bl	801aca4 <iprintf>

  switch (pcb->state) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	7d1b      	ldrb	r3, [r3, #20]
 8011344:	2b07      	cmp	r3, #7
 8011346:	d020      	beq.n	801138a <tcp_close_shutdown_fin+0x66>
 8011348:	2b07      	cmp	r3, #7
 801134a:	dc2b      	bgt.n	80113a4 <tcp_close_shutdown_fin+0x80>
 801134c:	2b03      	cmp	r3, #3
 801134e:	d002      	beq.n	8011356 <tcp_close_shutdown_fin+0x32>
 8011350:	2b04      	cmp	r3, #4
 8011352:	d00d      	beq.n	8011370 <tcp_close_shutdown_fin+0x4c>
 8011354:	e026      	b.n	80113a4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f003 fd78 	bl	8014e4c <tcp_send_fin>
 801135c:	4603      	mov	r3, r0
 801135e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d11f      	bne.n	80113a8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2205      	movs	r2, #5
 801136c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801136e:	e01b      	b.n	80113a8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f003 fd6b 	bl	8014e4c <tcp_send_fin>
 8011376:	4603      	mov	r3, r0
 8011378:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d114      	bne.n	80113ac <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2205      	movs	r2, #5
 8011386:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011388:	e010      	b.n	80113ac <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f003 fd5e 	bl	8014e4c <tcp_send_fin>
 8011390:	4603      	mov	r3, r0
 8011392:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2209      	movs	r2, #9
 80113a0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80113a2:	e005      	b.n	80113b0 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	e01c      	b.n	80113e2 <tcp_close_shutdown_fin+0xbe>
    break;
 80113a8:	bf00      	nop
 80113aa:	e002      	b.n	80113b2 <tcp_close_shutdown_fin+0x8e>
    break;
 80113ac:	bf00      	nop
 80113ae:	e000      	b.n	80113b2 <tcp_close_shutdown_fin+0x8e>
    break;
 80113b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80113b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d103      	bne.n	80113c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f004 fb96 	bl	8015aec <tcp_output>
 80113c0:	e00d      	b.n	80113de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80113c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ca:	d108      	bne.n	80113de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7e9b      	ldrb	r3, [r3, #26]
 80113d0:	f043 0308 	orr.w	r3, r3, #8
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	e001      	b.n	80113e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80113de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3710      	adds	r7, #16
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	0801d794 	.word	0x0801d794
 80113f0:	0801d7f8 	.word	0x0801d7f8
 80113f4:	0801d804 	.word	0x0801d804

080113f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	7d1b      	ldrb	r3, [r3, #20]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d006      	beq.n	8011416 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	7e9b      	ldrb	r3, [r3, #26]
 801140c:	f043 0310 	orr.w	r3, r3, #16
 8011410:	b2da      	uxtb	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011416:	2101      	movs	r1, #1
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff fe99 	bl	8011150 <tcp_close_shutdown>
 801141e:	4603      	mov	r3, r0
}
 8011420:	4618      	mov	r0, r3
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	7d1b      	ldrb	r3, [r3, #20]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d102      	bne.n	8011442 <tcp_shutdown+0x1a>
    return ERR_CONN;
 801143c:	f06f 030a 	mvn.w	r3, #10
 8011440:	e036      	b.n	80114b0 <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d01b      	beq.n	8011480 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	7e9b      	ldrb	r3, [r3, #26]
 801144c:	f043 0310 	orr.w	r3, r3, #16
 8011450:	b2da      	uxtb	r2, r3
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d005      	beq.n	8011468 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801145c:	2101      	movs	r1, #1
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	f7ff fe76 	bl	8011150 <tcp_close_shutdown>
 8011464:	4603      	mov	r3, r0
 8011466:	e023      	b.n	80114b0 <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801146c:	2b00      	cmp	r3, #0
 801146e:	d007      	beq.n	8011480 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011474:	4618      	mov	r0, r3
 8011476:	f7ff fb71 	bl	8010b5c <pbuf_free>
      pcb->refused_data = NULL;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2200      	movs	r2, #0
 801147e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d013      	beq.n	80114ae <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	7d1b      	ldrb	r3, [r3, #20]
 801148a:	2b04      	cmp	r3, #4
 801148c:	dc02      	bgt.n	8011494 <tcp_shutdown+0x6c>
 801148e:	2b03      	cmp	r3, #3
 8011490:	da02      	bge.n	8011498 <tcp_shutdown+0x70>
 8011492:	e009      	b.n	80114a8 <tcp_shutdown+0x80>
 8011494:	2b07      	cmp	r3, #7
 8011496:	d107      	bne.n	80114a8 <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	b2db      	uxtb	r3, r3
 801149c:	4619      	mov	r1, r3
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f7ff fe56 	bl	8011150 <tcp_close_shutdown>
 80114a4:	4603      	mov	r3, r0
 80114a6:	e003      	b.n	80114b0 <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 80114a8:	f06f 030a 	mvn.w	r3, #10
 80114ac:	e000      	b.n	80114b0 <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 80114ae:	2300      	movs	r3, #0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b08c      	sub	sp, #48	@ 0x30
 80114bc:	af02      	add	r7, sp, #8
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7d1b      	ldrb	r3, [r3, #20]
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d106      	bne.n	80114d8 <tcp_abandon+0x20>
 80114ca:	4b4d      	ldr	r3, [pc, #308]	@ (8011600 <tcp_abandon+0x148>)
 80114cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80114d0:	494c      	ldr	r1, [pc, #304]	@ (8011604 <tcp_abandon+0x14c>)
 80114d2:	484d      	ldr	r0, [pc, #308]	@ (8011608 <tcp_abandon+0x150>)
 80114d4:	f009 fbe6 	bl	801aca4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	7d1b      	ldrb	r3, [r3, #20]
 80114dc:	2b0a      	cmp	r3, #10
 80114de:	d108      	bne.n	80114f2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	484a      	ldr	r0, [pc, #296]	@ (801160c <tcp_abandon+0x154>)
 80114e4:	f001 f908 	bl	80126f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80114e8:	6879      	ldr	r1, [r7, #4]
 80114ea:	2001      	movs	r0, #1
 80114ec:	f7fe fd40 	bl	800ff70 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80114f0:	e081      	b.n	80115f6 <tcp_abandon+0x13e>
    int send_rst = 0;
 80114f2:	2300      	movs	r3, #0
 80114f4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011504:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801150c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	691b      	ldr	r3, [r3, #16]
 8011512:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	7d1b      	ldrb	r3, [r3, #20]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d126      	bne.n	801156a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	8adb      	ldrh	r3, [r3, #22]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d02e      	beq.n	8011582 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011524:	4b3a      	ldr	r3, [pc, #232]	@ (8011610 <tcp_abandon+0x158>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	429a      	cmp	r2, r3
 801152c:	d105      	bne.n	801153a <tcp_abandon+0x82>
 801152e:	4b38      	ldr	r3, [pc, #224]	@ (8011610 <tcp_abandon+0x158>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	4a36      	ldr	r2, [pc, #216]	@ (8011610 <tcp_abandon+0x158>)
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	e013      	b.n	8011562 <tcp_abandon+0xaa>
 801153a:	4b35      	ldr	r3, [pc, #212]	@ (8011610 <tcp_abandon+0x158>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	61fb      	str	r3, [r7, #28]
 8011540:	e00c      	b.n	801155c <tcp_abandon+0xa4>
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d104      	bne.n	8011556 <tcp_abandon+0x9e>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	68da      	ldr	r2, [r3, #12]
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	60da      	str	r2, [r3, #12]
 8011554:	e005      	b.n	8011562 <tcp_abandon+0xaa>
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	61fb      	str	r3, [r7, #28]
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1ef      	bne.n	8011542 <tcp_abandon+0x8a>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2200      	movs	r2, #0
 8011566:	60da      	str	r2, [r3, #12]
 8011568:	e00b      	b.n	8011582 <tcp_abandon+0xca>
      send_rst = reset;
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	8adb      	ldrh	r3, [r3, #22]
 8011572:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011574:	6879      	ldr	r1, [r7, #4]
 8011576:	4827      	ldr	r0, [pc, #156]	@ (8011614 <tcp_abandon+0x15c>)
 8011578:	f001 f8be 	bl	80126f8 <tcp_pcb_remove>
 801157c:	4b26      	ldr	r3, [pc, #152]	@ (8011618 <tcp_abandon+0x160>)
 801157e:	2201      	movs	r2, #1
 8011580:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011586:	2b00      	cmp	r3, #0
 8011588:	d004      	beq.n	8011594 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801158e:	4618      	mov	r0, r3
 8011590:	f000 fe07 	bl	80121a2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011598:	2b00      	cmp	r3, #0
 801159a:	d004      	beq.n	80115a6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80115a0:	4618      	mov	r0, r3
 80115a2:	f000 fdfe 	bl	80121a2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d004      	beq.n	80115b8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115b2:	4618      	mov	r0, r3
 80115b4:	f000 fdf5 	bl	80121a2 <tcp_segs_free>
    if (send_rst) {
 80115b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00c      	beq.n	80115d8 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	1d19      	adds	r1, r3, #4
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	8b1b      	ldrh	r3, [r3, #24]
 80115c8:	9301      	str	r3, [sp, #4]
 80115ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	460b      	mov	r3, r1
 80115d0:	6979      	ldr	r1, [r7, #20]
 80115d2:	69b8      	ldr	r0, [r7, #24]
 80115d4:	f004 fd0e 	bl	8015ff4 <tcp_rst>
    last_state = pcb->state;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	7d1b      	ldrb	r3, [r3, #20]
 80115dc:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	2001      	movs	r0, #1
 80115e2:	f7fe fcc5 	bl	800ff70 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d004      	beq.n	80115f6 <tcp_abandon+0x13e>
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	f06f 010c 	mvn.w	r1, #12
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	4798      	blx	r3
}
 80115f6:	bf00      	nop
 80115f8:	3728      	adds	r7, #40	@ 0x28
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	0801d794 	.word	0x0801d794
 8011604:	0801d860 	.word	0x0801d860
 8011608:	0801d804 	.word	0x0801d804
 801160c:	240076cc 	.word	0x240076cc
 8011610:	240076c0 	.word	0x240076c0
 8011614:	240076c8 	.word	0x240076c8
 8011618:	240076d0 	.word	0x240076d0

0801161c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011624:	2101      	movs	r1, #1
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff ff46 	bl	80114b8 <tcp_abandon>
}
 801162c:	bf00      	nop
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b088      	sub	sp, #32
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	4613      	mov	r3, r2
 8011640:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011642:	2304      	movs	r3, #4
 8011644:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801164c:	4b3c      	ldr	r3, [pc, #240]	@ (8011740 <tcp_bind+0x10c>)
 801164e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <tcp_bind+0x28>
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d102      	bne.n	8011662 <tcp_bind+0x2e>
    return ERR_VAL;
 801165c:	f06f 0305 	mvn.w	r3, #5
 8011660:	e06a      	b.n	8011738 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	7d1b      	ldrb	r3, [r3, #20]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d009      	beq.n	801167e <tcp_bind+0x4a>
 801166a:	4b36      	ldr	r3, [pc, #216]	@ (8011744 <tcp_bind+0x110>)
 801166c:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8011670:	4935      	ldr	r1, [pc, #212]	@ (8011748 <tcp_bind+0x114>)
 8011672:	4836      	ldr	r0, [pc, #216]	@ (801174c <tcp_bind+0x118>)
 8011674:	f009 fb16 	bl	801aca4 <iprintf>
 8011678:	f06f 0305 	mvn.w	r3, #5
 801167c:	e05c      	b.n	8011738 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801167e:	88fb      	ldrh	r3, [r7, #6]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d109      	bne.n	8011698 <tcp_bind+0x64>
    port = tcp_new_port();
 8011684:	f000 f9b8 	bl	80119f8 <tcp_new_port>
 8011688:	4603      	mov	r3, r0
 801168a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801168c:	88fb      	ldrh	r3, [r7, #6]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d135      	bne.n	80116fe <tcp_bind+0xca>
      return ERR_BUF;
 8011692:	f06f 0301 	mvn.w	r3, #1
 8011696:	e04f      	b.n	8011738 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011698:	2300      	movs	r3, #0
 801169a:	61fb      	str	r3, [r7, #28]
 801169c:	e02b      	b.n	80116f6 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801169e:	4a2c      	ldr	r2, [pc, #176]	@ (8011750 <tcp_bind+0x11c>)
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	61bb      	str	r3, [r7, #24]
 80116aa:	e01e      	b.n	80116ea <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	8adb      	ldrh	r3, [r3, #22]
 80116b0:	88fa      	ldrh	r2, [r7, #6]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d116      	bne.n	80116e4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80116b6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d010      	beq.n	80116de <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00c      	beq.n	80116de <tcp_bind+0xaa>
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d009      	beq.n	80116de <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d005      	beq.n	80116de <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80116da:	429a      	cmp	r2, r3
 80116dc:	d102      	bne.n	80116e4 <tcp_bind+0xb0>
              return ERR_USE;
 80116de:	f06f 0307 	mvn.w	r3, #7
 80116e2:	e029      	b.n	8011738 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	61bb      	str	r3, [r7, #24]
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1dd      	bne.n	80116ac <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	3301      	adds	r3, #1
 80116f4:	61fb      	str	r3, [r7, #28]
 80116f6:	69fa      	ldr	r2, [r7, #28]
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	dbcf      	blt.n	801169e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00c      	beq.n	801171e <tcp_bind+0xea>
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d008      	beq.n	801171e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <tcp_bind+0xe4>
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	e000      	b.n	801171a <tcp_bind+0xe6>
 8011718:	2300      	movs	r3, #0
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	88fa      	ldrh	r2, [r7, #6]
 8011722:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011724:	4b0b      	ldr	r3, [pc, #44]	@ (8011754 <tcp_bind+0x120>)
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	60da      	str	r2, [r3, #12]
 801172c:	4a09      	ldr	r2, [pc, #36]	@ (8011754 <tcp_bind+0x120>)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6013      	str	r3, [r2, #0]
 8011732:	f004 fea7 	bl	8016484 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	3720      	adds	r7, #32
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	0801f3f0 	.word	0x0801f3f0
 8011744:	0801d794 	.word	0x0801d794
 8011748:	0801d894 	.word	0x0801d894
 801174c:	0801d804 	.word	0x0801d804
 8011750:	0801f3b8 	.word	0x0801f3b8
 8011754:	240076c0 	.word	0x240076c0

08011758 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	4613      	mov	r3, r2
 8011764:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8011766:	68b8      	ldr	r0, [r7, #8]
 8011768:	f7ff ff58 	bl	801161c <tcp_abort>

  return ERR_ABRT;
 801176c:	f06f 030c 	mvn.w	r3, #12
}
 8011770:	4618      	mov	r0, r3
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b088      	sub	sp, #32
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	460b      	mov	r3, r1
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011786:	2300      	movs	r3, #0
 8011788:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	7d1b      	ldrb	r3, [r3, #20]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d009      	beq.n	80117a6 <tcp_listen_with_backlog_and_err+0x2e>
 8011792:	4b3f      	ldr	r3, [pc, #252]	@ (8011890 <tcp_listen_with_backlog_and_err+0x118>)
 8011794:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8011798:	493e      	ldr	r1, [pc, #248]	@ (8011894 <tcp_listen_with_backlog_and_err+0x11c>)
 801179a:	483f      	ldr	r0, [pc, #252]	@ (8011898 <tcp_listen_with_backlog_and_err+0x120>)
 801179c:	f009 fa82 	bl	801aca4 <iprintf>
 80117a0:	23f1      	movs	r3, #241	@ 0xf1
 80117a2:	76fb      	strb	r3, [r7, #27]
 80117a4:	e069      	b.n	801187a <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	7d1b      	ldrb	r3, [r3, #20]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d104      	bne.n	80117b8 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80117b2:	23f7      	movs	r3, #247	@ 0xf7
 80117b4:	76fb      	strb	r3, [r7, #27]
    goto done;
 80117b6:	e060      	b.n	801187a <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80117b8:	2002      	movs	r0, #2
 80117ba:	f7fe fb63 	bl	800fe84 <memp_malloc>
 80117be:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d102      	bne.n	80117cc <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80117c6:	23ff      	movs	r3, #255	@ 0xff
 80117c8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80117ca:	e056      	b.n	801187a <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	691a      	ldr	r2, [r3, #16]
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	8ada      	ldrh	r2, [r3, #22]
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	2201      	movs	r2, #1
 80117e0:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	7d5a      	ldrb	r2, [r3, #21]
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	7a1a      	ldrb	r2, [r3, #8]
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	7a9a      	ldrb	r2, [r3, #10]
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	7a5a      	ldrb	r2, [r3, #9]
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	8adb      	ldrh	r3, [r3, #22]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d021      	beq.n	8011856 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011812:	4b22      	ldr	r3, [pc, #136]	@ (801189c <tcp_listen_with_backlog_and_err+0x124>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	429a      	cmp	r2, r3
 801181a:	d105      	bne.n	8011828 <tcp_listen_with_backlog_and_err+0xb0>
 801181c:	4b1f      	ldr	r3, [pc, #124]	@ (801189c <tcp_listen_with_backlog_and_err+0x124>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	4a1e      	ldr	r2, [pc, #120]	@ (801189c <tcp_listen_with_backlog_and_err+0x124>)
 8011824:	6013      	str	r3, [r2, #0]
 8011826:	e013      	b.n	8011850 <tcp_listen_with_backlog_and_err+0xd8>
 8011828:	4b1c      	ldr	r3, [pc, #112]	@ (801189c <tcp_listen_with_backlog_and_err+0x124>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	617b      	str	r3, [r7, #20]
 801182e:	e00c      	b.n	801184a <tcp_listen_with_backlog_and_err+0xd2>
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	429a      	cmp	r2, r3
 8011838:	d104      	bne.n	8011844 <tcp_listen_with_backlog_and_err+0xcc>
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	68da      	ldr	r2, [r3, #12]
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	60da      	str	r2, [r3, #12]
 8011842:	e005      	b.n	8011850 <tcp_listen_with_backlog_and_err+0xd8>
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	617b      	str	r3, [r7, #20]
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d1ef      	bne.n	8011830 <tcp_listen_with_backlog_and_err+0xb8>
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2200      	movs	r2, #0
 8011854:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	2001      	movs	r0, #1
 801185a:	f7fe fb89 	bl	800ff70 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	4a0f      	ldr	r2, [pc, #60]	@ (80118a0 <tcp_listen_with_backlog_and_err+0x128>)
 8011862:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011864:	4b0f      	ldr	r3, [pc, #60]	@ (80118a4 <tcp_listen_with_backlog_and_err+0x12c>)
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	69fb      	ldr	r3, [r7, #28]
 801186a:	60da      	str	r2, [r3, #12]
 801186c:	4a0d      	ldr	r2, [pc, #52]	@ (80118a4 <tcp_listen_with_backlog_and_err+0x12c>)
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	f004 fe07 	bl	8016484 <tcp_timer_needed>
  res = ERR_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7efa      	ldrb	r2, [r7, #27]
 8011884:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011886:	69fb      	ldr	r3, [r7, #28]
}
 8011888:	4618      	mov	r0, r3
 801188a:	3720      	adds	r7, #32
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	0801d794 	.word	0x0801d794
 8011894:	0801d8bc 	.word	0x0801d8bc
 8011898:	0801d804 	.word	0x0801d804
 801189c:	240076c0 	.word	0x240076c0
 80118a0:	08011759 	.word	0x08011759
 80118a4:	240076c4 	.word	0x240076c4

080118a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80118b8:	4413      	add	r3, r2
 80118ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80118c4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80118c8:	bf28      	it	cs
 80118ca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80118ce:	b292      	uxth	r2, r2
 80118d0:	4413      	add	r3, r2
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	db08      	blt.n	80118ec <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e6:	68fa      	ldr	r2, [r7, #12]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	e020      	b.n	801192e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	dd03      	ble.n	8011902 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2200      	movs	r2, #0
 80118fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011900:	e014      	b.n	801192c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011914:	d306      	bcc.n	8011924 <tcp_update_rcv_ann_wnd+0x7c>
 8011916:	4b08      	ldr	r3, [pc, #32]	@ (8011938 <tcp_update_rcv_ann_wnd+0x90>)
 8011918:	f44f 7242 	mov.w	r2, #776	@ 0x308
 801191c:	4907      	ldr	r1, [pc, #28]	@ (801193c <tcp_update_rcv_ann_wnd+0x94>)
 801191e:	4808      	ldr	r0, [pc, #32]	@ (8011940 <tcp_update_rcv_ann_wnd+0x98>)
 8011920:	f009 f9c0 	bl	801aca4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801192c:	2300      	movs	r3, #0
  }
}
 801192e:	4618      	mov	r0, r3
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	0801d794 	.word	0x0801d794
 801193c:	0801d8e0 	.word	0x0801d8e0
 8011940:	0801d804 	.word	0x0801d804

08011944 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	460b      	mov	r3, r1
 801194e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7d1b      	ldrb	r3, [r3, #20]
 8011954:	2b01      	cmp	r3, #1
 8011956:	d106      	bne.n	8011966 <tcp_recved+0x22>
 8011958:	4b23      	ldr	r3, [pc, #140]	@ (80119e8 <tcp_recved+0xa4>)
 801195a:	f240 321f 	movw	r2, #799	@ 0x31f
 801195e:	4923      	ldr	r1, [pc, #140]	@ (80119ec <tcp_recved+0xa8>)
 8011960:	4823      	ldr	r0, [pc, #140]	@ (80119f0 <tcp_recved+0xac>)
 8011962:	f009 f99f 	bl	801aca4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801196a:	887b      	ldrh	r3, [r7, #2]
 801196c:	4413      	add	r3, r2
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011978:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801197c:	d904      	bls.n	8011988 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011984:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011986:	e017      	b.n	80119b8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801198c:	2b00      	cmp	r3, #0
 801198e:	d113      	bne.n	80119b8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	7d1b      	ldrb	r3, [r3, #20]
 8011994:	2b07      	cmp	r3, #7
 8011996:	d003      	beq.n	80119a0 <tcp_recved+0x5c>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7d1b      	ldrb	r3, [r3, #20]
 801199c:	2b09      	cmp	r3, #9
 801199e:	d104      	bne.n	80119aa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80119a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80119a8:	e006      	b.n	80119b8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80119aa:	4b0f      	ldr	r3, [pc, #60]	@ (80119e8 <tcp_recved+0xa4>)
 80119ac:	f240 322d 	movw	r2, #813	@ 0x32d
 80119b0:	4910      	ldr	r1, [pc, #64]	@ (80119f4 <tcp_recved+0xb0>)
 80119b2:	480f      	ldr	r0, [pc, #60]	@ (80119f0 <tcp_recved+0xac>)
 80119b4:	f009 f976 	bl	801aca4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7ff ff75 	bl	80118a8 <tcp_update_rcv_ann_wnd>
 80119be:	4603      	mov	r3, r0
 80119c0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80119c8:	db09      	blt.n	80119de <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	7e9b      	ldrb	r3, [r3, #26]
 80119ce:	f043 0302 	orr.w	r3, r3, #2
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f004 f887 	bl	8015aec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80119de:	bf00      	nop
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	0801d794 	.word	0x0801d794
 80119ec:	0801d8fc 	.word	0x0801d8fc
 80119f0:	0801d804 	.word	0x0801d804
 80119f4:	0801d924 	.word	0x0801d924

080119f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80119fe:	2300      	movs	r3, #0
 8011a00:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8011a02:	4b1d      	ldr	r3, [pc, #116]	@ (8011a78 <tcp_new_port+0x80>)
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	1c5a      	adds	r2, r3, #1
 8011a08:	b291      	uxth	r1, r2
 8011a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8011a78 <tcp_new_port+0x80>)
 8011a0c:	8011      	strh	r1, [r2, #0]
 8011a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d103      	bne.n	8011a1e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011a16:	4b18      	ldr	r3, [pc, #96]	@ (8011a78 <tcp_new_port+0x80>)
 8011a18:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011a1c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011a1e:	2300      	movs	r3, #0
 8011a20:	71fb      	strb	r3, [r7, #7]
 8011a22:	e01e      	b.n	8011a62 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011a24:	79fb      	ldrb	r3, [r7, #7]
 8011a26:	4a15      	ldr	r2, [pc, #84]	@ (8011a7c <tcp_new_port+0x84>)
 8011a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	603b      	str	r3, [r7, #0]
 8011a30:	e011      	b.n	8011a56 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	8ada      	ldrh	r2, [r3, #22]
 8011a36:	4b10      	ldr	r3, [pc, #64]	@ (8011a78 <tcp_new_port+0x80>)
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d108      	bne.n	8011a50 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011a3e:	88bb      	ldrh	r3, [r7, #4]
 8011a40:	3301      	adds	r3, #1
 8011a42:	80bb      	strh	r3, [r7, #4]
 8011a44:	88bb      	ldrh	r3, [r7, #4]
 8011a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a4a:	d3da      	bcc.n	8011a02 <tcp_new_port+0xa>
          return 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	e00d      	b.n	8011a6c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	603b      	str	r3, [r7, #0]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1ea      	bne.n	8011a32 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	71fb      	strb	r3, [r7, #7]
 8011a62:	79fb      	ldrb	r3, [r7, #7]
 8011a64:	2b03      	cmp	r3, #3
 8011a66:	d9dd      	bls.n	8011a24 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011a68:	4b03      	ldr	r3, [pc, #12]	@ (8011a78 <tcp_new_port+0x80>)
 8011a6a:	881b      	ldrh	r3, [r3, #0]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	24000028 	.word	0x24000028
 8011a7c:	0801f3b8 	.word	0x0801f3b8

08011a80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011a80:	b5b0      	push	{r4, r5, r7, lr}
 8011a82:	b08c      	sub	sp, #48	@ 0x30
 8011a84:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011a8a:	4b97      	ldr	r3, [pc, #604]	@ (8011ce8 <tcp_slowtmr+0x268>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	4a95      	ldr	r2, [pc, #596]	@ (8011ce8 <tcp_slowtmr+0x268>)
 8011a92:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011a94:	4b95      	ldr	r3, [pc, #596]	@ (8011cec <tcp_slowtmr+0x26c>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	b2da      	uxtb	r2, r3
 8011a9c:	4b93      	ldr	r3, [pc, #588]	@ (8011cec <tcp_slowtmr+0x26c>)
 8011a9e:	701a      	strb	r2, [r3, #0]
 8011aa0:	e000      	b.n	8011aa4 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8011aa2:	bf00      	nop
  prev = NULL;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8011aa8:	4b91      	ldr	r3, [pc, #580]	@ (8011cf0 <tcp_slowtmr+0x270>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8011aae:	e227      	b.n	8011f00 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab2:	7d1b      	ldrb	r3, [r3, #20]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_slowtmr+0x46>
 8011ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8011cf4 <tcp_slowtmr+0x274>)
 8011aba:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 8011abe:	498e      	ldr	r1, [pc, #568]	@ (8011cf8 <tcp_slowtmr+0x278>)
 8011ac0:	488e      	ldr	r0, [pc, #568]	@ (8011cfc <tcp_slowtmr+0x27c>)
 8011ac2:	f009 f8ef 	bl	801aca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ac8:	7d1b      	ldrb	r3, [r3, #20]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d106      	bne.n	8011adc <tcp_slowtmr+0x5c>
 8011ace:	4b89      	ldr	r3, [pc, #548]	@ (8011cf4 <tcp_slowtmr+0x274>)
 8011ad0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8011ad4:	498a      	ldr	r1, [pc, #552]	@ (8011d00 <tcp_slowtmr+0x280>)
 8011ad6:	4889      	ldr	r0, [pc, #548]	@ (8011cfc <tcp_slowtmr+0x27c>)
 8011ad8:	f009 f8e4 	bl	801aca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ade:	7d1b      	ldrb	r3, [r3, #20]
 8011ae0:	2b0a      	cmp	r3, #10
 8011ae2:	d106      	bne.n	8011af2 <tcp_slowtmr+0x72>
 8011ae4:	4b83      	ldr	r3, [pc, #524]	@ (8011cf4 <tcp_slowtmr+0x274>)
 8011ae6:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8011aea:	4986      	ldr	r1, [pc, #536]	@ (8011d04 <tcp_slowtmr+0x284>)
 8011aec:	4883      	ldr	r0, [pc, #524]	@ (8011cfc <tcp_slowtmr+0x27c>)
 8011aee:	f009 f8d9 	bl	801aca4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af4:	7f5a      	ldrb	r2, [r3, #29]
 8011af6:	4b7d      	ldr	r3, [pc, #500]	@ (8011cec <tcp_slowtmr+0x26c>)
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d103      	bne.n	8011b06 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 8011afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b00:	68db      	ldr	r3, [r3, #12]
 8011b02:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8011b04:	e1fc      	b.n	8011f00 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 8011b06:	4b79      	ldr	r3, [pc, #484]	@ (8011cec <tcp_slowtmr+0x26c>)
 8011b08:	781a      	ldrb	r2, [r3, #0]
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b0c:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b18:	7d1b      	ldrb	r3, [r3, #20]
 8011b1a:	2b02      	cmp	r3, #2
 8011b1c:	d108      	bne.n	8011b30 <tcp_slowtmr+0xb0>
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b24:	2b05      	cmp	r3, #5
 8011b26:	d903      	bls.n	8011b30 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 8011b28:	7ffb      	ldrb	r3, [r7, #31]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	77fb      	strb	r3, [r7, #31]
 8011b2e:	e0a2      	b.n	8011c76 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8011b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b36:	2b0b      	cmp	r3, #11
 8011b38:	d903      	bls.n	8011b42 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 8011b3a:	7ffb      	ldrb	r3, [r7, #31]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	77fb      	strb	r3, [r7, #31]
 8011b40:	e099      	b.n	8011c76 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 8011b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b44:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d032      	beq.n	8011bb2 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8011b52:	3b01      	subs	r3, #1
 8011b54:	4a6c      	ldr	r2, [pc, #432]	@ (8011d08 <tcp_slowtmr+0x288>)
 8011b56:	5cd3      	ldrb	r3, [r2, r3]
 8011b58:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8011b60:	7cfa      	ldrb	r2, [r7, #19]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d907      	bls.n	8011b76 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b72:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8011b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b78:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8011b7c:	7cfa      	ldrb	r2, [r7, #19]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d879      	bhi.n	8011c76 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011b82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b84:	f004 fbbe 	bl	8016304 <tcp_zero_window_probe>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d173      	bne.n	8011c76 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b90:	2200      	movs	r2, #0
 8011b92:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b98:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8011b9c:	2b06      	cmp	r3, #6
 8011b9e:	d86a      	bhi.n	8011c76 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bac:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8011bb0:	e061      	b.n	8011c76 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	db08      	blt.n	8011bce <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	b21a      	sxth	r2, r3
 8011bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bcc:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d04f      	beq.n	8011c76 <tcp_slowtmr+0x1f6>
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011be2:	429a      	cmp	r2, r3
 8011be4:	db47      	blt.n	8011c76 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8011be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be8:	7d1b      	ldrb	r3, [r3, #20]
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d018      	beq.n	8011c20 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011bf4:	2b0c      	cmp	r3, #12
 8011bf6:	bf28      	it	cs
 8011bf8:	230c      	movcs	r3, #12
 8011bfa:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011c02:	10db      	asrs	r3, r3, #3
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	461a      	mov	r2, r3
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011c0e:	4413      	add	r3, r2
 8011c10:	7dfa      	ldrb	r2, [r7, #23]
 8011c12:	493e      	ldr	r1, [pc, #248]	@ (8011d0c <tcp_slowtmr+0x28c>)
 8011c14:	5c8a      	ldrb	r2, [r1, r2]
 8011c16:	4093      	lsls	r3, r2
 8011c18:	b21a      	sxth	r2, r3
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 8011c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c22:	2200      	movs	r2, #0
 8011c24:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011c32:	4293      	cmp	r3, r2
 8011c34:	bf28      	it	cs
 8011c36:	4613      	movcs	r3, r2
 8011c38:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8011c3a:	8abb      	ldrh	r3, [r7, #20]
 8011c3c:	085b      	lsrs	r3, r3, #1
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c42:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c48:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c50:	005b      	lsls	r3, r3, #1
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d206      	bcs.n	8011c66 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8011c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c62:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8011c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c68:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8011c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c72:	f004 fa35 	bl	80160e0 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8011c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c78:	7d1b      	ldrb	r3, [r3, #20]
 8011c7a:	2b06      	cmp	r3, #6
 8011c7c:	d10f      	bne.n	8011c9e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c80:	7e9b      	ldrb	r3, [r3, #26]
 8011c82:	f003 0310 	and.w	r3, r3, #16
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c8a:	4b17      	ldr	r3, [pc, #92]	@ (8011ce8 <tcp_slowtmr+0x268>)
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c90:	6a1b      	ldr	r3, [r3, #32]
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	2b28      	cmp	r3, #40	@ 0x28
 8011c96:	d902      	bls.n	8011c9e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8011c98:	7ffb      	ldrb	r3, [r7, #31]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca0:	7a1b      	ldrb	r3, [r3, #8]
 8011ca2:	f003 0308 	and.w	r3, r3, #8
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d05d      	beq.n	8011d66 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8011caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011cae:	2b04      	cmp	r3, #4
 8011cb0:	d003      	beq.n	8011cba <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8011cb6:	2b07      	cmp	r3, #7
 8011cb8:	d155      	bne.n	8011d66 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cba:	4b0b      	ldr	r3, [pc, #44]	@ (8011ce8 <tcp_slowtmr+0x268>)
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc0:	6a1b      	ldr	r3, [r3, #32]
 8011cc2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc6:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8011cca:	4b11      	ldr	r3, [pc, #68]	@ (8011d10 <tcp_slowtmr+0x290>)
 8011ccc:	440b      	add	r3, r1
 8011cce:	4911      	ldr	r1, [pc, #68]	@ (8011d14 <tcp_slowtmr+0x294>)
 8011cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8011cd4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d91e      	bls.n	8011d18 <tcp_slowtmr+0x298>
        ++pcb_remove;
 8011cda:	7ffb      	ldrb	r3, [r7, #31]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011ce0:	7fbb      	ldrb	r3, [r7, #30]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	77bb      	strb	r3, [r7, #30]
 8011ce6:	e03e      	b.n	8011d66 <tcp_slowtmr+0x2e6>
 8011ce8:	240076bc 	.word	0x240076bc
 8011cec:	240076d2 	.word	0x240076d2
 8011cf0:	240076c8 	.word	0x240076c8
 8011cf4:	0801d794 	.word	0x0801d794
 8011cf8:	0801d978 	.word	0x0801d978
 8011cfc:	0801d804 	.word	0x0801d804
 8011d00:	0801d9a4 	.word	0x0801d9a4
 8011d04:	0801d9d0 	.word	0x0801d9d0
 8011d08:	0801f3b0 	.word	0x0801f3b0
 8011d0c:	0801f3a0 	.word	0x0801f3a0
 8011d10:	000a4cb8 	.word	0x000a4cb8
 8011d14:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d18:	4b97      	ldr	r3, [pc, #604]	@ (8011f78 <tcp_slowtmr+0x4f8>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1e:	6a1b      	ldr	r3, [r3, #32]
 8011d20:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d24:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8011d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2a:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8011d2e:	4618      	mov	r0, r3
 8011d30:	4b92      	ldr	r3, [pc, #584]	@ (8011f7c <tcp_slowtmr+0x4fc>)
 8011d32:	fb00 f303 	mul.w	r3, r0, r3
 8011d36:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011d38:	4991      	ldr	r1, [pc, #580]	@ (8011f80 <tcp_slowtmr+0x500>)
 8011d3a:	fba1 1303 	umull	r1, r3, r1, r3
 8011d3e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d910      	bls.n	8011d66 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 8011d44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d46:	f004 faa0 	bl	801628a <tcp_keepalive>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011d4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d107      	bne.n	8011d66 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8011d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d58:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d62:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8011d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d016      	beq.n	8011d9c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011d6e:	4b82      	ldr	r3, [pc, #520]	@ (8011f78 <tcp_slowtmr+0x4f8>)
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	6a1b      	ldr	r3, [r3, #32]
 8011d76:	1ad2      	subs	r2, r2, r3
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011d7e:	4619      	mov	r1, r3
 8011d80:	460b      	mov	r3, r1
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	440b      	add	r3, r1
 8011d86:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d307      	bcc.n	8011d9c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 fa06 	bl	80121a2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	2200      	movs	r2, #0
 8011d9a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9e:	7d1b      	ldrb	r3, [r3, #20]
 8011da0:	2b03      	cmp	r3, #3
 8011da2:	d109      	bne.n	8011db8 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011da4:	4b74      	ldr	r3, [pc, #464]	@ (8011f78 <tcp_slowtmr+0x4f8>)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	2b28      	cmp	r3, #40	@ 0x28
 8011db0:	d902      	bls.n	8011db8 <tcp_slowtmr+0x338>
        ++pcb_remove;
 8011db2:	7ffb      	ldrb	r3, [r7, #31]
 8011db4:	3301      	adds	r3, #1
 8011db6:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8011db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	2b09      	cmp	r3, #9
 8011dbe:	d109      	bne.n	8011dd4 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011dc0:	4b6d      	ldr	r3, [pc, #436]	@ (8011f78 <tcp_slowtmr+0x4f8>)
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc6:	6a1b      	ldr	r3, [r3, #32]
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	2bf0      	cmp	r3, #240	@ 0xf0
 8011dcc:	d902      	bls.n	8011dd4 <tcp_slowtmr+0x354>
        ++pcb_remove;
 8011dce:	7ffb      	ldrb	r3, [r7, #31]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8011dd4:	7ffb      	ldrb	r3, [r7, #31]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d05d      	beq.n	8011e96 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 8011dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011de0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011de2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011de4:	f000 fc46 	bl	8012674 <tcp_pcb_purge>
      if (prev != NULL) {
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d010      	beq.n	8011e10 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011dee:	4b65      	ldr	r3, [pc, #404]	@ (8011f84 <tcp_slowtmr+0x504>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d106      	bne.n	8011e06 <tcp_slowtmr+0x386>
 8011df8:	4b63      	ldr	r3, [pc, #396]	@ (8011f88 <tcp_slowtmr+0x508>)
 8011dfa:	f240 4289 	movw	r2, #1161	@ 0x489
 8011dfe:	4963      	ldr	r1, [pc, #396]	@ (8011f8c <tcp_slowtmr+0x50c>)
 8011e00:	4863      	ldr	r0, [pc, #396]	@ (8011f90 <tcp_slowtmr+0x510>)
 8011e02:	f008 ff4f 	bl	801aca4 <iprintf>
        prev->next = pcb->next;
 8011e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e08:	68da      	ldr	r2, [r3, #12]
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	60da      	str	r2, [r3, #12]
 8011e0e:	e00f      	b.n	8011e30 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011e10:	4b5c      	ldr	r3, [pc, #368]	@ (8011f84 <tcp_slowtmr+0x504>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d006      	beq.n	8011e28 <tcp_slowtmr+0x3a8>
 8011e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8011f88 <tcp_slowtmr+0x508>)
 8011e1c:	f240 428d 	movw	r2, #1165	@ 0x48d
 8011e20:	495c      	ldr	r1, [pc, #368]	@ (8011f94 <tcp_slowtmr+0x514>)
 8011e22:	485b      	ldr	r0, [pc, #364]	@ (8011f90 <tcp_slowtmr+0x510>)
 8011e24:	f008 ff3e 	bl	801aca4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	4a55      	ldr	r2, [pc, #340]	@ (8011f84 <tcp_slowtmr+0x504>)
 8011e2e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011e30:	7fbb      	ldrb	r3, [r7, #30]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d010      	beq.n	8011e58 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e38:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011e3e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e42:	1d1d      	adds	r5, r3, #4
 8011e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e46:	8adb      	ldrh	r3, [r3, #22]
 8011e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e4a:	8b12      	ldrh	r2, [r2, #24]
 8011e4c:	9201      	str	r2, [sp, #4]
 8011e4e:	9300      	str	r3, [sp, #0]
 8011e50:	462b      	mov	r3, r5
 8011e52:	4622      	mov	r2, r4
 8011e54:	f004 f8ce 	bl	8015ff4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e60:	7d1b      	ldrb	r3, [r3, #20]
 8011e62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	2001      	movs	r0, #1
 8011e72:	f7fe f87d 	bl	800ff70 <memp_free>
      tcp_active_pcbs_changed = 0;
 8011e76:	4b48      	ldr	r3, [pc, #288]	@ (8011f98 <tcp_slowtmr+0x518>)
 8011e78:	2200      	movs	r2, #0
 8011e7a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <tcp_slowtmr+0x40c>
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f06f 010c 	mvn.w	r1, #12
 8011e88:	68b8      	ldr	r0, [r7, #8]
 8011e8a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011e8c:	4b42      	ldr	r3, [pc, #264]	@ (8011f98 <tcp_slowtmr+0x518>)
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d035      	beq.n	8011f00 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8011e94:	e606      	b.n	8011aa4 <tcp_slowtmr+0x24>
      prev = pcb;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e98:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	7edb      	ldrb	r3, [r3, #27]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	7eda      	ldrb	r2, [r3, #27]
 8011eb0:	6a3b      	ldr	r3, [r7, #32]
 8011eb2:	7f1b      	ldrb	r3, [r3, #28]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d323      	bcc.n	8011f00 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8011eb8:	6a3b      	ldr	r3, [r7, #32]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8011ebe:	4b36      	ldr	r3, [pc, #216]	@ (8011f98 <tcp_slowtmr+0x518>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00a      	beq.n	8011ee4 <tcp_slowtmr+0x464>
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ed4:	6a3a      	ldr	r2, [r7, #32]
 8011ed6:	6912      	ldr	r2, [r2, #16]
 8011ed8:	6a39      	ldr	r1, [r7, #32]
 8011eda:	4610      	mov	r0, r2
 8011edc:	4798      	blx	r3
 8011ede:	4603      	mov	r3, r0
 8011ee0:	777b      	strb	r3, [r7, #29]
 8011ee2:	e001      	b.n	8011ee8 <tcp_slowtmr+0x468>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8011f98 <tcp_slowtmr+0x518>)
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	f47f add8 	bne.w	8011aa2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011ef2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d102      	bne.n	8011f00 <tcp_slowtmr+0x480>
          tcp_output(prev);
 8011efa:	6a38      	ldr	r0, [r7, #32]
 8011efc:	f003 fdf6 	bl	8015aec <tcp_output>
  while (pcb != NULL) {
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f47f add4 	bne.w	8011ab0 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011f0c:	4b23      	ldr	r3, [pc, #140]	@ (8011f9c <tcp_slowtmr+0x51c>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8011f12:	e068      	b.n	8011fe6 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f16:	7d1b      	ldrb	r3, [r3, #20]
 8011f18:	2b0a      	cmp	r3, #10
 8011f1a:	d006      	beq.n	8011f2a <tcp_slowtmr+0x4aa>
 8011f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011f88 <tcp_slowtmr+0x508>)
 8011f1e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8011f22:	491f      	ldr	r1, [pc, #124]	@ (8011fa0 <tcp_slowtmr+0x520>)
 8011f24:	481a      	ldr	r0, [pc, #104]	@ (8011f90 <tcp_slowtmr+0x510>)
 8011f26:	f008 febd 	bl	801aca4 <iprintf>
    pcb_remove = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f2e:	4b12      	ldr	r3, [pc, #72]	@ (8011f78 <tcp_slowtmr+0x4f8>)
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f34:	6a1b      	ldr	r3, [r3, #32]
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	2bf0      	cmp	r3, #240	@ 0xf0
 8011f3a:	d902      	bls.n	8011f42 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 8011f3c:	7ffb      	ldrb	r3, [r7, #31]
 8011f3e:	3301      	adds	r3, #1
 8011f40:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011f42:	7ffb      	ldrb	r3, [r7, #31]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d049      	beq.n	8011fdc <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011f48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f4a:	f000 fb93 	bl	8012674 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011f4e:	6a3b      	ldr	r3, [r7, #32]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d029      	beq.n	8011fa8 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011f54:	4b11      	ldr	r3, [pc, #68]	@ (8011f9c <tcp_slowtmr+0x51c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d106      	bne.n	8011f6c <tcp_slowtmr+0x4ec>
 8011f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f88 <tcp_slowtmr+0x508>)
 8011f60:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8011f64:	490f      	ldr	r1, [pc, #60]	@ (8011fa4 <tcp_slowtmr+0x524>)
 8011f66:	480a      	ldr	r0, [pc, #40]	@ (8011f90 <tcp_slowtmr+0x510>)
 8011f68:	f008 fe9c 	bl	801aca4 <iprintf>
        prev->next = pcb->next;
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6e:	68da      	ldr	r2, [r3, #12]
 8011f70:	6a3b      	ldr	r3, [r7, #32]
 8011f72:	60da      	str	r2, [r3, #12]
 8011f74:	e028      	b.n	8011fc8 <tcp_slowtmr+0x548>
 8011f76:	bf00      	nop
 8011f78:	240076bc 	.word	0x240076bc
 8011f7c:	000124f8 	.word	0x000124f8
 8011f80:	10624dd3 	.word	0x10624dd3
 8011f84:	240076c8 	.word	0x240076c8
 8011f88:	0801d794 	.word	0x0801d794
 8011f8c:	0801da00 	.word	0x0801da00
 8011f90:	0801d804 	.word	0x0801d804
 8011f94:	0801da2c 	.word	0x0801da2c
 8011f98:	240076d0 	.word	0x240076d0
 8011f9c:	240076cc 	.word	0x240076cc
 8011fa0:	0801da58 	.word	0x0801da58
 8011fa4:	0801da88 	.word	0x0801da88
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011fa8:	4b13      	ldr	r3, [pc, #76]	@ (8011ff8 <tcp_slowtmr+0x578>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d006      	beq.n	8011fc0 <tcp_slowtmr+0x540>
 8011fb2:	4b12      	ldr	r3, [pc, #72]	@ (8011ffc <tcp_slowtmr+0x57c>)
 8011fb4:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8011fb8:	4911      	ldr	r1, [pc, #68]	@ (8012000 <tcp_slowtmr+0x580>)
 8011fba:	4812      	ldr	r0, [pc, #72]	@ (8012004 <tcp_slowtmr+0x584>)
 8011fbc:	f008 fe72 	bl	801aca4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8011ff8 <tcp_slowtmr+0x578>)
 8011fc6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fca:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011fd2:	69b9      	ldr	r1, [r7, #24]
 8011fd4:	2001      	movs	r0, #1
 8011fd6:	f7fd ffcb 	bl	800ff70 <memp_free>
 8011fda:	e004      	b.n	8011fe6 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fde:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d193      	bne.n	8011f14 <tcp_slowtmr+0x494>
    }
  }
}
 8011fec:	bf00      	nop
 8011fee:	bf00      	nop
 8011ff0:	3728      	adds	r7, #40	@ 0x28
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	240076cc 	.word	0x240076cc
 8011ffc:	0801d794 	.word	0x0801d794
 8012000:	0801dab0 	.word	0x0801dab0
 8012004:	0801d804 	.word	0x0801d804

08012008 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801200e:	4b2d      	ldr	r3, [pc, #180]	@ (80120c4 <tcp_fasttmr+0xbc>)
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	3301      	adds	r3, #1
 8012014:	b2da      	uxtb	r2, r3
 8012016:	4b2b      	ldr	r3, [pc, #172]	@ (80120c4 <tcp_fasttmr+0xbc>)
 8012018:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801201a:	4b2b      	ldr	r3, [pc, #172]	@ (80120c8 <tcp_fasttmr+0xc0>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012020:	e048      	b.n	80120b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	7f5a      	ldrb	r2, [r3, #29]
 8012026:	4b27      	ldr	r3, [pc, #156]	@ (80120c4 <tcp_fasttmr+0xbc>)
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	429a      	cmp	r2, r3
 801202c:	d03f      	beq.n	80120ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801202e:	4b25      	ldr	r3, [pc, #148]	@ (80120c4 <tcp_fasttmr+0xbc>)
 8012030:	781a      	ldrb	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	7e9b      	ldrb	r3, [r3, #26]
 801203a:	f003 0301 	and.w	r3, r3, #1
 801203e:	2b00      	cmp	r3, #0
 8012040:	d010      	beq.n	8012064 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	7e9b      	ldrb	r3, [r3, #26]
 8012046:	f043 0302 	orr.w	r3, r3, #2
 801204a:	b2da      	uxtb	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f003 fd4b 	bl	8015aec <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	7e9b      	ldrb	r3, [r3, #26]
 801205a:	f023 0303 	bic.w	r3, r3, #3
 801205e:	b2da      	uxtb	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7e9b      	ldrb	r3, [r3, #26]
 8012068:	f003 0308 	and.w	r3, r3, #8
 801206c:	2b00      	cmp	r3, #0
 801206e:	d009      	beq.n	8012084 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	7e9b      	ldrb	r3, [r3, #26]
 8012074:	f023 0308 	bic.w	r3, r3, #8
 8012078:	b2da      	uxtb	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7ff f950 	bl	8011324 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00a      	beq.n	80120a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012092:	4b0e      	ldr	r3, [pc, #56]	@ (80120cc <tcp_fasttmr+0xc4>)
 8012094:	2200      	movs	r2, #0
 8012096:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f000 f819 	bl	80120d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801209e:	4b0b      	ldr	r3, [pc, #44]	@ (80120cc <tcp_fasttmr+0xc4>)
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d000      	beq.n	80120a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80120a6:	e7b8      	b.n	801201a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	607b      	str	r3, [r7, #4]
 80120ac:	e002      	b.n	80120b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1b3      	bne.n	8012022 <tcp_fasttmr+0x1a>
    }
  }
}
 80120ba:	bf00      	nop
 80120bc:	bf00      	nop
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	240076d2 	.word	0x240076d2
 80120c8:	240076c8 	.word	0x240076c8
 80120cc:	240076d0 	.word	0x240076d0

080120d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80120d0:	b590      	push	{r4, r7, lr}
 80120d2:	b085      	sub	sp, #20
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120dc:	7b5b      	ldrb	r3, [r3, #13]
 80120de:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120e4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00b      	beq.n	801210e <tcp_process_refused_data+0x3e>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6918      	ldr	r0, [r3, #16]
 8012100:	2300      	movs	r3, #0
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	6879      	ldr	r1, [r7, #4]
 8012106:	47a0      	blx	r4
 8012108:	4603      	mov	r3, r0
 801210a:	73fb      	strb	r3, [r7, #15]
 801210c:	e007      	b.n	801211e <tcp_process_refused_data+0x4e>
 801210e:	2300      	movs	r3, #0
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	6879      	ldr	r1, [r7, #4]
 8012114:	2000      	movs	r0, #0
 8012116:	f000 f88d 	bl	8012234 <tcp_recv_null>
 801211a:	4603      	mov	r3, r0
 801211c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d12a      	bne.n	801217c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8012126:	7bbb      	ldrb	r3, [r7, #14]
 8012128:	f003 0320 	and.w	r3, r3, #32
 801212c:	2b00      	cmp	r3, #0
 801212e:	d033      	beq.n	8012198 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012134:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012138:	d005      	beq.n	8012146 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801213e:	3301      	adds	r3, #1
 8012140:	b29a      	uxth	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00b      	beq.n	8012168 <tcp_process_refused_data+0x98>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6918      	ldr	r0, [r3, #16]
 801215a:	2300      	movs	r3, #0
 801215c:	2200      	movs	r2, #0
 801215e:	6879      	ldr	r1, [r7, #4]
 8012160:	47a0      	blx	r4
 8012162:	4603      	mov	r3, r0
 8012164:	73fb      	strb	r3, [r7, #15]
 8012166:	e001      	b.n	801216c <tcp_process_refused_data+0x9c>
 8012168:	2300      	movs	r3, #0
 801216a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012170:	f113 0f0d 	cmn.w	r3, #13
 8012174:	d110      	bne.n	8012198 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8012176:	f06f 030c 	mvn.w	r3, #12
 801217a:	e00e      	b.n	801219a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801217c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012180:	f113 0f0d 	cmn.w	r3, #13
 8012184:	d102      	bne.n	801218c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012186:	f06f 030c 	mvn.w	r3, #12
 801218a:	e006      	b.n	801219a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8012192:	f06f 0304 	mvn.w	r3, #4
 8012196:	e000      	b.n	801219a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	3714      	adds	r7, #20
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd90      	pop	{r4, r7, pc}

080121a2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b084      	sub	sp, #16
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80121aa:	e007      	b.n	80121bc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 f80a 	bl	80121cc <tcp_seg_free>
    seg = next;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1f4      	bne.n	80121ac <tcp_segs_free+0xa>
  }
}
 80121c2:	bf00      	nop
 80121c4:	bf00      	nop
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00c      	beq.n	80121f4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d004      	beq.n	80121ec <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7fe fcb8 	bl	8010b5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80121ec:	6879      	ldr	r1, [r7, #4]
 80121ee:	2003      	movs	r0, #3
 80121f0:	f7fd febe 	bl	800ff70 <memp_free>
  }
}
 80121f4:	bf00      	nop
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012204:	2003      	movs	r0, #3
 8012206:	f7fd fe3d 	bl	800fe84 <memp_malloc>
 801220a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d101      	bne.n	8012216 <tcp_seg_copy+0x1a>
    return NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	e00a      	b.n	801222c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012216:	2210      	movs	r2, #16
 8012218:	6879      	ldr	r1, [r7, #4]
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f008 fe83 	bl	801af26 <memcpy>
  pbuf_ref(cseg->p);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	4618      	mov	r0, r3
 8012226:	f7fe fd4b 	bl	8010cc0 <pbuf_ref>
  return cseg;
 801222a:	68fb      	ldr	r3, [r7, #12]
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d009      	beq.n	801225c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	891b      	ldrh	r3, [r3, #8]
 801224c:	4619      	mov	r1, r3
 801224e:	68b8      	ldr	r0, [r7, #8]
 8012250:	f7ff fb78 	bl	8011944 <tcp_recved>
    pbuf_free(p);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fe fc81 	bl	8010b5c <pbuf_free>
 801225a:	e008      	b.n	801226e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801225c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d104      	bne.n	801226e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8012264:	68b8      	ldr	r0, [r7, #8]
 8012266:	f7ff f8c7 	bl	80113f8 <tcp_close>
 801226a:	4603      	mov	r3, r0
 801226c:	e000      	b.n	8012270 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b086      	sub	sp, #24
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012286:	2b00      	cmp	r3, #0
 8012288:	db01      	blt.n	801228e <tcp_kill_prio+0x16>
 801228a:	79fb      	ldrb	r3, [r7, #7]
 801228c:	e000      	b.n	8012290 <tcp_kill_prio+0x18>
 801228e:	237f      	movs	r3, #127	@ 0x7f
 8012290:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8012292:	2300      	movs	r3, #0
 8012294:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012296:	2300      	movs	r3, #0
 8012298:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801229a:	4b16      	ldr	r3, [pc, #88]	@ (80122f4 <tcp_kill_prio+0x7c>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	617b      	str	r3, [r7, #20]
 80122a0:	e01a      	b.n	80122d8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	7d5b      	ldrb	r3, [r3, #21]
 80122a6:	7afa      	ldrb	r2, [r7, #11]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d312      	bcc.n	80122d2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122ac:	4b12      	ldr	r3, [pc, #72]	@ (80122f8 <tcp_kill_prio+0x80>)
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	6a1b      	ldr	r3, [r3, #32]
 80122b4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d80a      	bhi.n	80122d2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80122bc:	4b0e      	ldr	r3, [pc, #56]	@ (80122f8 <tcp_kill_prio+0x80>)
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	6a1b      	ldr	r3, [r3, #32]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	7d5b      	ldrb	r3, [r3, #21]
 80122d0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	617b      	str	r3, [r7, #20]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1e1      	bne.n	80122a2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d002      	beq.n	80122ea <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80122e4:	6938      	ldr	r0, [r7, #16]
 80122e6:	f7ff f999 	bl	801161c <tcp_abort>
  }
}
 80122ea:	bf00      	nop
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	240076c8 	.word	0x240076c8
 80122f8:	240076bc 	.word	0x240076bc

080122fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b086      	sub	sp, #24
 8012300:	af00      	add	r7, sp, #0
 8012302:	4603      	mov	r3, r0
 8012304:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	2b08      	cmp	r3, #8
 801230a:	d009      	beq.n	8012320 <tcp_kill_state+0x24>
 801230c:	79fb      	ldrb	r3, [r7, #7]
 801230e:	2b09      	cmp	r3, #9
 8012310:	d006      	beq.n	8012320 <tcp_kill_state+0x24>
 8012312:	4b1a      	ldr	r3, [pc, #104]	@ (801237c <tcp_kill_state+0x80>)
 8012314:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8012318:	4919      	ldr	r1, [pc, #100]	@ (8012380 <tcp_kill_state+0x84>)
 801231a:	481a      	ldr	r0, [pc, #104]	@ (8012384 <tcp_kill_state+0x88>)
 801231c:	f008 fcc2 	bl	801aca4 <iprintf>

  inactivity = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012324:	2300      	movs	r3, #0
 8012326:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012328:	4b17      	ldr	r3, [pc, #92]	@ (8012388 <tcp_kill_state+0x8c>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	617b      	str	r3, [r7, #20]
 801232e:	e017      	b.n	8012360 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	7d1b      	ldrb	r3, [r3, #20]
 8012334:	79fa      	ldrb	r2, [r7, #7]
 8012336:	429a      	cmp	r2, r3
 8012338:	d10f      	bne.n	801235a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801233a:	4b14      	ldr	r3, [pc, #80]	@ (801238c <tcp_kill_state+0x90>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	6a1b      	ldr	r3, [r3, #32]
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	68fa      	ldr	r2, [r7, #12]
 8012346:	429a      	cmp	r2, r3
 8012348:	d807      	bhi.n	801235a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801234a:	4b10      	ldr	r3, [pc, #64]	@ (801238c <tcp_kill_state+0x90>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	6a1b      	ldr	r3, [r3, #32]
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	617b      	str	r3, [r7, #20]
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d1e4      	bne.n	8012330 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d003      	beq.n	8012374 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801236c:	2100      	movs	r1, #0
 801236e:	6938      	ldr	r0, [r7, #16]
 8012370:	f7ff f8a2 	bl	80114b8 <tcp_abandon>
  }
}
 8012374:	bf00      	nop
 8012376:	3718      	adds	r7, #24
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	0801d794 	.word	0x0801d794
 8012380:	0801dad8 	.word	0x0801dad8
 8012384:	0801d804 	.word	0x0801d804
 8012388:	240076c8 	.word	0x240076c8
 801238c:	240076bc 	.word	0x240076bc

08012390 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012396:	2300      	movs	r3, #0
 8012398:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801239a:	2300      	movs	r3, #0
 801239c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801239e:	4b12      	ldr	r3, [pc, #72]	@ (80123e8 <tcp_kill_timewait+0x58>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	60fb      	str	r3, [r7, #12]
 80123a4:	e012      	b.n	80123cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80123a6:	4b11      	ldr	r3, [pc, #68]	@ (80123ec <tcp_kill_timewait+0x5c>)
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	6a1b      	ldr	r3, [r3, #32]
 80123ae:	1ad3      	subs	r3, r2, r3
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d807      	bhi.n	80123c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80123b6:	4b0d      	ldr	r3, [pc, #52]	@ (80123ec <tcp_kill_timewait+0x5c>)
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	60fb      	str	r3, [r7, #12]
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d1e9      	bne.n	80123a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80123d8:	68b8      	ldr	r0, [r7, #8]
 80123da:	f7ff f91f 	bl	801161c <tcp_abort>
  }
}
 80123de:	bf00      	nop
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	240076cc 	.word	0x240076cc
 80123ec:	240076bc 	.word	0x240076bc

080123f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	4603      	mov	r3, r0
 80123f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123fa:	2001      	movs	r0, #1
 80123fc:	f7fd fd42 	bl	800fe84 <memp_malloc>
 8012400:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d124      	bne.n	8012452 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012408:	f7ff ffc2 	bl	8012390 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801240c:	2001      	movs	r0, #1
 801240e:	f7fd fd39 	bl	800fe84 <memp_malloc>
 8012412:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d11b      	bne.n	8012452 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801241a:	2009      	movs	r0, #9
 801241c:	f7ff ff6e 	bl	80122fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012420:	2001      	movs	r0, #1
 8012422:	f7fd fd2f 	bl	800fe84 <memp_malloc>
 8012426:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d111      	bne.n	8012452 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801242e:	2008      	movs	r0, #8
 8012430:	f7ff ff64 	bl	80122fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012434:	2001      	movs	r0, #1
 8012436:	f7fd fd25 	bl	800fe84 <memp_malloc>
 801243a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d107      	bne.n	8012452 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012442:	79fb      	ldrb	r3, [r7, #7]
 8012444:	4618      	mov	r0, r3
 8012446:	f7ff ff17 	bl	8012278 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801244a:	2001      	movs	r0, #1
 801244c:	f7fd fd1a 	bl	800fe84 <memp_malloc>
 8012450:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d03f      	beq.n	80124d8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012458:	2298      	movs	r2, #152	@ 0x98
 801245a:	2100      	movs	r1, #0
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f008 fcda 	bl	801ae16 <memset>
    pcb->prio = prio;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	79fa      	ldrb	r2, [r7, #7]
 8012466:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801246e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	22ff      	movs	r2, #255	@ 0xff
 8012486:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801248e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2206      	movs	r2, #6
 8012494:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2206      	movs	r2, #6
 801249c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2201      	movs	r2, #1
 80124aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80124ae:	4b0d      	ldr	r3, [pc, #52]	@ (80124e4 <tcp_alloc+0xf4>)
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80124b6:	4b0c      	ldr	r3, [pc, #48]	@ (80124e8 <tcp_alloc+0xf8>)
 80124b8:	781a      	ldrb	r2, [r3, #0]
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80124c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	4a08      	ldr	r2, [pc, #32]	@ (80124ec <tcp_alloc+0xfc>)
 80124cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4a07      	ldr	r2, [pc, #28]	@ (80124f0 <tcp_alloc+0x100>)
 80124d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80124d8:	68fb      	ldr	r3, [r7, #12]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	240076bc 	.word	0x240076bc
 80124e8:	240076d2 	.word	0x240076d2
 80124ec:	08012235 	.word	0x08012235
 80124f0:	006ddd00 	.word	0x006ddd00

080124f4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	4603      	mov	r3, r0
 80124fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80124fe:	2040      	movs	r0, #64	@ 0x40
 8012500:	f7ff ff76 	bl	80123f0 <tcp_alloc>
 8012504:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012506:	68fb      	ldr	r3, [r7, #12]
}
 8012508:	4618      	mov	r0, r3
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	683a      	ldr	r2, [r7, #0]
 8012524:	611a      	str	r2, [r3, #16]
  }
}
 8012526:	bf00      	nop
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
	...

08012534 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d00e      	beq.n	8012562 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7d1b      	ldrb	r3, [r3, #20]
 8012548:	2b01      	cmp	r3, #1
 801254a:	d106      	bne.n	801255a <tcp_recv+0x26>
 801254c:	4b07      	ldr	r3, [pc, #28]	@ (801256c <tcp_recv+0x38>)
 801254e:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 8012552:	4907      	ldr	r1, [pc, #28]	@ (8012570 <tcp_recv+0x3c>)
 8012554:	4807      	ldr	r0, [pc, #28]	@ (8012574 <tcp_recv+0x40>)
 8012556:	f008 fba5 	bl	801aca4 <iprintf>
    pcb->recv = recv;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	683a      	ldr	r2, [r7, #0]
 801255e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8012562:	bf00      	nop
 8012564:	3708      	adds	r7, #8
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	0801d794 	.word	0x0801d794
 8012570:	0801dae8 	.word	0x0801dae8
 8012574:	0801d804 	.word	0x0801d804

08012578 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00d      	beq.n	80125a4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	7d1b      	ldrb	r3, [r3, #20]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d106      	bne.n	801259e <tcp_sent+0x26>
 8012590:	4b06      	ldr	r3, [pc, #24]	@ (80125ac <tcp_sent+0x34>)
 8012592:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8012596:	4906      	ldr	r1, [pc, #24]	@ (80125b0 <tcp_sent+0x38>)
 8012598:	4806      	ldr	r0, [pc, #24]	@ (80125b4 <tcp_sent+0x3c>)
 801259a:	f008 fb83 	bl	801aca4 <iprintf>
    pcb->sent = sent;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	683a      	ldr	r2, [r7, #0]
 80125a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 80125a4:	bf00      	nop
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	0801d794 	.word	0x0801d794
 80125b0:	0801db10 	.word	0x0801db10
 80125b4:	0801d804 	.word	0x0801d804

080125b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d00e      	beq.n	80125e6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	7d1b      	ldrb	r3, [r3, #20]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d106      	bne.n	80125de <tcp_err+0x26>
 80125d0:	4b07      	ldr	r3, [pc, #28]	@ (80125f0 <tcp_err+0x38>)
 80125d2:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 80125d6:	4907      	ldr	r1, [pc, #28]	@ (80125f4 <tcp_err+0x3c>)
 80125d8:	4807      	ldr	r0, [pc, #28]	@ (80125f8 <tcp_err+0x40>)
 80125da:	f008 fb63 	bl	801aca4 <iprintf>
    pcb->errf = err;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	0801d794 	.word	0x0801d794
 80125f4:	0801db38 	.word	0x0801db38
 80125f8:	0801d804 	.word	0x0801d804

080125fc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d008      	beq.n	801261e <tcp_accept+0x22>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d104      	bne.n	801261e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	683a      	ldr	r2, [r7, #0]
 801261c:	619a      	str	r2, [r3, #24]
  }
}
 801261e:	bf00      	nop
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
	...

0801262c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	4613      	mov	r3, r2
 8012638:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	7d1b      	ldrb	r3, [r3, #20]
 801263e:	2b01      	cmp	r3, #1
 8012640:	d106      	bne.n	8012650 <tcp_poll+0x24>
 8012642:	4b09      	ldr	r3, [pc, #36]	@ (8012668 <tcp_poll+0x3c>)
 8012644:	f240 7203 	movw	r2, #1795	@ 0x703
 8012648:	4908      	ldr	r1, [pc, #32]	@ (801266c <tcp_poll+0x40>)
 801264a:	4809      	ldr	r0, [pc, #36]	@ (8012670 <tcp_poll+0x44>)
 801264c:	f008 fb2a 	bl	801aca4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	68ba      	ldr	r2, [r7, #8]
 8012654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	79fa      	ldrb	r2, [r7, #7]
 801265c:	771a      	strb	r2, [r3, #28]
}
 801265e:	bf00      	nop
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	0801d794 	.word	0x0801d794
 801266c:	0801db60 	.word	0x0801db60
 8012670:	0801d804 	.word	0x0801d804

08012674 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	7d1b      	ldrb	r3, [r3, #20]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d034      	beq.n	80126ee <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012688:	2b0a      	cmp	r3, #10
 801268a:	d030      	beq.n	80126ee <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012690:	2b01      	cmp	r3, #1
 8012692:	d02c      	beq.n	80126ee <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012698:	2b00      	cmp	r3, #0
 801269a:	d007      	beq.n	80126ac <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fe fa5b 	bl	8010b5c <pbuf_free>
      pcb->refused_data = NULL;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2200      	movs	r2, #0
 80126aa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7ff fd76 	bl	80121a2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2200      	movs	r2, #0
 80126ba:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80126c2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff fd6a 	bl	80121a2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7ff fd65 	bl	80121a2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	669a      	str	r2, [r3, #104]	@ 0x68
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80126ee:	bf00      	nop
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
	...

080126f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	683a      	ldr	r2, [r7, #0]
 8012708:	429a      	cmp	r2, r3
 801270a:	d105      	bne.n	8012718 <tcp_pcb_remove+0x20>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	68da      	ldr	r2, [r3, #12]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	e013      	b.n	8012740 <tcp_pcb_remove+0x48>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	60fb      	str	r3, [r7, #12]
 801271e:	e00c      	b.n	801273a <tcp_pcb_remove+0x42>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	68db      	ldr	r3, [r3, #12]
 8012724:	683a      	ldr	r2, [r7, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	d104      	bne.n	8012734 <tcp_pcb_remove+0x3c>
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	68da      	ldr	r2, [r3, #12]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	60da      	str	r2, [r3, #12]
 8012732:	e005      	b.n	8012740 <tcp_pcb_remove+0x48>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	60fb      	str	r3, [r7, #12]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1ef      	bne.n	8012720 <tcp_pcb_remove+0x28>
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	2200      	movs	r2, #0
 8012744:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012746:	6838      	ldr	r0, [r7, #0]
 8012748:	f7ff ff94 	bl	8012674 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	7d1b      	ldrb	r3, [r3, #20]
 8012750:	2b0a      	cmp	r3, #10
 8012752:	d013      	beq.n	801277c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012758:	2b01      	cmp	r3, #1
 801275a:	d00f      	beq.n	801277c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	7e9b      	ldrb	r3, [r3, #26]
 8012760:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8012764:	2b00      	cmp	r3, #0
 8012766:	d009      	beq.n	801277c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	7e9b      	ldrb	r3, [r3, #26]
 801276c:	f043 0302 	orr.w	r3, r3, #2
 8012770:	b2da      	uxtb	r2, r3
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012776:	6838      	ldr	r0, [r7, #0]
 8012778:	f003 f9b8 	bl	8015aec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	7d1b      	ldrb	r3, [r3, #20]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d020      	beq.n	80127c6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012788:	2b00      	cmp	r3, #0
 801278a:	d006      	beq.n	801279a <tcp_pcb_remove+0xa2>
 801278c:	4b13      	ldr	r3, [pc, #76]	@ (80127dc <tcp_pcb_remove+0xe4>)
 801278e:	f240 7253 	movw	r2, #1875	@ 0x753
 8012792:	4913      	ldr	r1, [pc, #76]	@ (80127e0 <tcp_pcb_remove+0xe8>)
 8012794:	4813      	ldr	r0, [pc, #76]	@ (80127e4 <tcp_pcb_remove+0xec>)
 8012796:	f008 fa85 	bl	801aca4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d006      	beq.n	80127b0 <tcp_pcb_remove+0xb8>
 80127a2:	4b0e      	ldr	r3, [pc, #56]	@ (80127dc <tcp_pcb_remove+0xe4>)
 80127a4:	f240 7254 	movw	r2, #1876	@ 0x754
 80127a8:	490f      	ldr	r1, [pc, #60]	@ (80127e8 <tcp_pcb_remove+0xf0>)
 80127aa:	480e      	ldr	r0, [pc, #56]	@ (80127e4 <tcp_pcb_remove+0xec>)
 80127ac:	f008 fa7a 	bl	801aca4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d006      	beq.n	80127c6 <tcp_pcb_remove+0xce>
 80127b8:	4b08      	ldr	r3, [pc, #32]	@ (80127dc <tcp_pcb_remove+0xe4>)
 80127ba:	f240 7256 	movw	r2, #1878	@ 0x756
 80127be:	490b      	ldr	r1, [pc, #44]	@ (80127ec <tcp_pcb_remove+0xf4>)
 80127c0:	4808      	ldr	r0, [pc, #32]	@ (80127e4 <tcp_pcb_remove+0xec>)
 80127c2:	f008 fa6f 	bl	801aca4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2200      	movs	r2, #0
 80127ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	2200      	movs	r2, #0
 80127d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80127d2:	bf00      	nop
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	0801d794 	.word	0x0801d794
 80127e0:	0801db80 	.word	0x0801db80
 80127e4:	0801d804 	.word	0x0801d804
 80127e8:	0801db98 	.word	0x0801db98
 80127ec:	0801dbb4 	.word	0x0801dbb4

080127f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b083      	sub	sp, #12
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80127f8:	4b07      	ldr	r3, [pc, #28]	@ (8012818 <tcp_next_iss+0x28>)
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	4b07      	ldr	r3, [pc, #28]	@ (801281c <tcp_next_iss+0x2c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4413      	add	r3, r2
 8012802:	4a05      	ldr	r2, [pc, #20]	@ (8012818 <tcp_next_iss+0x28>)
 8012804:	6013      	str	r3, [r2, #0]
  return iss;
 8012806:	4b04      	ldr	r3, [pc, #16]	@ (8012818 <tcp_next_iss+0x28>)
 8012808:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	2400002c 	.word	0x2400002c
 801281c:	240076bc 	.word	0x240076bc

08012820 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	6039      	str	r1, [r7, #0]
 801282a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801282c:	6838      	ldr	r0, [r7, #0]
 801282e:	f006 fd3d 	bl	80192ac <ip4_route>
 8012832:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d101      	bne.n	801283e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801283a:	88fb      	ldrh	r3, [r7, #6]
 801283c:	e010      	b.n	8012860 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012842:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012844:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d008      	beq.n	801285e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801284c:	897b      	ldrh	r3, [r7, #10]
 801284e:	3b28      	subs	r3, #40	@ 0x28
 8012850:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012852:	893a      	ldrh	r2, [r7, #8]
 8012854:	88fb      	ldrh	r3, [r7, #6]
 8012856:	4293      	cmp	r3, r2
 8012858:	bf28      	it	cs
 801285a:	4613      	movcs	r3, r2
 801285c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801285e:	88fb      	ldrh	r3, [r7, #6]
}
 8012860:	4618      	mov	r0, r3
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012876:	e011      	b.n	801289c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	429a      	cmp	r2, r3
 8012882:	d108      	bne.n	8012896 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f7fe fec6 	bl	801161c <tcp_abort>
      pcb = next;
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	60fb      	str	r3, [r7, #12]
 8012894:	e002      	b.n	801289c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1ea      	bne.n	8012878 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80128a2:	bf00      	nop
 80128a4:	bf00      	nop
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d02c      	beq.n	8012916 <tcp_netif_ip_addr_changed+0x6a>
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d028      	beq.n	8012916 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80128c4:	4b16      	ldr	r3, [pc, #88]	@ (8012920 <tcp_netif_ip_addr_changed+0x74>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4619      	mov	r1, r3
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f7ff ffcc 	bl	8012868 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80128d0:	4b14      	ldr	r3, [pc, #80]	@ (8012924 <tcp_netif_ip_addr_changed+0x78>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4619      	mov	r1, r3
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7ff ffc6 	bl	8012868 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d019      	beq.n	8012916 <tcp_netif_ip_addr_changed+0x6a>
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d015      	beq.n	8012916 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80128ea:	4b0f      	ldr	r3, [pc, #60]	@ (8012928 <tcp_netif_ip_addr_changed+0x7c>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	60fb      	str	r3, [r7, #12]
 80128f0:	e00e      	b.n	8012910 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	429a      	cmp	r2, r3
 8012902:	d103      	bne.n	801290c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1ed      	bne.n	80128f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012916:	bf00      	nop
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	240076c8 	.word	0x240076c8
 8012924:	240076c0 	.word	0x240076c0
 8012928:	240076c4 	.word	0x240076c4

0801292c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801292c:	b590      	push	{r4, r7, lr}
 801292e:	b08b      	sub	sp, #44	@ 0x2c
 8012930:	af02      	add	r7, sp, #8
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	4a81      	ldr	r2, [pc, #516]	@ (8012b40 <tcp_input+0x214>)
 801293c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	895b      	ldrh	r3, [r3, #10]
 8012942:	2b13      	cmp	r3, #19
 8012944:	f240 8396 	bls.w	8013074 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012948:	4b7e      	ldr	r3, [pc, #504]	@ (8012b44 <tcp_input+0x218>)
 801294a:	695b      	ldr	r3, [r3, #20]
 801294c:	4a7d      	ldr	r2, [pc, #500]	@ (8012b44 <tcp_input+0x218>)
 801294e:	6812      	ldr	r2, [r2, #0]
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f006 ff42 	bl	80197dc <ip4_addr_isbroadcast_u32>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	f040 838c 	bne.w	8013078 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012960:	4b78      	ldr	r3, [pc, #480]	@ (8012b44 <tcp_input+0x218>)
 8012962:	695b      	ldr	r3, [r3, #20]
 8012964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012968:	2be0      	cmp	r3, #224	@ 0xe0
 801296a:	f000 8385 	beq.w	8013078 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801296e:	4b74      	ldr	r3, [pc, #464]	@ (8012b40 <tcp_input+0x214>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	899b      	ldrh	r3, [r3, #12]
 8012974:	b29b      	uxth	r3, r3
 8012976:	4618      	mov	r0, r3
 8012978:	f7fc fe78 	bl	800f66c <lwip_htons>
 801297c:	4603      	mov	r3, r0
 801297e:	0b1b      	lsrs	r3, r3, #12
 8012980:	b29b      	uxth	r3, r3
 8012982:	b2db      	uxtb	r3, r3
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012988:	7cbb      	ldrb	r3, [r7, #18]
 801298a:	2b13      	cmp	r3, #19
 801298c:	f240 8376 	bls.w	801307c <tcp_input+0x750>
 8012990:	7cbb      	ldrb	r3, [r7, #18]
 8012992:	b29a      	uxth	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	891b      	ldrh	r3, [r3, #8]
 8012998:	429a      	cmp	r2, r3
 801299a:	f200 836f 	bhi.w	801307c <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801299e:	7cbb      	ldrb	r3, [r7, #18]
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	3b14      	subs	r3, #20
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	4b68      	ldr	r3, [pc, #416]	@ (8012b48 <tcp_input+0x21c>)
 80129a8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80129aa:	4b68      	ldr	r3, [pc, #416]	@ (8012b4c <tcp_input+0x220>)
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	895a      	ldrh	r2, [r3, #10]
 80129b4:	7cbb      	ldrb	r3, [r7, #18]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d30d      	bcc.n	80129d8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80129bc:	4b62      	ldr	r3, [pc, #392]	@ (8012b48 <tcp_input+0x21c>)
 80129be:	881a      	ldrh	r2, [r3, #0]
 80129c0:	4b63      	ldr	r3, [pc, #396]	@ (8012b50 <tcp_input+0x224>)
 80129c2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80129c4:	7cbb      	ldrb	r3, [r7, #18]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	425b      	negs	r3, r3
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	b21b      	sxth	r3, r3
 80129ce:	4619      	mov	r1, r3
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7fe f89f 	bl	8010b14 <pbuf_header>
 80129d6:	e055      	b.n	8012a84 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d105      	bne.n	80129ec <tcp_input+0xc0>
 80129e0:	4b5c      	ldr	r3, [pc, #368]	@ (8012b54 <tcp_input+0x228>)
 80129e2:	22b2      	movs	r2, #178	@ 0xb2
 80129e4:	495c      	ldr	r1, [pc, #368]	@ (8012b58 <tcp_input+0x22c>)
 80129e6:	485d      	ldr	r0, [pc, #372]	@ (8012b5c <tcp_input+0x230>)
 80129e8:	f008 f95c 	bl	801aca4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80129ec:	f06f 0113 	mvn.w	r1, #19
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7fe f88f 	bl	8010b14 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	895a      	ldrh	r2, [r3, #10]
 80129fa:	4b55      	ldr	r3, [pc, #340]	@ (8012b50 <tcp_input+0x224>)
 80129fc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80129fe:	4b52      	ldr	r3, [pc, #328]	@ (8012b48 <tcp_input+0x21c>)
 8012a00:	881a      	ldrh	r2, [r3, #0]
 8012a02:	4b53      	ldr	r3, [pc, #332]	@ (8012b50 <tcp_input+0x224>)
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	1ad3      	subs	r3, r2, r3
 8012a08:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8012a0a:	4b51      	ldr	r3, [pc, #324]	@ (8012b50 <tcp_input+0x224>)
 8012a0c:	881b      	ldrh	r3, [r3, #0]
 8012a0e:	425b      	negs	r3, r3
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	b21b      	sxth	r3, r3
 8012a14:	4619      	mov	r1, r3
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f7fe f87c 	bl	8010b14 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	895b      	ldrh	r3, [r3, #10]
 8012a22:	8a3a      	ldrh	r2, [r7, #16]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	f200 832b 	bhi.w	8013080 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4a46      	ldr	r2, [pc, #280]	@ (8012b4c <tcp_input+0x220>)
 8012a32:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	8a3b      	ldrh	r3, [r7, #16]
 8012a3a:	425b      	negs	r3, r3
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	b21b      	sxth	r3, r3
 8012a40:	4619      	mov	r1, r3
 8012a42:	4610      	mov	r0, r2
 8012a44:	f7fe f866 	bl	8010b14 <pbuf_header>
    p->tot_len -= opt2len;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	891a      	ldrh	r2, [r3, #8]
 8012a4c:	8a3b      	ldrh	r3, [r7, #16]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	895b      	ldrh	r3, [r3, #10]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d005      	beq.n	8012a6a <tcp_input+0x13e>
 8012a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8012b54 <tcp_input+0x228>)
 8012a60:	22cf      	movs	r2, #207	@ 0xcf
 8012a62:	493f      	ldr	r1, [pc, #252]	@ (8012b60 <tcp_input+0x234>)
 8012a64:	483d      	ldr	r0, [pc, #244]	@ (8012b5c <tcp_input+0x230>)
 8012a66:	f008 f91d 	bl	801aca4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	891a      	ldrh	r2, [r3, #8]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	891b      	ldrh	r3, [r3, #8]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d005      	beq.n	8012a84 <tcp_input+0x158>
 8012a78:	4b36      	ldr	r3, [pc, #216]	@ (8012b54 <tcp_input+0x228>)
 8012a7a:	22d0      	movs	r2, #208	@ 0xd0
 8012a7c:	4939      	ldr	r1, [pc, #228]	@ (8012b64 <tcp_input+0x238>)
 8012a7e:	4837      	ldr	r0, [pc, #220]	@ (8012b5c <tcp_input+0x230>)
 8012a80:	f008 f910 	bl	801aca4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012a84:	4b2e      	ldr	r3, [pc, #184]	@ (8012b40 <tcp_input+0x214>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8012b40 <tcp_input+0x214>)
 8012a8e:	6814      	ldr	r4, [r2, #0]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7fc fdeb 	bl	800f66c <lwip_htons>
 8012a96:	4603      	mov	r3, r0
 8012a98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012a9a:	4b29      	ldr	r3, [pc, #164]	@ (8012b40 <tcp_input+0x214>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	885b      	ldrh	r3, [r3, #2]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	4a27      	ldr	r2, [pc, #156]	@ (8012b40 <tcp_input+0x214>)
 8012aa4:	6814      	ldr	r4, [r2, #0]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fc fde0 	bl	800f66c <lwip_htons>
 8012aac:	4603      	mov	r3, r0
 8012aae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012ab0:	4b23      	ldr	r3, [pc, #140]	@ (8012b40 <tcp_input+0x214>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	4a22      	ldr	r2, [pc, #136]	@ (8012b40 <tcp_input+0x214>)
 8012ab8:	6814      	ldr	r4, [r2, #0]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fc fde4 	bl	800f688 <lwip_htonl>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	6063      	str	r3, [r4, #4]
 8012ac4:	6863      	ldr	r3, [r4, #4]
 8012ac6:	4a28      	ldr	r2, [pc, #160]	@ (8012b68 <tcp_input+0x23c>)
 8012ac8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012aca:	4b1d      	ldr	r3, [pc, #116]	@ (8012b40 <tcp_input+0x214>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8012b40 <tcp_input+0x214>)
 8012ad2:	6814      	ldr	r4, [r2, #0]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fc fdd7 	bl	800f688 <lwip_htonl>
 8012ada:	4603      	mov	r3, r0
 8012adc:	60a3      	str	r3, [r4, #8]
 8012ade:	68a3      	ldr	r3, [r4, #8]
 8012ae0:	4a22      	ldr	r2, [pc, #136]	@ (8012b6c <tcp_input+0x240>)
 8012ae2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012ae4:	4b16      	ldr	r3, [pc, #88]	@ (8012b40 <tcp_input+0x214>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	89db      	ldrh	r3, [r3, #14]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	4a14      	ldr	r2, [pc, #80]	@ (8012b40 <tcp_input+0x214>)
 8012aee:	6814      	ldr	r4, [r2, #0]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fc fdbb 	bl	800f66c <lwip_htons>
 8012af6:	4603      	mov	r3, r0
 8012af8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012afa:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <tcp_input+0x214>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	899b      	ldrh	r3, [r3, #12]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fc fdb2 	bl	800f66c <lwip_htons>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012b10:	b2da      	uxtb	r2, r3
 8012b12:	4b17      	ldr	r3, [pc, #92]	@ (8012b70 <tcp_input+0x244>)
 8012b14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	891b      	ldrh	r3, [r3, #8]
 8012b1a:	4a15      	ldr	r2, [pc, #84]	@ (8012b70 <tcp_input+0x244>)
 8012b1c:	7812      	ldrb	r2, [r2, #0]
 8012b1e:	f002 0203 	and.w	r2, r2, #3
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	bf14      	ite	ne
 8012b26:	2201      	movne	r2, #1
 8012b28:	2200      	moveq	r2, #0
 8012b2a:	b2d2      	uxtb	r2, r2
 8012b2c:	4413      	add	r3, r2
 8012b2e:	b29a      	uxth	r2, r3
 8012b30:	4b10      	ldr	r3, [pc, #64]	@ (8012b74 <tcp_input+0x248>)
 8012b32:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012b34:	2300      	movs	r3, #0
 8012b36:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b38:	4b0f      	ldr	r3, [pc, #60]	@ (8012b78 <tcp_input+0x24c>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	61fb      	str	r3, [r7, #28]
 8012b3e:	e081      	b.n	8012c44 <tcp_input+0x318>
 8012b40:	240076e4 	.word	0x240076e4
 8012b44:	240045a0 	.word	0x240045a0
 8012b48:	240076e8 	.word	0x240076e8
 8012b4c:	240076ec 	.word	0x240076ec
 8012b50:	240076ea 	.word	0x240076ea
 8012b54:	0801dbcc 	.word	0x0801dbcc
 8012b58:	0801dc34 	.word	0x0801dc34
 8012b5c:	0801dc44 	.word	0x0801dc44
 8012b60:	0801dc6c 	.word	0x0801dc6c
 8012b64:	0801dc78 	.word	0x0801dc78
 8012b68:	240076f4 	.word	0x240076f4
 8012b6c:	240076f8 	.word	0x240076f8
 8012b70:	24007700 	.word	0x24007700
 8012b74:	240076fe 	.word	0x240076fe
 8012b78:	240076c8 	.word	0x240076c8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	7d1b      	ldrb	r3, [r3, #20]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d105      	bne.n	8012b90 <tcp_input+0x264>
 8012b84:	4b6e      	ldr	r3, [pc, #440]	@ (8012d40 <tcp_input+0x414>)
 8012b86:	22e2      	movs	r2, #226	@ 0xe2
 8012b88:	496e      	ldr	r1, [pc, #440]	@ (8012d44 <tcp_input+0x418>)
 8012b8a:	486f      	ldr	r0, [pc, #444]	@ (8012d48 <tcp_input+0x41c>)
 8012b8c:	f008 f88a 	bl	801aca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	7d1b      	ldrb	r3, [r3, #20]
 8012b94:	2b0a      	cmp	r3, #10
 8012b96:	d105      	bne.n	8012ba4 <tcp_input+0x278>
 8012b98:	4b69      	ldr	r3, [pc, #420]	@ (8012d40 <tcp_input+0x414>)
 8012b9a:	22e3      	movs	r2, #227	@ 0xe3
 8012b9c:	496b      	ldr	r1, [pc, #428]	@ (8012d4c <tcp_input+0x420>)
 8012b9e:	486a      	ldr	r0, [pc, #424]	@ (8012d48 <tcp_input+0x41c>)
 8012ba0:	f008 f880 	bl	801aca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	7d1b      	ldrb	r3, [r3, #20]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d105      	bne.n	8012bb8 <tcp_input+0x28c>
 8012bac:	4b64      	ldr	r3, [pc, #400]	@ (8012d40 <tcp_input+0x414>)
 8012bae:	22e4      	movs	r2, #228	@ 0xe4
 8012bb0:	4967      	ldr	r1, [pc, #412]	@ (8012d50 <tcp_input+0x424>)
 8012bb2:	4865      	ldr	r0, [pc, #404]	@ (8012d48 <tcp_input+0x41c>)
 8012bb4:	f008 f876 	bl	801aca4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	8b1a      	ldrh	r2, [r3, #24]
 8012bbc:	4b65      	ldr	r3, [pc, #404]	@ (8012d54 <tcp_input+0x428>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	881b      	ldrh	r3, [r3, #0]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d138      	bne.n	8012c3a <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	8ada      	ldrh	r2, [r3, #22]
 8012bcc:	4b61      	ldr	r3, [pc, #388]	@ (8012d54 <tcp_input+0x428>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	885b      	ldrh	r3, [r3, #2]
 8012bd2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d130      	bne.n	8012c3a <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	685a      	ldr	r2, [r3, #4]
 8012bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8012d58 <tcp_input+0x42c>)
 8012bde:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d12a      	bne.n	8012c3a <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	4b5b      	ldr	r3, [pc, #364]	@ (8012d58 <tcp_input+0x42c>)
 8012bea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d124      	bne.n	8012c3a <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	69fa      	ldr	r2, [r7, #28]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d105      	bne.n	8012c06 <tcp_input+0x2da>
 8012bfa:	4b51      	ldr	r3, [pc, #324]	@ (8012d40 <tcp_input+0x414>)
 8012bfc:	22ec      	movs	r2, #236	@ 0xec
 8012bfe:	4957      	ldr	r1, [pc, #348]	@ (8012d5c <tcp_input+0x430>)
 8012c00:	4851      	ldr	r0, [pc, #324]	@ (8012d48 <tcp_input+0x41c>)
 8012c02:	f008 f84f 	bl	801aca4 <iprintf>
      if (prev != NULL) {
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d00a      	beq.n	8012c22 <tcp_input+0x2f6>
        prev->next = pcb->next;
 8012c0c:	69fb      	ldr	r3, [r7, #28]
 8012c0e:	68da      	ldr	r2, [r3, #12]
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012c14:	4b52      	ldr	r3, [pc, #328]	@ (8012d60 <tcp_input+0x434>)
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012c1c:	4a50      	ldr	r2, [pc, #320]	@ (8012d60 <tcp_input+0x434>)
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	69fa      	ldr	r2, [r7, #28]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d10f      	bne.n	8012c4c <tcp_input+0x320>
 8012c2c:	4b44      	ldr	r3, [pc, #272]	@ (8012d40 <tcp_input+0x414>)
 8012c2e:	22f4      	movs	r2, #244	@ 0xf4
 8012c30:	494c      	ldr	r1, [pc, #304]	@ (8012d64 <tcp_input+0x438>)
 8012c32:	4845      	ldr	r0, [pc, #276]	@ (8012d48 <tcp_input+0x41c>)
 8012c34:	f008 f836 	bl	801aca4 <iprintf>
      break;
 8012c38:	e008      	b.n	8012c4c <tcp_input+0x320>
    }
    prev = pcb;
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	61fb      	str	r3, [r7, #28]
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d198      	bne.n	8012b7c <tcp_input+0x250>
 8012c4a:	e000      	b.n	8012c4e <tcp_input+0x322>
      break;
 8012c4c:	bf00      	nop
  }

  if (pcb == NULL) {
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f040 808f 	bne.w	8012d74 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c56:	4b44      	ldr	r3, [pc, #272]	@ (8012d68 <tcp_input+0x43c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	61fb      	str	r3, [r7, #28]
 8012c5c:	e02f      	b.n	8012cbe <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	7d1b      	ldrb	r3, [r3, #20]
 8012c62:	2b0a      	cmp	r3, #10
 8012c64:	d005      	beq.n	8012c72 <tcp_input+0x346>
 8012c66:	4b36      	ldr	r3, [pc, #216]	@ (8012d40 <tcp_input+0x414>)
 8012c68:	22fe      	movs	r2, #254	@ 0xfe
 8012c6a:	4940      	ldr	r1, [pc, #256]	@ (8012d6c <tcp_input+0x440>)
 8012c6c:	4836      	ldr	r0, [pc, #216]	@ (8012d48 <tcp_input+0x41c>)
 8012c6e:	f008 f819 	bl	801aca4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	8b1a      	ldrh	r2, [r3, #24]
 8012c76:	4b37      	ldr	r3, [pc, #220]	@ (8012d54 <tcp_input+0x428>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	881b      	ldrh	r3, [r3, #0]
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d11a      	bne.n	8012cb8 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	8ada      	ldrh	r2, [r3, #22]
 8012c86:	4b33      	ldr	r3, [pc, #204]	@ (8012d54 <tcp_input+0x428>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	885b      	ldrh	r3, [r3, #2]
 8012c8c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d112      	bne.n	8012cb8 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	685a      	ldr	r2, [r3, #4]
 8012c96:	4b30      	ldr	r3, [pc, #192]	@ (8012d58 <tcp_input+0x42c>)
 8012c98:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d10c      	bne.n	8012cb8 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8012d58 <tcp_input+0x42c>)
 8012ca4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d106      	bne.n	8012cb8 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8012caa:	69f8      	ldr	r0, [r7, #28]
 8012cac:	f000 fb16 	bl	80132dc <tcp_timewait_input>
        pbuf_free(p);
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7fd ff53 	bl	8010b5c <pbuf_free>
        return;
 8012cb6:	e1e9      	b.n	801308c <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	61fb      	str	r3, [r7, #28]
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d1cc      	bne.n	8012c5e <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cc8:	4b29      	ldr	r3, [pc, #164]	@ (8012d70 <tcp_input+0x444>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	617b      	str	r3, [r7, #20]
 8012cce:	e019      	b.n	8012d04 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	8ada      	ldrh	r2, [r3, #22]
 8012cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8012d54 <tcp_input+0x428>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	885b      	ldrh	r3, [r3, #2]
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d10c      	bne.n	8012cfa <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8012d58 <tcp_input+0x42c>)
 8012ce6:	695b      	ldr	r3, [r3, #20]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d00f      	beq.n	8012d0c <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00d      	beq.n	8012d0e <tcp_input+0x3e2>
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d009      	beq.n	8012d0e <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	68db      	ldr	r3, [r3, #12]
 8012d02:	617b      	str	r3, [r7, #20]
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d1e2      	bne.n	8012cd0 <tcp_input+0x3a4>
 8012d0a:	e000      	b.n	8012d0e <tcp_input+0x3e2>
            break;
 8012d0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d02f      	beq.n	8012d74 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d00a      	beq.n	8012d30 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	68da      	ldr	r2, [r3, #12]
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012d22:	4b13      	ldr	r3, [pc, #76]	@ (8012d70 <tcp_input+0x444>)
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012d2a:	4a11      	ldr	r2, [pc, #68]	@ (8012d70 <tcp_input+0x444>)
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012d30:	6978      	ldr	r0, [r7, #20]
 8012d32:	f000 f9f3 	bl	801311c <tcp_listen_input>
      pbuf_free(p);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7fd ff10 	bl	8010b5c <pbuf_free>
      return;
 8012d3c:	e1a6      	b.n	801308c <tcp_input+0x760>
 8012d3e:	bf00      	nop
 8012d40:	0801dbcc 	.word	0x0801dbcc
 8012d44:	0801dc98 	.word	0x0801dc98
 8012d48:	0801dc44 	.word	0x0801dc44
 8012d4c:	0801dcc0 	.word	0x0801dcc0
 8012d50:	0801dcec 	.word	0x0801dcec
 8012d54:	240076e4 	.word	0x240076e4
 8012d58:	240045a0 	.word	0x240045a0
 8012d5c:	0801dd14 	.word	0x0801dd14
 8012d60:	240076c8 	.word	0x240076c8
 8012d64:	0801dd40 	.word	0x0801dd40
 8012d68:	240076cc 	.word	0x240076cc
 8012d6c:	0801dd6c 	.word	0x0801dd6c
 8012d70:	240076c4 	.word	0x240076c4
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f000 8156 	beq.w	8013028 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012d7c:	4b94      	ldr	r3, [pc, #592]	@ (8012fd0 <tcp_input+0x6a4>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	891a      	ldrh	r2, [r3, #8]
 8012d86:	4b92      	ldr	r3, [pc, #584]	@ (8012fd0 <tcp_input+0x6a4>)
 8012d88:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012d8a:	4a91      	ldr	r2, [pc, #580]	@ (8012fd0 <tcp_input+0x6a4>)
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012d90:	4b90      	ldr	r3, [pc, #576]	@ (8012fd4 <tcp_input+0x6a8>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a8e      	ldr	r2, [pc, #568]	@ (8012fd0 <tcp_input+0x6a4>)
 8012d96:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012d98:	4b8f      	ldr	r3, [pc, #572]	@ (8012fd8 <tcp_input+0x6ac>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8012fdc <tcp_input+0x6b0>)
 8012da0:	2200      	movs	r2, #0
 8012da2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012da4:	4b8e      	ldr	r3, [pc, #568]	@ (8012fe0 <tcp_input+0x6b4>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012daa:	4b8e      	ldr	r3, [pc, #568]	@ (8012fe4 <tcp_input+0x6b8>)
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	f003 0308 	and.w	r3, r3, #8
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d006      	beq.n	8012dc4 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	7b5b      	ldrb	r3, [r3, #13]
 8012dba:	f043 0301 	orr.w	r3, r3, #1
 8012dbe:	b2da      	uxtb	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d017      	beq.n	8012dfc <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012dcc:	69f8      	ldr	r0, [r7, #28]
 8012dce:	f7ff f97f 	bl	80120d0 <tcp_process_refused_data>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	f113 0f0d 	cmn.w	r3, #13
 8012dd8:	d007      	beq.n	8012dea <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d00c      	beq.n	8012dfc <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012de2:	4b81      	ldr	r3, [pc, #516]	@ (8012fe8 <tcp_input+0x6bc>)
 8012de4:	881b      	ldrh	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d008      	beq.n	8012dfc <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f040 80e2 	bne.w	8012fb8 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012df4:	69f8      	ldr	r0, [r7, #28]
 8012df6:	f002 fe1d 	bl	8015a34 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012dfa:	e0dd      	b.n	8012fb8 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 8012dfc:	4a7b      	ldr	r2, [pc, #492]	@ (8012fec <tcp_input+0x6c0>)
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012e02:	69f8      	ldr	r0, [r7, #28]
 8012e04:	f000 fad2 	bl	80133ac <tcp_process>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012e0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e10:	f113 0f0d 	cmn.w	r3, #13
 8012e14:	f000 80d2 	beq.w	8012fbc <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 8012e18:	4b70      	ldr	r3, [pc, #448]	@ (8012fdc <tcp_input+0x6b0>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d016      	beq.n	8012e52 <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d008      	beq.n	8012e40 <tcp_input+0x514>
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e34:	69fa      	ldr	r2, [r7, #28]
 8012e36:	6912      	ldr	r2, [r2, #16]
 8012e38:	f06f 010d 	mvn.w	r1, #13
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e40:	69f9      	ldr	r1, [r7, #28]
 8012e42:	486b      	ldr	r0, [pc, #428]	@ (8012ff0 <tcp_input+0x6c4>)
 8012e44:	f7ff fc58 	bl	80126f8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012e48:	69f9      	ldr	r1, [r7, #28]
 8012e4a:	2001      	movs	r0, #1
 8012e4c:	f7fd f890 	bl	800ff70 <memp_free>
 8012e50:	e0d7      	b.n	8013002 <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 8012e52:	2300      	movs	r3, #0
 8012e54:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012e56:	4b62      	ldr	r3, [pc, #392]	@ (8012fe0 <tcp_input+0x6b4>)
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d01b      	beq.n	8012e96 <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e5e:	4b60      	ldr	r3, [pc, #384]	@ (8012fe0 <tcp_input+0x6b4>)
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e64:	69fb      	ldr	r3, [r7, #28]
 8012e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d009      	beq.n	8012e80 <tcp_input+0x554>
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012e70:	69fa      	ldr	r2, [r7, #28]
 8012e72:	6910      	ldr	r0, [r2, #16]
 8012e74:	89fa      	ldrh	r2, [r7, #14]
 8012e76:	69f9      	ldr	r1, [r7, #28]
 8012e78:	4798      	blx	r3
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	74fb      	strb	r3, [r7, #19]
 8012e7e:	e001      	b.n	8012e84 <tcp_input+0x558>
 8012e80:	2300      	movs	r3, #0
 8012e82:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e88:	f113 0f0d 	cmn.w	r3, #13
 8012e8c:	f000 8098 	beq.w	8012fc0 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e90:	4b53      	ldr	r3, [pc, #332]	@ (8012fe0 <tcp_input+0x6b4>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e96:	69f8      	ldr	r0, [r7, #28]
 8012e98:	f000 f90e 	bl	80130b8 <tcp_input_delayed_close>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f040 8090 	bne.w	8012fc4 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8012fd8 <tcp_input+0x6ac>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d041      	beq.n	8012f30 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d006      	beq.n	8012ec2 <tcp_input+0x596>
 8012eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8012ff4 <tcp_input+0x6c8>)
 8012eb6:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8012eba:	494f      	ldr	r1, [pc, #316]	@ (8012ff8 <tcp_input+0x6cc>)
 8012ebc:	484f      	ldr	r0, [pc, #316]	@ (8012ffc <tcp_input+0x6d0>)
 8012ebe:	f007 fef1 	bl	801aca4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	7e9b      	ldrb	r3, [r3, #26]
 8012ec6:	f003 0310 	and.w	r3, r3, #16
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d008      	beq.n	8012ee0 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012ece:	4b42      	ldr	r3, [pc, #264]	@ (8012fd8 <tcp_input+0x6ac>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fd fe42 	bl	8010b5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012ed8:	69f8      	ldr	r0, [r7, #28]
 8012eda:	f7fe fb9f 	bl	801161c <tcp_abort>
            goto aborted;
 8012ede:	e090      	b.n	8013002 <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d00c      	beq.n	8012f04 <tcp_input+0x5d8>
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	6918      	ldr	r0, [r3, #16]
 8012ef4:	4b38      	ldr	r3, [pc, #224]	@ (8012fd8 <tcp_input+0x6ac>)
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	2300      	movs	r3, #0
 8012efa:	69f9      	ldr	r1, [r7, #28]
 8012efc:	47a0      	blx	r4
 8012efe:	4603      	mov	r3, r0
 8012f00:	74fb      	strb	r3, [r7, #19]
 8012f02:	e008      	b.n	8012f16 <tcp_input+0x5ea>
 8012f04:	4b34      	ldr	r3, [pc, #208]	@ (8012fd8 <tcp_input+0x6ac>)
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	2300      	movs	r3, #0
 8012f0a:	69f9      	ldr	r1, [r7, #28]
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	f7ff f991 	bl	8012234 <tcp_recv_null>
 8012f12:	4603      	mov	r3, r0
 8012f14:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012f16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f1a:	f113 0f0d 	cmn.w	r3, #13
 8012f1e:	d053      	beq.n	8012fc8 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012f20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d003      	beq.n	8012f30 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012f28:	4b2b      	ldr	r3, [pc, #172]	@ (8012fd8 <tcp_input+0x6ac>)
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012f30:	4b2a      	ldr	r3, [pc, #168]	@ (8012fdc <tcp_input+0x6b0>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f003 0320 	and.w	r3, r3, #32
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d030      	beq.n	8012f9e <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d009      	beq.n	8012f58 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f48:	7b5a      	ldrb	r2, [r3, #13]
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f4e:	f042 0220 	orr.w	r2, r2, #32
 8012f52:	b2d2      	uxtb	r2, r2
 8012f54:	735a      	strb	r2, [r3, #13]
 8012f56:	e022      	b.n	8012f9e <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f5c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012f60:	d005      	beq.n	8012f6e <tcp_input+0x642>
              pcb->rcv_wnd++;
 8012f62:	69fb      	ldr	r3, [r7, #28]
 8012f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f66:	3301      	adds	r3, #1
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d00b      	beq.n	8012f90 <tcp_input+0x664>
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	6918      	ldr	r0, [r3, #16]
 8012f82:	2300      	movs	r3, #0
 8012f84:	2200      	movs	r2, #0
 8012f86:	69f9      	ldr	r1, [r7, #28]
 8012f88:	47a0      	blx	r4
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	74fb      	strb	r3, [r7, #19]
 8012f8e:	e001      	b.n	8012f94 <tcp_input+0x668>
 8012f90:	2300      	movs	r3, #0
 8012f92:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f98:	f113 0f0d 	cmn.w	r3, #13
 8012f9c:	d016      	beq.n	8012fcc <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f9e:	4b13      	ldr	r3, [pc, #76]	@ (8012fec <tcp_input+0x6c0>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012fa4:	69f8      	ldr	r0, [r7, #28]
 8012fa6:	f000 f887 	bl	80130b8 <tcp_input_delayed_close>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d127      	bne.n	8013000 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012fb0:	69f8      	ldr	r0, [r7, #28]
 8012fb2:	f002 fd9b 	bl	8015aec <tcp_output>
 8012fb6:	e024      	b.n	8013002 <tcp_input+0x6d6>
        goto aborted;
 8012fb8:	bf00      	nop
 8012fba:	e022      	b.n	8013002 <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012fbc:	bf00      	nop
 8012fbe:	e020      	b.n	8013002 <tcp_input+0x6d6>
              goto aborted;
 8012fc0:	bf00      	nop
 8012fc2:	e01e      	b.n	8013002 <tcp_input+0x6d6>
          goto aborted;
 8012fc4:	bf00      	nop
 8012fc6:	e01c      	b.n	8013002 <tcp_input+0x6d6>
            goto aborted;
 8012fc8:	bf00      	nop
 8012fca:	e01a      	b.n	8013002 <tcp_input+0x6d6>
              goto aborted;
 8012fcc:	bf00      	nop
 8012fce:	e018      	b.n	8013002 <tcp_input+0x6d6>
 8012fd0:	240076d4 	.word	0x240076d4
 8012fd4:	240076e4 	.word	0x240076e4
 8012fd8:	24007704 	.word	0x24007704
 8012fdc:	24007701 	.word	0x24007701
 8012fe0:	240076fc 	.word	0x240076fc
 8012fe4:	24007700 	.word	0x24007700
 8012fe8:	240076fe 	.word	0x240076fe
 8012fec:	24007708 	.word	0x24007708
 8012ff0:	240076c8 	.word	0x240076c8
 8012ff4:	0801dbcc 	.word	0x0801dbcc
 8012ff8:	0801dd9c 	.word	0x0801dd9c
 8012ffc:	0801dc44 	.word	0x0801dc44
          goto aborted;
 8013000:	bf00      	nop
    tcp_input_pcb = NULL;
 8013002:	4b24      	ldr	r3, [pc, #144]	@ (8013094 <tcp_input+0x768>)
 8013004:	2200      	movs	r2, #0
 8013006:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013008:	4b23      	ldr	r3, [pc, #140]	@ (8013098 <tcp_input+0x76c>)
 801300a:	2200      	movs	r2, #0
 801300c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 801300e:	4b23      	ldr	r3, [pc, #140]	@ (801309c <tcp_input+0x770>)
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d039      	beq.n	801308a <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 8013016:	4b21      	ldr	r3, [pc, #132]	@ (801309c <tcp_input+0x770>)
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	f7fd fd9e 	bl	8010b5c <pbuf_free>
      inseg.p = NULL;
 8013020:	4b1e      	ldr	r3, [pc, #120]	@ (801309c <tcp_input+0x770>)
 8013022:	2200      	movs	r2, #0
 8013024:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013026:	e030      	b.n	801308a <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013028:	4b1d      	ldr	r3, [pc, #116]	@ (80130a0 <tcp_input+0x774>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	899b      	ldrh	r3, [r3, #12]
 801302e:	b29b      	uxth	r3, r3
 8013030:	4618      	mov	r0, r3
 8013032:	f7fc fb1b 	bl	800f66c <lwip_htons>
 8013036:	4603      	mov	r3, r0
 8013038:	f003 0304 	and.w	r3, r3, #4
 801303c:	2b00      	cmp	r3, #0
 801303e:	d115      	bne.n	801306c <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013040:	4b18      	ldr	r3, [pc, #96]	@ (80130a4 <tcp_input+0x778>)
 8013042:	6818      	ldr	r0, [r3, #0]
 8013044:	4b18      	ldr	r3, [pc, #96]	@ (80130a8 <tcp_input+0x77c>)
 8013046:	881b      	ldrh	r3, [r3, #0]
 8013048:	461a      	mov	r2, r3
 801304a:	4b18      	ldr	r3, [pc, #96]	@ (80130ac <tcp_input+0x780>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013050:	4b13      	ldr	r3, [pc, #76]	@ (80130a0 <tcp_input+0x774>)
 8013052:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013054:	885b      	ldrh	r3, [r3, #2]
 8013056:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013058:	4a11      	ldr	r2, [pc, #68]	@ (80130a0 <tcp_input+0x774>)
 801305a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801305c:	8812      	ldrh	r2, [r2, #0]
 801305e:	b292      	uxth	r2, r2
 8013060:	9201      	str	r2, [sp, #4]
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	4b12      	ldr	r3, [pc, #72]	@ (80130b0 <tcp_input+0x784>)
 8013066:	4a13      	ldr	r2, [pc, #76]	@ (80130b4 <tcp_input+0x788>)
 8013068:	f002 ffc4 	bl	8015ff4 <tcp_rst>
    pbuf_free(p);
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7fd fd75 	bl	8010b5c <pbuf_free>
  return;
 8013072:	e00a      	b.n	801308a <tcp_input+0x75e>
    goto dropped;
 8013074:	bf00      	nop
 8013076:	e004      	b.n	8013082 <tcp_input+0x756>
    goto dropped;
 8013078:	bf00      	nop
 801307a:	e002      	b.n	8013082 <tcp_input+0x756>
    goto dropped;
 801307c:	bf00      	nop
 801307e:	e000      	b.n	8013082 <tcp_input+0x756>
      goto dropped;
 8013080:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7fd fd6a 	bl	8010b5c <pbuf_free>
 8013088:	e000      	b.n	801308c <tcp_input+0x760>
  return;
 801308a:	bf00      	nop
}
 801308c:	3724      	adds	r7, #36	@ 0x24
 801308e:	46bd      	mov	sp, r7
 8013090:	bd90      	pop	{r4, r7, pc}
 8013092:	bf00      	nop
 8013094:	24007708 	.word	0x24007708
 8013098:	24007704 	.word	0x24007704
 801309c:	240076d4 	.word	0x240076d4
 80130a0:	240076e4 	.word	0x240076e4
 80130a4:	240076f8 	.word	0x240076f8
 80130a8:	240076fe 	.word	0x240076fe
 80130ac:	240076f4 	.word	0x240076f4
 80130b0:	240045b0 	.word	0x240045b0
 80130b4:	240045b4 	.word	0x240045b4

080130b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80130c0:	4b14      	ldr	r3, [pc, #80]	@ (8013114 <tcp_input_delayed_close+0x5c>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 0310 	and.w	r3, r3, #16
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d01d      	beq.n	8013108 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7e9b      	ldrb	r3, [r3, #26]
 80130d0:	f003 0310 	and.w	r3, r3, #16
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10d      	bne.n	80130f4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d008      	beq.n	80130f4 <tcp_input_delayed_close+0x3c>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	6912      	ldr	r2, [r2, #16]
 80130ec:	f06f 010e 	mvn.w	r1, #14
 80130f0:	4610      	mov	r0, r2
 80130f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130f4:	6879      	ldr	r1, [r7, #4]
 80130f6:	4808      	ldr	r0, [pc, #32]	@ (8013118 <tcp_input_delayed_close+0x60>)
 80130f8:	f7ff fafe 	bl	80126f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80130fc:	6879      	ldr	r1, [r7, #4]
 80130fe:	2001      	movs	r0, #1
 8013100:	f7fc ff36 	bl	800ff70 <memp_free>
    return 1;
 8013104:	2301      	movs	r3, #1
 8013106:	e000      	b.n	801310a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3708      	adds	r7, #8
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	24007701 	.word	0x24007701
 8013118:	240076c8 	.word	0x240076c8

0801311c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b088      	sub	sp, #32
 8013120:	af02      	add	r7, sp, #8
 8013122:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013124:	4b63      	ldr	r3, [pc, #396]	@ (80132b4 <tcp_listen_input+0x198>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f003 0304 	and.w	r3, r3, #4
 801312c:	2b00      	cmp	r3, #0
 801312e:	f040 80bb 	bne.w	80132a8 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013132:	4b60      	ldr	r3, [pc, #384]	@ (80132b4 <tcp_listen_input+0x198>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	f003 0310 	and.w	r3, r3, #16
 801313a:	2b00      	cmp	r3, #0
 801313c:	d016      	beq.n	801316c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801313e:	4b5e      	ldr	r3, [pc, #376]	@ (80132b8 <tcp_listen_input+0x19c>)
 8013140:	6818      	ldr	r0, [r3, #0]
 8013142:	4b5e      	ldr	r3, [pc, #376]	@ (80132bc <tcp_listen_input+0x1a0>)
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	4b5d      	ldr	r3, [pc, #372]	@ (80132c0 <tcp_listen_input+0x1a4>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801314e:	4b5d      	ldr	r3, [pc, #372]	@ (80132c4 <tcp_listen_input+0x1a8>)
 8013150:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013152:	885b      	ldrh	r3, [r3, #2]
 8013154:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013156:	4a5b      	ldr	r2, [pc, #364]	@ (80132c4 <tcp_listen_input+0x1a8>)
 8013158:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801315a:	8812      	ldrh	r2, [r2, #0]
 801315c:	b292      	uxth	r2, r2
 801315e:	9201      	str	r2, [sp, #4]
 8013160:	9300      	str	r3, [sp, #0]
 8013162:	4b59      	ldr	r3, [pc, #356]	@ (80132c8 <tcp_listen_input+0x1ac>)
 8013164:	4a59      	ldr	r2, [pc, #356]	@ (80132cc <tcp_listen_input+0x1b0>)
 8013166:	f002 ff45 	bl	8015ff4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801316a:	e09f      	b.n	80132ac <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 801316c:	4b51      	ldr	r3, [pc, #324]	@ (80132b4 <tcp_listen_input+0x198>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f003 0302 	and.w	r3, r3, #2
 8013174:	2b00      	cmp	r3, #0
 8013176:	f000 8099 	beq.w	80132ac <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7d5b      	ldrb	r3, [r3, #21]
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff f936 	bl	80123f0 <tcp_alloc>
 8013184:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d111      	bne.n	80131b0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	699b      	ldr	r3, [r3, #24]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d00a      	beq.n	80131aa <tcp_listen_input+0x8e>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	699b      	ldr	r3, [r3, #24]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	6910      	ldr	r0, [r2, #16]
 801319c:	f04f 32ff 	mov.w	r2, #4294967295
 80131a0:	2100      	movs	r1, #0
 80131a2:	4798      	blx	r3
 80131a4:	4603      	mov	r3, r0
 80131a6:	73bb      	strb	r3, [r7, #14]
      return;
 80131a8:	e081      	b.n	80132ae <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131aa:	23f0      	movs	r3, #240	@ 0xf0
 80131ac:	73bb      	strb	r3, [r7, #14]
      return;
 80131ae:	e07e      	b.n	80132ae <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80131b0:	4b47      	ldr	r3, [pc, #284]	@ (80132d0 <tcp_listen_input+0x1b4>)
 80131b2:	695a      	ldr	r2, [r3, #20]
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80131b8:	4b45      	ldr	r3, [pc, #276]	@ (80132d0 <tcp_listen_input+0x1b4>)
 80131ba:	691a      	ldr	r2, [r3, #16]
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	8ada      	ldrh	r2, [r3, #22]
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80131c8:	4b3e      	ldr	r3, [pc, #248]	@ (80132c4 <tcp_listen_input+0x1a8>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	2203      	movs	r2, #3
 80131d8:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80131da:	4b39      	ldr	r3, [pc, #228]	@ (80132c0 <tcp_listen_input+0x1a4>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	1c5a      	adds	r2, r3, #1
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80131ec:	6978      	ldr	r0, [r7, #20]
 80131ee:	f7ff faff 	bl	80127f0 <tcp_next_iss>
 80131f2:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	693a      	ldr	r2, [r7, #16]
 80131f8:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	693a      	ldr	r2, [r7, #16]
 80131fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	693a      	ldr	r2, [r7, #16]
 8013204:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	693a      	ldr	r2, [r7, #16]
 801320a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801320c:	4b2c      	ldr	r3, [pc, #176]	@ (80132c0 <tcp_listen_input+0x1a4>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	1e5a      	subs	r2, r3, #1
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	691a      	ldr	r2, [r3, #16]
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	7a1b      	ldrb	r3, [r3, #8]
 8013228:	f003 030c 	and.w	r3, r3, #12
 801322c:	b2da      	uxtb	r2, r3
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013232:	4b28      	ldr	r3, [pc, #160]	@ (80132d4 <tcp_listen_input+0x1b8>)
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	60da      	str	r2, [r3, #12]
 801323a:	4a26      	ldr	r2, [pc, #152]	@ (80132d4 <tcp_listen_input+0x1b8>)
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	6013      	str	r3, [r2, #0]
 8013240:	f003 f920 	bl	8016484 <tcp_timer_needed>
 8013244:	4b24      	ldr	r3, [pc, #144]	@ (80132d8 <tcp_listen_input+0x1bc>)
 8013246:	2201      	movs	r2, #1
 8013248:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801324a:	6978      	ldr	r0, [r7, #20]
 801324c:	f001 fd0e 	bl	8014c6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013250:	4b1c      	ldr	r3, [pc, #112]	@ (80132c4 <tcp_listen_input+0x1a8>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	89db      	ldrh	r3, [r3, #14]
 8013256:	b29a      	uxth	r2, r3
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7ff fad3 	bl	8012820 <tcp_eff_send_mss_impl>
 801327a:	4603      	mov	r3, r0
 801327c:	461a      	mov	r2, r3
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013282:	2112      	movs	r1, #18
 8013284:	6978      	ldr	r0, [r7, #20]
 8013286:	f002 fad9 	bl	801583c <tcp_enqueue_flags>
 801328a:	4603      	mov	r3, r0
 801328c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d004      	beq.n	80132a0 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8013296:	2100      	movs	r1, #0
 8013298:	6978      	ldr	r0, [r7, #20]
 801329a:	f7fe f90d 	bl	80114b8 <tcp_abandon>
      return;
 801329e:	e006      	b.n	80132ae <tcp_listen_input+0x192>
    tcp_output(npcb);
 80132a0:	6978      	ldr	r0, [r7, #20]
 80132a2:	f002 fc23 	bl	8015aec <tcp_output>
  return;
 80132a6:	e001      	b.n	80132ac <tcp_listen_input+0x190>
    return;
 80132a8:	bf00      	nop
 80132aa:	e000      	b.n	80132ae <tcp_listen_input+0x192>
  return;
 80132ac:	bf00      	nop
}
 80132ae:	3718      	adds	r7, #24
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	24007700 	.word	0x24007700
 80132b8:	240076f8 	.word	0x240076f8
 80132bc:	240076fe 	.word	0x240076fe
 80132c0:	240076f4 	.word	0x240076f4
 80132c4:	240076e4 	.word	0x240076e4
 80132c8:	240045b0 	.word	0x240045b0
 80132cc:	240045b4 	.word	0x240045b4
 80132d0:	240045a0 	.word	0x240045a0
 80132d4:	240076c8 	.word	0x240076c8
 80132d8:	240076d0 	.word	0x240076d0

080132dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af02      	add	r7, sp, #8
 80132e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80132e4:	4b29      	ldr	r3, [pc, #164]	@ (801338c <tcp_timewait_input+0xb0>)
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	f003 0304 	and.w	r3, r3, #4
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d146      	bne.n	801337e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80132f0:	4b26      	ldr	r3, [pc, #152]	@ (801338c <tcp_timewait_input+0xb0>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	f003 0302 	and.w	r3, r3, #2
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d027      	beq.n	801334c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80132fc:	4b24      	ldr	r3, [pc, #144]	@ (8013390 <tcp_timewait_input+0xb4>)
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	2b00      	cmp	r3, #0
 8013308:	db2a      	blt.n	8013360 <tcp_timewait_input+0x84>
 801330a:	4b21      	ldr	r3, [pc, #132]	@ (8013390 <tcp_timewait_input+0xb4>)
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013312:	6879      	ldr	r1, [r7, #4]
 8013314:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013316:	440b      	add	r3, r1
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	dc20      	bgt.n	8013360 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801331e:	4b1d      	ldr	r3, [pc, #116]	@ (8013394 <tcp_timewait_input+0xb8>)
 8013320:	6818      	ldr	r0, [r3, #0]
 8013322:	4b1d      	ldr	r3, [pc, #116]	@ (8013398 <tcp_timewait_input+0xbc>)
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	461a      	mov	r2, r3
 8013328:	4b19      	ldr	r3, [pc, #100]	@ (8013390 <tcp_timewait_input+0xb4>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801332e:	4b1b      	ldr	r3, [pc, #108]	@ (801339c <tcp_timewait_input+0xc0>)
 8013330:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013332:	885b      	ldrh	r3, [r3, #2]
 8013334:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013336:	4a19      	ldr	r2, [pc, #100]	@ (801339c <tcp_timewait_input+0xc0>)
 8013338:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801333a:	8812      	ldrh	r2, [r2, #0]
 801333c:	b292      	uxth	r2, r2
 801333e:	9201      	str	r2, [sp, #4]
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	4b17      	ldr	r3, [pc, #92]	@ (80133a0 <tcp_timewait_input+0xc4>)
 8013344:	4a17      	ldr	r2, [pc, #92]	@ (80133a4 <tcp_timewait_input+0xc8>)
 8013346:	f002 fe55 	bl	8015ff4 <tcp_rst>
      return;
 801334a:	e01b      	b.n	8013384 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 801334c:	4b0f      	ldr	r3, [pc, #60]	@ (801338c <tcp_timewait_input+0xb0>)
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	f003 0301 	and.w	r3, r3, #1
 8013354:	2b00      	cmp	r3, #0
 8013356:	d003      	beq.n	8013360 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013358:	4b13      	ldr	r3, [pc, #76]	@ (80133a8 <tcp_timewait_input+0xcc>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013360:	4b0d      	ldr	r3, [pc, #52]	@ (8013398 <tcp_timewait_input+0xbc>)
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d00c      	beq.n	8013382 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	7e9b      	ldrb	r3, [r3, #26]
 801336c:	f043 0302 	orr.w	r3, r3, #2
 8013370:	b2da      	uxtb	r2, r3
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f002 fbb8 	bl	8015aec <tcp_output>
  }
  return;
 801337c:	e001      	b.n	8013382 <tcp_timewait_input+0xa6>
    return;
 801337e:	bf00      	nop
 8013380:	e000      	b.n	8013384 <tcp_timewait_input+0xa8>
  return;
 8013382:	bf00      	nop
}
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	24007700 	.word	0x24007700
 8013390:	240076f4 	.word	0x240076f4
 8013394:	240076f8 	.word	0x240076f8
 8013398:	240076fe 	.word	0x240076fe
 801339c:	240076e4 	.word	0x240076e4
 80133a0:	240045b0 	.word	0x240045b0
 80133a4:	240045b4 	.word	0x240045b4
 80133a8:	240076bc 	.word	0x240076bc

080133ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b08a      	sub	sp, #40	@ 0x28
 80133b0:	af02      	add	r7, sp, #8
 80133b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80133bc:	4b93      	ldr	r3, [pc, #588]	@ (801360c <tcp_process+0x260>)
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	f003 0304 	and.w	r3, r3, #4
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d04e      	beq.n	8013466 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7d1b      	ldrb	r3, [r3, #20]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d108      	bne.n	80133e2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80133d4:	4b8e      	ldr	r3, [pc, #568]	@ (8013610 <tcp_process+0x264>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d123      	bne.n	8013424 <tcp_process+0x78>
        acceptable = 1;
 80133dc:	2301      	movs	r3, #1
 80133de:	76fb      	strb	r3, [r7, #27]
 80133e0:	e020      	b.n	8013424 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80133e6:	4b8b      	ldr	r3, [pc, #556]	@ (8013614 <tcp_process+0x268>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d102      	bne.n	80133f4 <tcp_process+0x48>
        acceptable = 1;
 80133ee:	2301      	movs	r3, #1
 80133f0:	76fb      	strb	r3, [r7, #27]
 80133f2:	e017      	b.n	8013424 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80133f4:	4b87      	ldr	r3, [pc, #540]	@ (8013614 <tcp_process+0x268>)
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	db10      	blt.n	8013424 <tcp_process+0x78>
 8013402:	4b84      	ldr	r3, [pc, #528]	@ (8013614 <tcp_process+0x268>)
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801340a:	6879      	ldr	r1, [r7, #4]
 801340c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801340e:	440b      	add	r3, r1
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	2b00      	cmp	r3, #0
 8013414:	dc06      	bgt.n	8013424 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	7e9b      	ldrb	r3, [r3, #26]
 801341a:	f043 0302 	orr.w	r3, r3, #2
 801341e:	b2da      	uxtb	r2, r3
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013424:	7efb      	ldrb	r3, [r7, #27]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d01b      	beq.n	8013462 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	7d1b      	ldrb	r3, [r3, #20]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d106      	bne.n	8013440 <tcp_process+0x94>
 8013432:	4b79      	ldr	r3, [pc, #484]	@ (8013618 <tcp_process+0x26c>)
 8013434:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013438:	4978      	ldr	r1, [pc, #480]	@ (801361c <tcp_process+0x270>)
 801343a:	4879      	ldr	r0, [pc, #484]	@ (8013620 <tcp_process+0x274>)
 801343c:	f007 fc32 	bl	801aca4 <iprintf>
      recv_flags |= TF_RESET;
 8013440:	4b78      	ldr	r3, [pc, #480]	@ (8013624 <tcp_process+0x278>)
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	f043 0308 	orr.w	r3, r3, #8
 8013448:	b2da      	uxtb	r2, r3
 801344a:	4b76      	ldr	r3, [pc, #472]	@ (8013624 <tcp_process+0x278>)
 801344c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	7e9b      	ldrb	r3, [r3, #26]
 8013452:	f023 0301 	bic.w	r3, r3, #1
 8013456:	b2da      	uxtb	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801345c:	f06f 030d 	mvn.w	r3, #13
 8013460:	e348      	b.n	8013af4 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013462:	2300      	movs	r3, #0
 8013464:	e346      	b.n	8013af4 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013466:	4b69      	ldr	r3, [pc, #420]	@ (801360c <tcp_process+0x260>)
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	f003 0302 	and.w	r3, r3, #2
 801346e:	2b00      	cmp	r3, #0
 8013470:	d010      	beq.n	8013494 <tcp_process+0xe8>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7d1b      	ldrb	r3, [r3, #20]
 8013476:	2b02      	cmp	r3, #2
 8013478:	d00c      	beq.n	8013494 <tcp_process+0xe8>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	7d1b      	ldrb	r3, [r3, #20]
 801347e:	2b03      	cmp	r3, #3
 8013480:	d008      	beq.n	8013494 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	7e9b      	ldrb	r3, [r3, #26]
 8013486:	f043 0302 	orr.w	r3, r3, #2
 801348a:	b2da      	uxtb	r2, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013490:	2300      	movs	r3, #0
 8013492:	e32f      	b.n	8013af4 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	7e9b      	ldrb	r3, [r3, #26]
 8013498:	f003 0310 	and.w	r3, r3, #16
 801349c:	2b00      	cmp	r3, #0
 801349e:	d103      	bne.n	80134a8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80134a0:	4b61      	ldr	r3, [pc, #388]	@ (8013628 <tcp_process+0x27c>)
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f001 fbdb 	bl	8014c6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	7d1b      	ldrb	r3, [r3, #20]
 80134ba:	3b02      	subs	r3, #2
 80134bc:	2b07      	cmp	r3, #7
 80134be:	f200 8309 	bhi.w	8013ad4 <tcp_process+0x728>
 80134c2:	a201      	add	r2, pc, #4	@ (adr r2, 80134c8 <tcp_process+0x11c>)
 80134c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134c8:	080134e9 	.word	0x080134e9
 80134cc:	080136df 	.word	0x080136df
 80134d0:	08013837 	.word	0x08013837
 80134d4:	08013861 	.word	0x08013861
 80134d8:	08013983 	.word	0x08013983
 80134dc:	08013837 	.word	0x08013837
 80134e0:	08013a0f 	.word	0x08013a0f
 80134e4:	08013a9f 	.word	0x08013a9f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80134e8:	4b48      	ldr	r3, [pc, #288]	@ (801360c <tcp_process+0x260>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	f003 0310 	and.w	r3, r3, #16
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f000 80ca 	beq.w	801368a <tcp_process+0x2de>
 80134f6:	4b45      	ldr	r3, [pc, #276]	@ (801360c <tcp_process+0x260>)
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	f003 0302 	and.w	r3, r3, #2
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 80c3 	beq.w	801368a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013508:	1c5a      	adds	r2, r3, #1
 801350a:	4b41      	ldr	r3, [pc, #260]	@ (8013610 <tcp_process+0x264>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	429a      	cmp	r2, r3
 8013510:	f040 80bb 	bne.w	801368a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8013514:	4b3f      	ldr	r3, [pc, #252]	@ (8013614 <tcp_process+0x268>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	1c5a      	adds	r2, r3, #1
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8013526:	4b3a      	ldr	r3, [pc, #232]	@ (8013610 <tcp_process+0x264>)
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801352e:	4b3f      	ldr	r3, [pc, #252]	@ (801362c <tcp_process+0x280>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	89db      	ldrh	r3, [r3, #14]
 8013534:	b29a      	uxth	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013548:	4b32      	ldr	r3, [pc, #200]	@ (8013614 <tcp_process+0x268>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	1e5a      	subs	r2, r3, #1
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2204      	movs	r2, #4
 8013556:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	3304      	adds	r3, #4
 8013560:	4619      	mov	r1, r3
 8013562:	4610      	mov	r0, r2
 8013564:	f7ff f95c 	bl	8012820 <tcp_eff_send_mss_impl>
 8013568:	4603      	mov	r3, r0
 801356a:	461a      	mov	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013574:	005b      	lsls	r3, r3, #1
 8013576:	f241 121c 	movw	r2, #4380	@ 0x111c
 801357a:	429a      	cmp	r2, r3
 801357c:	bf38      	it	cc
 801357e:	461a      	movcc	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013584:	009b      	lsls	r3, r3, #2
 8013586:	4293      	cmp	r3, r2
 8013588:	bf28      	it	cs
 801358a:	4613      	movcs	r3, r2
 801358c:	b29a      	uxth	r2, r3
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801359a:	2b00      	cmp	r3, #0
 801359c:	d106      	bne.n	80135ac <tcp_process+0x200>
 801359e:	4b1e      	ldr	r3, [pc, #120]	@ (8013618 <tcp_process+0x26c>)
 80135a0:	f240 321a 	movw	r2, #794	@ 0x31a
 80135a4:	4922      	ldr	r1, [pc, #136]	@ (8013630 <tcp_process+0x284>)
 80135a6:	481e      	ldr	r0, [pc, #120]	@ (8013620 <tcp_process+0x274>)
 80135a8:	f007 fb7c 	bl	801aca4 <iprintf>
      --pcb->snd_queuelen;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80135b2:	3b01      	subs	r3, #1
 80135b4:	b29a      	uxth	r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135c0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d111      	bne.n	80135ec <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80135cc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d106      	bne.n	80135e2 <tcp_process+0x236>
 80135d4:	4b10      	ldr	r3, [pc, #64]	@ (8013618 <tcp_process+0x26c>)
 80135d6:	f240 3222 	movw	r2, #802	@ 0x322
 80135da:	4916      	ldr	r1, [pc, #88]	@ (8013634 <tcp_process+0x288>)
 80135dc:	4810      	ldr	r0, [pc, #64]	@ (8013620 <tcp_process+0x274>)
 80135de:	f007 fb61 	bl	801aca4 <iprintf>
        pcb->unsent = rseg->next;
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	669a      	str	r2, [r3, #104]	@ 0x68
 80135ea:	e003      	b.n	80135f4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 80135f4:	69f8      	ldr	r0, [r7, #28]
 80135f6:	f7fe fde9 	bl	80121cc <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d11a      	bne.n	8013638 <tcp_process+0x28c>
        pcb->rtime = -1;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013608:	861a      	strh	r2, [r3, #48]	@ 0x30
 801360a:	e01c      	b.n	8013646 <tcp_process+0x29a>
 801360c:	24007700 	.word	0x24007700
 8013610:	240076f8 	.word	0x240076f8
 8013614:	240076f4 	.word	0x240076f4
 8013618:	0801dbcc 	.word	0x0801dbcc
 801361c:	0801ddb8 	.word	0x0801ddb8
 8013620:	0801dc44 	.word	0x0801dc44
 8013624:	24007701 	.word	0x24007701
 8013628:	240076bc 	.word	0x240076bc
 801362c:	240076e4 	.word	0x240076e4
 8013630:	0801ddd8 	.word	0x0801ddd8
 8013634:	0801ddf0 	.word	0x0801ddf0
      } else {
        pcb->rtime = 0;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2200      	movs	r2, #0
 801363c:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00a      	beq.n	8013666 <tcp_process+0x2ba>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	6910      	ldr	r0, [r2, #16]
 801365a:	2200      	movs	r2, #0
 801365c:	6879      	ldr	r1, [r7, #4]
 801365e:	4798      	blx	r3
 8013660:	4603      	mov	r3, r0
 8013662:	76bb      	strb	r3, [r7, #26]
 8013664:	e001      	b.n	801366a <tcp_process+0x2be>
 8013666:	2300      	movs	r3, #0
 8013668:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801366a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801366e:	f113 0f0d 	cmn.w	r3, #13
 8013672:	d102      	bne.n	801367a <tcp_process+0x2ce>
        return ERR_ABRT;
 8013674:	f06f 030c 	mvn.w	r3, #12
 8013678:	e23c      	b.n	8013af4 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7e9b      	ldrb	r3, [r3, #26]
 801367e:	f043 0302 	orr.w	r3, r3, #2
 8013682:	b2da      	uxtb	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8013688:	e226      	b.n	8013ad8 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 801368a:	4b93      	ldr	r3, [pc, #588]	@ (80138d8 <tcp_process+0x52c>)
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	f003 0310 	and.w	r3, r3, #16
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 8220 	beq.w	8013ad8 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013698:	4b90      	ldr	r3, [pc, #576]	@ (80138dc <tcp_process+0x530>)
 801369a:	6818      	ldr	r0, [r3, #0]
 801369c:	4b90      	ldr	r3, [pc, #576]	@ (80138e0 <tcp_process+0x534>)
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	461a      	mov	r2, r3
 80136a2:	4b90      	ldr	r3, [pc, #576]	@ (80138e4 <tcp_process+0x538>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136a8:	4b8f      	ldr	r3, [pc, #572]	@ (80138e8 <tcp_process+0x53c>)
 80136aa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80136ac:	885b      	ldrh	r3, [r3, #2]
 80136ae:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136b0:	4a8d      	ldr	r2, [pc, #564]	@ (80138e8 <tcp_process+0x53c>)
 80136b2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80136b4:	8812      	ldrh	r2, [r2, #0]
 80136b6:	b292      	uxth	r2, r2
 80136b8:	9201      	str	r2, [sp, #4]
 80136ba:	9300      	str	r3, [sp, #0]
 80136bc:	4b8b      	ldr	r3, [pc, #556]	@ (80138ec <tcp_process+0x540>)
 80136be:	4a8c      	ldr	r2, [pc, #560]	@ (80138f0 <tcp_process+0x544>)
 80136c0:	f002 fc98 	bl	8015ff4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80136ca:	2b05      	cmp	r3, #5
 80136cc:	f200 8204 	bhi.w	8013ad8 <tcp_process+0x72c>
        pcb->rtime = 0;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2200      	movs	r2, #0
 80136d4:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f002 fd02 	bl	80160e0 <tcp_rexmit_rto>
    break;
 80136dc:	e1fc      	b.n	8013ad8 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80136de:	4b7e      	ldr	r3, [pc, #504]	@ (80138d8 <tcp_process+0x52c>)
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	f003 0310 	and.w	r3, r3, #16
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f000 8091 	beq.w	801380e <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80136ec:	4b7b      	ldr	r3, [pc, #492]	@ (80138dc <tcp_process+0x530>)
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136f4:	1ad3      	subs	r3, r2, r3
 80136f6:	3b01      	subs	r3, #1
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	db71      	blt.n	80137e0 <tcp_process+0x434>
 80136fc:	4b77      	ldr	r3, [pc, #476]	@ (80138dc <tcp_process+0x530>)
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013704:	1ad3      	subs	r3, r2, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	dc6a      	bgt.n	80137e0 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2204      	movs	r2, #4
 801370e:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013714:	2b00      	cmp	r3, #0
 8013716:	d00b      	beq.n	8013730 <tcp_process+0x384>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801371c:	699b      	ldr	r3, [r3, #24]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d106      	bne.n	8013730 <tcp_process+0x384>
 8013722:	4b74      	ldr	r3, [pc, #464]	@ (80138f4 <tcp_process+0x548>)
 8013724:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013728:	4973      	ldr	r1, [pc, #460]	@ (80138f8 <tcp_process+0x54c>)
 801372a:	4874      	ldr	r0, [pc, #464]	@ (80138fc <tcp_process+0x550>)
 801372c:	f007 faba 	bl	801aca4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013734:	2b00      	cmp	r3, #0
 8013736:	d102      	bne.n	801373e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8013738:	23fa      	movs	r3, #250	@ 0xfa
 801373a:	76bb      	strb	r3, [r7, #26]
 801373c:	e011      	b.n	8013762 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013742:	699b      	ldr	r3, [r3, #24]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00a      	beq.n	801375e <tcp_process+0x3b2>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	6910      	ldr	r0, [r2, #16]
 8013752:	2200      	movs	r2, #0
 8013754:	6879      	ldr	r1, [r7, #4]
 8013756:	4798      	blx	r3
 8013758:	4603      	mov	r3, r0
 801375a:	76bb      	strb	r3, [r7, #26]
 801375c:	e001      	b.n	8013762 <tcp_process+0x3b6>
 801375e:	23f0      	movs	r3, #240	@ 0xf0
 8013760:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8013762:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00a      	beq.n	8013780 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801376a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801376e:	f113 0f0d 	cmn.w	r3, #13
 8013772:	d002      	beq.n	801377a <tcp_process+0x3ce>
            tcp_abort(pcb);
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7fd ff51 	bl	801161c <tcp_abort>
          }
          return ERR_ABRT;
 801377a:	f06f 030c 	mvn.w	r3, #12
 801377e:	e1b9      	b.n	8013af4 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 fa3d 	bl	8013c00 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013786:	4b5e      	ldr	r3, [pc, #376]	@ (8013900 <tcp_process+0x554>)
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d005      	beq.n	801379a <tcp_process+0x3ee>
          recv_acked--;
 801378e:	4b5c      	ldr	r3, [pc, #368]	@ (8013900 <tcp_process+0x554>)
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	3b01      	subs	r3, #1
 8013794:	b29a      	uxth	r2, r3
 8013796:	4b5a      	ldr	r3, [pc, #360]	@ (8013900 <tcp_process+0x554>)
 8013798:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	f241 121c 	movw	r2, #4380	@ 0x111c
 80137a4:	429a      	cmp	r2, r3
 80137a6:	bf38      	it	cc
 80137a8:	461a      	movcc	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	4293      	cmp	r3, r2
 80137b2:	bf28      	it	cs
 80137b4:	4613      	movcs	r3, r2
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80137be:	4b51      	ldr	r3, [pc, #324]	@ (8013904 <tcp_process+0x558>)
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	f003 0320 	and.w	r3, r3, #32
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d034      	beq.n	8013834 <tcp_process+0x488>
          tcp_ack_now(pcb);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	7e9b      	ldrb	r3, [r3, #26]
 80137ce:	f043 0302 	orr.w	r3, r3, #2
 80137d2:	b2da      	uxtb	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2207      	movs	r2, #7
 80137dc:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80137de:	e029      	b.n	8013834 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80137e0:	4b3e      	ldr	r3, [pc, #248]	@ (80138dc <tcp_process+0x530>)
 80137e2:	6818      	ldr	r0, [r3, #0]
 80137e4:	4b3e      	ldr	r3, [pc, #248]	@ (80138e0 <tcp_process+0x534>)
 80137e6:	881b      	ldrh	r3, [r3, #0]
 80137e8:	461a      	mov	r2, r3
 80137ea:	4b3e      	ldr	r3, [pc, #248]	@ (80138e4 <tcp_process+0x538>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80137f0:	4b3d      	ldr	r3, [pc, #244]	@ (80138e8 <tcp_process+0x53c>)
 80137f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80137f4:	885b      	ldrh	r3, [r3, #2]
 80137f6:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80137f8:	4a3b      	ldr	r2, [pc, #236]	@ (80138e8 <tcp_process+0x53c>)
 80137fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80137fc:	8812      	ldrh	r2, [r2, #0]
 80137fe:	b292      	uxth	r2, r2
 8013800:	9201      	str	r2, [sp, #4]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4b39      	ldr	r3, [pc, #228]	@ (80138ec <tcp_process+0x540>)
 8013806:	4a3a      	ldr	r2, [pc, #232]	@ (80138f0 <tcp_process+0x544>)
 8013808:	f002 fbf4 	bl	8015ff4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801380c:	e166      	b.n	8013adc <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801380e:	4b32      	ldr	r3, [pc, #200]	@ (80138d8 <tcp_process+0x52c>)
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	f003 0302 	and.w	r3, r3, #2
 8013816:	2b00      	cmp	r3, #0
 8013818:	f000 8160 	beq.w	8013adc <tcp_process+0x730>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013820:	1e5a      	subs	r2, r3, #1
 8013822:	4b30      	ldr	r3, [pc, #192]	@ (80138e4 <tcp_process+0x538>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	f040 8158 	bne.w	8013adc <tcp_process+0x730>
      tcp_rexmit(pcb);
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f002 fc8d 	bl	801614c <tcp_rexmit>
    break;
 8013832:	e153      	b.n	8013adc <tcp_process+0x730>
 8013834:	e152      	b.n	8013adc <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 f9e2 	bl	8013c00 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801383c:	4b31      	ldr	r3, [pc, #196]	@ (8013904 <tcp_process+0x558>)
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	f003 0320 	and.w	r3, r3, #32
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 814b 	beq.w	8013ae0 <tcp_process+0x734>
      tcp_ack_now(pcb);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	7e9b      	ldrb	r3, [r3, #26]
 801384e:	f043 0302 	orr.w	r3, r3, #2
 8013852:	b2da      	uxtb	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2207      	movs	r2, #7
 801385c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801385e:	e13f      	b.n	8013ae0 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f9cd 	bl	8013c00 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013866:	4b27      	ldr	r3, [pc, #156]	@ (8013904 <tcp_process+0x558>)
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	f003 0320 	and.w	r3, r3, #32
 801386e:	2b00      	cmp	r3, #0
 8013870:	d070      	beq.n	8013954 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013872:	4b19      	ldr	r3, [pc, #100]	@ (80138d8 <tcp_process+0x52c>)
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	f003 0310 	and.w	r3, r3, #16
 801387a:	2b00      	cmp	r3, #0
 801387c:	d05f      	beq.n	801393e <tcp_process+0x592>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013882:	4b16      	ldr	r3, [pc, #88]	@ (80138dc <tcp_process+0x530>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	429a      	cmp	r2, r3
 8013888:	d159      	bne.n	801393e <tcp_process+0x592>
          pcb->unsent == NULL) {
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801388e:	2b00      	cmp	r3, #0
 8013890:	d155      	bne.n	801393e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	7e9b      	ldrb	r3, [r3, #26]
 8013896:	f043 0302 	orr.w	r3, r3, #2
 801389a:	b2da      	uxtb	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f7fe fee7 	bl	8012674 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80138a6:	4b18      	ldr	r3, [pc, #96]	@ (8013908 <tcp_process+0x55c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d105      	bne.n	80138bc <tcp_process+0x510>
 80138b0:	4b15      	ldr	r3, [pc, #84]	@ (8013908 <tcp_process+0x55c>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	68db      	ldr	r3, [r3, #12]
 80138b6:	4a14      	ldr	r2, [pc, #80]	@ (8013908 <tcp_process+0x55c>)
 80138b8:	6013      	str	r3, [r2, #0]
 80138ba:	e02d      	b.n	8013918 <tcp_process+0x56c>
 80138bc:	4b12      	ldr	r3, [pc, #72]	@ (8013908 <tcp_process+0x55c>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	617b      	str	r3, [r7, #20]
 80138c2:	e026      	b.n	8013912 <tcp_process+0x566>
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d11e      	bne.n	801390c <tcp_process+0x560>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	68da      	ldr	r2, [r3, #12]
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	60da      	str	r2, [r3, #12]
 80138d6:	e01f      	b.n	8013918 <tcp_process+0x56c>
 80138d8:	24007700 	.word	0x24007700
 80138dc:	240076f8 	.word	0x240076f8
 80138e0:	240076fe 	.word	0x240076fe
 80138e4:	240076f4 	.word	0x240076f4
 80138e8:	240076e4 	.word	0x240076e4
 80138ec:	240045b0 	.word	0x240045b0
 80138f0:	240045b4 	.word	0x240045b4
 80138f4:	0801dbcc 	.word	0x0801dbcc
 80138f8:	0801de04 	.word	0x0801de04
 80138fc:	0801dc44 	.word	0x0801dc44
 8013900:	240076fc 	.word	0x240076fc
 8013904:	24007701 	.word	0x24007701
 8013908:	240076c8 	.word	0x240076c8
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	617b      	str	r3, [r7, #20]
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d1d5      	bne.n	80138c4 <tcp_process+0x518>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2200      	movs	r2, #0
 801391c:	60da      	str	r2, [r3, #12]
 801391e:	4b77      	ldr	r3, [pc, #476]	@ (8013afc <tcp_process+0x750>)
 8013920:	2201      	movs	r2, #1
 8013922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	220a      	movs	r2, #10
 8013928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801392a:	4b75      	ldr	r3, [pc, #468]	@ (8013b00 <tcp_process+0x754>)
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	60da      	str	r2, [r3, #12]
 8013932:	4a73      	ldr	r2, [pc, #460]	@ (8013b00 <tcp_process+0x754>)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	f002 fda4 	bl	8016484 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801393c:	e0d2      	b.n	8013ae4 <tcp_process+0x738>
        tcp_ack_now(pcb);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	7e9b      	ldrb	r3, [r3, #26]
 8013942:	f043 0302 	orr.w	r3, r3, #2
 8013946:	b2da      	uxtb	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2208      	movs	r2, #8
 8013950:	751a      	strb	r2, [r3, #20]
    break;
 8013952:	e0c7      	b.n	8013ae4 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013954:	4b6b      	ldr	r3, [pc, #428]	@ (8013b04 <tcp_process+0x758>)
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f003 0310 	and.w	r3, r3, #16
 801395c:	2b00      	cmp	r3, #0
 801395e:	f000 80c1 	beq.w	8013ae4 <tcp_process+0x738>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013966:	4b68      	ldr	r3, [pc, #416]	@ (8013b08 <tcp_process+0x75c>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	429a      	cmp	r2, r3
 801396c:	f040 80ba 	bne.w	8013ae4 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013974:	2b00      	cmp	r3, #0
 8013976:	f040 80b5 	bne.w	8013ae4 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2206      	movs	r2, #6
 801397e:	751a      	strb	r2, [r3, #20]
    break;
 8013980:	e0b0      	b.n	8013ae4 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f000 f93c 	bl	8013c00 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013988:	4b60      	ldr	r3, [pc, #384]	@ (8013b0c <tcp_process+0x760>)
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	f003 0320 	and.w	r3, r3, #32
 8013990:	2b00      	cmp	r3, #0
 8013992:	f000 80a9 	beq.w	8013ae8 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	7e9b      	ldrb	r3, [r3, #26]
 801399a:	f043 0302 	orr.w	r3, r3, #2
 801399e:	b2da      	uxtb	r2, r3
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7fe fe65 	bl	8012674 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80139aa:	4b59      	ldr	r3, [pc, #356]	@ (8013b10 <tcp_process+0x764>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d105      	bne.n	80139c0 <tcp_process+0x614>
 80139b4:	4b56      	ldr	r3, [pc, #344]	@ (8013b10 <tcp_process+0x764>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	4a55      	ldr	r2, [pc, #340]	@ (8013b10 <tcp_process+0x764>)
 80139bc:	6013      	str	r3, [r2, #0]
 80139be:	e013      	b.n	80139e8 <tcp_process+0x63c>
 80139c0:	4b53      	ldr	r3, [pc, #332]	@ (8013b10 <tcp_process+0x764>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	613b      	str	r3, [r7, #16]
 80139c6:	e00c      	b.n	80139e2 <tcp_process+0x636>
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	687a      	ldr	r2, [r7, #4]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d104      	bne.n	80139dc <tcp_process+0x630>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	68da      	ldr	r2, [r3, #12]
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	60da      	str	r2, [r3, #12]
 80139da:	e005      	b.n	80139e8 <tcp_process+0x63c>
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	613b      	str	r3, [r7, #16]
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d1ef      	bne.n	80139c8 <tcp_process+0x61c>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	60da      	str	r2, [r3, #12]
 80139ee:	4b43      	ldr	r3, [pc, #268]	@ (8013afc <tcp_process+0x750>)
 80139f0:	2201      	movs	r2, #1
 80139f2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	220a      	movs	r2, #10
 80139f8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80139fa:	4b41      	ldr	r3, [pc, #260]	@ (8013b00 <tcp_process+0x754>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	60da      	str	r2, [r3, #12]
 8013a02:	4a3f      	ldr	r2, [pc, #252]	@ (8013b00 <tcp_process+0x754>)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6013      	str	r3, [r2, #0]
 8013a08:	f002 fd3c 	bl	8016484 <tcp_timer_needed>
    }
    break;
 8013a0c:	e06c      	b.n	8013ae8 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f000 f8f6 	bl	8013c00 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013a14:	4b3b      	ldr	r3, [pc, #236]	@ (8013b04 <tcp_process+0x758>)
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	f003 0310 	and.w	r3, r3, #16
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d065      	beq.n	8013aec <tcp_process+0x740>
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013a24:	4b38      	ldr	r3, [pc, #224]	@ (8013b08 <tcp_process+0x75c>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d15f      	bne.n	8013aec <tcp_process+0x740>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d15b      	bne.n	8013aec <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7fe fe1d 	bl	8012674 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013a3a:	4b35      	ldr	r3, [pc, #212]	@ (8013b10 <tcp_process+0x764>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d105      	bne.n	8013a50 <tcp_process+0x6a4>
 8013a44:	4b32      	ldr	r3, [pc, #200]	@ (8013b10 <tcp_process+0x764>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	4a31      	ldr	r2, [pc, #196]	@ (8013b10 <tcp_process+0x764>)
 8013a4c:	6013      	str	r3, [r2, #0]
 8013a4e:	e013      	b.n	8013a78 <tcp_process+0x6cc>
 8013a50:	4b2f      	ldr	r3, [pc, #188]	@ (8013b10 <tcp_process+0x764>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	60fb      	str	r3, [r7, #12]
 8013a56:	e00c      	b.n	8013a72 <tcp_process+0x6c6>
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d104      	bne.n	8013a6c <tcp_process+0x6c0>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68da      	ldr	r2, [r3, #12]
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	60da      	str	r2, [r3, #12]
 8013a6a:	e005      	b.n	8013a78 <tcp_process+0x6cc>
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	60fb      	str	r3, [r7, #12]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d1ef      	bne.n	8013a58 <tcp_process+0x6ac>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	60da      	str	r2, [r3, #12]
 8013a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8013afc <tcp_process+0x750>)
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	220a      	movs	r2, #10
 8013a88:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8013b00 <tcp_process+0x754>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	60da      	str	r2, [r3, #12]
 8013a92:	4a1b      	ldr	r2, [pc, #108]	@ (8013b00 <tcp_process+0x754>)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6013      	str	r3, [r2, #0]
 8013a98:	f002 fcf4 	bl	8016484 <tcp_timer_needed>
    }
    break;
 8013a9c:	e026      	b.n	8013aec <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 f8ae 	bl	8013c00 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013aa4:	4b17      	ldr	r3, [pc, #92]	@ (8013b04 <tcp_process+0x758>)
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	f003 0310 	and.w	r3, r3, #16
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01f      	beq.n	8013af0 <tcp_process+0x744>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013ab4:	4b14      	ldr	r3, [pc, #80]	@ (8013b08 <tcp_process+0x75c>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d119      	bne.n	8013af0 <tcp_process+0x744>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d115      	bne.n	8013af0 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8013ac4:	4b11      	ldr	r3, [pc, #68]	@ (8013b0c <tcp_process+0x760>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f043 0310 	orr.w	r3, r3, #16
 8013acc:	b2da      	uxtb	r2, r3
 8013ace:	4b0f      	ldr	r3, [pc, #60]	@ (8013b0c <tcp_process+0x760>)
 8013ad0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8013ad2:	e00d      	b.n	8013af0 <tcp_process+0x744>
  default:
    break;
 8013ad4:	bf00      	nop
 8013ad6:	e00c      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013ad8:	bf00      	nop
 8013ada:	e00a      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013adc:	bf00      	nop
 8013ade:	e008      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013ae0:	bf00      	nop
 8013ae2:	e006      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013ae4:	bf00      	nop
 8013ae6:	e004      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013ae8:	bf00      	nop
 8013aea:	e002      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013aec:	bf00      	nop
 8013aee:	e000      	b.n	8013af2 <tcp_process+0x746>
    break;
 8013af0:	bf00      	nop
  }
  return ERR_OK;
 8013af2:	2300      	movs	r3, #0
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3720      	adds	r7, #32
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}
 8013afc:	240076d0 	.word	0x240076d0
 8013b00:	240076cc 	.word	0x240076cc
 8013b04:	24007700 	.word	0x24007700
 8013b08:	240076f8 	.word	0x240076f8
 8013b0c:	24007701 	.word	0x24007701
 8013b10:	240076c8 	.word	0x240076c8

08013b14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013b14:	b590      	push	{r4, r7, lr}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	899b      	ldrh	r3, [r3, #12]
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7fb fda0 	bl	800f66c <lwip_htons>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	f003 0301 	and.w	r3, r3, #1
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d027      	beq.n	8013b86 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013b36:	6838      	ldr	r0, [r7, #0]
 8013b38:	f7fe fb33 	bl	80121a2 <tcp_segs_free>
    next = NULL;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	603b      	str	r3, [r7, #0]
 8013b40:	e055      	b.n	8013bee <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	899b      	ldrh	r3, [r3, #12]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fb fd8e 	bl	800f66c <lwip_htons>
 8013b50:	4603      	mov	r3, r0
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00d      	beq.n	8013b76 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	68db      	ldr	r3, [r3, #12]
 8013b5e:	899b      	ldrh	r3, [r3, #12]
 8013b60:	b29c      	uxth	r4, r3
 8013b62:	2001      	movs	r0, #1
 8013b64:	f7fb fd82 	bl	800f66c <lwip_htons>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	4322      	orrs	r2, r4
 8013b72:	b292      	uxth	r2, r2
 8013b74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f7fe fb23 	bl	80121cc <tcp_seg_free>
    while (next &&
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d00e      	beq.n	8013baa <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	891b      	ldrh	r3, [r3, #8]
 8013b90:	461a      	mov	r2, r3
 8013b92:	4b1a      	ldr	r3, [pc, #104]	@ (8013bfc <tcp_oos_insert_segment+0xe8>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	441a      	add	r2, r3
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	6839      	ldr	r1, [r7, #0]
 8013ba0:	8909      	ldrh	r1, [r1, #8]
 8013ba2:	440b      	add	r3, r1
 8013ba4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	dacb      	bge.n	8013b42 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d01e      	beq.n	8013bee <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	891b      	ldrh	r3, [r3, #8]
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	4b11      	ldr	r3, [pc, #68]	@ (8013bfc <tcp_oos_insert_segment+0xe8>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	441a      	add	r2, r3
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	dd12      	ble.n	8013bee <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8013bfc <tcp_oos_insert_segment+0xe8>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	1ad3      	subs	r3, r2, r3
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	685a      	ldr	r2, [r3, #4]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	891b      	ldrh	r3, [r3, #8]
 8013be6:	4619      	mov	r1, r3
 8013be8:	4610      	mov	r0, r2
 8013bea:	f7fc fe43 	bl	8010874 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	683a      	ldr	r2, [r7, #0]
 8013bf2:	601a      	str	r2, [r3, #0]
}
 8013bf4:	bf00      	nop
 8013bf6:	3714      	adds	r7, #20
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd90      	pop	{r4, r7, pc}
 8013bfc:	240076f4 	.word	0x240076f4

08013c00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c02:	b08d      	sub	sp, #52	@ 0x34
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	7d1b      	ldrb	r3, [r3, #20]
 8013c10:	2b03      	cmp	r3, #3
 8013c12:	d806      	bhi.n	8013c22 <tcp_receive+0x22>
 8013c14:	4b98      	ldr	r3, [pc, #608]	@ (8013e78 <tcp_receive+0x278>)
 8013c16:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8013c1a:	4998      	ldr	r1, [pc, #608]	@ (8013e7c <tcp_receive+0x27c>)
 8013c1c:	4898      	ldr	r0, [pc, #608]	@ (8013e80 <tcp_receive+0x280>)
 8013c1e:	f007 f841 	bl	801aca4 <iprintf>

  if (flags & TCP_ACK) {
 8013c22:	4b98      	ldr	r3, [pc, #608]	@ (8013e84 <tcp_receive+0x284>)
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	f003 0310 	and.w	r3, r3, #16
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f000 82c1 	beq.w	80141b2 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c36:	461a      	mov	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c3c:	4413      	add	r3, r2
 8013c3e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c44:	4b90      	ldr	r3, [pc, #576]	@ (8013e88 <tcp_receive+0x288>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	1ad3      	subs	r3, r2, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	db1b      	blt.n	8013c86 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c52:	4b8d      	ldr	r3, [pc, #564]	@ (8013e88 <tcp_receive+0x288>)
 8013c54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d106      	bne.n	8013c68 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8013e8c <tcp_receive+0x28c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	1ad3      	subs	r3, r2, r3
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	db0e      	blt.n	8013c86 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013c6c:	4b87      	ldr	r3, [pc, #540]	@ (8013e8c <tcp_receive+0x28c>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d141      	bne.n	8013cf8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c74:	4b86      	ldr	r3, [pc, #536]	@ (8013e90 <tcp_receive+0x290>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	89db      	ldrh	r3, [r3, #14]
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d938      	bls.n	8013cf8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c86:	4b82      	ldr	r3, [pc, #520]	@ (8013e90 <tcp_receive+0x290>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	89db      	ldrh	r3, [r3, #14]
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d205      	bcs.n	8013cb0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 8013cb0:	4b75      	ldr	r3, [pc, #468]	@ (8013e88 <tcp_receive+0x288>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8013cb8:	4b74      	ldr	r3, [pc, #464]	@ (8013e8c <tcp_receive+0x28c>)
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d10d      	bne.n	8013ce6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d111      	bne.n	8013cf8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2201      	movs	r2, #1
 8013ce0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8013ce4:	e008      	b.n	8013cf8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d003      	beq.n	8013cf8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013cf8:	4b64      	ldr	r3, [pc, #400]	@ (8013e8c <tcp_receive+0x28c>)
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	dc53      	bgt.n	8013dae <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013d06:	4b63      	ldr	r3, [pc, #396]	@ (8013e94 <tcp_receive+0x294>)
 8013d08:	881b      	ldrh	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d146      	bne.n	8013d9c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8013d18:	4413      	add	r3, r2
 8013d1a:	697a      	ldr	r2, [r7, #20]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d13d      	bne.n	8013d9c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	db38      	blt.n	8013d9c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013d2e:	4b57      	ldr	r3, [pc, #348]	@ (8013e8c <tcp_receive+0x28c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d132      	bne.n	8013d9c <tcp_receive+0x19c>
              found_dupack = 1;
 8013d36:	2301      	movs	r3, #1
 8013d38:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d40:	2bff      	cmp	r3, #255	@ 0xff
 8013d42:	d007      	beq.n	8013d54 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d5a:	2b03      	cmp	r3, #3
 8013d5c:	d916      	bls.n	8013d8c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d68:	4413      	add	r3, r2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d912      	bls.n	8013d9c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d80:	4413      	add	r3, r2
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013d8a:	e007      	b.n	8013d9c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d92:	2b03      	cmp	r3, #3
 8013d94:	d102      	bne.n	8013d9c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f002 fa28 	bl	80161ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f040 816a 	bne.w	8014078 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2200      	movs	r2, #0
 8013da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013dac:	e164      	b.n	8014078 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013dae:	4b37      	ldr	r3, [pc, #220]	@ (8013e8c <tcp_receive+0x28c>)
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	3b01      	subs	r3, #1
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	f2c0 8108 	blt.w	8013fd0 <tcp_receive+0x3d0>
 8013dc0:	4b32      	ldr	r3, [pc, #200]	@ (8013e8c <tcp_receive+0x28c>)
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f300 8100 	bgt.w	8013fd0 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	7e9b      	ldrb	r3, [r3, #26]
 8013dd4:	f003 0304 	and.w	r3, r3, #4
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d00c      	beq.n	8013df6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	7e9b      	ldrb	r3, [r3, #26]
 8013de0:	f023 0304 	bic.w	r3, r3, #4
 8013de4:	b2da      	uxtb	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013e04:	10db      	asrs	r3, r3, #3
 8013e06:	b21b      	sxth	r3, r3
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4413      	add	r3, r2
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	b21a      	sxth	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013e26:	4b19      	ldr	r3, [pc, #100]	@ (8013e8c <tcp_receive+0x28c>)
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	7d1b      	ldrb	r3, [r3, #20]
 8013e32:	2b03      	cmp	r3, #3
 8013e34:	f240 8095 	bls.w	8013f62 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d227      	bcs.n	8013e98 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e52:	4413      	add	r3, r2
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	f240 8080 	bls.w	8013f62 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e6c:	4413      	add	r3, r2
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e76:	e074      	b.n	8013f62 <tcp_receive+0x362>
 8013e78:	0801dbcc 	.word	0x0801dbcc
 8013e7c:	0801de24 	.word	0x0801de24
 8013e80:	0801dc44 	.word	0x0801dc44
 8013e84:	24007700 	.word	0x24007700
 8013e88:	240076f4 	.word	0x240076f4
 8013e8c:	240076f8 	.word	0x240076f8
 8013e90:	240076e4 	.word	0x240076e4
 8013e94:	240076fe 	.word	0x240076fe
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ea8:	fb01 f303 	mul.w	r3, r1, r3
 8013eac:	6879      	ldr	r1, [r7, #4]
 8013eae:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8013eb2:	fb93 f3f1 	sdiv	r3, r3, r1
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4413      	add	r3, r2
 8013eba:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013ec2:	8a7a      	ldrh	r2, [r7, #18]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d94c      	bls.n	8013f62 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	8a7a      	ldrh	r2, [r7, #18]
 8013ecc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8013ed0:	e047      	b.n	8013f62 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8013ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fc fecf 	bl	8010c90 <pbuf_clen>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	429c      	cmp	r4, r3
 8013ef6:	d206      	bcs.n	8013f06 <tcp_receive+0x306>
 8013ef8:	4b70      	ldr	r3, [pc, #448]	@ (80140bc <tcp_receive+0x4bc>)
 8013efa:	f240 429e 	movw	r2, #1182	@ 0x49e
 8013efe:	4970      	ldr	r1, [pc, #448]	@ (80140c0 <tcp_receive+0x4c0>)
 8013f00:	4870      	ldr	r0, [pc, #448]	@ (80140c4 <tcp_receive+0x4c4>)
 8013f02:	f006 fecf 	bl	801aca4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7fc fec0 	bl	8010c90 <pbuf_clen>
 8013f10:	4603      	mov	r3, r0
 8013f12:	461a      	mov	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f1a:	1a9b      	subs	r3, r3, r2
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8013f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f26:	891a      	ldrh	r2, [r3, #8]
 8013f28:	4b67      	ldr	r3, [pc, #412]	@ (80140c8 <tcp_receive+0x4c8>)
 8013f2a:	881b      	ldrh	r3, [r3, #0]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	4b65      	ldr	r3, [pc, #404]	@ (80140c8 <tcp_receive+0x4c8>)
 8013f32:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013f34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f36:	f7fe f949 	bl	80121cc <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00e      	beq.n	8013f62 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10a      	bne.n	8013f62 <tcp_receive+0x362>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d106      	bne.n	8013f62 <tcp_receive+0x362>
 8013f54:	4b59      	ldr	r3, [pc, #356]	@ (80140bc <tcp_receive+0x4bc>)
 8013f56:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8013f5a:	495c      	ldr	r1, [pc, #368]	@ (80140cc <tcp_receive+0x4cc>)
 8013f5c:	4859      	ldr	r0, [pc, #356]	@ (80140c4 <tcp_receive+0x4c4>)
 8013f5e:	f006 fea1 	bl	801aca4 <iprintf>
      while (pcb->unacked != NULL &&
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d022      	beq.n	8013fb0 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fb fb88 	bl	800f688 <lwip_htonl>
 8013f78:	4604      	mov	r4, r0
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f7e:	891b      	ldrh	r3, [r3, #8]
 8013f80:	461d      	mov	r5, r3
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	899b      	ldrh	r3, [r3, #12]
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7fb fb6d 	bl	800f66c <lwip_htons>
 8013f92:	4603      	mov	r3, r0
 8013f94:	f003 0303 	and.w	r3, r3, #3
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <tcp_receive+0x3a0>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e000      	b.n	8013fa2 <tcp_receive+0x3a2>
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	442b      	add	r3, r5
 8013fa4:	18e2      	adds	r2, r4, r3
 8013fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80140d0 <tcp_receive+0x4d0>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	dd90      	ble.n	8013ed2 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d104      	bne.n	8013fc2 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013fbe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013fc0:	e002      	b.n	8013fc8 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	76da      	strb	r2, [r3, #27]
 8013fce:	e002      	b.n	8013fd6 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f001 fd2f 	bl	8015a34 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013fd6:	e04f      	b.n	8014078 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d103      	bne.n	8013ff8 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8013ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	4618      	mov	r0, r3
 8014004:	f7fc fe44 	bl	8010c90 <pbuf_clen>
 8014008:	4603      	mov	r3, r0
 801400a:	429c      	cmp	r4, r3
 801400c:	d206      	bcs.n	801401c <tcp_receive+0x41c>
 801400e:	4b2b      	ldr	r3, [pc, #172]	@ (80140bc <tcp_receive+0x4bc>)
 8014010:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014014:	492a      	ldr	r1, [pc, #168]	@ (80140c0 <tcp_receive+0x4c0>)
 8014016:	482b      	ldr	r0, [pc, #172]	@ (80140c4 <tcp_receive+0x4c4>)
 8014018:	f006 fe44 	bl	801aca4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7fc fe35 	bl	8010c90 <pbuf_clen>
 8014026:	4603      	mov	r3, r0
 8014028:	461a      	mov	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014030:	1a9b      	subs	r3, r3, r2
 8014032:	b29a      	uxth	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 801403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801403c:	891a      	ldrh	r2, [r3, #8]
 801403e:	4b22      	ldr	r3, [pc, #136]	@ (80140c8 <tcp_receive+0x4c8>)
 8014040:	881b      	ldrh	r3, [r3, #0]
 8014042:	4413      	add	r3, r2
 8014044:	b29a      	uxth	r2, r3
 8014046:	4b20      	ldr	r3, [pc, #128]	@ (80140c8 <tcp_receive+0x4c8>)
 8014048:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 801404a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801404c:	f7fe f8be 	bl	80121cc <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00e      	beq.n	8014078 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801405e:	2b00      	cmp	r3, #0
 8014060:	d10a      	bne.n	8014078 <tcp_receive+0x478>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <tcp_receive+0x478>
 801406a:	4b14      	ldr	r3, [pc, #80]	@ (80140bc <tcp_receive+0x4bc>)
 801406c:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8014070:	4916      	ldr	r1, [pc, #88]	@ (80140cc <tcp_receive+0x4cc>)
 8014072:	4814      	ldr	r0, [pc, #80]	@ (80140c4 <tcp_receive+0x4c4>)
 8014074:	f006 fe16 	bl	801aca4 <iprintf>
    while (pcb->unsent != NULL &&
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801407c:	2b00      	cmp	r3, #0
 801407e:	d037      	beq.n	80140f0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014080:	4b13      	ldr	r3, [pc, #76]	@ (80140d0 <tcp_receive+0x4d0>)
 8014082:	681c      	ldr	r4, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	f7fb fafb 	bl	800f688 <lwip_htonl>
 8014092:	4605      	mov	r5, r0
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014098:	891b      	ldrh	r3, [r3, #8]
 801409a:	461e      	mov	r6, r3
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	899b      	ldrh	r3, [r3, #12]
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fb fae0 	bl	800f66c <lwip_htons>
 80140ac:	4603      	mov	r3, r0
 80140ae:	f003 0303 	and.w	r3, r3, #3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00e      	beq.n	80140d4 <tcp_receive+0x4d4>
 80140b6:	2301      	movs	r3, #1
 80140b8:	e00d      	b.n	80140d6 <tcp_receive+0x4d6>
 80140ba:	bf00      	nop
 80140bc:	0801dbcc 	.word	0x0801dbcc
 80140c0:	0801de40 	.word	0x0801de40
 80140c4:	0801dc44 	.word	0x0801dc44
 80140c8:	240076fc 	.word	0x240076fc
 80140cc:	0801de68 	.word	0x0801de68
 80140d0:	240076f8 	.word	0x240076f8
 80140d4:	2300      	movs	r3, #0
 80140d6:	4433      	add	r3, r6
 80140d8:	442b      	add	r3, r5
 80140da:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80140dc:	2b00      	cmp	r3, #0
 80140de:	db07      	blt.n	80140f0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80140e0:	4b8d      	ldr	r3, [pc, #564]	@ (8014318 <tcp_receive+0x718>)
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	f77f af74 	ble.w	8013fd8 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80140f6:	4b89      	ldr	r3, [pc, #548]	@ (801431c <tcp_receive+0x71c>)
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	4413      	add	r3, r2
 80140fc:	b29a      	uxth	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014108:	2b00      	cmp	r3, #0
 801410a:	d052      	beq.n	80141b2 <tcp_receive+0x5b2>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014110:	4b81      	ldr	r3, [pc, #516]	@ (8014318 <tcp_receive+0x718>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	1ad3      	subs	r3, r2, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	da4b      	bge.n	80141b2 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801411a:	4b81      	ldr	r3, [pc, #516]	@ (8014320 <tcp_receive+0x720>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	b29a      	uxth	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014124:	b29b      	uxth	r3, r3
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	b29b      	uxth	r3, r3
 801412a:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 801412c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014134:	10db      	asrs	r3, r3, #3
 8014136:	b21b      	sxth	r3, r3
 8014138:	b29b      	uxth	r3, r3
 801413a:	1ad3      	subs	r3, r2, r3
 801413c:	b29b      	uxth	r3, r3
 801413e:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014146:	b29a      	uxth	r2, r3
 8014148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801414a:	4413      	add	r3, r2
 801414c:	b29b      	uxth	r3, r3
 801414e:	b21a      	sxth	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014154:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014158:	2b00      	cmp	r3, #0
 801415a:	da03      	bge.n	8014164 <tcp_receive+0x564>
        m = -m;
 801415c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801415e:	425b      	negs	r3, r3
 8014160:	b29b      	uxth	r3, r3
 8014162:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8014164:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801416c:	109b      	asrs	r3, r3, #2
 801416e:	b21b      	sxth	r3, r3
 8014170:	b29b      	uxth	r3, r3
 8014172:	1ad3      	subs	r3, r2, r3
 8014174:	b29b      	uxth	r3, r3
 8014176:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801417e:	b29a      	uxth	r2, r3
 8014180:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014182:	4413      	add	r3, r2
 8014184:	b29b      	uxth	r3, r3
 8014186:	b21a      	sxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014192:	10db      	asrs	r3, r3, #3
 8014194:	b21b      	sxth	r3, r3
 8014196:	b29a      	uxth	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801419e:	b29b      	uxth	r3, r3
 80141a0:	4413      	add	r3, r2
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	b21a      	sxth	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2200      	movs	r2, #0
 80141b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80141b2:	4b5c      	ldr	r3, [pc, #368]	@ (8014324 <tcp_receive+0x724>)
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f000 84f1 	beq.w	8014b9e <tcp_receive+0xf9e>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	7d1b      	ldrb	r3, [r3, #20]
 80141c0:	2b06      	cmp	r3, #6
 80141c2:	f200 84ec 	bhi.w	8014b9e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141ca:	4b57      	ldr	r3, [pc, #348]	@ (8014328 <tcp_receive+0x728>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	3b01      	subs	r3, #1
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f2c0 80b8 	blt.w	8014348 <tcp_receive+0x748>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141dc:	4b51      	ldr	r3, [pc, #324]	@ (8014324 <tcp_receive+0x724>)
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	4619      	mov	r1, r3
 80141e2:	4b51      	ldr	r3, [pc, #324]	@ (8014328 <tcp_receive+0x728>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	440b      	add	r3, r1
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	3301      	adds	r3, #1
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f300 80ab 	bgt.w	8014348 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80141f2:	4b4e      	ldr	r3, [pc, #312]	@ (801432c <tcp_receive+0x72c>)
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141fc:	4b4a      	ldr	r3, [pc, #296]	@ (8014328 <tcp_receive+0x728>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014204:	4b49      	ldr	r3, [pc, #292]	@ (801432c <tcp_receive+0x72c>)
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d106      	bne.n	801421a <tcp_receive+0x61a>
 801420c:	4b48      	ldr	r3, [pc, #288]	@ (8014330 <tcp_receive+0x730>)
 801420e:	f240 523c 	movw	r2, #1340	@ 0x53c
 8014212:	4948      	ldr	r1, [pc, #288]	@ (8014334 <tcp_receive+0x734>)
 8014214:	4848      	ldr	r0, [pc, #288]	@ (8014338 <tcp_receive+0x738>)
 8014216:	f006 fd45 	bl	801aca4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801421c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014220:	4293      	cmp	r3, r2
 8014222:	dd06      	ble.n	8014232 <tcp_receive+0x632>
 8014224:	4b42      	ldr	r3, [pc, #264]	@ (8014330 <tcp_receive+0x730>)
 8014226:	f240 523d 	movw	r2, #1341	@ 0x53d
 801422a:	4944      	ldr	r1, [pc, #272]	@ (801433c <tcp_receive+0x73c>)
 801422c:	4842      	ldr	r0, [pc, #264]	@ (8014338 <tcp_receive+0x738>)
 801422e:	f006 fd39 	bl	801aca4 <iprintf>
      if (inseg.p->len < off) {
 8014232:	4b3e      	ldr	r3, [pc, #248]	@ (801432c <tcp_receive+0x72c>)
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	895b      	ldrh	r3, [r3, #10]
 8014238:	461a      	mov	r2, r3
 801423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801423c:	4293      	cmp	r3, r2
 801423e:	dd3e      	ble.n	80142be <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014240:	4b3a      	ldr	r3, [pc, #232]	@ (801432c <tcp_receive+0x72c>)
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	891b      	ldrh	r3, [r3, #8]
 8014246:	461a      	mov	r2, r3
 8014248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801424a:	4293      	cmp	r3, r2
 801424c:	dd06      	ble.n	801425c <tcp_receive+0x65c>
 801424e:	4b38      	ldr	r3, [pc, #224]	@ (8014330 <tcp_receive+0x730>)
 8014250:	f240 523f 	movw	r2, #1343	@ 0x53f
 8014254:	493a      	ldr	r1, [pc, #232]	@ (8014340 <tcp_receive+0x740>)
 8014256:	4838      	ldr	r0, [pc, #224]	@ (8014338 <tcp_receive+0x738>)
 8014258:	f006 fd24 	bl	801aca4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801425c:	4b33      	ldr	r3, [pc, #204]	@ (801432c <tcp_receive+0x72c>)
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	891a      	ldrh	r2, [r3, #8]
 8014262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014264:	b29b      	uxth	r3, r3
 8014266:	1ad3      	subs	r3, r2, r3
 8014268:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801426a:	e00e      	b.n	801428a <tcp_receive+0x68a>
          off -= p->len;
 801426c:	69bb      	ldr	r3, [r7, #24]
 801426e:	895b      	ldrh	r3, [r3, #10]
 8014270:	461a      	mov	r2, r3
 8014272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014274:	1a9b      	subs	r3, r3, r2
 8014276:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	8a3a      	ldrh	r2, [r7, #16]
 801427c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	2200      	movs	r2, #0
 8014282:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	895b      	ldrh	r3, [r3, #10]
 801428e:	461a      	mov	r2, r3
 8014290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014292:	4293      	cmp	r3, r2
 8014294:	dcea      	bgt.n	801426c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8014296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014298:	b29b      	uxth	r3, r3
 801429a:	425b      	negs	r3, r3
 801429c:	b29b      	uxth	r3, r3
 801429e:	b21b      	sxth	r3, r3
 80142a0:	4619      	mov	r1, r3
 80142a2:	69b8      	ldr	r0, [r7, #24]
 80142a4:	f7fc fc36 	bl	8010b14 <pbuf_header>
 80142a8:	4603      	mov	r3, r0
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d01c      	beq.n	80142e8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80142ae:	4b20      	ldr	r3, [pc, #128]	@ (8014330 <tcp_receive+0x730>)
 80142b0:	f240 524c 	movw	r2, #1356	@ 0x54c
 80142b4:	4923      	ldr	r1, [pc, #140]	@ (8014344 <tcp_receive+0x744>)
 80142b6:	4820      	ldr	r0, [pc, #128]	@ (8014338 <tcp_receive+0x738>)
 80142b8:	f006 fcf4 	bl	801aca4 <iprintf>
 80142bc:	e014      	b.n	80142e8 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80142be:	4b1b      	ldr	r3, [pc, #108]	@ (801432c <tcp_receive+0x72c>)
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142c4:	b292      	uxth	r2, r2
 80142c6:	4252      	negs	r2, r2
 80142c8:	b292      	uxth	r2, r2
 80142ca:	b212      	sxth	r2, r2
 80142cc:	4611      	mov	r1, r2
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7fc fc20 	bl	8010b14 <pbuf_header>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d006      	beq.n	80142e8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80142da:	4b15      	ldr	r3, [pc, #84]	@ (8014330 <tcp_receive+0x730>)
 80142dc:	f240 5251 	movw	r2, #1361	@ 0x551
 80142e0:	4918      	ldr	r1, [pc, #96]	@ (8014344 <tcp_receive+0x744>)
 80142e2:	4815      	ldr	r0, [pc, #84]	@ (8014338 <tcp_receive+0x738>)
 80142e4:	f006 fcde 	bl	801aca4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80142e8:	4b10      	ldr	r3, [pc, #64]	@ (801432c <tcp_receive+0x72c>)
 80142ea:	891a      	ldrh	r2, [r3, #8]
 80142ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014328 <tcp_receive+0x728>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	b299      	uxth	r1, r3
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	1acb      	subs	r3, r1, r3
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	4413      	add	r3, r2
 80142fe:	b29a      	uxth	r2, r3
 8014300:	4b0a      	ldr	r3, [pc, #40]	@ (801432c <tcp_receive+0x72c>)
 8014302:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014308:	4a07      	ldr	r2, [pc, #28]	@ (8014328 <tcp_receive+0x728>)
 801430a:	6013      	str	r3, [r2, #0]
 801430c:	4b07      	ldr	r3, [pc, #28]	@ (801432c <tcp_receive+0x72c>)
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	4a05      	ldr	r2, [pc, #20]	@ (8014328 <tcp_receive+0x728>)
 8014312:	6812      	ldr	r2, [r2, #0]
 8014314:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014316:	e025      	b.n	8014364 <tcp_receive+0x764>
 8014318:	240076f8 	.word	0x240076f8
 801431c:	240076fc 	.word	0x240076fc
 8014320:	240076bc 	.word	0x240076bc
 8014324:	240076fe 	.word	0x240076fe
 8014328:	240076f4 	.word	0x240076f4
 801432c:	240076d4 	.word	0x240076d4
 8014330:	0801dbcc 	.word	0x0801dbcc
 8014334:	0801de88 	.word	0x0801de88
 8014338:	0801dc44 	.word	0x0801dc44
 801433c:	0801de98 	.word	0x0801de98
 8014340:	0801dea8 	.word	0x0801dea8
 8014344:	0801deb8 	.word	0x0801deb8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014348:	4b87      	ldr	r3, [pc, #540]	@ (8014568 <tcp_receive+0x968>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014350:	1ad3      	subs	r3, r2, r3
 8014352:	2b00      	cmp	r3, #0
 8014354:	da06      	bge.n	8014364 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	7e9b      	ldrb	r3, [r3, #26]
 801435a:	f043 0302 	orr.w	r3, r3, #2
 801435e:	b2da      	uxtb	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014364:	4b80      	ldr	r3, [pc, #512]	@ (8014568 <tcp_receive+0x968>)
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	2b00      	cmp	r3, #0
 8014370:	f2c0 8410 	blt.w	8014b94 <tcp_receive+0xf94>
 8014374:	4b7c      	ldr	r3, [pc, #496]	@ (8014568 <tcp_receive+0x968>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801437c:	6879      	ldr	r1, [r7, #4]
 801437e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014380:	440b      	add	r3, r1
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	3301      	adds	r3, #1
 8014386:	2b00      	cmp	r3, #0
 8014388:	f300 8404 	bgt.w	8014b94 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014390:	4b75      	ldr	r3, [pc, #468]	@ (8014568 <tcp_receive+0x968>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	429a      	cmp	r2, r3
 8014396:	f040 8287 	bne.w	80148a8 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801439a:	4b74      	ldr	r3, [pc, #464]	@ (801456c <tcp_receive+0x96c>)
 801439c:	891c      	ldrh	r4, [r3, #8]
 801439e:	4b73      	ldr	r3, [pc, #460]	@ (801456c <tcp_receive+0x96c>)
 80143a0:	68db      	ldr	r3, [r3, #12]
 80143a2:	899b      	ldrh	r3, [r3, #12]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7fb f960 	bl	800f66c <lwip_htons>
 80143ac:	4603      	mov	r3, r0
 80143ae:	f003 0303 	and.w	r3, r3, #3
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d001      	beq.n	80143ba <tcp_receive+0x7ba>
 80143b6:	2301      	movs	r3, #1
 80143b8:	e000      	b.n	80143bc <tcp_receive+0x7bc>
 80143ba:	2300      	movs	r3, #0
 80143bc:	4423      	add	r3, r4
 80143be:	b29a      	uxth	r2, r3
 80143c0:	4b6b      	ldr	r3, [pc, #428]	@ (8014570 <tcp_receive+0x970>)
 80143c2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80143c8:	4b69      	ldr	r3, [pc, #420]	@ (8014570 <tcp_receive+0x970>)
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d26e      	bcs.n	80144ae <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80143d0:	4b66      	ldr	r3, [pc, #408]	@ (801456c <tcp_receive+0x96c>)
 80143d2:	68db      	ldr	r3, [r3, #12]
 80143d4:	899b      	ldrh	r3, [r3, #12]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fb f947 	bl	800f66c <lwip_htons>
 80143de:	4603      	mov	r3, r0
 80143e0:	f003 0301 	and.w	r3, r3, #1
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d01b      	beq.n	8014420 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80143e8:	4b60      	ldr	r3, [pc, #384]	@ (801456c <tcp_receive+0x96c>)
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	899b      	ldrh	r3, [r3, #12]
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80143f4:	b29c      	uxth	r4, r3
 80143f6:	4b5d      	ldr	r3, [pc, #372]	@ (801456c <tcp_receive+0x96c>)
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	899b      	ldrh	r3, [r3, #12]
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	4618      	mov	r0, r3
 8014400:	f7fb f934 	bl	800f66c <lwip_htons>
 8014404:	4603      	mov	r3, r0
 8014406:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801440a:	b29b      	uxth	r3, r3
 801440c:	4618      	mov	r0, r3
 801440e:	f7fb f92d 	bl	800f66c <lwip_htons>
 8014412:	4603      	mov	r3, r0
 8014414:	461a      	mov	r2, r3
 8014416:	4b55      	ldr	r3, [pc, #340]	@ (801456c <tcp_receive+0x96c>)
 8014418:	68db      	ldr	r3, [r3, #12]
 801441a:	4322      	orrs	r2, r4
 801441c:	b292      	uxth	r2, r2
 801441e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014424:	4b51      	ldr	r3, [pc, #324]	@ (801456c <tcp_receive+0x96c>)
 8014426:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014428:	4b50      	ldr	r3, [pc, #320]	@ (801456c <tcp_receive+0x96c>)
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	899b      	ldrh	r3, [r3, #12]
 801442e:	b29b      	uxth	r3, r3
 8014430:	4618      	mov	r0, r3
 8014432:	f7fb f91b 	bl	800f66c <lwip_htons>
 8014436:	4603      	mov	r3, r0
 8014438:	f003 0302 	and.w	r3, r3, #2
 801443c:	2b00      	cmp	r3, #0
 801443e:	d005      	beq.n	801444c <tcp_receive+0x84c>
            inseg.len -= 1;
 8014440:	4b4a      	ldr	r3, [pc, #296]	@ (801456c <tcp_receive+0x96c>)
 8014442:	891b      	ldrh	r3, [r3, #8]
 8014444:	3b01      	subs	r3, #1
 8014446:	b29a      	uxth	r2, r3
 8014448:	4b48      	ldr	r3, [pc, #288]	@ (801456c <tcp_receive+0x96c>)
 801444a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801444c:	4b47      	ldr	r3, [pc, #284]	@ (801456c <tcp_receive+0x96c>)
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	4a46      	ldr	r2, [pc, #280]	@ (801456c <tcp_receive+0x96c>)
 8014452:	8912      	ldrh	r2, [r2, #8]
 8014454:	4611      	mov	r1, r2
 8014456:	4618      	mov	r0, r3
 8014458:	f7fc fa0c 	bl	8010874 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801445c:	4b43      	ldr	r3, [pc, #268]	@ (801456c <tcp_receive+0x96c>)
 801445e:	891c      	ldrh	r4, [r3, #8]
 8014460:	4b42      	ldr	r3, [pc, #264]	@ (801456c <tcp_receive+0x96c>)
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	899b      	ldrh	r3, [r3, #12]
 8014466:	b29b      	uxth	r3, r3
 8014468:	4618      	mov	r0, r3
 801446a:	f7fb f8ff 	bl	800f66c <lwip_htons>
 801446e:	4603      	mov	r3, r0
 8014470:	f003 0303 	and.w	r3, r3, #3
 8014474:	2b00      	cmp	r3, #0
 8014476:	d001      	beq.n	801447c <tcp_receive+0x87c>
 8014478:	2301      	movs	r3, #1
 801447a:	e000      	b.n	801447e <tcp_receive+0x87e>
 801447c:	2300      	movs	r3, #0
 801447e:	4423      	add	r3, r4
 8014480:	b29a      	uxth	r2, r3
 8014482:	4b3b      	ldr	r3, [pc, #236]	@ (8014570 <tcp_receive+0x970>)
 8014484:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014486:	4b3a      	ldr	r3, [pc, #232]	@ (8014570 <tcp_receive+0x970>)
 8014488:	881b      	ldrh	r3, [r3, #0]
 801448a:	461a      	mov	r2, r3
 801448c:	4b36      	ldr	r3, [pc, #216]	@ (8014568 <tcp_receive+0x968>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	441a      	add	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801449a:	440b      	add	r3, r1
 801449c:	429a      	cmp	r2, r3
 801449e:	d006      	beq.n	80144ae <tcp_receive+0x8ae>
 80144a0:	4b34      	ldr	r3, [pc, #208]	@ (8014574 <tcp_receive+0x974>)
 80144a2:	f240 527e 	movw	r2, #1406	@ 0x57e
 80144a6:	4934      	ldr	r1, [pc, #208]	@ (8014578 <tcp_receive+0x978>)
 80144a8:	4834      	ldr	r0, [pc, #208]	@ (801457c <tcp_receive+0x97c>)
 80144aa:	f006 fbfb 	bl	801aca4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 80e1 	beq.w	801467a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144b8:	4b2c      	ldr	r3, [pc, #176]	@ (801456c <tcp_receive+0x96c>)
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	899b      	ldrh	r3, [r3, #12]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fb f8d3 	bl	800f66c <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d010      	beq.n	80144f2 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80144d0:	e00a      	b.n	80144e8 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144d6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 80144e2:	68b8      	ldr	r0, [r7, #8]
 80144e4:	f7fd fe72 	bl	80121cc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1f0      	bne.n	80144d2 <tcp_receive+0x8d2>
 80144f0:	e0c3      	b.n	801467a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80144f8:	e04f      	b.n	801459a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	899b      	ldrh	r3, [r3, #12]
 8014500:	b29b      	uxth	r3, r3
 8014502:	4618      	mov	r0, r3
 8014504:	f7fb f8b2 	bl	800f66c <lwip_htons>
 8014508:	4603      	mov	r3, r0
 801450a:	f003 0301 	and.w	r3, r3, #1
 801450e:	2b00      	cmp	r3, #0
 8014510:	d03b      	beq.n	801458a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014512:	4b16      	ldr	r3, [pc, #88]	@ (801456c <tcp_receive+0x96c>)
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	899b      	ldrh	r3, [r3, #12]
 8014518:	b29b      	uxth	r3, r3
 801451a:	4618      	mov	r0, r3
 801451c:	f7fb f8a6 	bl	800f66c <lwip_htons>
 8014520:	4603      	mov	r3, r0
 8014522:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014526:	2b00      	cmp	r3, #0
 8014528:	d12f      	bne.n	801458a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801452a:	4b10      	ldr	r3, [pc, #64]	@ (801456c <tcp_receive+0x96c>)
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	899b      	ldrh	r3, [r3, #12]
 8014530:	b29c      	uxth	r4, r3
 8014532:	2001      	movs	r0, #1
 8014534:	f7fb f89a 	bl	800f66c <lwip_htons>
 8014538:	4603      	mov	r3, r0
 801453a:	461a      	mov	r2, r3
 801453c:	4b0b      	ldr	r3, [pc, #44]	@ (801456c <tcp_receive+0x96c>)
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	4322      	orrs	r2, r4
 8014542:	b292      	uxth	r2, r2
 8014544:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014546:	4b09      	ldr	r3, [pc, #36]	@ (801456c <tcp_receive+0x96c>)
 8014548:	891c      	ldrh	r4, [r3, #8]
 801454a:	4b08      	ldr	r3, [pc, #32]	@ (801456c <tcp_receive+0x96c>)
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	899b      	ldrh	r3, [r3, #12]
 8014550:	b29b      	uxth	r3, r3
 8014552:	4618      	mov	r0, r3
 8014554:	f7fb f88a 	bl	800f66c <lwip_htons>
 8014558:	4603      	mov	r3, r0
 801455a:	f003 0303 	and.w	r3, r3, #3
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00e      	beq.n	8014580 <tcp_receive+0x980>
 8014562:	2301      	movs	r3, #1
 8014564:	e00d      	b.n	8014582 <tcp_receive+0x982>
 8014566:	bf00      	nop
 8014568:	240076f4 	.word	0x240076f4
 801456c:	240076d4 	.word	0x240076d4
 8014570:	240076fe 	.word	0x240076fe
 8014574:	0801dbcc 	.word	0x0801dbcc
 8014578:	0801decc 	.word	0x0801decc
 801457c:	0801dc44 	.word	0x0801dc44
 8014580:	2300      	movs	r3, #0
 8014582:	4423      	add	r3, r4
 8014584:	b29a      	uxth	r2, r3
 8014586:	4b95      	ldr	r3, [pc, #596]	@ (80147dc <tcp_receive+0xbdc>)
 8014588:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801458c:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 801458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8014594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014596:	f7fd fe19 	bl	80121cc <tcp_seg_free>
            while (next &&
 801459a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801459c:	2b00      	cmp	r3, #0
 801459e:	d00e      	beq.n	80145be <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80145a0:	4b8e      	ldr	r3, [pc, #568]	@ (80147dc <tcp_receive+0xbdc>)
 80145a2:	881b      	ldrh	r3, [r3, #0]
 80145a4:	461a      	mov	r2, r3
 80145a6:	4b8e      	ldr	r3, [pc, #568]	@ (80147e0 <tcp_receive+0xbe0>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	441a      	add	r2, r3
 80145ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80145b4:	8909      	ldrh	r1, [r1, #8]
 80145b6:	440b      	add	r3, r1
 80145b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	da9d      	bge.n	80144fa <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80145be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d057      	beq.n	8014674 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 80145c4:	4b85      	ldr	r3, [pc, #532]	@ (80147dc <tcp_receive+0xbdc>)
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	461a      	mov	r2, r3
 80145ca:	4b85      	ldr	r3, [pc, #532]	@ (80147e0 <tcp_receive+0xbe0>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	441a      	add	r2, r3
 80145d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80145d8:	2b00      	cmp	r3, #0
 80145da:	dd4b      	ble.n	8014674 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80145dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	4b7e      	ldr	r3, [pc, #504]	@ (80147e0 <tcp_receive+0xbe0>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	1ad3      	subs	r3, r2, r3
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	4b7d      	ldr	r3, [pc, #500]	@ (80147e4 <tcp_receive+0xbe4>)
 80145f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80145f2:	4b7c      	ldr	r3, [pc, #496]	@ (80147e4 <tcp_receive+0xbe4>)
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	899b      	ldrh	r3, [r3, #12]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fb f836 	bl	800f66c <lwip_htons>
 8014600:	4603      	mov	r3, r0
 8014602:	f003 0302 	and.w	r3, r3, #2
 8014606:	2b00      	cmp	r3, #0
 8014608:	d005      	beq.n	8014616 <tcp_receive+0xa16>
                inseg.len -= 1;
 801460a:	4b76      	ldr	r3, [pc, #472]	@ (80147e4 <tcp_receive+0xbe4>)
 801460c:	891b      	ldrh	r3, [r3, #8]
 801460e:	3b01      	subs	r3, #1
 8014610:	b29a      	uxth	r2, r3
 8014612:	4b74      	ldr	r3, [pc, #464]	@ (80147e4 <tcp_receive+0xbe4>)
 8014614:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014616:	4b73      	ldr	r3, [pc, #460]	@ (80147e4 <tcp_receive+0xbe4>)
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	4a72      	ldr	r2, [pc, #456]	@ (80147e4 <tcp_receive+0xbe4>)
 801461c:	8912      	ldrh	r2, [r2, #8]
 801461e:	4611      	mov	r1, r2
 8014620:	4618      	mov	r0, r3
 8014622:	f7fc f927 	bl	8010874 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014626:	4b6f      	ldr	r3, [pc, #444]	@ (80147e4 <tcp_receive+0xbe4>)
 8014628:	891c      	ldrh	r4, [r3, #8]
 801462a:	4b6e      	ldr	r3, [pc, #440]	@ (80147e4 <tcp_receive+0xbe4>)
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	899b      	ldrh	r3, [r3, #12]
 8014630:	b29b      	uxth	r3, r3
 8014632:	4618      	mov	r0, r3
 8014634:	f7fb f81a 	bl	800f66c <lwip_htons>
 8014638:	4603      	mov	r3, r0
 801463a:	f003 0303 	and.w	r3, r3, #3
 801463e:	2b00      	cmp	r3, #0
 8014640:	d001      	beq.n	8014646 <tcp_receive+0xa46>
 8014642:	2301      	movs	r3, #1
 8014644:	e000      	b.n	8014648 <tcp_receive+0xa48>
 8014646:	2300      	movs	r3, #0
 8014648:	4423      	add	r3, r4
 801464a:	b29a      	uxth	r2, r3
 801464c:	4b63      	ldr	r3, [pc, #396]	@ (80147dc <tcp_receive+0xbdc>)
 801464e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014650:	4b62      	ldr	r3, [pc, #392]	@ (80147dc <tcp_receive+0xbdc>)
 8014652:	881b      	ldrh	r3, [r3, #0]
 8014654:	461a      	mov	r2, r3
 8014656:	4b62      	ldr	r3, [pc, #392]	@ (80147e0 <tcp_receive+0xbe0>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	441a      	add	r2, r3
 801465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	429a      	cmp	r2, r3
 8014664:	d006      	beq.n	8014674 <tcp_receive+0xa74>
 8014666:	4b60      	ldr	r3, [pc, #384]	@ (80147e8 <tcp_receive+0xbe8>)
 8014668:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801466c:	495f      	ldr	r1, [pc, #380]	@ (80147ec <tcp_receive+0xbec>)
 801466e:	4860      	ldr	r0, [pc, #384]	@ (80147f0 <tcp_receive+0xbf0>)
 8014670:	f006 fb18 	bl	801aca4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014678:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801467a:	4b58      	ldr	r3, [pc, #352]	@ (80147dc <tcp_receive+0xbdc>)
 801467c:	881b      	ldrh	r3, [r3, #0]
 801467e:	461a      	mov	r2, r3
 8014680:	4b57      	ldr	r3, [pc, #348]	@ (80147e0 <tcp_receive+0xbe0>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	441a      	add	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801468e:	4b53      	ldr	r3, [pc, #332]	@ (80147dc <tcp_receive+0xbdc>)
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	429a      	cmp	r2, r3
 8014694:	d206      	bcs.n	80146a4 <tcp_receive+0xaa4>
 8014696:	4b54      	ldr	r3, [pc, #336]	@ (80147e8 <tcp_receive+0xbe8>)
 8014698:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801469c:	4955      	ldr	r1, [pc, #340]	@ (80147f4 <tcp_receive+0xbf4>)
 801469e:	4854      	ldr	r0, [pc, #336]	@ (80147f0 <tcp_receive+0xbf0>)
 80146a0:	f006 fb00 	bl	801aca4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80146a8:	4b4c      	ldr	r3, [pc, #304]	@ (80147dc <tcp_receive+0xbdc>)
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7fd f8f7 	bl	80118a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80146ba:	4b4a      	ldr	r3, [pc, #296]	@ (80147e4 <tcp_receive+0xbe4>)
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	891b      	ldrh	r3, [r3, #8]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d006      	beq.n	80146d2 <tcp_receive+0xad2>
          recv_data = inseg.p;
 80146c4:	4b47      	ldr	r3, [pc, #284]	@ (80147e4 <tcp_receive+0xbe4>)
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	4a4b      	ldr	r2, [pc, #300]	@ (80147f8 <tcp_receive+0xbf8>)
 80146ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80146cc:	4b45      	ldr	r3, [pc, #276]	@ (80147e4 <tcp_receive+0xbe4>)
 80146ce:	2200      	movs	r2, #0
 80146d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80146d2:	4b44      	ldr	r3, [pc, #272]	@ (80147e4 <tcp_receive+0xbe4>)
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	899b      	ldrh	r3, [r3, #12]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4618      	mov	r0, r3
 80146dc:	f7fa ffc6 	bl	800f66c <lwip_htons>
 80146e0:	4603      	mov	r3, r0
 80146e2:	f003 0301 	and.w	r3, r3, #1
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 80b4 	beq.w	8014854 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80146ec:	4b43      	ldr	r3, [pc, #268]	@ (80147fc <tcp_receive+0xbfc>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	f043 0320 	orr.w	r3, r3, #32
 80146f4:	b2da      	uxtb	r2, r3
 80146f6:	4b41      	ldr	r3, [pc, #260]	@ (80147fc <tcp_receive+0xbfc>)
 80146f8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80146fa:	e0ab      	b.n	8014854 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014700:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	4a35      	ldr	r2, [pc, #212]	@ (80147e0 <tcp_receive+0xbe0>)
 801470c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	891b      	ldrh	r3, [r3, #8]
 8014712:	461c      	mov	r4, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	899b      	ldrh	r3, [r3, #12]
 801471a:	b29b      	uxth	r3, r3
 801471c:	4618      	mov	r0, r3
 801471e:	f7fa ffa5 	bl	800f66c <lwip_htons>
 8014722:	4603      	mov	r3, r0
 8014724:	f003 0303 	and.w	r3, r3, #3
 8014728:	2b00      	cmp	r3, #0
 801472a:	d001      	beq.n	8014730 <tcp_receive+0xb30>
 801472c:	2301      	movs	r3, #1
 801472e:	e000      	b.n	8014732 <tcp_receive+0xb32>
 8014730:	2300      	movs	r3, #0
 8014732:	191a      	adds	r2, r3, r4
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014738:	441a      	add	r2, r3
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014742:	461c      	mov	r4, r3
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	891b      	ldrh	r3, [r3, #8]
 8014748:	461d      	mov	r5, r3
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	899b      	ldrh	r3, [r3, #12]
 8014750:	b29b      	uxth	r3, r3
 8014752:	4618      	mov	r0, r3
 8014754:	f7fa ff8a 	bl	800f66c <lwip_htons>
 8014758:	4603      	mov	r3, r0
 801475a:	f003 0303 	and.w	r3, r3, #3
 801475e:	2b00      	cmp	r3, #0
 8014760:	d001      	beq.n	8014766 <tcp_receive+0xb66>
 8014762:	2301      	movs	r3, #1
 8014764:	e000      	b.n	8014768 <tcp_receive+0xb68>
 8014766:	2300      	movs	r3, #0
 8014768:	442b      	add	r3, r5
 801476a:	429c      	cmp	r4, r3
 801476c:	d206      	bcs.n	801477c <tcp_receive+0xb7c>
 801476e:	4b1e      	ldr	r3, [pc, #120]	@ (80147e8 <tcp_receive+0xbe8>)
 8014770:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8014774:	4922      	ldr	r1, [pc, #136]	@ (8014800 <tcp_receive+0xc00>)
 8014776:	481e      	ldr	r0, [pc, #120]	@ (80147f0 <tcp_receive+0xbf0>)
 8014778:	f006 fa94 	bl	801aca4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	891b      	ldrh	r3, [r3, #8]
 8014780:	461c      	mov	r4, r3
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	899b      	ldrh	r3, [r3, #12]
 8014788:	b29b      	uxth	r3, r3
 801478a:	4618      	mov	r0, r3
 801478c:	f7fa ff6e 	bl	800f66c <lwip_htons>
 8014790:	4603      	mov	r3, r0
 8014792:	f003 0303 	and.w	r3, r3, #3
 8014796:	2b00      	cmp	r3, #0
 8014798:	d001      	beq.n	801479e <tcp_receive+0xb9e>
 801479a:	2301      	movs	r3, #1
 801479c:	e000      	b.n	80147a0 <tcp_receive+0xba0>
 801479e:	2300      	movs	r3, #0
 80147a0:	1919      	adds	r1, r3, r4
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80147a6:	b28b      	uxth	r3, r1
 80147a8:	1ad3      	subs	r3, r2, r3
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7fd f879 	bl	80118a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	891b      	ldrh	r3, [r3, #8]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d028      	beq.n	8014812 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80147c0:	4b0d      	ldr	r3, [pc, #52]	@ (80147f8 <tcp_receive+0xbf8>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d01d      	beq.n	8014804 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 80147c8:	4b0b      	ldr	r3, [pc, #44]	@ (80147f8 <tcp_receive+0xbf8>)
 80147ca:	681a      	ldr	r2, [r3, #0]
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	4619      	mov	r1, r3
 80147d2:	4610      	mov	r0, r2
 80147d4:	f7fc fa9c 	bl	8010d10 <pbuf_cat>
 80147d8:	e018      	b.n	801480c <tcp_receive+0xc0c>
 80147da:	bf00      	nop
 80147dc:	240076fe 	.word	0x240076fe
 80147e0:	240076f4 	.word	0x240076f4
 80147e4:	240076d4 	.word	0x240076d4
 80147e8:	0801dbcc 	.word	0x0801dbcc
 80147ec:	0801df04 	.word	0x0801df04
 80147f0:	0801dc44 	.word	0x0801dc44
 80147f4:	0801df40 	.word	0x0801df40
 80147f8:	24007704 	.word	0x24007704
 80147fc:	24007701 	.word	0x24007701
 8014800:	0801df60 	.word	0x0801df60
            } else {
              recv_data = cseg->p;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	4a71      	ldr	r2, [pc, #452]	@ (80149d0 <tcp_receive+0xdd0>)
 801480a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	2200      	movs	r2, #0
 8014810:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	899b      	ldrh	r3, [r3, #12]
 8014818:	b29b      	uxth	r3, r3
 801481a:	4618      	mov	r0, r3
 801481c:	f7fa ff26 	bl	800f66c <lwip_htons>
 8014820:	4603      	mov	r3, r0
 8014822:	f003 0301 	and.w	r3, r3, #1
 8014826:	2b00      	cmp	r3, #0
 8014828:	d00d      	beq.n	8014846 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801482a:	4b6a      	ldr	r3, [pc, #424]	@ (80149d4 <tcp_receive+0xdd4>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	f043 0320 	orr.w	r3, r3, #32
 8014832:	b2da      	uxtb	r2, r3
 8014834:	4b67      	ldr	r3, [pc, #412]	@ (80149d4 <tcp_receive+0xdd4>)
 8014836:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	7d1b      	ldrb	r3, [r3, #20]
 801483c:	2b04      	cmp	r3, #4
 801483e:	d102      	bne.n	8014846 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2207      	movs	r2, #7
 8014844:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 801484e:	68f8      	ldr	r0, [r7, #12]
 8014850:	f7fd fcbc 	bl	80121cc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014858:	2b00      	cmp	r3, #0
 801485a:	d008      	beq.n	801486e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014860:	68db      	ldr	r3, [r3, #12]
 8014862:	685a      	ldr	r2, [r3, #4]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014868:	429a      	cmp	r2, r3
 801486a:	f43f af47 	beq.w	80146fc <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	7e9b      	ldrb	r3, [r3, #26]
 8014872:	f003 0301 	and.w	r3, r3, #1
 8014876:	2b00      	cmp	r3, #0
 8014878:	d00e      	beq.n	8014898 <tcp_receive+0xc98>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	7e9b      	ldrb	r3, [r3, #26]
 801487e:	f023 0301 	bic.w	r3, r3, #1
 8014882:	b2da      	uxtb	r2, r3
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	769a      	strb	r2, [r3, #26]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	7e9b      	ldrb	r3, [r3, #26]
 801488c:	f043 0302 	orr.w	r3, r3, #2
 8014890:	b2da      	uxtb	r2, r3
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014896:	e181      	b.n	8014b9c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	7e9b      	ldrb	r3, [r3, #26]
 801489c:	f043 0301 	orr.w	r3, r3, #1
 80148a0:	b2da      	uxtb	r2, r3
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80148a6:	e179      	b.n	8014b9c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f001 f8c3 	bl	8015a34 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d106      	bne.n	80148c4 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80148b6:	4848      	ldr	r0, [pc, #288]	@ (80149d8 <tcp_receive+0xdd8>)
 80148b8:	f7fd fca0 	bl	80121fc <tcp_seg_copy>
 80148bc:	4602      	mov	r2, r0
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 80148c2:	e16b      	b.n	8014b9c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80148c4:	2300      	movs	r3, #0
 80148c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148ce:	e150      	b.n	8014b72 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 80148d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	685a      	ldr	r2, [r3, #4]
 80148d6:	4b41      	ldr	r3, [pc, #260]	@ (80149dc <tcp_receive+0xddc>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d11d      	bne.n	801491a <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80148de:	4b3e      	ldr	r3, [pc, #248]	@ (80149d8 <tcp_receive+0xdd8>)
 80148e0:	891a      	ldrh	r2, [r3, #8]
 80148e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148e4:	891b      	ldrh	r3, [r3, #8]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	f240 8148 	bls.w	8014b7c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80148ec:	483a      	ldr	r0, [pc, #232]	@ (80149d8 <tcp_receive+0xdd8>)
 80148ee:	f7fd fc85 	bl	80121fc <tcp_seg_copy>
 80148f2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	f000 8142 	beq.w	8014b80 <tcp_receive+0xf80>
                  if (prev != NULL) {
 80148fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d003      	beq.n	801490a <tcp_receive+0xd0a>
                    prev->next = cseg;
 8014902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	e002      	b.n	8014910 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	68fa      	ldr	r2, [r7, #12]
 801490e:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f7ff f8fe 	bl	8013b14 <tcp_oos_insert_segment>
                }
                break;
 8014918:	e132      	b.n	8014b80 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801491c:	2b00      	cmp	r3, #0
 801491e:	d117      	bne.n	8014950 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014920:	4b2e      	ldr	r3, [pc, #184]	@ (80149dc <tcp_receive+0xddc>)
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	2b00      	cmp	r3, #0
 801492e:	da57      	bge.n	80149e0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8014930:	4829      	ldr	r0, [pc, #164]	@ (80149d8 <tcp_receive+0xdd8>)
 8014932:	f7fd fc63 	bl	80121fc <tcp_seg_copy>
 8014936:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	f000 8122 	beq.w	8014b84 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	68fa      	ldr	r2, [r7, #12]
 8014944:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8014946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f7ff f8e3 	bl	8013b14 <tcp_oos_insert_segment>
                  }
                  break;
 801494e:	e119      	b.n	8014b84 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8014950:	4b22      	ldr	r3, [pc, #136]	@ (80149dc <tcp_receive+0xddc>)
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	3b01      	subs	r3, #1
 801495e:	2b00      	cmp	r3, #0
 8014960:	db3e      	blt.n	80149e0 <tcp_receive+0xde0>
 8014962:	4b1e      	ldr	r3, [pc, #120]	@ (80149dc <tcp_receive+0xddc>)
 8014964:	681a      	ldr	r2, [r3, #0]
 8014966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	3301      	adds	r3, #1
 8014970:	2b00      	cmp	r3, #0
 8014972:	dc35      	bgt.n	80149e0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8014974:	4818      	ldr	r0, [pc, #96]	@ (80149d8 <tcp_receive+0xdd8>)
 8014976:	f7fd fc41 	bl	80121fc <tcp_seg_copy>
 801497a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	f000 8102 	beq.w	8014b88 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801498c:	8912      	ldrh	r2, [r2, #8]
 801498e:	441a      	add	r2, r3
 8014990:	4b12      	ldr	r3, [pc, #72]	@ (80149dc <tcp_receive+0xddc>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	1ad3      	subs	r3, r2, r3
 8014996:	2b00      	cmp	r3, #0
 8014998:	dd12      	ble.n	80149c0 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801499a:	4b10      	ldr	r3, [pc, #64]	@ (80149dc <tcp_receive+0xddc>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	b29a      	uxth	r2, r3
 80149a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	1ad3      	subs	r3, r2, r3
 80149aa:	b29a      	uxth	r2, r3
 80149ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80149b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149b2:	685a      	ldr	r2, [r3, #4]
 80149b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149b6:	891b      	ldrh	r3, [r3, #8]
 80149b8:	4619      	mov	r1, r3
 80149ba:	4610      	mov	r0, r2
 80149bc:	f7fb ff5a 	bl	8010874 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80149c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c2:	68fa      	ldr	r2, [r7, #12]
 80149c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80149c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7ff f8a3 	bl	8013b14 <tcp_oos_insert_segment>
                  }
                  break;
 80149ce:	e0db      	b.n	8014b88 <tcp_receive+0xf88>
 80149d0:	24007704 	.word	0x24007704
 80149d4:	24007701 	.word	0x24007701
 80149d8:	240076d4 	.word	0x240076d4
 80149dc:	240076f4 	.word	0x240076f4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80149e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	f040 80bf 	bne.w	8014b68 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80149ea:	4b7c      	ldr	r3, [pc, #496]	@ (8014bdc <tcp_receive+0xfdc>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f340 80b6 	ble.w	8014b68 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149fe:	68db      	ldr	r3, [r3, #12]
 8014a00:	899b      	ldrh	r3, [r3, #12]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7fa fe31 	bl	800f66c <lwip_htons>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	f003 0301 	and.w	r3, r3, #1
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f040 80bb 	bne.w	8014b8c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014a16:	4872      	ldr	r0, [pc, #456]	@ (8014be0 <tcp_receive+0xfe0>)
 8014a18:	f7fd fbf0 	bl	80121fc <tcp_seg_copy>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a20:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f000 80b2 	beq.w	8014b90 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a34:	8912      	ldrh	r2, [r2, #8]
 8014a36:	441a      	add	r2, r3
 8014a38:	4b68      	ldr	r3, [pc, #416]	@ (8014bdc <tcp_receive+0xfdc>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	dd12      	ble.n	8014a68 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014a42:	4b66      	ldr	r3, [pc, #408]	@ (8014bdc <tcp_receive+0xfdc>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a56:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a5a:	685a      	ldr	r2, [r3, #4]
 8014a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a5e:	891b      	ldrh	r3, [r3, #8]
 8014a60:	4619      	mov	r1, r3
 8014a62:	4610      	mov	r0, r2
 8014a64:	f7fb ff06 	bl	8010874 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014a68:	4b5e      	ldr	r3, [pc, #376]	@ (8014be4 <tcp_receive+0xfe4>)
 8014a6a:	881b      	ldrh	r3, [r3, #0]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8014bdc <tcp_receive+0xfdc>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	441a      	add	r2, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014a7c:	440b      	add	r3, r1
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	f340 8085 	ble.w	8014b90 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	899b      	ldrh	r3, [r3, #12]
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7fa fdeb 	bl	800f66c <lwip_htons>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f003 0301 	and.w	r3, r3, #1
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d01e      	beq.n	8014ade <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	899b      	ldrh	r3, [r3, #12]
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014aae:	b29c      	uxth	r4, r3
 8014ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	899b      	ldrh	r3, [r3, #12]
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fa fdd6 	bl	800f66c <lwip_htons>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fa fdcf 	bl	800f66c <lwip_htons>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	4322      	orrs	r2, r4
 8014ada:	b292      	uxth	r2, r2
 8014adc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ae2:	b29a      	uxth	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ae8:	4413      	add	r3, r2
 8014aea:	b299      	uxth	r1, r3
 8014aec:	4b3b      	ldr	r3, [pc, #236]	@ (8014bdc <tcp_receive+0xfdc>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	1a8a      	subs	r2, r1, r2
 8014af8:	b292      	uxth	r2, r2
 8014afa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	891b      	ldrh	r3, [r3, #8]
 8014b08:	4619      	mov	r1, r3
 8014b0a:	4610      	mov	r0, r2
 8014b0c:	f7fb feb2 	bl	8010874 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	891c      	ldrh	r4, [r3, #8]
 8014b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	899b      	ldrh	r3, [r3, #12]
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fa fda3 	bl	800f66c <lwip_htons>
 8014b26:	4603      	mov	r3, r0
 8014b28:	f003 0303 	and.w	r3, r3, #3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d001      	beq.n	8014b34 <tcp_receive+0xf34>
 8014b30:	2301      	movs	r3, #1
 8014b32:	e000      	b.n	8014b36 <tcp_receive+0xf36>
 8014b34:	2300      	movs	r3, #0
 8014b36:	4423      	add	r3, r4
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8014be4 <tcp_receive+0xfe4>)
 8014b3c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014b3e:	4b29      	ldr	r3, [pc, #164]	@ (8014be4 <tcp_receive+0xfe4>)
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	461a      	mov	r2, r3
 8014b44:	4b25      	ldr	r3, [pc, #148]	@ (8014bdc <tcp_receive+0xfdc>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	441a      	add	r2, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b4e:	6879      	ldr	r1, [r7, #4]
 8014b50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b52:	440b      	add	r3, r1
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d01b      	beq.n	8014b90 <tcp_receive+0xf90>
 8014b58:	4b23      	ldr	r3, [pc, #140]	@ (8014be8 <tcp_receive+0xfe8>)
 8014b5a:	f240 627a 	movw	r2, #1658	@ 0x67a
 8014b5e:	4923      	ldr	r1, [pc, #140]	@ (8014bec <tcp_receive+0xfec>)
 8014b60:	4823      	ldr	r0, [pc, #140]	@ (8014bf0 <tcp_receive+0xff0>)
 8014b62:	f006 f89f 	bl	801aca4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014b66:	e013      	b.n	8014b90 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8014b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f47f aeab 	bne.w	80148d0 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8014b7a:	e00f      	b.n	8014b9c <tcp_receive+0xf9c>
                break;
 8014b7c:	bf00      	nop
 8014b7e:	e00d      	b.n	8014b9c <tcp_receive+0xf9c>
                break;
 8014b80:	bf00      	nop
 8014b82:	e00b      	b.n	8014b9c <tcp_receive+0xf9c>
                  break;
 8014b84:	bf00      	nop
 8014b86:	e009      	b.n	8014b9c <tcp_receive+0xf9c>
                  break;
 8014b88:	bf00      	nop
 8014b8a:	e007      	b.n	8014b9c <tcp_receive+0xf9c>
                  break;
 8014b8c:	bf00      	nop
 8014b8e:	e005      	b.n	8014b9c <tcp_receive+0xf9c>
                break;
 8014b90:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8014b92:	e003      	b.n	8014b9c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f000 ff4d 	bl	8015a34 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b9a:	e01a      	b.n	8014bd2 <tcp_receive+0xfd2>
 8014b9c:	e019      	b.n	8014bd2 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8014bdc <tcp_receive+0xfdc>)
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	db0a      	blt.n	8014bc2 <tcp_receive+0xfc2>
 8014bac:	4b0b      	ldr	r3, [pc, #44]	@ (8014bdc <tcp_receive+0xfdc>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bb4:	6879      	ldr	r1, [r7, #4]
 8014bb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014bb8:	440b      	add	r3, r1
 8014bba:	1ad3      	subs	r3, r2, r3
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	dd07      	ble.n	8014bd2 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	7e9b      	ldrb	r3, [r3, #26]
 8014bc6:	f043 0302 	orr.w	r3, r3, #2
 8014bca:	b2da      	uxtb	r2, r3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014bd0:	e7ff      	b.n	8014bd2 <tcp_receive+0xfd2>
 8014bd2:	bf00      	nop
 8014bd4:	3734      	adds	r7, #52	@ 0x34
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	240076f4 	.word	0x240076f4
 8014be0:	240076d4 	.word	0x240076d4
 8014be4:	240076fe 	.word	0x240076fe
 8014be8:	0801dbcc 	.word	0x0801dbcc
 8014bec:	0801decc 	.word	0x0801decc
 8014bf0:	0801dc44 	.word	0x0801dc44

08014bf4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014bfa:	4b18      	ldr	r3, [pc, #96]	@ (8014c5c <tcp_getoptbyte+0x68>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d005      	beq.n	8014c0e <tcp_getoptbyte+0x1a>
 8014c02:	4b17      	ldr	r3, [pc, #92]	@ (8014c60 <tcp_getoptbyte+0x6c>)
 8014c04:	881a      	ldrh	r2, [r3, #0]
 8014c06:	4b17      	ldr	r3, [pc, #92]	@ (8014c64 <tcp_getoptbyte+0x70>)
 8014c08:	881b      	ldrh	r3, [r3, #0]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d20e      	bcs.n	8014c2c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014c0e:	4b16      	ldr	r3, [pc, #88]	@ (8014c68 <tcp_getoptbyte+0x74>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	3314      	adds	r3, #20
 8014c14:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8014c16:	4b12      	ldr	r3, [pc, #72]	@ (8014c60 <tcp_getoptbyte+0x6c>)
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	1c5a      	adds	r2, r3, #1
 8014c1c:	b291      	uxth	r1, r2
 8014c1e:	4a10      	ldr	r2, [pc, #64]	@ (8014c60 <tcp_getoptbyte+0x6c>)
 8014c20:	8011      	strh	r1, [r2, #0]
 8014c22:	461a      	mov	r2, r3
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	4413      	add	r3, r2
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	e010      	b.n	8014c4e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8014c60 <tcp_getoptbyte+0x6c>)
 8014c2e:	881b      	ldrh	r3, [r3, #0]
 8014c30:	1c5a      	adds	r2, r3, #1
 8014c32:	b291      	uxth	r1, r2
 8014c34:	4a0a      	ldr	r2, [pc, #40]	@ (8014c60 <tcp_getoptbyte+0x6c>)
 8014c36:	8011      	strh	r1, [r2, #0]
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8014c64 <tcp_getoptbyte+0x70>)
 8014c3c:	881b      	ldrh	r3, [r3, #0]
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	1ad3      	subs	r3, r2, r3
 8014c42:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8014c44:	4b05      	ldr	r3, [pc, #20]	@ (8014c5c <tcp_getoptbyte+0x68>)
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	370c      	adds	r7, #12
 8014c52:	46bd      	mov	sp, r7
 8014c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c58:	4770      	bx	lr
 8014c5a:	bf00      	nop
 8014c5c:	240076ec 	.word	0x240076ec
 8014c60:	240076f0 	.word	0x240076f0
 8014c64:	240076ea 	.word	0x240076ea
 8014c68:	240076e4 	.word	0x240076e4

08014c6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014c74:	4b2e      	ldr	r3, [pc, #184]	@ (8014d30 <tcp_parseopt+0xc4>)
 8014c76:	881b      	ldrh	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d056      	beq.n	8014d2a <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8014d34 <tcp_parseopt+0xc8>)
 8014c7e:	2200      	movs	r2, #0
 8014c80:	801a      	strh	r2, [r3, #0]
 8014c82:	e046      	b.n	8014d12 <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 8014c84:	f7ff ffb6 	bl	8014bf4 <tcp_getoptbyte>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c8c:	7bfb      	ldrb	r3, [r7, #15]
 8014c8e:	2b02      	cmp	r3, #2
 8014c90:	d006      	beq.n	8014ca0 <tcp_parseopt+0x34>
 8014c92:	2b02      	cmp	r3, #2
 8014c94:	dc2a      	bgt.n	8014cec <tcp_parseopt+0x80>
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d042      	beq.n	8014d20 <tcp_parseopt+0xb4>
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d038      	beq.n	8014d10 <tcp_parseopt+0xa4>
 8014c9e:	e025      	b.n	8014cec <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014ca0:	f7ff ffa8 	bl	8014bf4 <tcp_getoptbyte>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b04      	cmp	r3, #4
 8014ca8:	d13c      	bne.n	8014d24 <tcp_parseopt+0xb8>
 8014caa:	4b22      	ldr	r3, [pc, #136]	@ (8014d34 <tcp_parseopt+0xc8>)
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	3301      	adds	r3, #1
 8014cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8014d30 <tcp_parseopt+0xc4>)
 8014cb2:	8812      	ldrh	r2, [r2, #0]
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	da35      	bge.n	8014d24 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8014cb8:	f7ff ff9c 	bl	8014bf4 <tcp_getoptbyte>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	021b      	lsls	r3, r3, #8
 8014cc0:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014cc2:	f7ff ff97 	bl	8014bf4 <tcp_getoptbyte>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	461a      	mov	r2, r3
 8014cca:	89bb      	ldrh	r3, [r7, #12]
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014cd0:	89bb      	ldrh	r3, [r7, #12]
 8014cd2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014cd6:	d804      	bhi.n	8014ce2 <tcp_parseopt+0x76>
 8014cd8:	89bb      	ldrh	r3, [r7, #12]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d001      	beq.n	8014ce2 <tcp_parseopt+0x76>
 8014cde:	89ba      	ldrh	r2, [r7, #12]
 8014ce0:	e001      	b.n	8014ce6 <tcp_parseopt+0x7a>
 8014ce2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8014cea:	e012      	b.n	8014d12 <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014cec:	f7ff ff82 	bl	8014bf4 <tcp_getoptbyte>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8014cf4:	7afb      	ldrb	r3, [r7, #11]
 8014cf6:	2b01      	cmp	r3, #1
 8014cf8:	d916      	bls.n	8014d28 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014cfa:	7afb      	ldrb	r3, [r7, #11]
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8014d34 <tcp_parseopt+0xc8>)
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	4413      	add	r3, r2
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	3b02      	subs	r3, #2
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8014d34 <tcp_parseopt+0xc8>)
 8014d0c:	801a      	strh	r2, [r3, #0]
 8014d0e:	e000      	b.n	8014d12 <tcp_parseopt+0xa6>
        break;
 8014d10:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014d12:	4b08      	ldr	r3, [pc, #32]	@ (8014d34 <tcp_parseopt+0xc8>)
 8014d14:	881a      	ldrh	r2, [r3, #0]
 8014d16:	4b06      	ldr	r3, [pc, #24]	@ (8014d30 <tcp_parseopt+0xc4>)
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d3b2      	bcc.n	8014c84 <tcp_parseopt+0x18>
 8014d1e:	e004      	b.n	8014d2a <tcp_parseopt+0xbe>
        return;
 8014d20:	bf00      	nop
 8014d22:	e002      	b.n	8014d2a <tcp_parseopt+0xbe>
          return;
 8014d24:	bf00      	nop
 8014d26:	e000      	b.n	8014d2a <tcp_parseopt+0xbe>
          return;
 8014d28:	bf00      	nop
      }
    }
  }
}
 8014d2a:	3710      	adds	r7, #16
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	240076e8 	.word	0x240076e8
 8014d34:	240076f0 	.word	0x240076f0

08014d38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014d3c:	4b05      	ldr	r3, [pc, #20]	@ (8014d54 <tcp_trigger_input_pcb_close+0x1c>)
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	f043 0310 	orr.w	r3, r3, #16
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	4b03      	ldr	r3, [pc, #12]	@ (8014d54 <tcp_trigger_input_pcb_close+0x1c>)
 8014d48:	701a      	strb	r2, [r3, #0]
}
 8014d4a:	bf00      	nop
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d52:	4770      	bx	lr
 8014d54:	24007701 	.word	0x24007701

08014d58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b086      	sub	sp, #24
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	60f8      	str	r0, [r7, #12]
 8014d60:	607b      	str	r3, [r7, #4]
 8014d62:	460b      	mov	r3, r1
 8014d64:	817b      	strh	r3, [r7, #10]
 8014d66:	4613      	mov	r3, r2
 8014d68:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014d6a:	897a      	ldrh	r2, [r7, #10]
 8014d6c:	893b      	ldrh	r3, [r7, #8]
 8014d6e:	4413      	add	r3, r2
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	3314      	adds	r3, #20
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	2200      	movs	r2, #0
 8014d78:	4619      	mov	r1, r3
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	f7fb fb76 	bl	801046c <pbuf_alloc>
 8014d80:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d056      	beq.n	8014e36 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014d88:	897b      	ldrh	r3, [r7, #10]
 8014d8a:	3313      	adds	r3, #19
 8014d8c:	697a      	ldr	r2, [r7, #20]
 8014d8e:	8952      	ldrh	r2, [r2, #10]
 8014d90:	4293      	cmp	r3, r2
 8014d92:	db05      	blt.n	8014da0 <tcp_output_alloc_header+0x48>
 8014d94:	4b2a      	ldr	r3, [pc, #168]	@ (8014e40 <tcp_output_alloc_header+0xe8>)
 8014d96:	2272      	movs	r2, #114	@ 0x72
 8014d98:	492a      	ldr	r1, [pc, #168]	@ (8014e44 <tcp_output_alloc_header+0xec>)
 8014d9a:	482b      	ldr	r0, [pc, #172]	@ (8014e48 <tcp_output_alloc_header+0xf0>)
 8014d9c:	f005 ff82 	bl	801aca4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	8adb      	ldrh	r3, [r3, #22]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fa fc5e 	bl	800f66c <lwip_htons>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	8b1b      	ldrh	r3, [r3, #24]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fa fc55 	bl	800f66c <lwip_htons>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7fa fc57 	bl	800f688 <lwip_htonl>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014de0:	897b      	ldrh	r3, [r7, #10]
 8014de2:	089b      	lsrs	r3, r3, #2
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	3305      	adds	r3, #5
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	031b      	lsls	r3, r3, #12
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	f043 0310 	orr.w	r3, r3, #16
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fa fc39 	bl	800f66c <lwip_htons>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7fa fc30 	bl	800f66c <lwip_htons>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	461a      	mov	r2, r3
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	2200      	movs	r2, #0
 8014e18:	741a      	strb	r2, [r3, #16]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	2200      	movs	r2, #0
 8014e22:	749a      	strb	r2, [r3, #18]
 8014e24:	2200      	movs	r2, #0
 8014e26:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e2c:	68fa      	ldr	r2, [r7, #12]
 8014e2e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014e30:	441a      	add	r2, r3
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014e36:	697b      	ldr	r3, [r7, #20]
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3718      	adds	r7, #24
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	0801df88 	.word	0x0801df88
 8014e44:	0801dff0 	.word	0x0801dff0
 8014e48:	0801e020 	.word	0x0801e020

08014e4c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e4c:	b590      	push	{r4, r7, lr}
 8014e4e:	b085      	sub	sp, #20
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d02d      	beq.n	8014eb8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014e60:	60fb      	str	r3, [r7, #12]
 8014e62:	e002      	b.n	8014e6a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d1f8      	bne.n	8014e64 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	899b      	ldrh	r3, [r3, #12]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fa fbf6 	bl	800f66c <lwip_htons>
 8014e80:	4603      	mov	r3, r0
 8014e82:	f003 0307 	and.w	r3, r3, #7
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d116      	bne.n	8014eb8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	899b      	ldrh	r3, [r3, #12]
 8014e90:	b29c      	uxth	r4, r3
 8014e92:	2001      	movs	r0, #1
 8014e94:	f7fa fbea 	bl	800f66c <lwip_htons>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	4322      	orrs	r2, r4
 8014ea2:	b292      	uxth	r2, r2
 8014ea4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	7e9b      	ldrb	r3, [r3, #26]
 8014eaa:	f043 0320 	orr.w	r3, r3, #32
 8014eae:	b2da      	uxtb	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	e004      	b.n	8014ec2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014eb8:	2101      	movs	r1, #1
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fcbe 	bl	801583c <tcp_enqueue_flags>
 8014ec0:	4603      	mov	r3, r0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd90      	pop	{r4, r7, pc}
	...

08014ecc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014ecc:	b590      	push	{r4, r7, lr}
 8014ece:	b087      	sub	sp, #28
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	60f8      	str	r0, [r7, #12]
 8014ed4:	60b9      	str	r1, [r7, #8]
 8014ed6:	603b      	str	r3, [r7, #0]
 8014ed8:	4613      	mov	r3, r2
 8014eda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014edc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	f003 0304 	and.w	r3, r3, #4
 8014ee8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014eea:	2003      	movs	r0, #3
 8014eec:	f7fa ffca 	bl	800fe84 <memp_malloc>
 8014ef0:	6138      	str	r0, [r7, #16]
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d104      	bne.n	8014f02 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014ef8:	68b8      	ldr	r0, [r7, #8]
 8014efa:	f7fb fe2f 	bl	8010b5c <pbuf_free>
    return NULL;
 8014efe:	2300      	movs	r3, #0
 8014f00:	e060      	b.n	8014fc4 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014f08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	891a      	ldrh	r2, [r3, #8]
 8014f1a:	7dfb      	ldrb	r3, [r7, #23]
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d205      	bcs.n	8014f2e <tcp_create_segment+0x62>
 8014f22:	4b2a      	ldr	r3, [pc, #168]	@ (8014fcc <tcp_create_segment+0x100>)
 8014f24:	22ba      	movs	r2, #186	@ 0xba
 8014f26:	492a      	ldr	r1, [pc, #168]	@ (8014fd0 <tcp_create_segment+0x104>)
 8014f28:	482a      	ldr	r0, [pc, #168]	@ (8014fd4 <tcp_create_segment+0x108>)
 8014f2a:	f005 febb 	bl	801aca4 <iprintf>
  seg->len = p->tot_len - optlen;
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	891a      	ldrh	r2, [r3, #8]
 8014f32:	7dfb      	ldrb	r3, [r7, #23]
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	b29a      	uxth	r2, r3
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014f3e:	2114      	movs	r1, #20
 8014f40:	68b8      	ldr	r0, [r7, #8]
 8014f42:	f7fb fde7 	bl	8010b14 <pbuf_header>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d004      	beq.n	8014f56 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f4c:	6938      	ldr	r0, [r7, #16]
 8014f4e:	f7fd f93d 	bl	80121cc <tcp_seg_free>
    return NULL;
 8014f52:	2300      	movs	r3, #0
 8014f54:	e036      	b.n	8014fc4 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	685a      	ldr	r2, [r3, #4]
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	8ada      	ldrh	r2, [r3, #22]
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	68dc      	ldr	r4, [r3, #12]
 8014f68:	4610      	mov	r0, r2
 8014f6a:	f7fa fb7f 	bl	800f66c <lwip_htons>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	8b1a      	ldrh	r2, [r3, #24]
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	68dc      	ldr	r4, [r3, #12]
 8014f7a:	4610      	mov	r0, r2
 8014f7c:	f7fa fb76 	bl	800f66c <lwip_htons>
 8014f80:	4603      	mov	r3, r0
 8014f82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	68dc      	ldr	r4, [r3, #12]
 8014f88:	6838      	ldr	r0, [r7, #0]
 8014f8a:	f7fa fb7d 	bl	800f688 <lwip_htonl>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014f92:	7dfb      	ldrb	r3, [r7, #23]
 8014f94:	089b      	lsrs	r3, r3, #2
 8014f96:	b2db      	uxtb	r3, r3
 8014f98:	3305      	adds	r3, #5
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	031b      	lsls	r3, r3, #12
 8014f9e:	b29a      	uxth	r2, r3
 8014fa0:	79fb      	ldrb	r3, [r7, #7]
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	4313      	orrs	r3, r2
 8014fa6:	b29a      	uxth	r2, r3
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	68dc      	ldr	r4, [r3, #12]
 8014fac:	4610      	mov	r0, r2
 8014fae:	f7fa fb5d 	bl	800f66c <lwip_htons>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	749a      	strb	r2, [r3, #18]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	74da      	strb	r2, [r3, #19]
  return seg;
 8014fc2:	693b      	ldr	r3, [r7, #16]
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	371c      	adds	r7, #28
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd90      	pop	{r4, r7, pc}
 8014fcc:	0801df88 	.word	0x0801df88
 8014fd0:	0801e048 	.word	0x0801e048
 8014fd4:	0801e020 	.word	0x0801e020

08014fd8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	607b      	str	r3, [r7, #4]
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	73fb      	strb	r3, [r7, #15]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	81bb      	strh	r3, [r7, #12]
 8014fe8:	4613      	mov	r3, r2
 8014fea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014fec:	89bb      	ldrh	r3, [r7, #12]
 8014fee:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014ff0:	89ba      	ldrh	r2, [r7, #12]
 8014ff2:	897b      	ldrh	r3, [r7, #10]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d221      	bcs.n	801503c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014ff8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014ffc:	f003 0302 	and.w	r3, r3, #2
 8015000:	2b00      	cmp	r3, #0
 8015002:	d111      	bne.n	8015028 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8015004:	6a3b      	ldr	r3, [r7, #32]
 8015006:	7e9b      	ldrb	r3, [r3, #26]
 8015008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801500c:	2b00      	cmp	r3, #0
 801500e:	d115      	bne.n	801503c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8015010:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015014:	2b00      	cmp	r3, #0
 8015016:	d007      	beq.n	8015028 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015018:	6a3b      	ldr	r3, [r7, #32]
 801501a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 801501c:	2b00      	cmp	r3, #0
 801501e:	d103      	bne.n	8015028 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8015020:	6a3b      	ldr	r3, [r7, #32]
 8015022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 8015024:	2b00      	cmp	r3, #0
 8015026:	d009      	beq.n	801503c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015028:	89bb      	ldrh	r3, [r7, #12]
 801502a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801502e:	f023 0203 	bic.w	r2, r3, #3
 8015032:	897b      	ldrh	r3, [r7, #10]
 8015034:	4293      	cmp	r3, r2
 8015036:	bf28      	it	cs
 8015038:	4613      	movcs	r3, r2
 801503a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801503c:	8af9      	ldrh	r1, [r7, #22]
 801503e:	7bfb      	ldrb	r3, [r7, #15]
 8015040:	2200      	movs	r2, #0
 8015042:	4618      	mov	r0, r3
 8015044:	f7fb fa12 	bl	801046c <pbuf_alloc>
 8015048:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d101      	bne.n	8015054 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8015050:	2300      	movs	r3, #0
 8015052:	e019      	b.n	8015088 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d006      	beq.n	801506a <tcp_pbuf_prealloc+0x92>
 801505c:	4b0c      	ldr	r3, [pc, #48]	@ (8015090 <tcp_pbuf_prealloc+0xb8>)
 801505e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8015062:	490c      	ldr	r1, [pc, #48]	@ (8015094 <tcp_pbuf_prealloc+0xbc>)
 8015064:	480c      	ldr	r0, [pc, #48]	@ (8015098 <tcp_pbuf_prealloc+0xc0>)
 8015066:	f005 fe1d 	bl	801aca4 <iprintf>
  *oversize = p->len - length;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	895a      	ldrh	r2, [r3, #10]
 801506e:	89bb      	ldrh	r3, [r7, #12]
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	b29a      	uxth	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	89ba      	ldrh	r2, [r7, #12]
 801507c:	811a      	strh	r2, [r3, #8]
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	891a      	ldrh	r2, [r3, #8]
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	815a      	strh	r2, [r3, #10]
  return p;
 8015086:	693b      	ldr	r3, [r7, #16]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3718      	adds	r7, #24
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	0801df88 	.word	0x0801df88
 8015094:	0801e060 	.word	0x0801e060
 8015098:	0801e020 	.word	0x0801e020

0801509c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	460b      	mov	r3, r1
 80150a6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	7d1b      	ldrb	r3, [r3, #20]
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	d00e      	beq.n	80150ce <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80150b4:	2b07      	cmp	r3, #7
 80150b6:	d00a      	beq.n	80150ce <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80150bc:	2b02      	cmp	r3, #2
 80150be:	d006      	beq.n	80150ce <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80150c4:	2b03      	cmp	r3, #3
 80150c6:	d002      	beq.n	80150ce <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80150c8:	f06f 030a 	mvn.w	r3, #10
 80150cc:	e04f      	b.n	801516e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80150ce:	887b      	ldrh	r3, [r7, #2]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d101      	bne.n	80150d8 <tcp_write_checks+0x3c>
    return ERR_OK;
 80150d4:	2300      	movs	r3, #0
 80150d6:	e04a      	b.n	801516e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80150de:	887a      	ldrh	r2, [r7, #2]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d909      	bls.n	80150f8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	7e9b      	ldrb	r3, [r3, #26]
 80150e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80150ec:	b2da      	uxtb	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80150f2:	f04f 33ff 	mov.w	r3, #4294967295
 80150f6:	e03a      	b.n	801516e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80150fe:	2b08      	cmp	r3, #8
 8015100:	d806      	bhi.n	8015110 <tcp_write_checks+0x74>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015108:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801510c:	4293      	cmp	r3, r2
 801510e:	d909      	bls.n	8015124 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	7e9b      	ldrb	r3, [r3, #26]
 8015114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015118:	b2da      	uxtb	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801511e:	f04f 33ff 	mov.w	r3, #4294967295
 8015122:	e024      	b.n	801516e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801512a:	2b00      	cmp	r3, #0
 801512c:	d00f      	beq.n	801514e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015132:	2b00      	cmp	r3, #0
 8015134:	d11a      	bne.n	801516c <tcp_write_checks+0xd0>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801513a:	2b00      	cmp	r3, #0
 801513c:	d116      	bne.n	801516c <tcp_write_checks+0xd0>
 801513e:	4b0e      	ldr	r3, [pc, #56]	@ (8015178 <tcp_write_checks+0xdc>)
 8015140:	f240 1255 	movw	r2, #341	@ 0x155
 8015144:	490d      	ldr	r1, [pc, #52]	@ (801517c <tcp_write_checks+0xe0>)
 8015146:	480e      	ldr	r0, [pc, #56]	@ (8015180 <tcp_write_checks+0xe4>)
 8015148:	f005 fdac 	bl	801aca4 <iprintf>
 801514c:	e00e      	b.n	801516c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015152:	2b00      	cmp	r3, #0
 8015154:	d103      	bne.n	801515e <tcp_write_checks+0xc2>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801515a:	2b00      	cmp	r3, #0
 801515c:	d006      	beq.n	801516c <tcp_write_checks+0xd0>
 801515e:	4b06      	ldr	r3, [pc, #24]	@ (8015178 <tcp_write_checks+0xdc>)
 8015160:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8015164:	4907      	ldr	r1, [pc, #28]	@ (8015184 <tcp_write_checks+0xe8>)
 8015166:	4806      	ldr	r0, [pc, #24]	@ (8015180 <tcp_write_checks+0xe4>)
 8015168:	f005 fd9c 	bl	801aca4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801516c:	2300      	movs	r3, #0
}
 801516e:	4618      	mov	r0, r3
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	0801df88 	.word	0x0801df88
 801517c:	0801e074 	.word	0x0801e074
 8015180:	0801e020 	.word	0x0801e020
 8015184:	0801e0b0 	.word	0x0801e0b0

08015188 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015188:	b590      	push	{r4, r7, lr}
 801518a:	b09b      	sub	sp, #108	@ 0x6c
 801518c:	af04      	add	r7, sp, #16
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	4611      	mov	r1, r2
 8015194:	461a      	mov	r2, r3
 8015196:	460b      	mov	r3, r1
 8015198:	80fb      	strh	r3, [r7, #6]
 801519a:	4613      	mov	r3, r2
 801519c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801519e:	2300      	movs	r3, #0
 80151a0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80151a6:	2300      	movs	r3, #0
 80151a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80151aa:	2300      	movs	r3, #0
 80151ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80151ae:	2300      	movs	r3, #0
 80151b0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80151b2:	2300      	movs	r3, #0
 80151b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80151c4:	2300      	movs	r3, #0
 80151c6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80151d6:	085b      	lsrs	r3, r3, #1
 80151d8:	b29a      	uxth	r2, r3
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151de:	4293      	cmp	r3, r2
 80151e0:	bf28      	it	cs
 80151e2:	4613      	movcs	r3, r2
 80151e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80151e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d102      	bne.n	80151f2 <tcp_write+0x6a>
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151f0:	e000      	b.n	80151f4 <tcp_write+0x6c>
 80151f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80151f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80151f6:	68bb      	ldr	r3, [r7, #8]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d109      	bne.n	8015210 <tcp_write+0x88>
 80151fc:	4b92      	ldr	r3, [pc, #584]	@ (8015448 <tcp_write+0x2c0>)
 80151fe:	f240 1291 	movw	r2, #401	@ 0x191
 8015202:	4992      	ldr	r1, [pc, #584]	@ (801544c <tcp_write+0x2c4>)
 8015204:	4892      	ldr	r0, [pc, #584]	@ (8015450 <tcp_write+0x2c8>)
 8015206:	f005 fd4d 	bl	801aca4 <iprintf>
 801520a:	f06f 030f 	mvn.w	r3, #15
 801520e:	e30a      	b.n	8015826 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015210:	88fb      	ldrh	r3, [r7, #6]
 8015212:	4619      	mov	r1, r3
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f7ff ff41 	bl	801509c <tcp_write_checks>
 801521a:	4603      	mov	r3, r0
 801521c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8015220:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015224:	2b00      	cmp	r3, #0
 8015226:	d002      	beq.n	801522e <tcp_write+0xa6>
    return err;
 8015228:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801522c:	e2fb      	b.n	8015826 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015234:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 80f4 	beq.w	801542a <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015246:	653b      	str	r3, [r7, #80]	@ 0x50
 8015248:	e002      	b.n	8015250 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801524a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d1f8      	bne.n	801524a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801525a:	7a9b      	ldrb	r3, [r3, #10]
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	b29b      	uxth	r3, r3
 8015260:	f003 0304 	and.w	r3, r3, #4
 8015264:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015266:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801526a:	891b      	ldrh	r3, [r3, #8]
 801526c:	4619      	mov	r1, r3
 801526e:	8c3b      	ldrh	r3, [r7, #32]
 8015270:	440b      	add	r3, r1
 8015272:	429a      	cmp	r2, r3
 8015274:	da06      	bge.n	8015284 <tcp_write+0xfc>
 8015276:	4b74      	ldr	r3, [pc, #464]	@ (8015448 <tcp_write+0x2c0>)
 8015278:	f240 12c7 	movw	r2, #455	@ 0x1c7
 801527c:	4975      	ldr	r1, [pc, #468]	@ (8015454 <tcp_write+0x2cc>)
 801527e:	4874      	ldr	r0, [pc, #464]	@ (8015450 <tcp_write+0x2c8>)
 8015280:	f005 fd10 	bl	801aca4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015286:	891a      	ldrh	r2, [r3, #8]
 8015288:	8c3b      	ldrh	r3, [r7, #32]
 801528a:	4413      	add	r3, r2
 801528c:	b29b      	uxth	r3, r3
 801528e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015290:	1ad3      	subs	r3, r2, r3
 8015292:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801529a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801529c:	8a7b      	ldrh	r3, [r7, #18]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d026      	beq.n	80152f0 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80152a2:	8a7b      	ldrh	r3, [r7, #18]
 80152a4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d206      	bcs.n	80152b8 <tcp_write+0x130>
 80152aa:	4b67      	ldr	r3, [pc, #412]	@ (8015448 <tcp_write+0x2c0>)
 80152ac:	f240 12d9 	movw	r2, #473	@ 0x1d9
 80152b0:	4969      	ldr	r1, [pc, #420]	@ (8015458 <tcp_write+0x2d0>)
 80152b2:	4867      	ldr	r0, [pc, #412]	@ (8015450 <tcp_write+0x2c8>)
 80152b4:	f005 fcf6 	bl	801aca4 <iprintf>
      seg = last_unsent;
 80152b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80152ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80152bc:	8a7b      	ldrh	r3, [r7, #18]
 80152be:	88fa      	ldrh	r2, [r7, #6]
 80152c0:	4293      	cmp	r3, r2
 80152c2:	bf28      	it	cs
 80152c4:	4613      	movcs	r3, r2
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80152ca:	4293      	cmp	r3, r2
 80152cc:	bf28      	it	cs
 80152ce:	4613      	movcs	r3, r2
 80152d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80152d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80152d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80152d8:	4413      	add	r3, r2
 80152da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80152de:	8a7a      	ldrh	r2, [r7, #18]
 80152e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80152e2:	1ad3      	subs	r3, r2, r3
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80152e8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80152ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80152ec:	1ad3      	subs	r3, r2, r3
 80152ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80152f0:	8a7b      	ldrh	r3, [r7, #18]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00b      	beq.n	801530e <tcp_write+0x186>
 80152f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80152fa:	88fb      	ldrh	r3, [r7, #6]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d006      	beq.n	801530e <tcp_write+0x186>
 8015300:	4b51      	ldr	r3, [pc, #324]	@ (8015448 <tcp_write+0x2c0>)
 8015302:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8015306:	4955      	ldr	r1, [pc, #340]	@ (801545c <tcp_write+0x2d4>)
 8015308:	4851      	ldr	r0, [pc, #324]	@ (8015450 <tcp_write+0x2c8>)
 801530a:	f005 fccb 	bl	801aca4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801530e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015312:	88fb      	ldrh	r3, [r7, #6]
 8015314:	429a      	cmp	r2, r3
 8015316:	f080 8169 	bcs.w	80155ec <tcp_write+0x464>
 801531a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801531c:	2b00      	cmp	r3, #0
 801531e:	f000 8165 	beq.w	80155ec <tcp_write+0x464>
 8015322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015324:	891b      	ldrh	r3, [r3, #8]
 8015326:	2b00      	cmp	r3, #0
 8015328:	f000 8160 	beq.w	80155ec <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801532c:	88fa      	ldrh	r2, [r7, #6]
 801532e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015332:	1ad2      	subs	r2, r2, r3
 8015334:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015336:	4293      	cmp	r3, r2
 8015338:	bfa8      	it	ge
 801533a:	4613      	movge	r3, r2
 801533c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801533e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015340:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015342:	797b      	ldrb	r3, [r7, #5]
 8015344:	f003 0301 	and.w	r3, r3, #1
 8015348:	2b00      	cmp	r3, #0
 801534a:	d027      	beq.n	801539c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801534c:	f107 0012 	add.w	r0, r7, #18
 8015350:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015352:	8bf9      	ldrh	r1, [r7, #30]
 8015354:	2301      	movs	r3, #1
 8015356:	9302      	str	r3, [sp, #8]
 8015358:	797b      	ldrb	r3, [r7, #5]
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	4603      	mov	r3, r0
 8015362:	2004      	movs	r0, #4
 8015364:	f7ff fe38 	bl	8014fd8 <tcp_pbuf_prealloc>
 8015368:	6578      	str	r0, [r7, #84]	@ 0x54
 801536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801536c:	2b00      	cmp	r3, #0
 801536e:	f000 8228 	beq.w	80157c2 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015374:	6858      	ldr	r0, [r3, #4]
 8015376:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	4413      	add	r3, r2
 801537e:	8bfa      	ldrh	r2, [r7, #30]
 8015380:	4619      	mov	r1, r3
 8015382:	f005 fdd0 	bl	801af26 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015386:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015388:	f7fb fc82 	bl	8010c90 <pbuf_clen>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015394:	4413      	add	r3, r2
 8015396:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801539a:	e03f      	b.n	801541c <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801539c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80153a2:	e002      	b.n	80153aa <tcp_write+0x222>
 80153a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80153aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d1f8      	bne.n	80153a4 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80153b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153b4:	7b1b      	ldrb	r3, [r3, #12]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d115      	bne.n	80153e6 <tcp_write+0x25e>
 80153ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80153c0:	8952      	ldrh	r2, [r2, #10]
 80153c2:	4413      	add	r3, r2
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d10d      	bne.n	80153e6 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80153ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d006      	beq.n	80153e0 <tcp_write+0x258>
 80153d2:	4b1d      	ldr	r3, [pc, #116]	@ (8015448 <tcp_write+0x2c0>)
 80153d4:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80153d8:	4921      	ldr	r1, [pc, #132]	@ (8015460 <tcp_write+0x2d8>)
 80153da:	481d      	ldr	r0, [pc, #116]	@ (8015450 <tcp_write+0x2c8>)
 80153dc:	f005 fc62 	bl	801aca4 <iprintf>
          extendlen = seglen;
 80153e0:	8bfb      	ldrh	r3, [r7, #30]
 80153e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80153e4:	e01a      	b.n	801541c <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80153e6:	8bfb      	ldrh	r3, [r7, #30]
 80153e8:	2201      	movs	r2, #1
 80153ea:	4619      	mov	r1, r3
 80153ec:	2004      	movs	r0, #4
 80153ee:	f7fb f83d 	bl	801046c <pbuf_alloc>
 80153f2:	6578      	str	r0, [r7, #84]	@ 0x54
 80153f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f000 81e5 	beq.w	80157c6 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80153fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015400:	68ba      	ldr	r2, [r7, #8]
 8015402:	441a      	add	r2, r3
 8015404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015406:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015408:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801540a:	f7fb fc41 	bl	8010c90 <pbuf_clen>
 801540e:	4603      	mov	r3, r0
 8015410:	461a      	mov	r2, r3
 8015412:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015416:	4413      	add	r3, r2
 8015418:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801541c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015420:	8bfb      	ldrh	r3, [r7, #30]
 8015422:	4413      	add	r3, r2
 8015424:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8015428:	e0e0      	b.n	80155ec <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 80db 	beq.w	80155ec <tcp_write+0x464>
 8015436:	4b04      	ldr	r3, [pc, #16]	@ (8015448 <tcp_write+0x2c0>)
 8015438:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801543c:	4909      	ldr	r1, [pc, #36]	@ (8015464 <tcp_write+0x2dc>)
 801543e:	4804      	ldr	r0, [pc, #16]	@ (8015450 <tcp_write+0x2c8>)
 8015440:	f005 fc30 	bl	801aca4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015444:	e0d2      	b.n	80155ec <tcp_write+0x464>
 8015446:	bf00      	nop
 8015448:	0801df88 	.word	0x0801df88
 801544c:	0801e0e4 	.word	0x0801e0e4
 8015450:	0801e020 	.word	0x0801e020
 8015454:	0801e118 	.word	0x0801e118
 8015458:	0801e130 	.word	0x0801e130
 801545c:	0801e150 	.word	0x0801e150
 8015460:	0801e170 	.word	0x0801e170
 8015464:	0801e19c 	.word	0x0801e19c
    struct pbuf *p;
    u16_t left = len - pos;
 8015468:	88fa      	ldrh	r2, [r7, #6]
 801546a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801546e:	1ad3      	subs	r3, r2, r3
 8015470:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015476:	b29b      	uxth	r3, r3
 8015478:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801547a:	1ad3      	subs	r3, r2, r3
 801547c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801547e:	8b7a      	ldrh	r2, [r7, #26]
 8015480:	8bbb      	ldrh	r3, [r7, #28]
 8015482:	4293      	cmp	r3, r2
 8015484:	bf28      	it	cs
 8015486:	4613      	movcs	r3, r2
 8015488:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801548a:	797b      	ldrb	r3, [r7, #5]
 801548c:	f003 0301 	and.w	r3, r3, #1
 8015490:	2b00      	cmp	r3, #0
 8015492:	d036      	beq.n	8015502 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015498:	b29a      	uxth	r2, r3
 801549a:	8b3b      	ldrh	r3, [r7, #24]
 801549c:	4413      	add	r3, r2
 801549e:	b299      	uxth	r1, r3
 80154a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	bf0c      	ite	eq
 80154a6:	2301      	moveq	r3, #1
 80154a8:	2300      	movne	r3, #0
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	f107 0012 	add.w	r0, r7, #18
 80154b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80154b2:	9302      	str	r3, [sp, #8]
 80154b4:	797b      	ldrb	r3, [r7, #5]
 80154b6:	9301      	str	r3, [sp, #4]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	4603      	mov	r3, r0
 80154be:	2000      	movs	r0, #0
 80154c0:	f7ff fd8a 	bl	8014fd8 <tcp_pbuf_prealloc>
 80154c4:	6338      	str	r0, [r7, #48]	@ 0x30
 80154c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	f000 817e 	beq.w	80157ca <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80154ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d0:	895b      	ldrh	r3, [r3, #10]
 80154d2:	8b3a      	ldrh	r2, [r7, #24]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d906      	bls.n	80154e6 <tcp_write+0x35e>
 80154d8:	4b8f      	ldr	r3, [pc, #572]	@ (8015718 <tcp_write+0x590>)
 80154da:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80154de:	498f      	ldr	r1, [pc, #572]	@ (801571c <tcp_write+0x594>)
 80154e0:	488f      	ldr	r0, [pc, #572]	@ (8015720 <tcp_write+0x598>)
 80154e2:	f005 fbdf 	bl	801aca4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80154e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e8:	685a      	ldr	r2, [r3, #4]
 80154ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154ee:	18d0      	adds	r0, r2, r3
 80154f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80154f4:	68ba      	ldr	r2, [r7, #8]
 80154f6:	4413      	add	r3, r2
 80154f8:	8b3a      	ldrh	r2, [r7, #24]
 80154fa:	4619      	mov	r1, r3
 80154fc:	f005 fd13 	bl	801af26 <memcpy>
 8015500:	e02e      	b.n	8015560 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015502:	8a7b      	ldrh	r3, [r7, #18]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d006      	beq.n	8015516 <tcp_write+0x38e>
 8015508:	4b83      	ldr	r3, [pc, #524]	@ (8015718 <tcp_write+0x590>)
 801550a:	f240 224b 	movw	r2, #587	@ 0x24b
 801550e:	4985      	ldr	r1, [pc, #532]	@ (8015724 <tcp_write+0x59c>)
 8015510:	4883      	ldr	r0, [pc, #524]	@ (8015720 <tcp_write+0x598>)
 8015512:	f005 fbc7 	bl	801aca4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015516:	8b3b      	ldrh	r3, [r7, #24]
 8015518:	2201      	movs	r2, #1
 801551a:	4619      	mov	r1, r3
 801551c:	2000      	movs	r0, #0
 801551e:	f7fa ffa5 	bl	801046c <pbuf_alloc>
 8015522:	6178      	str	r0, [r7, #20]
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	2b00      	cmp	r3, #0
 8015528:	f000 8151 	beq.w	80157ce <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801552c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015530:	68ba      	ldr	r2, [r7, #8]
 8015532:	441a      	add	r2, r3
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801553c:	b29b      	uxth	r3, r3
 801553e:	2200      	movs	r2, #0
 8015540:	4619      	mov	r1, r3
 8015542:	2000      	movs	r0, #0
 8015544:	f7fa ff92 	bl	801046c <pbuf_alloc>
 8015548:	6338      	str	r0, [r7, #48]	@ 0x30
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	2b00      	cmp	r3, #0
 801554e:	d103      	bne.n	8015558 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015550:	6978      	ldr	r0, [r7, #20]
 8015552:	f7fb fb03 	bl	8010b5c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015556:	e13d      	b.n	80157d4 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015558:	6979      	ldr	r1, [r7, #20]
 801555a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801555c:	f7fb fbd8 	bl	8010d10 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015562:	f7fb fb95 	bl	8010c90 <pbuf_clen>
 8015566:	4603      	mov	r3, r0
 8015568:	461a      	mov	r2, r3
 801556a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801556e:	4413      	add	r3, r2
 8015570:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015574:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015578:	2b09      	cmp	r3, #9
 801557a:	d805      	bhi.n	8015588 <tcp_write+0x400>
 801557c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015580:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015584:	4293      	cmp	r3, r2
 8015586:	d903      	bls.n	8015590 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801558a:	f7fb fae7 	bl	8010b5c <pbuf_free>
      goto memerr;
 801558e:	e121      	b.n	80157d4 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015598:	441a      	add	r2, r3
 801559a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	4613      	mov	r3, r2
 80155a2:	2200      	movs	r2, #0
 80155a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f7ff fc90 	bl	8014ecc <tcp_create_segment>
 80155ac:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80155ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f000 810e 	beq.w	80157d2 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80155b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d102      	bne.n	80155c2 <tcp_write+0x43a>
      queue = seg;
 80155bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155be:	647b      	str	r3, [r7, #68]	@ 0x44
 80155c0:	e00c      	b.n	80155dc <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80155c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d106      	bne.n	80155d6 <tcp_write+0x44e>
 80155c8:	4b53      	ldr	r3, [pc, #332]	@ (8015718 <tcp_write+0x590>)
 80155ca:	f240 2285 	movw	r2, #645	@ 0x285
 80155ce:	4956      	ldr	r1, [pc, #344]	@ (8015728 <tcp_write+0x5a0>)
 80155d0:	4853      	ldr	r0, [pc, #332]	@ (8015720 <tcp_write+0x598>)
 80155d2:	f005 fb67 	bl	801aca4 <iprintf>
      prev_seg->next = seg;
 80155d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80155d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80155da:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80155dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155de:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80155e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80155e4:	8b3b      	ldrh	r3, [r7, #24]
 80155e6:	4413      	add	r3, r2
 80155e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80155ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80155f0:	88fb      	ldrh	r3, [r7, #6]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	f4ff af38 	bcc.w	8015468 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80155f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d02c      	beq.n	8015658 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80155fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015604:	e01e      	b.n	8015644 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8015606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015608:	891a      	ldrh	r2, [r3, #8]
 801560a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801560c:	4413      	add	r3, r2
 801560e:	b29a      	uxth	r2, r3
 8015610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015612:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d110      	bne.n	801563e <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015622:	8952      	ldrh	r2, [r2, #10]
 8015624:	4413      	add	r3, r2
 8015626:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015628:	68b9      	ldr	r1, [r7, #8]
 801562a:	4618      	mov	r0, r3
 801562c:	f005 fc7b 	bl	801af26 <memcpy>
        p->len += oversize_used;
 8015630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015632:	895a      	ldrh	r2, [r3, #10]
 8015634:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015636:	4413      	add	r3, r2
 8015638:	b29a      	uxth	r2, r3
 801563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015646:	2b00      	cmp	r3, #0
 8015648:	d1dd      	bne.n	8015606 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801564c:	891a      	ldrh	r2, [r3, #8]
 801564e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015650:	4413      	add	r3, r2
 8015652:	b29a      	uxth	r2, r3
 8015654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015656:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015658:	8a7a      	ldrh	r2, [r7, #18]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015662:	2b00      	cmp	r3, #0
 8015664:	d018      	beq.n	8015698 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015668:	2b00      	cmp	r3, #0
 801566a:	d106      	bne.n	801567a <tcp_write+0x4f2>
 801566c:	4b2a      	ldr	r3, [pc, #168]	@ (8015718 <tcp_write+0x590>)
 801566e:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8015672:	492e      	ldr	r1, [pc, #184]	@ (801572c <tcp_write+0x5a4>)
 8015674:	482a      	ldr	r0, [pc, #168]	@ (8015720 <tcp_write+0x598>)
 8015676:	f005 fb15 	bl	801aca4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801567a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015680:	4618      	mov	r0, r3
 8015682:	f7fb fb45 	bl	8010d10 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015688:	891a      	ldrh	r2, [r3, #8]
 801568a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801568c:	891b      	ldrh	r3, [r3, #8]
 801568e:	4413      	add	r3, r2
 8015690:	b29a      	uxth	r2, r3
 8015692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015694:	811a      	strh	r2, [r3, #8]
 8015696:	e037      	b.n	8015708 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8015698:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801569a:	2b00      	cmp	r3, #0
 801569c:	d034      	beq.n	8015708 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801569e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d003      	beq.n	80156ac <tcp_write+0x524>
 80156a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d106      	bne.n	80156ba <tcp_write+0x532>
 80156ac:	4b1a      	ldr	r3, [pc, #104]	@ (8015718 <tcp_write+0x590>)
 80156ae:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 80156b2:	491f      	ldr	r1, [pc, #124]	@ (8015730 <tcp_write+0x5a8>)
 80156b4:	481a      	ldr	r0, [pc, #104]	@ (8015720 <tcp_write+0x598>)
 80156b6:	f005 faf5 	bl	801aca4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80156ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80156c0:	e009      	b.n	80156d6 <tcp_write+0x54e>
      p->tot_len += extendlen;
 80156c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c4:	891a      	ldrh	r2, [r3, #8]
 80156c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80156c8:	4413      	add	r3, r2
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ce:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80156d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80156d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d1f1      	bne.n	80156c2 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80156de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e0:	891a      	ldrh	r2, [r3, #8]
 80156e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80156e4:	4413      	add	r3, r2
 80156e6:	b29a      	uxth	r2, r3
 80156e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ea:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80156ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ee:	895a      	ldrh	r2, [r3, #10]
 80156f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80156f2:	4413      	add	r3, r2
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156f8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80156fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156fc:	891a      	ldrh	r2, [r3, #8]
 80156fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015700:	4413      	add	r3, r2
 8015702:	b29a      	uxth	r2, r3
 8015704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015706:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801570a:	2b00      	cmp	r3, #0
 801570c:	d112      	bne.n	8015734 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015712:	669a      	str	r2, [r3, #104]	@ 0x68
 8015714:	e011      	b.n	801573a <tcp_write+0x5b2>
 8015716:	bf00      	nop
 8015718:	0801df88 	.word	0x0801df88
 801571c:	0801e1cc 	.word	0x0801e1cc
 8015720:	0801e020 	.word	0x0801e020
 8015724:	0801e20c 	.word	0x0801e20c
 8015728:	0801e21c 	.word	0x0801e21c
 801572c:	0801e230 	.word	0x0801e230
 8015730:	0801e268 	.word	0x0801e268
  } else {
    last_unsent->next = queue;
 8015734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015738:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801573e:	88fb      	ldrh	r3, [r7, #6]
 8015740:	441a      	add	r2, r3
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801574c:	88fb      	ldrh	r3, [r7, #6]
 801574e:	1ad3      	subs	r3, r2, r3
 8015750:	b29a      	uxth	r2, r3
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801575e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015768:	2b00      	cmp	r3, #0
 801576a:	d00e      	beq.n	801578a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10a      	bne.n	801578a <tcp_write+0x602>
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015778:	2b00      	cmp	r3, #0
 801577a:	d106      	bne.n	801578a <tcp_write+0x602>
 801577c:	4b2c      	ldr	r3, [pc, #176]	@ (8015830 <tcp_write+0x6a8>)
 801577e:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 8015782:	492c      	ldr	r1, [pc, #176]	@ (8015834 <tcp_write+0x6ac>)
 8015784:	482c      	ldr	r0, [pc, #176]	@ (8015838 <tcp_write+0x6b0>)
 8015786:	f005 fa8d 	bl	801aca4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801578c:	2b00      	cmp	r3, #0
 801578e:	d016      	beq.n	80157be <tcp_write+0x636>
 8015790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015792:	68db      	ldr	r3, [r3, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d012      	beq.n	80157be <tcp_write+0x636>
 8015798:	797b      	ldrb	r3, [r7, #5]
 801579a:	f003 0302 	and.w	r3, r3, #2
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10d      	bne.n	80157be <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80157a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	899b      	ldrh	r3, [r3, #12]
 80157a8:	b29c      	uxth	r4, r3
 80157aa:	2008      	movs	r0, #8
 80157ac:	f7f9 ff5e 	bl	800f66c <lwip_htons>
 80157b0:	4603      	mov	r3, r0
 80157b2:	461a      	mov	r2, r3
 80157b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	4322      	orrs	r2, r4
 80157ba:	b292      	uxth	r2, r2
 80157bc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80157be:	2300      	movs	r3, #0
 80157c0:	e031      	b.n	8015826 <tcp_write+0x69e>
          goto memerr;
 80157c2:	bf00      	nop
 80157c4:	e006      	b.n	80157d4 <tcp_write+0x64c>
            goto memerr;
 80157c6:	bf00      	nop
 80157c8:	e004      	b.n	80157d4 <tcp_write+0x64c>
        goto memerr;
 80157ca:	bf00      	nop
 80157cc:	e002      	b.n	80157d4 <tcp_write+0x64c>
        goto memerr;
 80157ce:	bf00      	nop
 80157d0:	e000      	b.n	80157d4 <tcp_write+0x64c>
      goto memerr;
 80157d2:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	7e9b      	ldrb	r3, [r3, #26]
 80157d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80157e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d002      	beq.n	80157ee <tcp_write+0x666>
    pbuf_free(concat_p);
 80157e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80157ea:	f7fb f9b7 	bl	8010b5c <pbuf_free>
  }
  if (queue != NULL) {
 80157ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d002      	beq.n	80157fa <tcp_write+0x672>
    tcp_segs_free(queue);
 80157f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80157f6:	f7fc fcd4 	bl	80121a2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015800:	2b00      	cmp	r3, #0
 8015802:	d00e      	beq.n	8015822 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015808:	2b00      	cmp	r3, #0
 801580a:	d10a      	bne.n	8015822 <tcp_write+0x69a>
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015810:	2b00      	cmp	r3, #0
 8015812:	d106      	bne.n	8015822 <tcp_write+0x69a>
 8015814:	4b06      	ldr	r3, [pc, #24]	@ (8015830 <tcp_write+0x6a8>)
 8015816:	f240 3201 	movw	r2, #769	@ 0x301
 801581a:	4906      	ldr	r1, [pc, #24]	@ (8015834 <tcp_write+0x6ac>)
 801581c:	4806      	ldr	r0, [pc, #24]	@ (8015838 <tcp_write+0x6b0>)
 801581e:	f005 fa41 	bl	801aca4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015826:	4618      	mov	r0, r3
 8015828:	375c      	adds	r7, #92	@ 0x5c
 801582a:	46bd      	mov	sp, r7
 801582c:	bd90      	pop	{r4, r7, pc}
 801582e:	bf00      	nop
 8015830:	0801df88 	.word	0x0801df88
 8015834:	0801e2a0 	.word	0x0801e2a0
 8015838:	0801e020 	.word	0x0801e020

0801583c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b08a      	sub	sp, #40	@ 0x28
 8015840:	af02      	add	r7, sp, #8
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	460b      	mov	r3, r1
 8015846:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015850:	78fb      	ldrb	r3, [r7, #3]
 8015852:	f003 0303 	and.w	r3, r3, #3
 8015856:	2b00      	cmp	r3, #0
 8015858:	d106      	bne.n	8015868 <tcp_enqueue_flags+0x2c>
 801585a:	4b6f      	ldr	r3, [pc, #444]	@ (8015a18 <tcp_enqueue_flags+0x1dc>)
 801585c:	f240 321a 	movw	r2, #794	@ 0x31a
 8015860:	496e      	ldr	r1, [pc, #440]	@ (8015a1c <tcp_enqueue_flags+0x1e0>)
 8015862:	486f      	ldr	r0, [pc, #444]	@ (8015a20 <tcp_enqueue_flags+0x1e4>)
 8015864:	f005 fa1e 	bl	801aca4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801586e:	2b08      	cmp	r3, #8
 8015870:	d806      	bhi.n	8015880 <tcp_enqueue_flags+0x44>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015878:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801587c:	4293      	cmp	r3, r2
 801587e:	d90e      	bls.n	801589e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8015880:	78fb      	ldrb	r3, [r7, #3]
 8015882:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	7e9b      	ldrb	r3, [r3, #26]
 801588e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015892:	b2da      	uxtb	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015898:	f04f 33ff 	mov.w	r3, #4294967295
 801589c:	e0b7      	b.n	8015a0e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801589e:	78fb      	ldrb	r3, [r7, #3]
 80158a0:	f003 0302 	and.w	r3, r3, #2
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d001      	beq.n	80158ac <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80158a8:	2301      	movs	r3, #1
 80158aa:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80158ac:	7ffb      	ldrb	r3, [r7, #31]
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	f003 0304 	and.w	r3, r3, #4
 80158b6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80158b8:	7dfb      	ldrb	r3, [r7, #23]
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	2200      	movs	r2, #0
 80158be:	4619      	mov	r1, r3
 80158c0:	2000      	movs	r0, #0
 80158c2:	f7fa fdd3 	bl	801046c <pbuf_alloc>
 80158c6:	6138      	str	r0, [r7, #16]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d109      	bne.n	80158e2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	7e9b      	ldrb	r3, [r3, #26]
 80158d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80158d6:	b2da      	uxtb	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80158dc:	f04f 33ff 	mov.w	r3, #4294967295
 80158e0:	e095      	b.n	8015a0e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	895a      	ldrh	r2, [r3, #10]
 80158e6:	7dfb      	ldrb	r3, [r7, #23]
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d206      	bcs.n	80158fc <tcp_enqueue_flags+0xc0>
 80158ee:	4b4a      	ldr	r3, [pc, #296]	@ (8015a18 <tcp_enqueue_flags+0x1dc>)
 80158f0:	f44f 7250 	mov.w	r2, #832	@ 0x340
 80158f4:	494b      	ldr	r1, [pc, #300]	@ (8015a24 <tcp_enqueue_flags+0x1e8>)
 80158f6:	484a      	ldr	r0, [pc, #296]	@ (8015a20 <tcp_enqueue_flags+0x1e4>)
 80158f8:	f005 f9d4 	bl	801aca4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015900:	78fa      	ldrb	r2, [r7, #3]
 8015902:	7ffb      	ldrb	r3, [r7, #31]
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	460b      	mov	r3, r1
 8015908:	6939      	ldr	r1, [r7, #16]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f7ff fade 	bl	8014ecc <tcp_create_segment>
 8015910:	60f8      	str	r0, [r7, #12]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d109      	bne.n	801592c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	7e9b      	ldrb	r3, [r3, #26]
 801591c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015920:	b2da      	uxtb	r2, r3
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015926:	f04f 33ff 	mov.w	r3, #4294967295
 801592a:	e070      	b.n	8015a0e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	f003 0303 	and.w	r3, r3, #3
 8015934:	2b00      	cmp	r3, #0
 8015936:	d006      	beq.n	8015946 <tcp_enqueue_flags+0x10a>
 8015938:	4b37      	ldr	r3, [pc, #220]	@ (8015a18 <tcp_enqueue_flags+0x1dc>)
 801593a:	f240 3249 	movw	r2, #841	@ 0x349
 801593e:	493a      	ldr	r1, [pc, #232]	@ (8015a28 <tcp_enqueue_flags+0x1ec>)
 8015940:	4837      	ldr	r0, [pc, #220]	@ (8015a20 <tcp_enqueue_flags+0x1e4>)
 8015942:	f005 f9af 	bl	801aca4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	891b      	ldrh	r3, [r3, #8]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d006      	beq.n	801595c <tcp_enqueue_flags+0x120>
 801594e:	4b32      	ldr	r3, [pc, #200]	@ (8015a18 <tcp_enqueue_flags+0x1dc>)
 8015950:	f240 324a 	movw	r2, #842	@ 0x34a
 8015954:	4935      	ldr	r1, [pc, #212]	@ (8015a2c <tcp_enqueue_flags+0x1f0>)
 8015956:	4832      	ldr	r0, [pc, #200]	@ (8015a20 <tcp_enqueue_flags+0x1e4>)
 8015958:	f005 f9a4 	bl	801aca4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015960:	2b00      	cmp	r3, #0
 8015962:	d103      	bne.n	801596c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	68fa      	ldr	r2, [r7, #12]
 8015968:	669a      	str	r2, [r3, #104]	@ 0x68
 801596a:	e00d      	b.n	8015988 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015970:	61bb      	str	r3, [r7, #24]
 8015972:	e002      	b.n	801597a <tcp_enqueue_flags+0x13e>
 8015974:	69bb      	ldr	r3, [r7, #24]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	61bb      	str	r3, [r7, #24]
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d1f8      	bne.n	8015974 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2200      	movs	r2, #0
 801598c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015990:	78fb      	ldrb	r3, [r7, #3]
 8015992:	f003 0302 	and.w	r3, r3, #2
 8015996:	2b00      	cmp	r3, #0
 8015998:	d104      	bne.n	80159a4 <tcp_enqueue_flags+0x168>
 801599a:	78fb      	ldrb	r3, [r7, #3]
 801599c:	f003 0301 	and.w	r3, r3, #1
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d004      	beq.n	80159ae <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159a8:	1c5a      	adds	r2, r3, #1
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80159ae:	78fb      	ldrb	r3, [r7, #3]
 80159b0:	f003 0301 	and.w	r3, r3, #1
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d006      	beq.n	80159c6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	7e9b      	ldrb	r3, [r3, #26]
 80159bc:	f043 0320 	orr.w	r3, r3, #32
 80159c0:	b2da      	uxtb	r2, r3
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fb f960 	bl	8010c90 <pbuf_clen>
 80159d0:	4603      	mov	r3, r0
 80159d2:	461a      	mov	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80159da:	4413      	add	r3, r2
 80159dc:	b29a      	uxth	r2, r3
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d00e      	beq.n	8015a0c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d10a      	bne.n	8015a0c <tcp_enqueue_flags+0x1d0>
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d106      	bne.n	8015a0c <tcp_enqueue_flags+0x1d0>
 80159fe:	4b06      	ldr	r3, [pc, #24]	@ (8015a18 <tcp_enqueue_flags+0x1dc>)
 8015a00:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015a04:	490a      	ldr	r1, [pc, #40]	@ (8015a30 <tcp_enqueue_flags+0x1f4>)
 8015a06:	4806      	ldr	r0, [pc, #24]	@ (8015a20 <tcp_enqueue_flags+0x1e4>)
 8015a08:	f005 f94c 	bl	801aca4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015a0c:	2300      	movs	r3, #0
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3720      	adds	r7, #32
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	0801df88 	.word	0x0801df88
 8015a1c:	0801e2c0 	.word	0x0801e2c0
 8015a20:	0801e020 	.word	0x0801e020
 8015a24:	0801e318 	.word	0x0801e318
 8015a28:	0801e354 	.word	0x0801e354
 8015a2c:	0801e36c 	.word	0x0801e36c
 8015a30:	0801e398 	.word	0x0801e398

08015a34 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015a34:	b590      	push	{r4, r7, lr}
 8015a36:	b08b      	sub	sp, #44	@ 0x2c
 8015a38:	af04      	add	r7, sp, #16
 8015a3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015a40:	7dbb      	ldrb	r3, [r7, #22]
 8015a42:	b29c      	uxth	r4, r3
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f9 fe1d 	bl	800f688 <lwip_htonl>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	2200      	movs	r2, #0
 8015a52:	4621      	mov	r1, r4
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7ff f97f 	bl	8014d58 <tcp_output_alloc_header>
 8015a5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d109      	bne.n	8015a76 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	7e9b      	ldrb	r3, [r3, #26]
 8015a66:	f043 0303 	orr.w	r3, r3, #3
 8015a6a:	b2da      	uxtb	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015a70:	f06f 0301 	mvn.w	r3, #1
 8015a74:	e036      	b.n	8015ae4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	3304      	adds	r3, #4
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f003 fc16 	bl	80192ac <ip4_route>
 8015a80:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d102      	bne.n	8015a8e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8015a88:	23fc      	movs	r3, #252	@ 0xfc
 8015a8a:	75fb      	strb	r3, [r7, #23]
 8015a8c:	e012      	b.n	8015ab4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8015a8e:	6879      	ldr	r1, [r7, #4]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	1d18      	adds	r0, r3, #4
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	7a9c      	ldrb	r4, [r3, #10]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	7a5b      	ldrb	r3, [r3, #9]
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	9202      	str	r2, [sp, #8]
 8015aa0:	2206      	movs	r2, #6
 8015aa2:	9201      	str	r2, [sp, #4]
 8015aa4:	9300      	str	r3, [sp, #0]
 8015aa6:	4623      	mov	r3, r4
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	6938      	ldr	r0, [r7, #16]
 8015aac:	f003 fdc4 	bl	8019638 <ip4_output_if>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015ab4:	6938      	ldr	r0, [r7, #16]
 8015ab6:	f7fb f851 	bl	8010b5c <pbuf_free>

  if (err != ERR_OK) {
 8015aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d007      	beq.n	8015ad2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	7e9b      	ldrb	r3, [r3, #26]
 8015ac6:	f043 0303 	orr.w	r3, r3, #3
 8015aca:	b2da      	uxtb	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	769a      	strb	r2, [r3, #26]
 8015ad0:	e006      	b.n	8015ae0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	7e9b      	ldrb	r3, [r3, #26]
 8015ad6:	f023 0303 	bic.w	r3, r3, #3
 8015ada:	b2da      	uxtb	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8015ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	371c      	adds	r7, #28
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd90      	pop	{r4, r7, pc}

08015aec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015aec:	b5b0      	push	{r4, r5, r7, lr}
 8015aee:	b08a      	sub	sp, #40	@ 0x28
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7d1b      	ldrb	r3, [r3, #20]
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d106      	bne.n	8015b0a <tcp_output+0x1e>
 8015afc:	4b99      	ldr	r3, [pc, #612]	@ (8015d64 <tcp_output+0x278>)
 8015afe:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 8015b02:	4999      	ldr	r1, [pc, #612]	@ (8015d68 <tcp_output+0x27c>)
 8015b04:	4899      	ldr	r0, [pc, #612]	@ (8015d6c <tcp_output+0x280>)
 8015b06:	f005 f8cd 	bl	801aca4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015b0a:	4b99      	ldr	r3, [pc, #612]	@ (8015d70 <tcp_output+0x284>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d101      	bne.n	8015b18 <tcp_output+0x2c>
    return ERR_OK;
 8015b14:	2300      	movs	r3, #0
 8015b16:	e1cb      	b.n	8015eb0 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015b24:	4293      	cmp	r3, r2
 8015b26:	bf28      	it	cs
 8015b28:	4613      	movcs	r3, r2
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b32:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	7e9b      	ldrb	r3, [r3, #26]
 8015b38:	f003 0302 	and.w	r3, r3, #2
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d017      	beq.n	8015b70 <tcp_output+0x84>
 8015b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d00f      	beq.n	8015b66 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8015b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f9 fd9b 	bl	800f688 <lwip_htonl>
 8015b52:	4602      	mov	r2, r0
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b58:	1ad3      	subs	r3, r2, r3
 8015b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b5c:	8912      	ldrh	r2, [r2, #8]
 8015b5e:	4413      	add	r3, r2
     (seg == NULL ||
 8015b60:	69ba      	ldr	r2, [r7, #24]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d204      	bcs.n	8015b70 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f7ff ff64 	bl	8015a34 <tcp_send_empty_ack>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	e19f      	b.n	8015eb0 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b74:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015b76:	6a3b      	ldr	r3, [r7, #32]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d007      	beq.n	8015b8c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8015b7c:	e002      	b.n	8015b84 <tcp_output+0x98>
 8015b7e:	6a3b      	ldr	r3, [r7, #32]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	623b      	str	r3, [r7, #32]
 8015b84:	6a3b      	ldr	r3, [r7, #32]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d1f8      	bne.n	8015b7e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	4618      	mov	r0, r3
 8015b92:	f003 fb8b 	bl	80192ac <ip4_route>
 8015b96:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d102      	bne.n	8015ba4 <tcp_output+0xb8>
    return ERR_RTE;
 8015b9e:	f06f 0303 	mvn.w	r3, #3
 8015ba2:	e185      	b.n	8015eb0 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <tcp_output+0xc6>
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d111      	bne.n	8015bd6 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d002      	beq.n	8015bbe <tcp_output+0xd2>
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	e000      	b.n	8015bc0 <tcp_output+0xd4>
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d102      	bne.n	8015bce <tcp_output+0xe2>
      return ERR_RTE;
 8015bc8:	f06f 0303 	mvn.w	r3, #3
 8015bcc:	e170      	b.n	8015eb0 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8015bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f000 813f 	beq.w	8015e5c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015be0:	68db      	ldr	r3, [r3, #12]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7f9 fd4f 	bl	800f688 <lwip_htonl>
 8015bea:	4602      	mov	r2, r0
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bf4:	8912      	ldrh	r2, [r2, #8]
 8015bf6:	4413      	add	r3, r2
  if (seg != NULL &&
 8015bf8:	69ba      	ldr	r2, [r7, #24]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	f080 812e 	bcs.w	8015e5c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	f000 812a 	beq.w	8015e5c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015c0e:	461a      	mov	r2, r3
 8015c10:	69bb      	ldr	r3, [r7, #24]
 8015c12:	4293      	cmp	r3, r2
 8015c14:	f040 8122 	bne.w	8015e5c <tcp_output+0x370>
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f040 811d 	bne.w	8015e5c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f040 812c 	bne.w	8015e86 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2200      	movs	r2, #0
 8015c32:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2201      	movs	r2, #1
 8015c3a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 8015c3e:	e122      	b.n	8015e86 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c42:	68db      	ldr	r3, [r3, #12]
 8015c44:	899b      	ldrh	r3, [r3, #12]
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7f9 fd0f 	bl	800f66c <lwip_htons>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	f003 0304 	and.w	r3, r3, #4
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d006      	beq.n	8015c66 <tcp_output+0x17a>
 8015c58:	4b42      	ldr	r3, [pc, #264]	@ (8015d64 <tcp_output+0x278>)
 8015c5a:	f240 4245 	movw	r2, #1093	@ 0x445
 8015c5e:	4945      	ldr	r1, [pc, #276]	@ (8015d74 <tcp_output+0x288>)
 8015c60:	4842      	ldr	r0, [pc, #264]	@ (8015d6c <tcp_output+0x280>)
 8015c62:	f005 f81f 	bl	801aca4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d01f      	beq.n	8015cae <tcp_output+0x1c2>
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	7e9b      	ldrb	r3, [r3, #26]
 8015c72:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d119      	bne.n	8015cae <tcp_output+0x1c2>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d00b      	beq.n	8015c9a <tcp_output+0x1ae>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d110      	bne.n	8015cae <tcp_output+0x1c2>
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c90:	891a      	ldrh	r2, [r3, #8]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d209      	bcs.n	8015cae <tcp_output+0x1c2>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d004      	beq.n	8015cae <tcp_output+0x1c2>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015caa:	2b08      	cmp	r3, #8
 8015cac:	d901      	bls.n	8015cb2 <tcp_output+0x1c6>
 8015cae:	2301      	movs	r3, #1
 8015cb0:	e000      	b.n	8015cb4 <tcp_output+0x1c8>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d106      	bne.n	8015cc6 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	7e9b      	ldrb	r3, [r3, #26]
 8015cbc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	f000 80e2 	beq.w	8015e8a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7d1b      	ldrb	r3, [r3, #20]
 8015cca:	2b02      	cmp	r3, #2
 8015ccc:	d00d      	beq.n	8015cea <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	899b      	ldrh	r3, [r3, #12]
 8015cd4:	b29c      	uxth	r4, r3
 8015cd6:	2010      	movs	r0, #16
 8015cd8:	f7f9 fcc8 	bl	800f66c <lwip_htons>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	461a      	mov	r2, r3
 8015ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	4322      	orrs	r2, r4
 8015ce6:	b292      	uxth	r2, r2
 8015ce8:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015cea:	697a      	ldr	r2, [r7, #20]
 8015cec:	6879      	ldr	r1, [r7, #4]
 8015cee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015cf0:	f000 f8e2 	bl	8015eb8 <tcp_output_segment>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d009      	beq.n	8015d14 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	7e9b      	ldrb	r3, [r3, #26]
 8015d04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015d08:	b2da      	uxtb	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	769a      	strb	r2, [r3, #26]
      return err;
 8015d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d12:	e0cd      	b.n	8015eb0 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8015d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	7d1b      	ldrb	r3, [r3, #20]
 8015d20:	2b02      	cmp	r3, #2
 8015d22:	d006      	beq.n	8015d32 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	7e9b      	ldrb	r3, [r3, #26]
 8015d28:	f023 0303 	bic.w	r3, r3, #3
 8015d2c:	b2da      	uxtb	r2, r3
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d34:	68db      	ldr	r3, [r3, #12]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7f9 fca5 	bl	800f688 <lwip_htonl>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d42:	891b      	ldrh	r3, [r3, #8]
 8015d44:	461d      	mov	r5, r3
 8015d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	899b      	ldrh	r3, [r3, #12]
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7f9 fc8c 	bl	800f66c <lwip_htons>
 8015d54:	4603      	mov	r3, r0
 8015d56:	f003 0303 	and.w	r3, r3, #3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d00c      	beq.n	8015d78 <tcp_output+0x28c>
 8015d5e:	2301      	movs	r3, #1
 8015d60:	e00b      	b.n	8015d7a <tcp_output+0x28e>
 8015d62:	bf00      	nop
 8015d64:	0801df88 	.word	0x0801df88
 8015d68:	0801e3c0 	.word	0x0801e3c0
 8015d6c:	0801e020 	.word	0x0801e020
 8015d70:	24007708 	.word	0x24007708
 8015d74:	0801e3e8 	.word	0x0801e3e8
 8015d78:	2300      	movs	r3, #0
 8015d7a:	442b      	add	r3, r5
 8015d7c:	4423      	add	r3, r4
 8015d7e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	da02      	bge.n	8015d92 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	68ba      	ldr	r2, [r7, #8]
 8015d90:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d94:	891b      	ldrh	r3, [r3, #8]
 8015d96:	461c      	mov	r4, r3
 8015d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9a:	68db      	ldr	r3, [r3, #12]
 8015d9c:	899b      	ldrh	r3, [r3, #12]
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f9 fc63 	bl	800f66c <lwip_htons>
 8015da6:	4603      	mov	r3, r0
 8015da8:	f003 0303 	and.w	r3, r3, #3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d001      	beq.n	8015db4 <tcp_output+0x2c8>
 8015db0:	2301      	movs	r3, #1
 8015db2:	e000      	b.n	8015db6 <tcp_output+0x2ca>
 8015db4:	2300      	movs	r3, #0
 8015db6:	4423      	add	r3, r4
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d049      	beq.n	8015e50 <tcp_output+0x364>
      seg->next = NULL;
 8015dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d105      	bne.n	8015dd6 <tcp_output+0x2ea>
        pcb->unacked = seg;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015dce:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 8015dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd2:	623b      	str	r3, [r7, #32]
 8015dd4:	e03f      	b.n	8015e56 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f9 fc53 	bl	800f688 <lwip_htonl>
 8015de2:	4604      	mov	r4, r0
 8015de4:	6a3b      	ldr	r3, [r7, #32]
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f9 fc4c 	bl	800f688 <lwip_htonl>
 8015df0:	4603      	mov	r3, r0
 8015df2:	1ae3      	subs	r3, r4, r3
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	da24      	bge.n	8015e42 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	336c      	adds	r3, #108	@ 0x6c
 8015dfc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015dfe:	e002      	b.n	8015e06 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d011      	beq.n	8015e32 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f9 fc36 	bl	800f688 <lwip_htonl>
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e20:	68db      	ldr	r3, [r3, #12]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7f9 fc2f 	bl	800f688 <lwip_htonl>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	dbe6      	blt.n	8015e00 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e38:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e3e:	601a      	str	r2, [r3, #0]
 8015e40:	e009      	b.n	8015e56 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015e42:	6a3b      	ldr	r3, [r7, #32]
 8015e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e46:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015e48:	6a3b      	ldr	r3, [r7, #32]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	623b      	str	r3, [r7, #32]
 8015e4e:	e002      	b.n	8015e56 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015e50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e52:	f7fc f9bb 	bl	80121cc <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d015      	beq.n	8015e8e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7f9 fc0d 	bl	800f688 <lwip_htonl>
 8015e6e:	4602      	mov	r2, r0
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e74:	1ad3      	subs	r3, r2, r3
 8015e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e78:	8912      	ldrh	r2, [r2, #8]
 8015e7a:	4413      	add	r3, r2
  while (seg != NULL &&
 8015e7c:	69ba      	ldr	r2, [r7, #24]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	f4bf aede 	bcs.w	8015c40 <tcp_output+0x154>
  }
output_done:
 8015e84:	e003      	b.n	8015e8e <tcp_output+0x3a2>
    goto output_done;
 8015e86:	bf00      	nop
 8015e88:	e002      	b.n	8015e90 <tcp_output+0x3a4>
      break;
 8015e8a:	bf00      	nop
 8015e8c:	e000      	b.n	8015e90 <tcp_output+0x3a4>
output_done:
 8015e8e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d103      	bne.n	8015ea0 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	7e9b      	ldrb	r3, [r3, #26]
 8015ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015eae:	2300      	movs	r3, #0
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3728      	adds	r7, #40	@ 0x28
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bdb0      	pop	{r4, r5, r7, pc}

08015eb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015eb8:	b5b0      	push	{r4, r5, r7, lr}
 8015eba:	b08c      	sub	sp, #48	@ 0x30
 8015ebc:	af04      	add	r7, sp, #16
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	89db      	ldrh	r3, [r3, #14]
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d001      	beq.n	8015ed2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	e08a      	b.n	8015fe8 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	68dc      	ldr	r4, [r3, #12]
 8015eda:	4610      	mov	r0, r2
 8015edc:	f7f9 fbd4 	bl	800f688 <lwip_htonl>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	68dc      	ldr	r4, [r3, #12]
 8015eec:	4610      	mov	r0, r2
 8015eee:	f7f9 fbbd 	bl	800f66c <lwip_htons>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015efa:	68ba      	ldr	r2, [r7, #8]
 8015efc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015efe:	441a      	add	r2, r3
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	68db      	ldr	r3, [r3, #12]
 8015f08:	3314      	adds	r3, #20
 8015f0a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	7a9b      	ldrb	r3, [r3, #10]
 8015f10:	f003 0301 	and.w	r3, r3, #1
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d014      	beq.n	8015f42 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	3304      	adds	r3, #4
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8015f22:	f7fc fc7d 	bl	8012820 <tcp_eff_send_mss_impl>
 8015f26:	4603      	mov	r3, r0
 8015f28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015f2a:	8b7b      	ldrh	r3, [r7, #26]
 8015f2c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7f9 fba9 	bl	800f688 <lwip_htonl>
 8015f36:	4602      	mov	r2, r0
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	3304      	adds	r3, #4
 8015f40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	da02      	bge.n	8015f52 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d10c      	bne.n	8015f74 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8015f5a:	4b25      	ldr	r3, [pc, #148]	@ (8015ff0 <tcp_output_segment+0x138>)
 8015f5c:	681a      	ldr	r2, [r3, #0]
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7f9 fb8d 	bl	800f688 <lwip_htonl>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	68da      	ldr	r2, [r3, #12]
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	1ad3      	subs	r3, r2, r3
 8015f80:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	8959      	ldrh	r1, [r3, #10]
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	8b3a      	ldrh	r2, [r7, #24]
 8015f8e:	1a8a      	subs	r2, r1, r2
 8015f90:	b292      	uxth	r2, r2
 8015f92:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	8919      	ldrh	r1, [r3, #8]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	8b3a      	ldrh	r2, [r7, #24]
 8015fa0:	1a8a      	subs	r2, r1, r2
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	68fa      	ldr	r2, [r7, #12]
 8015fac:	68d2      	ldr	r2, [r2, #12]
 8015fae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	741a      	strb	r2, [r3, #16]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	6858      	ldr	r0, [r3, #4]
 8015fc0:	68b9      	ldr	r1, [r7, #8]
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	1d1c      	adds	r4, r3, #4
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	7a9d      	ldrb	r5, [r3, #10]
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	7a5b      	ldrb	r3, [r3, #9]
 8015fce:	687a      	ldr	r2, [r7, #4]
 8015fd0:	9202      	str	r2, [sp, #8]
 8015fd2:	2206      	movs	r2, #6
 8015fd4:	9201      	str	r2, [sp, #4]
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	462b      	mov	r3, r5
 8015fda:	4622      	mov	r2, r4
 8015fdc:	f003 fb2c 	bl	8019638 <ip4_output_if>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8015fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3720      	adds	r7, #32
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bdb0      	pop	{r4, r5, r7, pc}
 8015ff0:	240076bc 	.word	0x240076bc

08015ff4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08c      	sub	sp, #48	@ 0x30
 8015ff8:	af04      	add	r7, sp, #16
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	607a      	str	r2, [r7, #4]
 8016000:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8016002:	2200      	movs	r2, #0
 8016004:	2114      	movs	r1, #20
 8016006:	2001      	movs	r0, #1
 8016008:	f7fa fa30 	bl	801046c <pbuf_alloc>
 801600c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d05b      	beq.n	80160cc <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016014:	69fb      	ldr	r3, [r7, #28]
 8016016:	895b      	ldrh	r3, [r3, #10]
 8016018:	2b13      	cmp	r3, #19
 801601a:	d806      	bhi.n	801602a <tcp_rst+0x36>
 801601c:	4b2d      	ldr	r3, [pc, #180]	@ (80160d4 <tcp_rst+0xe0>)
 801601e:	f240 524c 	movw	r2, #1356	@ 0x54c
 8016022:	492d      	ldr	r1, [pc, #180]	@ (80160d8 <tcp_rst+0xe4>)
 8016024:	482d      	ldr	r0, [pc, #180]	@ (80160dc <tcp_rst+0xe8>)
 8016026:	f004 fe3d 	bl	801aca4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8016030:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016032:	4618      	mov	r0, r3
 8016034:	f7f9 fb1a 	bl	800f66c <lwip_htons>
 8016038:	4603      	mov	r3, r0
 801603a:	461a      	mov	r2, r3
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016040:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016042:	4618      	mov	r0, r3
 8016044:	f7f9 fb12 	bl	800f66c <lwip_htons>
 8016048:	4603      	mov	r3, r0
 801604a:	461a      	mov	r2, r3
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f7f9 fb19 	bl	800f688 <lwip_htonl>
 8016056:	4602      	mov	r2, r0
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801605c:	68b8      	ldr	r0, [r7, #8]
 801605e:	f7f9 fb13 	bl	800f688 <lwip_htonl>
 8016062:	4602      	mov	r2, r0
 8016064:	69bb      	ldr	r3, [r7, #24]
 8016066:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8016068:	f245 0014 	movw	r0, #20500	@ 0x5014
 801606c:	f7f9 fafe 	bl	800f66c <lwip_htons>
 8016070:	4603      	mov	r3, r0
 8016072:	461a      	mov	r2, r3
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8016078:	69bb      	ldr	r3, [r7, #24]
 801607a:	2200      	movs	r2, #0
 801607c:	f042 0208 	orr.w	r2, r2, #8
 8016080:	739a      	strb	r2, [r3, #14]
 8016082:	2200      	movs	r2, #0
 8016084:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8016088:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801608a:	69bb      	ldr	r3, [r7, #24]
 801608c:	2200      	movs	r2, #0
 801608e:	741a      	strb	r2, [r3, #16]
 8016090:	2200      	movs	r2, #0
 8016092:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	2200      	movs	r2, #0
 8016098:	749a      	strb	r2, [r3, #18]
 801609a:	2200      	movs	r2, #0
 801609c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801609e:	6838      	ldr	r0, [r7, #0]
 80160a0:	f003 f904 	bl	80192ac <ip4_route>
 80160a4:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d00b      	beq.n	80160c4 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	9302      	str	r3, [sp, #8]
 80160b0:	2306      	movs	r3, #6
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	2300      	movs	r3, #0
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	23ff      	movs	r3, #255	@ 0xff
 80160ba:	683a      	ldr	r2, [r7, #0]
 80160bc:	6879      	ldr	r1, [r7, #4]
 80160be:	69f8      	ldr	r0, [r7, #28]
 80160c0:	f003 faba 	bl	8019638 <ip4_output_if>
  }
  pbuf_free(p);
 80160c4:	69f8      	ldr	r0, [r7, #28]
 80160c6:	f7fa fd49 	bl	8010b5c <pbuf_free>
 80160ca:	e000      	b.n	80160ce <tcp_rst+0xda>
    return;
 80160cc:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80160ce:	3720      	adds	r7, #32
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	0801df88 	.word	0x0801df88
 80160d8:	0801dff0 	.word	0x0801dff0
 80160dc:	0801e020 	.word	0x0801e020

080160e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d029      	beq.n	8016144 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160f4:	60fb      	str	r3, [r7, #12]
 80160f6:	e002      	b.n	80160fe <tcp_rexmit_rto+0x1e>
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	60fb      	str	r3, [r7, #12]
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d1f8      	bne.n	80160f8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2200      	movs	r2, #0
 801611a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016122:	2bff      	cmp	r3, #255	@ 0xff
 8016124:	d007      	beq.n	8016136 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801612c:	3301      	adds	r3, #1
 801612e:	b2da      	uxtb	r2, r3
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2200      	movs	r2, #0
 801613a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f7ff fcd5 	bl	8015aec <tcp_output>
 8016142:	e000      	b.n	8016146 <tcp_rexmit_rto+0x66>
    return;
 8016144:	bf00      	nop
}
 8016146:	3710      	adds	r7, #16
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801614c:	b590      	push	{r4, r7, lr}
 801614e:	b085      	sub	sp, #20
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016158:	2b00      	cmp	r3, #0
 801615a:	d043      	beq.n	80161e4 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016160:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	681a      	ldr	r2, [r3, #0]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	3368      	adds	r3, #104	@ 0x68
 801616e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016170:	e002      	b.n	8016178 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d011      	beq.n	80161a4 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	68db      	ldr	r3, [r3, #12]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	4618      	mov	r0, r3
 801618a:	f7f9 fa7d 	bl	800f688 <lwip_htonl>
 801618e:	4604      	mov	r4, r0
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	4618      	mov	r0, r3
 8016198:	f7f9 fa76 	bl	800f688 <lwip_htonl>
 801619c:	4603      	mov	r3, r0
 801619e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	dbe6      	blt.n	8016172 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	68ba      	ldr	r2, [r7, #8]
 80161b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d103      	bne.n	80161c2 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2200      	movs	r2, #0
 80161be:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80161c8:	2bff      	cmp	r3, #255	@ 0xff
 80161ca:	d007      	beq.n	80161dc <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80161d2:	3301      	adds	r3, #1
 80161d4:	b2da      	uxtb	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2200      	movs	r2, #0
 80161e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80161e2:	e000      	b.n	80161e6 <tcp_rexmit+0x9a>
    return;
 80161e4:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80161e6:	3714      	adds	r7, #20
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd90      	pop	{r4, r7, pc}

080161ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d042      	beq.n	8016282 <tcp_rexmit_fast+0x96>
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	7e9b      	ldrb	r3, [r3, #26]
 8016200:	f003 0304 	and.w	r3, r3, #4
 8016204:	2b00      	cmp	r3, #0
 8016206:	d13c      	bne.n	8016282 <tcp_rexmit_fast+0x96>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f7ff ff9f 	bl	801614c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801621a:	4293      	cmp	r3, r2
 801621c:	bf28      	it	cs
 801621e:	4613      	movcs	r3, r2
 8016220:	b29b      	uxth	r3, r3
 8016222:	2b00      	cmp	r3, #0
 8016224:	da00      	bge.n	8016228 <tcp_rexmit_fast+0x3c>
 8016226:	3301      	adds	r3, #1
 8016228:	105b      	asrs	r3, r3, #1
 801622a:	b29a      	uxth	r2, r3
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016238:	461a      	mov	r2, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	429a      	cmp	r2, r3
 8016242:	d206      	bcs.n	8016252 <tcp_rexmit_fast+0x66>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	b29a      	uxth	r2, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801625c:	4619      	mov	r1, r3
 801625e:	0049      	lsls	r1, r1, #1
 8016260:	440b      	add	r3, r1
 8016262:	b29b      	uxth	r3, r3
 8016264:	4413      	add	r3, r2
 8016266:	b29a      	uxth	r2, r3
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	7e9b      	ldrb	r3, [r3, #26]
 8016272:	f043 0304 	orr.w	r3, r3, #4
 8016276:	b2da      	uxtb	r2, r3
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2200      	movs	r2, #0
 8016280:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 8016282:	bf00      	nop
 8016284:	3708      	adds	r7, #8
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b08a      	sub	sp, #40	@ 0x28
 801628e:	af04      	add	r7, sp, #16
 8016290:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016296:	3b01      	subs	r3, #1
 8016298:	4618      	mov	r0, r3
 801629a:	f7f9 f9f5 	bl	800f688 <lwip_htonl>
 801629e:	4603      	mov	r3, r0
 80162a0:	2200      	movs	r2, #0
 80162a2:	2100      	movs	r1, #0
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7fe fd57 	bl	8014d58 <tcp_output_alloc_header>
 80162aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d102      	bne.n	80162b8 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80162b2:	f04f 33ff 	mov.w	r3, #4294967295
 80162b6:	e021      	b.n	80162fc <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	3304      	adds	r3, #4
 80162bc:	4618      	mov	r0, r3
 80162be:	f002 fff5 	bl	80192ac <ip4_route>
 80162c2:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d102      	bne.n	80162d0 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80162ca:	23fc      	movs	r3, #252	@ 0xfc
 80162cc:	75fb      	strb	r3, [r7, #23]
 80162ce:	e010      	b.n	80162f2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80162d0:	6879      	ldr	r1, [r7, #4]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	1d1a      	adds	r2, r3, #4
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	7a98      	ldrb	r0, [r3, #10]
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	9302      	str	r3, [sp, #8]
 80162de:	2306      	movs	r3, #6
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	2300      	movs	r3, #0
 80162e4:	9300      	str	r3, [sp, #0]
 80162e6:	4603      	mov	r3, r0
 80162e8:	6938      	ldr	r0, [r7, #16]
 80162ea:	f003 f9a5 	bl	8019638 <ip4_output_if>
 80162ee:	4603      	mov	r3, r0
 80162f0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80162f2:	6938      	ldr	r0, [r7, #16]
 80162f4:	f7fa fc32 	bl	8010b5c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80162f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3718      	adds	r7, #24
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}

08016304 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016304:	b590      	push	{r4, r7, lr}
 8016306:	b08f      	sub	sp, #60	@ 0x3c
 8016308:	af04      	add	r7, sp, #16
 801630a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016310:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d102      	bne.n	801631e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801631c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801631e:	6a3b      	ldr	r3, [r7, #32]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d101      	bne.n	8016328 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016324:	2300      	movs	r3, #0
 8016326:	e085      	b.n	8016434 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016328:	6a3b      	ldr	r3, [r7, #32]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	899b      	ldrh	r3, [r3, #12]
 801632e:	b29b      	uxth	r3, r3
 8016330:	4618      	mov	r0, r3
 8016332:	f7f9 f99b 	bl	800f66c <lwip_htons>
 8016336:	4603      	mov	r3, r0
 8016338:	f003 0301 	and.w	r3, r3, #1
 801633c:	2b00      	cmp	r3, #0
 801633e:	d005      	beq.n	801634c <tcp_zero_window_probe+0x48>
 8016340:	6a3b      	ldr	r3, [r7, #32]
 8016342:	891b      	ldrh	r3, [r3, #8]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d101      	bne.n	801634c <tcp_zero_window_probe+0x48>
 8016348:	2301      	movs	r3, #1
 801634a:	e000      	b.n	801634e <tcp_zero_window_probe+0x4a>
 801634c:	2300      	movs	r3, #0
 801634e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016350:	7ffb      	ldrb	r3, [r7, #31]
 8016352:	2b00      	cmp	r3, #0
 8016354:	bf0c      	ite	eq
 8016356:	2301      	moveq	r3, #1
 8016358:	2300      	movne	r3, #0
 801635a:	b2db      	uxtb	r3, r3
 801635c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801635e:	6a3b      	ldr	r3, [r7, #32]
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	8bba      	ldrh	r2, [r7, #28]
 8016366:	2100      	movs	r1, #0
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f7fe fcf5 	bl	8014d58 <tcp_output_alloc_header>
 801636e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d102      	bne.n	801637c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016376:	f04f 33ff 	mov.w	r3, #4294967295
 801637a:	e05b      	b.n	8016434 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	685b      	ldr	r3, [r3, #4]
 8016380:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016382:	7ffb      	ldrb	r3, [r7, #31]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00e      	beq.n	80163a6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	899b      	ldrh	r3, [r3, #12]
 801638c:	b29b      	uxth	r3, r3
 801638e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016392:	b29c      	uxth	r4, r3
 8016394:	2011      	movs	r0, #17
 8016396:	f7f9 f969 	bl	800f66c <lwip_htons>
 801639a:	4603      	mov	r3, r0
 801639c:	4323      	orrs	r3, r4
 801639e:	b29a      	uxth	r2, r3
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	819a      	strh	r2, [r3, #12]
 80163a4:	e010      	b.n	80163c8 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	685b      	ldr	r3, [r3, #4]
 80163aa:	3314      	adds	r3, #20
 80163ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80163ae:	6a3b      	ldr	r3, [r7, #32]
 80163b0:	6858      	ldr	r0, [r3, #4]
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	891a      	ldrh	r2, [r3, #8]
 80163b8:	6a3b      	ldr	r3, [r7, #32]
 80163ba:	891b      	ldrh	r3, [r3, #8]
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	b29b      	uxth	r3, r3
 80163c0:	2201      	movs	r2, #1
 80163c2:	6939      	ldr	r1, [r7, #16]
 80163c4:	f7fa fdd6 	bl	8010f74 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80163c8:	6a3b      	ldr	r3, [r7, #32]
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f9 f95a 	bl	800f688 <lwip_htonl>
 80163d4:	4603      	mov	r3, r0
 80163d6:	3301      	adds	r3, #1
 80163d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	da02      	bge.n	80163ec <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	68fa      	ldr	r2, [r7, #12]
 80163ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	3304      	adds	r3, #4
 80163f0:	4618      	mov	r0, r3
 80163f2:	f002 ff5b 	bl	80192ac <ip4_route>
 80163f6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d103      	bne.n	8016406 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80163fe:	23fc      	movs	r3, #252	@ 0xfc
 8016400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016404:	e011      	b.n	801642a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016406:	6879      	ldr	r1, [r7, #4]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	1d1a      	adds	r2, r3, #4
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	7a98      	ldrb	r0, [r3, #10]
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	9302      	str	r3, [sp, #8]
 8016414:	2306      	movs	r3, #6
 8016416:	9301      	str	r3, [sp, #4]
 8016418:	2300      	movs	r3, #0
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	4603      	mov	r3, r0
 801641e:	69b8      	ldr	r0, [r7, #24]
 8016420:	f003 f90a 	bl	8019638 <ip4_output_if>
 8016424:	4603      	mov	r3, r0
 8016426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801642a:	69b8      	ldr	r0, [r7, #24]
 801642c:	f7fa fb96 	bl	8010b5c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016430:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016434:	4618      	mov	r0, r3
 8016436:	372c      	adds	r7, #44	@ 0x2c
 8016438:	46bd      	mov	sp, r7
 801643a:	bd90      	pop	{r4, r7, pc}

0801643c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016444:	f7fa fe18 	bl	8011078 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016448:	4b0a      	ldr	r3, [pc, #40]	@ (8016474 <tcpip_tcp_timer+0x38>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d103      	bne.n	8016458 <tcpip_tcp_timer+0x1c>
 8016450:	4b09      	ldr	r3, [pc, #36]	@ (8016478 <tcpip_tcp_timer+0x3c>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d005      	beq.n	8016464 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016458:	2200      	movs	r2, #0
 801645a:	4908      	ldr	r1, [pc, #32]	@ (801647c <tcpip_tcp_timer+0x40>)
 801645c:	20fa      	movs	r0, #250	@ 0xfa
 801645e:	f000 f86f 	bl	8016540 <sys_timeout>
 8016462:	e003      	b.n	801646c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016464:	4b06      	ldr	r3, [pc, #24]	@ (8016480 <tcpip_tcp_timer+0x44>)
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]
  }
}
 801646a:	bf00      	nop
 801646c:	bf00      	nop
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	240076c8 	.word	0x240076c8
 8016478:	240076cc 	.word	0x240076cc
 801647c:	0801643d 	.word	0x0801643d
 8016480:	24007714 	.word	0x24007714

08016484 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016488:	4b0a      	ldr	r3, [pc, #40]	@ (80164b4 <tcp_timer_needed+0x30>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d10f      	bne.n	80164b0 <tcp_timer_needed+0x2c>
 8016490:	4b09      	ldr	r3, [pc, #36]	@ (80164b8 <tcp_timer_needed+0x34>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d103      	bne.n	80164a0 <tcp_timer_needed+0x1c>
 8016498:	4b08      	ldr	r3, [pc, #32]	@ (80164bc <tcp_timer_needed+0x38>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d007      	beq.n	80164b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80164a0:	4b04      	ldr	r3, [pc, #16]	@ (80164b4 <tcp_timer_needed+0x30>)
 80164a2:	2201      	movs	r2, #1
 80164a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80164a6:	2200      	movs	r2, #0
 80164a8:	4905      	ldr	r1, [pc, #20]	@ (80164c0 <tcp_timer_needed+0x3c>)
 80164aa:	20fa      	movs	r0, #250	@ 0xfa
 80164ac:	f000 f848 	bl	8016540 <sys_timeout>
  }
}
 80164b0:	bf00      	nop
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	24007714 	.word	0x24007714
 80164b8:	240076c8 	.word	0x240076c8
 80164bc:	240076cc 	.word	0x240076cc
 80164c0:	0801643d 	.word	0x0801643d

080164c4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	4903      	ldr	r1, [pc, #12]	@ (80164ec <cyclic_timer+0x28>)
 80164de:	4618      	mov	r0, r3
 80164e0:	f000 f82e 	bl	8016540 <sys_timeout>
}
 80164e4:	bf00      	nop
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	080164c5 	.word	0x080164c5

080164f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80164f6:	2301      	movs	r3, #1
 80164f8:	607b      	str	r3, [r7, #4]
 80164fa:	e00e      	b.n	801651a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80164fc:	4a0d      	ldr	r2, [pc, #52]	@ (8016534 <sys_timeouts_init+0x44>)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	00db      	lsls	r3, r3, #3
 8016508:	4a0a      	ldr	r2, [pc, #40]	@ (8016534 <sys_timeouts_init+0x44>)
 801650a:	4413      	add	r3, r2
 801650c:	461a      	mov	r2, r3
 801650e:	490a      	ldr	r1, [pc, #40]	@ (8016538 <sys_timeouts_init+0x48>)
 8016510:	f000 f816 	bl	8016540 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	3301      	adds	r3, #1
 8016518:	607b      	str	r3, [r7, #4]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2b04      	cmp	r3, #4
 801651e:	d9ed      	bls.n	80164fc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8016520:	f7f3 fd92 	bl	800a048 <sys_now>
 8016524:	4603      	mov	r3, r0
 8016526:	4a05      	ldr	r2, [pc, #20]	@ (801653c <sys_timeouts_init+0x4c>)
 8016528:	6013      	str	r3, [r2, #0]
}
 801652a:	bf00      	nop
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	0801f3c8 	.word	0x0801f3c8
 8016538:	080164c5 	.word	0x080164c5
 801653c:	24007710 	.word	0x24007710

08016540 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b088      	sub	sp, #32
 8016544:	af00      	add	r7, sp, #0
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801654c:	200a      	movs	r0, #10
 801654e:	f7f9 fc99 	bl	800fe84 <memp_malloc>
 8016552:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d10a      	bne.n	8016570 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	2b00      	cmp	r3, #0
 801655e:	f040 8084 	bne.w	801666a <sys_timeout+0x12a>
 8016562:	4b44      	ldr	r3, [pc, #272]	@ (8016674 <sys_timeout+0x134>)
 8016564:	22d4      	movs	r2, #212	@ 0xd4
 8016566:	4944      	ldr	r1, [pc, #272]	@ (8016678 <sys_timeout+0x138>)
 8016568:	4844      	ldr	r0, [pc, #272]	@ (801667c <sys_timeout+0x13c>)
 801656a:	f004 fb9b 	bl	801aca4 <iprintf>
    return;
 801656e:	e07c      	b.n	801666a <sys_timeout+0x12a>
  }

  now = sys_now();
 8016570:	f7f3 fd6a 	bl	800a048 <sys_now>
 8016574:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016576:	4b42      	ldr	r3, [pc, #264]	@ (8016680 <sys_timeout+0x140>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d105      	bne.n	801658a <sys_timeout+0x4a>
    diff = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8016582:	4a40      	ldr	r2, [pc, #256]	@ (8016684 <sys_timeout+0x144>)
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	6013      	str	r3, [r2, #0]
 8016588:	e004      	b.n	8016594 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801658a:	4b3e      	ldr	r3, [pc, #248]	@ (8016684 <sys_timeout+0x144>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	693a      	ldr	r2, [r7, #16]
 8016590:	1ad3      	subs	r3, r2, r3
 8016592:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	68ba      	ldr	r2, [r7, #8]
 801659e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80165a6:	68fa      	ldr	r2, [r7, #12]
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	441a      	add	r2, r3
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80165b0:	4b33      	ldr	r3, [pc, #204]	@ (8016680 <sys_timeout+0x140>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d103      	bne.n	80165c0 <sys_timeout+0x80>
    next_timeout = timeout;
 80165b8:	4a31      	ldr	r2, [pc, #196]	@ (8016680 <sys_timeout+0x140>)
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	6013      	str	r3, [r2, #0]
    return;
 80165be:	e055      	b.n	801666c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80165c0:	4b2f      	ldr	r3, [pc, #188]	@ (8016680 <sys_timeout+0x140>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	68fa      	ldr	r2, [r7, #12]
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d20f      	bcs.n	80165ec <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80165cc:	4b2c      	ldr	r3, [pc, #176]	@ (8016680 <sys_timeout+0x140>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	6859      	ldr	r1, [r3, #4]
 80165d2:	4b2b      	ldr	r3, [pc, #172]	@ (8016680 <sys_timeout+0x140>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	1a8a      	subs	r2, r1, r2
 80165da:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80165dc:	4b28      	ldr	r3, [pc, #160]	@ (8016680 <sys_timeout+0x140>)
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80165e4:	4a26      	ldr	r2, [pc, #152]	@ (8016680 <sys_timeout+0x140>)
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	6013      	str	r3, [r2, #0]
 80165ea:	e03f      	b.n	801666c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80165ec:	4b24      	ldr	r3, [pc, #144]	@ (8016680 <sys_timeout+0x140>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	61fb      	str	r3, [r7, #28]
 80165f2:	e036      	b.n	8016662 <sys_timeout+0x122>
      timeout->time -= t->time;
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	685a      	ldr	r2, [r3, #4]
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	685b      	ldr	r3, [r3, #4]
 80165fc:	1ad2      	subs	r2, r2, r3
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8016602:	69fb      	ldr	r3, [r7, #28]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d006      	beq.n	8016618 <sys_timeout+0xd8>
 801660a:	69fb      	ldr	r3, [r7, #28]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	685a      	ldr	r2, [r3, #4]
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	429a      	cmp	r2, r3
 8016616:	d921      	bls.n	801665c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d009      	beq.n	8016634 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	6859      	ldr	r1, [r3, #4]
 8016626:	697b      	ldr	r3, [r7, #20]
 8016628:	685a      	ldr	r2, [r3, #4]
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	1a8a      	subs	r2, r1, r2
 8016630:	605a      	str	r2, [r3, #4]
 8016632:	e00b      	b.n	801664c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	685b      	ldr	r3, [r3, #4]
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	429a      	cmp	r2, r3
 801663c:	d206      	bcs.n	801664c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801663e:	4b10      	ldr	r3, [pc, #64]	@ (8016680 <sys_timeout+0x140>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	685a      	ldr	r2, [r3, #4]
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	441a      	add	r2, r3
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	697a      	ldr	r2, [r7, #20]
 8016658:	601a      	str	r2, [r3, #0]
        break;
 801665a:	e007      	b.n	801666c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	61fb      	str	r3, [r7, #28]
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d1c5      	bne.n	80165f4 <sys_timeout+0xb4>
 8016668:	e000      	b.n	801666c <sys_timeout+0x12c>
    return;
 801666a:	bf00      	nop
      }
    }
  }
}
 801666c:	3720      	adds	r7, #32
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	0801e400 	.word	0x0801e400
 8016678:	0801e468 	.word	0x0801e468
 801667c:	0801e4a8 	.word	0x0801e4a8
 8016680:	2400770c 	.word	0x2400770c
 8016684:	24007710 	.word	0x24007710

08016688 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801668e:	4b24      	ldr	r3, [pc, #144]	@ (8016720 <sys_check_timeouts+0x98>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d03f      	beq.n	8016716 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016696:	f7f3 fcd7 	bl	800a048 <sys_now>
 801669a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801669c:	4b21      	ldr	r3, [pc, #132]	@ (8016724 <sys_check_timeouts+0x9c>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	68fa      	ldr	r2, [r7, #12]
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80166aa:	4b1d      	ldr	r3, [pc, #116]	@ (8016720 <sys_check_timeouts+0x98>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d02c      	beq.n	8016710 <sys_check_timeouts+0x88>
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	697a      	ldr	r2, [r7, #20]
 80166bc:	429a      	cmp	r2, r3
 80166be:	d327      	bcc.n	8016710 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80166c0:	2301      	movs	r3, #1
 80166c2:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	685a      	ldr	r2, [r3, #4]
 80166c8:	4b16      	ldr	r3, [pc, #88]	@ (8016724 <sys_check_timeouts+0x9c>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4413      	add	r3, r2
 80166ce:	4a15      	ldr	r2, [pc, #84]	@ (8016724 <sys_check_timeouts+0x9c>)
 80166d0:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	685b      	ldr	r3, [r3, #4]
 80166d6:	697a      	ldr	r2, [r7, #20]
 80166d8:	1ad3      	subs	r3, r2, r3
 80166da:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a0f      	ldr	r2, [pc, #60]	@ (8016720 <sys_check_timeouts+0x98>)
 80166e2:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	689b      	ldr	r3, [r3, #8]
 80166e8:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	68db      	ldr	r3, [r3, #12]
 80166ee:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80166f0:	68b9      	ldr	r1, [r7, #8]
 80166f2:	200a      	movs	r0, #10
 80166f4:	f7f9 fc3c 	bl	800ff70 <memp_free>
        if (handler != NULL) {
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d008      	beq.n	8016710 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80166fe:	480a      	ldr	r0, [pc, #40]	@ (8016728 <sys_check_timeouts+0xa0>)
 8016700:	f004 f970 	bl	801a9e4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6838      	ldr	r0, [r7, #0]
 8016708:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 801670a:	4807      	ldr	r0, [pc, #28]	@ (8016728 <sys_check_timeouts+0xa0>)
 801670c:	f004 f979 	bl	801aa02 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8016710:	7cfb      	ldrb	r3, [r7, #19]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d1c7      	bne.n	80166a6 <sys_check_timeouts+0x1e>
  }
}
 8016716:	bf00      	nop
 8016718:	3718      	adds	r7, #24
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	2400770c 	.word	0x2400770c
 8016724:	24007710 	.word	0x24007710
 8016728:	2400459c 	.word	0x2400459c

0801672c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8016732:	4b0f      	ldr	r3, [pc, #60]	@ (8016770 <sys_timeouts_sleeptime+0x44>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d102      	bne.n	8016740 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801673a:	f04f 33ff 	mov.w	r3, #4294967295
 801673e:	e013      	b.n	8016768 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8016740:	f7f3 fc82 	bl	800a048 <sys_now>
 8016744:	4602      	mov	r2, r0
 8016746:	4b0b      	ldr	r3, [pc, #44]	@ (8016774 <sys_timeouts_sleeptime+0x48>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801674e:	4b08      	ldr	r3, [pc, #32]	@ (8016770 <sys_timeouts_sleeptime+0x44>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	429a      	cmp	r2, r3
 8016758:	d901      	bls.n	801675e <sys_timeouts_sleeptime+0x32>
    return 0;
 801675a:	2300      	movs	r3, #0
 801675c:	e004      	b.n	8016768 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801675e:	4b04      	ldr	r3, [pc, #16]	@ (8016770 <sys_timeouts_sleeptime+0x44>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	685a      	ldr	r2, [r3, #4]
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	1ad3      	subs	r3, r2, r3
  }
}
 8016768:	4618      	mov	r0, r3
 801676a:	3708      	adds	r7, #8
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	2400770c 	.word	0x2400770c
 8016774:	24007710 	.word	0x24007710

08016778 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8016782:	4b0f      	ldr	r3, [pc, #60]	@ (80167c0 <sys_timeouts_mbox_fetch+0x48>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d105      	bne.n	8016796 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801678a:	2200      	movs	r2, #0
 801678c:	6839      	ldr	r1, [r7, #0]
 801678e:	6878      	ldr	r0, [r7, #4]
 8016790:	f003 fff4 	bl	801a77c <sys_arch_mbox_fetch>
    return;
 8016794:	e011      	b.n	80167ba <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016796:	f7ff ffc9 	bl	801672c <sys_timeouts_sleeptime>
 801679a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d008      	beq.n	80167b4 <sys_timeouts_mbox_fetch+0x3c>
 80167a2:	68fa      	ldr	r2, [r7, #12]
 80167a4:	6839      	ldr	r1, [r7, #0]
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f003 ffe8 	bl	801a77c <sys_arch_mbox_fetch>
 80167ac:	4603      	mov	r3, r0
 80167ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167b2:	d102      	bne.n	80167ba <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80167b4:	f7ff ff68 	bl	8016688 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80167b8:	e7e3      	b.n	8016782 <sys_timeouts_mbox_fetch+0xa>
  }
}
 80167ba:	3710      	adds	r7, #16
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}
 80167c0:	2400770c 	.word	0x2400770c

080167c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80167c4:	b480      	push	{r7}
 80167c6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80167c8:	bf00      	nop
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
	...

080167d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b083      	sub	sp, #12
 80167d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80167da:	2300      	movs	r3, #0
 80167dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80167de:	4b17      	ldr	r3, [pc, #92]	@ (801683c <udp_new_port+0x68>)
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	1c5a      	adds	r2, r3, #1
 80167e4:	b291      	uxth	r1, r2
 80167e6:	4a15      	ldr	r2, [pc, #84]	@ (801683c <udp_new_port+0x68>)
 80167e8:	8011      	strh	r1, [r2, #0]
 80167ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167ee:	4293      	cmp	r3, r2
 80167f0:	d103      	bne.n	80167fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80167f2:	4b12      	ldr	r3, [pc, #72]	@ (801683c <udp_new_port+0x68>)
 80167f4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80167f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80167fa:	4b11      	ldr	r3, [pc, #68]	@ (8016840 <udp_new_port+0x6c>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	603b      	str	r3, [r7, #0]
 8016800:	e011      	b.n	8016826 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	8a5a      	ldrh	r2, [r3, #18]
 8016806:	4b0d      	ldr	r3, [pc, #52]	@ (801683c <udp_new_port+0x68>)
 8016808:	881b      	ldrh	r3, [r3, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d108      	bne.n	8016820 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801680e:	88fb      	ldrh	r3, [r7, #6]
 8016810:	3301      	adds	r3, #1
 8016812:	80fb      	strh	r3, [r7, #6]
 8016814:	88fb      	ldrh	r3, [r7, #6]
 8016816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801681a:	d3e0      	bcc.n	80167de <udp_new_port+0xa>
        return 0;
 801681c:	2300      	movs	r3, #0
 801681e:	e007      	b.n	8016830 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	68db      	ldr	r3, [r3, #12]
 8016824:	603b      	str	r3, [r7, #0]
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d1ea      	bne.n	8016802 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801682c:	4b03      	ldr	r3, [pc, #12]	@ (801683c <udp_new_port+0x68>)
 801682e:	881b      	ldrh	r3, [r3, #0]
}
 8016830:	4618      	mov	r0, r3
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr
 801683c:	24000030 	.word	0x24000030
 8016840:	24007718 	.word	0x24007718

08016844 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	4613      	mov	r3, r2
 8016850:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016852:	79fb      	ldrb	r3, [r7, #7]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d018      	beq.n	801688a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d013      	beq.n	8016886 <udp_input_local_match+0x42>
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d00f      	beq.n	8016886 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016866:	4b14      	ldr	r3, [pc, #80]	@ (80168b8 <udp_input_local_match+0x74>)
 8016868:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801686e:	d00a      	beq.n	8016886 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	4b10      	ldr	r3, [pc, #64]	@ (80168b8 <udp_input_local_match+0x74>)
 8016876:	695b      	ldr	r3, [r3, #20]
 8016878:	405a      	eors	r2, r3
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	3308      	adds	r3, #8
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016882:	2b00      	cmp	r3, #0
 8016884:	d110      	bne.n	80168a8 <udp_input_local_match+0x64>
          return 1;
 8016886:	2301      	movs	r3, #1
 8016888:	e00f      	b.n	80168aa <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d009      	beq.n	80168a4 <udp_input_local_match+0x60>
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d005      	beq.n	80168a4 <udp_input_local_match+0x60>
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	4b06      	ldr	r3, [pc, #24]	@ (80168b8 <udp_input_local_match+0x74>)
 801689e:	695b      	ldr	r3, [r3, #20]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d101      	bne.n	80168a8 <udp_input_local_match+0x64>
      return 1;
 80168a4:	2301      	movs	r3, #1
 80168a6:	e000      	b.n	80168aa <udp_input_local_match+0x66>
    }
  }

  return 0;
 80168a8:	2300      	movs	r3, #0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3714      	adds	r7, #20
 80168ae:	46bd      	mov	sp, r7
 80168b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b4:	4770      	bx	lr
 80168b6:	bf00      	nop
 80168b8:	240045a0 	.word	0x240045a0

080168bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80168bc:	b590      	push	{r4, r7, lr}
 80168be:	b08d      	sub	sp, #52	@ 0x34
 80168c0:	af02      	add	r7, sp, #8
 80168c2:	6078      	str	r0, [r7, #4]
 80168c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80168c6:	2300      	movs	r3, #0
 80168c8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	895b      	ldrh	r3, [r3, #10]
 80168ce:	2b07      	cmp	r3, #7
 80168d0:	d803      	bhi.n	80168da <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f7fa f942 	bl	8010b5c <pbuf_free>
    goto end;
 80168d8:	e0c6      	b.n	8016a68 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80168e0:	4b63      	ldr	r3, [pc, #396]	@ (8016a70 <udp_input+0x1b4>)
 80168e2:	695b      	ldr	r3, [r3, #20]
 80168e4:	4a62      	ldr	r2, [pc, #392]	@ (8016a70 <udp_input+0x1b4>)
 80168e6:	6812      	ldr	r2, [r2, #0]
 80168e8:	4611      	mov	r1, r2
 80168ea:	4618      	mov	r0, r3
 80168ec:	f002 ff76 	bl	80197dc <ip4_addr_isbroadcast_u32>
 80168f0:	4603      	mov	r3, r0
 80168f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	881b      	ldrh	r3, [r3, #0]
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7f8 feb6 	bl	800f66c <lwip_htons>
 8016900:	4603      	mov	r3, r0
 8016902:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	885b      	ldrh	r3, [r3, #2]
 8016908:	b29b      	uxth	r3, r3
 801690a:	4618      	mov	r0, r3
 801690c:	f7f8 feae 	bl	800f66c <lwip_htons>
 8016910:	4603      	mov	r3, r0
 8016912:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016914:	2300      	movs	r3, #0
 8016916:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016918:	2300      	movs	r3, #0
 801691a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801691c:	2300      	movs	r3, #0
 801691e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016920:	4b54      	ldr	r3, [pc, #336]	@ (8016a74 <udp_input+0x1b8>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	627b      	str	r3, [r7, #36]	@ 0x24
 8016926:	e03b      	b.n	80169a0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801692a:	8a5b      	ldrh	r3, [r3, #18]
 801692c:	89fa      	ldrh	r2, [r7, #14]
 801692e:	429a      	cmp	r2, r3
 8016930:	d131      	bne.n	8016996 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016932:	7cfb      	ldrb	r3, [r7, #19]
 8016934:	461a      	mov	r2, r3
 8016936:	6839      	ldr	r1, [r7, #0]
 8016938:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801693a:	f7ff ff83 	bl	8016844 <udp_input_local_match>
 801693e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016940:	2b00      	cmp	r3, #0
 8016942:	d028      	beq.n	8016996 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8016944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016946:	7c1b      	ldrb	r3, [r3, #16]
 8016948:	f003 0304 	and.w	r3, r3, #4
 801694c:	2b00      	cmp	r3, #0
 801694e:	d104      	bne.n	801695a <udp_input+0x9e>
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016958:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801695c:	8a9b      	ldrh	r3, [r3, #20]
 801695e:	8a3a      	ldrh	r2, [r7, #16]
 8016960:	429a      	cmp	r2, r3
 8016962:	d118      	bne.n	8016996 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016966:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016968:	2b00      	cmp	r3, #0
 801696a:	d005      	beq.n	8016978 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801696e:	685a      	ldr	r2, [r3, #4]
 8016970:	4b3f      	ldr	r3, [pc, #252]	@ (8016a70 <udp_input+0x1b4>)
 8016972:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016974:	429a      	cmp	r2, r3
 8016976:	d10e      	bne.n	8016996 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016978:	6a3b      	ldr	r3, [r7, #32]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d014      	beq.n	80169a8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016980:	68da      	ldr	r2, [r3, #12]
 8016982:	6a3b      	ldr	r3, [r7, #32]
 8016984:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016986:	4b3b      	ldr	r3, [pc, #236]	@ (8016a74 <udp_input+0x1b8>)
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801698c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801698e:	4a39      	ldr	r2, [pc, #228]	@ (8016a74 <udp_input+0x1b8>)
 8016990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016992:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016994:	e008      	b.n	80169a8 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016998:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699c:	68db      	ldr	r3, [r3, #12]
 801699e:	627b      	str	r3, [r7, #36]	@ 0x24
 80169a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d1c0      	bne.n	8016928 <udp_input+0x6c>
 80169a6:	e000      	b.n	80169aa <udp_input+0xee>
        break;
 80169a8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80169aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d101      	bne.n	80169b4 <udp_input+0xf8>
    pcb = uncon_pcb;
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80169b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d002      	beq.n	80169c0 <udp_input+0x104>
    for_us = 1;
 80169ba:	2301      	movs	r3, #1
 80169bc:	76fb      	strb	r3, [r7, #27]
 80169be:	e00a      	b.n	80169d6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	3304      	adds	r3, #4
 80169c4:	681a      	ldr	r2, [r3, #0]
 80169c6:	4b2a      	ldr	r3, [pc, #168]	@ (8016a70 <udp_input+0x1b4>)
 80169c8:	695b      	ldr	r3, [r3, #20]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	bf0c      	ite	eq
 80169ce:	2301      	moveq	r3, #1
 80169d0:	2300      	movne	r3, #0
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80169d6:	7efb      	ldrb	r3, [r7, #27]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d042      	beq.n	8016a62 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80169dc:	f06f 0107 	mvn.w	r1, #7
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f7fa f897 	bl	8010b14 <pbuf_header>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d00a      	beq.n	8016a02 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80169ec:	4b22      	ldr	r3, [pc, #136]	@ (8016a78 <udp_input+0x1bc>)
 80169ee:	f240 1255 	movw	r2, #341	@ 0x155
 80169f2:	4922      	ldr	r1, [pc, #136]	@ (8016a7c <udp_input+0x1c0>)
 80169f4:	4822      	ldr	r0, [pc, #136]	@ (8016a80 <udp_input+0x1c4>)
 80169f6:	f004 f955 	bl	801aca4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f7fa f8ae 	bl	8010b5c <pbuf_free>
      goto end;
 8016a00:	e032      	b.n	8016a68 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8016a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d012      	beq.n	8016a2e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0a:	699b      	ldr	r3, [r3, #24]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a12:	699c      	ldr	r4, [r3, #24]
 8016a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a16:	69d8      	ldr	r0, [r3, #28]
 8016a18:	8a3b      	ldrh	r3, [r7, #16]
 8016a1a:	9300      	str	r3, [sp, #0]
 8016a1c:	4b19      	ldr	r3, [pc, #100]	@ (8016a84 <udp_input+0x1c8>)
 8016a1e:	687a      	ldr	r2, [r7, #4]
 8016a20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016a24:	e021      	b.n	8016a6a <udp_input+0x1ae>
        pbuf_free(p);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7fa f898 	bl	8010b5c <pbuf_free>
        goto end;
 8016a2c:	e01c      	b.n	8016a68 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016a2e:	7cfb      	ldrb	r3, [r7, #19]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d112      	bne.n	8016a5a <udp_input+0x19e>
 8016a34:	4b0e      	ldr	r3, [pc, #56]	@ (8016a70 <udp_input+0x1b4>)
 8016a36:	695b      	ldr	r3, [r3, #20]
 8016a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016a3c:	2be0      	cmp	r3, #224	@ 0xe0
 8016a3e:	d00c      	beq.n	8016a5a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016a40:	4b0b      	ldr	r3, [pc, #44]	@ (8016a70 <udp_input+0x1b4>)
 8016a42:	899b      	ldrh	r3, [r3, #12]
 8016a44:	3308      	adds	r3, #8
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	b21b      	sxth	r3, r3
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7fa f873 	bl	8010b38 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016a52:	2103      	movs	r1, #3
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f002 fba1 	bl	801919c <icmp_dest_unreach>
      pbuf_free(p);
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7fa f87e 	bl	8010b5c <pbuf_free>
  return;
 8016a60:	e003      	b.n	8016a6a <udp_input+0x1ae>
    pbuf_free(p);
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f7fa f87a 	bl	8010b5c <pbuf_free>
  return;
 8016a68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016a6a:	372c      	adds	r7, #44	@ 0x2c
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd90      	pop	{r4, r7, pc}
 8016a70:	240045a0 	.word	0x240045a0
 8016a74:	24007718 	.word	0x24007718
 8016a78:	0801e4d0 	.word	0x0801e4d0
 8016a7c:	0801e534 	.word	0x0801e534
 8016a80:	0801e548 	.word	0x0801e548
 8016a84:	240045b0 	.word	0x240045b0

08016a88 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b088      	sub	sp, #32
 8016a8c:	af02      	add	r7, sp, #8
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	60b9      	str	r1, [r7, #8]
 8016a92:	607a      	str	r2, [r7, #4]
 8016a94:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d002      	beq.n	8016aa2 <udp_sendto_if+0x1a>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d102      	bne.n	8016aa8 <udp_sendto_if+0x20>
    return ERR_VAL;
 8016aa2:	f06f 0305 	mvn.w	r3, #5
 8016aa6:	e028      	b.n	8016afa <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d009      	beq.n	8016ac2 <udp_sendto_if+0x3a>
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d005      	beq.n	8016ac2 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016abe:	2be0      	cmp	r3, #224	@ 0xe0
 8016ac0:	d103      	bne.n	8016aca <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8016ac2:	6a3b      	ldr	r3, [r7, #32]
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	617b      	str	r3, [r7, #20]
 8016ac8:	e00b      	b.n	8016ae2 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	6a3b      	ldr	r3, [r7, #32]
 8016ad0:	3304      	adds	r3, #4
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d002      	beq.n	8016ade <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8016ad8:	f06f 0303 	mvn.w	r3, #3
 8016adc:	e00d      	b.n	8016afa <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016ae2:	887a      	ldrh	r2, [r7, #2]
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	9301      	str	r3, [sp, #4]
 8016ae8:	6a3b      	ldr	r3, [r7, #32]
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	4613      	mov	r3, r2
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	68b9      	ldr	r1, [r7, #8]
 8016af2:	68f8      	ldr	r0, [r7, #12]
 8016af4:	f000 f806 	bl	8016b04 <udp_sendto_if_src>
 8016af8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3718      	adds	r7, #24
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
	...

08016b04 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b08c      	sub	sp, #48	@ 0x30
 8016b08:	af04      	add	r7, sp, #16
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
 8016b10:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d002      	beq.n	8016b1e <udp_sendto_if_src+0x1a>
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d102      	bne.n	8016b24 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8016b1e:	f06f 0305 	mvn.w	r3, #5
 8016b22:	e07e      	b.n	8016c22 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	8a5b      	ldrh	r3, [r3, #18]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d10f      	bne.n	8016b4c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016b2c:	68f9      	ldr	r1, [r7, #12]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	8a5b      	ldrh	r3, [r3, #18]
 8016b32:	461a      	mov	r2, r3
 8016b34:	68f8      	ldr	r0, [r7, #12]
 8016b36:	f000 f87f 	bl	8016c38 <udp_bind>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016b3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d002      	beq.n	8016b4c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016b46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016b4a:	e06a      	b.n	8016c22 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8016b4c:	2108      	movs	r1, #8
 8016b4e:	68b8      	ldr	r0, [r7, #8]
 8016b50:	f7f9 ffe0 	bl	8010b14 <pbuf_header>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d014      	beq.n	8016b84 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	2108      	movs	r1, #8
 8016b5e:	2001      	movs	r0, #1
 8016b60:	f7f9 fc84 	bl	801046c <pbuf_alloc>
 8016b64:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d102      	bne.n	8016b72 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016b70:	e057      	b.n	8016c22 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	891b      	ldrh	r3, [r3, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d006      	beq.n	8016b88 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016b7a:	68b9      	ldr	r1, [r7, #8]
 8016b7c:	69f8      	ldr	r0, [r7, #28]
 8016b7e:	f7fa f91d 	bl	8010dbc <pbuf_chain>
 8016b82:	e001      	b.n	8016b88 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	895b      	ldrh	r3, [r3, #10]
 8016b8c:	2b07      	cmp	r3, #7
 8016b8e:	d806      	bhi.n	8016b9e <udp_sendto_if_src+0x9a>
 8016b90:	4b26      	ldr	r3, [pc, #152]	@ (8016c2c <udp_sendto_if_src+0x128>)
 8016b92:	f240 22db 	movw	r2, #731	@ 0x2db
 8016b96:	4926      	ldr	r1, [pc, #152]	@ (8016c30 <udp_sendto_if_src+0x12c>)
 8016b98:	4826      	ldr	r0, [pc, #152]	@ (8016c34 <udp_sendto_if_src+0x130>)
 8016b9a:	f004 f883 	bl	801aca4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	8a5b      	ldrh	r3, [r3, #18]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7f8 fd5f 	bl	800f66c <lwip_htons>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016bb6:	887b      	ldrh	r3, [r7, #2]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7f8 fd57 	bl	800f66c <lwip_htons>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	719a      	strb	r2, [r3, #6]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	891b      	ldrh	r3, [r3, #8]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f8 fd49 	bl	800f66c <lwip_htons>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	461a      	mov	r2, r3
 8016bde:	697b      	ldr	r3, [r7, #20]
 8016be0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016be2:	2311      	movs	r3, #17
 8016be4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	7a9b      	ldrb	r3, [r3, #10]
 8016bea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	7a5b      	ldrb	r3, [r3, #9]
 8016bf0:	7cb9      	ldrb	r1, [r7, #18]
 8016bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016bf4:	9202      	str	r2, [sp, #8]
 8016bf6:	7cfa      	ldrb	r2, [r7, #19]
 8016bf8:	9201      	str	r2, [sp, #4]
 8016bfa:	9300      	str	r3, [sp, #0]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016c02:	69f8      	ldr	r0, [r7, #28]
 8016c04:	f002 fd42 	bl	801968c <ip4_output_if_src>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016c0c:	69fa      	ldr	r2, [r7, #28]
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d004      	beq.n	8016c1e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8016c14:	69f8      	ldr	r0, [r7, #28]
 8016c16:	f7f9 ffa1 	bl	8010b5c <pbuf_free>
    q = NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016c1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	3720      	adds	r7, #32
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}
 8016c2a:	bf00      	nop
 8016c2c:	0801e4d0 	.word	0x0801e4d0
 8016c30:	0801e570 	.word	0x0801e570
 8016c34:	0801e548 	.word	0x0801e548

08016c38 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b086      	sub	sp, #24
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	4613      	mov	r3, r2
 8016c44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d101      	bne.n	8016c50 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016c4c:	4b30      	ldr	r3, [pc, #192]	@ (8016d10 <udp_bind+0xd8>)
 8016c4e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d002      	beq.n	8016c5c <udp_bind+0x24>
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d102      	bne.n	8016c62 <udp_bind+0x2a>
    return ERR_VAL;
 8016c5c:	f06f 0305 	mvn.w	r3, #5
 8016c60:	e052      	b.n	8016d08 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016c66:	4b2b      	ldr	r3, [pc, #172]	@ (8016d14 <udp_bind+0xdc>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	617b      	str	r3, [r7, #20]
 8016c6c:	e009      	b.n	8016c82 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016c6e:	68fa      	ldr	r2, [r7, #12]
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d102      	bne.n	8016c7c <udp_bind+0x44>
      rebind = 1;
 8016c76:	2301      	movs	r3, #1
 8016c78:	74fb      	strb	r3, [r7, #19]
      break;
 8016c7a:	e005      	b.n	8016c88 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	68db      	ldr	r3, [r3, #12]
 8016c80:	617b      	str	r3, [r7, #20]
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d1f2      	bne.n	8016c6e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016c88:	88fb      	ldrh	r3, [r7, #6]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d109      	bne.n	8016ca2 <udp_bind+0x6a>
    port = udp_new_port();
 8016c8e:	f7ff fda1 	bl	80167d4 <udp_new_port>
 8016c92:	4603      	mov	r3, r0
 8016c94:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016c96:	88fb      	ldrh	r3, [r7, #6]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d11e      	bne.n	8016cda <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016c9c:	f06f 0307 	mvn.w	r3, #7
 8016ca0:	e032      	b.n	8016d08 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8016d14 <udp_bind+0xdc>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	617b      	str	r3, [r7, #20]
 8016ca8:	e014      	b.n	8016cd4 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016caa:	68fa      	ldr	r2, [r7, #12]
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	429a      	cmp	r2, r3
 8016cb0:	d00d      	beq.n	8016cce <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	8a5b      	ldrh	r3, [r3, #18]
 8016cb6:	88fa      	ldrh	r2, [r7, #6]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d108      	bne.n	8016cce <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d102      	bne.n	8016cce <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016cc8:	f06f 0307 	mvn.w	r3, #7
 8016ccc:	e01c      	b.n	8016d08 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	68db      	ldr	r3, [r3, #12]
 8016cd2:	617b      	str	r3, [r7, #20]
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d1e7      	bne.n	8016caa <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d002      	beq.n	8016ce6 <udp_bind+0xae>
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	e000      	b.n	8016ce8 <udp_bind+0xb0>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	68fa      	ldr	r2, [r7, #12]
 8016cea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	88fa      	ldrh	r2, [r7, #6]
 8016cf0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016cf2:	7cfb      	ldrb	r3, [r7, #19]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d106      	bne.n	8016d06 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016cf8:	4b06      	ldr	r3, [pc, #24]	@ (8016d14 <udp_bind+0xdc>)
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016d00:	4a04      	ldr	r2, [pc, #16]	@ (8016d14 <udp_bind+0xdc>)
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016d06:	2300      	movs	r3, #0
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3718      	adds	r7, #24
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	0801f3f0 	.word	0x0801f3f0
 8016d14:	24007718 	.word	0x24007718

08016d18 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b085      	sub	sp, #20
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	68ba      	ldr	r2, [r7, #8]
 8016d28:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	687a      	ldr	r2, [r7, #4]
 8016d2e:	61da      	str	r2, [r3, #28]
}
 8016d30:	bf00      	nop
 8016d32:	3714      	adds	r7, #20
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b084      	sub	sp, #16
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016d44:	4b15      	ldr	r3, [pc, #84]	@ (8016d9c <udp_remove+0x60>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	687a      	ldr	r2, [r7, #4]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d105      	bne.n	8016d5a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016d4e:	4b13      	ldr	r3, [pc, #76]	@ (8016d9c <udp_remove+0x60>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	68db      	ldr	r3, [r3, #12]
 8016d54:	4a11      	ldr	r2, [pc, #68]	@ (8016d9c <udp_remove+0x60>)
 8016d56:	6013      	str	r3, [r2, #0]
 8016d58:	e017      	b.n	8016d8a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016d5a:	4b10      	ldr	r3, [pc, #64]	@ (8016d9c <udp_remove+0x60>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	60fb      	str	r3, [r7, #12]
 8016d60:	e010      	b.n	8016d84 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	68db      	ldr	r3, [r3, #12]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d009      	beq.n	8016d7e <udp_remove+0x42>
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	68db      	ldr	r3, [r3, #12]
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d104      	bne.n	8016d7e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	68da      	ldr	r2, [r3, #12]
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	60da      	str	r2, [r3, #12]
        break;
 8016d7c:	e005      	b.n	8016d8a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	60fb      	str	r3, [r7, #12]
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d1eb      	bne.n	8016d62 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016d8a:	6879      	ldr	r1, [r7, #4]
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	f7f9 f8ef 	bl	800ff70 <memp_free>
}
 8016d92:	bf00      	nop
 8016d94:	3710      	adds	r7, #16
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}
 8016d9a:	bf00      	nop
 8016d9c:	24007718 	.word	0x24007718

08016da0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016da6:	2000      	movs	r0, #0
 8016da8:	f7f9 f86c 	bl	800fe84 <memp_malloc>
 8016dac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d007      	beq.n	8016dc4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016db4:	2220      	movs	r2, #32
 8016db6:	2100      	movs	r1, #0
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f004 f82c 	bl	801ae16 <memset>
    pcb->ttl = UDP_TTL;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	22ff      	movs	r2, #255	@ 0xff
 8016dc2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016dc4:	687b      	ldr	r3, [r7, #4]
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3708      	adds	r7, #8
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b084      	sub	sp, #16
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8016dd8:	f7ff ffe2 	bl	8016da0 <udp_new>
 8016ddc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016dde:	68fb      	ldr	r3, [r7, #12]
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3710      	adds	r7, #16
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b085      	sub	sp, #20
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d01e      	beq.n	8016e36 <udp_netif_ip_addr_changed+0x4e>
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d01a      	beq.n	8016e36 <udp_netif_ip_addr_changed+0x4e>
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d017      	beq.n	8016e36 <udp_netif_ip_addr_changed+0x4e>
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d013      	beq.n	8016e36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8016e44 <udp_netif_ip_addr_changed+0x5c>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	60fb      	str	r3, [r7, #12]
 8016e14:	e00c      	b.n	8016e30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	d103      	bne.n	8016e2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	681a      	ldr	r2, [r3, #0]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	68db      	ldr	r3, [r3, #12]
 8016e2e:	60fb      	str	r3, [r7, #12]
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d1ef      	bne.n	8016e16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016e36:	bf00      	nop
 8016e38:	3714      	adds	r7, #20
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	24007718 	.word	0x24007718

08016e48 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b084      	sub	sp, #16
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e54:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016e56:	2108      	movs	r1, #8
 8016e58:	68f8      	ldr	r0, [r7, #12]
 8016e5a:	f000 fe4f 	bl	8017afc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	3328      	adds	r3, #40	@ 0x28
 8016e62:	2200      	movs	r2, #0
 8016e64:	4619      	mov	r1, r3
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f001 fe8a 	bl	8018b80 <etharp_query>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	7a9b      	ldrb	r3, [r3, #10]
 8016e74:	2bff      	cmp	r3, #255	@ 0xff
 8016e76:	d005      	beq.n	8016e84 <dhcp_check+0x3c>
    dhcp->tries++;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	7a9b      	ldrb	r3, [r3, #10]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	b2da      	uxtb	r2, r3
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8016e84:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8016e88:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016e8a:	893b      	ldrh	r3, [r7, #8]
 8016e8c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016e90:	4a06      	ldr	r2, [pc, #24]	@ (8016eac <dhcp_check+0x64>)
 8016e92:	fb82 1203 	smull	r1, r2, r2, r3
 8016e96:	1152      	asrs	r2, r2, #5
 8016e98:	17db      	asrs	r3, r3, #31
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016ea2:	bf00      	nop
 8016ea4:	3710      	adds	r7, #16
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	10624dd3 	.word	0x10624dd3

08016eb0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b088      	sub	sp, #32
 8016eb4:	af02      	add	r7, sp, #8
 8016eb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ebc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016ebe:	2101      	movs	r1, #1
 8016ec0:	6938      	ldr	r0, [r7, #16]
 8016ec2:	f000 fe1b 	bl	8017afc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8016ec6:	2203      	movs	r2, #3
 8016ec8:	6939      	ldr	r1, [r7, #16]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f000 ff22 	bl	8017d14 <dhcp_create_msg>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8016ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d159      	bne.n	8016f90 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016edc:	2202      	movs	r2, #2
 8016ede:	2139      	movs	r1, #57	@ 0x39
 8016ee0:	6938      	ldr	r0, [r7, #16]
 8016ee2:	f000 fe25 	bl	8017b30 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8016eea:	4619      	mov	r1, r3
 8016eec:	6938      	ldr	r0, [r7, #16]
 8016eee:	f000 fe81 	bl	8017bf4 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8016ef2:	2204      	movs	r2, #4
 8016ef4:	2132      	movs	r1, #50	@ 0x32
 8016ef6:	6938      	ldr	r0, [r7, #16]
 8016ef8:	f000 fe1a 	bl	8017b30 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f8 fbc1 	bl	800f688 <lwip_htonl>
 8016f06:	4603      	mov	r3, r0
 8016f08:	4619      	mov	r1, r3
 8016f0a:	6938      	ldr	r0, [r7, #16]
 8016f0c:	f000 feac 	bl	8017c68 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8016f10:	2204      	movs	r2, #4
 8016f12:	2136      	movs	r1, #54	@ 0x36
 8016f14:	6938      	ldr	r0, [r7, #16]
 8016f16:	f000 fe0b 	bl	8017b30 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7f8 fbb2 	bl	800f688 <lwip_htonl>
 8016f24:	4603      	mov	r3, r0
 8016f26:	4619      	mov	r1, r3
 8016f28:	6938      	ldr	r0, [r7, #16]
 8016f2a:	f000 fe9d 	bl	8017c68 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f2e:	2203      	movs	r2, #3
 8016f30:	2137      	movs	r1, #55	@ 0x37
 8016f32:	6938      	ldr	r0, [r7, #16]
 8016f34:	f000 fdfc 	bl	8017b30 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f38:	2300      	movs	r3, #0
 8016f3a:	75fb      	strb	r3, [r7, #23]
 8016f3c:	e009      	b.n	8016f52 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8016f3e:	7dfb      	ldrb	r3, [r7, #23]
 8016f40:	4a29      	ldr	r2, [pc, #164]	@ (8016fe8 <dhcp_select+0x138>)
 8016f42:	5cd3      	ldrb	r3, [r2, r3]
 8016f44:	4619      	mov	r1, r3
 8016f46:	6938      	ldr	r0, [r7, #16]
 8016f48:	f000 fe2c 	bl	8017ba4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f4c:	7dfb      	ldrb	r3, [r7, #23]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	75fb      	strb	r3, [r7, #23]
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
 8016f54:	2b02      	cmp	r3, #2
 8016f56:	d9f2      	bls.n	8016f3e <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8016f58:	6938      	ldr	r0, [r7, #16]
 8016f5a:	f001 f87f 	bl	801805c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	68da      	ldr	r2, [r3, #12]
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	8a9b      	ldrh	r3, [r3, #20]
 8016f66:	33f0      	adds	r3, #240	@ 0xf0
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	4619      	mov	r1, r3
 8016f6c:	4610      	mov	r0, r2
 8016f6e:	f7f9 fc81 	bl	8010874 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8016f72:	4b1e      	ldr	r3, [pc, #120]	@ (8016fec <dhcp_select+0x13c>)
 8016f74:	6818      	ldr	r0, [r3, #0]
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	68d9      	ldr	r1, [r3, #12]
 8016f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8016ff0 <dhcp_select+0x140>)
 8016f7c:	9301      	str	r3, [sp, #4]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	2343      	movs	r3, #67	@ 0x43
 8016f84:	4a1b      	ldr	r2, [pc, #108]	@ (8016ff4 <dhcp_select+0x144>)
 8016f86:	f7ff fdbd 	bl	8016b04 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8016f8a:	6938      	ldr	r0, [r7, #16]
 8016f8c:	f001 f824 	bl	8017fd8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016f90:	693b      	ldr	r3, [r7, #16]
 8016f92:	7a9b      	ldrb	r3, [r3, #10]
 8016f94:	2bff      	cmp	r3, #255	@ 0xff
 8016f96:	d005      	beq.n	8016fa4 <dhcp_select+0xf4>
    dhcp->tries++;
 8016f98:	693b      	ldr	r3, [r7, #16]
 8016f9a:	7a9b      	ldrb	r3, [r3, #10]
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	b2da      	uxtb	r2, r3
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	7a9b      	ldrb	r3, [r3, #10]
 8016fa8:	2b05      	cmp	r3, #5
 8016faa:	d807      	bhi.n	8016fbc <dhcp_select+0x10c>
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	7a9b      	ldrb	r3, [r3, #10]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016fb6:	4093      	lsls	r3, r2
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	e001      	b.n	8016fc0 <dhcp_select+0x110>
 8016fbc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8016fc0:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016fc2:	89bb      	ldrh	r3, [r7, #12]
 8016fc4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8016ff8 <dhcp_select+0x148>)
 8016fca:	fb82 1203 	smull	r1, r2, r2, r3
 8016fce:	1152      	asrs	r2, r2, #5
 8016fd0:	17db      	asrs	r3, r3, #31
 8016fd2:	1ad3      	subs	r3, r2, r3
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fde:	4618      	mov	r0, r3
 8016fe0:	3718      	adds	r7, #24
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	24000034 	.word	0x24000034
 8016fec:	2400771c 	.word	0x2400771c
 8016ff0:	0801f3f0 	.word	0x0801f3f0
 8016ff4:	0801f3f4 	.word	0x0801f3f4
 8016ff8:	10624dd3 	.word	0x10624dd3

08016ffc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8017002:	4b27      	ldr	r3, [pc, #156]	@ (80170a0 <dhcp_coarse_tmr+0xa4>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8017008:	e042      	b.n	8017090 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801700e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d039      	beq.n	801708a <dhcp_coarse_tmr+0x8e>
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	7a5b      	ldrb	r3, [r3, #9]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d035      	beq.n	801708a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017022:	2b00      	cmp	r3, #0
 8017024:	d012      	beq.n	801704c <dhcp_coarse_tmr+0x50>
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	8c1b      	ldrh	r3, [r3, #32]
 801702a:	3301      	adds	r3, #1
 801702c:	b29a      	uxth	r2, r3
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	841a      	strh	r2, [r3, #32]
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	8c1a      	ldrh	r2, [r3, #32]
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801703a:	429a      	cmp	r2, r3
 801703c:	d106      	bne.n	801704c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f000 fcd4 	bl	80179ec <dhcp_release>
        dhcp_discover(netif);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 f9cb 	bl	80173e0 <dhcp_discover>
 801704a:	e01e      	b.n	801708a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	8bdb      	ldrh	r3, [r3, #30]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00b      	beq.n	801706c <dhcp_coarse_tmr+0x70>
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	8bdb      	ldrh	r3, [r3, #30]
 8017058:	1e5a      	subs	r2, r3, #1
 801705a:	b291      	uxth	r1, r2
 801705c:	683a      	ldr	r2, [r7, #0]
 801705e:	83d1      	strh	r1, [r2, #30]
 8017060:	2b01      	cmp	r3, #1
 8017062:	d103      	bne.n	801706c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 f8c7 	bl	80171f8 <dhcp_t2_timeout>
 801706a:	e00e      	b.n	801708a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	8b9b      	ldrh	r3, [r3, #28]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d00a      	beq.n	801708a <dhcp_coarse_tmr+0x8e>
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	8b9b      	ldrh	r3, [r3, #28]
 8017078:	1e5a      	subs	r2, r3, #1
 801707a:	b291      	uxth	r1, r2
 801707c:	683a      	ldr	r2, [r7, #0]
 801707e:	8391      	strh	r1, [r2, #28]
 8017080:	2b01      	cmp	r3, #1
 8017082:	d102      	bne.n	801708a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f000 f888 	bl	801719a <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d1b9      	bne.n	801700a <dhcp_coarse_tmr+0xe>
  }
}
 8017096:	bf00      	nop
 8017098:	bf00      	nop
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	240076b0 	.word	0x240076b0

080170a4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80170aa:	4b16      	ldr	r3, [pc, #88]	@ (8017104 <dhcp_fine_tmr+0x60>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 80170b0:	e020      	b.n	80170f4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170b6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d017      	beq.n	80170ee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	8adb      	ldrh	r3, [r3, #22]
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d906      	bls.n	80170d4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	8adb      	ldrh	r3, [r3, #22]
 80170ca:	3b01      	subs	r3, #1
 80170cc:	b29a      	uxth	r2, r3
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	82da      	strh	r2, [r3, #22]
 80170d2:	e00c      	b.n	80170ee <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	8adb      	ldrh	r3, [r3, #22]
 80170d8:	2b01      	cmp	r3, #1
 80170da:	d108      	bne.n	80170ee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	8adb      	ldrh	r3, [r3, #22]
 80170e0:	3b01      	subs	r3, #1
 80170e2:	b29a      	uxth	r2, r3
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f000 f80d 	bl	8017108 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1db      	bne.n	80170b2 <dhcp_fine_tmr+0xe>
  }
}
 80170fa:	bf00      	nop
 80170fc:	bf00      	nop
 80170fe:	3708      	adds	r7, #8
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	240076b0 	.word	0x240076b0

08017108 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b084      	sub	sp, #16
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017114:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	7a5b      	ldrb	r3, [r3, #9]
 801711a:	2b0c      	cmp	r3, #12
 801711c:	d003      	beq.n	8017126 <dhcp_timeout+0x1e>
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	7a5b      	ldrb	r3, [r3, #9]
 8017122:	2b06      	cmp	r3, #6
 8017124:	d103      	bne.n	801712e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 f95a 	bl	80173e0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801712c:	e031      	b.n	8017192 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	7a5b      	ldrb	r3, [r3, #9]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d10e      	bne.n	8017154 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	7a9b      	ldrb	r3, [r3, #10]
 801713a:	2b05      	cmp	r3, #5
 801713c:	d803      	bhi.n	8017146 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f7ff feb6 	bl	8016eb0 <dhcp_select>
}
 8017144:	e025      	b.n	8017192 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 fc50 	bl	80179ec <dhcp_release>
      dhcp_discover(netif);
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f000 f947 	bl	80173e0 <dhcp_discover>
}
 8017152:	e01e      	b.n	8017192 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	7a5b      	ldrb	r3, [r3, #9]
 8017158:	2b08      	cmp	r3, #8
 801715a:	d10b      	bne.n	8017174 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	7a9b      	ldrb	r3, [r3, #10]
 8017160:	2b01      	cmp	r3, #1
 8017162:	d803      	bhi.n	801716c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f7ff fe6f 	bl	8016e48 <dhcp_check>
}
 801716a:	e012      	b.n	8017192 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	f000 f9c3 	bl	80174f8 <dhcp_bind>
}
 8017172:	e00e      	b.n	8017192 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	7a5b      	ldrb	r3, [r3, #9]
 8017178:	2b03      	cmp	r3, #3
 801717a:	d10a      	bne.n	8017192 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	7a9b      	ldrb	r3, [r3, #10]
 8017180:	2b01      	cmp	r3, #1
 8017182:	d803      	bhi.n	801718c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f000 fb9d 	bl	80178c4 <dhcp_reboot>
}
 801718a:	e002      	b.n	8017192 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f000 f927 	bl	80173e0 <dhcp_discover>
}
 8017192:	bf00      	nop
 8017194:	3710      	adds	r7, #16
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}

0801719a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801719a:	b580      	push	{r7, lr}
 801719c:	b084      	sub	sp, #16
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171a6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	7a5b      	ldrb	r3, [r3, #9]
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d007      	beq.n	80171c0 <dhcp_t1_timeout+0x26>
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	7a5b      	ldrb	r3, [r3, #9]
 80171b4:	2b0a      	cmp	r3, #10
 80171b6:	d003      	beq.n	80171c0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171bc:	2b05      	cmp	r3, #5
 80171be:	d117      	bne.n	80171f0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f000 fa73 	bl	80176ac <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	8b5b      	ldrh	r3, [r3, #26]
 80171ca:	461a      	mov	r2, r3
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	8c1b      	ldrh	r3, [r3, #32]
 80171d0:	1ad3      	subs	r3, r2, r3
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	dd0c      	ble.n	80171f0 <dhcp_t1_timeout+0x56>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	8b5b      	ldrh	r3, [r3, #26]
 80171da:	461a      	mov	r2, r3
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	8c1b      	ldrh	r3, [r3, #32]
 80171e0:	1ad3      	subs	r3, r2, r3
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	da00      	bge.n	80171e8 <dhcp_t1_timeout+0x4e>
 80171e6:	3301      	adds	r3, #1
 80171e8:	105b      	asrs	r3, r3, #1
 80171ea:	b29a      	uxth	r2, r3
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	839a      	strh	r2, [r3, #28]
    }
  }
}
 80171f0:	bf00      	nop
 80171f2:	3710      	adds	r7, #16
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017204:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	7a5b      	ldrb	r3, [r3, #9]
 801720a:	2b01      	cmp	r3, #1
 801720c:	d00b      	beq.n	8017226 <dhcp_t2_timeout+0x2e>
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	7a5b      	ldrb	r3, [r3, #9]
 8017212:	2b0a      	cmp	r3, #10
 8017214:	d007      	beq.n	8017226 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801721a:	2b05      	cmp	r3, #5
 801721c:	d003      	beq.n	8017226 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	7a5b      	ldrb	r3, [r3, #9]
 8017222:	2b04      	cmp	r3, #4
 8017224:	d117      	bne.n	8017256 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f000 fac6 	bl	80177b8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017230:	461a      	mov	r2, r3
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	8c1b      	ldrh	r3, [r3, #32]
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	2b01      	cmp	r3, #1
 801723a:	dd0c      	ble.n	8017256 <dhcp_t2_timeout+0x5e>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017240:	461a      	mov	r2, r3
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	8c1b      	ldrh	r3, [r3, #32]
 8017246:	1ad3      	subs	r3, r2, r3
 8017248:	2b00      	cmp	r3, #0
 801724a:	da00      	bge.n	801724e <dhcp_t2_timeout+0x56>
 801724c:	3301      	adds	r3, #1
 801724e:	105b      	asrs	r3, r3, #1
 8017250:	b29a      	uxth	r2, r3
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8017256:	bf00      	nop
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}

0801725e <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801725e:	b580      	push	{r7, lr}
 8017260:	b084      	sub	sp, #16
 8017262:	af00      	add	r7, sp, #0
 8017264:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801726a:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d01a      	beq.n	80172a8 <dhcp_network_changed+0x4a>
    return;
  switch (dhcp->state) {
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	7a5b      	ldrb	r3, [r3, #9]
 8017276:	2b0a      	cmp	r3, #10
 8017278:	d008      	beq.n	801728c <dhcp_network_changed+0x2e>
 801727a:	2b0a      	cmp	r3, #10
 801727c:	dc0d      	bgt.n	801729a <dhcp_network_changed+0x3c>
 801727e:	2b00      	cmp	r3, #0
 8017280:	d014      	beq.n	80172ac <dhcp_network_changed+0x4e>
 8017282:	2b00      	cmp	r3, #0
 8017284:	db09      	blt.n	801729a <dhcp_network_changed+0x3c>
 8017286:	3b03      	subs	r3, #3
 8017288:	2b02      	cmp	r3, #2
 801728a:	d806      	bhi.n	801729a <dhcp_network_changed+0x3c>
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	2200      	movs	r2, #0
 8017290:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f000 fb16 	bl	80178c4 <dhcp_reboot>
    break;
 8017298:	e009      	b.n	80172ae <dhcp_network_changed+0x50>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2200      	movs	r2, #0
 801729e:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 f89d 	bl	80173e0 <dhcp_discover>
    break;
 80172a6:	e002      	b.n	80172ae <dhcp_network_changed+0x50>
    return;
 80172a8:	bf00      	nop
 80172aa:	e000      	b.n	80172ae <dhcp_network_changed+0x50>
    break;
 80172ac:	bf00      	nop
  }
}
 80172ae:	3710      	adds	r7, #16
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b084      	sub	sp, #16
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d107      	bne.n	80172d4 <dhcp_arp_reply+0x20>
 80172c4:	4b0e      	ldr	r3, [pc, #56]	@ (8017300 <dhcp_arp_reply+0x4c>)
 80172c6:	f240 327b 	movw	r2, #891	@ 0x37b
 80172ca:	490e      	ldr	r1, [pc, #56]	@ (8017304 <dhcp_arp_reply+0x50>)
 80172cc:	480e      	ldr	r0, [pc, #56]	@ (8017308 <dhcp_arp_reply+0x54>)
 80172ce:	f003 fce9 	bl	801aca4 <iprintf>
 80172d2:	e012      	b.n	80172fa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d00c      	beq.n	80172fa <dhcp_arp_reply+0x46>
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	7a5b      	ldrb	r3, [r3, #9]
 80172e4:	2b08      	cmp	r3, #8
 80172e6:	d108      	bne.n	80172fa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	681a      	ldr	r2, [r3, #0]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d102      	bne.n	80172fa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f000 f809 	bl	801730c <dhcp_decline>
    }
  }
}
 80172fa:	3710      	adds	r7, #16
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}
 8017300:	0801e5a0 	.word	0x0801e5a0
 8017304:	0801e680 	.word	0x0801e680
 8017308:	0801e634 	.word	0x0801e634

0801730c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af02      	add	r7, sp, #8
 8017312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017318:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801731a:	2300      	movs	r3, #0
 801731c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801731e:	210c      	movs	r1, #12
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	f000 fbeb 	bl	8017afc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8017326:	2204      	movs	r2, #4
 8017328:	68f9      	ldr	r1, [r7, #12]
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 fcf2 	bl	8017d14 <dhcp_create_msg>
 8017330:	4603      	mov	r3, r0
 8017332:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8017334:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d12a      	bne.n	8017392 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801733c:	2204      	movs	r2, #4
 801733e:	2132      	movs	r1, #50	@ 0x32
 8017340:	68f8      	ldr	r0, [r7, #12]
 8017342:	f000 fbf5 	bl	8017b30 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801734a:	4618      	mov	r0, r3
 801734c:	f7f8 f99c 	bl	800f688 <lwip_htonl>
 8017350:	4603      	mov	r3, r0
 8017352:	4619      	mov	r1, r3
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f000 fc87 	bl	8017c68 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f000 fe7e 	bl	801805c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	68da      	ldr	r2, [r3, #12]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	8a9b      	ldrh	r3, [r3, #20]
 8017368:	33f0      	adds	r3, #240	@ 0xf0
 801736a:	b29b      	uxth	r3, r3
 801736c:	4619      	mov	r1, r3
 801736e:	4610      	mov	r0, r2
 8017370:	f7f9 fa80 	bl	8010874 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8017374:	4b16      	ldr	r3, [pc, #88]	@ (80173d0 <dhcp_decline+0xc4>)
 8017376:	6818      	ldr	r0, [r3, #0]
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	68d9      	ldr	r1, [r3, #12]
 801737c:	4b15      	ldr	r3, [pc, #84]	@ (80173d4 <dhcp_decline+0xc8>)
 801737e:	9301      	str	r3, [sp, #4]
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	9300      	str	r3, [sp, #0]
 8017384:	2343      	movs	r3, #67	@ 0x43
 8017386:	4a14      	ldr	r2, [pc, #80]	@ (80173d8 <dhcp_decline+0xcc>)
 8017388:	f7ff fbbc 	bl	8016b04 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f000 fe23 	bl	8017fd8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	7a9b      	ldrb	r3, [r3, #10]
 8017396:	2bff      	cmp	r3, #255	@ 0xff
 8017398:	d005      	beq.n	80173a6 <dhcp_decline+0x9a>
    dhcp->tries++;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	7a9b      	ldrb	r3, [r3, #10]
 801739e:	3301      	adds	r3, #1
 80173a0:	b2da      	uxtb	r2, r3
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 80173a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80173aa:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80173ac:	893b      	ldrh	r3, [r7, #8]
 80173ae:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80173b2:	4a0a      	ldr	r2, [pc, #40]	@ (80173dc <dhcp_decline+0xd0>)
 80173b4:	fb82 1203 	smull	r1, r2, r2, r3
 80173b8:	1152      	asrs	r2, r2, #5
 80173ba:	17db      	asrs	r3, r3, #31
 80173bc:	1ad3      	subs	r3, r2, r3
 80173be:	b29a      	uxth	r2, r3
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80173c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3710      	adds	r7, #16
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	2400771c 	.word	0x2400771c
 80173d4:	0801f3f0 	.word	0x0801f3f0
 80173d8:	0801f3f4 	.word	0x0801f3f4
 80173dc:	10624dd3 	.word	0x10624dd3

080173e0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b088      	sub	sp, #32
 80173e4:	af02      	add	r7, sp, #8
 80173e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173ec:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 80173ee:	2300      	movs	r3, #0
 80173f0:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	2200      	movs	r2, #0
 80173f6:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80173f8:	2106      	movs	r1, #6
 80173fa:	6938      	ldr	r0, [r7, #16]
 80173fc:	f000 fb7e 	bl	8017afc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8017400:	2201      	movs	r2, #1
 8017402:	6939      	ldr	r1, [r7, #16]
 8017404:	6878      	ldr	r0, [r7, #4]
 8017406:	f000 fc85 	bl	8017d14 <dhcp_create_msg>
 801740a:	4603      	mov	r3, r0
 801740c:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801740e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d13b      	bne.n	801748e <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017416:	2202      	movs	r2, #2
 8017418:	2139      	movs	r1, #57	@ 0x39
 801741a:	6938      	ldr	r0, [r7, #16]
 801741c:	f000 fb88 	bl	8017b30 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017424:	4619      	mov	r1, r3
 8017426:	6938      	ldr	r0, [r7, #16]
 8017428:	f000 fbe4 	bl	8017bf4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801742c:	2203      	movs	r2, #3
 801742e:	2137      	movs	r1, #55	@ 0x37
 8017430:	6938      	ldr	r0, [r7, #16]
 8017432:	f000 fb7d 	bl	8017b30 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017436:	2300      	movs	r3, #0
 8017438:	75fb      	strb	r3, [r7, #23]
 801743a:	e009      	b.n	8017450 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801743c:	7dfb      	ldrb	r3, [r7, #23]
 801743e:	4a29      	ldr	r2, [pc, #164]	@ (80174e4 <dhcp_discover+0x104>)
 8017440:	5cd3      	ldrb	r3, [r2, r3]
 8017442:	4619      	mov	r1, r3
 8017444:	6938      	ldr	r0, [r7, #16]
 8017446:	f000 fbad 	bl	8017ba4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801744a:	7dfb      	ldrb	r3, [r7, #23]
 801744c:	3301      	adds	r3, #1
 801744e:	75fb      	strb	r3, [r7, #23]
 8017450:	7dfb      	ldrb	r3, [r7, #23]
 8017452:	2b02      	cmp	r3, #2
 8017454:	d9f2      	bls.n	801743c <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8017456:	6938      	ldr	r0, [r7, #16]
 8017458:	f000 fe00 	bl	801805c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	68da      	ldr	r2, [r3, #12]
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	8a9b      	ldrh	r3, [r3, #20]
 8017464:	33f0      	adds	r3, #240	@ 0xf0
 8017466:	b29b      	uxth	r3, r3
 8017468:	4619      	mov	r1, r3
 801746a:	4610      	mov	r0, r2
 801746c:	f7f9 fa02 	bl	8010874 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8017470:	4b1d      	ldr	r3, [pc, #116]	@ (80174e8 <dhcp_discover+0x108>)
 8017472:	6818      	ldr	r0, [r3, #0]
 8017474:	693b      	ldr	r3, [r7, #16]
 8017476:	68d9      	ldr	r1, [r3, #12]
 8017478:	4b1c      	ldr	r3, [pc, #112]	@ (80174ec <dhcp_discover+0x10c>)
 801747a:	9301      	str	r3, [sp, #4]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	9300      	str	r3, [sp, #0]
 8017480:	2343      	movs	r3, #67	@ 0x43
 8017482:	4a1b      	ldr	r2, [pc, #108]	@ (80174f0 <dhcp_discover+0x110>)
 8017484:	f7ff fb3e 	bl	8016b04 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8017488:	6938      	ldr	r0, [r7, #16]
 801748a:	f000 fda5 	bl	8017fd8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	7a9b      	ldrb	r3, [r3, #10]
 8017492:	2bff      	cmp	r3, #255	@ 0xff
 8017494:	d005      	beq.n	80174a2 <dhcp_discover+0xc2>
    dhcp->tries++;
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	7a9b      	ldrb	r3, [r3, #10]
 801749a:	3301      	adds	r3, #1
 801749c:	b2da      	uxtb	r2, r3
 801749e:	693b      	ldr	r3, [r7, #16]
 80174a0:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	7a9b      	ldrb	r3, [r3, #10]
 80174a6:	2b05      	cmp	r3, #5
 80174a8:	d807      	bhi.n	80174ba <dhcp_discover+0xda>
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	7a9b      	ldrb	r3, [r3, #10]
 80174ae:	461a      	mov	r2, r3
 80174b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80174b4:	4093      	lsls	r3, r2
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	e001      	b.n	80174be <dhcp_discover+0xde>
 80174ba:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80174be:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80174c0:	89bb      	ldrh	r3, [r7, #12]
 80174c2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80174c6:	4a0b      	ldr	r2, [pc, #44]	@ (80174f4 <dhcp_discover+0x114>)
 80174c8:	fb82 1203 	smull	r1, r2, r2, r3
 80174cc:	1152      	asrs	r2, r2, #5
 80174ce:	17db      	asrs	r3, r3, #31
 80174d0:	1ad3      	subs	r3, r2, r3
 80174d2:	b29a      	uxth	r2, r3
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80174d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3718      	adds	r7, #24
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}
 80174e4:	24000034 	.word	0x24000034
 80174e8:	2400771c 	.word	0x2400771c
 80174ec:	0801f3f0 	.word	0x0801f3f0
 80174f0:	0801f3f4 	.word	0x0801f3f4
 80174f4:	10624dd3 	.word	0x10624dd3

080174f8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b088      	sub	sp, #32
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d107      	bne.n	8017516 <dhcp_bind+0x1e>
 8017506:	4b64      	ldr	r3, [pc, #400]	@ (8017698 <dhcp_bind+0x1a0>)
 8017508:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801750c:	4963      	ldr	r1, [pc, #396]	@ (801769c <dhcp_bind+0x1a4>)
 801750e:	4864      	ldr	r0, [pc, #400]	@ (80176a0 <dhcp_bind+0x1a8>)
 8017510:	f003 fbc8 	bl	801aca4 <iprintf>
 8017514:	e0bc      	b.n	8017690 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801751a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d107      	bne.n	8017532 <dhcp_bind+0x3a>
 8017522:	4b5d      	ldr	r3, [pc, #372]	@ (8017698 <dhcp_bind+0x1a0>)
 8017524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017528:	495e      	ldr	r1, [pc, #376]	@ (80176a4 <dhcp_bind+0x1ac>)
 801752a:	485d      	ldr	r0, [pc, #372]	@ (80176a0 <dhcp_bind+0x1a8>)
 801752c:	f003 fbba 	bl	801aca4 <iprintf>
 8017530:	e0ae      	b.n	8017690 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017532:	69bb      	ldr	r3, [r7, #24]
 8017534:	2200      	movs	r2, #0
 8017536:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017540:	d019      	beq.n	8017576 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017542:	69bb      	ldr	r3, [r7, #24]
 8017544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017546:	331e      	adds	r3, #30
 8017548:	4a57      	ldr	r2, [pc, #348]	@ (80176a8 <dhcp_bind+0x1b0>)
 801754a:	fba2 2303 	umull	r2, r3, r2, r3
 801754e:	095b      	lsrs	r3, r3, #5
 8017550:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8017552:	69fb      	ldr	r3, [r7, #28]
 8017554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017558:	d302      	bcc.n	8017560 <dhcp_bind+0x68>
       timeout = 0xffff;
 801755a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801755e:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	b29a      	uxth	r2, r3
 8017564:	69bb      	ldr	r3, [r7, #24]
 8017566:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801756c:	2b00      	cmp	r3, #0
 801756e:	d102      	bne.n	8017576 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8017570:	69bb      	ldr	r3, [r7, #24]
 8017572:	2201      	movs	r2, #1
 8017574:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801757e:	d01d      	beq.n	80175bc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017584:	331e      	adds	r3, #30
 8017586:	4a48      	ldr	r2, [pc, #288]	@ (80176a8 <dhcp_bind+0x1b0>)
 8017588:	fba2 2303 	umull	r2, r3, r2, r3
 801758c:	095b      	lsrs	r3, r3, #5
 801758e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017590:	69fb      	ldr	r3, [r7, #28]
 8017592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017596:	d302      	bcc.n	801759e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801759c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801759e:	69fb      	ldr	r3, [r7, #28]
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 80175a6:	69bb      	ldr	r3, [r7, #24]
 80175a8:	8b1b      	ldrh	r3, [r3, #24]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d102      	bne.n	80175b4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80175ae:	69bb      	ldr	r3, [r7, #24]
 80175b0:	2201      	movs	r2, #1
 80175b2:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	8b1a      	ldrh	r2, [r3, #24]
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80175bc:	69bb      	ldr	r3, [r7, #24]
 80175be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175c4:	d01d      	beq.n	8017602 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80175c6:	69bb      	ldr	r3, [r7, #24]
 80175c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175ca:	331e      	adds	r3, #30
 80175cc:	4a36      	ldr	r2, [pc, #216]	@ (80176a8 <dhcp_bind+0x1b0>)
 80175ce:	fba2 2303 	umull	r2, r3, r2, r3
 80175d2:	095b      	lsrs	r3, r3, #5
 80175d4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80175dc:	d302      	bcc.n	80175e4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80175de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80175e2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80175e4:	69fb      	ldr	r3, [r7, #28]
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	69bb      	ldr	r3, [r7, #24]
 80175ea:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	8b5b      	ldrh	r3, [r3, #26]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d102      	bne.n	80175fa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	2201      	movs	r2, #1
 80175f8:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	8b5a      	ldrh	r2, [r3, #26]
 80175fe:	69bb      	ldr	r3, [r7, #24]
 8017600:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	8b1a      	ldrh	r2, [r3, #24]
 8017606:	69bb      	ldr	r3, [r7, #24]
 8017608:	8b5b      	ldrh	r3, [r3, #26]
 801760a:	429a      	cmp	r2, r3
 801760c:	d306      	bcc.n	801761c <dhcp_bind+0x124>
 801760e:	69bb      	ldr	r3, [r7, #24]
 8017610:	8b5b      	ldrh	r3, [r3, #26]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d002      	beq.n	801761c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	2200      	movs	r2, #0
 801761a:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801761c:	69bb      	ldr	r3, [r7, #24]
 801761e:	7adb      	ldrb	r3, [r3, #11]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d003      	beq.n	801762c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017624:	69bb      	ldr	r3, [r7, #24]
 8017626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017628:	613b      	str	r3, [r7, #16]
 801762a:	e014      	b.n	8017656 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801762c:	69bb      	ldr	r3, [r7, #24]
 801762e:	3328      	adds	r3, #40	@ 0x28
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017638:	2b00      	cmp	r3, #0
 801763a:	db02      	blt.n	8017642 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801763c:	23ff      	movs	r3, #255	@ 0xff
 801763e:	613b      	str	r3, [r7, #16]
 8017640:	e009      	b.n	8017656 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017642:	7dfb      	ldrb	r3, [r7, #23]
 8017644:	2bbf      	cmp	r3, #191	@ 0xbf
 8017646:	d903      	bls.n	8017650 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017648:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801764c:	613b      	str	r3, [r7, #16]
 801764e:	e002      	b.n	8017656 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017654:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801765a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d108      	bne.n	8017674 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	4013      	ands	r3, r2
 801766a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017672:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017674:	210a      	movs	r1, #10
 8017676:	69b8      	ldr	r0, [r7, #24]
 8017678:	f000 fa40 	bl	8017afc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801767c:	69bb      	ldr	r3, [r7, #24]
 801767e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017682:	f107 030c 	add.w	r3, r7, #12
 8017686:	f107 0210 	add.w	r2, r7, #16
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7f8 fd04 	bl	8010098 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017690:	3720      	adds	r7, #32
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	0801e5a0 	.word	0x0801e5a0
 801769c:	0801e714 	.word	0x0801e714
 80176a0:	0801e634 	.word	0x0801e634
 80176a4:	0801e730 	.word	0x0801e730
 80176a8:	88888889 	.word	0x88888889

080176ac <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af02      	add	r7, sp, #8
 80176b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176b8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80176ba:	2105      	movs	r1, #5
 80176bc:	6938      	ldr	r0, [r7, #16]
 80176be:	f000 fa1d 	bl	8017afc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80176c2:	2203      	movs	r2, #3
 80176c4:	6939      	ldr	r1, [r7, #16]
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f000 fb24 	bl	8017d14 <dhcp_create_msg>
 80176cc:	4603      	mov	r3, r0
 80176ce:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80176d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d13b      	bne.n	8017750 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80176d8:	2202      	movs	r2, #2
 80176da:	2139      	movs	r1, #57	@ 0x39
 80176dc:	6938      	ldr	r0, [r7, #16]
 80176de:	f000 fa27 	bl	8017b30 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80176e6:	4619      	mov	r1, r3
 80176e8:	6938      	ldr	r0, [r7, #16]
 80176ea:	f000 fa83 	bl	8017bf4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80176ee:	2203      	movs	r2, #3
 80176f0:	2137      	movs	r1, #55	@ 0x37
 80176f2:	6938      	ldr	r0, [r7, #16]
 80176f4:	f000 fa1c 	bl	8017b30 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80176f8:	2300      	movs	r3, #0
 80176fa:	75fb      	strb	r3, [r7, #23]
 80176fc:	e009      	b.n	8017712 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
 8017700:	4a2a      	ldr	r2, [pc, #168]	@ (80177ac <dhcp_renew+0x100>)
 8017702:	5cd3      	ldrb	r3, [r2, r3]
 8017704:	4619      	mov	r1, r3
 8017706:	6938      	ldr	r0, [r7, #16]
 8017708:	f000 fa4c 	bl	8017ba4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801770c:	7dfb      	ldrb	r3, [r7, #23]
 801770e:	3301      	adds	r3, #1
 8017710:	75fb      	strb	r3, [r7, #23]
 8017712:	7dfb      	ldrb	r3, [r7, #23]
 8017714:	2b02      	cmp	r3, #2
 8017716:	d9f2      	bls.n	80176fe <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8017718:	6938      	ldr	r0, [r7, #16]
 801771a:	f000 fc9f 	bl	801805c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801771e:	693b      	ldr	r3, [r7, #16]
 8017720:	68da      	ldr	r2, [r3, #12]
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	8a9b      	ldrh	r3, [r3, #20]
 8017726:	33f0      	adds	r3, #240	@ 0xf0
 8017728:	b29b      	uxth	r3, r3
 801772a:	4619      	mov	r1, r3
 801772c:	4610      	mov	r0, r2
 801772e:	f7f9 f8a1 	bl	8010874 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8017732:	4b1f      	ldr	r3, [pc, #124]	@ (80177b0 <dhcp_renew+0x104>)
 8017734:	6818      	ldr	r0, [r3, #0]
 8017736:	693b      	ldr	r3, [r7, #16]
 8017738:	68d9      	ldr	r1, [r3, #12]
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	2343      	movs	r3, #67	@ 0x43
 8017746:	f7ff f99f 	bl	8016a88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801774a:	6938      	ldr	r0, [r7, #16]
 801774c:	f000 fc44 	bl	8017fd8 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017750:	693b      	ldr	r3, [r7, #16]
 8017752:	7a9b      	ldrb	r3, [r3, #10]
 8017754:	2bff      	cmp	r3, #255	@ 0xff
 8017756:	d005      	beq.n	8017764 <dhcp_renew+0xb8>
    dhcp->tries++;
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	7a9b      	ldrb	r3, [r3, #10]
 801775c:	3301      	adds	r3, #1
 801775e:	b2da      	uxtb	r2, r3
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8017764:	693b      	ldr	r3, [r7, #16]
 8017766:	7a9b      	ldrb	r3, [r3, #10]
 8017768:	2b09      	cmp	r3, #9
 801776a:	d809      	bhi.n	8017780 <dhcp_renew+0xd4>
 801776c:	693b      	ldr	r3, [r7, #16]
 801776e:	7a9b      	ldrb	r3, [r3, #10]
 8017770:	461a      	mov	r2, r3
 8017772:	0152      	lsls	r2, r2, #5
 8017774:	1ad2      	subs	r2, r2, r3
 8017776:	0092      	lsls	r2, r2, #2
 8017778:	4413      	add	r3, r2
 801777a:	011b      	lsls	r3, r3, #4
 801777c:	b29b      	uxth	r3, r3
 801777e:	e001      	b.n	8017784 <dhcp_renew+0xd8>
 8017780:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8017784:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8017786:	89bb      	ldrh	r3, [r7, #12]
 8017788:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801778c:	4a09      	ldr	r2, [pc, #36]	@ (80177b4 <dhcp_renew+0x108>)
 801778e:	fb82 1203 	smull	r1, r2, r2, r3
 8017792:	1152      	asrs	r2, r2, #5
 8017794:	17db      	asrs	r3, r3, #31
 8017796:	1ad3      	subs	r3, r2, r3
 8017798:	b29a      	uxth	r2, r3
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801779e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3718      	adds	r7, #24
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}
 80177aa:	bf00      	nop
 80177ac:	24000034 	.word	0x24000034
 80177b0:	2400771c 	.word	0x2400771c
 80177b4:	10624dd3 	.word	0x10624dd3

080177b8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b088      	sub	sp, #32
 80177bc:	af02      	add	r7, sp, #8
 80177be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177c4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80177c6:	2104      	movs	r1, #4
 80177c8:	6938      	ldr	r0, [r7, #16]
 80177ca:	f000 f997 	bl	8017afc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80177ce:	2203      	movs	r2, #3
 80177d0:	6939      	ldr	r1, [r7, #16]
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f000 fa9e 	bl	8017d14 <dhcp_create_msg>
 80177d8:	4603      	mov	r3, r0
 80177da:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80177dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d139      	bne.n	8017858 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80177e4:	2202      	movs	r2, #2
 80177e6:	2139      	movs	r1, #57	@ 0x39
 80177e8:	6938      	ldr	r0, [r7, #16]
 80177ea:	f000 f9a1 	bl	8017b30 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80177f2:	4619      	mov	r1, r3
 80177f4:	6938      	ldr	r0, [r7, #16]
 80177f6:	f000 f9fd 	bl	8017bf4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80177fa:	2203      	movs	r2, #3
 80177fc:	2137      	movs	r1, #55	@ 0x37
 80177fe:	6938      	ldr	r0, [r7, #16]
 8017800:	f000 f996 	bl	8017b30 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017804:	2300      	movs	r3, #0
 8017806:	75fb      	strb	r3, [r7, #23]
 8017808:	e009      	b.n	801781e <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801780a:	7dfb      	ldrb	r3, [r7, #23]
 801780c:	4a29      	ldr	r2, [pc, #164]	@ (80178b4 <dhcp_rebind+0xfc>)
 801780e:	5cd3      	ldrb	r3, [r2, r3]
 8017810:	4619      	mov	r1, r3
 8017812:	6938      	ldr	r0, [r7, #16]
 8017814:	f000 f9c6 	bl	8017ba4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017818:	7dfb      	ldrb	r3, [r7, #23]
 801781a:	3301      	adds	r3, #1
 801781c:	75fb      	strb	r3, [r7, #23]
 801781e:	7dfb      	ldrb	r3, [r7, #23]
 8017820:	2b02      	cmp	r3, #2
 8017822:	d9f2      	bls.n	801780a <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8017824:	6938      	ldr	r0, [r7, #16]
 8017826:	f000 fc19 	bl	801805c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	68da      	ldr	r2, [r3, #12]
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	8a9b      	ldrh	r3, [r3, #20]
 8017832:	33f0      	adds	r3, #240	@ 0xf0
 8017834:	b29b      	uxth	r3, r3
 8017836:	4619      	mov	r1, r3
 8017838:	4610      	mov	r0, r2
 801783a:	f7f9 f81b 	bl	8010874 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801783e:	4b1e      	ldr	r3, [pc, #120]	@ (80178b8 <dhcp_rebind+0x100>)
 8017840:	6818      	ldr	r0, [r3, #0]
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	68d9      	ldr	r1, [r3, #12]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	2343      	movs	r3, #67	@ 0x43
 801784c:	4a1b      	ldr	r2, [pc, #108]	@ (80178bc <dhcp_rebind+0x104>)
 801784e:	f7ff f91b 	bl	8016a88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8017852:	6938      	ldr	r0, [r7, #16]
 8017854:	f000 fbc0 	bl	8017fd8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017858:	693b      	ldr	r3, [r7, #16]
 801785a:	7a9b      	ldrb	r3, [r3, #10]
 801785c:	2bff      	cmp	r3, #255	@ 0xff
 801785e:	d005      	beq.n	801786c <dhcp_rebind+0xb4>
    dhcp->tries++;
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	7a9b      	ldrb	r3, [r3, #10]
 8017864:	3301      	adds	r3, #1
 8017866:	b2da      	uxtb	r2, r3
 8017868:	693b      	ldr	r3, [r7, #16]
 801786a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	7a9b      	ldrb	r3, [r3, #10]
 8017870:	2b09      	cmp	r3, #9
 8017872:	d809      	bhi.n	8017888 <dhcp_rebind+0xd0>
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	7a9b      	ldrb	r3, [r3, #10]
 8017878:	461a      	mov	r2, r3
 801787a:	0152      	lsls	r2, r2, #5
 801787c:	1ad2      	subs	r2, r2, r3
 801787e:	0092      	lsls	r2, r2, #2
 8017880:	4413      	add	r3, r2
 8017882:	00db      	lsls	r3, r3, #3
 8017884:	b29b      	uxth	r3, r3
 8017886:	e001      	b.n	801788c <dhcp_rebind+0xd4>
 8017888:	f242 7310 	movw	r3, #10000	@ 0x2710
 801788c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801788e:	89bb      	ldrh	r3, [r7, #12]
 8017890:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017894:	4a0a      	ldr	r2, [pc, #40]	@ (80178c0 <dhcp_rebind+0x108>)
 8017896:	fb82 1203 	smull	r1, r2, r2, r3
 801789a:	1152      	asrs	r2, r2, #5
 801789c:	17db      	asrs	r3, r3, #31
 801789e:	1ad3      	subs	r3, r2, r3
 80178a0:	b29a      	uxth	r2, r3
 80178a2:	693b      	ldr	r3, [r7, #16]
 80178a4:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80178a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3718      	adds	r7, #24
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	24000034 	.word	0x24000034
 80178b8:	2400771c 	.word	0x2400771c
 80178bc:	0801f3f4 	.word	0x0801f3f4
 80178c0:	10624dd3 	.word	0x10624dd3

080178c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b088      	sub	sp, #32
 80178c8:	af02      	add	r7, sp, #8
 80178ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178d0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80178d2:	2103      	movs	r1, #3
 80178d4:	6938      	ldr	r0, [r7, #16]
 80178d6:	f000 f911 	bl	8017afc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80178da:	2203      	movs	r2, #3
 80178dc:	6939      	ldr	r1, [r7, #16]
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f000 fa18 	bl	8017d14 <dhcp_create_msg>
 80178e4:	4603      	mov	r3, r0
 80178e6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80178e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d147      	bne.n	8017980 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80178f0:	2202      	movs	r2, #2
 80178f2:	2139      	movs	r1, #57	@ 0x39
 80178f4:	6938      	ldr	r0, [r7, #16]
 80178f6:	f000 f91b 	bl	8017b30 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80178fa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80178fe:	6938      	ldr	r0, [r7, #16]
 8017900:	f000 f978 	bl	8017bf4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8017904:	2204      	movs	r2, #4
 8017906:	2132      	movs	r1, #50	@ 0x32
 8017908:	6938      	ldr	r0, [r7, #16]
 801790a:	f000 f911 	bl	8017b30 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017912:	4618      	mov	r0, r3
 8017914:	f7f7 feb8 	bl	800f688 <lwip_htonl>
 8017918:	4603      	mov	r3, r0
 801791a:	4619      	mov	r1, r3
 801791c:	6938      	ldr	r0, [r7, #16]
 801791e:	f000 f9a3 	bl	8017c68 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017922:	2203      	movs	r2, #3
 8017924:	2137      	movs	r1, #55	@ 0x37
 8017926:	6938      	ldr	r0, [r7, #16]
 8017928:	f000 f902 	bl	8017b30 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801792c:	2300      	movs	r3, #0
 801792e:	75fb      	strb	r3, [r7, #23]
 8017930:	e009      	b.n	8017946 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8017932:	7dfb      	ldrb	r3, [r7, #23]
 8017934:	4a29      	ldr	r2, [pc, #164]	@ (80179dc <dhcp_reboot+0x118>)
 8017936:	5cd3      	ldrb	r3, [r2, r3]
 8017938:	4619      	mov	r1, r3
 801793a:	6938      	ldr	r0, [r7, #16]
 801793c:	f000 f932 	bl	8017ba4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017940:	7dfb      	ldrb	r3, [r7, #23]
 8017942:	3301      	adds	r3, #1
 8017944:	75fb      	strb	r3, [r7, #23]
 8017946:	7dfb      	ldrb	r3, [r7, #23]
 8017948:	2b02      	cmp	r3, #2
 801794a:	d9f2      	bls.n	8017932 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801794c:	6938      	ldr	r0, [r7, #16]
 801794e:	f000 fb85 	bl	801805c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	68da      	ldr	r2, [r3, #12]
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	8a9b      	ldrh	r3, [r3, #20]
 801795a:	33f0      	adds	r3, #240	@ 0xf0
 801795c:	b29b      	uxth	r3, r3
 801795e:	4619      	mov	r1, r3
 8017960:	4610      	mov	r0, r2
 8017962:	f7f8 ff87 	bl	8010874 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8017966:	4b1e      	ldr	r3, [pc, #120]	@ (80179e0 <dhcp_reboot+0x11c>)
 8017968:	6818      	ldr	r0, [r3, #0]
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	68d9      	ldr	r1, [r3, #12]
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	2343      	movs	r3, #67	@ 0x43
 8017974:	4a1b      	ldr	r2, [pc, #108]	@ (80179e4 <dhcp_reboot+0x120>)
 8017976:	f7ff f887 	bl	8016a88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801797a:	6938      	ldr	r0, [r7, #16]
 801797c:	f000 fb2c 	bl	8017fd8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	7a9b      	ldrb	r3, [r3, #10]
 8017984:	2bff      	cmp	r3, #255	@ 0xff
 8017986:	d005      	beq.n	8017994 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	7a9b      	ldrb	r3, [r3, #10]
 801798c:	3301      	adds	r3, #1
 801798e:	b2da      	uxtb	r2, r3
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	7a9b      	ldrb	r3, [r3, #10]
 8017998:	2b09      	cmp	r3, #9
 801799a:	d809      	bhi.n	80179b0 <dhcp_reboot+0xec>
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	7a9b      	ldrb	r3, [r3, #10]
 80179a0:	461a      	mov	r2, r3
 80179a2:	0152      	lsls	r2, r2, #5
 80179a4:	1ad2      	subs	r2, r2, r3
 80179a6:	0092      	lsls	r2, r2, #2
 80179a8:	4413      	add	r3, r2
 80179aa:	00db      	lsls	r3, r3, #3
 80179ac:	b29b      	uxth	r3, r3
 80179ae:	e001      	b.n	80179b4 <dhcp_reboot+0xf0>
 80179b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80179b4:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80179b6:	89bb      	ldrh	r3, [r7, #12]
 80179b8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80179bc:	4a0a      	ldr	r2, [pc, #40]	@ (80179e8 <dhcp_reboot+0x124>)
 80179be:	fb82 1203 	smull	r1, r2, r2, r3
 80179c2:	1152      	asrs	r2, r2, #5
 80179c4:	17db      	asrs	r3, r3, #31
 80179c6:	1ad3      	subs	r3, r2, r3
 80179c8:	b29a      	uxth	r2, r3
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80179ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3718      	adds	r7, #24
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	24000034 	.word	0x24000034
 80179e0:	2400771c 	.word	0x2400771c
 80179e4:	0801f3f4 	.word	0x0801f3f4
 80179e8:	10624dd3 	.word	0x10624dd3

080179ec <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b088      	sub	sp, #32
 80179f0:	af02      	add	r7, sp, #8
 80179f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179f8:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d102      	bne.n	8017a06 <dhcp_release+0x1a>
    return ERR_ARG;
 8017a00:	f06f 030f 	mvn.w	r3, #15
 8017a04:	e072      	b.n	8017aec <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a0a:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f000 fb7f 	bl	8018110 <dhcp_supplied_address>
 8017a12:	4603      	mov	r3, r0
 8017a14:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017a16:	2100      	movs	r1, #0
 8017a18:	6978      	ldr	r0, [r7, #20]
 8017a1a:	f000 f86f 	bl	8017afc <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	2200      	movs	r2, #0
 8017a22:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	2200      	movs	r2, #0
 8017a28:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	2200      	movs	r2, #0
 8017a34:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	2200      	movs	r2, #0
 8017a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8017a3c:	697b      	ldr	r3, [r7, #20]
 8017a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017a40:	697b      	ldr	r3, [r7, #20]
 8017a42:	639a      	str	r2, [r3, #56]	@ 0x38
 8017a44:	697b      	ldr	r3, [r7, #20]
 8017a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017a4c:	697b      	ldr	r3, [r7, #20]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	845a      	strh	r2, [r3, #34]	@ 0x22
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	841a      	strh	r2, [r3, #32]
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	8c1a      	ldrh	r2, [r3, #32]
 8017a5e:	697b      	ldr	r3, [r7, #20]
 8017a60:	83da      	strh	r2, [r3, #30]
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	8bda      	ldrh	r2, [r3, #30]
 8017a66:	697b      	ldr	r3, [r7, #20]
 8017a68:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8017a6a:	7cfb      	ldrb	r3, [r7, #19]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d101      	bne.n	8017a74 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8017a70:	2300      	movs	r3, #0
 8017a72:	e03b      	b.n	8017aec <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8017a74:	2207      	movs	r2, #7
 8017a76:	6979      	ldr	r1, [r7, #20]
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f000 f94b 	bl	8017d14 <dhcp_create_msg>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8017a82:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d128      	bne.n	8017adc <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8017a8a:	2204      	movs	r2, #4
 8017a8c:	2136      	movs	r1, #54	@ 0x36
 8017a8e:	6978      	ldr	r0, [r7, #20]
 8017a90:	f000 f84e 	bl	8017b30 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f7 fdf6 	bl	800f688 <lwip_htonl>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	6978      	ldr	r0, [r7, #20]
 8017aa2:	f000 f8e1 	bl	8017c68 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8017aa6:	6978      	ldr	r0, [r7, #20]
 8017aa8:	f000 fad8 	bl	801805c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	68da      	ldr	r2, [r3, #12]
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	8a9b      	ldrh	r3, [r3, #20]
 8017ab4:	33f0      	adds	r3, #240	@ 0xf0
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	4619      	mov	r1, r3
 8017aba:	4610      	mov	r0, r2
 8017abc:	f7f8 feda 	bl	8010874 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8017ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8017af4 <dhcp_release+0x108>)
 8017ac2:	6818      	ldr	r0, [r3, #0]
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	68d9      	ldr	r1, [r3, #12]
 8017ac8:	f107 020c 	add.w	r2, r7, #12
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	2343      	movs	r3, #67	@ 0x43
 8017ad2:	f7fe ffd9 	bl	8016a88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8017ad6:	6978      	ldr	r0, [r7, #20]
 8017ad8:	f000 fa7e 	bl	8017fd8 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017adc:	4b06      	ldr	r3, [pc, #24]	@ (8017af8 <dhcp_release+0x10c>)
 8017ade:	4a06      	ldr	r2, [pc, #24]	@ (8017af8 <dhcp_release+0x10c>)
 8017ae0:	4905      	ldr	r1, [pc, #20]	@ (8017af8 <dhcp_release+0x10c>)
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	f7f8 fad8 	bl	8010098 <netif_set_addr>

  return result;
 8017ae8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3718      	adds	r7, #24
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	2400771c 	.word	0x2400771c
 8017af8:	0801f3f0 	.word	0x0801f3f0

08017afc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017afc:	b480      	push	{r7}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	460b      	mov	r3, r1
 8017b06:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	7a5b      	ldrb	r3, [r3, #9]
 8017b0c:	78fa      	ldrb	r2, [r7, #3]
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	d008      	beq.n	8017b24 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	78fa      	ldrb	r2, [r7, #3]
 8017b16:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2200      	movs	r2, #0
 8017b22:	82da      	strh	r2, [r3, #22]
  }
}
 8017b24:	bf00      	nop
 8017b26:	370c      	adds	r7, #12
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	460b      	mov	r3, r1
 8017b3a:	70fb      	strb	r3, [r7, #3]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	8a9b      	ldrh	r3, [r3, #20]
 8017b44:	461a      	mov	r2, r3
 8017b46:	78bb      	ldrb	r3, [r7, #2]
 8017b48:	4413      	add	r3, r2
 8017b4a:	3302      	adds	r3, #2
 8017b4c:	2b44      	cmp	r3, #68	@ 0x44
 8017b4e:	d906      	bls.n	8017b5e <dhcp_option+0x2e>
 8017b50:	4b11      	ldr	r3, [pc, #68]	@ (8017b98 <dhcp_option+0x68>)
 8017b52:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8017b56:	4911      	ldr	r1, [pc, #68]	@ (8017b9c <dhcp_option+0x6c>)
 8017b58:	4811      	ldr	r0, [pc, #68]	@ (8017ba0 <dhcp_option+0x70>)
 8017b5a:	f003 f8a3 	bl	801aca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	691a      	ldr	r2, [r3, #16]
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	8a9b      	ldrh	r3, [r3, #20]
 8017b66:	1c59      	adds	r1, r3, #1
 8017b68:	b288      	uxth	r0, r1
 8017b6a:	6879      	ldr	r1, [r7, #4]
 8017b6c:	8288      	strh	r0, [r1, #20]
 8017b6e:	4413      	add	r3, r2
 8017b70:	78fa      	ldrb	r2, [r7, #3]
 8017b72:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	691a      	ldr	r2, [r3, #16]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	8a9b      	ldrh	r3, [r3, #20]
 8017b7e:	1c59      	adds	r1, r3, #1
 8017b80:	b288      	uxth	r0, r1
 8017b82:	6879      	ldr	r1, [r7, #4]
 8017b84:	8288      	strh	r0, [r1, #20]
 8017b86:	4413      	add	r3, r2
 8017b88:	78ba      	ldrb	r2, [r7, #2]
 8017b8a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 8017b8e:	bf00      	nop
 8017b90:	3708      	adds	r7, #8
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	0801e5a0 	.word	0x0801e5a0
 8017b9c:	0801e764 	.word	0x0801e764
 8017ba0:	0801e634 	.word	0x0801e634

08017ba4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	460b      	mov	r3, r1
 8017bae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	8a9b      	ldrh	r3, [r3, #20]
 8017bb4:	2b43      	cmp	r3, #67	@ 0x43
 8017bb6:	d906      	bls.n	8017bc6 <dhcp_option_byte+0x22>
 8017bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8017be8 <dhcp_option_byte+0x44>)
 8017bba:	f240 527b 	movw	r2, #1403	@ 0x57b
 8017bbe:	490b      	ldr	r1, [pc, #44]	@ (8017bec <dhcp_option_byte+0x48>)
 8017bc0:	480b      	ldr	r0, [pc, #44]	@ (8017bf0 <dhcp_option_byte+0x4c>)
 8017bc2:	f003 f86f 	bl	801aca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	691a      	ldr	r2, [r3, #16]
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	8a9b      	ldrh	r3, [r3, #20]
 8017bce:	1c59      	adds	r1, r3, #1
 8017bd0:	b288      	uxth	r0, r1
 8017bd2:	6879      	ldr	r1, [r7, #4]
 8017bd4:	8288      	strh	r0, [r1, #20]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	78fa      	ldrb	r2, [r7, #3]
 8017bda:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 8017bde:	bf00      	nop
 8017be0:	3708      	adds	r7, #8
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}
 8017be6:	bf00      	nop
 8017be8:	0801e5a0 	.word	0x0801e5a0
 8017bec:	0801e7ac 	.word	0x0801e7ac
 8017bf0:	0801e634 	.word	0x0801e634

08017bf4 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8017bf4:	b590      	push	{r4, r7, lr}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	8a9b      	ldrh	r3, [r3, #20]
 8017c04:	3302      	adds	r3, #2
 8017c06:	2b44      	cmp	r3, #68	@ 0x44
 8017c08:	d906      	bls.n	8017c18 <dhcp_option_short+0x24>
 8017c0a:	4b14      	ldr	r3, [pc, #80]	@ (8017c5c <dhcp_option_short+0x68>)
 8017c0c:	f240 5282 	movw	r2, #1410	@ 0x582
 8017c10:	4913      	ldr	r1, [pc, #76]	@ (8017c60 <dhcp_option_short+0x6c>)
 8017c12:	4814      	ldr	r0, [pc, #80]	@ (8017c64 <dhcp_option_short+0x70>)
 8017c14:	f003 f846 	bl	801aca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017c18:	887b      	ldrh	r3, [r7, #2]
 8017c1a:	0a1b      	lsrs	r3, r3, #8
 8017c1c:	b298      	uxth	r0, r3
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	691a      	ldr	r2, [r3, #16]
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	8a9b      	ldrh	r3, [r3, #20]
 8017c26:	1c59      	adds	r1, r3, #1
 8017c28:	b28c      	uxth	r4, r1
 8017c2a:	6879      	ldr	r1, [r7, #4]
 8017c2c:	828c      	strh	r4, [r1, #20]
 8017c2e:	b2c1      	uxtb	r1, r0
 8017c30:	4413      	add	r3, r2
 8017c32:	460a      	mov	r2, r1
 8017c34:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	691a      	ldr	r2, [r3, #16]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	8a9b      	ldrh	r3, [r3, #20]
 8017c40:	1c59      	adds	r1, r3, #1
 8017c42:	b288      	uxth	r0, r1
 8017c44:	6879      	ldr	r1, [r7, #4]
 8017c46:	8288      	strh	r0, [r1, #20]
 8017c48:	8879      	ldrh	r1, [r7, #2]
 8017c4a:	b2c9      	uxtb	r1, r1
 8017c4c:	4413      	add	r3, r2
 8017c4e:	460a      	mov	r2, r1
 8017c50:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 8017c54:	bf00      	nop
 8017c56:	370c      	adds	r7, #12
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd90      	pop	{r4, r7, pc}
 8017c5c:	0801e5a0 	.word	0x0801e5a0
 8017c60:	0801e7e8 	.word	0x0801e7e8
 8017c64:	0801e634 	.word	0x0801e634

08017c68 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8017c68:	b590      	push	{r4, r7, lr}
 8017c6a:	b083      	sub	sp, #12
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	8a9b      	ldrh	r3, [r3, #20]
 8017c76:	3304      	adds	r3, #4
 8017c78:	2b44      	cmp	r3, #68	@ 0x44
 8017c7a:	d906      	bls.n	8017c8a <dhcp_option_long+0x22>
 8017c7c:	4b22      	ldr	r3, [pc, #136]	@ (8017d08 <dhcp_option_long+0xa0>)
 8017c7e:	f240 528a 	movw	r2, #1418	@ 0x58a
 8017c82:	4922      	ldr	r1, [pc, #136]	@ (8017d0c <dhcp_option_long+0xa4>)
 8017c84:	4822      	ldr	r0, [pc, #136]	@ (8017d10 <dhcp_option_long+0xa8>)
 8017c86:	f003 f80d 	bl	801aca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	0e18      	lsrs	r0, r3, #24
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	691a      	ldr	r2, [r3, #16]
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	8a9b      	ldrh	r3, [r3, #20]
 8017c96:	1c59      	adds	r1, r3, #1
 8017c98:	b28c      	uxth	r4, r1
 8017c9a:	6879      	ldr	r1, [r7, #4]
 8017c9c:	828c      	strh	r4, [r1, #20]
 8017c9e:	b2c1      	uxtb	r1, r0
 8017ca0:	4413      	add	r3, r2
 8017ca2:	460a      	mov	r2, r1
 8017ca4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	0c18      	lsrs	r0, r3, #16
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	691a      	ldr	r2, [r3, #16]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	8a9b      	ldrh	r3, [r3, #20]
 8017cb4:	1c59      	adds	r1, r3, #1
 8017cb6:	b28c      	uxth	r4, r1
 8017cb8:	6879      	ldr	r1, [r7, #4]
 8017cba:	828c      	strh	r4, [r1, #20]
 8017cbc:	b2c1      	uxtb	r1, r0
 8017cbe:	4413      	add	r3, r2
 8017cc0:	460a      	mov	r2, r1
 8017cc2:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	0a18      	lsrs	r0, r3, #8
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	691a      	ldr	r2, [r3, #16]
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	8a9b      	ldrh	r3, [r3, #20]
 8017cd2:	1c59      	adds	r1, r3, #1
 8017cd4:	b28c      	uxth	r4, r1
 8017cd6:	6879      	ldr	r1, [r7, #4]
 8017cd8:	828c      	strh	r4, [r1, #20]
 8017cda:	b2c1      	uxtb	r1, r0
 8017cdc:	4413      	add	r3, r2
 8017cde:	460a      	mov	r2, r1
 8017ce0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	691a      	ldr	r2, [r3, #16]
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	8a9b      	ldrh	r3, [r3, #20]
 8017cec:	1c59      	adds	r1, r3, #1
 8017cee:	b288      	uxth	r0, r1
 8017cf0:	6879      	ldr	r1, [r7, #4]
 8017cf2:	8288      	strh	r0, [r1, #20]
 8017cf4:	6839      	ldr	r1, [r7, #0]
 8017cf6:	b2c9      	uxtb	r1, r1
 8017cf8:	4413      	add	r3, r2
 8017cfa:	460a      	mov	r2, r1
 8017cfc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 8017d00:	bf00      	nop
 8017d02:	370c      	adds	r7, #12
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd90      	pop	{r4, r7, pc}
 8017d08:	0801e5a0 	.word	0x0801e5a0
 8017d0c:	0801e82c 	.word	0x0801e82c
 8017d10:	0801e634 	.word	0x0801e634

08017d14 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8017d14:	b590      	push	{r4, r7, lr}
 8017d16:	b087      	sub	sp, #28
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	4613      	mov	r3, r2
 8017d20:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d109      	bne.n	8017d3c <dhcp_create_msg+0x28>
 8017d28:	4ba3      	ldr	r3, [pc, #652]	@ (8017fb8 <dhcp_create_msg+0x2a4>)
 8017d2a:	f240 721d 	movw	r2, #1821	@ 0x71d
 8017d2e:	49a3      	ldr	r1, [pc, #652]	@ (8017fbc <dhcp_create_msg+0x2a8>)
 8017d30:	48a3      	ldr	r0, [pc, #652]	@ (8017fc0 <dhcp_create_msg+0x2ac>)
 8017d32:	f002 ffb7 	bl	801aca4 <iprintf>
 8017d36:	f06f 030f 	mvn.w	r3, #15
 8017d3a:	e138      	b.n	8017fae <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d109      	bne.n	8017d56 <dhcp_create_msg+0x42>
 8017d42:	4b9d      	ldr	r3, [pc, #628]	@ (8017fb8 <dhcp_create_msg+0x2a4>)
 8017d44:	f240 721e 	movw	r2, #1822	@ 0x71e
 8017d48:	499e      	ldr	r1, [pc, #632]	@ (8017fc4 <dhcp_create_msg+0x2b0>)
 8017d4a:	489d      	ldr	r0, [pc, #628]	@ (8017fc0 <dhcp_create_msg+0x2ac>)
 8017d4c:	f002 ffaa 	bl	801aca4 <iprintf>
 8017d50:	f06f 0305 	mvn.w	r3, #5
 8017d54:	e12b      	b.n	8017fae <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	68db      	ldr	r3, [r3, #12]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d006      	beq.n	8017d6c <dhcp_create_msg+0x58>
 8017d5e:	4b96      	ldr	r3, [pc, #600]	@ (8017fb8 <dhcp_create_msg+0x2a4>)
 8017d60:	f240 721f 	movw	r2, #1823	@ 0x71f
 8017d64:	4998      	ldr	r1, [pc, #608]	@ (8017fc8 <dhcp_create_msg+0x2b4>)
 8017d66:	4896      	ldr	r0, [pc, #600]	@ (8017fc0 <dhcp_create_msg+0x2ac>)
 8017d68:	f002 ff9c 	bl	801aca4 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	691b      	ldr	r3, [r3, #16]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d006      	beq.n	8017d82 <dhcp_create_msg+0x6e>
 8017d74:	4b90      	ldr	r3, [pc, #576]	@ (8017fb8 <dhcp_create_msg+0x2a4>)
 8017d76:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 8017d7a:	4994      	ldr	r1, [pc, #592]	@ (8017fcc <dhcp_create_msg+0x2b8>)
 8017d7c:	4890      	ldr	r0, [pc, #576]	@ (8017fc0 <dhcp_create_msg+0x2ac>)
 8017d7e:	f002 ff91 	bl	801aca4 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017d82:	2200      	movs	r2, #0
 8017d84:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8017d88:	2000      	movs	r0, #0
 8017d8a:	f7f8 fb6f 	bl	801046c <pbuf_alloc>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	68bb      	ldr	r3, [r7, #8]
 8017d92:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	68db      	ldr	r3, [r3, #12]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d102      	bne.n	8017da2 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8017d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017da0:	e105      	b.n	8017fae <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017da2:	68bb      	ldr	r3, [r7, #8]
 8017da4:	68db      	ldr	r3, [r3, #12]
 8017da6:	895b      	ldrh	r3, [r3, #10]
 8017da8:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8017dac:	d206      	bcs.n	8017dbc <dhcp_create_msg+0xa8>
 8017dae:	4b82      	ldr	r3, [pc, #520]	@ (8017fb8 <dhcp_create_msg+0x2a4>)
 8017db0:	f240 7227 	movw	r2, #1831	@ 0x727
 8017db4:	4986      	ldr	r1, [pc, #536]	@ (8017fd0 <dhcp_create_msg+0x2bc>)
 8017db6:	4882      	ldr	r0, [pc, #520]	@ (8017fc0 <dhcp_create_msg+0x2ac>)
 8017db8:	f002 ff74 	bl	801aca4 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017dbc:	79fb      	ldrb	r3, [r7, #7]
 8017dbe:	2b03      	cmp	r3, #3
 8017dc0:	d103      	bne.n	8017dca <dhcp_create_msg+0xb6>
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	7a5b      	ldrb	r3, [r3, #9]
 8017dc6:	2b03      	cmp	r3, #3
 8017dc8:	d10d      	bne.n	8017de6 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017dca:	68bb      	ldr	r3, [r7, #8]
 8017dcc:	7a9b      	ldrb	r3, [r3, #10]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d105      	bne.n	8017dde <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017dd2:	f002 fe67 	bl	801aaa4 <rand>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	461a      	mov	r2, r3
 8017dda:	4b7e      	ldr	r3, [pc, #504]	@ (8017fd4 <dhcp_create_msg+0x2c0>)
 8017ddc:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017dde:	4b7d      	ldr	r3, [pc, #500]	@ (8017fd4 <dhcp_create_msg+0x2c0>)
 8017de0:	681a      	ldr	r2, [r3, #0]
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	68db      	ldr	r3, [r3, #12]
 8017dea:	685a      	ldr	r2, [r3, #4]
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	691b      	ldr	r3, [r3, #16]
 8017df4:	2201      	movs	r2, #1
 8017df6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	691b      	ldr	r3, [r3, #16]
 8017dfc:	2201      	movs	r2, #1
 8017dfe:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	691b      	ldr	r3, [r3, #16]
 8017e04:	68fa      	ldr	r2, [r7, #12]
 8017e06:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8017e0a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	691b      	ldr	r3, [r3, #16]
 8017e10:	2200      	movs	r2, #0
 8017e12:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	691c      	ldr	r4, [r3, #16]
 8017e1c:	4610      	mov	r0, r2
 8017e1e:	f7f7 fc33 	bl	800f688 <lwip_htonl>
 8017e22:	4603      	mov	r3, r0
 8017e24:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	691b      	ldr	r3, [r3, #16]
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	721a      	strb	r2, [r3, #8]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	691b      	ldr	r3, [r3, #16]
 8017e36:	2200      	movs	r2, #0
 8017e38:	729a      	strb	r2, [r3, #10]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	691b      	ldr	r3, [r3, #16]
 8017e42:	2200      	movs	r2, #0
 8017e44:	731a      	strb	r2, [r3, #12]
 8017e46:	2200      	movs	r2, #0
 8017e48:	735a      	strb	r2, [r3, #13]
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	739a      	strb	r2, [r3, #14]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017e52:	79fb      	ldrb	r3, [r7, #7]
 8017e54:	2b08      	cmp	r3, #8
 8017e56:	d010      	beq.n	8017e7a <dhcp_create_msg+0x166>
 8017e58:	79fb      	ldrb	r3, [r7, #7]
 8017e5a:	2b04      	cmp	r3, #4
 8017e5c:	d00d      	beq.n	8017e7a <dhcp_create_msg+0x166>
 8017e5e:	79fb      	ldrb	r3, [r7, #7]
 8017e60:	2b07      	cmp	r3, #7
 8017e62:	d00a      	beq.n	8017e7a <dhcp_create_msg+0x166>
 8017e64:	79fb      	ldrb	r3, [r7, #7]
 8017e66:	2b03      	cmp	r3, #3
 8017e68:	d10d      	bne.n	8017e86 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017e6e:	2b05      	cmp	r3, #5
 8017e70:	d003      	beq.n	8017e7a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	7a5b      	ldrb	r3, [r3, #9]
 8017e76:	2b04      	cmp	r3, #4
 8017e78:	d105      	bne.n	8017e86 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	1d1a      	adds	r2, r3, #4
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	691b      	ldr	r3, [r3, #16]
 8017e82:	6812      	ldr	r2, [r2, #0]
 8017e84:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8017e86:	68bb      	ldr	r3, [r7, #8]
 8017e88:	691b      	ldr	r3, [r3, #16]
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	741a      	strb	r2, [r3, #16]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	745a      	strb	r2, [r3, #17]
 8017e92:	2200      	movs	r2, #0
 8017e94:	749a      	strb	r2, [r3, #18]
 8017e96:	2200      	movs	r2, #0
 8017e98:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	691b      	ldr	r3, [r3, #16]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	751a      	strb	r2, [r3, #20]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	755a      	strb	r2, [r3, #21]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	759a      	strb	r2, [r3, #22]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	691b      	ldr	r3, [r3, #16]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	761a      	strb	r2, [r3, #24]
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	765a      	strb	r2, [r3, #25]
 8017eba:	2200      	movs	r2, #0
 8017ebc:	769a      	strb	r2, [r3, #26]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	82fb      	strh	r3, [r7, #22]
 8017ec6:	e019      	b.n	8017efc <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017ece:	461a      	mov	r2, r3
 8017ed0:	8afb      	ldrh	r3, [r7, #22]
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	d208      	bcs.n	8017ee8 <dhcp_create_msg+0x1d4>
 8017ed6:	8afb      	ldrh	r3, [r7, #22]
 8017ed8:	2b05      	cmp	r3, #5
 8017eda:	d805      	bhi.n	8017ee8 <dhcp_create_msg+0x1d4>
 8017edc:	8afb      	ldrh	r3, [r7, #22]
 8017ede:	68fa      	ldr	r2, [r7, #12]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	f893 1031 	ldrb.w	r1, [r3, #49]	@ 0x31
 8017ee6:	e000      	b.n	8017eea <dhcp_create_msg+0x1d6>
 8017ee8:	2100      	movs	r1, #0
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	691a      	ldr	r2, [r3, #16]
 8017eee:	8afb      	ldrh	r3, [r7, #22]
 8017ef0:	4413      	add	r3, r2
 8017ef2:	460a      	mov	r2, r1
 8017ef4:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8017ef6:	8afb      	ldrh	r3, [r7, #22]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	82fb      	strh	r3, [r7, #22]
 8017efc:	8afb      	ldrh	r3, [r7, #22]
 8017efe:	2b0f      	cmp	r3, #15
 8017f00:	d9e2      	bls.n	8017ec8 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8017f02:	2300      	movs	r3, #0
 8017f04:	82fb      	strh	r3, [r7, #22]
 8017f06:	e009      	b.n	8017f1c <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	691a      	ldr	r2, [r3, #16]
 8017f0c:	8afb      	ldrh	r3, [r7, #22]
 8017f0e:	4413      	add	r3, r2
 8017f10:	2200      	movs	r2, #0
 8017f12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8017f16:	8afb      	ldrh	r3, [r7, #22]
 8017f18:	3301      	adds	r3, #1
 8017f1a:	82fb      	strh	r3, [r7, #22]
 8017f1c:	8afb      	ldrh	r3, [r7, #22]
 8017f1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8017f20:	d9f2      	bls.n	8017f08 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8017f22:	2300      	movs	r3, #0
 8017f24:	82fb      	strh	r3, [r7, #22]
 8017f26:	e009      	b.n	8017f3c <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	691a      	ldr	r2, [r3, #16]
 8017f2c:	8afb      	ldrh	r3, [r7, #22]
 8017f2e:	4413      	add	r3, r2
 8017f30:	2200      	movs	r2, #0
 8017f32:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8017f36:	8afb      	ldrh	r3, [r7, #22]
 8017f38:	3301      	adds	r3, #1
 8017f3a:	82fb      	strh	r3, [r7, #22]
 8017f3c:	8afb      	ldrh	r3, [r7, #22]
 8017f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017f40:	d9f2      	bls.n	8017f28 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	691b      	ldr	r3, [r3, #16]
 8017f46:	2200      	movs	r2, #0
 8017f48:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017f4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8017f50:	2200      	movs	r2, #0
 8017f52:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8017f56:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8017f60:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8017f64:	2200      	movs	r2, #0
 8017f66:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017f6a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	2200      	movs	r2, #0
 8017f72:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017f74:	2300      	movs	r3, #0
 8017f76:	82fb      	strh	r3, [r7, #22]
 8017f78:	e00b      	b.n	8017f92 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	691a      	ldr	r2, [r3, #16]
 8017f7e:	8afb      	ldrh	r3, [r7, #22]
 8017f80:	8af9      	ldrh	r1, [r7, #22]
 8017f82:	b2c9      	uxtb	r1, r1
 8017f84:	4413      	add	r3, r2
 8017f86:	460a      	mov	r2, r1
 8017f88:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017f8c:	8afb      	ldrh	r3, [r7, #22]
 8017f8e:	3301      	adds	r3, #1
 8017f90:	82fb      	strh	r3, [r7, #22]
 8017f92:	8afb      	ldrh	r3, [r7, #22]
 8017f94:	2b43      	cmp	r3, #67	@ 0x43
 8017f96:	d9f0      	bls.n	8017f7a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017f98:	2201      	movs	r2, #1
 8017f9a:	2135      	movs	r1, #53	@ 0x35
 8017f9c:	68b8      	ldr	r0, [r7, #8]
 8017f9e:	f7ff fdc7 	bl	8017b30 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8017fa2:	79fb      	ldrb	r3, [r7, #7]
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	68b8      	ldr	r0, [r7, #8]
 8017fa8:	f7ff fdfc 	bl	8017ba4 <dhcp_option_byte>
  return ERR_OK;
 8017fac:	2300      	movs	r3, #0
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	371c      	adds	r7, #28
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	bd90      	pop	{r4, r7, pc}
 8017fb6:	bf00      	nop
 8017fb8:	0801e5a0 	.word	0x0801e5a0
 8017fbc:	0801e904 	.word	0x0801e904
 8017fc0:	0801e634 	.word	0x0801e634
 8017fc4:	0801e924 	.word	0x0801e924
 8017fc8:	0801e944 	.word	0x0801e944
 8017fcc:	0801e96c 	.word	0x0801e96c
 8017fd0:	0801e994 	.word	0x0801e994
 8017fd4:	24007720 	.word	0x24007720

08017fd8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d107      	bne.n	8017ff6 <dhcp_delete_msg+0x1e>
 8017fe6:	4b18      	ldr	r3, [pc, #96]	@ (8018048 <dhcp_delete_msg+0x70>)
 8017fe8:	f240 726d 	movw	r2, #1901	@ 0x76d
 8017fec:	4917      	ldr	r1, [pc, #92]	@ (801804c <dhcp_delete_msg+0x74>)
 8017fee:	4818      	ldr	r0, [pc, #96]	@ (8018050 <dhcp_delete_msg+0x78>)
 8017ff0:	f002 fe58 	bl	801aca4 <iprintf>
 8017ff4:	e024      	b.n	8018040 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	68db      	ldr	r3, [r3, #12]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d106      	bne.n	801800c <dhcp_delete_msg+0x34>
 8017ffe:	4b12      	ldr	r3, [pc, #72]	@ (8018048 <dhcp_delete_msg+0x70>)
 8018000:	f240 726e 	movw	r2, #1902	@ 0x76e
 8018004:	4913      	ldr	r1, [pc, #76]	@ (8018054 <dhcp_delete_msg+0x7c>)
 8018006:	4812      	ldr	r0, [pc, #72]	@ (8018050 <dhcp_delete_msg+0x78>)
 8018008:	f002 fe4c 	bl	801aca4 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	691b      	ldr	r3, [r3, #16]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d106      	bne.n	8018022 <dhcp_delete_msg+0x4a>
 8018014:	4b0c      	ldr	r3, [pc, #48]	@ (8018048 <dhcp_delete_msg+0x70>)
 8018016:	f240 726f 	movw	r2, #1903	@ 0x76f
 801801a:	490f      	ldr	r1, [pc, #60]	@ (8018058 <dhcp_delete_msg+0x80>)
 801801c:	480c      	ldr	r0, [pc, #48]	@ (8018050 <dhcp_delete_msg+0x78>)
 801801e:	f002 fe41 	bl	801aca4 <iprintf>
  if (dhcp->p_out != NULL) {
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	68db      	ldr	r3, [r3, #12]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d004      	beq.n	8018034 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	68db      	ldr	r3, [r3, #12]
 801802e:	4618      	mov	r0, r3
 8018030:	f7f8 fd94 	bl	8010b5c <pbuf_free>
  }
  dhcp->p_out = NULL;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2200      	movs	r2, #0
 8018038:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2200      	movs	r2, #0
 801803e:	611a      	str	r2, [r3, #16]
}
 8018040:	3708      	adds	r7, #8
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	0801e5a0 	.word	0x0801e5a0
 801804c:	0801e9d4 	.word	0x0801e9d4
 8018050:	0801e634 	.word	0x0801e634
 8018054:	0801e9f4 	.word	0x0801e9f4
 8018058:	0801ea1c 	.word	0x0801ea1c

0801805c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b082      	sub	sp, #8
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d107      	bne.n	801807a <dhcp_option_trailer+0x1e>
 801806a:	4b24      	ldr	r3, [pc, #144]	@ (80180fc <dhcp_option_trailer+0xa0>)
 801806c:	f240 7282 	movw	r2, #1922	@ 0x782
 8018070:	4923      	ldr	r1, [pc, #140]	@ (8018100 <dhcp_option_trailer+0xa4>)
 8018072:	4824      	ldr	r0, [pc, #144]	@ (8018104 <dhcp_option_trailer+0xa8>)
 8018074:	f002 fe16 	bl	801aca4 <iprintf>
 8018078:	e03c      	b.n	80180f4 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	691b      	ldr	r3, [r3, #16]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <dhcp_option_trailer+0x34>
 8018082:	4b1e      	ldr	r3, [pc, #120]	@ (80180fc <dhcp_option_trailer+0xa0>)
 8018084:	f240 7283 	movw	r2, #1923	@ 0x783
 8018088:	491f      	ldr	r1, [pc, #124]	@ (8018108 <dhcp_option_trailer+0xac>)
 801808a:	481e      	ldr	r0, [pc, #120]	@ (8018104 <dhcp_option_trailer+0xa8>)
 801808c:	f002 fe0a 	bl	801aca4 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	8a9b      	ldrh	r3, [r3, #20]
 8018094:	2b43      	cmp	r3, #67	@ 0x43
 8018096:	d906      	bls.n	80180a6 <dhcp_option_trailer+0x4a>
 8018098:	4b18      	ldr	r3, [pc, #96]	@ (80180fc <dhcp_option_trailer+0xa0>)
 801809a:	f240 7284 	movw	r2, #1924	@ 0x784
 801809e:	491b      	ldr	r1, [pc, #108]	@ (801810c <dhcp_option_trailer+0xb0>)
 80180a0:	4818      	ldr	r0, [pc, #96]	@ (8018104 <dhcp_option_trailer+0xa8>)
 80180a2:	f002 fdff 	bl	801aca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	691a      	ldr	r2, [r3, #16]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	8a9b      	ldrh	r3, [r3, #20]
 80180ae:	1c59      	adds	r1, r3, #1
 80180b0:	b288      	uxth	r0, r1
 80180b2:	6879      	ldr	r1, [r7, #4]
 80180b4:	8288      	strh	r0, [r1, #20]
 80180b6:	4413      	add	r3, r2
 80180b8:	22ff      	movs	r2, #255	@ 0xff
 80180ba:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80180be:	e00b      	b.n	80180d8 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	691a      	ldr	r2, [r3, #16]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	8a9b      	ldrh	r3, [r3, #20]
 80180c8:	1c59      	adds	r1, r3, #1
 80180ca:	b288      	uxth	r0, r1
 80180cc:	6879      	ldr	r1, [r7, #4]
 80180ce:	8288      	strh	r0, [r1, #20]
 80180d0:	4413      	add	r3, r2
 80180d2:	2200      	movs	r2, #0
 80180d4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	8a9b      	ldrh	r3, [r3, #20]
 80180dc:	2b43      	cmp	r3, #67	@ 0x43
 80180de:	d905      	bls.n	80180ec <dhcp_option_trailer+0x90>
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	8a9b      	ldrh	r3, [r3, #20]
 80180e4:	f003 0303 	and.w	r3, r3, #3
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d003      	beq.n	80180f4 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80180f0:	2b43      	cmp	r3, #67	@ 0x43
 80180f2:	d9e5      	bls.n	80180c0 <dhcp_option_trailer+0x64>
  }
}
 80180f4:	3708      	adds	r7, #8
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	0801e5a0 	.word	0x0801e5a0
 8018100:	0801ea44 	.word	0x0801ea44
 8018104:	0801e634 	.word	0x0801e634
 8018108:	0801ea68 	.word	0x0801ea68
 801810c:	0801ea94 	.word	0x0801ea94

08018110 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018110:	b480      	push	{r7}
 8018112:	b085      	sub	sp, #20
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d017      	beq.n	801814e <dhcp_supplied_address+0x3e>
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018122:	2b00      	cmp	r3, #0
 8018124:	d013      	beq.n	801814e <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801812a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	7a5b      	ldrb	r3, [r3, #9]
 8018130:	2b0a      	cmp	r3, #10
 8018132:	d007      	beq.n	8018144 <dhcp_supplied_address+0x34>
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	7a5b      	ldrb	r3, [r3, #9]
 8018138:	2b05      	cmp	r3, #5
 801813a:	d003      	beq.n	8018144 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018140:	2b04      	cmp	r3, #4
 8018142:	d101      	bne.n	8018148 <dhcp_supplied_address+0x38>
 8018144:	2301      	movs	r3, #1
 8018146:	e000      	b.n	801814a <dhcp_supplied_address+0x3a>
 8018148:	2300      	movs	r3, #0
 801814a:	b2db      	uxtb	r3, r3
 801814c:	e000      	b.n	8018150 <dhcp_supplied_address+0x40>
  }
  return 0;
 801814e:	2300      	movs	r3, #0
}
 8018150:	4618      	mov	r0, r3
 8018152:	3714      	adds	r7, #20
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr

0801815c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b082      	sub	sp, #8
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018164:	4915      	ldr	r1, [pc, #84]	@ (80181bc <etharp_free_entry+0x60>)
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	4613      	mov	r3, r2
 801816a:	005b      	lsls	r3, r3, #1
 801816c:	4413      	add	r3, r2
 801816e:	00db      	lsls	r3, r3, #3
 8018170:	440b      	add	r3, r1
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d013      	beq.n	80181a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018178:	4910      	ldr	r1, [pc, #64]	@ (80181bc <etharp_free_entry+0x60>)
 801817a:	687a      	ldr	r2, [r7, #4]
 801817c:	4613      	mov	r3, r2
 801817e:	005b      	lsls	r3, r3, #1
 8018180:	4413      	add	r3, r2
 8018182:	00db      	lsls	r3, r3, #3
 8018184:	440b      	add	r3, r1
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4618      	mov	r0, r3
 801818a:	f7f8 fce7 	bl	8010b5c <pbuf_free>
    arp_table[i].q = NULL;
 801818e:	490b      	ldr	r1, [pc, #44]	@ (80181bc <etharp_free_entry+0x60>)
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	4613      	mov	r3, r2
 8018194:	005b      	lsls	r3, r3, #1
 8018196:	4413      	add	r3, r2
 8018198:	00db      	lsls	r3, r3, #3
 801819a:	440b      	add	r3, r1
 801819c:	2200      	movs	r2, #0
 801819e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80181a0:	4906      	ldr	r1, [pc, #24]	@ (80181bc <etharp_free_entry+0x60>)
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	4613      	mov	r3, r2
 80181a6:	005b      	lsls	r3, r3, #1
 80181a8:	4413      	add	r3, r2
 80181aa:	00db      	lsls	r3, r3, #3
 80181ac:	440b      	add	r3, r1
 80181ae:	3314      	adds	r3, #20
 80181b0:	2200      	movs	r2, #0
 80181b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80181b4:	bf00      	nop
 80181b6:	3708      	adds	r7, #8
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	24007724 	.word	0x24007724

080181c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181c6:	2300      	movs	r3, #0
 80181c8:	71fb      	strb	r3, [r7, #7]
 80181ca:	e096      	b.n	80182fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80181cc:	79fa      	ldrb	r2, [r7, #7]
 80181ce:	494f      	ldr	r1, [pc, #316]	@ (801830c <etharp_tmr+0x14c>)
 80181d0:	4613      	mov	r3, r2
 80181d2:	005b      	lsls	r3, r3, #1
 80181d4:	4413      	add	r3, r2
 80181d6:	00db      	lsls	r3, r3, #3
 80181d8:	440b      	add	r3, r1
 80181da:	3314      	adds	r3, #20
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80181e0:	79bb      	ldrb	r3, [r7, #6]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	f000 8086 	beq.w	80182f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80181e8:	79fa      	ldrb	r2, [r7, #7]
 80181ea:	4948      	ldr	r1, [pc, #288]	@ (801830c <etharp_tmr+0x14c>)
 80181ec:	4613      	mov	r3, r2
 80181ee:	005b      	lsls	r3, r3, #1
 80181f0:	4413      	add	r3, r2
 80181f2:	00db      	lsls	r3, r3, #3
 80181f4:	440b      	add	r3, r1
 80181f6:	3312      	adds	r3, #18
 80181f8:	881b      	ldrh	r3, [r3, #0]
 80181fa:	3301      	adds	r3, #1
 80181fc:	b298      	uxth	r0, r3
 80181fe:	4943      	ldr	r1, [pc, #268]	@ (801830c <etharp_tmr+0x14c>)
 8018200:	4613      	mov	r3, r2
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	4413      	add	r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	440b      	add	r3, r1
 801820a:	3312      	adds	r3, #18
 801820c:	4602      	mov	r2, r0
 801820e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018210:	79fa      	ldrb	r2, [r7, #7]
 8018212:	493e      	ldr	r1, [pc, #248]	@ (801830c <etharp_tmr+0x14c>)
 8018214:	4613      	mov	r3, r2
 8018216:	005b      	lsls	r3, r3, #1
 8018218:	4413      	add	r3, r2
 801821a:	00db      	lsls	r3, r3, #3
 801821c:	440b      	add	r3, r1
 801821e:	3312      	adds	r3, #18
 8018220:	881b      	ldrh	r3, [r3, #0]
 8018222:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8018226:	d215      	bcs.n	8018254 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018228:	79fa      	ldrb	r2, [r7, #7]
 801822a:	4938      	ldr	r1, [pc, #224]	@ (801830c <etharp_tmr+0x14c>)
 801822c:	4613      	mov	r3, r2
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	4413      	add	r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	440b      	add	r3, r1
 8018236:	3314      	adds	r3, #20
 8018238:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801823a:	2b01      	cmp	r3, #1
 801823c:	d10f      	bne.n	801825e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801823e:	79fa      	ldrb	r2, [r7, #7]
 8018240:	4932      	ldr	r1, [pc, #200]	@ (801830c <etharp_tmr+0x14c>)
 8018242:	4613      	mov	r3, r2
 8018244:	005b      	lsls	r3, r3, #1
 8018246:	4413      	add	r3, r2
 8018248:	00db      	lsls	r3, r3, #3
 801824a:	440b      	add	r3, r1
 801824c:	3312      	adds	r3, #18
 801824e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018250:	2b04      	cmp	r3, #4
 8018252:	d904      	bls.n	801825e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018254:	79fb      	ldrb	r3, [r7, #7]
 8018256:	4618      	mov	r0, r3
 8018258:	f7ff ff80 	bl	801815c <etharp_free_entry>
 801825c:	e04a      	b.n	80182f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801825e:	79fa      	ldrb	r2, [r7, #7]
 8018260:	492a      	ldr	r1, [pc, #168]	@ (801830c <etharp_tmr+0x14c>)
 8018262:	4613      	mov	r3, r2
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	4413      	add	r3, r2
 8018268:	00db      	lsls	r3, r3, #3
 801826a:	440b      	add	r3, r1
 801826c:	3314      	adds	r3, #20
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	2b03      	cmp	r3, #3
 8018272:	d10a      	bne.n	801828a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018274:	79fa      	ldrb	r2, [r7, #7]
 8018276:	4925      	ldr	r1, [pc, #148]	@ (801830c <etharp_tmr+0x14c>)
 8018278:	4613      	mov	r3, r2
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	4413      	add	r3, r2
 801827e:	00db      	lsls	r3, r3, #3
 8018280:	440b      	add	r3, r1
 8018282:	3314      	adds	r3, #20
 8018284:	2204      	movs	r2, #4
 8018286:	701a      	strb	r2, [r3, #0]
 8018288:	e034      	b.n	80182f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801828a:	79fa      	ldrb	r2, [r7, #7]
 801828c:	491f      	ldr	r1, [pc, #124]	@ (801830c <etharp_tmr+0x14c>)
 801828e:	4613      	mov	r3, r2
 8018290:	005b      	lsls	r3, r3, #1
 8018292:	4413      	add	r3, r2
 8018294:	00db      	lsls	r3, r3, #3
 8018296:	440b      	add	r3, r1
 8018298:	3314      	adds	r3, #20
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	2b04      	cmp	r3, #4
 801829e:	d10a      	bne.n	80182b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80182a0:	79fa      	ldrb	r2, [r7, #7]
 80182a2:	491a      	ldr	r1, [pc, #104]	@ (801830c <etharp_tmr+0x14c>)
 80182a4:	4613      	mov	r3, r2
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	4413      	add	r3, r2
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	440b      	add	r3, r1
 80182ae:	3314      	adds	r3, #20
 80182b0:	2202      	movs	r2, #2
 80182b2:	701a      	strb	r2, [r3, #0]
 80182b4:	e01e      	b.n	80182f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182b6:	79fa      	ldrb	r2, [r7, #7]
 80182b8:	4914      	ldr	r1, [pc, #80]	@ (801830c <etharp_tmr+0x14c>)
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	3314      	adds	r3, #20
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d113      	bne.n	80182f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80182cc:	79fa      	ldrb	r2, [r7, #7]
 80182ce:	490f      	ldr	r1, [pc, #60]	@ (801830c <etharp_tmr+0x14c>)
 80182d0:	4613      	mov	r3, r2
 80182d2:	005b      	lsls	r3, r3, #1
 80182d4:	4413      	add	r3, r2
 80182d6:	00db      	lsls	r3, r3, #3
 80182d8:	440b      	add	r3, r1
 80182da:	3308      	adds	r3, #8
 80182dc:	6818      	ldr	r0, [r3, #0]
 80182de:	79fa      	ldrb	r2, [r7, #7]
 80182e0:	4613      	mov	r3, r2
 80182e2:	005b      	lsls	r3, r3, #1
 80182e4:	4413      	add	r3, r2
 80182e6:	00db      	lsls	r3, r3, #3
 80182e8:	4a08      	ldr	r2, [pc, #32]	@ (801830c <etharp_tmr+0x14c>)
 80182ea:	4413      	add	r3, r2
 80182ec:	3304      	adds	r3, #4
 80182ee:	4619      	mov	r1, r3
 80182f0:	f000 fe3c 	bl	8018f6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182f4:	79fb      	ldrb	r3, [r7, #7]
 80182f6:	3301      	adds	r3, #1
 80182f8:	71fb      	strb	r3, [r7, #7]
 80182fa:	79fb      	ldrb	r3, [r7, #7]
 80182fc:	2b09      	cmp	r3, #9
 80182fe:	f67f af65 	bls.w	80181cc <etharp_tmr+0xc>
      }
    }
  }
}
 8018302:	bf00      	nop
 8018304:	bf00      	nop
 8018306:	3708      	adds	r7, #8
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}
 801830c:	24007724 	.word	0x24007724

08018310 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b088      	sub	sp, #32
 8018314:	af00      	add	r7, sp, #0
 8018316:	60f8      	str	r0, [r7, #12]
 8018318:	460b      	mov	r3, r1
 801831a:	607a      	str	r2, [r7, #4]
 801831c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801831e:	230a      	movs	r3, #10
 8018320:	77fb      	strb	r3, [r7, #31]
 8018322:	230a      	movs	r3, #10
 8018324:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8018326:	230a      	movs	r3, #10
 8018328:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801832a:	2300      	movs	r3, #0
 801832c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801832e:	230a      	movs	r3, #10
 8018330:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018332:	2300      	movs	r3, #0
 8018334:	833b      	strh	r3, [r7, #24]
 8018336:	2300      	movs	r3, #0
 8018338:	82fb      	strh	r3, [r7, #22]
 801833a:	2300      	movs	r3, #0
 801833c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801833e:	2300      	movs	r3, #0
 8018340:	773b      	strb	r3, [r7, #28]
 8018342:	e093      	b.n	801846c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8018344:	7f3a      	ldrb	r2, [r7, #28]
 8018346:	4990      	ldr	r1, [pc, #576]	@ (8018588 <etharp_find_entry+0x278>)
 8018348:	4613      	mov	r3, r2
 801834a:	005b      	lsls	r3, r3, #1
 801834c:	4413      	add	r3, r2
 801834e:	00db      	lsls	r3, r3, #3
 8018350:	440b      	add	r3, r1
 8018352:	3314      	adds	r3, #20
 8018354:	781b      	ldrb	r3, [r3, #0]
 8018356:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018358:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801835c:	2b0a      	cmp	r3, #10
 801835e:	d105      	bne.n	801836c <etharp_find_entry+0x5c>
 8018360:	7cfb      	ldrb	r3, [r7, #19]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d102      	bne.n	801836c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8018366:	7f3b      	ldrb	r3, [r7, #28]
 8018368:	777b      	strb	r3, [r7, #29]
 801836a:	e07c      	b.n	8018466 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801836c:	7cfb      	ldrb	r3, [r7, #19]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d079      	beq.n	8018466 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018372:	7cfb      	ldrb	r3, [r7, #19]
 8018374:	2b01      	cmp	r3, #1
 8018376:	d009      	beq.n	801838c <etharp_find_entry+0x7c>
 8018378:	7cfb      	ldrb	r3, [r7, #19]
 801837a:	2b01      	cmp	r3, #1
 801837c:	d806      	bhi.n	801838c <etharp_find_entry+0x7c>
 801837e:	4b83      	ldr	r3, [pc, #524]	@ (801858c <etharp_find_entry+0x27c>)
 8018380:	f240 1225 	movw	r2, #293	@ 0x125
 8018384:	4982      	ldr	r1, [pc, #520]	@ (8018590 <etharp_find_entry+0x280>)
 8018386:	4883      	ldr	r0, [pc, #524]	@ (8018594 <etharp_find_entry+0x284>)
 8018388:	f002 fc8c 	bl	801aca4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d00f      	beq.n	80183b2 <etharp_find_entry+0xa2>
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	6819      	ldr	r1, [r3, #0]
 8018396:	7f3a      	ldrb	r2, [r7, #28]
 8018398:	487b      	ldr	r0, [pc, #492]	@ (8018588 <etharp_find_entry+0x278>)
 801839a:	4613      	mov	r3, r2
 801839c:	005b      	lsls	r3, r3, #1
 801839e:	4413      	add	r3, r2
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	4403      	add	r3, r0
 80183a4:	3304      	adds	r3, #4
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4299      	cmp	r1, r3
 80183aa:	d102      	bne.n	80183b2 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80183ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80183b0:	e0e5      	b.n	801857e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80183b2:	7cfb      	ldrb	r3, [r7, #19]
 80183b4:	2b01      	cmp	r3, #1
 80183b6:	d13b      	bne.n	8018430 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80183b8:	7f3a      	ldrb	r2, [r7, #28]
 80183ba:	4973      	ldr	r1, [pc, #460]	@ (8018588 <etharp_find_entry+0x278>)
 80183bc:	4613      	mov	r3, r2
 80183be:	005b      	lsls	r3, r3, #1
 80183c0:	4413      	add	r3, r2
 80183c2:	00db      	lsls	r3, r3, #3
 80183c4:	440b      	add	r3, r1
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d018      	beq.n	80183fe <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80183cc:	7f3a      	ldrb	r2, [r7, #28]
 80183ce:	496e      	ldr	r1, [pc, #440]	@ (8018588 <etharp_find_entry+0x278>)
 80183d0:	4613      	mov	r3, r2
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	4413      	add	r3, r2
 80183d6:	00db      	lsls	r3, r3, #3
 80183d8:	440b      	add	r3, r1
 80183da:	3312      	adds	r3, #18
 80183dc:	881b      	ldrh	r3, [r3, #0]
 80183de:	8b3a      	ldrh	r2, [r7, #24]
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d840      	bhi.n	8018466 <etharp_find_entry+0x156>
            old_queue = i;
 80183e4:	7f3b      	ldrb	r3, [r7, #28]
 80183e6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80183e8:	7f3a      	ldrb	r2, [r7, #28]
 80183ea:	4967      	ldr	r1, [pc, #412]	@ (8018588 <etharp_find_entry+0x278>)
 80183ec:	4613      	mov	r3, r2
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	4413      	add	r3, r2
 80183f2:	00db      	lsls	r3, r3, #3
 80183f4:	440b      	add	r3, r1
 80183f6:	3312      	adds	r3, #18
 80183f8:	881b      	ldrh	r3, [r3, #0]
 80183fa:	833b      	strh	r3, [r7, #24]
 80183fc:	e033      	b.n	8018466 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80183fe:	7f3a      	ldrb	r2, [r7, #28]
 8018400:	4961      	ldr	r1, [pc, #388]	@ (8018588 <etharp_find_entry+0x278>)
 8018402:	4613      	mov	r3, r2
 8018404:	005b      	lsls	r3, r3, #1
 8018406:	4413      	add	r3, r2
 8018408:	00db      	lsls	r3, r3, #3
 801840a:	440b      	add	r3, r1
 801840c:	3312      	adds	r3, #18
 801840e:	881b      	ldrh	r3, [r3, #0]
 8018410:	8afa      	ldrh	r2, [r7, #22]
 8018412:	429a      	cmp	r2, r3
 8018414:	d827      	bhi.n	8018466 <etharp_find_entry+0x156>
            old_pending = i;
 8018416:	7f3b      	ldrb	r3, [r7, #28]
 8018418:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801841a:	7f3a      	ldrb	r2, [r7, #28]
 801841c:	495a      	ldr	r1, [pc, #360]	@ (8018588 <etharp_find_entry+0x278>)
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	440b      	add	r3, r1
 8018428:	3312      	adds	r3, #18
 801842a:	881b      	ldrh	r3, [r3, #0]
 801842c:	82fb      	strh	r3, [r7, #22]
 801842e:	e01a      	b.n	8018466 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018430:	7cfb      	ldrb	r3, [r7, #19]
 8018432:	2b01      	cmp	r3, #1
 8018434:	d917      	bls.n	8018466 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018436:	7f3a      	ldrb	r2, [r7, #28]
 8018438:	4953      	ldr	r1, [pc, #332]	@ (8018588 <etharp_find_entry+0x278>)
 801843a:	4613      	mov	r3, r2
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	4413      	add	r3, r2
 8018440:	00db      	lsls	r3, r3, #3
 8018442:	440b      	add	r3, r1
 8018444:	3312      	adds	r3, #18
 8018446:	881b      	ldrh	r3, [r3, #0]
 8018448:	8aba      	ldrh	r2, [r7, #20]
 801844a:	429a      	cmp	r2, r3
 801844c:	d80b      	bhi.n	8018466 <etharp_find_entry+0x156>
            old_stable = i;
 801844e:	7f3b      	ldrb	r3, [r7, #28]
 8018450:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8018452:	7f3a      	ldrb	r2, [r7, #28]
 8018454:	494c      	ldr	r1, [pc, #304]	@ (8018588 <etharp_find_entry+0x278>)
 8018456:	4613      	mov	r3, r2
 8018458:	005b      	lsls	r3, r3, #1
 801845a:	4413      	add	r3, r2
 801845c:	00db      	lsls	r3, r3, #3
 801845e:	440b      	add	r3, r1
 8018460:	3312      	adds	r3, #18
 8018462:	881b      	ldrh	r3, [r3, #0]
 8018464:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018466:	7f3b      	ldrb	r3, [r7, #28]
 8018468:	3301      	adds	r3, #1
 801846a:	773b      	strb	r3, [r7, #28]
 801846c:	7f3b      	ldrb	r3, [r7, #28]
 801846e:	2b09      	cmp	r3, #9
 8018470:	f67f af68 	bls.w	8018344 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018474:	7afb      	ldrb	r3, [r7, #11]
 8018476:	f003 0302 	and.w	r3, r3, #2
 801847a:	2b00      	cmp	r3, #0
 801847c:	d108      	bne.n	8018490 <etharp_find_entry+0x180>
 801847e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018482:	2b0a      	cmp	r3, #10
 8018484:	d107      	bne.n	8018496 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018486:	7afb      	ldrb	r3, [r7, #11]
 8018488:	f003 0301 	and.w	r3, r3, #1
 801848c:	2b00      	cmp	r3, #0
 801848e:	d102      	bne.n	8018496 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8018490:	f04f 33ff 	mov.w	r3, #4294967295
 8018494:	e073      	b.n	801857e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018496:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801849a:	2b09      	cmp	r3, #9
 801849c:	dc02      	bgt.n	80184a4 <etharp_find_entry+0x194>
    i = empty;
 801849e:	7f7b      	ldrb	r3, [r7, #29]
 80184a0:	773b      	strb	r3, [r7, #28]
 80184a2:	e036      	b.n	8018512 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80184a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80184a8:	2b09      	cmp	r3, #9
 80184aa:	dc13      	bgt.n	80184d4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80184ac:	7fbb      	ldrb	r3, [r7, #30]
 80184ae:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80184b0:	7f3a      	ldrb	r2, [r7, #28]
 80184b2:	4935      	ldr	r1, [pc, #212]	@ (8018588 <etharp_find_entry+0x278>)
 80184b4:	4613      	mov	r3, r2
 80184b6:	005b      	lsls	r3, r3, #1
 80184b8:	4413      	add	r3, r2
 80184ba:	00db      	lsls	r3, r3, #3
 80184bc:	440b      	add	r3, r1
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d018      	beq.n	80184f6 <etharp_find_entry+0x1e6>
 80184c4:	4b31      	ldr	r3, [pc, #196]	@ (801858c <etharp_find_entry+0x27c>)
 80184c6:	f240 126f 	movw	r2, #367	@ 0x16f
 80184ca:	4933      	ldr	r1, [pc, #204]	@ (8018598 <etharp_find_entry+0x288>)
 80184cc:	4831      	ldr	r0, [pc, #196]	@ (8018594 <etharp_find_entry+0x284>)
 80184ce:	f002 fbe9 	bl	801aca4 <iprintf>
 80184d2:	e010      	b.n	80184f6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80184d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80184d8:	2b09      	cmp	r3, #9
 80184da:	dc02      	bgt.n	80184e2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80184dc:	7ffb      	ldrb	r3, [r7, #31]
 80184de:	773b      	strb	r3, [r7, #28]
 80184e0:	e009      	b.n	80184f6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80184e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80184e6:	2b09      	cmp	r3, #9
 80184e8:	dc02      	bgt.n	80184f0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80184ea:	7efb      	ldrb	r3, [r7, #27]
 80184ec:	773b      	strb	r3, [r7, #28]
 80184ee:	e002      	b.n	80184f6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80184f0:	f04f 33ff 	mov.w	r3, #4294967295
 80184f4:	e043      	b.n	801857e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80184f6:	7f3b      	ldrb	r3, [r7, #28]
 80184f8:	2b09      	cmp	r3, #9
 80184fa:	d906      	bls.n	801850a <etharp_find_entry+0x1fa>
 80184fc:	4b23      	ldr	r3, [pc, #140]	@ (801858c <etharp_find_entry+0x27c>)
 80184fe:	f240 1281 	movw	r2, #385	@ 0x181
 8018502:	4926      	ldr	r1, [pc, #152]	@ (801859c <etharp_find_entry+0x28c>)
 8018504:	4823      	ldr	r0, [pc, #140]	@ (8018594 <etharp_find_entry+0x284>)
 8018506:	f002 fbcd 	bl	801aca4 <iprintf>
    etharp_free_entry(i);
 801850a:	7f3b      	ldrb	r3, [r7, #28]
 801850c:	4618      	mov	r0, r3
 801850e:	f7ff fe25 	bl	801815c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018512:	7f3b      	ldrb	r3, [r7, #28]
 8018514:	2b09      	cmp	r3, #9
 8018516:	d906      	bls.n	8018526 <etharp_find_entry+0x216>
 8018518:	4b1c      	ldr	r3, [pc, #112]	@ (801858c <etharp_find_entry+0x27c>)
 801851a:	f240 1285 	movw	r2, #389	@ 0x185
 801851e:	491f      	ldr	r1, [pc, #124]	@ (801859c <etharp_find_entry+0x28c>)
 8018520:	481c      	ldr	r0, [pc, #112]	@ (8018594 <etharp_find_entry+0x284>)
 8018522:	f002 fbbf 	bl	801aca4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018526:	7f3a      	ldrb	r2, [r7, #28]
 8018528:	4917      	ldr	r1, [pc, #92]	@ (8018588 <etharp_find_entry+0x278>)
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	00db      	lsls	r3, r3, #3
 8018532:	440b      	add	r3, r1
 8018534:	3314      	adds	r3, #20
 8018536:	781b      	ldrb	r3, [r3, #0]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d006      	beq.n	801854a <etharp_find_entry+0x23a>
 801853c:	4b13      	ldr	r3, [pc, #76]	@ (801858c <etharp_find_entry+0x27c>)
 801853e:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8018542:	4917      	ldr	r1, [pc, #92]	@ (80185a0 <etharp_find_entry+0x290>)
 8018544:	4813      	ldr	r0, [pc, #76]	@ (8018594 <etharp_find_entry+0x284>)
 8018546:	f002 fbad 	bl	801aca4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d00a      	beq.n	8018566 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018550:	7f3a      	ldrb	r2, [r7, #28]
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	6819      	ldr	r1, [r3, #0]
 8018556:	480c      	ldr	r0, [pc, #48]	@ (8018588 <etharp_find_entry+0x278>)
 8018558:	4613      	mov	r3, r2
 801855a:	005b      	lsls	r3, r3, #1
 801855c:	4413      	add	r3, r2
 801855e:	00db      	lsls	r3, r3, #3
 8018560:	4403      	add	r3, r0
 8018562:	3304      	adds	r3, #4
 8018564:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018566:	7f3a      	ldrb	r2, [r7, #28]
 8018568:	4907      	ldr	r1, [pc, #28]	@ (8018588 <etharp_find_entry+0x278>)
 801856a:	4613      	mov	r3, r2
 801856c:	005b      	lsls	r3, r3, #1
 801856e:	4413      	add	r3, r2
 8018570:	00db      	lsls	r3, r3, #3
 8018572:	440b      	add	r3, r1
 8018574:	3312      	adds	r3, #18
 8018576:	2200      	movs	r2, #0
 8018578:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801857a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801857e:	4618      	mov	r0, r3
 8018580:	3720      	adds	r7, #32
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	24007724 	.word	0x24007724
 801858c:	0801ead4 	.word	0x0801ead4
 8018590:	0801eb40 	.word	0x0801eb40
 8018594:	0801eb80 	.word	0x0801eb80
 8018598:	0801eba8 	.word	0x0801eba8
 801859c:	0801ebc0 	.word	0x0801ebc0
 80185a0:	0801ebd4 	.word	0x0801ebd4

080185a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b088      	sub	sp, #32
 80185a8:	af02      	add	r7, sp, #8
 80185aa:	60f8      	str	r0, [r7, #12]
 80185ac:	60b9      	str	r1, [r7, #8]
 80185ae:	607a      	str	r2, [r7, #4]
 80185b0:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80185b8:	2b06      	cmp	r3, #6
 80185ba:	d006      	beq.n	80185ca <etharp_update_arp_entry+0x26>
 80185bc:	4b48      	ldr	r3, [pc, #288]	@ (80186e0 <etharp_update_arp_entry+0x13c>)
 80185be:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80185c2:	4948      	ldr	r1, [pc, #288]	@ (80186e4 <etharp_update_arp_entry+0x140>)
 80185c4:	4848      	ldr	r0, [pc, #288]	@ (80186e8 <etharp_update_arp_entry+0x144>)
 80185c6:	f002 fb6d 	bl	801aca4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d012      	beq.n	80185f6 <etharp_update_arp_entry+0x52>
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d00e      	beq.n	80185f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	68f9      	ldr	r1, [r7, #12]
 80185de:	4618      	mov	r0, r3
 80185e0:	f001 f8fc 	bl	80197dc <ip4_addr_isbroadcast_u32>
 80185e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d105      	bne.n	80185f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80185ea:	68bb      	ldr	r3, [r7, #8]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185f2:	2be0      	cmp	r3, #224	@ 0xe0
 80185f4:	d102      	bne.n	80185fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185f6:	f06f 030f 	mvn.w	r3, #15
 80185fa:	e06c      	b.n	80186d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80185fc:	78fb      	ldrb	r3, [r7, #3]
 80185fe:	68fa      	ldr	r2, [r7, #12]
 8018600:	4619      	mov	r1, r3
 8018602:	68b8      	ldr	r0, [r7, #8]
 8018604:	f7ff fe84 	bl	8018310 <etharp_find_entry>
 8018608:	4603      	mov	r3, r0
 801860a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801860c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018610:	2b00      	cmp	r3, #0
 8018612:	da02      	bge.n	801861a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018618:	e05d      	b.n	80186d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801861a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801861e:	4933      	ldr	r1, [pc, #204]	@ (80186ec <etharp_update_arp_entry+0x148>)
 8018620:	4613      	mov	r3, r2
 8018622:	005b      	lsls	r3, r3, #1
 8018624:	4413      	add	r3, r2
 8018626:	00db      	lsls	r3, r3, #3
 8018628:	440b      	add	r3, r1
 801862a:	3314      	adds	r3, #20
 801862c:	2202      	movs	r2, #2
 801862e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018630:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018634:	492d      	ldr	r1, [pc, #180]	@ (80186ec <etharp_update_arp_entry+0x148>)
 8018636:	4613      	mov	r3, r2
 8018638:	005b      	lsls	r3, r3, #1
 801863a:	4413      	add	r3, r2
 801863c:	00db      	lsls	r3, r3, #3
 801863e:	440b      	add	r3, r1
 8018640:	3308      	adds	r3, #8
 8018642:	68fa      	ldr	r2, [r7, #12]
 8018644:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8018646:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801864a:	4613      	mov	r3, r2
 801864c:	005b      	lsls	r3, r3, #1
 801864e:	4413      	add	r3, r2
 8018650:	00db      	lsls	r3, r3, #3
 8018652:	3308      	adds	r3, #8
 8018654:	4a25      	ldr	r2, [pc, #148]	@ (80186ec <etharp_update_arp_entry+0x148>)
 8018656:	4413      	add	r3, r2
 8018658:	3304      	adds	r3, #4
 801865a:	2206      	movs	r2, #6
 801865c:	6879      	ldr	r1, [r7, #4]
 801865e:	4618      	mov	r0, r3
 8018660:	f002 fc61 	bl	801af26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018664:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018668:	4920      	ldr	r1, [pc, #128]	@ (80186ec <etharp_update_arp_entry+0x148>)
 801866a:	4613      	mov	r3, r2
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4413      	add	r3, r2
 8018670:	00db      	lsls	r3, r3, #3
 8018672:	440b      	add	r3, r1
 8018674:	3312      	adds	r3, #18
 8018676:	2200      	movs	r2, #0
 8018678:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801867a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801867e:	491b      	ldr	r1, [pc, #108]	@ (80186ec <etharp_update_arp_entry+0x148>)
 8018680:	4613      	mov	r3, r2
 8018682:	005b      	lsls	r3, r3, #1
 8018684:	4413      	add	r3, r2
 8018686:	00db      	lsls	r3, r3, #3
 8018688:	440b      	add	r3, r1
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d021      	beq.n	80186d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018690:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018694:	4915      	ldr	r1, [pc, #84]	@ (80186ec <etharp_update_arp_entry+0x148>)
 8018696:	4613      	mov	r3, r2
 8018698:	005b      	lsls	r3, r3, #1
 801869a:	4413      	add	r3, r2
 801869c:	00db      	lsls	r3, r3, #3
 801869e:	440b      	add	r3, r1
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80186a4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80186a8:	4910      	ldr	r1, [pc, #64]	@ (80186ec <etharp_update_arp_entry+0x148>)
 80186aa:	4613      	mov	r3, r2
 80186ac:	005b      	lsls	r3, r3, #1
 80186ae:	4413      	add	r3, r2
 80186b0:	00db      	lsls	r3, r3, #3
 80186b2:	440b      	add	r3, r1
 80186b4:	2200      	movs	r2, #0
 80186b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 80186be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6939      	ldr	r1, [r7, #16]
 80186c8:	68f8      	ldr	r0, [r7, #12]
 80186ca:	f001 ffab 	bl	801a624 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80186ce:	6938      	ldr	r0, [r7, #16]
 80186d0:	f7f8 fa44 	bl	8010b5c <pbuf_free>
  }
  return ERR_OK;
 80186d4:	2300      	movs	r3, #0
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3718      	adds	r7, #24
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	0801ead4 	.word	0x0801ead4
 80186e4:	0801ec00 	.word	0x0801ec00
 80186e8:	0801eb80 	.word	0x0801eb80
 80186ec:	24007724 	.word	0x24007724

080186f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186f8:	2300      	movs	r3, #0
 80186fa:	73fb      	strb	r3, [r7, #15]
 80186fc:	e01f      	b.n	801873e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80186fe:	7bfa      	ldrb	r2, [r7, #15]
 8018700:	4913      	ldr	r1, [pc, #76]	@ (8018750 <etharp_cleanup_netif+0x60>)
 8018702:	4613      	mov	r3, r2
 8018704:	005b      	lsls	r3, r3, #1
 8018706:	4413      	add	r3, r2
 8018708:	00db      	lsls	r3, r3, #3
 801870a:	440b      	add	r3, r1
 801870c:	3314      	adds	r3, #20
 801870e:	781b      	ldrb	r3, [r3, #0]
 8018710:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018712:	7bbb      	ldrb	r3, [r7, #14]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d00f      	beq.n	8018738 <etharp_cleanup_netif+0x48>
 8018718:	7bfa      	ldrb	r2, [r7, #15]
 801871a:	490d      	ldr	r1, [pc, #52]	@ (8018750 <etharp_cleanup_netif+0x60>)
 801871c:	4613      	mov	r3, r2
 801871e:	005b      	lsls	r3, r3, #1
 8018720:	4413      	add	r3, r2
 8018722:	00db      	lsls	r3, r3, #3
 8018724:	440b      	add	r3, r1
 8018726:	3308      	adds	r3, #8
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	687a      	ldr	r2, [r7, #4]
 801872c:	429a      	cmp	r2, r3
 801872e:	d103      	bne.n	8018738 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8018730:	7bfb      	ldrb	r3, [r7, #15]
 8018732:	4618      	mov	r0, r3
 8018734:	f7ff fd12 	bl	801815c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018738:	7bfb      	ldrb	r3, [r7, #15]
 801873a:	3301      	adds	r3, #1
 801873c:	73fb      	strb	r3, [r7, #15]
 801873e:	7bfb      	ldrb	r3, [r7, #15]
 8018740:	2b09      	cmp	r3, #9
 8018742:	d9dc      	bls.n	80186fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8018744:	bf00      	nop
 8018746:	bf00      	nop
 8018748:	3710      	adds	r7, #16
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}
 801874e:	bf00      	nop
 8018750:	24007724 	.word	0x24007724

08018754 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018754:	b5b0      	push	{r4, r5, r7, lr}
 8018756:	b08a      	sub	sp, #40	@ 0x28
 8018758:	af04      	add	r7, sp, #16
 801875a:	6078      	str	r0, [r7, #4]
 801875c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d107      	bne.n	8018774 <etharp_input+0x20>
 8018764:	4b3f      	ldr	r3, [pc, #252]	@ (8018864 <etharp_input+0x110>)
 8018766:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801876a:	493f      	ldr	r1, [pc, #252]	@ (8018868 <etharp_input+0x114>)
 801876c:	483f      	ldr	r0, [pc, #252]	@ (801886c <etharp_input+0x118>)
 801876e:	f002 fa99 	bl	801aca4 <iprintf>
 8018772:	e074      	b.n	801885e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	685b      	ldr	r3, [r3, #4]
 8018778:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	881b      	ldrh	r3, [r3, #0]
 801877e:	b29b      	uxth	r3, r3
 8018780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018784:	d10c      	bne.n	80187a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801878a:	2b06      	cmp	r3, #6
 801878c:	d108      	bne.n	80187a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018792:	2b04      	cmp	r3, #4
 8018794:	d104      	bne.n	80187a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	885b      	ldrh	r3, [r3, #2]
 801879a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801879c:	2b08      	cmp	r3, #8
 801879e:	d003      	beq.n	80187a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f7f8 f9db 	bl	8010b5c <pbuf_free>
    return;
 80187a6:	e05a      	b.n	801885e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80187a8:	693b      	ldr	r3, [r7, #16]
 80187aa:	330e      	adds	r3, #14
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	3318      	adds	r3, #24
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	3304      	adds	r3, #4
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d102      	bne.n	80187c8 <etharp_input+0x74>
    for_us = 0;
 80187c2:	2300      	movs	r3, #0
 80187c4:	75fb      	strb	r3, [r7, #23]
 80187c6:	e009      	b.n	80187dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80187c8:	68ba      	ldr	r2, [r7, #8]
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	3304      	adds	r3, #4
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	bf0c      	ite	eq
 80187d4:	2301      	moveq	r3, #1
 80187d6:	2300      	movne	r3, #0
 80187d8:	b2db      	uxtb	r3, r3
 80187da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	f103 0208 	add.w	r2, r3, #8
 80187e2:	7dfb      	ldrb	r3, [r7, #23]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d001      	beq.n	80187ec <etharp_input+0x98>
 80187e8:	2301      	movs	r3, #1
 80187ea:	e000      	b.n	80187ee <etharp_input+0x9a>
 80187ec:	2302      	movs	r3, #2
 80187ee:	f107 010c 	add.w	r1, r7, #12
 80187f2:	6838      	ldr	r0, [r7, #0]
 80187f4:	f7ff fed6 	bl	80185a4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	88db      	ldrh	r3, [r3, #6]
 80187fc:	b29b      	uxth	r3, r3
 80187fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018802:	d003      	beq.n	801880c <etharp_input+0xb8>
 8018804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018808:	d01e      	beq.n	8018848 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801880a:	e025      	b.n	8018858 <etharp_input+0x104>
    if (for_us) {
 801880c:	7dfb      	ldrb	r3, [r7, #23]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d021      	beq.n	8018856 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	f103 0031 	add.w	r0, r3, #49	@ 0x31
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	f103 0531 	add.w	r5, r3, #49	@ 0x31
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8018828:	693a      	ldr	r2, [r7, #16]
 801882a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801882c:	2102      	movs	r1, #2
 801882e:	9103      	str	r1, [sp, #12]
 8018830:	f107 010c 	add.w	r1, r7, #12
 8018834:	9102      	str	r1, [sp, #8]
 8018836:	9201      	str	r2, [sp, #4]
 8018838:	9300      	str	r3, [sp, #0]
 801883a:	462b      	mov	r3, r5
 801883c:	4622      	mov	r2, r4
 801883e:	4601      	mov	r1, r0
 8018840:	6838      	ldr	r0, [r7, #0]
 8018842:	f000 fae5 	bl	8018e10 <etharp_raw>
    break;
 8018846:	e006      	b.n	8018856 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8018848:	f107 030c 	add.w	r3, r7, #12
 801884c:	4619      	mov	r1, r3
 801884e:	6838      	ldr	r0, [r7, #0]
 8018850:	f7fe fd30 	bl	80172b4 <dhcp_arp_reply>
    break;
 8018854:	e000      	b.n	8018858 <etharp_input+0x104>
    break;
 8018856:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f7f8 f97f 	bl	8010b5c <pbuf_free>
}
 801885e:	3718      	adds	r7, #24
 8018860:	46bd      	mov	sp, r7
 8018862:	bdb0      	pop	{r4, r5, r7, pc}
 8018864:	0801ead4 	.word	0x0801ead4
 8018868:	0801ec58 	.word	0x0801ec58
 801886c:	0801eb80 	.word	0x0801eb80

08018870 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b086      	sub	sp, #24
 8018874:	af02      	add	r7, sp, #8
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	4613      	mov	r3, r2
 801887c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801887e:	79fa      	ldrb	r2, [r7, #7]
 8018880:	4944      	ldr	r1, [pc, #272]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 8018882:	4613      	mov	r3, r2
 8018884:	005b      	lsls	r3, r3, #1
 8018886:	4413      	add	r3, r2
 8018888:	00db      	lsls	r3, r3, #3
 801888a:	440b      	add	r3, r1
 801888c:	3314      	adds	r3, #20
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	2b01      	cmp	r3, #1
 8018892:	d806      	bhi.n	80188a2 <etharp_output_to_arp_index+0x32>
 8018894:	4b40      	ldr	r3, [pc, #256]	@ (8018998 <etharp_output_to_arp_index+0x128>)
 8018896:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801889a:	4940      	ldr	r1, [pc, #256]	@ (801899c <etharp_output_to_arp_index+0x12c>)
 801889c:	4840      	ldr	r0, [pc, #256]	@ (80189a0 <etharp_output_to_arp_index+0x130>)
 801889e:	f002 fa01 	bl	801aca4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80188a2:	79fa      	ldrb	r2, [r7, #7]
 80188a4:	493b      	ldr	r1, [pc, #236]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 80188a6:	4613      	mov	r3, r2
 80188a8:	005b      	lsls	r3, r3, #1
 80188aa:	4413      	add	r3, r2
 80188ac:	00db      	lsls	r3, r3, #3
 80188ae:	440b      	add	r3, r1
 80188b0:	3314      	adds	r3, #20
 80188b2:	781b      	ldrb	r3, [r3, #0]
 80188b4:	2b02      	cmp	r3, #2
 80188b6:	d153      	bne.n	8018960 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80188b8:	79fa      	ldrb	r2, [r7, #7]
 80188ba:	4936      	ldr	r1, [pc, #216]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 80188bc:	4613      	mov	r3, r2
 80188be:	005b      	lsls	r3, r3, #1
 80188c0:	4413      	add	r3, r2
 80188c2:	00db      	lsls	r3, r3, #3
 80188c4:	440b      	add	r3, r1
 80188c6:	3312      	adds	r3, #18
 80188c8:	881b      	ldrh	r3, [r3, #0]
 80188ca:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80188ce:	d919      	bls.n	8018904 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80188d0:	79fa      	ldrb	r2, [r7, #7]
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	4a2e      	ldr	r2, [pc, #184]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 80188dc:	4413      	add	r3, r2
 80188de:	3304      	adds	r3, #4
 80188e0:	4619      	mov	r1, r3
 80188e2:	68f8      	ldr	r0, [r7, #12]
 80188e4:	f000 fb42 	bl	8018f6c <etharp_request>
 80188e8:	4603      	mov	r3, r0
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d138      	bne.n	8018960 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188ee:	79fa      	ldrb	r2, [r7, #7]
 80188f0:	4928      	ldr	r1, [pc, #160]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 80188f2:	4613      	mov	r3, r2
 80188f4:	005b      	lsls	r3, r3, #1
 80188f6:	4413      	add	r3, r2
 80188f8:	00db      	lsls	r3, r3, #3
 80188fa:	440b      	add	r3, r1
 80188fc:	3314      	adds	r3, #20
 80188fe:	2203      	movs	r2, #3
 8018900:	701a      	strb	r2, [r3, #0]
 8018902:	e02d      	b.n	8018960 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018904:	79fa      	ldrb	r2, [r7, #7]
 8018906:	4923      	ldr	r1, [pc, #140]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 8018908:	4613      	mov	r3, r2
 801890a:	005b      	lsls	r3, r3, #1
 801890c:	4413      	add	r3, r2
 801890e:	00db      	lsls	r3, r3, #3
 8018910:	440b      	add	r3, r1
 8018912:	3312      	adds	r3, #18
 8018914:	881b      	ldrh	r3, [r3, #0]
 8018916:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801891a:	d321      	bcc.n	8018960 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801891c:	79fa      	ldrb	r2, [r7, #7]
 801891e:	4613      	mov	r3, r2
 8018920:	005b      	lsls	r3, r3, #1
 8018922:	4413      	add	r3, r2
 8018924:	00db      	lsls	r3, r3, #3
 8018926:	4a1b      	ldr	r2, [pc, #108]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 8018928:	4413      	add	r3, r2
 801892a:	1d19      	adds	r1, r3, #4
 801892c:	79fa      	ldrb	r2, [r7, #7]
 801892e:	4613      	mov	r3, r2
 8018930:	005b      	lsls	r3, r3, #1
 8018932:	4413      	add	r3, r2
 8018934:	00db      	lsls	r3, r3, #3
 8018936:	3308      	adds	r3, #8
 8018938:	4a16      	ldr	r2, [pc, #88]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 801893a:	4413      	add	r3, r2
 801893c:	3304      	adds	r3, #4
 801893e:	461a      	mov	r2, r3
 8018940:	68f8      	ldr	r0, [r7, #12]
 8018942:	f000 faf1 	bl	8018f28 <etharp_request_dst>
 8018946:	4603      	mov	r3, r0
 8018948:	2b00      	cmp	r3, #0
 801894a:	d109      	bne.n	8018960 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801894c:	79fa      	ldrb	r2, [r7, #7]
 801894e:	4911      	ldr	r1, [pc, #68]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 8018950:	4613      	mov	r3, r2
 8018952:	005b      	lsls	r3, r3, #1
 8018954:	4413      	add	r3, r2
 8018956:	00db      	lsls	r3, r3, #3
 8018958:	440b      	add	r3, r1
 801895a:	3314      	adds	r3, #20
 801895c:	2203      	movs	r2, #3
 801895e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	f103 0131 	add.w	r1, r3, #49	@ 0x31
 8018966:	79fa      	ldrb	r2, [r7, #7]
 8018968:	4613      	mov	r3, r2
 801896a:	005b      	lsls	r3, r3, #1
 801896c:	4413      	add	r3, r2
 801896e:	00db      	lsls	r3, r3, #3
 8018970:	3308      	adds	r3, #8
 8018972:	4a08      	ldr	r2, [pc, #32]	@ (8018994 <etharp_output_to_arp_index+0x124>)
 8018974:	4413      	add	r3, r2
 8018976:	3304      	adds	r3, #4
 8018978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801897c:	9200      	str	r2, [sp, #0]
 801897e:	460a      	mov	r2, r1
 8018980:	68b9      	ldr	r1, [r7, #8]
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f001 fe4e 	bl	801a624 <ethernet_output>
 8018988:	4603      	mov	r3, r0
}
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	24007724 	.word	0x24007724
 8018998:	0801ead4 	.word	0x0801ead4
 801899c:	0801ec78 	.word	0x0801ec78
 80189a0:	0801eb80 	.word	0x0801eb80

080189a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b08a      	sub	sp, #40	@ 0x28
 80189a8:	af02      	add	r7, sp, #8
 80189aa:	60f8      	str	r0, [r7, #12]
 80189ac:	60b9      	str	r1, [r7, #8]
 80189ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d106      	bne.n	80189c8 <etharp_output+0x24>
 80189ba:	4b69      	ldr	r3, [pc, #420]	@ (8018b60 <etharp_output+0x1bc>)
 80189bc:	f240 321b 	movw	r2, #795	@ 0x31b
 80189c0:	4968      	ldr	r1, [pc, #416]	@ (8018b64 <etharp_output+0x1c0>)
 80189c2:	4869      	ldr	r0, [pc, #420]	@ (8018b68 <etharp_output+0x1c4>)
 80189c4:	f002 f96e 	bl	801aca4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d106      	bne.n	80189dc <etharp_output+0x38>
 80189ce:	4b64      	ldr	r3, [pc, #400]	@ (8018b60 <etharp_output+0x1bc>)
 80189d0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80189d4:	4965      	ldr	r1, [pc, #404]	@ (8018b6c <etharp_output+0x1c8>)
 80189d6:	4864      	ldr	r0, [pc, #400]	@ (8018b68 <etharp_output+0x1c4>)
 80189d8:	f002 f964 	bl	801aca4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d106      	bne.n	80189f0 <etharp_output+0x4c>
 80189e2:	4b5f      	ldr	r3, [pc, #380]	@ (8018b60 <etharp_output+0x1bc>)
 80189e4:	f240 321d 	movw	r2, #797	@ 0x31d
 80189e8:	4961      	ldr	r1, [pc, #388]	@ (8018b70 <etharp_output+0x1cc>)
 80189ea:	485f      	ldr	r0, [pc, #380]	@ (8018b68 <etharp_output+0x1c4>)
 80189ec:	f002 f95a 	bl	801aca4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	68f9      	ldr	r1, [r7, #12]
 80189f6:	4618      	mov	r0, r3
 80189f8:	f000 fef0 	bl	80197dc <ip4_addr_isbroadcast_u32>
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d002      	beq.n	8018a08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018a02:	4b5c      	ldr	r3, [pc, #368]	@ (8018b74 <etharp_output+0x1d0>)
 8018a04:	61fb      	str	r3, [r7, #28]
 8018a06:	e09b      	b.n	8018b40 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a10:	2be0      	cmp	r3, #224	@ 0xe0
 8018a12:	d118      	bne.n	8018a46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a14:	2301      	movs	r3, #1
 8018a16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a18:	2300      	movs	r3, #0
 8018a1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a1c:	235e      	movs	r3, #94	@ 0x5e
 8018a1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	3301      	adds	r3, #1
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	3302      	adds	r3, #2
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	3303      	adds	r3, #3
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018a3e:	f107 0310 	add.w	r3, r7, #16
 8018a42:	61fb      	str	r3, [r7, #28]
 8018a44:	e07c      	b.n	8018b40 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	3304      	adds	r3, #4
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	405a      	eors	r2, r3
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	3308      	adds	r3, #8
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	4013      	ands	r3, r2
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d012      	beq.n	8018a84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a64:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018a68:	4293      	cmp	r3, r2
 8018a6a:	d00b      	beq.n	8018a84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	330c      	adds	r3, #12
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d003      	beq.n	8018a7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	330c      	adds	r3, #12
 8018a7a:	61bb      	str	r3, [r7, #24]
 8018a7c:	e002      	b.n	8018a84 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a7e:	f06f 0303 	mvn.w	r3, #3
 8018a82:	e069      	b.n	8018b58 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a84:	4b3c      	ldr	r3, [pc, #240]	@ (8018b78 <etharp_output+0x1d4>)
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	4619      	mov	r1, r3
 8018a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8018b7c <etharp_output+0x1d8>)
 8018a8c:	460b      	mov	r3, r1
 8018a8e:	005b      	lsls	r3, r3, #1
 8018a90:	440b      	add	r3, r1
 8018a92:	00db      	lsls	r3, r3, #3
 8018a94:	4413      	add	r3, r2
 8018a96:	3314      	adds	r3, #20
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d917      	bls.n	8018ace <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018a9e:	69bb      	ldr	r3, [r7, #24]
 8018aa0:	681a      	ldr	r2, [r3, #0]
 8018aa2:	4b35      	ldr	r3, [pc, #212]	@ (8018b78 <etharp_output+0x1d4>)
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	4934      	ldr	r1, [pc, #208]	@ (8018b7c <etharp_output+0x1d8>)
 8018aaa:	4603      	mov	r3, r0
 8018aac:	005b      	lsls	r3, r3, #1
 8018aae:	4403      	add	r3, r0
 8018ab0:	00db      	lsls	r3, r3, #3
 8018ab2:	440b      	add	r3, r1
 8018ab4:	3304      	adds	r3, #4
 8018ab6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d108      	bne.n	8018ace <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018abc:	4b2e      	ldr	r3, [pc, #184]	@ (8018b78 <etharp_output+0x1d4>)
 8018abe:	781b      	ldrb	r3, [r3, #0]
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	68b9      	ldr	r1, [r7, #8]
 8018ac4:	68f8      	ldr	r0, [r7, #12]
 8018ac6:	f7ff fed3 	bl	8018870 <etharp_output_to_arp_index>
 8018aca:	4603      	mov	r3, r0
 8018acc:	e044      	b.n	8018b58 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ace:	2300      	movs	r3, #0
 8018ad0:	75fb      	strb	r3, [r7, #23]
 8018ad2:	e02a      	b.n	8018b2a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ad4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018ad8:	4928      	ldr	r1, [pc, #160]	@ (8018b7c <etharp_output+0x1d8>)
 8018ada:	4613      	mov	r3, r2
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	4413      	add	r3, r2
 8018ae0:	00db      	lsls	r3, r3, #3
 8018ae2:	440b      	add	r3, r1
 8018ae4:	3314      	adds	r3, #20
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	2b01      	cmp	r3, #1
 8018aea:	d918      	bls.n	8018b1e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018aec:	69bb      	ldr	r3, [r7, #24]
 8018aee:	6819      	ldr	r1, [r3, #0]
 8018af0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018af4:	4821      	ldr	r0, [pc, #132]	@ (8018b7c <etharp_output+0x1d8>)
 8018af6:	4613      	mov	r3, r2
 8018af8:	005b      	lsls	r3, r3, #1
 8018afa:	4413      	add	r3, r2
 8018afc:	00db      	lsls	r3, r3, #3
 8018afe:	4403      	add	r3, r0
 8018b00:	3304      	adds	r3, #4
 8018b02:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b04:	4299      	cmp	r1, r3
 8018b06:	d10a      	bne.n	8018b1e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8018b08:	7dfa      	ldrb	r2, [r7, #23]
 8018b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8018b78 <etharp_output+0x1d4>)
 8018b0c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018b0e:	7dfb      	ldrb	r3, [r7, #23]
 8018b10:	461a      	mov	r2, r3
 8018b12:	68b9      	ldr	r1, [r7, #8]
 8018b14:	68f8      	ldr	r0, [r7, #12]
 8018b16:	f7ff feab 	bl	8018870 <etharp_output_to_arp_index>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	e01c      	b.n	8018b58 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	3301      	adds	r3, #1
 8018b26:	b2db      	uxtb	r3, r3
 8018b28:	75fb      	strb	r3, [r7, #23]
 8018b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018b2e:	2b09      	cmp	r3, #9
 8018b30:	ddd0      	ble.n	8018ad4 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b32:	68ba      	ldr	r2, [r7, #8]
 8018b34:	69b9      	ldr	r1, [r7, #24]
 8018b36:	68f8      	ldr	r0, [r7, #12]
 8018b38:	f000 f822 	bl	8018b80 <etharp_query>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	e00b      	b.n	8018b58 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 8018b46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b4a:	9300      	str	r3, [sp, #0]
 8018b4c:	69fb      	ldr	r3, [r7, #28]
 8018b4e:	68b9      	ldr	r1, [r7, #8]
 8018b50:	68f8      	ldr	r0, [r7, #12]
 8018b52:	f001 fd67 	bl	801a624 <ethernet_output>
 8018b56:	4603      	mov	r3, r0
}
 8018b58:	4618      	mov	r0, r3
 8018b5a:	3720      	adds	r7, #32
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd80      	pop	{r7, pc}
 8018b60:	0801ead4 	.word	0x0801ead4
 8018b64:	0801ec58 	.word	0x0801ec58
 8018b68:	0801eb80 	.word	0x0801eb80
 8018b6c:	0801eca8 	.word	0x0801eca8
 8018b70:	0801ec48 	.word	0x0801ec48
 8018b74:	0801f3f8 	.word	0x0801f3f8
 8018b78:	24007814 	.word	0x24007814
 8018b7c:	24007724 	.word	0x24007724

08018b80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b08c      	sub	sp, #48	@ 0x30
 8018b84:	af02      	add	r7, sp, #8
 8018b86:	60f8      	str	r0, [r7, #12]
 8018b88:	60b9      	str	r1, [r7, #8]
 8018b8a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	3331      	adds	r3, #49	@ 0x31
 8018b90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018b92:	23ff      	movs	r3, #255	@ 0xff
 8018b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	68f9      	ldr	r1, [r7, #12]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f000 fe1a 	bl	80197dc <ip4_addr_isbroadcast_u32>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d10c      	bne.n	8018bc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018bb6:	2be0      	cmp	r3, #224	@ 0xe0
 8018bb8:	d006      	beq.n	8018bc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bba:	68bb      	ldr	r3, [r7, #8]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d003      	beq.n	8018bc8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018bc0:	68bb      	ldr	r3, [r7, #8]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d102      	bne.n	8018bce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018bc8:	f06f 030f 	mvn.w	r3, #15
 8018bcc:	e10e      	b.n	8018dec <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018bce:	68fa      	ldr	r2, [r7, #12]
 8018bd0:	2101      	movs	r1, #1
 8018bd2:	68b8      	ldr	r0, [r7, #8]
 8018bd4:	f7ff fb9c 	bl	8018310 <etharp_find_entry>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8018bdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	da02      	bge.n	8018bea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8018be4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018be8:	e100      	b.n	8018dec <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018bea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018bee:	4981      	ldr	r1, [pc, #516]	@ (8018df4 <etharp_query+0x274>)
 8018bf0:	4613      	mov	r3, r2
 8018bf2:	005b      	lsls	r3, r3, #1
 8018bf4:	4413      	add	r3, r2
 8018bf6:	00db      	lsls	r3, r3, #3
 8018bf8:	440b      	add	r3, r1
 8018bfa:	3314      	adds	r3, #20
 8018bfc:	781b      	ldrb	r3, [r3, #0]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d117      	bne.n	8018c32 <etharp_query+0xb2>
    is_new_entry = 1;
 8018c02:	2301      	movs	r3, #1
 8018c04:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018c06:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c0a:	497a      	ldr	r1, [pc, #488]	@ (8018df4 <etharp_query+0x274>)
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	005b      	lsls	r3, r3, #1
 8018c10:	4413      	add	r3, r2
 8018c12:	00db      	lsls	r3, r3, #3
 8018c14:	440b      	add	r3, r1
 8018c16:	3314      	adds	r3, #20
 8018c18:	2201      	movs	r2, #1
 8018c1a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c1c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c20:	4974      	ldr	r1, [pc, #464]	@ (8018df4 <etharp_query+0x274>)
 8018c22:	4613      	mov	r3, r2
 8018c24:	005b      	lsls	r3, r3, #1
 8018c26:	4413      	add	r3, r2
 8018c28:	00db      	lsls	r3, r3, #3
 8018c2a:	440b      	add	r3, r1
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	68fa      	ldr	r2, [r7, #12]
 8018c30:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018c32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c36:	496f      	ldr	r1, [pc, #444]	@ (8018df4 <etharp_query+0x274>)
 8018c38:	4613      	mov	r3, r2
 8018c3a:	005b      	lsls	r3, r3, #1
 8018c3c:	4413      	add	r3, r2
 8018c3e:	00db      	lsls	r3, r3, #3
 8018c40:	440b      	add	r3, r1
 8018c42:	3314      	adds	r3, #20
 8018c44:	781b      	ldrb	r3, [r3, #0]
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d012      	beq.n	8018c70 <etharp_query+0xf0>
 8018c4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018c4e:	4969      	ldr	r1, [pc, #420]	@ (8018df4 <etharp_query+0x274>)
 8018c50:	4613      	mov	r3, r2
 8018c52:	005b      	lsls	r3, r3, #1
 8018c54:	4413      	add	r3, r2
 8018c56:	00db      	lsls	r3, r3, #3
 8018c58:	440b      	add	r3, r1
 8018c5a:	3314      	adds	r3, #20
 8018c5c:	781b      	ldrb	r3, [r3, #0]
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d806      	bhi.n	8018c70 <etharp_query+0xf0>
 8018c62:	4b65      	ldr	r3, [pc, #404]	@ (8018df8 <etharp_query+0x278>)
 8018c64:	f240 32c7 	movw	r2, #967	@ 0x3c7
 8018c68:	4964      	ldr	r1, [pc, #400]	@ (8018dfc <etharp_query+0x27c>)
 8018c6a:	4865      	ldr	r0, [pc, #404]	@ (8018e00 <etharp_query+0x280>)
 8018c6c:	f002 f81a 	bl	801aca4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018c70:	6a3b      	ldr	r3, [r7, #32]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d102      	bne.n	8018c7c <etharp_query+0xfc>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d10c      	bne.n	8018c96 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018c7c:	68b9      	ldr	r1, [r7, #8]
 8018c7e:	68f8      	ldr	r0, [r7, #12]
 8018c80:	f000 f974 	bl	8018f6c <etharp_request>
 8018c84:	4603      	mov	r3, r0
 8018c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d102      	bne.n	8018c96 <etharp_query+0x116>
      return result;
 8018c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018c94:	e0aa      	b.n	8018dec <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d106      	bne.n	8018caa <etharp_query+0x12a>
 8018c9c:	4b56      	ldr	r3, [pc, #344]	@ (8018df8 <etharp_query+0x278>)
 8018c9e:	f240 32db 	movw	r2, #987	@ 0x3db
 8018ca2:	4958      	ldr	r1, [pc, #352]	@ (8018e04 <etharp_query+0x284>)
 8018ca4:	4856      	ldr	r0, [pc, #344]	@ (8018e00 <etharp_query+0x280>)
 8018ca6:	f001 fffd 	bl	801aca4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018caa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018cae:	4951      	ldr	r1, [pc, #324]	@ (8018df4 <etharp_query+0x274>)
 8018cb0:	4613      	mov	r3, r2
 8018cb2:	005b      	lsls	r3, r3, #1
 8018cb4:	4413      	add	r3, r2
 8018cb6:	00db      	lsls	r3, r3, #3
 8018cb8:	440b      	add	r3, r1
 8018cba:	3314      	adds	r3, #20
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	2b01      	cmp	r3, #1
 8018cc0:	d918      	bls.n	8018cf4 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8018cc2:	7cfa      	ldrb	r2, [r7, #19]
 8018cc4:	4b50      	ldr	r3, [pc, #320]	@ (8018e08 <etharp_query+0x288>)
 8018cc6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018cc8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	005b      	lsls	r3, r3, #1
 8018cd0:	4413      	add	r3, r2
 8018cd2:	00db      	lsls	r3, r3, #3
 8018cd4:	3308      	adds	r3, #8
 8018cd6:	4a47      	ldr	r2, [pc, #284]	@ (8018df4 <etharp_query+0x274>)
 8018cd8:	4413      	add	r3, r2
 8018cda:	3304      	adds	r3, #4
 8018cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018ce0:	9200      	str	r2, [sp, #0]
 8018ce2:	697a      	ldr	r2, [r7, #20]
 8018ce4:	6879      	ldr	r1, [r7, #4]
 8018ce6:	68f8      	ldr	r0, [r7, #12]
 8018ce8:	f001 fc9c 	bl	801a624 <ethernet_output>
 8018cec:	4603      	mov	r3, r0
 8018cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018cf2:	e079      	b.n	8018de8 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018cf4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018cf8:	493e      	ldr	r1, [pc, #248]	@ (8018df4 <etharp_query+0x274>)
 8018cfa:	4613      	mov	r3, r2
 8018cfc:	005b      	lsls	r3, r3, #1
 8018cfe:	4413      	add	r3, r2
 8018d00:	00db      	lsls	r3, r3, #3
 8018d02:	440b      	add	r3, r1
 8018d04:	3314      	adds	r3, #20
 8018d06:	781b      	ldrb	r3, [r3, #0]
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d16d      	bne.n	8018de8 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d14:	e01a      	b.n	8018d4c <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018d16:	69fb      	ldr	r3, [r7, #28]
 8018d18:	895a      	ldrh	r2, [r3, #10]
 8018d1a:	69fb      	ldr	r3, [r7, #28]
 8018d1c:	891b      	ldrh	r3, [r3, #8]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d10a      	bne.n	8018d38 <etharp_query+0x1b8>
 8018d22:	69fb      	ldr	r3, [r7, #28]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d006      	beq.n	8018d38 <etharp_query+0x1b8>
 8018d2a:	4b33      	ldr	r3, [pc, #204]	@ (8018df8 <etharp_query+0x278>)
 8018d2c:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 8018d30:	4936      	ldr	r1, [pc, #216]	@ (8018e0c <etharp_query+0x28c>)
 8018d32:	4833      	ldr	r0, [pc, #204]	@ (8018e00 <etharp_query+0x280>)
 8018d34:	f001 ffb6 	bl	801aca4 <iprintf>
      if (p->type != PBUF_ROM) {
 8018d38:	69fb      	ldr	r3, [r7, #28]
 8018d3a:	7b1b      	ldrb	r3, [r3, #12]
 8018d3c:	2b01      	cmp	r3, #1
 8018d3e:	d002      	beq.n	8018d46 <etharp_query+0x1c6>
        copy_needed = 1;
 8018d40:	2301      	movs	r3, #1
 8018d42:	61bb      	str	r3, [r7, #24]
        break;
 8018d44:	e005      	b.n	8018d52 <etharp_query+0x1d2>
      }
      p = p->next;
 8018d46:	69fb      	ldr	r3, [r7, #28]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d4c:	69fb      	ldr	r3, [r7, #28]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d1e1      	bne.n	8018d16 <etharp_query+0x196>
    }
    if (copy_needed) {
 8018d52:	69bb      	ldr	r3, [r7, #24]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d017      	beq.n	8018d88 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8018d58:	69fb      	ldr	r3, [r7, #28]
 8018d5a:	891b      	ldrh	r3, [r3, #8]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	4619      	mov	r1, r3
 8018d60:	2002      	movs	r0, #2
 8018d62:	f7f7 fb83 	bl	801046c <pbuf_alloc>
 8018d66:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d011      	beq.n	8018d92 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8018d6e:	6879      	ldr	r1, [r7, #4]
 8018d70:	69f8      	ldr	r0, [r7, #28]
 8018d72:	f7f8 f833 	bl	8010ddc <pbuf_copy>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d00a      	beq.n	8018d92 <etharp_query+0x212>
          pbuf_free(p);
 8018d7c:	69f8      	ldr	r0, [r7, #28]
 8018d7e:	f7f7 feed 	bl	8010b5c <pbuf_free>
          p = NULL;
 8018d82:	2300      	movs	r3, #0
 8018d84:	61fb      	str	r3, [r7, #28]
 8018d86:	e004      	b.n	8018d92 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018d8c:	69f8      	ldr	r0, [r7, #28]
 8018d8e:	f7f7 ff97 	bl	8010cc0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018d92:	69fb      	ldr	r3, [r7, #28]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d024      	beq.n	8018de2 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018d98:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018d9c:	4915      	ldr	r1, [pc, #84]	@ (8018df4 <etharp_query+0x274>)
 8018d9e:	4613      	mov	r3, r2
 8018da0:	005b      	lsls	r3, r3, #1
 8018da2:	4413      	add	r3, r2
 8018da4:	00db      	lsls	r3, r3, #3
 8018da6:	440b      	add	r3, r1
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d00b      	beq.n	8018dc6 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8018dae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018db2:	4910      	ldr	r1, [pc, #64]	@ (8018df4 <etharp_query+0x274>)
 8018db4:	4613      	mov	r3, r2
 8018db6:	005b      	lsls	r3, r3, #1
 8018db8:	4413      	add	r3, r2
 8018dba:	00db      	lsls	r3, r3, #3
 8018dbc:	440b      	add	r3, r1
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7f7 fecb 	bl	8010b5c <pbuf_free>
      }
      arp_table[i].q = p;
 8018dc6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018dca:	490a      	ldr	r1, [pc, #40]	@ (8018df4 <etharp_query+0x274>)
 8018dcc:	4613      	mov	r3, r2
 8018dce:	005b      	lsls	r3, r3, #1
 8018dd0:	4413      	add	r3, r2
 8018dd2:	00db      	lsls	r3, r3, #3
 8018dd4:	440b      	add	r3, r1
 8018dd6:	69fa      	ldr	r2, [r7, #28]
 8018dd8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018de0:	e002      	b.n	8018de8 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018de2:	23ff      	movs	r3, #255	@ 0xff
 8018de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3728      	adds	r7, #40	@ 0x28
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}
 8018df4:	24007724 	.word	0x24007724
 8018df8:	0801ead4 	.word	0x0801ead4
 8018dfc:	0801ecb4 	.word	0x0801ecb4
 8018e00:	0801eb80 	.word	0x0801eb80
 8018e04:	0801eca8 	.word	0x0801eca8
 8018e08:	24007814 	.word	0x24007814
 8018e0c:	0801ecdc 	.word	0x0801ecdc

08018e10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b08a      	sub	sp, #40	@ 0x28
 8018e14:	af02      	add	r7, sp, #8
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	60b9      	str	r1, [r7, #8]
 8018e1a:	607a      	str	r2, [r7, #4]
 8018e1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d106      	bne.n	8018e36 <etharp_raw+0x26>
 8018e28:	4b3a      	ldr	r3, [pc, #232]	@ (8018f14 <etharp_raw+0x104>)
 8018e2a:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8018e2e:	493a      	ldr	r1, [pc, #232]	@ (8018f18 <etharp_raw+0x108>)
 8018e30:	483a      	ldr	r0, [pc, #232]	@ (8018f1c <etharp_raw+0x10c>)
 8018e32:	f001 ff37 	bl	801aca4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018e36:	2200      	movs	r2, #0
 8018e38:	211c      	movs	r1, #28
 8018e3a:	2002      	movs	r0, #2
 8018e3c:	f7f7 fb16 	bl	801046c <pbuf_alloc>
 8018e40:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018e42:	69bb      	ldr	r3, [r7, #24]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d102      	bne.n	8018e4e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018e48:	f04f 33ff 	mov.w	r3, #4294967295
 8018e4c:	e05d      	b.n	8018f0a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018e4e:	69bb      	ldr	r3, [r7, #24]
 8018e50:	895b      	ldrh	r3, [r3, #10]
 8018e52:	2b1b      	cmp	r3, #27
 8018e54:	d806      	bhi.n	8018e64 <etharp_raw+0x54>
 8018e56:	4b2f      	ldr	r3, [pc, #188]	@ (8018f14 <etharp_raw+0x104>)
 8018e58:	f240 4263 	movw	r2, #1123	@ 0x463
 8018e5c:	4930      	ldr	r1, [pc, #192]	@ (8018f20 <etharp_raw+0x110>)
 8018e5e:	482f      	ldr	r0, [pc, #188]	@ (8018f1c <etharp_raw+0x10c>)
 8018e60:	f001 ff20 	bl	801aca4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018e64:	69bb      	ldr	r3, [r7, #24]
 8018e66:	685b      	ldr	r3, [r3, #4]
 8018e68:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018e6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7f6 fbfd 	bl	800f66c <lwip_htons>
 8018e72:	4603      	mov	r3, r0
 8018e74:	461a      	mov	r2, r3
 8018e76:	697b      	ldr	r3, [r7, #20]
 8018e78:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018e80:	2b06      	cmp	r3, #6
 8018e82:	d006      	beq.n	8018e92 <etharp_raw+0x82>
 8018e84:	4b23      	ldr	r3, [pc, #140]	@ (8018f14 <etharp_raw+0x104>)
 8018e86:	f240 426a 	movw	r2, #1130	@ 0x46a
 8018e8a:	4926      	ldr	r1, [pc, #152]	@ (8018f24 <etharp_raw+0x114>)
 8018e8c:	4823      	ldr	r0, [pc, #140]	@ (8018f1c <etharp_raw+0x10c>)
 8018e8e:	f001 ff09 	bl	801aca4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	3308      	adds	r3, #8
 8018e96:	2206      	movs	r2, #6
 8018e98:	6839      	ldr	r1, [r7, #0]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f002 f843 	bl	801af26 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	3312      	adds	r3, #18
 8018ea4:	2206      	movs	r2, #6
 8018ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f002 f83c 	bl	801af26 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	330e      	adds	r3, #14
 8018eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018eb4:	6812      	ldr	r2, [r2, #0]
 8018eb6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	3318      	adds	r3, #24
 8018ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ebe:	6812      	ldr	r2, [r2, #0]
 8018ec0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8018ec2:	697b      	ldr	r3, [r7, #20]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	701a      	strb	r2, [r3, #0]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f042 0201 	orr.w	r2, r2, #1
 8018ece:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018ed0:	697b      	ldr	r3, [r7, #20]
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	f042 0208 	orr.w	r2, r2, #8
 8018ed8:	709a      	strb	r2, [r3, #2]
 8018eda:	2200      	movs	r2, #0
 8018edc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	2206      	movs	r2, #6
 8018ee2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	2204      	movs	r2, #4
 8018ee8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018eea:	f640 0306 	movw	r3, #2054	@ 0x806
 8018eee:	9300      	str	r3, [sp, #0]
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	68ba      	ldr	r2, [r7, #8]
 8018ef4:	69b9      	ldr	r1, [r7, #24]
 8018ef6:	68f8      	ldr	r0, [r7, #12]
 8018ef8:	f001 fb94 	bl	801a624 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018efc:	69b8      	ldr	r0, [r7, #24]
 8018efe:	f7f7 fe2d 	bl	8010b5c <pbuf_free>
  p = NULL;
 8018f02:	2300      	movs	r3, #0
 8018f04:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018f06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3720      	adds	r7, #32
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
 8018f12:	bf00      	nop
 8018f14:	0801ead4 	.word	0x0801ead4
 8018f18:	0801ec58 	.word	0x0801ec58
 8018f1c:	0801eb80 	.word	0x0801eb80
 8018f20:	0801ecf8 	.word	0x0801ecf8
 8018f24:	0801ed2c 	.word	0x0801ed2c

08018f28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b088      	sub	sp, #32
 8018f2c:	af04      	add	r7, sp, #16
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	f103 0131 	add.w	r1, r3, #49	@ 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	f103 0031 	add.w	r0, r3, #49	@ 0x31
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f44:	2201      	movs	r2, #1
 8018f46:	9203      	str	r2, [sp, #12]
 8018f48:	68ba      	ldr	r2, [r7, #8]
 8018f4a:	9202      	str	r2, [sp, #8]
 8018f4c:	4a06      	ldr	r2, [pc, #24]	@ (8018f68 <etharp_request_dst+0x40>)
 8018f4e:	9201      	str	r2, [sp, #4]
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	4603      	mov	r3, r0
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	68f8      	ldr	r0, [r7, #12]
 8018f58:	f7ff ff5a 	bl	8018e10 <etharp_raw>
 8018f5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
 8018f66:	bf00      	nop
 8018f68:	0801f400 	.word	0x0801f400

08018f6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018f76:	4a05      	ldr	r2, [pc, #20]	@ (8018f8c <etharp_request+0x20>)
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f7ff ffd4 	bl	8018f28 <etharp_request_dst>
 8018f80:	4603      	mov	r3, r0
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	3708      	adds	r7, #8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	0801f3f8 	.word	0x0801f3f8

08018f90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b08e      	sub	sp, #56	@ 0x38
 8018f94:	af04      	add	r7, sp, #16
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8019184 <icmp_input+0x1f4>)
 8018f9c:	689b      	ldr	r3, [r3, #8]
 8018f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fa2:	781b      	ldrb	r3, [r3, #0]
 8018fa4:	f003 030f 	and.w	r3, r3, #15
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8018fae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018fb0:	2b13      	cmp	r3, #19
 8018fb2:	f240 80d1 	bls.w	8019158 <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	895b      	ldrh	r3, [r3, #10]
 8018fba:	2b03      	cmp	r3, #3
 8018fbc:	f240 80ce 	bls.w	801915c <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	781b      	ldrb	r3, [r3, #0]
 8018fc6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018fca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	f000 80bb 	beq.w	801914a <icmp_input+0x1ba>
 8018fd4:	2b08      	cmp	r3, #8
 8018fd6:	f040 80bb 	bne.w	8019150 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8018fda:	4b6b      	ldr	r3, [pc, #428]	@ (8019188 <icmp_input+0x1f8>)
 8018fdc:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018fde:	4b69      	ldr	r3, [pc, #420]	@ (8019184 <icmp_input+0x1f4>)
 8018fe0:	695b      	ldr	r3, [r3, #20]
 8018fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018fe6:	2be0      	cmp	r3, #224	@ 0xe0
 8018fe8:	f000 80bf 	beq.w	801916a <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018fec:	4b65      	ldr	r3, [pc, #404]	@ (8019184 <icmp_input+0x1f4>)
 8018fee:	695b      	ldr	r3, [r3, #20]
 8018ff0:	4a64      	ldr	r2, [pc, #400]	@ (8019184 <icmp_input+0x1f4>)
 8018ff2:	6812      	ldr	r2, [r2, #0]
 8018ff4:	4611      	mov	r1, r2
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f000 fbf0 	bl	80197dc <ip4_addr_isbroadcast_u32>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	f040 80b5 	bne.w	801916e <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	891b      	ldrh	r3, [r3, #8]
 8019008:	2b07      	cmp	r3, #7
 801900a:	f240 80a9 	bls.w	8019160 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801900e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019010:	330e      	adds	r3, #14
 8019012:	b29b      	uxth	r3, r3
 8019014:	b21b      	sxth	r3, r3
 8019016:	4619      	mov	r1, r3
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f7f7 fd7b 	bl	8010b14 <pbuf_header>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d046      	beq.n	80190b2 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	891a      	ldrh	r2, [r3, #8]
 8019028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801902a:	4413      	add	r3, r2
 801902c:	b29b      	uxth	r3, r3
 801902e:	2200      	movs	r2, #0
 8019030:	4619      	mov	r1, r3
 8019032:	2002      	movs	r0, #2
 8019034:	f7f7 fa1a 	bl	801046c <pbuf_alloc>
 8019038:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801903a:	69bb      	ldr	r3, [r7, #24]
 801903c:	2b00      	cmp	r3, #0
 801903e:	f000 8098 	beq.w	8019172 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019042:	69bb      	ldr	r3, [r7, #24]
 8019044:	895b      	ldrh	r3, [r3, #10]
 8019046:	461a      	mov	r2, r3
 8019048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801904a:	3308      	adds	r3, #8
 801904c:	429a      	cmp	r2, r3
 801904e:	d203      	bcs.n	8019058 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8019050:	69b8      	ldr	r0, [r7, #24]
 8019052:	f7f7 fd83 	bl	8010b5c <pbuf_free>
        goto icmperr;
 8019056:	e08d      	b.n	8019174 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8019058:	69bb      	ldr	r3, [r7, #24]
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801905e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019060:	4618      	mov	r0, r3
 8019062:	f001 ff60 	bl	801af26 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8019066:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019068:	425b      	negs	r3, r3
 801906a:	b29b      	uxth	r3, r3
 801906c:	b21b      	sxth	r3, r3
 801906e:	4619      	mov	r1, r3
 8019070:	69b8      	ldr	r0, [r7, #24]
 8019072:	f7f7 fd4f 	bl	8010b14 <pbuf_header>
 8019076:	4603      	mov	r3, r0
 8019078:	2b00      	cmp	r3, #0
 801907a:	d009      	beq.n	8019090 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801907c:	4b43      	ldr	r3, [pc, #268]	@ (801918c <icmp_input+0x1fc>)
 801907e:	22af      	movs	r2, #175	@ 0xaf
 8019080:	4943      	ldr	r1, [pc, #268]	@ (8019190 <icmp_input+0x200>)
 8019082:	4844      	ldr	r0, [pc, #272]	@ (8019194 <icmp_input+0x204>)
 8019084:	f001 fe0e 	bl	801aca4 <iprintf>
        pbuf_free(r);
 8019088:	69b8      	ldr	r0, [r7, #24]
 801908a:	f7f7 fd67 	bl	8010b5c <pbuf_free>
        goto icmperr;
 801908e:	e071      	b.n	8019174 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8019090:	6879      	ldr	r1, [r7, #4]
 8019092:	69b8      	ldr	r0, [r7, #24]
 8019094:	f7f7 fea2 	bl	8010ddc <pbuf_copy>
 8019098:	4603      	mov	r3, r0
 801909a:	2b00      	cmp	r3, #0
 801909c:	d003      	beq.n	80190a6 <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801909e:	69b8      	ldr	r0, [r7, #24]
 80190a0:	f7f7 fd5c 	bl	8010b5c <pbuf_free>
        goto icmperr;
 80190a4:	e066      	b.n	8019174 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 80190a6:	6878      	ldr	r0, [r7, #4]
 80190a8:	f7f7 fd58 	bl	8010b5c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80190ac:	69bb      	ldr	r3, [r7, #24]
 80190ae:	607b      	str	r3, [r7, #4]
 80190b0:	e015      	b.n	80190de <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80190b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80190b4:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80190b8:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80190bc:	33f2      	adds	r3, #242	@ 0xf2
 80190be:	b29b      	uxth	r3, r3
 80190c0:	b21b      	sxth	r3, r3
 80190c2:	4619      	mov	r1, r3
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f7f7 fd25 	bl	8010b14 <pbuf_header>
 80190ca:	4603      	mov	r3, r0
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d006      	beq.n	80190de <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80190d0:	4b2e      	ldr	r3, [pc, #184]	@ (801918c <icmp_input+0x1fc>)
 80190d2:	22c0      	movs	r2, #192	@ 0xc0
 80190d4:	4930      	ldr	r1, [pc, #192]	@ (8019198 <icmp_input+0x208>)
 80190d6:	482f      	ldr	r0, [pc, #188]	@ (8019194 <icmp_input+0x204>)
 80190d8:	f001 fde4 	bl	801aca4 <iprintf>
        goto icmperr;
 80190dc:	e04a      	b.n	8019174 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80190e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80190e8:	4619      	mov	r1, r3
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f7f7 fd12 	bl	8010b14 <pbuf_header>
 80190f0:	4603      	mov	r3, r0
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d12b      	bne.n	801914e <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80190fc:	69fb      	ldr	r3, [r7, #28]
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	693b      	ldr	r3, [r7, #16]
 8019102:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019104:	4b1f      	ldr	r3, [pc, #124]	@ (8019184 <icmp_input+0x1f4>)
 8019106:	691a      	ldr	r2, [r3, #16]
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	2200      	movs	r2, #0
 8019110:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8019112:	697b      	ldr	r3, [r7, #20]
 8019114:	2200      	movs	r2, #0
 8019116:	709a      	strb	r2, [r3, #2]
 8019118:	2200      	movs	r2, #0
 801911a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801911c:	693b      	ldr	r3, [r7, #16]
 801911e:	22ff      	movs	r2, #255	@ 0xff
 8019120:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8019122:	693b      	ldr	r3, [r7, #16]
 8019124:	2200      	movs	r2, #0
 8019126:	729a      	strb	r2, [r3, #10]
 8019128:	2200      	movs	r2, #0
 801912a:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	9302      	str	r3, [sp, #8]
 8019130:	2301      	movs	r3, #1
 8019132:	9301      	str	r3, [sp, #4]
 8019134:	2300      	movs	r3, #0
 8019136:	9300      	str	r3, [sp, #0]
 8019138:	23ff      	movs	r3, #255	@ 0xff
 801913a:	2200      	movs	r2, #0
 801913c:	69f9      	ldr	r1, [r7, #28]
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f000 fa7a 	bl	8019638 <ip4_output_if>
 8019144:	4603      	mov	r3, r0
 8019146:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8019148:	e001      	b.n	801914e <icmp_input+0x1be>
    break;
 801914a:	bf00      	nop
 801914c:	e000      	b.n	8019150 <icmp_input+0x1c0>
    break;
 801914e:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	f7f7 fd03 	bl	8010b5c <pbuf_free>
  return;
 8019156:	e011      	b.n	801917c <icmp_input+0x1ec>
    goto lenerr;
 8019158:	bf00      	nop
 801915a:	e002      	b.n	8019162 <icmp_input+0x1d2>
    goto lenerr;
 801915c:	bf00      	nop
 801915e:	e000      	b.n	8019162 <icmp_input+0x1d2>
      goto lenerr;
 8019160:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f7f7 fcfa 	bl	8010b5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019168:	e008      	b.n	801917c <icmp_input+0x1ec>
      goto icmperr;
 801916a:	bf00      	nop
 801916c:	e002      	b.n	8019174 <icmp_input+0x1e4>
      goto icmperr;
 801916e:	bf00      	nop
 8019170:	e000      	b.n	8019174 <icmp_input+0x1e4>
        goto icmperr;
 8019172:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019174:	6878      	ldr	r0, [r7, #4]
 8019176:	f7f7 fcf1 	bl	8010b5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801917a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801917c:	3728      	adds	r7, #40	@ 0x28
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
 8019182:	bf00      	nop
 8019184:	240045a0 	.word	0x240045a0
 8019188:	240045b4 	.word	0x240045b4
 801918c:	0801ed70 	.word	0x0801ed70
 8019190:	0801eddc 	.word	0x0801eddc
 8019194:	0801ee14 	.word	0x0801ee14
 8019198:	0801ee3c 	.word	0x0801ee3c

0801919c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b082      	sub	sp, #8
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
 80191a4:	460b      	mov	r3, r1
 80191a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80191a8:	78fb      	ldrb	r3, [r7, #3]
 80191aa:	461a      	mov	r2, r3
 80191ac:	2103      	movs	r1, #3
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f000 f814 	bl	80191dc <icmp_send_response>
}
 80191b4:	bf00      	nop
 80191b6:	3708      	adds	r7, #8
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}

080191bc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	460b      	mov	r3, r1
 80191c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80191c8:	78fb      	ldrb	r3, [r7, #3]
 80191ca:	461a      	mov	r2, r3
 80191cc:	210b      	movs	r1, #11
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f000 f804 	bl	80191dc <icmp_send_response>
}
 80191d4:	bf00      	nop
 80191d6:	3708      	adds	r7, #8
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}

080191dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b08c      	sub	sp, #48	@ 0x30
 80191e0:	af04      	add	r7, sp, #16
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	460b      	mov	r3, r1
 80191e6:	70fb      	strb	r3, [r7, #3]
 80191e8:	4613      	mov	r3, r2
 80191ea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80191ec:	2200      	movs	r2, #0
 80191ee:	2124      	movs	r1, #36	@ 0x24
 80191f0:	2001      	movs	r0, #1
 80191f2:	f7f7 f93b 	bl	801046c <pbuf_alloc>
 80191f6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d04c      	beq.n	8019298 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80191fe:	69fb      	ldr	r3, [r7, #28]
 8019200:	895b      	ldrh	r3, [r3, #10]
 8019202:	2b23      	cmp	r3, #35	@ 0x23
 8019204:	d806      	bhi.n	8019214 <icmp_send_response+0x38>
 8019206:	4b26      	ldr	r3, [pc, #152]	@ (80192a0 <icmp_send_response+0xc4>)
 8019208:	f240 1261 	movw	r2, #353	@ 0x161
 801920c:	4925      	ldr	r1, [pc, #148]	@ (80192a4 <icmp_send_response+0xc8>)
 801920e:	4826      	ldr	r0, [pc, #152]	@ (80192a8 <icmp_send_response+0xcc>)
 8019210:	f001 fd48 	bl	801aca4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	685b      	ldr	r3, [r3, #4]
 8019218:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	78fa      	ldrb	r2, [r7, #3]
 8019224:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019226:	697b      	ldr	r3, [r7, #20]
 8019228:	78ba      	ldrb	r2, [r7, #2]
 801922a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	2200      	movs	r2, #0
 8019230:	711a      	strb	r2, [r3, #4]
 8019232:	2200      	movs	r2, #0
 8019234:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	2200      	movs	r2, #0
 801923a:	719a      	strb	r2, [r3, #6]
 801923c:	2200      	movs	r2, #0
 801923e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	f103 0008 	add.w	r0, r3, #8
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	685b      	ldr	r3, [r3, #4]
 801924c:	221c      	movs	r2, #28
 801924e:	4619      	mov	r1, r3
 8019250:	f001 fe69 	bl	801af26 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019254:	69bb      	ldr	r3, [r7, #24]
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801925a:	f107 030c 	add.w	r3, r7, #12
 801925e:	4618      	mov	r0, r3
 8019260:	f000 f824 	bl	80192ac <ip4_route>
 8019264:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d011      	beq.n	8019290 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801926c:	697b      	ldr	r3, [r7, #20]
 801926e:	2200      	movs	r2, #0
 8019270:	709a      	strb	r2, [r3, #2]
 8019272:	2200      	movs	r2, #0
 8019274:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019276:	f107 020c 	add.w	r2, r7, #12
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	9302      	str	r3, [sp, #8]
 801927e:	2301      	movs	r3, #1
 8019280:	9301      	str	r3, [sp, #4]
 8019282:	2300      	movs	r3, #0
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	23ff      	movs	r3, #255	@ 0xff
 8019288:	2100      	movs	r1, #0
 801928a:	69f8      	ldr	r0, [r7, #28]
 801928c:	f000 f9d4 	bl	8019638 <ip4_output_if>
  }
  pbuf_free(q);
 8019290:	69f8      	ldr	r0, [r7, #28]
 8019292:	f7f7 fc63 	bl	8010b5c <pbuf_free>
 8019296:	e000      	b.n	801929a <icmp_send_response+0xbe>
    return;
 8019298:	bf00      	nop
}
 801929a:	3720      	adds	r7, #32
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}
 80192a0:	0801ed70 	.word	0x0801ed70
 80192a4:	0801ee70 	.word	0x0801ee70
 80192a8:	0801ee14 	.word	0x0801ee14

080192ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80192ac:	b480      	push	{r7}
 80192ae:	b085      	sub	sp, #20
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80192b4:	4b30      	ldr	r3, [pc, #192]	@ (8019378 <ip4_route+0xcc>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	60fb      	str	r3, [r7, #12]
 80192ba:	e036      	b.n	801932a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80192c2:	f003 0301 	and.w	r3, r3, #1
 80192c6:	b2db      	uxtb	r3, r3
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d02b      	beq.n	8019324 <ip4_route+0x78>
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80192d2:	089b      	lsrs	r3, r3, #2
 80192d4:	f003 0301 	and.w	r3, r3, #1
 80192d8:	b2db      	uxtb	r3, r3
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d022      	beq.n	8019324 <ip4_route+0x78>
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	3304      	adds	r3, #4
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d01d      	beq.n	8019324 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	681a      	ldr	r2, [r3, #0]
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	3304      	adds	r3, #4
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	405a      	eors	r2, r3
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	3308      	adds	r3, #8
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4013      	ands	r3, r2
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d101      	bne.n	8019304 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	e033      	b.n	801936c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801930a:	f003 0302 	and.w	r3, r3, #2
 801930e:	2b00      	cmp	r3, #0
 8019310:	d108      	bne.n	8019324 <ip4_route+0x78>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681a      	ldr	r2, [r3, #0]
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	330c      	adds	r3, #12
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	429a      	cmp	r2, r3
 801931e:	d101      	bne.n	8019324 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	e023      	b.n	801936c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	60fb      	str	r3, [r7, #12]
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d1c5      	bne.n	80192bc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019330:	4b12      	ldr	r3, [pc, #72]	@ (801937c <ip4_route+0xd0>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d015      	beq.n	8019364 <ip4_route+0xb8>
 8019338:	4b10      	ldr	r3, [pc, #64]	@ (801937c <ip4_route+0xd0>)
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8019340:	f003 0301 	and.w	r3, r3, #1
 8019344:	2b00      	cmp	r3, #0
 8019346:	d00d      	beq.n	8019364 <ip4_route+0xb8>
 8019348:	4b0c      	ldr	r3, [pc, #48]	@ (801937c <ip4_route+0xd0>)
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8019350:	f003 0304 	and.w	r3, r3, #4
 8019354:	2b00      	cmp	r3, #0
 8019356:	d005      	beq.n	8019364 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8019358:	4b08      	ldr	r3, [pc, #32]	@ (801937c <ip4_route+0xd0>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	3304      	adds	r3, #4
 801935e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019360:	2b00      	cmp	r3, #0
 8019362:	d101      	bne.n	8019368 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019364:	2300      	movs	r3, #0
 8019366:	e001      	b.n	801936c <ip4_route+0xc0>
  }

  return netif_default;
 8019368:	4b04      	ldr	r3, [pc, #16]	@ (801937c <ip4_route+0xd0>)
 801936a:	681b      	ldr	r3, [r3, #0]
}
 801936c:	4618      	mov	r0, r3
 801936e:	3714      	adds	r7, #20
 8019370:	46bd      	mov	sp, r7
 8019372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019376:	4770      	bx	lr
 8019378:	240076b0 	.word	0x240076b0
 801937c:	240076b4 	.word	0x240076b4

08019380 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b088      	sub	sp, #32
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
 8019388:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801938a:	2301      	movs	r3, #1
 801938c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019394:	69fb      	ldr	r3, [r7, #28]
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	091b      	lsrs	r3, r3, #4
 801939a:	b2db      	uxtb	r3, r3
 801939c:	2b04      	cmp	r3, #4
 801939e:	d004      	beq.n	80193aa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80193a0:	6878      	ldr	r0, [r7, #4]
 80193a2:	f7f7 fbdb 	bl	8010b5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80193a6:	2300      	movs	r3, #0
 80193a8:	e13e      	b.n	8019628 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80193aa:	69fb      	ldr	r3, [r7, #28]
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	f003 030f 	and.w	r3, r3, #15
 80193b2:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80193b4:	89fb      	ldrh	r3, [r7, #14]
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80193ba:	69fb      	ldr	r3, [r7, #28]
 80193bc:	885b      	ldrh	r3, [r3, #2]
 80193be:	b29b      	uxth	r3, r3
 80193c0:	4618      	mov	r0, r3
 80193c2:	f7f6 f953 	bl	800f66c <lwip_htons>
 80193c6:	4603      	mov	r3, r0
 80193c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	891b      	ldrh	r3, [r3, #8]
 80193ce:	89ba      	ldrh	r2, [r7, #12]
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d204      	bcs.n	80193de <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80193d4:	89bb      	ldrh	r3, [r7, #12]
 80193d6:	4619      	mov	r1, r3
 80193d8:	6878      	ldr	r0, [r7, #4]
 80193da:	f7f7 fa4b 	bl	8010874 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	895b      	ldrh	r3, [r3, #10]
 80193e2:	89fa      	ldrh	r2, [r7, #14]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d807      	bhi.n	80193f8 <ip4_input+0x78>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	891b      	ldrh	r3, [r3, #8]
 80193ec:	89ba      	ldrh	r2, [r7, #12]
 80193ee:	429a      	cmp	r2, r3
 80193f0:	d802      	bhi.n	80193f8 <ip4_input+0x78>
 80193f2:	89fb      	ldrh	r3, [r7, #14]
 80193f4:	2b13      	cmp	r3, #19
 80193f6:	d804      	bhi.n	8019402 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	f7f7 fbaf 	bl	8010b5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80193fe:	2300      	movs	r3, #0
 8019400:	e112      	b.n	8019628 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019402:	69fb      	ldr	r3, [r7, #28]
 8019404:	691b      	ldr	r3, [r3, #16]
 8019406:	4a8a      	ldr	r2, [pc, #552]	@ (8019630 <ip4_input+0x2b0>)
 8019408:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801940a:	69fb      	ldr	r3, [r7, #28]
 801940c:	68db      	ldr	r3, [r3, #12]
 801940e:	4a88      	ldr	r2, [pc, #544]	@ (8019630 <ip4_input+0x2b0>)
 8019410:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019412:	4b87      	ldr	r3, [pc, #540]	@ (8019630 <ip4_input+0x2b0>)
 8019414:	695b      	ldr	r3, [r3, #20]
 8019416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801941a:	2be0      	cmp	r3, #224	@ 0xe0
 801941c:	d112      	bne.n	8019444 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8019424:	f003 0301 	and.w	r3, r3, #1
 8019428:	b2db      	uxtb	r3, r3
 801942a:	2b00      	cmp	r3, #0
 801942c:	d007      	beq.n	801943e <ip4_input+0xbe>
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	3304      	adds	r3, #4
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d002      	beq.n	801943e <ip4_input+0xbe>
      netif = inp;
 8019438:	683b      	ldr	r3, [r7, #0]
 801943a:	61bb      	str	r3, [r7, #24]
 801943c:	e041      	b.n	80194c2 <ip4_input+0x142>
    } else {
      netif = NULL;
 801943e:	2300      	movs	r3, #0
 8019440:	61bb      	str	r3, [r7, #24]
 8019442:	e03e      	b.n	80194c2 <ip4_input+0x142>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8019444:	2301      	movs	r3, #1
 8019446:	613b      	str	r3, [r7, #16]
    netif = inp;
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8019452:	f003 0301 	and.w	r3, r3, #1
 8019456:	b2db      	uxtb	r3, r3
 8019458:	2b00      	cmp	r3, #0
 801945a:	d014      	beq.n	8019486 <ip4_input+0x106>
 801945c:	69bb      	ldr	r3, [r7, #24]
 801945e:	3304      	adds	r3, #4
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d00f      	beq.n	8019486 <ip4_input+0x106>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019466:	4b72      	ldr	r3, [pc, #456]	@ (8019630 <ip4_input+0x2b0>)
 8019468:	695a      	ldr	r2, [r3, #20]
 801946a:	69bb      	ldr	r3, [r7, #24]
 801946c:	3304      	adds	r3, #4
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	429a      	cmp	r2, r3
 8019472:	d026      	beq.n	80194c2 <ip4_input+0x142>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019474:	4b6e      	ldr	r3, [pc, #440]	@ (8019630 <ip4_input+0x2b0>)
 8019476:	695b      	ldr	r3, [r3, #20]
 8019478:	69b9      	ldr	r1, [r7, #24]
 801947a:	4618      	mov	r0, r3
 801947c:	f000 f9ae 	bl	80197dc <ip4_addr_isbroadcast_u32>
 8019480:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019482:	2b00      	cmp	r3, #0
 8019484:	d11d      	bne.n	80194c2 <ip4_input+0x142>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8019486:	693b      	ldr	r3, [r7, #16]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d00d      	beq.n	80194a8 <ip4_input+0x128>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801948c:	4b68      	ldr	r3, [pc, #416]	@ (8019630 <ip4_input+0x2b0>)
 801948e:	695b      	ldr	r3, [r3, #20]
 8019490:	b2db      	uxtb	r3, r3
 8019492:	2b7f      	cmp	r3, #127	@ 0x7f
 8019494:	d102      	bne.n	801949c <ip4_input+0x11c>
          netif = NULL;
 8019496:	2300      	movs	r3, #0
 8019498:	61bb      	str	r3, [r7, #24]
          break;
 801949a:	e012      	b.n	80194c2 <ip4_input+0x142>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801949c:	2300      	movs	r3, #0
 801949e:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80194a0:	4b64      	ldr	r3, [pc, #400]	@ (8019634 <ip4_input+0x2b4>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	61bb      	str	r3, [r7, #24]
 80194a6:	e002      	b.n	80194ae <ip4_input+0x12e>
      } else {
        netif = netif->next;
 80194a8:	69bb      	ldr	r3, [r7, #24]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 80194ae:	69ba      	ldr	r2, [r7, #24]
 80194b0:	683b      	ldr	r3, [r7, #0]
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d102      	bne.n	80194bc <ip4_input+0x13c>
        netif = netif->next;
 80194b6:	69bb      	ldr	r3, [r7, #24]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 80194bc:	69bb      	ldr	r3, [r7, #24]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d1c4      	bne.n	801944c <ip4_input+0xcc>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d111      	bne.n	80194ec <ip4_input+0x16c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80194c8:	69fb      	ldr	r3, [r7, #28]
 80194ca:	7a5b      	ldrb	r3, [r3, #9]
 80194cc:	2b11      	cmp	r3, #17
 80194ce:	d10d      	bne.n	80194ec <ip4_input+0x16c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 80194d0:	89fb      	ldrh	r3, [r7, #14]
 80194d2:	69fa      	ldr	r2, [r7, #28]
 80194d4:	4413      	add	r3, r2
 80194d6:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	885b      	ldrh	r3, [r3, #2]
 80194dc:	b29b      	uxth	r3, r3
 80194de:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 80194e2:	d103      	bne.n	80194ec <ip4_input+0x16c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80194e8:	2300      	movs	r3, #0
 80194ea:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80194ec:	697b      	ldr	r3, [r7, #20]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d017      	beq.n	8019522 <ip4_input+0x1a2>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80194f2:	4b4f      	ldr	r3, [pc, #316]	@ (8019630 <ip4_input+0x2b0>)
 80194f4:	691b      	ldr	r3, [r3, #16]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d013      	beq.n	8019522 <ip4_input+0x1a2>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80194fa:	4b4d      	ldr	r3, [pc, #308]	@ (8019630 <ip4_input+0x2b0>)
 80194fc:	691b      	ldr	r3, [r3, #16]
 80194fe:	6839      	ldr	r1, [r7, #0]
 8019500:	4618      	mov	r0, r3
 8019502:	f000 f96b 	bl	80197dc <ip4_addr_isbroadcast_u32>
 8019506:	4603      	mov	r3, r0
 8019508:	2b00      	cmp	r3, #0
 801950a:	d105      	bne.n	8019518 <ip4_input+0x198>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801950c:	4b48      	ldr	r3, [pc, #288]	@ (8019630 <ip4_input+0x2b0>)
 801950e:	691b      	ldr	r3, [r3, #16]
 8019510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019514:	2be0      	cmp	r3, #224	@ 0xe0
 8019516:	d104      	bne.n	8019522 <ip4_input+0x1a2>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f7f7 fb1f 	bl	8010b5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801951e:	2300      	movs	r3, #0
 8019520:	e082      	b.n	8019628 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019522:	69bb      	ldr	r3, [r7, #24]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d104      	bne.n	8019532 <ip4_input+0x1b2>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f7f7 fb17 	bl	8010b5c <pbuf_free>
    return ERR_OK;
 801952e:	2300      	movs	r3, #0
 8019530:	e07a      	b.n	8019628 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019532:	69fb      	ldr	r3, [r7, #28]
 8019534:	88db      	ldrh	r3, [r3, #6]
 8019536:	b29b      	uxth	r3, r3
 8019538:	461a      	mov	r2, r3
 801953a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801953e:	4013      	ands	r3, r2
 8019540:	2b00      	cmp	r3, #0
 8019542:	d00b      	beq.n	801955c <ip4_input+0x1dc>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019544:	6878      	ldr	r0, [r7, #4]
 8019546:	f000 fd0f 	bl	8019f68 <ip4_reass>
 801954a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d101      	bne.n	8019556 <ip4_input+0x1d6>
      return ERR_OK;
 8019552:	2300      	movs	r3, #0
 8019554:	e068      	b.n	8019628 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801955c:	4a34      	ldr	r2, [pc, #208]	@ (8019630 <ip4_input+0x2b0>)
 801955e:	69bb      	ldr	r3, [r7, #24]
 8019560:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019562:	4a33      	ldr	r2, [pc, #204]	@ (8019630 <ip4_input+0x2b0>)
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019568:	4a31      	ldr	r2, [pc, #196]	@ (8019630 <ip4_input+0x2b0>)
 801956a:	69fb      	ldr	r3, [r7, #28]
 801956c:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801956e:	69fb      	ldr	r3, [r7, #28]
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	f003 030f 	and.w	r3, r3, #15
 8019576:	b29b      	uxth	r3, r3
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	b29a      	uxth	r2, r3
 801957c:	4b2c      	ldr	r3, [pc, #176]	@ (8019630 <ip4_input+0x2b0>)
 801957e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8019580:	89fb      	ldrh	r3, [r7, #14]
 8019582:	425b      	negs	r3, r3
 8019584:	b29b      	uxth	r3, r3
 8019586:	b21b      	sxth	r3, r3
 8019588:	4619      	mov	r1, r3
 801958a:	6878      	ldr	r0, [r7, #4]
 801958c:	f7f7 fac2 	bl	8010b14 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8019590:	69fb      	ldr	r3, [r7, #28]
 8019592:	7a5b      	ldrb	r3, [r3, #9]
 8019594:	2b11      	cmp	r3, #17
 8019596:	d006      	beq.n	80195a6 <ip4_input+0x226>
 8019598:	2b11      	cmp	r3, #17
 801959a:	dc13      	bgt.n	80195c4 <ip4_input+0x244>
 801959c:	2b01      	cmp	r3, #1
 801959e:	d00c      	beq.n	80195ba <ip4_input+0x23a>
 80195a0:	2b06      	cmp	r3, #6
 80195a2:	d005      	beq.n	80195b0 <ip4_input+0x230>
 80195a4:	e00e      	b.n	80195c4 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80195a6:	6839      	ldr	r1, [r7, #0]
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7fd f987 	bl	80168bc <udp_input>
      break;
 80195ae:	e028      	b.n	8019602 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80195b0:	6839      	ldr	r1, [r7, #0]
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	f7f9 f9ba 	bl	801292c <tcp_input>
      break;
 80195b8:	e023      	b.n	8019602 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80195ba:	6839      	ldr	r1, [r7, #0]
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7ff fce7 	bl	8018f90 <icmp_input>
      break;
 80195c2:	e01e      	b.n	8019602 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195c4:	4b1a      	ldr	r3, [pc, #104]	@ (8019630 <ip4_input+0x2b0>)
 80195c6:	695b      	ldr	r3, [r3, #20]
 80195c8:	69b9      	ldr	r1, [r7, #24]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f000 f906 	bl	80197dc <ip4_addr_isbroadcast_u32>
 80195d0:	4603      	mov	r3, r0
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d112      	bne.n	80195fc <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80195d6:	4b16      	ldr	r3, [pc, #88]	@ (8019630 <ip4_input+0x2b0>)
 80195d8:	695b      	ldr	r3, [r3, #20]
 80195da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195de:	2be0      	cmp	r3, #224	@ 0xe0
 80195e0:	d00c      	beq.n	80195fc <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80195e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80195e6:	4619      	mov	r1, r3
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f7f7 faa5 	bl	8010b38 <pbuf_header_force>
        p->payload = iphdr;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	69fa      	ldr	r2, [r7, #28]
 80195f2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80195f4:	2102      	movs	r1, #2
 80195f6:	6878      	ldr	r0, [r7, #4]
 80195f8:	f7ff fdd0 	bl	801919c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80195fc:	6878      	ldr	r0, [r7, #4]
 80195fe:	f7f7 faad 	bl	8010b5c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019602:	4b0b      	ldr	r3, [pc, #44]	@ (8019630 <ip4_input+0x2b0>)
 8019604:	2200      	movs	r2, #0
 8019606:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019608:	4b09      	ldr	r3, [pc, #36]	@ (8019630 <ip4_input+0x2b0>)
 801960a:	2200      	movs	r2, #0
 801960c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801960e:	4b08      	ldr	r3, [pc, #32]	@ (8019630 <ip4_input+0x2b0>)
 8019610:	2200      	movs	r2, #0
 8019612:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019614:	4b06      	ldr	r3, [pc, #24]	@ (8019630 <ip4_input+0x2b0>)
 8019616:	2200      	movs	r2, #0
 8019618:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801961a:	4b05      	ldr	r3, [pc, #20]	@ (8019630 <ip4_input+0x2b0>)
 801961c:	2200      	movs	r2, #0
 801961e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019620:	4b03      	ldr	r3, [pc, #12]	@ (8019630 <ip4_input+0x2b0>)
 8019622:	2200      	movs	r2, #0
 8019624:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019626:	2300      	movs	r3, #0
}
 8019628:	4618      	mov	r0, r3
 801962a:	3720      	adds	r7, #32
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	240045a0 	.word	0x240045a0
 8019634:	240076b0 	.word	0x240076b0

08019638 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b08a      	sub	sp, #40	@ 0x28
 801963c:	af04      	add	r7, sp, #16
 801963e:	60f8      	str	r0, [r7, #12]
 8019640:	60b9      	str	r1, [r7, #8]
 8019642:	607a      	str	r2, [r7, #4]
 8019644:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d009      	beq.n	8019664 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d003      	beq.n	801965e <ip4_output_if+0x26>
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d102      	bne.n	8019664 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801965e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019660:	3304      	adds	r3, #4
 8019662:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019664:	78fa      	ldrb	r2, [r7, #3]
 8019666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019668:	9302      	str	r3, [sp, #8]
 801966a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801966e:	9301      	str	r3, [sp, #4]
 8019670:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019674:	9300      	str	r3, [sp, #0]
 8019676:	4613      	mov	r3, r2
 8019678:	687a      	ldr	r2, [r7, #4]
 801967a:	6979      	ldr	r1, [r7, #20]
 801967c:	68f8      	ldr	r0, [r7, #12]
 801967e:	f000 f805 	bl	801968c <ip4_output_if_src>
 8019682:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019684:	4618      	mov	r0, r3
 8019686:	3718      	adds	r7, #24
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}

0801968c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b088      	sub	sp, #32
 8019690:	af00      	add	r7, sp, #0
 8019692:	60f8      	str	r0, [r7, #12]
 8019694:	60b9      	str	r1, [r7, #8]
 8019696:	607a      	str	r2, [r7, #4]
 8019698:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	89db      	ldrh	r3, [r3, #14]
 801969e:	2b01      	cmp	r3, #1
 80196a0:	d006      	beq.n	80196b0 <ip4_output_if_src+0x24>
 80196a2:	4b48      	ldr	r3, [pc, #288]	@ (80197c4 <ip4_output_if_src+0x138>)
 80196a4:	f240 3233 	movw	r2, #819	@ 0x333
 80196a8:	4947      	ldr	r1, [pc, #284]	@ (80197c8 <ip4_output_if_src+0x13c>)
 80196aa:	4848      	ldr	r0, [pc, #288]	@ (80197cc <ip4_output_if_src+0x140>)
 80196ac:	f001 fafa 	bl	801aca4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d060      	beq.n	8019778 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80196b6:	2314      	movs	r3, #20
 80196b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80196ba:	2114      	movs	r1, #20
 80196bc:	68f8      	ldr	r0, [r7, #12]
 80196be:	f7f7 fa29 	bl	8010b14 <pbuf_header>
 80196c2:	4603      	mov	r3, r0
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d002      	beq.n	80196ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80196c8:	f06f 0301 	mvn.w	r3, #1
 80196cc:	e075      	b.n	80197ba <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	685b      	ldr	r3, [r3, #4]
 80196d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	895b      	ldrh	r3, [r3, #10]
 80196d8:	2b13      	cmp	r3, #19
 80196da:	d806      	bhi.n	80196ea <ip4_output_if_src+0x5e>
 80196dc:	4b39      	ldr	r3, [pc, #228]	@ (80197c4 <ip4_output_if_src+0x138>)
 80196de:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80196e2:	493b      	ldr	r1, [pc, #236]	@ (80197d0 <ip4_output_if_src+0x144>)
 80196e4:	4839      	ldr	r0, [pc, #228]	@ (80197cc <ip4_output_if_src+0x140>)
 80196e6:	f001 fadd 	bl	801aca4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	78fa      	ldrb	r2, [r7, #3]
 80196ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80196f0:	69fb      	ldr	r3, [r7, #28]
 80196f2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80196f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681a      	ldr	r2, [r3, #0]
 80196fc:	69fb      	ldr	r3, [r7, #28]
 80196fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019700:	8b7b      	ldrh	r3, [r7, #26]
 8019702:	089b      	lsrs	r3, r3, #2
 8019704:	b29b      	uxth	r3, r3
 8019706:	b2db      	uxtb	r3, r3
 8019708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801970c:	b2da      	uxtb	r2, r3
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019712:	69fb      	ldr	r3, [r7, #28]
 8019714:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019718:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	891b      	ldrh	r3, [r3, #8]
 801971e:	4618      	mov	r0, r3
 8019720:	f7f5 ffa4 	bl	800f66c <lwip_htons>
 8019724:	4603      	mov	r3, r0
 8019726:	461a      	mov	r2, r3
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	2200      	movs	r2, #0
 8019730:	719a      	strb	r2, [r3, #6]
 8019732:	2200      	movs	r2, #0
 8019734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019736:	4b27      	ldr	r3, [pc, #156]	@ (80197d4 <ip4_output_if_src+0x148>)
 8019738:	881b      	ldrh	r3, [r3, #0]
 801973a:	4618      	mov	r0, r3
 801973c:	f7f5 ff96 	bl	800f66c <lwip_htons>
 8019740:	4603      	mov	r3, r0
 8019742:	461a      	mov	r2, r3
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019748:	4b22      	ldr	r3, [pc, #136]	@ (80197d4 <ip4_output_if_src+0x148>)
 801974a:	881b      	ldrh	r3, [r3, #0]
 801974c:	3301      	adds	r3, #1
 801974e:	b29a      	uxth	r2, r3
 8019750:	4b20      	ldr	r3, [pc, #128]	@ (80197d4 <ip4_output_if_src+0x148>)
 8019752:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d104      	bne.n	8019764 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801975a:	4b1f      	ldr	r3, [pc, #124]	@ (80197d8 <ip4_output_if_src+0x14c>)
 801975c:	681a      	ldr	r2, [r3, #0]
 801975e:	69fb      	ldr	r3, [r7, #28]
 8019760:	60da      	str	r2, [r3, #12]
 8019762:	e003      	b.n	801976c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801976c:	69fb      	ldr	r3, [r7, #28]
 801976e:	2200      	movs	r2, #0
 8019770:	729a      	strb	r2, [r3, #10]
 8019772:	2200      	movs	r2, #0
 8019774:	72da      	strb	r2, [r3, #11]
 8019776:	e008      	b.n	801978a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	691b      	ldr	r3, [r3, #16]
 8019782:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019784:	f107 0314 	add.w	r3, r7, #20
 8019788:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801978c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801978e:	2b00      	cmp	r3, #0
 8019790:	d00c      	beq.n	80197ac <ip4_output_if_src+0x120>
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	891a      	ldrh	r2, [r3, #8]
 8019796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019798:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801979a:	429a      	cmp	r2, r3
 801979c:	d906      	bls.n	80197ac <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80197a2:	68f8      	ldr	r0, [r7, #12]
 80197a4:	f000 fd8a 	bl	801a2bc <ip4_frag>
 80197a8:	4603      	mov	r3, r0
 80197aa:	e006      	b.n	80197ba <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80197ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197ae:	695b      	ldr	r3, [r3, #20]
 80197b0:	687a      	ldr	r2, [r7, #4]
 80197b2:	68f9      	ldr	r1, [r7, #12]
 80197b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80197b6:	4798      	blx	r3
 80197b8:	4603      	mov	r3, r0
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	3720      	adds	r7, #32
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd80      	pop	{r7, pc}
 80197c2:	bf00      	nop
 80197c4:	0801ee9c 	.word	0x0801ee9c
 80197c8:	0801ef04 	.word	0x0801ef04
 80197cc:	0801ef10 	.word	0x0801ef10
 80197d0:	0801ef38 	.word	0x0801ef38
 80197d4:	24007816 	.word	0x24007816
 80197d8:	0801f3f0 	.word	0x0801f3f0

080197dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80197dc:	b480      	push	{r7}
 80197de:	b085      	sub	sp, #20
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
 80197e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197f0:	d002      	beq.n	80197f8 <ip4_addr_isbroadcast_u32+0x1c>
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d101      	bne.n	80197fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80197f8:	2301      	movs	r3, #1
 80197fa:	e02a      	b.n	8019852 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8019802:	f003 0302 	and.w	r3, r3, #2
 8019806:	2b00      	cmp	r3, #0
 8019808:	d101      	bne.n	801980e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801980a:	2300      	movs	r3, #0
 801980c:	e021      	b.n	8019852 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	3304      	adds	r3, #4
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	687a      	ldr	r2, [r7, #4]
 8019816:	429a      	cmp	r2, r3
 8019818:	d101      	bne.n	801981e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801981a:	2300      	movs	r3, #0
 801981c:	e019      	b.n	8019852 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801981e:	68fa      	ldr	r2, [r7, #12]
 8019820:	683b      	ldr	r3, [r7, #0]
 8019822:	3304      	adds	r3, #4
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	405a      	eors	r2, r3
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	3308      	adds	r3, #8
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	4013      	ands	r3, r2
 8019830:	2b00      	cmp	r3, #0
 8019832:	d10d      	bne.n	8019850 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	3308      	adds	r3, #8
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	43da      	mvns	r2, r3
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	3308      	adds	r3, #8
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019848:	429a      	cmp	r2, r3
 801984a:	d101      	bne.n	8019850 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801984c:	2301      	movs	r3, #1
 801984e:	e000      	b.n	8019852 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019850:	2300      	movs	r3, #0
  }
}
 8019852:	4618      	mov	r0, r3
 8019854:	3714      	adds	r7, #20
 8019856:	46bd      	mov	sp, r7
 8019858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985c:	4770      	bx	lr
	...

08019860 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019860:	b480      	push	{r7}
 8019862:	b08d      	sub	sp, #52	@ 0x34
 8019864:	af00      	add	r7, sp, #0
 8019866:	60f8      	str	r0, [r7, #12]
 8019868:	60b9      	str	r1, [r7, #8]
 801986a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801986c:	2300      	movs	r3, #0
 801986e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801987a:	f107 0318 	add.w	r3, r7, #24
 801987e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019880:	2300      	movs	r3, #0
 8019882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019886:	e058      	b.n	801993a <ip4addr_ntoa_r+0xda>
    i = 0;
 8019888:	2300      	movs	r3, #0
 801988a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019890:	781a      	ldrb	r2, [r3, #0]
 8019892:	4b32      	ldr	r3, [pc, #200]	@ (801995c <ip4addr_ntoa_r+0xfc>)
 8019894:	fba3 1302 	umull	r1, r3, r3, r2
 8019898:	08d9      	lsrs	r1, r3, #3
 801989a:	460b      	mov	r3, r1
 801989c:	009b      	lsls	r3, r3, #2
 801989e:	440b      	add	r3, r1
 80198a0:	005b      	lsls	r3, r3, #1
 80198a2:	1ad3      	subs	r3, r2, r3
 80198a4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80198a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	4a2c      	ldr	r2, [pc, #176]	@ (801995c <ip4addr_ntoa_r+0xfc>)
 80198ac:	fba2 2303 	umull	r2, r3, r2, r3
 80198b0:	08db      	lsrs	r3, r3, #3
 80198b2:	b2da      	uxtb	r2, r3
 80198b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198b6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80198b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80198bc:	1c5a      	adds	r2, r3, #1
 80198be:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80198c2:	4619      	mov	r1, r3
 80198c4:	7ffb      	ldrb	r3, [r7, #31]
 80198c6:	3330      	adds	r3, #48	@ 0x30
 80198c8:	b2da      	uxtb	r2, r3
 80198ca:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80198ce:	443b      	add	r3, r7
 80198d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80198d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d1d8      	bne.n	801988e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80198dc:	e011      	b.n	8019902 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80198de:	6a3b      	ldr	r3, [r7, #32]
 80198e0:	1c5a      	adds	r2, r3, #1
 80198e2:	623a      	str	r2, [r7, #32]
 80198e4:	687a      	ldr	r2, [r7, #4]
 80198e6:	429a      	cmp	r2, r3
 80198e8:	dc01      	bgt.n	80198ee <ip4addr_ntoa_r+0x8e>
        return NULL;
 80198ea:	2300      	movs	r3, #0
 80198ec:	e030      	b.n	8019950 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80198ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80198f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198f4:	1c59      	adds	r1, r3, #1
 80198f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80198f8:	3230      	adds	r2, #48	@ 0x30
 80198fa:	443a      	add	r2, r7
 80198fc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019900:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8019902:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019906:	1e5a      	subs	r2, r3, #1
 8019908:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801990c:	2b00      	cmp	r3, #0
 801990e:	d1e6      	bne.n	80198de <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019910:	6a3b      	ldr	r3, [r7, #32]
 8019912:	1c5a      	adds	r2, r3, #1
 8019914:	623a      	str	r2, [r7, #32]
 8019916:	687a      	ldr	r2, [r7, #4]
 8019918:	429a      	cmp	r2, r3
 801991a:	dc01      	bgt.n	8019920 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801991c:	2300      	movs	r3, #0
 801991e:	e017      	b.n	8019950 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019922:	1c5a      	adds	r2, r3, #1
 8019924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019926:	222e      	movs	r2, #46	@ 0x2e
 8019928:	701a      	strb	r2, [r3, #0]
    ap++;
 801992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801992c:	3301      	adds	r3, #1
 801992e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019934:	3301      	adds	r3, #1
 8019936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801993a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801993e:	2b03      	cmp	r3, #3
 8019940:	d9a2      	bls.n	8019888 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019944:	3b01      	subs	r3, #1
 8019946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801994a:	2200      	movs	r2, #0
 801994c:	701a      	strb	r2, [r3, #0]
  return buf;
 801994e:	68bb      	ldr	r3, [r7, #8]
}
 8019950:	4618      	mov	r0, r3
 8019952:	3734      	adds	r7, #52	@ 0x34
 8019954:	46bd      	mov	sp, r7
 8019956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801995a:	4770      	bx	lr
 801995c:	cccccccd 	.word	0xcccccccd

08019960 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b084      	sub	sp, #16
 8019964:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019966:	2300      	movs	r3, #0
 8019968:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801996a:	4b12      	ldr	r3, [pc, #72]	@ (80199b4 <ip_reass_tmr+0x54>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019970:	e018      	b.n	80199a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	7fdb      	ldrb	r3, [r3, #31]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d00b      	beq.n	8019992 <ip_reass_tmr+0x32>
      r->timer--;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	7fdb      	ldrb	r3, [r3, #31]
 801997e:	3b01      	subs	r3, #1
 8019980:	b2da      	uxtb	r2, r3
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	60fb      	str	r3, [r7, #12]
 8019990:	e008      	b.n	80199a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801999c:	68b9      	ldr	r1, [r7, #8]
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	f000 f80a 	bl	80199b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d1e3      	bne.n	8019972 <ip_reass_tmr+0x12>
     }
   }
}
 80199aa:	bf00      	nop
 80199ac:	bf00      	nop
 80199ae:	3710      	adds	r7, #16
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}
 80199b4:	24007818 	.word	0x24007818

080199b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b088      	sub	sp, #32
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80199c2:	2300      	movs	r3, #0
 80199c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80199c6:	683a      	ldr	r2, [r7, #0]
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d105      	bne.n	80199da <ip_reass_free_complete_datagram+0x22>
 80199ce:	4b45      	ldr	r3, [pc, #276]	@ (8019ae4 <ip_reass_free_complete_datagram+0x12c>)
 80199d0:	22ab      	movs	r2, #171	@ 0xab
 80199d2:	4945      	ldr	r1, [pc, #276]	@ (8019ae8 <ip_reass_free_complete_datagram+0x130>)
 80199d4:	4845      	ldr	r0, [pc, #276]	@ (8019aec <ip_reass_free_complete_datagram+0x134>)
 80199d6:	f001 f965 	bl	801aca4 <iprintf>
  if (prev != NULL) {
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d00a      	beq.n	80199f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d005      	beq.n	80199f6 <ip_reass_free_complete_datagram+0x3e>
 80199ea:	4b3e      	ldr	r3, [pc, #248]	@ (8019ae4 <ip_reass_free_complete_datagram+0x12c>)
 80199ec:	22ad      	movs	r2, #173	@ 0xad
 80199ee:	4940      	ldr	r1, [pc, #256]	@ (8019af0 <ip_reass_free_complete_datagram+0x138>)
 80199f0:	483e      	ldr	r0, [pc, #248]	@ (8019aec <ip_reass_free_complete_datagram+0x134>)
 80199f2:	f001 f957 	bl	801aca4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	685b      	ldr	r3, [r3, #4]
 80199fa:	685b      	ldr	r3, [r3, #4]
 80199fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	889b      	ldrh	r3, [r3, #4]
 8019a02:	b29b      	uxth	r3, r3
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d12a      	bne.n	8019a5e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	685b      	ldr	r3, [r3, #4]
 8019a0c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019a0e:	697b      	ldr	r3, [r7, #20]
 8019a10:	681a      	ldr	r2, [r3, #0]
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	6858      	ldr	r0, [r3, #4]
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	3308      	adds	r3, #8
 8019a1e:	2214      	movs	r2, #20
 8019a20:	4619      	mov	r1, r3
 8019a22:	f001 fa80 	bl	801af26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019a26:	2101      	movs	r1, #1
 8019a28:	69b8      	ldr	r0, [r7, #24]
 8019a2a:	f7ff fbc7 	bl	80191bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019a2e:	69b8      	ldr	r0, [r7, #24]
 8019a30:	f7f7 f92e 	bl	8010c90 <pbuf_clen>
 8019a34:	4603      	mov	r3, r0
 8019a36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019a38:	8bfa      	ldrh	r2, [r7, #30]
 8019a3a:	8a7b      	ldrh	r3, [r7, #18]
 8019a3c:	4413      	add	r3, r2
 8019a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a42:	db05      	blt.n	8019a50 <ip_reass_free_complete_datagram+0x98>
 8019a44:	4b27      	ldr	r3, [pc, #156]	@ (8019ae4 <ip_reass_free_complete_datagram+0x12c>)
 8019a46:	22bc      	movs	r2, #188	@ 0xbc
 8019a48:	492a      	ldr	r1, [pc, #168]	@ (8019af4 <ip_reass_free_complete_datagram+0x13c>)
 8019a4a:	4828      	ldr	r0, [pc, #160]	@ (8019aec <ip_reass_free_complete_datagram+0x134>)
 8019a4c:	f001 f92a 	bl	801aca4 <iprintf>
    pbufs_freed += clen;
 8019a50:	8bfa      	ldrh	r2, [r7, #30]
 8019a52:	8a7b      	ldrh	r3, [r7, #18]
 8019a54:	4413      	add	r3, r2
 8019a56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019a58:	69b8      	ldr	r0, [r7, #24]
 8019a5a:	f7f7 f87f 	bl	8010b5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019a64:	e01f      	b.n	8019aa6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019a6c:	69bb      	ldr	r3, [r7, #24]
 8019a6e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019a76:	68f8      	ldr	r0, [r7, #12]
 8019a78:	f7f7 f90a 	bl	8010c90 <pbuf_clen>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019a80:	8bfa      	ldrh	r2, [r7, #30]
 8019a82:	8a7b      	ldrh	r3, [r7, #18]
 8019a84:	4413      	add	r3, r2
 8019a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a8a:	db05      	blt.n	8019a98 <ip_reass_free_complete_datagram+0xe0>
 8019a8c:	4b15      	ldr	r3, [pc, #84]	@ (8019ae4 <ip_reass_free_complete_datagram+0x12c>)
 8019a8e:	22cc      	movs	r2, #204	@ 0xcc
 8019a90:	4918      	ldr	r1, [pc, #96]	@ (8019af4 <ip_reass_free_complete_datagram+0x13c>)
 8019a92:	4816      	ldr	r0, [pc, #88]	@ (8019aec <ip_reass_free_complete_datagram+0x134>)
 8019a94:	f001 f906 	bl	801aca4 <iprintf>
    pbufs_freed += clen;
 8019a98:	8bfa      	ldrh	r2, [r7, #30]
 8019a9a:	8a7b      	ldrh	r3, [r7, #18]
 8019a9c:	4413      	add	r3, r2
 8019a9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019aa0:	68f8      	ldr	r0, [r7, #12]
 8019aa2:	f7f7 f85b 	bl	8010b5c <pbuf_free>
  while (p != NULL) {
 8019aa6:	69bb      	ldr	r3, [r7, #24]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d1dc      	bne.n	8019a66 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019aac:	6839      	ldr	r1, [r7, #0]
 8019aae:	6878      	ldr	r0, [r7, #4]
 8019ab0:	f000 f8c2 	bl	8019c38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8019ab4:	4b10      	ldr	r3, [pc, #64]	@ (8019af8 <ip_reass_free_complete_datagram+0x140>)
 8019ab6:	881b      	ldrh	r3, [r3, #0]
 8019ab8:	8bfa      	ldrh	r2, [r7, #30]
 8019aba:	429a      	cmp	r2, r3
 8019abc:	d905      	bls.n	8019aca <ip_reass_free_complete_datagram+0x112>
 8019abe:	4b09      	ldr	r3, [pc, #36]	@ (8019ae4 <ip_reass_free_complete_datagram+0x12c>)
 8019ac0:	22d2      	movs	r2, #210	@ 0xd2
 8019ac2:	490e      	ldr	r1, [pc, #56]	@ (8019afc <ip_reass_free_complete_datagram+0x144>)
 8019ac4:	4809      	ldr	r0, [pc, #36]	@ (8019aec <ip_reass_free_complete_datagram+0x134>)
 8019ac6:	f001 f8ed 	bl	801aca4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8019aca:	4b0b      	ldr	r3, [pc, #44]	@ (8019af8 <ip_reass_free_complete_datagram+0x140>)
 8019acc:	881a      	ldrh	r2, [r3, #0]
 8019ace:	8bfb      	ldrh	r3, [r7, #30]
 8019ad0:	1ad3      	subs	r3, r2, r3
 8019ad2:	b29a      	uxth	r2, r3
 8019ad4:	4b08      	ldr	r3, [pc, #32]	@ (8019af8 <ip_reass_free_complete_datagram+0x140>)
 8019ad6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019ad8:	8bfb      	ldrh	r3, [r7, #30]
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3720      	adds	r7, #32
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	0801ef68 	.word	0x0801ef68
 8019ae8:	0801efd8 	.word	0x0801efd8
 8019aec:	0801efe4 	.word	0x0801efe4
 8019af0:	0801f00c 	.word	0x0801f00c
 8019af4:	0801f020 	.word	0x0801f020
 8019af8:	2400781c 	.word	0x2400781c
 8019afc:	0801f040 	.word	0x0801f040

08019b00 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b08a      	sub	sp, #40	@ 0x28
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019b0e:	2300      	movs	r3, #0
 8019b10:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019b12:	2300      	movs	r3, #0
 8019b14:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019b16:	2300      	movs	r3, #0
 8019b18:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019b1e:	4b28      	ldr	r3, [pc, #160]	@ (8019bc0 <ip_reass_remove_oldest_datagram+0xc0>)
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019b24:	e030      	b.n	8019b88 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b28:	695a      	ldr	r2, [r3, #20]
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	68db      	ldr	r3, [r3, #12]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d10c      	bne.n	8019b4c <ip_reass_remove_oldest_datagram+0x4c>
 8019b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b34:	699a      	ldr	r2, [r3, #24]
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	691b      	ldr	r3, [r3, #16]
 8019b3a:	429a      	cmp	r2, r3
 8019b3c:	d106      	bne.n	8019b4c <ip_reass_remove_oldest_datagram+0x4c>
 8019b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b40:	899a      	ldrh	r2, [r3, #12]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	889b      	ldrh	r3, [r3, #4]
 8019b46:	b29b      	uxth	r3, r3
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	d014      	beq.n	8019b76 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019b4c:	693b      	ldr	r3, [r7, #16]
 8019b4e:	3301      	adds	r3, #1
 8019b50:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019b52:	6a3b      	ldr	r3, [r7, #32]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d104      	bne.n	8019b62 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b5a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b5c:	69fb      	ldr	r3, [r7, #28]
 8019b5e:	61bb      	str	r3, [r7, #24]
 8019b60:	e009      	b.n	8019b76 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b64:	7fda      	ldrb	r2, [r3, #31]
 8019b66:	6a3b      	ldr	r3, [r7, #32]
 8019b68:	7fdb      	ldrb	r3, [r3, #31]
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	d803      	bhi.n	8019b76 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b70:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b72:	69fb      	ldr	r3, [r7, #28]
 8019b74:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d001      	beq.n	8019b82 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b80:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d1cb      	bne.n	8019b26 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019b8e:	6a3b      	ldr	r3, [r7, #32]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d008      	beq.n	8019ba6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019b94:	69b9      	ldr	r1, [r7, #24]
 8019b96:	6a38      	ldr	r0, [r7, #32]
 8019b98:	f7ff ff0e 	bl	80199b8 <ip_reass_free_complete_datagram>
 8019b9c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019b9e:	697a      	ldr	r2, [r7, #20]
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	4413      	add	r3, r2
 8019ba4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019ba6:	697a      	ldr	r2, [r7, #20]
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	da02      	bge.n	8019bb4 <ip_reass_remove_oldest_datagram+0xb4>
 8019bae:	693b      	ldr	r3, [r7, #16]
 8019bb0:	2b01      	cmp	r3, #1
 8019bb2:	dcac      	bgt.n	8019b0e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019bb4:	697b      	ldr	r3, [r7, #20]
}
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	3728      	adds	r7, #40	@ 0x28
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	24007818 	.word	0x24007818

08019bc4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b084      	sub	sp, #16
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
 8019bcc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019bce:	2004      	movs	r0, #4
 8019bd0:	f7f6 f958 	bl	800fe84 <memp_malloc>
 8019bd4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d110      	bne.n	8019bfe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019bdc:	6839      	ldr	r1, [r7, #0]
 8019bde:	6878      	ldr	r0, [r7, #4]
 8019be0:	f7ff ff8e 	bl	8019b00 <ip_reass_remove_oldest_datagram>
 8019be4:	4602      	mov	r2, r0
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	4293      	cmp	r3, r2
 8019bea:	dc03      	bgt.n	8019bf4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019bec:	2004      	movs	r0, #4
 8019bee:	f7f6 f949 	bl	800fe84 <memp_malloc>
 8019bf2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d101      	bne.n	8019bfe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	e016      	b.n	8019c2c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019bfe:	2220      	movs	r2, #32
 8019c00:	2100      	movs	r1, #0
 8019c02:	68f8      	ldr	r0, [r7, #12]
 8019c04:	f001 f907 	bl	801ae16 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	2203      	movs	r2, #3
 8019c0c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019c0e:	4b09      	ldr	r3, [pc, #36]	@ (8019c34 <ip_reass_enqueue_new_datagram+0x70>)
 8019c10:	681a      	ldr	r2, [r3, #0]
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019c16:	4a07      	ldr	r2, [pc, #28]	@ (8019c34 <ip_reass_enqueue_new_datagram+0x70>)
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	3308      	adds	r3, #8
 8019c20:	2214      	movs	r2, #20
 8019c22:	6879      	ldr	r1, [r7, #4]
 8019c24:	4618      	mov	r0, r3
 8019c26:	f001 f97e 	bl	801af26 <memcpy>
  return ipr;
 8019c2a:	68fb      	ldr	r3, [r7, #12]
}
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	3710      	adds	r7, #16
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}
 8019c34:	24007818 	.word	0x24007818

08019c38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019c42:	4b10      	ldr	r3, [pc, #64]	@ (8019c84 <ip_reass_dequeue_datagram+0x4c>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d104      	bne.n	8019c56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	4a0c      	ldr	r2, [pc, #48]	@ (8019c84 <ip_reass_dequeue_datagram+0x4c>)
 8019c52:	6013      	str	r3, [r2, #0]
 8019c54:	e00d      	b.n	8019c72 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d106      	bne.n	8019c6a <ip_reass_dequeue_datagram+0x32>
 8019c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8019c88 <ip_reass_dequeue_datagram+0x50>)
 8019c5e:	f240 1245 	movw	r2, #325	@ 0x145
 8019c62:	490a      	ldr	r1, [pc, #40]	@ (8019c8c <ip_reass_dequeue_datagram+0x54>)
 8019c64:	480a      	ldr	r0, [pc, #40]	@ (8019c90 <ip_reass_dequeue_datagram+0x58>)
 8019c66:	f001 f81d 	bl	801aca4 <iprintf>
    prev->next = ipr->next;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681a      	ldr	r2, [r3, #0]
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019c72:	6879      	ldr	r1, [r7, #4]
 8019c74:	2004      	movs	r0, #4
 8019c76:	f7f6 f97b 	bl	800ff70 <memp_free>
}
 8019c7a:	bf00      	nop
 8019c7c:	3708      	adds	r7, #8
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd80      	pop	{r7, pc}
 8019c82:	bf00      	nop
 8019c84:	24007818 	.word	0x24007818
 8019c88:	0801ef68 	.word	0x0801ef68
 8019c8c:	0801f05c 	.word	0x0801f05c
 8019c90:	0801efe4 	.word	0x0801efe4

08019c94 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b08c      	sub	sp, #48	@ 0x30
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	60f8      	str	r0, [r7, #12]
 8019c9c:	60b9      	str	r1, [r7, #8]
 8019c9e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8019cae:	69fb      	ldr	r3, [r7, #28]
 8019cb0:	885b      	ldrh	r3, [r3, #2]
 8019cb2:	b29b      	uxth	r3, r3
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f7f5 fcd9 	bl	800f66c <lwip_htons>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	69fb      	ldr	r3, [r7, #28]
 8019cc0:	781b      	ldrb	r3, [r3, #0]
 8019cc2:	f003 030f 	and.w	r3, r3, #15
 8019cc6:	b29b      	uxth	r3, r3
 8019cc8:	009b      	lsls	r3, r3, #2
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	1ad3      	subs	r3, r2, r3
 8019cce:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019cd0:	69fb      	ldr	r3, [r7, #28]
 8019cd2:	88db      	ldrh	r3, [r3, #6]
 8019cd4:	b29b      	uxth	r3, r3
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	f7f5 fcc8 	bl	800f66c <lwip_htons>
 8019cdc:	4603      	mov	r3, r0
 8019cde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ce2:	b29b      	uxth	r3, r3
 8019ce4:	00db      	lsls	r3, r3, #3
 8019ce6:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	701a      	strb	r2, [r3, #0]
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	705a      	strb	r2, [r3, #1]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	709a      	strb	r2, [r3, #2]
 8019cfc:	2200      	movs	r2, #0
 8019cfe:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d02:	8b3a      	ldrh	r2, [r7, #24]
 8019d04:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8019d06:	8b3a      	ldrh	r2, [r7, #24]
 8019d08:	8b7b      	ldrh	r3, [r7, #26]
 8019d0a:	4413      	add	r3, r2
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d10:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	685b      	ldr	r3, [r3, #4]
 8019d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d18:	e061      	b.n	8019dde <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8019d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8019d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d22:	889b      	ldrh	r3, [r3, #4]
 8019d24:	b29a      	uxth	r2, r3
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	889b      	ldrh	r3, [r3, #4]
 8019d2a:	b29b      	uxth	r3, r3
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d232      	bcs.n	8019d96 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d34:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d01f      	beq.n	8019d7c <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d3e:	889b      	ldrh	r3, [r3, #4]
 8019d40:	b29a      	uxth	r2, r3
 8019d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d44:	88db      	ldrh	r3, [r3, #6]
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	f0c0 80e3 	bcc.w	8019f14 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 8019d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d50:	88db      	ldrh	r3, [r3, #6]
 8019d52:	b29a      	uxth	r2, r3
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	889b      	ldrh	r3, [r3, #4]
 8019d58:	b29b      	uxth	r3, r3
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	f200 80da 	bhi.w	8019f14 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d62:	68ba      	ldr	r2, [r7, #8]
 8019d64:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d68:	88db      	ldrh	r3, [r3, #6]
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d6e:	889b      	ldrh	r3, [r3, #4]
 8019d70:	b29b      	uxth	r3, r3
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d037      	beq.n	8019de6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019d76:	2300      	movs	r3, #0
 8019d78:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019d7a:	e034      	b.n	8019de6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8019d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d7e:	88db      	ldrh	r3, [r3, #6]
 8019d80:	b29a      	uxth	r2, r3
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	889b      	ldrh	r3, [r3, #4]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	f200 80c5 	bhi.w	8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	68ba      	ldr	r2, [r7, #8]
 8019d92:	605a      	str	r2, [r3, #4]
      break;
 8019d94:	e027      	b.n	8019de6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8019d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d98:	889b      	ldrh	r3, [r3, #4]
 8019d9a:	b29a      	uxth	r2, r3
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	889b      	ldrh	r3, [r3, #4]
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	429a      	cmp	r2, r3
 8019da4:	f000 80ba 	beq.w	8019f1c <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019daa:	889b      	ldrh	r3, [r3, #4]
 8019dac:	b29a      	uxth	r2, r3
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	88db      	ldrh	r3, [r3, #6]
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	429a      	cmp	r2, r3
 8019db6:	f0c0 80b3 	bcc.w	8019f20 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d009      	beq.n	8019dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 8019dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dc2:	88db      	ldrh	r3, [r3, #6]
 8019dc4:	b29a      	uxth	r2, r3
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	889b      	ldrh	r3, [r3, #4]
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d001      	beq.n	8019dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8019dda:	697b      	ldr	r3, [r7, #20]
 8019ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8019dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d19a      	bne.n	8019d1a <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 8019de4:	e000      	b.n	8019de8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 8019de6:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d12d      	bne.n	8019e4a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 8019dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d01c      	beq.n	8019e2e <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df6:	88db      	ldrh	r3, [r3, #6]
 8019df8:	b29a      	uxth	r2, r3
 8019dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dfc:	889b      	ldrh	r3, [r3, #4]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d906      	bls.n	8019e12 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 8019e04:	4b51      	ldr	r3, [pc, #324]	@ (8019f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019e06:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8019e0a:	4951      	ldr	r1, [pc, #324]	@ (8019f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e0c:	4851      	ldr	r0, [pc, #324]	@ (8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019e0e:	f000 ff49 	bl	801aca4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e14:	68ba      	ldr	r2, [r7, #8]
 8019e16:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e1a:	88db      	ldrh	r3, [r3, #6]
 8019e1c:	b29a      	uxth	r2, r3
 8019e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e20:	889b      	ldrh	r3, [r3, #4]
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	429a      	cmp	r2, r3
 8019e26:	d010      	beq.n	8019e4a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8019e28:	2300      	movs	r3, #0
 8019e2a:	623b      	str	r3, [r7, #32]
 8019e2c:	e00d      	b.n	8019e4a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d006      	beq.n	8019e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8019e36:	4b45      	ldr	r3, [pc, #276]	@ (8019f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019e38:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8019e3c:	4946      	ldr	r1, [pc, #280]	@ (8019f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e3e:	4845      	ldr	r0, [pc, #276]	@ (8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019e40:	f000 ff30 	bl	801aca4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	68ba      	ldr	r2, [r7, #8]
 8019e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d105      	bne.n	8019e5c <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	7f9b      	ldrb	r3, [r3, #30]
 8019e54:	f003 0301 	and.w	r3, r3, #1
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d059      	beq.n	8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8019e5c:	6a3b      	ldr	r3, [r7, #32]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d04f      	beq.n	8019f02 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	685b      	ldr	r3, [r3, #4]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d006      	beq.n	8019e78 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	685b      	ldr	r3, [r3, #4]
 8019e70:	889b      	ldrh	r3, [r3, #4]
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d002      	beq.n	8019e7e <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8019e78:	2300      	movs	r3, #0
 8019e7a:	623b      	str	r3, [r7, #32]
 8019e7c:	e041      	b.n	8019f02 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e80:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8019e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019e88:	e012      	b.n	8019eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8019e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8019e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e92:	88db      	ldrh	r3, [r3, #6]
 8019e94:	b29a      	uxth	r2, r3
 8019e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e98:	889b      	ldrh	r3, [r3, #4]
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d002      	beq.n	8019ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	623b      	str	r3, [r7, #32]
            break;
 8019ea4:	e007      	b.n	8019eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8019ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1e9      	bne.n	8019e8a <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019eb6:	6a3b      	ldr	r3, [r7, #32]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d022      	beq.n	8019f02 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d106      	bne.n	8019ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 8019ec4:	4b21      	ldr	r3, [pc, #132]	@ (8019f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019ec6:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 8019eca:	4924      	ldr	r1, [pc, #144]	@ (8019f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019ecc:	4821      	ldr	r0, [pc, #132]	@ (8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019ece:	f000 fee9 	bl	801aca4 <iprintf>
          LWIP_ASSERT("sanity check",
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	685b      	ldr	r3, [r3, #4]
 8019ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019eda:	429a      	cmp	r2, r3
 8019edc:	d106      	bne.n	8019eec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 8019ede:	4b1b      	ldr	r3, [pc, #108]	@ (8019f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019ee0:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8019ee4:	491d      	ldr	r1, [pc, #116]	@ (8019f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019ee6:	481b      	ldr	r0, [pc, #108]	@ (8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019ee8:	f000 fedc 	bl	801aca4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d006      	beq.n	8019f02 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 8019ef4:	4b15      	ldr	r3, [pc, #84]	@ (8019f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019ef6:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8019efa:	4919      	ldr	r1, [pc, #100]	@ (8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019efc:	4815      	ldr	r0, [pc, #84]	@ (8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019efe:	f000 fed1 	bl	801aca4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019f02:	6a3b      	ldr	r3, [r7, #32]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	bf14      	ite	ne
 8019f08:	2301      	movne	r3, #1
 8019f0a:	2300      	moveq	r3, #0
 8019f0c:	b2db      	uxtb	r3, r3
 8019f0e:	e018      	b.n	8019f42 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019f10:	2300      	movs	r3, #0
 8019f12:	e016      	b.n	8019f42 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8019f14:	bf00      	nop
 8019f16:	e004      	b.n	8019f22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8019f18:	bf00      	nop
 8019f1a:	e002      	b.n	8019f22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8019f1c:	bf00      	nop
 8019f1e:	e000      	b.n	8019f22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8019f20:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8019f22:	68b8      	ldr	r0, [r7, #8]
 8019f24:	f7f6 feb4 	bl	8010c90 <pbuf_clen>
 8019f28:	4603      	mov	r3, r0
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019f2e:	881b      	ldrh	r3, [r3, #0]
 8019f30:	1a9b      	subs	r3, r3, r2
 8019f32:	b29a      	uxth	r2, r3
 8019f34:	4b0b      	ldr	r3, [pc, #44]	@ (8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019f36:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8019f38:	68b8      	ldr	r0, [r7, #8]
 8019f3a:	f7f6 fe0f 	bl	8010b5c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f3e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	3730      	adds	r7, #48	@ 0x30
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}
 8019f4a:	bf00      	nop
 8019f4c:	0801ef68 	.word	0x0801ef68
 8019f50:	0801f078 	.word	0x0801f078
 8019f54:	0801efe4 	.word	0x0801efe4
 8019f58:	0801f098 	.word	0x0801f098
 8019f5c:	0801f0d0 	.word	0x0801f0d0
 8019f60:	0801f0e0 	.word	0x0801f0e0
 8019f64:	2400781c 	.word	0x2400781c

08019f68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b08e      	sub	sp, #56	@ 0x38
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8019f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	f003 030f 	and.w	r3, r3, #15
 8019f7e:	2b05      	cmp	r3, #5
 8019f80:	f040 8130 	bne.w	801a1e4 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f86:	88db      	ldrh	r3, [r3, #6]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	f7f5 fb6e 	bl	800f66c <lwip_htons>
 8019f90:	4603      	mov	r3, r0
 8019f92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f96:	b29b      	uxth	r3, r3
 8019f98:	00db      	lsls	r3, r3, #3
 8019f9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8019f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f9e:	885b      	ldrh	r3, [r3, #2]
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7f5 fb62 	bl	800f66c <lwip_htons>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	461a      	mov	r2, r3
 8019fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fae:	781b      	ldrb	r3, [r3, #0]
 8019fb0:	f003 030f 	and.w	r3, r3, #15
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	009b      	lsls	r3, r3, #2
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	1ad3      	subs	r3, r2, r3
 8019fbc:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f7f6 fe66 	bl	8010c90 <pbuf_clen>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019fc8:	4b8e      	ldr	r3, [pc, #568]	@ (801a204 <ip4_reass+0x29c>)
 8019fca:	881b      	ldrh	r3, [r3, #0]
 8019fcc:	461a      	mov	r2, r3
 8019fce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019fd0:	4413      	add	r3, r2
 8019fd2:	2b0a      	cmp	r3, #10
 8019fd4:	dd10      	ble.n	8019ff8 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019fd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019fd8:	4619      	mov	r1, r3
 8019fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019fdc:	f7ff fd90 	bl	8019b00 <ip_reass_remove_oldest_datagram>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	f000 8100 	beq.w	801a1e8 <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019fe8:	4b86      	ldr	r3, [pc, #536]	@ (801a204 <ip4_reass+0x29c>)
 8019fea:	881b      	ldrh	r3, [r3, #0]
 8019fec:	461a      	mov	r2, r3
 8019fee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019ff0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019ff2:	2b0a      	cmp	r3, #10
 8019ff4:	f300 80f8 	bgt.w	801a1e8 <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019ff8:	4b83      	ldr	r3, [pc, #524]	@ (801a208 <ip4_reass+0x2a0>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ffe:	e015      	b.n	801a02c <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a002:	695a      	ldr	r2, [r3, #20]
 801a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a006:	68db      	ldr	r3, [r3, #12]
 801a008:	429a      	cmp	r2, r3
 801a00a:	d10c      	bne.n	801a026 <ip4_reass+0xbe>
 801a00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a00e:	699a      	ldr	r2, [r3, #24]
 801a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a012:	691b      	ldr	r3, [r3, #16]
 801a014:	429a      	cmp	r2, r3
 801a016:	d106      	bne.n	801a026 <ip4_reass+0xbe>
 801a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a01a:	899a      	ldrh	r2, [r3, #12]
 801a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a01e:	889b      	ldrh	r3, [r3, #4]
 801a020:	b29b      	uxth	r3, r3
 801a022:	429a      	cmp	r2, r3
 801a024:	d006      	beq.n	801a034 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d1e6      	bne.n	801a000 <ip4_reass+0x98>
 801a032:	e000      	b.n	801a036 <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a034:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d109      	bne.n	801a050 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a03c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a03e:	4619      	mov	r1, r3
 801a040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a042:	f7ff fdbf 	bl	8019bc4 <ip_reass_enqueue_new_datagram>
 801a046:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d11c      	bne.n	801a088 <ip4_reass+0x120>
      goto nullreturn;
 801a04e:	e0d0      	b.n	801a1f2 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a052:	88db      	ldrh	r3, [r3, #6]
 801a054:	b29b      	uxth	r3, r3
 801a056:	4618      	mov	r0, r3
 801a058:	f7f5 fb08 	bl	800f66c <lwip_htons>
 801a05c:	4603      	mov	r3, r0
 801a05e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a062:	2b00      	cmp	r3, #0
 801a064:	d110      	bne.n	801a088 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a068:	89db      	ldrh	r3, [r3, #14]
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7f5 fafe 	bl	800f66c <lwip_htons>
 801a070:	4603      	mov	r3, r0
 801a072:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a076:	2b00      	cmp	r3, #0
 801a078:	d006      	beq.n	801a088 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a07c:	3308      	adds	r3, #8
 801a07e:	2214      	movs	r2, #20
 801a080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a082:	4618      	mov	r0, r3
 801a084:	f000 ff4f 	bl	801af26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a08a:	88db      	ldrh	r3, [r3, #6]
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	f003 0320 	and.w	r3, r3, #32
 801a092:	2b00      	cmp	r3, #0
 801a094:	bf0c      	ite	eq
 801a096:	2301      	moveq	r3, #1
 801a098:	2300      	movne	r3, #0
 801a09a:	b2db      	uxtb	r3, r3
 801a09c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a09e:	69fb      	ldr	r3, [r7, #28]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d00e      	beq.n	801a0c2 <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 801a0a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a0a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a0a8:	4413      	add	r3, r2
 801a0aa:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a0ac:	8b7a      	ldrh	r2, [r7, #26]
 801a0ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	f0c0 809b 	bcc.w	801a1ec <ip4_reass+0x284>
 801a0b6:	8b7b      	ldrh	r3, [r7, #26]
 801a0b8:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a0bc:	4293      	cmp	r3, r2
 801a0be:	f200 8095 	bhi.w	801a1ec <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a0c2:	69fa      	ldr	r2, [r7, #28]
 801a0c4:	6879      	ldr	r1, [r7, #4]
 801a0c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a0c8:	f7ff fde4 	bl	8019c94 <ip_reass_chain_frag_into_datagram_and_validate>
 801a0cc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a0ce:	697b      	ldr	r3, [r7, #20]
 801a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d4:	f000 808c 	beq.w	801a1f0 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a0d8:	4b4a      	ldr	r3, [pc, #296]	@ (801a204 <ip4_reass+0x29c>)
 801a0da:	881a      	ldrh	r2, [r3, #0]
 801a0dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0de:	4413      	add	r3, r2
 801a0e0:	b29a      	uxth	r2, r3
 801a0e2:	4b48      	ldr	r3, [pc, #288]	@ (801a204 <ip4_reass+0x29c>)
 801a0e4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a0e6:	69fb      	ldr	r3, [r7, #28]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d00d      	beq.n	801a108 <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 801a0ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a0ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a0f0:	4413      	add	r3, r2
 801a0f2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0f6:	8a7a      	ldrh	r2, [r7, #18]
 801a0f8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0fc:	7f9b      	ldrb	r3, [r3, #30]
 801a0fe:	f043 0301 	orr.w	r3, r3, #1
 801a102:	b2da      	uxtb	r2, r3
 801a104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a106:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a108:	697b      	ldr	r3, [r7, #20]
 801a10a:	2b01      	cmp	r3, #1
 801a10c:	d168      	bne.n	801a1e0 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a110:	8b9b      	ldrh	r3, [r3, #28]
 801a112:	3314      	adds	r3, #20
 801a114:	b29a      	uxth	r2, r3
 801a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a118:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	685b      	ldr	r3, [r3, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a126:	685b      	ldr	r3, [r3, #4]
 801a128:	685b      	ldr	r3, [r3, #4]
 801a12a:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a12e:	3308      	adds	r3, #8
 801a130:	2214      	movs	r2, #20
 801a132:	4619      	mov	r1, r3
 801a134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a136:	f000 fef6 	bl	801af26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a13c:	8b9b      	ldrh	r3, [r3, #28]
 801a13e:	4618      	mov	r0, r3
 801a140:	f7f5 fa94 	bl	800f66c <lwip_htons>
 801a144:	4603      	mov	r3, r0
 801a146:	461a      	mov	r2, r3
 801a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a14a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a14e:	2200      	movs	r2, #0
 801a150:	719a      	strb	r2, [r3, #6]
 801a152:	2200      	movs	r2, #0
 801a154:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a158:	2200      	movs	r2, #0
 801a15a:	729a      	strb	r2, [r3, #10]
 801a15c:	2200      	movs	r2, #0
 801a15e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a166:	e00e      	b.n	801a186 <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 801a168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801a16e:	f06f 0113 	mvn.w	r1, #19
 801a172:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a174:	f7f6 fcce 	bl	8010b14 <pbuf_header>
      pbuf_cat(p, r);
 801a178:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a17a:	6878      	ldr	r0, [r7, #4]
 801a17c:	f7f6 fdc8 	bl	8010d10 <pbuf_cat>
      r = iprh->next_pbuf;
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d1ed      	bne.n	801a168 <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a18c:	4b1e      	ldr	r3, [pc, #120]	@ (801a208 <ip4_reass+0x2a0>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a192:	429a      	cmp	r2, r3
 801a194:	d102      	bne.n	801a19c <ip4_reass+0x234>
      ipr_prev = NULL;
 801a196:	2300      	movs	r3, #0
 801a198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a19a:	e010      	b.n	801a1be <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a19c:	4b1a      	ldr	r3, [pc, #104]	@ (801a208 <ip4_reass+0x2a0>)
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1a2:	e007      	b.n	801a1b4 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 801a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1aa:	429a      	cmp	r2, r3
 801a1ac:	d006      	beq.n	801a1bc <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d1f4      	bne.n	801a1a4 <ip4_reass+0x23c>
 801a1ba:	e000      	b.n	801a1be <ip4_reass+0x256>
          break;
 801a1bc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a1c2:	f7ff fd39 	bl	8019c38 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801a1c6:	6878      	ldr	r0, [r7, #4]
 801a1c8:	f7f6 fd62 	bl	8010c90 <pbuf_clen>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	461a      	mov	r2, r3
 801a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (801a204 <ip4_reass+0x29c>)
 801a1d2:	881b      	ldrh	r3, [r3, #0]
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	b29a      	uxth	r2, r3
 801a1d8:	4b0a      	ldr	r3, [pc, #40]	@ (801a204 <ip4_reass+0x29c>)
 801a1da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	e00c      	b.n	801a1fa <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e00a      	b.n	801a1fa <ip4_reass+0x292>
    goto nullreturn;
 801a1e4:	bf00      	nop
 801a1e6:	e004      	b.n	801a1f2 <ip4_reass+0x28a>
      goto nullreturn;
 801a1e8:	bf00      	nop
 801a1ea:	e002      	b.n	801a1f2 <ip4_reass+0x28a>
      goto nullreturn;
 801a1ec:	bf00      	nop
 801a1ee:	e000      	b.n	801a1f2 <ip4_reass+0x28a>
    goto nullreturn;
 801a1f0:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a1f2:	6878      	ldr	r0, [r7, #4]
 801a1f4:	f7f6 fcb2 	bl	8010b5c <pbuf_free>
  return NULL;
 801a1f8:	2300      	movs	r3, #0
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3738      	adds	r7, #56	@ 0x38
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	2400781c 	.word	0x2400781c
 801a208:	24007818 	.word	0x24007818

0801a20c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801a210:	2005      	movs	r0, #5
 801a212:	f7f5 fe37 	bl	800fe84 <memp_malloc>
 801a216:	4603      	mov	r3, r0
}
 801a218:	4618      	mov	r0, r3
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d106      	bne.n	801a238 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a22a:	4b07      	ldr	r3, [pc, #28]	@ (801a248 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a22c:	f240 22ae 	movw	r2, #686	@ 0x2ae
 801a230:	4906      	ldr	r1, [pc, #24]	@ (801a24c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a232:	4807      	ldr	r0, [pc, #28]	@ (801a250 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a234:	f000 fd36 	bl	801aca4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a238:	6879      	ldr	r1, [r7, #4]
 801a23a:	2005      	movs	r0, #5
 801a23c:	f7f5 fe98 	bl	800ff70 <memp_free>
}
 801a240:	bf00      	nop
 801a242:	3708      	adds	r7, #8
 801a244:	46bd      	mov	sp, r7
 801a246:	bd80      	pop	{r7, pc}
 801a248:	0801ef68 	.word	0x0801ef68
 801a24c:	0801f104 	.word	0x0801f104
 801a250:	0801efe4 	.word	0x0801efe4

0801a254 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d106      	bne.n	801a274 <ipfrag_free_pbuf_custom+0x20>
 801a266:	4b11      	ldr	r3, [pc, #68]	@ (801a2ac <ipfrag_free_pbuf_custom+0x58>)
 801a268:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 801a26c:	4910      	ldr	r1, [pc, #64]	@ (801a2b0 <ipfrag_free_pbuf_custom+0x5c>)
 801a26e:	4811      	ldr	r0, [pc, #68]	@ (801a2b4 <ipfrag_free_pbuf_custom+0x60>)
 801a270:	f000 fd18 	bl	801aca4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801a274:	68fa      	ldr	r2, [r7, #12]
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	429a      	cmp	r2, r3
 801a27a:	d006      	beq.n	801a28a <ipfrag_free_pbuf_custom+0x36>
 801a27c:	4b0b      	ldr	r3, [pc, #44]	@ (801a2ac <ipfrag_free_pbuf_custom+0x58>)
 801a27e:	f240 22b9 	movw	r2, #697	@ 0x2b9
 801a282:	490d      	ldr	r1, [pc, #52]	@ (801a2b8 <ipfrag_free_pbuf_custom+0x64>)
 801a284:	480b      	ldr	r0, [pc, #44]	@ (801a2b4 <ipfrag_free_pbuf_custom+0x60>)
 801a286:	f000 fd0d 	bl	801aca4 <iprintf>
  if (pcr->original != NULL) {
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	695b      	ldr	r3, [r3, #20]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d004      	beq.n	801a29c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	695b      	ldr	r3, [r3, #20]
 801a296:	4618      	mov	r0, r3
 801a298:	f7f6 fc60 	bl	8010b5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a29c:	68f8      	ldr	r0, [r7, #12]
 801a29e:	f7ff ffbd 	bl	801a21c <ip_frag_free_pbuf_custom_ref>
}
 801a2a2:	bf00      	nop
 801a2a4:	3710      	adds	r7, #16
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	0801ef68 	.word	0x0801ef68
 801a2b0:	0801f110 	.word	0x0801f110
 801a2b4:	0801efe4 	.word	0x0801efe4
 801a2b8:	0801f11c 	.word	0x0801f11c

0801a2bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b092      	sub	sp, #72	@ 0x48
 801a2c0:	af02      	add	r7, sp, #8
 801a2c2:	60f8      	str	r0, [r7, #12]
 801a2c4:	60b9      	str	r1, [r7, #8]
 801a2c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801a2d0:	3b14      	subs	r3, #20
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	da00      	bge.n	801a2d8 <ip4_frag+0x1c>
 801a2d6:	3307      	adds	r3, #7
 801a2d8:	10db      	asrs	r3, r3, #3
 801a2da:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a2dc:	2314      	movs	r3, #20
 801a2de:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 801a2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2ec:	781b      	ldrb	r3, [r3, #0]
 801a2ee:	f003 030f 	and.w	r3, r3, #15
 801a2f2:	2b05      	cmp	r3, #5
 801a2f4:	d009      	beq.n	801a30a <ip4_frag+0x4e>
 801a2f6:	4b7a      	ldr	r3, [pc, #488]	@ (801a4e0 <ip4_frag+0x224>)
 801a2f8:	f240 22e1 	movw	r2, #737	@ 0x2e1
 801a2fc:	4979      	ldr	r1, [pc, #484]	@ (801a4e4 <ip4_frag+0x228>)
 801a2fe:	487a      	ldr	r0, [pc, #488]	@ (801a4e8 <ip4_frag+0x22c>)
 801a300:	f000 fcd0 	bl	801aca4 <iprintf>
 801a304:	f06f 0305 	mvn.w	r3, #5
 801a308:	e0e6      	b.n	801a4d8 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a30c:	88db      	ldrh	r3, [r3, #6]
 801a30e:	b29b      	uxth	r3, r3
 801a310:	4618      	mov	r0, r3
 801a312:	f7f5 f9ab 	bl	800f66c <lwip_htons>
 801a316:	4603      	mov	r3, r0
 801a318:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 801a31a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a31c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a320:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801a322:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d009      	beq.n	801a340 <ip4_frag+0x84>
 801a32c:	4b6c      	ldr	r3, [pc, #432]	@ (801a4e0 <ip4_frag+0x224>)
 801a32e:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801a332:	496e      	ldr	r1, [pc, #440]	@ (801a4ec <ip4_frag+0x230>)
 801a334:	486c      	ldr	r0, [pc, #432]	@ (801a4e8 <ip4_frag+0x22c>)
 801a336:	f000 fcb5 	bl	801aca4 <iprintf>
 801a33a:	f06f 0305 	mvn.w	r3, #5
 801a33e:	e0cb      	b.n	801a4d8 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	891b      	ldrh	r3, [r3, #8]
 801a344:	3b14      	subs	r3, #20
 801a346:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 801a348:	e0bd      	b.n	801a4c6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801a34a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801a34c:	00da      	lsls	r2, r3, #3
 801a34e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a350:	4293      	cmp	r3, r2
 801a352:	bfa8      	it	ge
 801a354:	4613      	movge	r3, r2
 801a356:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a358:	2200      	movs	r2, #0
 801a35a:	2114      	movs	r1, #20
 801a35c:	2002      	movs	r0, #2
 801a35e:	f7f6 f885 	bl	801046c <pbuf_alloc>
 801a362:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801a364:	6a3b      	ldr	r3, [r7, #32]
 801a366:	2b00      	cmp	r3, #0
 801a368:	f000 80b3 	beq.w	801a4d2 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	895b      	ldrh	r3, [r3, #10]
 801a370:	2b13      	cmp	r3, #19
 801a372:	d806      	bhi.n	801a382 <ip4_frag+0xc6>
 801a374:	4b5a      	ldr	r3, [pc, #360]	@ (801a4e0 <ip4_frag+0x224>)
 801a376:	f44f 7242 	mov.w	r2, #776	@ 0x308
 801a37a:	495d      	ldr	r1, [pc, #372]	@ (801a4f0 <ip4_frag+0x234>)
 801a37c:	485a      	ldr	r0, [pc, #360]	@ (801a4e8 <ip4_frag+0x22c>)
 801a37e:	f000 fc91 	bl	801aca4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a382:	6a3b      	ldr	r3, [r7, #32]
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	2214      	movs	r2, #20
 801a388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a38a:	4618      	mov	r0, r3
 801a38c:	f000 fdcb 	bl	801af26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a390:	6a3b      	ldr	r3, [r7, #32]
 801a392:	685b      	ldr	r3, [r3, #4]
 801a394:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 801a396:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a398:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 801a39a:	e04f      	b.n	801a43c <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	895a      	ldrh	r2, [r3, #10]
 801a3a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a3a2:	1ad3      	subs	r3, r2, r3
 801a3a4:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a3a6:	8b7a      	ldrh	r2, [r7, #26]
 801a3a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a3aa:	4293      	cmp	r3, r2
 801a3ac:	bf28      	it	cs
 801a3ae:	4613      	movcs	r3, r2
 801a3b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a3b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d105      	bne.n	801a3c4 <ip4_frag+0x108>
        poff = 0;
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	60fb      	str	r3, [r7, #12]
        continue;
 801a3c2:	e03b      	b.n	801a43c <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a3c4:	f7ff ff22 	bl	801a20c <ip_frag_alloc_pbuf_custom_ref>
 801a3c8:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d103      	bne.n	801a3d8 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 801a3d0:	6a38      	ldr	r0, [r7, #32]
 801a3d2:	f7f6 fbc3 	bl	8010b5c <pbuf_free>
        goto memerr;
 801a3d6:	e07d      	b.n	801a4d4 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3d8:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a3e0:	4413      	add	r3, r2
 801a3e2:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 801a3e4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a3e6:	9201      	str	r2, [sp, #4]
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	2202      	movs	r2, #2
 801a3ee:	2004      	movs	r0, #4
 801a3f0:	f7f6 f9d6 	bl	80107a0 <pbuf_alloced_custom>
 801a3f4:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801a3f6:	693b      	ldr	r3, [r7, #16]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d106      	bne.n	801a40a <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a3fc:	6978      	ldr	r0, [r7, #20]
 801a3fe:	f7ff ff0d 	bl	801a21c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a402:	6a38      	ldr	r0, [r7, #32]
 801a404:	f7f6 fbaa 	bl	8010b5c <pbuf_free>
        goto memerr;
 801a408:	e064      	b.n	801a4d4 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801a40a:	68f8      	ldr	r0, [r7, #12]
 801a40c:	f7f6 fc58 	bl	8010cc0 <pbuf_ref>
      pcr->original = p;
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	68fa      	ldr	r2, [r7, #12]
 801a414:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a416:	697b      	ldr	r3, [r7, #20]
 801a418:	4a36      	ldr	r2, [pc, #216]	@ (801a4f4 <ip4_frag+0x238>)
 801a41a:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a41c:	6939      	ldr	r1, [r7, #16]
 801a41e:	6a38      	ldr	r0, [r7, #32]
 801a420:	f7f6 fc76 	bl	8010d10 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801a424:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801a426:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a428:	1ad3      	subs	r3, r2, r3
 801a42a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 801a42c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d004      	beq.n	801a43c <ip4_frag+0x180>
        poff = 0;
 801a432:	2300      	movs	r3, #0
 801a434:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a43c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d1ac      	bne.n	801a39c <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 801a442:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a444:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a446:	4413      	add	r3, r2
 801a448:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801a44e:	f1a3 0213 	sub.w	r2, r3, #19
 801a452:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a454:	429a      	cmp	r2, r3
 801a456:	bfcc      	ite	gt
 801a458:	2301      	movgt	r3, #1
 801a45a:	2300      	movle	r3, #0
 801a45c:	b2db      	uxtb	r3, r3
 801a45e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a460:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a466:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d103      	bne.n	801a476 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801a46e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a470:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a474:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a476:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a478:	4618      	mov	r0, r3
 801a47a:	f7f5 f8f7 	bl	800f66c <lwip_htons>
 801a47e:	4603      	mov	r3, r0
 801a480:	461a      	mov	r2, r3
 801a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a484:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801a486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a488:	3314      	adds	r3, #20
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7f5 f8ed 	bl	800f66c <lwip_htons>
 801a492:	4603      	mov	r3, r0
 801a494:	461a      	mov	r2, r3
 801a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a498:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a49c:	2200      	movs	r2, #0
 801a49e:	729a      	strb	r2, [r3, #10]
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	695b      	ldr	r3, [r3, #20]
 801a4a8:	687a      	ldr	r2, [r7, #4]
 801a4aa:	6a39      	ldr	r1, [r7, #32]
 801a4ac:	68b8      	ldr	r0, [r7, #8]
 801a4ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a4b0:	6a38      	ldr	r0, [r7, #32]
 801a4b2:	f7f6 fb53 	bl	8010b5c <pbuf_free>
    left -= fragsize;
 801a4b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a4b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a4ba:	1ad3      	subs	r3, r2, r3
 801a4bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 801a4be:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a4c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801a4c2:	4413      	add	r3, r2
 801a4c4:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 801a4c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	f47f af3e 	bne.w	801a34a <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	e002      	b.n	801a4d8 <ip4_frag+0x21c>
      goto memerr;
 801a4d2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a4d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	3740      	adds	r7, #64	@ 0x40
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}
 801a4e0:	0801ef68 	.word	0x0801ef68
 801a4e4:	0801f128 	.word	0x0801f128
 801a4e8:	0801efe4 	.word	0x0801efe4
 801a4ec:	0801f150 	.word	0x0801f150
 801a4f0:	0801f16c 	.word	0x0801f16c
 801a4f4:	0801a255 	.word	0x0801a255

0801a4f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b086      	sub	sp, #24
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801a502:	230e      	movs	r3, #14
 801a504:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	895b      	ldrh	r3, [r3, #10]
 801a50a:	2b0e      	cmp	r3, #14
 801a50c:	d977      	bls.n	801a5fe <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a514:	693b      	ldr	r3, [r7, #16]
 801a516:	7b1a      	ldrb	r2, [r3, #12]
 801a518:	7b5b      	ldrb	r3, [r3, #13]
 801a51a:	021b      	lsls	r3, r3, #8
 801a51c:	4313      	orrs	r3, r2
 801a51e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	781b      	ldrb	r3, [r3, #0]
 801a524:	f003 0301 	and.w	r3, r3, #1
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d023      	beq.n	801a574 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a52c:	693b      	ldr	r3, [r7, #16]
 801a52e:	781b      	ldrb	r3, [r3, #0]
 801a530:	2b01      	cmp	r3, #1
 801a532:	d10f      	bne.n	801a554 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a534:	693b      	ldr	r3, [r7, #16]
 801a536:	785b      	ldrb	r3, [r3, #1]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d11b      	bne.n	801a574 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a540:	2b5e      	cmp	r3, #94	@ 0x5e
 801a542:	d117      	bne.n	801a574 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	7b5b      	ldrb	r3, [r3, #13]
 801a548:	f043 0310 	orr.w	r3, r3, #16
 801a54c:	b2da      	uxtb	r2, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	735a      	strb	r2, [r3, #13]
 801a552:	e00f      	b.n	801a574 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	2206      	movs	r2, #6
 801a558:	4931      	ldr	r1, [pc, #196]	@ (801a620 <ethernet_input+0x128>)
 801a55a:	4618      	mov	r0, r3
 801a55c:	f000 fc4b 	bl	801adf6 <memcmp>
 801a560:	4603      	mov	r3, r0
 801a562:	2b00      	cmp	r3, #0
 801a564:	d106      	bne.n	801a574 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	7b5b      	ldrb	r3, [r3, #13]
 801a56a:	f043 0308 	orr.w	r3, r3, #8
 801a56e:	b2da      	uxtb	r2, r3
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a574:	89fb      	ldrh	r3, [r7, #14]
 801a576:	2b08      	cmp	r3, #8
 801a578:	d003      	beq.n	801a582 <ethernet_input+0x8a>
 801a57a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a57e:	d01e      	beq.n	801a5be <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a580:	e046      	b.n	801a610 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801a588:	f003 0308 	and.w	r3, r3, #8
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d038      	beq.n	801a602 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	895b      	ldrh	r3, [r3, #10]
 801a594:	461a      	mov	r2, r3
 801a596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a59a:	429a      	cmp	r2, r3
 801a59c:	db33      	blt.n	801a606 <ethernet_input+0x10e>
 801a59e:	8afb      	ldrh	r3, [r7, #22]
 801a5a0:	425b      	negs	r3, r3
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	b21b      	sxth	r3, r3
 801a5a6:	4619      	mov	r1, r3
 801a5a8:	6878      	ldr	r0, [r7, #4]
 801a5aa:	f7f6 fab3 	bl	8010b14 <pbuf_header>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d128      	bne.n	801a606 <ethernet_input+0x10e>
        ip4_input(p, netif);
 801a5b4:	6839      	ldr	r1, [r7, #0]
 801a5b6:	6878      	ldr	r0, [r7, #4]
 801a5b8:	f7fe fee2 	bl	8019380 <ip4_input>
      break;
 801a5bc:	e01d      	b.n	801a5fa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801a5c4:	f003 0308 	and.w	r3, r3, #8
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d01e      	beq.n	801a60a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	895b      	ldrh	r3, [r3, #10]
 801a5d0:	461a      	mov	r2, r3
 801a5d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a5d6:	429a      	cmp	r2, r3
 801a5d8:	db19      	blt.n	801a60e <ethernet_input+0x116>
 801a5da:	8afb      	ldrh	r3, [r7, #22]
 801a5dc:	425b      	negs	r3, r3
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	b21b      	sxth	r3, r3
 801a5e2:	4619      	mov	r1, r3
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7f6 fa95 	bl	8010b14 <pbuf_header>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d10e      	bne.n	801a60e <ethernet_input+0x116>
        etharp_input(p, netif);
 801a5f0:	6839      	ldr	r1, [r7, #0]
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f7fe f8ae 	bl	8018754 <etharp_input>
      break;
 801a5f8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	e00c      	b.n	801a618 <ethernet_input+0x120>
    goto free_and_return;
 801a5fe:	bf00      	nop
 801a600:	e006      	b.n	801a610 <ethernet_input+0x118>
        goto free_and_return;
 801a602:	bf00      	nop
 801a604:	e004      	b.n	801a610 <ethernet_input+0x118>
        goto free_and_return;
 801a606:	bf00      	nop
 801a608:	e002      	b.n	801a610 <ethernet_input+0x118>
        goto free_and_return;
 801a60a:	bf00      	nop
 801a60c:	e000      	b.n	801a610 <ethernet_input+0x118>
        goto free_and_return;
 801a60e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f7f6 faa3 	bl	8010b5c <pbuf_free>
  return ERR_OK;
 801a616:	2300      	movs	r3, #0
}
 801a618:	4618      	mov	r0, r3
 801a61a:	3718      	adds	r7, #24
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	0801f3f8 	.word	0x0801f3f8

0801a624 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b086      	sub	sp, #24
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	607a      	str	r2, [r7, #4]
 801a630:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a632:	8c3b      	ldrh	r3, [r7, #32]
 801a634:	4618      	mov	r0, r3
 801a636:	f7f5 f819 	bl	800f66c <lwip_htons>
 801a63a:	4603      	mov	r3, r0
 801a63c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801a63e:	210e      	movs	r1, #14
 801a640:	68b8      	ldr	r0, [r7, #8]
 801a642:	f7f6 fa67 	bl	8010b14 <pbuf_header>
 801a646:	4603      	mov	r3, r0
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d125      	bne.n	801a698 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801a64c:	68bb      	ldr	r3, [r7, #8]
 801a64e:	685b      	ldr	r3, [r3, #4]
 801a650:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	8afa      	ldrh	r2, [r7, #22]
 801a656:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801a658:	693b      	ldr	r3, [r7, #16]
 801a65a:	2206      	movs	r2, #6
 801a65c:	6839      	ldr	r1, [r7, #0]
 801a65e:	4618      	mov	r0, r3
 801a660:	f000 fc61 	bl	801af26 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 801a664:	693b      	ldr	r3, [r7, #16]
 801a666:	3306      	adds	r3, #6
 801a668:	2206      	movs	r2, #6
 801a66a:	6879      	ldr	r1, [r7, #4]
 801a66c:	4618      	mov	r0, r3
 801a66e:	f000 fc5a 	bl	801af26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a678:	2b06      	cmp	r3, #6
 801a67a:	d006      	beq.n	801a68a <ethernet_output+0x66>
 801a67c:	4b0a      	ldr	r3, [pc, #40]	@ (801a6a8 <ethernet_output+0x84>)
 801a67e:	f240 122b 	movw	r2, #299	@ 0x12b
 801a682:	490a      	ldr	r1, [pc, #40]	@ (801a6ac <ethernet_output+0x88>)
 801a684:	480a      	ldr	r0, [pc, #40]	@ (801a6b0 <ethernet_output+0x8c>)
 801a686:	f000 fb0d 	bl	801aca4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	699b      	ldr	r3, [r3, #24]
 801a68e:	68b9      	ldr	r1, [r7, #8]
 801a690:	68f8      	ldr	r0, [r7, #12]
 801a692:	4798      	blx	r3
 801a694:	4603      	mov	r3, r0
 801a696:	e002      	b.n	801a69e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a698:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a69a:	f06f 0301 	mvn.w	r3, #1
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3718      	adds	r7, #24
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}
 801a6a6:	bf00      	nop
 801a6a8:	0801f18c 	.word	0x0801f18c
 801a6ac:	0801f1f8 	.word	0x0801f1f8
 801a6b0:	0801f22c 	.word	0x0801f22c

0801a6b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b086      	sub	sp, #24
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
 801a6bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	60bb      	str	r3, [r7, #8]
 801a6c2:	2304      	movs	r3, #4
 801a6c4:	60fb      	str	r3, [r7, #12]
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	613b      	str	r3, [r7, #16]
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a6ce:	f107 0308 	add.w	r3, r7, #8
 801a6d2:	2100      	movs	r1, #0
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	f7ef ff9a 	bl	800a60e <osMessageCreate>
 801a6da:	4602      	mov	r2, r0
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d102      	bne.n	801a6ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a6ec:	e000      	b.n	801a6f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801a6ee:	2300      	movs	r3, #0
}
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	3718      	adds	r7, #24
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}

0801a6f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b082      	sub	sp, #8
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	4618      	mov	r0, r3
 801a706:	f7f0 f85f 	bl	800a7c8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	4618      	mov	r0, r3
 801a710:	f7f0 f870 	bl	800a7f4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a714:	bf00      	nop
 801a716:	3708      	adds	r7, #8
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}

0801a71c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b082      	sub	sp, #8
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
 801a724:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a726:	bf00      	nop
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	6839      	ldr	r1, [r7, #0]
 801a72e:	f04f 32ff 	mov.w	r2, #4294967295
 801a732:	4618      	mov	r0, r3
 801a734:	f7ef ff94 	bl	800a660 <osMessagePut>
 801a738:	4603      	mov	r3, r0
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d1f4      	bne.n	801a728 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801a73e:	bf00      	nop
 801a740:	bf00      	nop
 801a742:	3708      	adds	r7, #8
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}

0801a748 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b084      	sub	sp, #16
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
 801a750:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	6839      	ldr	r1, [r7, #0]
 801a758:	2200      	movs	r2, #0
 801a75a:	4618      	mov	r0, r3
 801a75c:	f7ef ff80 	bl	800a660 <osMessagePut>
 801a760:	4603      	mov	r3, r0
 801a762:	2b00      	cmp	r3, #0
 801a764:	d102      	bne.n	801a76c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a766:	2300      	movs	r3, #0
 801a768:	73fb      	strb	r3, [r7, #15]
 801a76a:	e001      	b.n	801a770 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a76c:	23ff      	movs	r3, #255	@ 0xff
 801a76e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a774:	4618      	mov	r0, r3
 801a776:	3710      	adds	r7, #16
 801a778:	46bd      	mov	sp, r7
 801a77a:	bd80      	pop	{r7, pc}

0801a77c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b08c      	sub	sp, #48	@ 0x30
 801a780:	af00      	add	r7, sp, #0
 801a782:	61f8      	str	r0, [r7, #28]
 801a784:	61b9      	str	r1, [r7, #24]
 801a786:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a788:	f7ef fd6b 	bl	800a262 <osKernelSysTick>
 801a78c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a78e:	697b      	ldr	r3, [r7, #20]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d017      	beq.n	801a7c4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a794:	69fb      	ldr	r3, [r7, #28]
 801a796:	6819      	ldr	r1, [r3, #0]
 801a798:	f107 0320 	add.w	r3, r7, #32
 801a79c:	697a      	ldr	r2, [r7, #20]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7ef ff9e 	bl	800a6e0 <osMessageGet>

    if(event.status == osEventMessage)
 801a7a4:	6a3b      	ldr	r3, [r7, #32]
 801a7a6:	2b10      	cmp	r3, #16
 801a7a8:	d109      	bne.n	801a7be <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ac:	461a      	mov	r2, r3
 801a7ae:	69bb      	ldr	r3, [r7, #24]
 801a7b0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a7b2:	f7ef fd56 	bl	800a262 <osKernelSysTick>
 801a7b6:	4602      	mov	r2, r0
 801a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	e019      	b.n	801a7f2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a7be:	f04f 33ff 	mov.w	r3, #4294967295
 801a7c2:	e016      	b.n	801a7f2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a7c4:	69fb      	ldr	r3, [r7, #28]
 801a7c6:	6819      	ldr	r1, [r3, #0]
 801a7c8:	463b      	mov	r3, r7
 801a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f7ef ff86 	bl	800a6e0 <osMessageGet>
 801a7d4:	f107 0320 	add.w	r3, r7, #32
 801a7d8:	463a      	mov	r2, r7
 801a7da:	ca07      	ldmia	r2, {r0, r1, r2}
 801a7dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7e2:	461a      	mov	r2, r3
 801a7e4:	69bb      	ldr	r3, [r7, #24]
 801a7e6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a7e8:	f7ef fd3b 	bl	800a262 <osKernelSysTick>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7f0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3730      	adds	r7, #48	@ 0x30
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bd80      	pop	{r7, pc}

0801a7fa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a7fa:	b580      	push	{r7, lr}
 801a7fc:	b086      	sub	sp, #24
 801a7fe:	af00      	add	r7, sp, #0
 801a800:	6078      	str	r0, [r7, #4]
 801a802:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	6819      	ldr	r1, [r3, #0]
 801a808:	f107 030c 	add.w	r3, r7, #12
 801a80c:	2200      	movs	r2, #0
 801a80e:	4618      	mov	r0, r3
 801a810:	f7ef ff66 	bl	800a6e0 <osMessageGet>

  if(event.status == osEventMessage)
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	2b10      	cmp	r3, #16
 801a818:	d105      	bne.n	801a826 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	461a      	mov	r2, r3
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a822:	2300      	movs	r3, #0
 801a824:	e001      	b.n	801a82a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a826:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a82a:	4618      	mov	r0, r3
 801a82c:	3718      	adds	r7, #24
 801a82e:	46bd      	mov	sp, r7
 801a830:	bd80      	pop	{r7, pc}

0801a832 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a832:	b480      	push	{r7}
 801a834:	b083      	sub	sp, #12
 801a836:	af00      	add	r7, sp, #0
 801a838:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d101      	bne.n	801a846 <sys_mbox_valid+0x14>
    return 0;
 801a842:	2300      	movs	r3, #0
 801a844:	e000      	b.n	801a848 <sys_mbox_valid+0x16>
  else
    return 1;
 801a846:	2301      	movs	r3, #1
}
 801a848:	4618      	mov	r0, r3
 801a84a:	370c      	adds	r7, #12
 801a84c:	46bd      	mov	sp, r7
 801a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a852:	4770      	bx	lr

0801a854 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a854:	b480      	push	{r7}
 801a856:	b083      	sub	sp, #12
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	2200      	movs	r2, #0
 801a860:	601a      	str	r2, [r3, #0]
}
 801a862:	bf00      	nop
 801a864:	370c      	adds	r7, #12
 801a866:	46bd      	mov	sp, r7
 801a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86c:	4770      	bx	lr

0801a86e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a86e:	b580      	push	{r7, lr}
 801a870:	b084      	sub	sp, #16
 801a872:	af00      	add	r7, sp, #0
 801a874:	6078      	str	r0, [r7, #4]
 801a876:	460b      	mov	r3, r1
 801a878:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a87a:	2300      	movs	r3, #0
 801a87c:	60bb      	str	r3, [r7, #8]
 801a87e:	2300      	movs	r3, #0
 801a880:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a882:	f107 0308 	add.w	r3, r7, #8
 801a886:	2101      	movs	r1, #1
 801a888:	4618      	mov	r0, r3
 801a88a:	f7ef fdf7 	bl	800a47c <osSemaphoreCreate>
 801a88e:	4602      	mov	r2, r0
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d102      	bne.n	801a8a2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a89c:	f04f 33ff 	mov.w	r3, #4294967295
 801a8a0:	e009      	b.n	801a8b6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a8a2:	78fb      	ldrb	r3, [r7, #3]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d105      	bne.n	801a8b4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7ef fe16 	bl	800a4e0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a8b4:	2300      	movs	r3, #0
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3710      	adds	r7, #16
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}

0801a8be <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	b084      	sub	sp, #16
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
 801a8c6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a8c8:	f7ef fccb 	bl	800a262 <osKernelSysTick>
 801a8cc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d011      	beq.n	801a8f8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	6839      	ldr	r1, [r7, #0]
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7ef fe00 	bl	800a4e0 <osSemaphoreWait>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d105      	bne.n	801a8f2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a8e6:	f7ef fcbc 	bl	800a262 <osKernelSysTick>
 801a8ea:	4602      	mov	r2, r0
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	1ad3      	subs	r3, r2, r3
 801a8f0:	e012      	b.n	801a918 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a8f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f6:	e00f      	b.n	801a918 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a8f8:	bf00      	nop
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	f04f 31ff 	mov.w	r1, #4294967295
 801a902:	4618      	mov	r0, r3
 801a904:	f7ef fdec 	bl	800a4e0 <osSemaphoreWait>
 801a908:	4603      	mov	r3, r0
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d1f5      	bne.n	801a8fa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a90e:	f7ef fca8 	bl	800a262 <osKernelSysTick>
 801a912:	4602      	mov	r2, r0
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a918:	4618      	mov	r0, r3
 801a91a:	3710      	adds	r7, #16
 801a91c:	46bd      	mov	sp, r7
 801a91e:	bd80      	pop	{r7, pc}

0801a920 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b082      	sub	sp, #8
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7ef fe25 	bl	800a57c <osSemaphoreRelease>
}
 801a932:	bf00      	nop
 801a934:	3708      	adds	r7, #8
 801a936:	46bd      	mov	sp, r7
 801a938:	bd80      	pop	{r7, pc}

0801a93a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a93a:	b580      	push	{r7, lr}
 801a93c:	b082      	sub	sp, #8
 801a93e:	af00      	add	r7, sp, #0
 801a940:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	4618      	mov	r0, r3
 801a948:	f7ef fe4e 	bl	800a5e8 <osSemaphoreDelete>
}
 801a94c:	bf00      	nop
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}

0801a954 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a954:	b480      	push	{r7}
 801a956:	b083      	sub	sp, #12
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d101      	bne.n	801a968 <sys_sem_valid+0x14>
    return 0;
 801a964:	2300      	movs	r3, #0
 801a966:	e000      	b.n	801a96a <sys_sem_valid+0x16>
  else
    return 1;
 801a968:	2301      	movs	r3, #1
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	370c      	adds	r7, #12
 801a96e:	46bd      	mov	sp, r7
 801a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a974:	4770      	bx	lr

0801a976 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a976:	b480      	push	{r7}
 801a978:	b083      	sub	sp, #12
 801a97a:	af00      	add	r7, sp, #0
 801a97c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2200      	movs	r2, #0
 801a982:	601a      	str	r2, [r3, #0]
}
 801a984:	bf00      	nop
 801a986:	370c      	adds	r7, #12
 801a988:	46bd      	mov	sp, r7
 801a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98e:	4770      	bx	lr

0801a990 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a994:	4803      	ldr	r0, [pc, #12]	@ (801a9a4 <sys_init+0x14>)
 801a996:	f7ef fcd4 	bl	800a342 <osMutexCreate>
 801a99a:	4603      	mov	r3, r0
 801a99c:	4a02      	ldr	r2, [pc, #8]	@ (801a9a8 <sys_init+0x18>)
 801a99e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a9a0:	bf00      	nop
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	0801f408 	.word	0x0801f408
 801a9a8:	24007824 	.word	0x24007824

0801a9ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b084      	sub	sp, #16
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	60bb      	str	r3, [r7, #8]
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a9bc:	f107 0308 	add.w	r3, r7, #8
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7ef fcbe 	bl	800a342 <osMutexCreate>
 801a9c6:	4602      	mov	r2, r0
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d102      	bne.n	801a9da <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9d8:	e000      	b.n	801a9dc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a9da:	2300      	movs	r3, #0
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3710      	adds	r7, #16
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b082      	sub	sp, #8
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	f04f 31ff 	mov.w	r1, #4294967295
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f7ef fcbd 	bl	800a374 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a9fa:	bf00      	nop
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b082      	sub	sp, #8
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7ef fcfe 	bl	800a410 <osMutexRelease>
}
 801aa14:	bf00      	nop
 801aa16:	3708      	adds	r7, #8
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}

0801aa1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b08c      	sub	sp, #48	@ 0x30
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	60f8      	str	r0, [r7, #12]
 801aa24:	60b9      	str	r1, [r7, #8]
 801aa26:	607a      	str	r2, [r7, #4]
 801aa28:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801aa2a:	f107 0314 	add.w	r3, r7, #20
 801aa2e:	2200      	movs	r2, #0
 801aa30:	601a      	str	r2, [r3, #0]
 801aa32:	605a      	str	r2, [r3, #4]
 801aa34:	609a      	str	r2, [r3, #8]
 801aa36:	60da      	str	r2, [r3, #12]
 801aa38:	611a      	str	r2, [r3, #16]
 801aa3a:	615a      	str	r2, [r3, #20]
 801aa3c:	619a      	str	r2, [r3, #24]
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	617b      	str	r3, [r7, #20]
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	61bb      	str	r3, [r7, #24]
 801aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa48:	b21b      	sxth	r3, r3
 801aa4a:	83bb      	strh	r3, [r7, #28]
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801aa50:	f107 0314 	add.w	r3, r7, #20
 801aa54:	6879      	ldr	r1, [r7, #4]
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7ef fc13 	bl	800a282 <osThreadCreate>
 801aa5c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801aa5e:	4618      	mov	r0, r3
 801aa60:	3730      	adds	r7, #48	@ 0x30
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
	...

0801aa68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801aa6c:	4b04      	ldr	r3, [pc, #16]	@ (801aa80 <sys_arch_protect+0x18>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	f04f 31ff 	mov.w	r1, #4294967295
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7ef fc7d 	bl	800a374 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801aa7a:	2301      	movs	r3, #1
}
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	bd80      	pop	{r7, pc}
 801aa80:	24007824 	.word	0x24007824

0801aa84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b082      	sub	sp, #8
 801aa88:	af00      	add	r7, sp, #0
 801aa8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801aa8c:	4b04      	ldr	r3, [pc, #16]	@ (801aaa0 <sys_arch_unprotect+0x1c>)
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7ef fcbd 	bl	800a410 <osMutexRelease>
}
 801aa96:	bf00      	nop
 801aa98:	3708      	adds	r7, #8
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	bd80      	pop	{r7, pc}
 801aa9e:	bf00      	nop
 801aaa0:	24007824 	.word	0x24007824

0801aaa4 <rand>:
 801aaa4:	4b16      	ldr	r3, [pc, #88]	@ (801ab00 <rand+0x5c>)
 801aaa6:	b510      	push	{r4, lr}
 801aaa8:	681c      	ldr	r4, [r3, #0]
 801aaaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801aaac:	b9b3      	cbnz	r3, 801aadc <rand+0x38>
 801aaae:	2018      	movs	r0, #24
 801aab0:	f000 fa66 	bl	801af80 <malloc>
 801aab4:	4602      	mov	r2, r0
 801aab6:	6320      	str	r0, [r4, #48]	@ 0x30
 801aab8:	b920      	cbnz	r0, 801aac4 <rand+0x20>
 801aaba:	4b12      	ldr	r3, [pc, #72]	@ (801ab04 <rand+0x60>)
 801aabc:	4812      	ldr	r0, [pc, #72]	@ (801ab08 <rand+0x64>)
 801aabe:	2152      	movs	r1, #82	@ 0x52
 801aac0:	f000 fa40 	bl	801af44 <__assert_func>
 801aac4:	4911      	ldr	r1, [pc, #68]	@ (801ab0c <rand+0x68>)
 801aac6:	4b12      	ldr	r3, [pc, #72]	@ (801ab10 <rand+0x6c>)
 801aac8:	e9c0 1300 	strd	r1, r3, [r0]
 801aacc:	4b11      	ldr	r3, [pc, #68]	@ (801ab14 <rand+0x70>)
 801aace:	6083      	str	r3, [r0, #8]
 801aad0:	230b      	movs	r3, #11
 801aad2:	8183      	strh	r3, [r0, #12]
 801aad4:	2100      	movs	r1, #0
 801aad6:	2001      	movs	r0, #1
 801aad8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aadc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801aade:	480e      	ldr	r0, [pc, #56]	@ (801ab18 <rand+0x74>)
 801aae0:	690b      	ldr	r3, [r1, #16]
 801aae2:	694c      	ldr	r4, [r1, #20]
 801aae4:	4a0d      	ldr	r2, [pc, #52]	@ (801ab1c <rand+0x78>)
 801aae6:	4358      	muls	r0, r3
 801aae8:	fb02 0004 	mla	r0, r2, r4, r0
 801aaec:	fba3 3202 	umull	r3, r2, r3, r2
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	eb40 0002 	adc.w	r0, r0, r2
 801aaf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aafa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801aafe:	bd10      	pop	{r4, pc}
 801ab00:	24000044 	.word	0x24000044
 801ab04:	0801f410 	.word	0x0801f410
 801ab08:	0801f427 	.word	0x0801f427
 801ab0c:	abcd330e 	.word	0xabcd330e
 801ab10:	e66d1234 	.word	0xe66d1234
 801ab14:	0005deec 	.word	0x0005deec
 801ab18:	5851f42d 	.word	0x5851f42d
 801ab1c:	4c957f2d 	.word	0x4c957f2d

0801ab20 <std>:
 801ab20:	2300      	movs	r3, #0
 801ab22:	b510      	push	{r4, lr}
 801ab24:	4604      	mov	r4, r0
 801ab26:	e9c0 3300 	strd	r3, r3, [r0]
 801ab2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab2e:	6083      	str	r3, [r0, #8]
 801ab30:	8181      	strh	r1, [r0, #12]
 801ab32:	6643      	str	r3, [r0, #100]	@ 0x64
 801ab34:	81c2      	strh	r2, [r0, #14]
 801ab36:	6183      	str	r3, [r0, #24]
 801ab38:	4619      	mov	r1, r3
 801ab3a:	2208      	movs	r2, #8
 801ab3c:	305c      	adds	r0, #92	@ 0x5c
 801ab3e:	f000 f96a 	bl	801ae16 <memset>
 801ab42:	4b0d      	ldr	r3, [pc, #52]	@ (801ab78 <std+0x58>)
 801ab44:	6263      	str	r3, [r4, #36]	@ 0x24
 801ab46:	4b0d      	ldr	r3, [pc, #52]	@ (801ab7c <std+0x5c>)
 801ab48:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (801ab80 <std+0x60>)
 801ab4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (801ab84 <std+0x64>)
 801ab50:	6323      	str	r3, [r4, #48]	@ 0x30
 801ab52:	4b0d      	ldr	r3, [pc, #52]	@ (801ab88 <std+0x68>)
 801ab54:	6224      	str	r4, [r4, #32]
 801ab56:	429c      	cmp	r4, r3
 801ab58:	d006      	beq.n	801ab68 <std+0x48>
 801ab5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ab5e:	4294      	cmp	r4, r2
 801ab60:	d002      	beq.n	801ab68 <std+0x48>
 801ab62:	33d0      	adds	r3, #208	@ 0xd0
 801ab64:	429c      	cmp	r4, r3
 801ab66:	d105      	bne.n	801ab74 <std+0x54>
 801ab68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ab6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab70:	f000 b9d6 	b.w	801af20 <__retarget_lock_init_recursive>
 801ab74:	bd10      	pop	{r4, pc}
 801ab76:	bf00      	nop
 801ab78:	0801ad71 	.word	0x0801ad71
 801ab7c:	0801ad93 	.word	0x0801ad93
 801ab80:	0801adcb 	.word	0x0801adcb
 801ab84:	0801adef 	.word	0x0801adef
 801ab88:	24007828 	.word	0x24007828

0801ab8c <stdio_exit_handler>:
 801ab8c:	4a02      	ldr	r2, [pc, #8]	@ (801ab98 <stdio_exit_handler+0xc>)
 801ab8e:	4903      	ldr	r1, [pc, #12]	@ (801ab9c <stdio_exit_handler+0x10>)
 801ab90:	4803      	ldr	r0, [pc, #12]	@ (801aba0 <stdio_exit_handler+0x14>)
 801ab92:	f000 b869 	b.w	801ac68 <_fwalk_sglue>
 801ab96:	bf00      	nop
 801ab98:	24000038 	.word	0x24000038
 801ab9c:	0801ba45 	.word	0x0801ba45
 801aba0:	24000048 	.word	0x24000048

0801aba4 <cleanup_stdio>:
 801aba4:	6841      	ldr	r1, [r0, #4]
 801aba6:	4b0c      	ldr	r3, [pc, #48]	@ (801abd8 <cleanup_stdio+0x34>)
 801aba8:	4299      	cmp	r1, r3
 801abaa:	b510      	push	{r4, lr}
 801abac:	4604      	mov	r4, r0
 801abae:	d001      	beq.n	801abb4 <cleanup_stdio+0x10>
 801abb0:	f000 ff48 	bl	801ba44 <_fflush_r>
 801abb4:	68a1      	ldr	r1, [r4, #8]
 801abb6:	4b09      	ldr	r3, [pc, #36]	@ (801abdc <cleanup_stdio+0x38>)
 801abb8:	4299      	cmp	r1, r3
 801abba:	d002      	beq.n	801abc2 <cleanup_stdio+0x1e>
 801abbc:	4620      	mov	r0, r4
 801abbe:	f000 ff41 	bl	801ba44 <_fflush_r>
 801abc2:	68e1      	ldr	r1, [r4, #12]
 801abc4:	4b06      	ldr	r3, [pc, #24]	@ (801abe0 <cleanup_stdio+0x3c>)
 801abc6:	4299      	cmp	r1, r3
 801abc8:	d004      	beq.n	801abd4 <cleanup_stdio+0x30>
 801abca:	4620      	mov	r0, r4
 801abcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abd0:	f000 bf38 	b.w	801ba44 <_fflush_r>
 801abd4:	bd10      	pop	{r4, pc}
 801abd6:	bf00      	nop
 801abd8:	24007828 	.word	0x24007828
 801abdc:	24007890 	.word	0x24007890
 801abe0:	240078f8 	.word	0x240078f8

0801abe4 <global_stdio_init.part.0>:
 801abe4:	b510      	push	{r4, lr}
 801abe6:	4b0b      	ldr	r3, [pc, #44]	@ (801ac14 <global_stdio_init.part.0+0x30>)
 801abe8:	4c0b      	ldr	r4, [pc, #44]	@ (801ac18 <global_stdio_init.part.0+0x34>)
 801abea:	4a0c      	ldr	r2, [pc, #48]	@ (801ac1c <global_stdio_init.part.0+0x38>)
 801abec:	601a      	str	r2, [r3, #0]
 801abee:	4620      	mov	r0, r4
 801abf0:	2200      	movs	r2, #0
 801abf2:	2104      	movs	r1, #4
 801abf4:	f7ff ff94 	bl	801ab20 <std>
 801abf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801abfc:	2201      	movs	r2, #1
 801abfe:	2109      	movs	r1, #9
 801ac00:	f7ff ff8e 	bl	801ab20 <std>
 801ac04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ac08:	2202      	movs	r2, #2
 801ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac0e:	2112      	movs	r1, #18
 801ac10:	f7ff bf86 	b.w	801ab20 <std>
 801ac14:	24007960 	.word	0x24007960
 801ac18:	24007828 	.word	0x24007828
 801ac1c:	0801ab8d 	.word	0x0801ab8d

0801ac20 <__sfp_lock_acquire>:
 801ac20:	4801      	ldr	r0, [pc, #4]	@ (801ac28 <__sfp_lock_acquire+0x8>)
 801ac22:	f000 b97e 	b.w	801af22 <__retarget_lock_acquire_recursive>
 801ac26:	bf00      	nop
 801ac28:	24007965 	.word	0x24007965

0801ac2c <__sfp_lock_release>:
 801ac2c:	4801      	ldr	r0, [pc, #4]	@ (801ac34 <__sfp_lock_release+0x8>)
 801ac2e:	f000 b979 	b.w	801af24 <__retarget_lock_release_recursive>
 801ac32:	bf00      	nop
 801ac34:	24007965 	.word	0x24007965

0801ac38 <__sinit>:
 801ac38:	b510      	push	{r4, lr}
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	f7ff fff0 	bl	801ac20 <__sfp_lock_acquire>
 801ac40:	6a23      	ldr	r3, [r4, #32]
 801ac42:	b11b      	cbz	r3, 801ac4c <__sinit+0x14>
 801ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac48:	f7ff bff0 	b.w	801ac2c <__sfp_lock_release>
 801ac4c:	4b04      	ldr	r3, [pc, #16]	@ (801ac60 <__sinit+0x28>)
 801ac4e:	6223      	str	r3, [r4, #32]
 801ac50:	4b04      	ldr	r3, [pc, #16]	@ (801ac64 <__sinit+0x2c>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d1f5      	bne.n	801ac44 <__sinit+0xc>
 801ac58:	f7ff ffc4 	bl	801abe4 <global_stdio_init.part.0>
 801ac5c:	e7f2      	b.n	801ac44 <__sinit+0xc>
 801ac5e:	bf00      	nop
 801ac60:	0801aba5 	.word	0x0801aba5
 801ac64:	24007960 	.word	0x24007960

0801ac68 <_fwalk_sglue>:
 801ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac6c:	4607      	mov	r7, r0
 801ac6e:	4688      	mov	r8, r1
 801ac70:	4614      	mov	r4, r2
 801ac72:	2600      	movs	r6, #0
 801ac74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ac78:	f1b9 0901 	subs.w	r9, r9, #1
 801ac7c:	d505      	bpl.n	801ac8a <_fwalk_sglue+0x22>
 801ac7e:	6824      	ldr	r4, [r4, #0]
 801ac80:	2c00      	cmp	r4, #0
 801ac82:	d1f7      	bne.n	801ac74 <_fwalk_sglue+0xc>
 801ac84:	4630      	mov	r0, r6
 801ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac8a:	89ab      	ldrh	r3, [r5, #12]
 801ac8c:	2b01      	cmp	r3, #1
 801ac8e:	d907      	bls.n	801aca0 <_fwalk_sglue+0x38>
 801ac90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac94:	3301      	adds	r3, #1
 801ac96:	d003      	beq.n	801aca0 <_fwalk_sglue+0x38>
 801ac98:	4629      	mov	r1, r5
 801ac9a:	4638      	mov	r0, r7
 801ac9c:	47c0      	blx	r8
 801ac9e:	4306      	orrs	r6, r0
 801aca0:	3568      	adds	r5, #104	@ 0x68
 801aca2:	e7e9      	b.n	801ac78 <_fwalk_sglue+0x10>

0801aca4 <iprintf>:
 801aca4:	b40f      	push	{r0, r1, r2, r3}
 801aca6:	b507      	push	{r0, r1, r2, lr}
 801aca8:	4906      	ldr	r1, [pc, #24]	@ (801acc4 <iprintf+0x20>)
 801acaa:	ab04      	add	r3, sp, #16
 801acac:	6808      	ldr	r0, [r1, #0]
 801acae:	f853 2b04 	ldr.w	r2, [r3], #4
 801acb2:	6881      	ldr	r1, [r0, #8]
 801acb4:	9301      	str	r3, [sp, #4]
 801acb6:	f000 fb9b 	bl	801b3f0 <_vfiprintf_r>
 801acba:	b003      	add	sp, #12
 801acbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801acc0:	b004      	add	sp, #16
 801acc2:	4770      	bx	lr
 801acc4:	24000044 	.word	0x24000044

0801acc8 <sniprintf>:
 801acc8:	b40c      	push	{r2, r3}
 801acca:	b530      	push	{r4, r5, lr}
 801accc:	4b17      	ldr	r3, [pc, #92]	@ (801ad2c <sniprintf+0x64>)
 801acce:	1e0c      	subs	r4, r1, #0
 801acd0:	681d      	ldr	r5, [r3, #0]
 801acd2:	b09d      	sub	sp, #116	@ 0x74
 801acd4:	da08      	bge.n	801ace8 <sniprintf+0x20>
 801acd6:	238b      	movs	r3, #139	@ 0x8b
 801acd8:	602b      	str	r3, [r5, #0]
 801acda:	f04f 30ff 	mov.w	r0, #4294967295
 801acde:	b01d      	add	sp, #116	@ 0x74
 801ace0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ace4:	b002      	add	sp, #8
 801ace6:	4770      	bx	lr
 801ace8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801acec:	f8ad 3014 	strh.w	r3, [sp, #20]
 801acf0:	bf14      	ite	ne
 801acf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801acf6:	4623      	moveq	r3, r4
 801acf8:	9304      	str	r3, [sp, #16]
 801acfa:	9307      	str	r3, [sp, #28]
 801acfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ad00:	9002      	str	r0, [sp, #8]
 801ad02:	9006      	str	r0, [sp, #24]
 801ad04:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ad0a:	ab21      	add	r3, sp, #132	@ 0x84
 801ad0c:	a902      	add	r1, sp, #8
 801ad0e:	4628      	mov	r0, r5
 801ad10:	9301      	str	r3, [sp, #4]
 801ad12:	f000 fa47 	bl	801b1a4 <_svfiprintf_r>
 801ad16:	1c43      	adds	r3, r0, #1
 801ad18:	bfbc      	itt	lt
 801ad1a:	238b      	movlt	r3, #139	@ 0x8b
 801ad1c:	602b      	strlt	r3, [r5, #0]
 801ad1e:	2c00      	cmp	r4, #0
 801ad20:	d0dd      	beq.n	801acde <sniprintf+0x16>
 801ad22:	9b02      	ldr	r3, [sp, #8]
 801ad24:	2200      	movs	r2, #0
 801ad26:	701a      	strb	r2, [r3, #0]
 801ad28:	e7d9      	b.n	801acde <sniprintf+0x16>
 801ad2a:	bf00      	nop
 801ad2c:	24000044 	.word	0x24000044

0801ad30 <siprintf>:
 801ad30:	b40e      	push	{r1, r2, r3}
 801ad32:	b500      	push	{lr}
 801ad34:	b09c      	sub	sp, #112	@ 0x70
 801ad36:	ab1d      	add	r3, sp, #116	@ 0x74
 801ad38:	9002      	str	r0, [sp, #8]
 801ad3a:	9006      	str	r0, [sp, #24]
 801ad3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ad40:	4809      	ldr	r0, [pc, #36]	@ (801ad68 <siprintf+0x38>)
 801ad42:	9107      	str	r1, [sp, #28]
 801ad44:	9104      	str	r1, [sp, #16]
 801ad46:	4909      	ldr	r1, [pc, #36]	@ (801ad6c <siprintf+0x3c>)
 801ad48:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad4c:	9105      	str	r1, [sp, #20]
 801ad4e:	6800      	ldr	r0, [r0, #0]
 801ad50:	9301      	str	r3, [sp, #4]
 801ad52:	a902      	add	r1, sp, #8
 801ad54:	f000 fa26 	bl	801b1a4 <_svfiprintf_r>
 801ad58:	9b02      	ldr	r3, [sp, #8]
 801ad5a:	2200      	movs	r2, #0
 801ad5c:	701a      	strb	r2, [r3, #0]
 801ad5e:	b01c      	add	sp, #112	@ 0x70
 801ad60:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad64:	b003      	add	sp, #12
 801ad66:	4770      	bx	lr
 801ad68:	24000044 	.word	0x24000044
 801ad6c:	ffff0208 	.word	0xffff0208

0801ad70 <__sread>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	460c      	mov	r4, r1
 801ad74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad78:	f000 f88a 	bl	801ae90 <_read_r>
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	bfab      	itete	ge
 801ad80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ad82:	89a3      	ldrhlt	r3, [r4, #12]
 801ad84:	181b      	addge	r3, r3, r0
 801ad86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ad8a:	bfac      	ite	ge
 801ad8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ad8e:	81a3      	strhlt	r3, [r4, #12]
 801ad90:	bd10      	pop	{r4, pc}

0801ad92 <__swrite>:
 801ad92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad96:	461f      	mov	r7, r3
 801ad98:	898b      	ldrh	r3, [r1, #12]
 801ad9a:	05db      	lsls	r3, r3, #23
 801ad9c:	4605      	mov	r5, r0
 801ad9e:	460c      	mov	r4, r1
 801ada0:	4616      	mov	r6, r2
 801ada2:	d505      	bpl.n	801adb0 <__swrite+0x1e>
 801ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ada8:	2302      	movs	r3, #2
 801adaa:	2200      	movs	r2, #0
 801adac:	f000 f85e 	bl	801ae6c <_lseek_r>
 801adb0:	89a3      	ldrh	r3, [r4, #12]
 801adb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801adba:	81a3      	strh	r3, [r4, #12]
 801adbc:	4632      	mov	r2, r6
 801adbe:	463b      	mov	r3, r7
 801adc0:	4628      	mov	r0, r5
 801adc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801adc6:	f000 b875 	b.w	801aeb4 <_write_r>

0801adca <__sseek>:
 801adca:	b510      	push	{r4, lr}
 801adcc:	460c      	mov	r4, r1
 801adce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801add2:	f000 f84b 	bl	801ae6c <_lseek_r>
 801add6:	1c43      	adds	r3, r0, #1
 801add8:	89a3      	ldrh	r3, [r4, #12]
 801adda:	bf15      	itete	ne
 801addc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801adde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ade2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ade6:	81a3      	strheq	r3, [r4, #12]
 801ade8:	bf18      	it	ne
 801adea:	81a3      	strhne	r3, [r4, #12]
 801adec:	bd10      	pop	{r4, pc}

0801adee <__sclose>:
 801adee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adf2:	f000 b82b 	b.w	801ae4c <_close_r>

0801adf6 <memcmp>:
 801adf6:	b510      	push	{r4, lr}
 801adf8:	3901      	subs	r1, #1
 801adfa:	4402      	add	r2, r0
 801adfc:	4290      	cmp	r0, r2
 801adfe:	d101      	bne.n	801ae04 <memcmp+0xe>
 801ae00:	2000      	movs	r0, #0
 801ae02:	e005      	b.n	801ae10 <memcmp+0x1a>
 801ae04:	7803      	ldrb	r3, [r0, #0]
 801ae06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ae0a:	42a3      	cmp	r3, r4
 801ae0c:	d001      	beq.n	801ae12 <memcmp+0x1c>
 801ae0e:	1b18      	subs	r0, r3, r4
 801ae10:	bd10      	pop	{r4, pc}
 801ae12:	3001      	adds	r0, #1
 801ae14:	e7f2      	b.n	801adfc <memcmp+0x6>

0801ae16 <memset>:
 801ae16:	4402      	add	r2, r0
 801ae18:	4603      	mov	r3, r0
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	d100      	bne.n	801ae20 <memset+0xa>
 801ae1e:	4770      	bx	lr
 801ae20:	f803 1b01 	strb.w	r1, [r3], #1
 801ae24:	e7f9      	b.n	801ae1a <memset+0x4>

0801ae26 <strncmp>:
 801ae26:	b510      	push	{r4, lr}
 801ae28:	b16a      	cbz	r2, 801ae46 <strncmp+0x20>
 801ae2a:	3901      	subs	r1, #1
 801ae2c:	1884      	adds	r4, r0, r2
 801ae2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d103      	bne.n	801ae42 <strncmp+0x1c>
 801ae3a:	42a0      	cmp	r0, r4
 801ae3c:	d001      	beq.n	801ae42 <strncmp+0x1c>
 801ae3e:	2a00      	cmp	r2, #0
 801ae40:	d1f5      	bne.n	801ae2e <strncmp+0x8>
 801ae42:	1ad0      	subs	r0, r2, r3
 801ae44:	bd10      	pop	{r4, pc}
 801ae46:	4610      	mov	r0, r2
 801ae48:	e7fc      	b.n	801ae44 <strncmp+0x1e>
	...

0801ae4c <_close_r>:
 801ae4c:	b538      	push	{r3, r4, r5, lr}
 801ae4e:	4d06      	ldr	r5, [pc, #24]	@ (801ae68 <_close_r+0x1c>)
 801ae50:	2300      	movs	r3, #0
 801ae52:	4604      	mov	r4, r0
 801ae54:	4608      	mov	r0, r1
 801ae56:	602b      	str	r3, [r5, #0]
 801ae58:	f7e6 fa64 	bl	8001324 <_close>
 801ae5c:	1c43      	adds	r3, r0, #1
 801ae5e:	d102      	bne.n	801ae66 <_close_r+0x1a>
 801ae60:	682b      	ldr	r3, [r5, #0]
 801ae62:	b103      	cbz	r3, 801ae66 <_close_r+0x1a>
 801ae64:	6023      	str	r3, [r4, #0]
 801ae66:	bd38      	pop	{r3, r4, r5, pc}
 801ae68:	24007820 	.word	0x24007820

0801ae6c <_lseek_r>:
 801ae6c:	b538      	push	{r3, r4, r5, lr}
 801ae6e:	4d07      	ldr	r5, [pc, #28]	@ (801ae8c <_lseek_r+0x20>)
 801ae70:	4604      	mov	r4, r0
 801ae72:	4608      	mov	r0, r1
 801ae74:	4611      	mov	r1, r2
 801ae76:	2200      	movs	r2, #0
 801ae78:	602a      	str	r2, [r5, #0]
 801ae7a:	461a      	mov	r2, r3
 801ae7c:	f7e6 fa79 	bl	8001372 <_lseek>
 801ae80:	1c43      	adds	r3, r0, #1
 801ae82:	d102      	bne.n	801ae8a <_lseek_r+0x1e>
 801ae84:	682b      	ldr	r3, [r5, #0]
 801ae86:	b103      	cbz	r3, 801ae8a <_lseek_r+0x1e>
 801ae88:	6023      	str	r3, [r4, #0]
 801ae8a:	bd38      	pop	{r3, r4, r5, pc}
 801ae8c:	24007820 	.word	0x24007820

0801ae90 <_read_r>:
 801ae90:	b538      	push	{r3, r4, r5, lr}
 801ae92:	4d07      	ldr	r5, [pc, #28]	@ (801aeb0 <_read_r+0x20>)
 801ae94:	4604      	mov	r4, r0
 801ae96:	4608      	mov	r0, r1
 801ae98:	4611      	mov	r1, r2
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	602a      	str	r2, [r5, #0]
 801ae9e:	461a      	mov	r2, r3
 801aea0:	f7e6 fa23 	bl	80012ea <_read>
 801aea4:	1c43      	adds	r3, r0, #1
 801aea6:	d102      	bne.n	801aeae <_read_r+0x1e>
 801aea8:	682b      	ldr	r3, [r5, #0]
 801aeaa:	b103      	cbz	r3, 801aeae <_read_r+0x1e>
 801aeac:	6023      	str	r3, [r4, #0]
 801aeae:	bd38      	pop	{r3, r4, r5, pc}
 801aeb0:	24007820 	.word	0x24007820

0801aeb4 <_write_r>:
 801aeb4:	b538      	push	{r3, r4, r5, lr}
 801aeb6:	4d07      	ldr	r5, [pc, #28]	@ (801aed4 <_write_r+0x20>)
 801aeb8:	4604      	mov	r4, r0
 801aeba:	4608      	mov	r0, r1
 801aebc:	4611      	mov	r1, r2
 801aebe:	2200      	movs	r2, #0
 801aec0:	602a      	str	r2, [r5, #0]
 801aec2:	461a      	mov	r2, r3
 801aec4:	f7e5 fc4c 	bl	8000760 <_write>
 801aec8:	1c43      	adds	r3, r0, #1
 801aeca:	d102      	bne.n	801aed2 <_write_r+0x1e>
 801aecc:	682b      	ldr	r3, [r5, #0]
 801aece:	b103      	cbz	r3, 801aed2 <_write_r+0x1e>
 801aed0:	6023      	str	r3, [r4, #0]
 801aed2:	bd38      	pop	{r3, r4, r5, pc}
 801aed4:	24007820 	.word	0x24007820

0801aed8 <__libc_init_array>:
 801aed8:	b570      	push	{r4, r5, r6, lr}
 801aeda:	4d0d      	ldr	r5, [pc, #52]	@ (801af10 <__libc_init_array+0x38>)
 801aedc:	4c0d      	ldr	r4, [pc, #52]	@ (801af14 <__libc_init_array+0x3c>)
 801aede:	1b64      	subs	r4, r4, r5
 801aee0:	10a4      	asrs	r4, r4, #2
 801aee2:	2600      	movs	r6, #0
 801aee4:	42a6      	cmp	r6, r4
 801aee6:	d109      	bne.n	801aefc <__libc_init_array+0x24>
 801aee8:	4d0b      	ldr	r5, [pc, #44]	@ (801af18 <__libc_init_array+0x40>)
 801aeea:	4c0c      	ldr	r4, [pc, #48]	@ (801af1c <__libc_init_array+0x44>)
 801aeec:	f000 fff2 	bl	801bed4 <_init>
 801aef0:	1b64      	subs	r4, r4, r5
 801aef2:	10a4      	asrs	r4, r4, #2
 801aef4:	2600      	movs	r6, #0
 801aef6:	42a6      	cmp	r6, r4
 801aef8:	d105      	bne.n	801af06 <__libc_init_array+0x2e>
 801aefa:	bd70      	pop	{r4, r5, r6, pc}
 801aefc:	f855 3b04 	ldr.w	r3, [r5], #4
 801af00:	4798      	blx	r3
 801af02:	3601      	adds	r6, #1
 801af04:	e7ee      	b.n	801aee4 <__libc_init_array+0xc>
 801af06:	f855 3b04 	ldr.w	r3, [r5], #4
 801af0a:	4798      	blx	r3
 801af0c:	3601      	adds	r6, #1
 801af0e:	e7f2      	b.n	801aef6 <__libc_init_array+0x1e>
 801af10:	0801f4f8 	.word	0x0801f4f8
 801af14:	0801f4f8 	.word	0x0801f4f8
 801af18:	0801f4f8 	.word	0x0801f4f8
 801af1c:	0801f4fc 	.word	0x0801f4fc

0801af20 <__retarget_lock_init_recursive>:
 801af20:	4770      	bx	lr

0801af22 <__retarget_lock_acquire_recursive>:
 801af22:	4770      	bx	lr

0801af24 <__retarget_lock_release_recursive>:
 801af24:	4770      	bx	lr

0801af26 <memcpy>:
 801af26:	440a      	add	r2, r1
 801af28:	4291      	cmp	r1, r2
 801af2a:	f100 33ff 	add.w	r3, r0, #4294967295
 801af2e:	d100      	bne.n	801af32 <memcpy+0xc>
 801af30:	4770      	bx	lr
 801af32:	b510      	push	{r4, lr}
 801af34:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af38:	f803 4f01 	strb.w	r4, [r3, #1]!
 801af3c:	4291      	cmp	r1, r2
 801af3e:	d1f9      	bne.n	801af34 <memcpy+0xe>
 801af40:	bd10      	pop	{r4, pc}
	...

0801af44 <__assert_func>:
 801af44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af46:	4614      	mov	r4, r2
 801af48:	461a      	mov	r2, r3
 801af4a:	4b09      	ldr	r3, [pc, #36]	@ (801af70 <__assert_func+0x2c>)
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	4605      	mov	r5, r0
 801af50:	68d8      	ldr	r0, [r3, #12]
 801af52:	b954      	cbnz	r4, 801af6a <__assert_func+0x26>
 801af54:	4b07      	ldr	r3, [pc, #28]	@ (801af74 <__assert_func+0x30>)
 801af56:	461c      	mov	r4, r3
 801af58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801af5c:	9100      	str	r1, [sp, #0]
 801af5e:	462b      	mov	r3, r5
 801af60:	4905      	ldr	r1, [pc, #20]	@ (801af78 <__assert_func+0x34>)
 801af62:	f000 fd97 	bl	801ba94 <fiprintf>
 801af66:	f000 fe65 	bl	801bc34 <abort>
 801af6a:	4b04      	ldr	r3, [pc, #16]	@ (801af7c <__assert_func+0x38>)
 801af6c:	e7f4      	b.n	801af58 <__assert_func+0x14>
 801af6e:	bf00      	nop
 801af70:	24000044 	.word	0x24000044
 801af74:	0801f4ba 	.word	0x0801f4ba
 801af78:	0801f48c 	.word	0x0801f48c
 801af7c:	0801f47f 	.word	0x0801f47f

0801af80 <malloc>:
 801af80:	4b02      	ldr	r3, [pc, #8]	@ (801af8c <malloc+0xc>)
 801af82:	4601      	mov	r1, r0
 801af84:	6818      	ldr	r0, [r3, #0]
 801af86:	f000 b825 	b.w	801afd4 <_malloc_r>
 801af8a:	bf00      	nop
 801af8c:	24000044 	.word	0x24000044

0801af90 <sbrk_aligned>:
 801af90:	b570      	push	{r4, r5, r6, lr}
 801af92:	4e0f      	ldr	r6, [pc, #60]	@ (801afd0 <sbrk_aligned+0x40>)
 801af94:	460c      	mov	r4, r1
 801af96:	6831      	ldr	r1, [r6, #0]
 801af98:	4605      	mov	r5, r0
 801af9a:	b911      	cbnz	r1, 801afa2 <sbrk_aligned+0x12>
 801af9c:	f000 fe3a 	bl	801bc14 <_sbrk_r>
 801afa0:	6030      	str	r0, [r6, #0]
 801afa2:	4621      	mov	r1, r4
 801afa4:	4628      	mov	r0, r5
 801afa6:	f000 fe35 	bl	801bc14 <_sbrk_r>
 801afaa:	1c43      	adds	r3, r0, #1
 801afac:	d103      	bne.n	801afb6 <sbrk_aligned+0x26>
 801afae:	f04f 34ff 	mov.w	r4, #4294967295
 801afb2:	4620      	mov	r0, r4
 801afb4:	bd70      	pop	{r4, r5, r6, pc}
 801afb6:	1cc4      	adds	r4, r0, #3
 801afb8:	f024 0403 	bic.w	r4, r4, #3
 801afbc:	42a0      	cmp	r0, r4
 801afbe:	d0f8      	beq.n	801afb2 <sbrk_aligned+0x22>
 801afc0:	1a21      	subs	r1, r4, r0
 801afc2:	4628      	mov	r0, r5
 801afc4:	f000 fe26 	bl	801bc14 <_sbrk_r>
 801afc8:	3001      	adds	r0, #1
 801afca:	d1f2      	bne.n	801afb2 <sbrk_aligned+0x22>
 801afcc:	e7ef      	b.n	801afae <sbrk_aligned+0x1e>
 801afce:	bf00      	nop
 801afd0:	24007968 	.word	0x24007968

0801afd4 <_malloc_r>:
 801afd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afd8:	1ccd      	adds	r5, r1, #3
 801afda:	f025 0503 	bic.w	r5, r5, #3
 801afde:	3508      	adds	r5, #8
 801afe0:	2d0c      	cmp	r5, #12
 801afe2:	bf38      	it	cc
 801afe4:	250c      	movcc	r5, #12
 801afe6:	2d00      	cmp	r5, #0
 801afe8:	4606      	mov	r6, r0
 801afea:	db01      	blt.n	801aff0 <_malloc_r+0x1c>
 801afec:	42a9      	cmp	r1, r5
 801afee:	d904      	bls.n	801affa <_malloc_r+0x26>
 801aff0:	230c      	movs	r3, #12
 801aff2:	6033      	str	r3, [r6, #0]
 801aff4:	2000      	movs	r0, #0
 801aff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801affa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b0d0 <_malloc_r+0xfc>
 801affe:	f000 f869 	bl	801b0d4 <__malloc_lock>
 801b002:	f8d8 3000 	ldr.w	r3, [r8]
 801b006:	461c      	mov	r4, r3
 801b008:	bb44      	cbnz	r4, 801b05c <_malloc_r+0x88>
 801b00a:	4629      	mov	r1, r5
 801b00c:	4630      	mov	r0, r6
 801b00e:	f7ff ffbf 	bl	801af90 <sbrk_aligned>
 801b012:	1c43      	adds	r3, r0, #1
 801b014:	4604      	mov	r4, r0
 801b016:	d158      	bne.n	801b0ca <_malloc_r+0xf6>
 801b018:	f8d8 4000 	ldr.w	r4, [r8]
 801b01c:	4627      	mov	r7, r4
 801b01e:	2f00      	cmp	r7, #0
 801b020:	d143      	bne.n	801b0aa <_malloc_r+0xd6>
 801b022:	2c00      	cmp	r4, #0
 801b024:	d04b      	beq.n	801b0be <_malloc_r+0xea>
 801b026:	6823      	ldr	r3, [r4, #0]
 801b028:	4639      	mov	r1, r7
 801b02a:	4630      	mov	r0, r6
 801b02c:	eb04 0903 	add.w	r9, r4, r3
 801b030:	f000 fdf0 	bl	801bc14 <_sbrk_r>
 801b034:	4581      	cmp	r9, r0
 801b036:	d142      	bne.n	801b0be <_malloc_r+0xea>
 801b038:	6821      	ldr	r1, [r4, #0]
 801b03a:	1a6d      	subs	r5, r5, r1
 801b03c:	4629      	mov	r1, r5
 801b03e:	4630      	mov	r0, r6
 801b040:	f7ff ffa6 	bl	801af90 <sbrk_aligned>
 801b044:	3001      	adds	r0, #1
 801b046:	d03a      	beq.n	801b0be <_malloc_r+0xea>
 801b048:	6823      	ldr	r3, [r4, #0]
 801b04a:	442b      	add	r3, r5
 801b04c:	6023      	str	r3, [r4, #0]
 801b04e:	f8d8 3000 	ldr.w	r3, [r8]
 801b052:	685a      	ldr	r2, [r3, #4]
 801b054:	bb62      	cbnz	r2, 801b0b0 <_malloc_r+0xdc>
 801b056:	f8c8 7000 	str.w	r7, [r8]
 801b05a:	e00f      	b.n	801b07c <_malloc_r+0xa8>
 801b05c:	6822      	ldr	r2, [r4, #0]
 801b05e:	1b52      	subs	r2, r2, r5
 801b060:	d420      	bmi.n	801b0a4 <_malloc_r+0xd0>
 801b062:	2a0b      	cmp	r2, #11
 801b064:	d917      	bls.n	801b096 <_malloc_r+0xc2>
 801b066:	1961      	adds	r1, r4, r5
 801b068:	42a3      	cmp	r3, r4
 801b06a:	6025      	str	r5, [r4, #0]
 801b06c:	bf18      	it	ne
 801b06e:	6059      	strne	r1, [r3, #4]
 801b070:	6863      	ldr	r3, [r4, #4]
 801b072:	bf08      	it	eq
 801b074:	f8c8 1000 	streq.w	r1, [r8]
 801b078:	5162      	str	r2, [r4, r5]
 801b07a:	604b      	str	r3, [r1, #4]
 801b07c:	4630      	mov	r0, r6
 801b07e:	f000 f82f 	bl	801b0e0 <__malloc_unlock>
 801b082:	f104 000b 	add.w	r0, r4, #11
 801b086:	1d23      	adds	r3, r4, #4
 801b088:	f020 0007 	bic.w	r0, r0, #7
 801b08c:	1ac2      	subs	r2, r0, r3
 801b08e:	bf1c      	itt	ne
 801b090:	1a1b      	subne	r3, r3, r0
 801b092:	50a3      	strne	r3, [r4, r2]
 801b094:	e7af      	b.n	801aff6 <_malloc_r+0x22>
 801b096:	6862      	ldr	r2, [r4, #4]
 801b098:	42a3      	cmp	r3, r4
 801b09a:	bf0c      	ite	eq
 801b09c:	f8c8 2000 	streq.w	r2, [r8]
 801b0a0:	605a      	strne	r2, [r3, #4]
 801b0a2:	e7eb      	b.n	801b07c <_malloc_r+0xa8>
 801b0a4:	4623      	mov	r3, r4
 801b0a6:	6864      	ldr	r4, [r4, #4]
 801b0a8:	e7ae      	b.n	801b008 <_malloc_r+0x34>
 801b0aa:	463c      	mov	r4, r7
 801b0ac:	687f      	ldr	r7, [r7, #4]
 801b0ae:	e7b6      	b.n	801b01e <_malloc_r+0x4a>
 801b0b0:	461a      	mov	r2, r3
 801b0b2:	685b      	ldr	r3, [r3, #4]
 801b0b4:	42a3      	cmp	r3, r4
 801b0b6:	d1fb      	bne.n	801b0b0 <_malloc_r+0xdc>
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	6053      	str	r3, [r2, #4]
 801b0bc:	e7de      	b.n	801b07c <_malloc_r+0xa8>
 801b0be:	230c      	movs	r3, #12
 801b0c0:	6033      	str	r3, [r6, #0]
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	f000 f80c 	bl	801b0e0 <__malloc_unlock>
 801b0c8:	e794      	b.n	801aff4 <_malloc_r+0x20>
 801b0ca:	6005      	str	r5, [r0, #0]
 801b0cc:	e7d6      	b.n	801b07c <_malloc_r+0xa8>
 801b0ce:	bf00      	nop
 801b0d0:	2400796c 	.word	0x2400796c

0801b0d4 <__malloc_lock>:
 801b0d4:	4801      	ldr	r0, [pc, #4]	@ (801b0dc <__malloc_lock+0x8>)
 801b0d6:	f7ff bf24 	b.w	801af22 <__retarget_lock_acquire_recursive>
 801b0da:	bf00      	nop
 801b0dc:	24007964 	.word	0x24007964

0801b0e0 <__malloc_unlock>:
 801b0e0:	4801      	ldr	r0, [pc, #4]	@ (801b0e8 <__malloc_unlock+0x8>)
 801b0e2:	f7ff bf1f 	b.w	801af24 <__retarget_lock_release_recursive>
 801b0e6:	bf00      	nop
 801b0e8:	24007964 	.word	0x24007964

0801b0ec <__ssputs_r>:
 801b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f0:	688e      	ldr	r6, [r1, #8]
 801b0f2:	461f      	mov	r7, r3
 801b0f4:	42be      	cmp	r6, r7
 801b0f6:	680b      	ldr	r3, [r1, #0]
 801b0f8:	4682      	mov	sl, r0
 801b0fa:	460c      	mov	r4, r1
 801b0fc:	4690      	mov	r8, r2
 801b0fe:	d82d      	bhi.n	801b15c <__ssputs_r+0x70>
 801b100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b108:	d026      	beq.n	801b158 <__ssputs_r+0x6c>
 801b10a:	6965      	ldr	r5, [r4, #20]
 801b10c:	6909      	ldr	r1, [r1, #16]
 801b10e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b112:	eba3 0901 	sub.w	r9, r3, r1
 801b116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b11a:	1c7b      	adds	r3, r7, #1
 801b11c:	444b      	add	r3, r9
 801b11e:	106d      	asrs	r5, r5, #1
 801b120:	429d      	cmp	r5, r3
 801b122:	bf38      	it	cc
 801b124:	461d      	movcc	r5, r3
 801b126:	0553      	lsls	r3, r2, #21
 801b128:	d527      	bpl.n	801b17a <__ssputs_r+0x8e>
 801b12a:	4629      	mov	r1, r5
 801b12c:	f7ff ff52 	bl	801afd4 <_malloc_r>
 801b130:	4606      	mov	r6, r0
 801b132:	b360      	cbz	r0, 801b18e <__ssputs_r+0xa2>
 801b134:	6921      	ldr	r1, [r4, #16]
 801b136:	464a      	mov	r2, r9
 801b138:	f7ff fef5 	bl	801af26 <memcpy>
 801b13c:	89a3      	ldrh	r3, [r4, #12]
 801b13e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b146:	81a3      	strh	r3, [r4, #12]
 801b148:	6126      	str	r6, [r4, #16]
 801b14a:	6165      	str	r5, [r4, #20]
 801b14c:	444e      	add	r6, r9
 801b14e:	eba5 0509 	sub.w	r5, r5, r9
 801b152:	6026      	str	r6, [r4, #0]
 801b154:	60a5      	str	r5, [r4, #8]
 801b156:	463e      	mov	r6, r7
 801b158:	42be      	cmp	r6, r7
 801b15a:	d900      	bls.n	801b15e <__ssputs_r+0x72>
 801b15c:	463e      	mov	r6, r7
 801b15e:	6820      	ldr	r0, [r4, #0]
 801b160:	4632      	mov	r2, r6
 801b162:	4641      	mov	r1, r8
 801b164:	f000 fd3c 	bl	801bbe0 <memmove>
 801b168:	68a3      	ldr	r3, [r4, #8]
 801b16a:	1b9b      	subs	r3, r3, r6
 801b16c:	60a3      	str	r3, [r4, #8]
 801b16e:	6823      	ldr	r3, [r4, #0]
 801b170:	4433      	add	r3, r6
 801b172:	6023      	str	r3, [r4, #0]
 801b174:	2000      	movs	r0, #0
 801b176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b17a:	462a      	mov	r2, r5
 801b17c:	f000 fdac 	bl	801bcd8 <_realloc_r>
 801b180:	4606      	mov	r6, r0
 801b182:	2800      	cmp	r0, #0
 801b184:	d1e0      	bne.n	801b148 <__ssputs_r+0x5c>
 801b186:	6921      	ldr	r1, [r4, #16]
 801b188:	4650      	mov	r0, sl
 801b18a:	f000 fd5b 	bl	801bc44 <_free_r>
 801b18e:	230c      	movs	r3, #12
 801b190:	f8ca 3000 	str.w	r3, [sl]
 801b194:	89a3      	ldrh	r3, [r4, #12]
 801b196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b19a:	81a3      	strh	r3, [r4, #12]
 801b19c:	f04f 30ff 	mov.w	r0, #4294967295
 801b1a0:	e7e9      	b.n	801b176 <__ssputs_r+0x8a>
	...

0801b1a4 <_svfiprintf_r>:
 801b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a8:	4698      	mov	r8, r3
 801b1aa:	898b      	ldrh	r3, [r1, #12]
 801b1ac:	061b      	lsls	r3, r3, #24
 801b1ae:	b09d      	sub	sp, #116	@ 0x74
 801b1b0:	4607      	mov	r7, r0
 801b1b2:	460d      	mov	r5, r1
 801b1b4:	4614      	mov	r4, r2
 801b1b6:	d510      	bpl.n	801b1da <_svfiprintf_r+0x36>
 801b1b8:	690b      	ldr	r3, [r1, #16]
 801b1ba:	b973      	cbnz	r3, 801b1da <_svfiprintf_r+0x36>
 801b1bc:	2140      	movs	r1, #64	@ 0x40
 801b1be:	f7ff ff09 	bl	801afd4 <_malloc_r>
 801b1c2:	6028      	str	r0, [r5, #0]
 801b1c4:	6128      	str	r0, [r5, #16]
 801b1c6:	b930      	cbnz	r0, 801b1d6 <_svfiprintf_r+0x32>
 801b1c8:	230c      	movs	r3, #12
 801b1ca:	603b      	str	r3, [r7, #0]
 801b1cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b1d0:	b01d      	add	sp, #116	@ 0x74
 801b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1d6:	2340      	movs	r3, #64	@ 0x40
 801b1d8:	616b      	str	r3, [r5, #20]
 801b1da:	2300      	movs	r3, #0
 801b1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1de:	2320      	movs	r3, #32
 801b1e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1e8:	2330      	movs	r3, #48	@ 0x30
 801b1ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b388 <_svfiprintf_r+0x1e4>
 801b1ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b1f2:	f04f 0901 	mov.w	r9, #1
 801b1f6:	4623      	mov	r3, r4
 801b1f8:	469a      	mov	sl, r3
 801b1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1fe:	b10a      	cbz	r2, 801b204 <_svfiprintf_r+0x60>
 801b200:	2a25      	cmp	r2, #37	@ 0x25
 801b202:	d1f9      	bne.n	801b1f8 <_svfiprintf_r+0x54>
 801b204:	ebba 0b04 	subs.w	fp, sl, r4
 801b208:	d00b      	beq.n	801b222 <_svfiprintf_r+0x7e>
 801b20a:	465b      	mov	r3, fp
 801b20c:	4622      	mov	r2, r4
 801b20e:	4629      	mov	r1, r5
 801b210:	4638      	mov	r0, r7
 801b212:	f7ff ff6b 	bl	801b0ec <__ssputs_r>
 801b216:	3001      	adds	r0, #1
 801b218:	f000 80a7 	beq.w	801b36a <_svfiprintf_r+0x1c6>
 801b21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b21e:	445a      	add	r2, fp
 801b220:	9209      	str	r2, [sp, #36]	@ 0x24
 801b222:	f89a 3000 	ldrb.w	r3, [sl]
 801b226:	2b00      	cmp	r3, #0
 801b228:	f000 809f 	beq.w	801b36a <_svfiprintf_r+0x1c6>
 801b22c:	2300      	movs	r3, #0
 801b22e:	f04f 32ff 	mov.w	r2, #4294967295
 801b232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b236:	f10a 0a01 	add.w	sl, sl, #1
 801b23a:	9304      	str	r3, [sp, #16]
 801b23c:	9307      	str	r3, [sp, #28]
 801b23e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b242:	931a      	str	r3, [sp, #104]	@ 0x68
 801b244:	4654      	mov	r4, sl
 801b246:	2205      	movs	r2, #5
 801b248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b24c:	484e      	ldr	r0, [pc, #312]	@ (801b388 <_svfiprintf_r+0x1e4>)
 801b24e:	f7e5 f84f 	bl	80002f0 <memchr>
 801b252:	9a04      	ldr	r2, [sp, #16]
 801b254:	b9d8      	cbnz	r0, 801b28e <_svfiprintf_r+0xea>
 801b256:	06d0      	lsls	r0, r2, #27
 801b258:	bf44      	itt	mi
 801b25a:	2320      	movmi	r3, #32
 801b25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b260:	0711      	lsls	r1, r2, #28
 801b262:	bf44      	itt	mi
 801b264:	232b      	movmi	r3, #43	@ 0x2b
 801b266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b26a:	f89a 3000 	ldrb.w	r3, [sl]
 801b26e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b270:	d015      	beq.n	801b29e <_svfiprintf_r+0xfa>
 801b272:	9a07      	ldr	r2, [sp, #28]
 801b274:	4654      	mov	r4, sl
 801b276:	2000      	movs	r0, #0
 801b278:	f04f 0c0a 	mov.w	ip, #10
 801b27c:	4621      	mov	r1, r4
 801b27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b282:	3b30      	subs	r3, #48	@ 0x30
 801b284:	2b09      	cmp	r3, #9
 801b286:	d94b      	bls.n	801b320 <_svfiprintf_r+0x17c>
 801b288:	b1b0      	cbz	r0, 801b2b8 <_svfiprintf_r+0x114>
 801b28a:	9207      	str	r2, [sp, #28]
 801b28c:	e014      	b.n	801b2b8 <_svfiprintf_r+0x114>
 801b28e:	eba0 0308 	sub.w	r3, r0, r8
 801b292:	fa09 f303 	lsl.w	r3, r9, r3
 801b296:	4313      	orrs	r3, r2
 801b298:	9304      	str	r3, [sp, #16]
 801b29a:	46a2      	mov	sl, r4
 801b29c:	e7d2      	b.n	801b244 <_svfiprintf_r+0xa0>
 801b29e:	9b03      	ldr	r3, [sp, #12]
 801b2a0:	1d19      	adds	r1, r3, #4
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	9103      	str	r1, [sp, #12]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	bfbb      	ittet	lt
 801b2aa:	425b      	neglt	r3, r3
 801b2ac:	f042 0202 	orrlt.w	r2, r2, #2
 801b2b0:	9307      	strge	r3, [sp, #28]
 801b2b2:	9307      	strlt	r3, [sp, #28]
 801b2b4:	bfb8      	it	lt
 801b2b6:	9204      	strlt	r2, [sp, #16]
 801b2b8:	7823      	ldrb	r3, [r4, #0]
 801b2ba:	2b2e      	cmp	r3, #46	@ 0x2e
 801b2bc:	d10a      	bne.n	801b2d4 <_svfiprintf_r+0x130>
 801b2be:	7863      	ldrb	r3, [r4, #1]
 801b2c0:	2b2a      	cmp	r3, #42	@ 0x2a
 801b2c2:	d132      	bne.n	801b32a <_svfiprintf_r+0x186>
 801b2c4:	9b03      	ldr	r3, [sp, #12]
 801b2c6:	1d1a      	adds	r2, r3, #4
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	9203      	str	r2, [sp, #12]
 801b2cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b2d0:	3402      	adds	r4, #2
 801b2d2:	9305      	str	r3, [sp, #20]
 801b2d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b398 <_svfiprintf_r+0x1f4>
 801b2d8:	7821      	ldrb	r1, [r4, #0]
 801b2da:	2203      	movs	r2, #3
 801b2dc:	4650      	mov	r0, sl
 801b2de:	f7e5 f807 	bl	80002f0 <memchr>
 801b2e2:	b138      	cbz	r0, 801b2f4 <_svfiprintf_r+0x150>
 801b2e4:	9b04      	ldr	r3, [sp, #16]
 801b2e6:	eba0 000a 	sub.w	r0, r0, sl
 801b2ea:	2240      	movs	r2, #64	@ 0x40
 801b2ec:	4082      	lsls	r2, r0
 801b2ee:	4313      	orrs	r3, r2
 801b2f0:	3401      	adds	r4, #1
 801b2f2:	9304      	str	r3, [sp, #16]
 801b2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2f8:	4824      	ldr	r0, [pc, #144]	@ (801b38c <_svfiprintf_r+0x1e8>)
 801b2fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b2fe:	2206      	movs	r2, #6
 801b300:	f7e4 fff6 	bl	80002f0 <memchr>
 801b304:	2800      	cmp	r0, #0
 801b306:	d036      	beq.n	801b376 <_svfiprintf_r+0x1d2>
 801b308:	4b21      	ldr	r3, [pc, #132]	@ (801b390 <_svfiprintf_r+0x1ec>)
 801b30a:	bb1b      	cbnz	r3, 801b354 <_svfiprintf_r+0x1b0>
 801b30c:	9b03      	ldr	r3, [sp, #12]
 801b30e:	3307      	adds	r3, #7
 801b310:	f023 0307 	bic.w	r3, r3, #7
 801b314:	3308      	adds	r3, #8
 801b316:	9303      	str	r3, [sp, #12]
 801b318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b31a:	4433      	add	r3, r6
 801b31c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b31e:	e76a      	b.n	801b1f6 <_svfiprintf_r+0x52>
 801b320:	fb0c 3202 	mla	r2, ip, r2, r3
 801b324:	460c      	mov	r4, r1
 801b326:	2001      	movs	r0, #1
 801b328:	e7a8      	b.n	801b27c <_svfiprintf_r+0xd8>
 801b32a:	2300      	movs	r3, #0
 801b32c:	3401      	adds	r4, #1
 801b32e:	9305      	str	r3, [sp, #20]
 801b330:	4619      	mov	r1, r3
 801b332:	f04f 0c0a 	mov.w	ip, #10
 801b336:	4620      	mov	r0, r4
 801b338:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b33c:	3a30      	subs	r2, #48	@ 0x30
 801b33e:	2a09      	cmp	r2, #9
 801b340:	d903      	bls.n	801b34a <_svfiprintf_r+0x1a6>
 801b342:	2b00      	cmp	r3, #0
 801b344:	d0c6      	beq.n	801b2d4 <_svfiprintf_r+0x130>
 801b346:	9105      	str	r1, [sp, #20]
 801b348:	e7c4      	b.n	801b2d4 <_svfiprintf_r+0x130>
 801b34a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b34e:	4604      	mov	r4, r0
 801b350:	2301      	movs	r3, #1
 801b352:	e7f0      	b.n	801b336 <_svfiprintf_r+0x192>
 801b354:	ab03      	add	r3, sp, #12
 801b356:	9300      	str	r3, [sp, #0]
 801b358:	462a      	mov	r2, r5
 801b35a:	4b0e      	ldr	r3, [pc, #56]	@ (801b394 <_svfiprintf_r+0x1f0>)
 801b35c:	a904      	add	r1, sp, #16
 801b35e:	4638      	mov	r0, r7
 801b360:	f3af 8000 	nop.w
 801b364:	1c42      	adds	r2, r0, #1
 801b366:	4606      	mov	r6, r0
 801b368:	d1d6      	bne.n	801b318 <_svfiprintf_r+0x174>
 801b36a:	89ab      	ldrh	r3, [r5, #12]
 801b36c:	065b      	lsls	r3, r3, #25
 801b36e:	f53f af2d 	bmi.w	801b1cc <_svfiprintf_r+0x28>
 801b372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b374:	e72c      	b.n	801b1d0 <_svfiprintf_r+0x2c>
 801b376:	ab03      	add	r3, sp, #12
 801b378:	9300      	str	r3, [sp, #0]
 801b37a:	462a      	mov	r2, r5
 801b37c:	4b05      	ldr	r3, [pc, #20]	@ (801b394 <_svfiprintf_r+0x1f0>)
 801b37e:	a904      	add	r1, sp, #16
 801b380:	4638      	mov	r0, r7
 801b382:	f000 f9bb 	bl	801b6fc <_printf_i>
 801b386:	e7ed      	b.n	801b364 <_svfiprintf_r+0x1c0>
 801b388:	0801f4bb 	.word	0x0801f4bb
 801b38c:	0801f4c5 	.word	0x0801f4c5
 801b390:	00000000 	.word	0x00000000
 801b394:	0801b0ed 	.word	0x0801b0ed
 801b398:	0801f4c1 	.word	0x0801f4c1

0801b39c <__sfputc_r>:
 801b39c:	6893      	ldr	r3, [r2, #8]
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	b410      	push	{r4}
 801b3a4:	6093      	str	r3, [r2, #8]
 801b3a6:	da08      	bge.n	801b3ba <__sfputc_r+0x1e>
 801b3a8:	6994      	ldr	r4, [r2, #24]
 801b3aa:	42a3      	cmp	r3, r4
 801b3ac:	db01      	blt.n	801b3b2 <__sfputc_r+0x16>
 801b3ae:	290a      	cmp	r1, #10
 801b3b0:	d103      	bne.n	801b3ba <__sfputc_r+0x1e>
 801b3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3b6:	f000 bb7f 	b.w	801bab8 <__swbuf_r>
 801b3ba:	6813      	ldr	r3, [r2, #0]
 801b3bc:	1c58      	adds	r0, r3, #1
 801b3be:	6010      	str	r0, [r2, #0]
 801b3c0:	7019      	strb	r1, [r3, #0]
 801b3c2:	4608      	mov	r0, r1
 801b3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3c8:	4770      	bx	lr

0801b3ca <__sfputs_r>:
 801b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3cc:	4606      	mov	r6, r0
 801b3ce:	460f      	mov	r7, r1
 801b3d0:	4614      	mov	r4, r2
 801b3d2:	18d5      	adds	r5, r2, r3
 801b3d4:	42ac      	cmp	r4, r5
 801b3d6:	d101      	bne.n	801b3dc <__sfputs_r+0x12>
 801b3d8:	2000      	movs	r0, #0
 801b3da:	e007      	b.n	801b3ec <__sfputs_r+0x22>
 801b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3e0:	463a      	mov	r2, r7
 801b3e2:	4630      	mov	r0, r6
 801b3e4:	f7ff ffda 	bl	801b39c <__sfputc_r>
 801b3e8:	1c43      	adds	r3, r0, #1
 801b3ea:	d1f3      	bne.n	801b3d4 <__sfputs_r+0xa>
 801b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b3f0 <_vfiprintf_r>:
 801b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f4:	460d      	mov	r5, r1
 801b3f6:	b09d      	sub	sp, #116	@ 0x74
 801b3f8:	4614      	mov	r4, r2
 801b3fa:	4698      	mov	r8, r3
 801b3fc:	4606      	mov	r6, r0
 801b3fe:	b118      	cbz	r0, 801b408 <_vfiprintf_r+0x18>
 801b400:	6a03      	ldr	r3, [r0, #32]
 801b402:	b90b      	cbnz	r3, 801b408 <_vfiprintf_r+0x18>
 801b404:	f7ff fc18 	bl	801ac38 <__sinit>
 801b408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b40a:	07d9      	lsls	r1, r3, #31
 801b40c:	d405      	bmi.n	801b41a <_vfiprintf_r+0x2a>
 801b40e:	89ab      	ldrh	r3, [r5, #12]
 801b410:	059a      	lsls	r2, r3, #22
 801b412:	d402      	bmi.n	801b41a <_vfiprintf_r+0x2a>
 801b414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b416:	f7ff fd84 	bl	801af22 <__retarget_lock_acquire_recursive>
 801b41a:	89ab      	ldrh	r3, [r5, #12]
 801b41c:	071b      	lsls	r3, r3, #28
 801b41e:	d501      	bpl.n	801b424 <_vfiprintf_r+0x34>
 801b420:	692b      	ldr	r3, [r5, #16]
 801b422:	b99b      	cbnz	r3, 801b44c <_vfiprintf_r+0x5c>
 801b424:	4629      	mov	r1, r5
 801b426:	4630      	mov	r0, r6
 801b428:	f000 fb84 	bl	801bb34 <__swsetup_r>
 801b42c:	b170      	cbz	r0, 801b44c <_vfiprintf_r+0x5c>
 801b42e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b430:	07dc      	lsls	r4, r3, #31
 801b432:	d504      	bpl.n	801b43e <_vfiprintf_r+0x4e>
 801b434:	f04f 30ff 	mov.w	r0, #4294967295
 801b438:	b01d      	add	sp, #116	@ 0x74
 801b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b43e:	89ab      	ldrh	r3, [r5, #12]
 801b440:	0598      	lsls	r0, r3, #22
 801b442:	d4f7      	bmi.n	801b434 <_vfiprintf_r+0x44>
 801b444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b446:	f7ff fd6d 	bl	801af24 <__retarget_lock_release_recursive>
 801b44a:	e7f3      	b.n	801b434 <_vfiprintf_r+0x44>
 801b44c:	2300      	movs	r3, #0
 801b44e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b450:	2320      	movs	r3, #32
 801b452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b456:	f8cd 800c 	str.w	r8, [sp, #12]
 801b45a:	2330      	movs	r3, #48	@ 0x30
 801b45c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b60c <_vfiprintf_r+0x21c>
 801b460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b464:	f04f 0901 	mov.w	r9, #1
 801b468:	4623      	mov	r3, r4
 801b46a:	469a      	mov	sl, r3
 801b46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b470:	b10a      	cbz	r2, 801b476 <_vfiprintf_r+0x86>
 801b472:	2a25      	cmp	r2, #37	@ 0x25
 801b474:	d1f9      	bne.n	801b46a <_vfiprintf_r+0x7a>
 801b476:	ebba 0b04 	subs.w	fp, sl, r4
 801b47a:	d00b      	beq.n	801b494 <_vfiprintf_r+0xa4>
 801b47c:	465b      	mov	r3, fp
 801b47e:	4622      	mov	r2, r4
 801b480:	4629      	mov	r1, r5
 801b482:	4630      	mov	r0, r6
 801b484:	f7ff ffa1 	bl	801b3ca <__sfputs_r>
 801b488:	3001      	adds	r0, #1
 801b48a:	f000 80a7 	beq.w	801b5dc <_vfiprintf_r+0x1ec>
 801b48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b490:	445a      	add	r2, fp
 801b492:	9209      	str	r2, [sp, #36]	@ 0x24
 801b494:	f89a 3000 	ldrb.w	r3, [sl]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	f000 809f 	beq.w	801b5dc <_vfiprintf_r+0x1ec>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 801b4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4a8:	f10a 0a01 	add.w	sl, sl, #1
 801b4ac:	9304      	str	r3, [sp, #16]
 801b4ae:	9307      	str	r3, [sp, #28]
 801b4b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b4b4:	931a      	str	r3, [sp, #104]	@ 0x68
 801b4b6:	4654      	mov	r4, sl
 801b4b8:	2205      	movs	r2, #5
 801b4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4be:	4853      	ldr	r0, [pc, #332]	@ (801b60c <_vfiprintf_r+0x21c>)
 801b4c0:	f7e4 ff16 	bl	80002f0 <memchr>
 801b4c4:	9a04      	ldr	r2, [sp, #16]
 801b4c6:	b9d8      	cbnz	r0, 801b500 <_vfiprintf_r+0x110>
 801b4c8:	06d1      	lsls	r1, r2, #27
 801b4ca:	bf44      	itt	mi
 801b4cc:	2320      	movmi	r3, #32
 801b4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b4d2:	0713      	lsls	r3, r2, #28
 801b4d4:	bf44      	itt	mi
 801b4d6:	232b      	movmi	r3, #43	@ 0x2b
 801b4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b4dc:	f89a 3000 	ldrb.w	r3, [sl]
 801b4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4e2:	d015      	beq.n	801b510 <_vfiprintf_r+0x120>
 801b4e4:	9a07      	ldr	r2, [sp, #28]
 801b4e6:	4654      	mov	r4, sl
 801b4e8:	2000      	movs	r0, #0
 801b4ea:	f04f 0c0a 	mov.w	ip, #10
 801b4ee:	4621      	mov	r1, r4
 801b4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4f4:	3b30      	subs	r3, #48	@ 0x30
 801b4f6:	2b09      	cmp	r3, #9
 801b4f8:	d94b      	bls.n	801b592 <_vfiprintf_r+0x1a2>
 801b4fa:	b1b0      	cbz	r0, 801b52a <_vfiprintf_r+0x13a>
 801b4fc:	9207      	str	r2, [sp, #28]
 801b4fe:	e014      	b.n	801b52a <_vfiprintf_r+0x13a>
 801b500:	eba0 0308 	sub.w	r3, r0, r8
 801b504:	fa09 f303 	lsl.w	r3, r9, r3
 801b508:	4313      	orrs	r3, r2
 801b50a:	9304      	str	r3, [sp, #16]
 801b50c:	46a2      	mov	sl, r4
 801b50e:	e7d2      	b.n	801b4b6 <_vfiprintf_r+0xc6>
 801b510:	9b03      	ldr	r3, [sp, #12]
 801b512:	1d19      	adds	r1, r3, #4
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	9103      	str	r1, [sp, #12]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	bfbb      	ittet	lt
 801b51c:	425b      	neglt	r3, r3
 801b51e:	f042 0202 	orrlt.w	r2, r2, #2
 801b522:	9307      	strge	r3, [sp, #28]
 801b524:	9307      	strlt	r3, [sp, #28]
 801b526:	bfb8      	it	lt
 801b528:	9204      	strlt	r2, [sp, #16]
 801b52a:	7823      	ldrb	r3, [r4, #0]
 801b52c:	2b2e      	cmp	r3, #46	@ 0x2e
 801b52e:	d10a      	bne.n	801b546 <_vfiprintf_r+0x156>
 801b530:	7863      	ldrb	r3, [r4, #1]
 801b532:	2b2a      	cmp	r3, #42	@ 0x2a
 801b534:	d132      	bne.n	801b59c <_vfiprintf_r+0x1ac>
 801b536:	9b03      	ldr	r3, [sp, #12]
 801b538:	1d1a      	adds	r2, r3, #4
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	9203      	str	r2, [sp, #12]
 801b53e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b542:	3402      	adds	r4, #2
 801b544:	9305      	str	r3, [sp, #20]
 801b546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b61c <_vfiprintf_r+0x22c>
 801b54a:	7821      	ldrb	r1, [r4, #0]
 801b54c:	2203      	movs	r2, #3
 801b54e:	4650      	mov	r0, sl
 801b550:	f7e4 fece 	bl	80002f0 <memchr>
 801b554:	b138      	cbz	r0, 801b566 <_vfiprintf_r+0x176>
 801b556:	9b04      	ldr	r3, [sp, #16]
 801b558:	eba0 000a 	sub.w	r0, r0, sl
 801b55c:	2240      	movs	r2, #64	@ 0x40
 801b55e:	4082      	lsls	r2, r0
 801b560:	4313      	orrs	r3, r2
 801b562:	3401      	adds	r4, #1
 801b564:	9304      	str	r3, [sp, #16]
 801b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b56a:	4829      	ldr	r0, [pc, #164]	@ (801b610 <_vfiprintf_r+0x220>)
 801b56c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b570:	2206      	movs	r2, #6
 801b572:	f7e4 febd 	bl	80002f0 <memchr>
 801b576:	2800      	cmp	r0, #0
 801b578:	d03f      	beq.n	801b5fa <_vfiprintf_r+0x20a>
 801b57a:	4b26      	ldr	r3, [pc, #152]	@ (801b614 <_vfiprintf_r+0x224>)
 801b57c:	bb1b      	cbnz	r3, 801b5c6 <_vfiprintf_r+0x1d6>
 801b57e:	9b03      	ldr	r3, [sp, #12]
 801b580:	3307      	adds	r3, #7
 801b582:	f023 0307 	bic.w	r3, r3, #7
 801b586:	3308      	adds	r3, #8
 801b588:	9303      	str	r3, [sp, #12]
 801b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b58c:	443b      	add	r3, r7
 801b58e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b590:	e76a      	b.n	801b468 <_vfiprintf_r+0x78>
 801b592:	fb0c 3202 	mla	r2, ip, r2, r3
 801b596:	460c      	mov	r4, r1
 801b598:	2001      	movs	r0, #1
 801b59a:	e7a8      	b.n	801b4ee <_vfiprintf_r+0xfe>
 801b59c:	2300      	movs	r3, #0
 801b59e:	3401      	adds	r4, #1
 801b5a0:	9305      	str	r3, [sp, #20]
 801b5a2:	4619      	mov	r1, r3
 801b5a4:	f04f 0c0a 	mov.w	ip, #10
 801b5a8:	4620      	mov	r0, r4
 801b5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5ae:	3a30      	subs	r2, #48	@ 0x30
 801b5b0:	2a09      	cmp	r2, #9
 801b5b2:	d903      	bls.n	801b5bc <_vfiprintf_r+0x1cc>
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d0c6      	beq.n	801b546 <_vfiprintf_r+0x156>
 801b5b8:	9105      	str	r1, [sp, #20]
 801b5ba:	e7c4      	b.n	801b546 <_vfiprintf_r+0x156>
 801b5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801b5c0:	4604      	mov	r4, r0
 801b5c2:	2301      	movs	r3, #1
 801b5c4:	e7f0      	b.n	801b5a8 <_vfiprintf_r+0x1b8>
 801b5c6:	ab03      	add	r3, sp, #12
 801b5c8:	9300      	str	r3, [sp, #0]
 801b5ca:	462a      	mov	r2, r5
 801b5cc:	4b12      	ldr	r3, [pc, #72]	@ (801b618 <_vfiprintf_r+0x228>)
 801b5ce:	a904      	add	r1, sp, #16
 801b5d0:	4630      	mov	r0, r6
 801b5d2:	f3af 8000 	nop.w
 801b5d6:	4607      	mov	r7, r0
 801b5d8:	1c78      	adds	r0, r7, #1
 801b5da:	d1d6      	bne.n	801b58a <_vfiprintf_r+0x19a>
 801b5dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b5de:	07d9      	lsls	r1, r3, #31
 801b5e0:	d405      	bmi.n	801b5ee <_vfiprintf_r+0x1fe>
 801b5e2:	89ab      	ldrh	r3, [r5, #12]
 801b5e4:	059a      	lsls	r2, r3, #22
 801b5e6:	d402      	bmi.n	801b5ee <_vfiprintf_r+0x1fe>
 801b5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b5ea:	f7ff fc9b 	bl	801af24 <__retarget_lock_release_recursive>
 801b5ee:	89ab      	ldrh	r3, [r5, #12]
 801b5f0:	065b      	lsls	r3, r3, #25
 801b5f2:	f53f af1f 	bmi.w	801b434 <_vfiprintf_r+0x44>
 801b5f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5f8:	e71e      	b.n	801b438 <_vfiprintf_r+0x48>
 801b5fa:	ab03      	add	r3, sp, #12
 801b5fc:	9300      	str	r3, [sp, #0]
 801b5fe:	462a      	mov	r2, r5
 801b600:	4b05      	ldr	r3, [pc, #20]	@ (801b618 <_vfiprintf_r+0x228>)
 801b602:	a904      	add	r1, sp, #16
 801b604:	4630      	mov	r0, r6
 801b606:	f000 f879 	bl	801b6fc <_printf_i>
 801b60a:	e7e4      	b.n	801b5d6 <_vfiprintf_r+0x1e6>
 801b60c:	0801f4bb 	.word	0x0801f4bb
 801b610:	0801f4c5 	.word	0x0801f4c5
 801b614:	00000000 	.word	0x00000000
 801b618:	0801b3cb 	.word	0x0801b3cb
 801b61c:	0801f4c1 	.word	0x0801f4c1

0801b620 <_printf_common>:
 801b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b624:	4616      	mov	r6, r2
 801b626:	4698      	mov	r8, r3
 801b628:	688a      	ldr	r2, [r1, #8]
 801b62a:	690b      	ldr	r3, [r1, #16]
 801b62c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b630:	4293      	cmp	r3, r2
 801b632:	bfb8      	it	lt
 801b634:	4613      	movlt	r3, r2
 801b636:	6033      	str	r3, [r6, #0]
 801b638:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b63c:	4607      	mov	r7, r0
 801b63e:	460c      	mov	r4, r1
 801b640:	b10a      	cbz	r2, 801b646 <_printf_common+0x26>
 801b642:	3301      	adds	r3, #1
 801b644:	6033      	str	r3, [r6, #0]
 801b646:	6823      	ldr	r3, [r4, #0]
 801b648:	0699      	lsls	r1, r3, #26
 801b64a:	bf42      	ittt	mi
 801b64c:	6833      	ldrmi	r3, [r6, #0]
 801b64e:	3302      	addmi	r3, #2
 801b650:	6033      	strmi	r3, [r6, #0]
 801b652:	6825      	ldr	r5, [r4, #0]
 801b654:	f015 0506 	ands.w	r5, r5, #6
 801b658:	d106      	bne.n	801b668 <_printf_common+0x48>
 801b65a:	f104 0a19 	add.w	sl, r4, #25
 801b65e:	68e3      	ldr	r3, [r4, #12]
 801b660:	6832      	ldr	r2, [r6, #0]
 801b662:	1a9b      	subs	r3, r3, r2
 801b664:	42ab      	cmp	r3, r5
 801b666:	dc26      	bgt.n	801b6b6 <_printf_common+0x96>
 801b668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b66c:	6822      	ldr	r2, [r4, #0]
 801b66e:	3b00      	subs	r3, #0
 801b670:	bf18      	it	ne
 801b672:	2301      	movne	r3, #1
 801b674:	0692      	lsls	r2, r2, #26
 801b676:	d42b      	bmi.n	801b6d0 <_printf_common+0xb0>
 801b678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b67c:	4641      	mov	r1, r8
 801b67e:	4638      	mov	r0, r7
 801b680:	47c8      	blx	r9
 801b682:	3001      	adds	r0, #1
 801b684:	d01e      	beq.n	801b6c4 <_printf_common+0xa4>
 801b686:	6823      	ldr	r3, [r4, #0]
 801b688:	6922      	ldr	r2, [r4, #16]
 801b68a:	f003 0306 	and.w	r3, r3, #6
 801b68e:	2b04      	cmp	r3, #4
 801b690:	bf02      	ittt	eq
 801b692:	68e5      	ldreq	r5, [r4, #12]
 801b694:	6833      	ldreq	r3, [r6, #0]
 801b696:	1aed      	subeq	r5, r5, r3
 801b698:	68a3      	ldr	r3, [r4, #8]
 801b69a:	bf0c      	ite	eq
 801b69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b6a0:	2500      	movne	r5, #0
 801b6a2:	4293      	cmp	r3, r2
 801b6a4:	bfc4      	itt	gt
 801b6a6:	1a9b      	subgt	r3, r3, r2
 801b6a8:	18ed      	addgt	r5, r5, r3
 801b6aa:	2600      	movs	r6, #0
 801b6ac:	341a      	adds	r4, #26
 801b6ae:	42b5      	cmp	r5, r6
 801b6b0:	d11a      	bne.n	801b6e8 <_printf_common+0xc8>
 801b6b2:	2000      	movs	r0, #0
 801b6b4:	e008      	b.n	801b6c8 <_printf_common+0xa8>
 801b6b6:	2301      	movs	r3, #1
 801b6b8:	4652      	mov	r2, sl
 801b6ba:	4641      	mov	r1, r8
 801b6bc:	4638      	mov	r0, r7
 801b6be:	47c8      	blx	r9
 801b6c0:	3001      	adds	r0, #1
 801b6c2:	d103      	bne.n	801b6cc <_printf_common+0xac>
 801b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6cc:	3501      	adds	r5, #1
 801b6ce:	e7c6      	b.n	801b65e <_printf_common+0x3e>
 801b6d0:	18e1      	adds	r1, r4, r3
 801b6d2:	1c5a      	adds	r2, r3, #1
 801b6d4:	2030      	movs	r0, #48	@ 0x30
 801b6d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b6da:	4422      	add	r2, r4
 801b6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b6e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b6e4:	3302      	adds	r3, #2
 801b6e6:	e7c7      	b.n	801b678 <_printf_common+0x58>
 801b6e8:	2301      	movs	r3, #1
 801b6ea:	4622      	mov	r2, r4
 801b6ec:	4641      	mov	r1, r8
 801b6ee:	4638      	mov	r0, r7
 801b6f0:	47c8      	blx	r9
 801b6f2:	3001      	adds	r0, #1
 801b6f4:	d0e6      	beq.n	801b6c4 <_printf_common+0xa4>
 801b6f6:	3601      	adds	r6, #1
 801b6f8:	e7d9      	b.n	801b6ae <_printf_common+0x8e>
	...

0801b6fc <_printf_i>:
 801b6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b700:	7e0f      	ldrb	r7, [r1, #24]
 801b702:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b704:	2f78      	cmp	r7, #120	@ 0x78
 801b706:	4691      	mov	r9, r2
 801b708:	4680      	mov	r8, r0
 801b70a:	460c      	mov	r4, r1
 801b70c:	469a      	mov	sl, r3
 801b70e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b712:	d807      	bhi.n	801b724 <_printf_i+0x28>
 801b714:	2f62      	cmp	r7, #98	@ 0x62
 801b716:	d80a      	bhi.n	801b72e <_printf_i+0x32>
 801b718:	2f00      	cmp	r7, #0
 801b71a:	f000 80d2 	beq.w	801b8c2 <_printf_i+0x1c6>
 801b71e:	2f58      	cmp	r7, #88	@ 0x58
 801b720:	f000 80b9 	beq.w	801b896 <_printf_i+0x19a>
 801b724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b72c:	e03a      	b.n	801b7a4 <_printf_i+0xa8>
 801b72e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b732:	2b15      	cmp	r3, #21
 801b734:	d8f6      	bhi.n	801b724 <_printf_i+0x28>
 801b736:	a101      	add	r1, pc, #4	@ (adr r1, 801b73c <_printf_i+0x40>)
 801b738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b73c:	0801b795 	.word	0x0801b795
 801b740:	0801b7a9 	.word	0x0801b7a9
 801b744:	0801b725 	.word	0x0801b725
 801b748:	0801b725 	.word	0x0801b725
 801b74c:	0801b725 	.word	0x0801b725
 801b750:	0801b725 	.word	0x0801b725
 801b754:	0801b7a9 	.word	0x0801b7a9
 801b758:	0801b725 	.word	0x0801b725
 801b75c:	0801b725 	.word	0x0801b725
 801b760:	0801b725 	.word	0x0801b725
 801b764:	0801b725 	.word	0x0801b725
 801b768:	0801b8a9 	.word	0x0801b8a9
 801b76c:	0801b7d3 	.word	0x0801b7d3
 801b770:	0801b863 	.word	0x0801b863
 801b774:	0801b725 	.word	0x0801b725
 801b778:	0801b725 	.word	0x0801b725
 801b77c:	0801b8cb 	.word	0x0801b8cb
 801b780:	0801b725 	.word	0x0801b725
 801b784:	0801b7d3 	.word	0x0801b7d3
 801b788:	0801b725 	.word	0x0801b725
 801b78c:	0801b725 	.word	0x0801b725
 801b790:	0801b86b 	.word	0x0801b86b
 801b794:	6833      	ldr	r3, [r6, #0]
 801b796:	1d1a      	adds	r2, r3, #4
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	6032      	str	r2, [r6, #0]
 801b79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b7a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b7a4:	2301      	movs	r3, #1
 801b7a6:	e09d      	b.n	801b8e4 <_printf_i+0x1e8>
 801b7a8:	6833      	ldr	r3, [r6, #0]
 801b7aa:	6820      	ldr	r0, [r4, #0]
 801b7ac:	1d19      	adds	r1, r3, #4
 801b7ae:	6031      	str	r1, [r6, #0]
 801b7b0:	0606      	lsls	r6, r0, #24
 801b7b2:	d501      	bpl.n	801b7b8 <_printf_i+0xbc>
 801b7b4:	681d      	ldr	r5, [r3, #0]
 801b7b6:	e003      	b.n	801b7c0 <_printf_i+0xc4>
 801b7b8:	0645      	lsls	r5, r0, #25
 801b7ba:	d5fb      	bpl.n	801b7b4 <_printf_i+0xb8>
 801b7bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	da03      	bge.n	801b7cc <_printf_i+0xd0>
 801b7c4:	232d      	movs	r3, #45	@ 0x2d
 801b7c6:	426d      	negs	r5, r5
 801b7c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b7cc:	4859      	ldr	r0, [pc, #356]	@ (801b934 <_printf_i+0x238>)
 801b7ce:	230a      	movs	r3, #10
 801b7d0:	e011      	b.n	801b7f6 <_printf_i+0xfa>
 801b7d2:	6821      	ldr	r1, [r4, #0]
 801b7d4:	6833      	ldr	r3, [r6, #0]
 801b7d6:	0608      	lsls	r0, r1, #24
 801b7d8:	f853 5b04 	ldr.w	r5, [r3], #4
 801b7dc:	d402      	bmi.n	801b7e4 <_printf_i+0xe8>
 801b7de:	0649      	lsls	r1, r1, #25
 801b7e0:	bf48      	it	mi
 801b7e2:	b2ad      	uxthmi	r5, r5
 801b7e4:	2f6f      	cmp	r7, #111	@ 0x6f
 801b7e6:	4853      	ldr	r0, [pc, #332]	@ (801b934 <_printf_i+0x238>)
 801b7e8:	6033      	str	r3, [r6, #0]
 801b7ea:	bf14      	ite	ne
 801b7ec:	230a      	movne	r3, #10
 801b7ee:	2308      	moveq	r3, #8
 801b7f0:	2100      	movs	r1, #0
 801b7f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b7f6:	6866      	ldr	r6, [r4, #4]
 801b7f8:	60a6      	str	r6, [r4, #8]
 801b7fa:	2e00      	cmp	r6, #0
 801b7fc:	bfa2      	ittt	ge
 801b7fe:	6821      	ldrge	r1, [r4, #0]
 801b800:	f021 0104 	bicge.w	r1, r1, #4
 801b804:	6021      	strge	r1, [r4, #0]
 801b806:	b90d      	cbnz	r5, 801b80c <_printf_i+0x110>
 801b808:	2e00      	cmp	r6, #0
 801b80a:	d04b      	beq.n	801b8a4 <_printf_i+0x1a8>
 801b80c:	4616      	mov	r6, r2
 801b80e:	fbb5 f1f3 	udiv	r1, r5, r3
 801b812:	fb03 5711 	mls	r7, r3, r1, r5
 801b816:	5dc7      	ldrb	r7, [r0, r7]
 801b818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b81c:	462f      	mov	r7, r5
 801b81e:	42bb      	cmp	r3, r7
 801b820:	460d      	mov	r5, r1
 801b822:	d9f4      	bls.n	801b80e <_printf_i+0x112>
 801b824:	2b08      	cmp	r3, #8
 801b826:	d10b      	bne.n	801b840 <_printf_i+0x144>
 801b828:	6823      	ldr	r3, [r4, #0]
 801b82a:	07df      	lsls	r7, r3, #31
 801b82c:	d508      	bpl.n	801b840 <_printf_i+0x144>
 801b82e:	6923      	ldr	r3, [r4, #16]
 801b830:	6861      	ldr	r1, [r4, #4]
 801b832:	4299      	cmp	r1, r3
 801b834:	bfde      	ittt	le
 801b836:	2330      	movle	r3, #48	@ 0x30
 801b838:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b83c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b840:	1b92      	subs	r2, r2, r6
 801b842:	6122      	str	r2, [r4, #16]
 801b844:	f8cd a000 	str.w	sl, [sp]
 801b848:	464b      	mov	r3, r9
 801b84a:	aa03      	add	r2, sp, #12
 801b84c:	4621      	mov	r1, r4
 801b84e:	4640      	mov	r0, r8
 801b850:	f7ff fee6 	bl	801b620 <_printf_common>
 801b854:	3001      	adds	r0, #1
 801b856:	d14a      	bne.n	801b8ee <_printf_i+0x1f2>
 801b858:	f04f 30ff 	mov.w	r0, #4294967295
 801b85c:	b004      	add	sp, #16
 801b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b862:	6823      	ldr	r3, [r4, #0]
 801b864:	f043 0320 	orr.w	r3, r3, #32
 801b868:	6023      	str	r3, [r4, #0]
 801b86a:	4833      	ldr	r0, [pc, #204]	@ (801b938 <_printf_i+0x23c>)
 801b86c:	2778      	movs	r7, #120	@ 0x78
 801b86e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b872:	6823      	ldr	r3, [r4, #0]
 801b874:	6831      	ldr	r1, [r6, #0]
 801b876:	061f      	lsls	r7, r3, #24
 801b878:	f851 5b04 	ldr.w	r5, [r1], #4
 801b87c:	d402      	bmi.n	801b884 <_printf_i+0x188>
 801b87e:	065f      	lsls	r7, r3, #25
 801b880:	bf48      	it	mi
 801b882:	b2ad      	uxthmi	r5, r5
 801b884:	6031      	str	r1, [r6, #0]
 801b886:	07d9      	lsls	r1, r3, #31
 801b888:	bf44      	itt	mi
 801b88a:	f043 0320 	orrmi.w	r3, r3, #32
 801b88e:	6023      	strmi	r3, [r4, #0]
 801b890:	b11d      	cbz	r5, 801b89a <_printf_i+0x19e>
 801b892:	2310      	movs	r3, #16
 801b894:	e7ac      	b.n	801b7f0 <_printf_i+0xf4>
 801b896:	4827      	ldr	r0, [pc, #156]	@ (801b934 <_printf_i+0x238>)
 801b898:	e7e9      	b.n	801b86e <_printf_i+0x172>
 801b89a:	6823      	ldr	r3, [r4, #0]
 801b89c:	f023 0320 	bic.w	r3, r3, #32
 801b8a0:	6023      	str	r3, [r4, #0]
 801b8a2:	e7f6      	b.n	801b892 <_printf_i+0x196>
 801b8a4:	4616      	mov	r6, r2
 801b8a6:	e7bd      	b.n	801b824 <_printf_i+0x128>
 801b8a8:	6833      	ldr	r3, [r6, #0]
 801b8aa:	6825      	ldr	r5, [r4, #0]
 801b8ac:	6961      	ldr	r1, [r4, #20]
 801b8ae:	1d18      	adds	r0, r3, #4
 801b8b0:	6030      	str	r0, [r6, #0]
 801b8b2:	062e      	lsls	r6, r5, #24
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	d501      	bpl.n	801b8bc <_printf_i+0x1c0>
 801b8b8:	6019      	str	r1, [r3, #0]
 801b8ba:	e002      	b.n	801b8c2 <_printf_i+0x1c6>
 801b8bc:	0668      	lsls	r0, r5, #25
 801b8be:	d5fb      	bpl.n	801b8b8 <_printf_i+0x1bc>
 801b8c0:	8019      	strh	r1, [r3, #0]
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	6123      	str	r3, [r4, #16]
 801b8c6:	4616      	mov	r6, r2
 801b8c8:	e7bc      	b.n	801b844 <_printf_i+0x148>
 801b8ca:	6833      	ldr	r3, [r6, #0]
 801b8cc:	1d1a      	adds	r2, r3, #4
 801b8ce:	6032      	str	r2, [r6, #0]
 801b8d0:	681e      	ldr	r6, [r3, #0]
 801b8d2:	6862      	ldr	r2, [r4, #4]
 801b8d4:	2100      	movs	r1, #0
 801b8d6:	4630      	mov	r0, r6
 801b8d8:	f7e4 fd0a 	bl	80002f0 <memchr>
 801b8dc:	b108      	cbz	r0, 801b8e2 <_printf_i+0x1e6>
 801b8de:	1b80      	subs	r0, r0, r6
 801b8e0:	6060      	str	r0, [r4, #4]
 801b8e2:	6863      	ldr	r3, [r4, #4]
 801b8e4:	6123      	str	r3, [r4, #16]
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b8ec:	e7aa      	b.n	801b844 <_printf_i+0x148>
 801b8ee:	6923      	ldr	r3, [r4, #16]
 801b8f0:	4632      	mov	r2, r6
 801b8f2:	4649      	mov	r1, r9
 801b8f4:	4640      	mov	r0, r8
 801b8f6:	47d0      	blx	sl
 801b8f8:	3001      	adds	r0, #1
 801b8fa:	d0ad      	beq.n	801b858 <_printf_i+0x15c>
 801b8fc:	6823      	ldr	r3, [r4, #0]
 801b8fe:	079b      	lsls	r3, r3, #30
 801b900:	d413      	bmi.n	801b92a <_printf_i+0x22e>
 801b902:	68e0      	ldr	r0, [r4, #12]
 801b904:	9b03      	ldr	r3, [sp, #12]
 801b906:	4298      	cmp	r0, r3
 801b908:	bfb8      	it	lt
 801b90a:	4618      	movlt	r0, r3
 801b90c:	e7a6      	b.n	801b85c <_printf_i+0x160>
 801b90e:	2301      	movs	r3, #1
 801b910:	4632      	mov	r2, r6
 801b912:	4649      	mov	r1, r9
 801b914:	4640      	mov	r0, r8
 801b916:	47d0      	blx	sl
 801b918:	3001      	adds	r0, #1
 801b91a:	d09d      	beq.n	801b858 <_printf_i+0x15c>
 801b91c:	3501      	adds	r5, #1
 801b91e:	68e3      	ldr	r3, [r4, #12]
 801b920:	9903      	ldr	r1, [sp, #12]
 801b922:	1a5b      	subs	r3, r3, r1
 801b924:	42ab      	cmp	r3, r5
 801b926:	dcf2      	bgt.n	801b90e <_printf_i+0x212>
 801b928:	e7eb      	b.n	801b902 <_printf_i+0x206>
 801b92a:	2500      	movs	r5, #0
 801b92c:	f104 0619 	add.w	r6, r4, #25
 801b930:	e7f5      	b.n	801b91e <_printf_i+0x222>
 801b932:	bf00      	nop
 801b934:	0801f4cc 	.word	0x0801f4cc
 801b938:	0801f4dd 	.word	0x0801f4dd

0801b93c <__sflush_r>:
 801b93c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b944:	0716      	lsls	r6, r2, #28
 801b946:	4605      	mov	r5, r0
 801b948:	460c      	mov	r4, r1
 801b94a:	d454      	bmi.n	801b9f6 <__sflush_r+0xba>
 801b94c:	684b      	ldr	r3, [r1, #4]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	dc02      	bgt.n	801b958 <__sflush_r+0x1c>
 801b952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b954:	2b00      	cmp	r3, #0
 801b956:	dd48      	ble.n	801b9ea <__sflush_r+0xae>
 801b958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b95a:	2e00      	cmp	r6, #0
 801b95c:	d045      	beq.n	801b9ea <__sflush_r+0xae>
 801b95e:	2300      	movs	r3, #0
 801b960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b964:	682f      	ldr	r7, [r5, #0]
 801b966:	6a21      	ldr	r1, [r4, #32]
 801b968:	602b      	str	r3, [r5, #0]
 801b96a:	d030      	beq.n	801b9ce <__sflush_r+0x92>
 801b96c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b96e:	89a3      	ldrh	r3, [r4, #12]
 801b970:	0759      	lsls	r1, r3, #29
 801b972:	d505      	bpl.n	801b980 <__sflush_r+0x44>
 801b974:	6863      	ldr	r3, [r4, #4]
 801b976:	1ad2      	subs	r2, r2, r3
 801b978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b97a:	b10b      	cbz	r3, 801b980 <__sflush_r+0x44>
 801b97c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b97e:	1ad2      	subs	r2, r2, r3
 801b980:	2300      	movs	r3, #0
 801b982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b984:	6a21      	ldr	r1, [r4, #32]
 801b986:	4628      	mov	r0, r5
 801b988:	47b0      	blx	r6
 801b98a:	1c43      	adds	r3, r0, #1
 801b98c:	89a3      	ldrh	r3, [r4, #12]
 801b98e:	d106      	bne.n	801b99e <__sflush_r+0x62>
 801b990:	6829      	ldr	r1, [r5, #0]
 801b992:	291d      	cmp	r1, #29
 801b994:	d82b      	bhi.n	801b9ee <__sflush_r+0xb2>
 801b996:	4a2a      	ldr	r2, [pc, #168]	@ (801ba40 <__sflush_r+0x104>)
 801b998:	410a      	asrs	r2, r1
 801b99a:	07d6      	lsls	r6, r2, #31
 801b99c:	d427      	bmi.n	801b9ee <__sflush_r+0xb2>
 801b99e:	2200      	movs	r2, #0
 801b9a0:	6062      	str	r2, [r4, #4]
 801b9a2:	04d9      	lsls	r1, r3, #19
 801b9a4:	6922      	ldr	r2, [r4, #16]
 801b9a6:	6022      	str	r2, [r4, #0]
 801b9a8:	d504      	bpl.n	801b9b4 <__sflush_r+0x78>
 801b9aa:	1c42      	adds	r2, r0, #1
 801b9ac:	d101      	bne.n	801b9b2 <__sflush_r+0x76>
 801b9ae:	682b      	ldr	r3, [r5, #0]
 801b9b0:	b903      	cbnz	r3, 801b9b4 <__sflush_r+0x78>
 801b9b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801b9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b9b6:	602f      	str	r7, [r5, #0]
 801b9b8:	b1b9      	cbz	r1, 801b9ea <__sflush_r+0xae>
 801b9ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b9be:	4299      	cmp	r1, r3
 801b9c0:	d002      	beq.n	801b9c8 <__sflush_r+0x8c>
 801b9c2:	4628      	mov	r0, r5
 801b9c4:	f000 f93e 	bl	801bc44 <_free_r>
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801b9cc:	e00d      	b.n	801b9ea <__sflush_r+0xae>
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	47b0      	blx	r6
 801b9d4:	4602      	mov	r2, r0
 801b9d6:	1c50      	adds	r0, r2, #1
 801b9d8:	d1c9      	bne.n	801b96e <__sflush_r+0x32>
 801b9da:	682b      	ldr	r3, [r5, #0]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d0c6      	beq.n	801b96e <__sflush_r+0x32>
 801b9e0:	2b1d      	cmp	r3, #29
 801b9e2:	d001      	beq.n	801b9e8 <__sflush_r+0xac>
 801b9e4:	2b16      	cmp	r3, #22
 801b9e6:	d11e      	bne.n	801ba26 <__sflush_r+0xea>
 801b9e8:	602f      	str	r7, [r5, #0]
 801b9ea:	2000      	movs	r0, #0
 801b9ec:	e022      	b.n	801ba34 <__sflush_r+0xf8>
 801b9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b9f2:	b21b      	sxth	r3, r3
 801b9f4:	e01b      	b.n	801ba2e <__sflush_r+0xf2>
 801b9f6:	690f      	ldr	r7, [r1, #16]
 801b9f8:	2f00      	cmp	r7, #0
 801b9fa:	d0f6      	beq.n	801b9ea <__sflush_r+0xae>
 801b9fc:	0793      	lsls	r3, r2, #30
 801b9fe:	680e      	ldr	r6, [r1, #0]
 801ba00:	bf08      	it	eq
 801ba02:	694b      	ldreq	r3, [r1, #20]
 801ba04:	600f      	str	r7, [r1, #0]
 801ba06:	bf18      	it	ne
 801ba08:	2300      	movne	r3, #0
 801ba0a:	eba6 0807 	sub.w	r8, r6, r7
 801ba0e:	608b      	str	r3, [r1, #8]
 801ba10:	f1b8 0f00 	cmp.w	r8, #0
 801ba14:	dde9      	ble.n	801b9ea <__sflush_r+0xae>
 801ba16:	6a21      	ldr	r1, [r4, #32]
 801ba18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ba1a:	4643      	mov	r3, r8
 801ba1c:	463a      	mov	r2, r7
 801ba1e:	4628      	mov	r0, r5
 801ba20:	47b0      	blx	r6
 801ba22:	2800      	cmp	r0, #0
 801ba24:	dc08      	bgt.n	801ba38 <__sflush_r+0xfc>
 801ba26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ba2e:	81a3      	strh	r3, [r4, #12]
 801ba30:	f04f 30ff 	mov.w	r0, #4294967295
 801ba34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba38:	4407      	add	r7, r0
 801ba3a:	eba8 0800 	sub.w	r8, r8, r0
 801ba3e:	e7e7      	b.n	801ba10 <__sflush_r+0xd4>
 801ba40:	dfbffffe 	.word	0xdfbffffe

0801ba44 <_fflush_r>:
 801ba44:	b538      	push	{r3, r4, r5, lr}
 801ba46:	690b      	ldr	r3, [r1, #16]
 801ba48:	4605      	mov	r5, r0
 801ba4a:	460c      	mov	r4, r1
 801ba4c:	b913      	cbnz	r3, 801ba54 <_fflush_r+0x10>
 801ba4e:	2500      	movs	r5, #0
 801ba50:	4628      	mov	r0, r5
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	b118      	cbz	r0, 801ba5e <_fflush_r+0x1a>
 801ba56:	6a03      	ldr	r3, [r0, #32]
 801ba58:	b90b      	cbnz	r3, 801ba5e <_fflush_r+0x1a>
 801ba5a:	f7ff f8ed 	bl	801ac38 <__sinit>
 801ba5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d0f3      	beq.n	801ba4e <_fflush_r+0xa>
 801ba66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ba68:	07d0      	lsls	r0, r2, #31
 801ba6a:	d404      	bmi.n	801ba76 <_fflush_r+0x32>
 801ba6c:	0599      	lsls	r1, r3, #22
 801ba6e:	d402      	bmi.n	801ba76 <_fflush_r+0x32>
 801ba70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ba72:	f7ff fa56 	bl	801af22 <__retarget_lock_acquire_recursive>
 801ba76:	4628      	mov	r0, r5
 801ba78:	4621      	mov	r1, r4
 801ba7a:	f7ff ff5f 	bl	801b93c <__sflush_r>
 801ba7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ba80:	07da      	lsls	r2, r3, #31
 801ba82:	4605      	mov	r5, r0
 801ba84:	d4e4      	bmi.n	801ba50 <_fflush_r+0xc>
 801ba86:	89a3      	ldrh	r3, [r4, #12]
 801ba88:	059b      	lsls	r3, r3, #22
 801ba8a:	d4e1      	bmi.n	801ba50 <_fflush_r+0xc>
 801ba8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ba8e:	f7ff fa49 	bl	801af24 <__retarget_lock_release_recursive>
 801ba92:	e7dd      	b.n	801ba50 <_fflush_r+0xc>

0801ba94 <fiprintf>:
 801ba94:	b40e      	push	{r1, r2, r3}
 801ba96:	b503      	push	{r0, r1, lr}
 801ba98:	4601      	mov	r1, r0
 801ba9a:	ab03      	add	r3, sp, #12
 801ba9c:	4805      	ldr	r0, [pc, #20]	@ (801bab4 <fiprintf+0x20>)
 801ba9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801baa2:	6800      	ldr	r0, [r0, #0]
 801baa4:	9301      	str	r3, [sp, #4]
 801baa6:	f7ff fca3 	bl	801b3f0 <_vfiprintf_r>
 801baaa:	b002      	add	sp, #8
 801baac:	f85d eb04 	ldr.w	lr, [sp], #4
 801bab0:	b003      	add	sp, #12
 801bab2:	4770      	bx	lr
 801bab4:	24000044 	.word	0x24000044

0801bab8 <__swbuf_r>:
 801bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baba:	460e      	mov	r6, r1
 801babc:	4614      	mov	r4, r2
 801babe:	4605      	mov	r5, r0
 801bac0:	b118      	cbz	r0, 801baca <__swbuf_r+0x12>
 801bac2:	6a03      	ldr	r3, [r0, #32]
 801bac4:	b90b      	cbnz	r3, 801baca <__swbuf_r+0x12>
 801bac6:	f7ff f8b7 	bl	801ac38 <__sinit>
 801baca:	69a3      	ldr	r3, [r4, #24]
 801bacc:	60a3      	str	r3, [r4, #8]
 801bace:	89a3      	ldrh	r3, [r4, #12]
 801bad0:	071a      	lsls	r2, r3, #28
 801bad2:	d501      	bpl.n	801bad8 <__swbuf_r+0x20>
 801bad4:	6923      	ldr	r3, [r4, #16]
 801bad6:	b943      	cbnz	r3, 801baea <__swbuf_r+0x32>
 801bad8:	4621      	mov	r1, r4
 801bada:	4628      	mov	r0, r5
 801badc:	f000 f82a 	bl	801bb34 <__swsetup_r>
 801bae0:	b118      	cbz	r0, 801baea <__swbuf_r+0x32>
 801bae2:	f04f 37ff 	mov.w	r7, #4294967295
 801bae6:	4638      	mov	r0, r7
 801bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baea:	6823      	ldr	r3, [r4, #0]
 801baec:	6922      	ldr	r2, [r4, #16]
 801baee:	1a98      	subs	r0, r3, r2
 801baf0:	6963      	ldr	r3, [r4, #20]
 801baf2:	b2f6      	uxtb	r6, r6
 801baf4:	4283      	cmp	r3, r0
 801baf6:	4637      	mov	r7, r6
 801baf8:	dc05      	bgt.n	801bb06 <__swbuf_r+0x4e>
 801bafa:	4621      	mov	r1, r4
 801bafc:	4628      	mov	r0, r5
 801bafe:	f7ff ffa1 	bl	801ba44 <_fflush_r>
 801bb02:	2800      	cmp	r0, #0
 801bb04:	d1ed      	bne.n	801bae2 <__swbuf_r+0x2a>
 801bb06:	68a3      	ldr	r3, [r4, #8]
 801bb08:	3b01      	subs	r3, #1
 801bb0a:	60a3      	str	r3, [r4, #8]
 801bb0c:	6823      	ldr	r3, [r4, #0]
 801bb0e:	1c5a      	adds	r2, r3, #1
 801bb10:	6022      	str	r2, [r4, #0]
 801bb12:	701e      	strb	r6, [r3, #0]
 801bb14:	6962      	ldr	r2, [r4, #20]
 801bb16:	1c43      	adds	r3, r0, #1
 801bb18:	429a      	cmp	r2, r3
 801bb1a:	d004      	beq.n	801bb26 <__swbuf_r+0x6e>
 801bb1c:	89a3      	ldrh	r3, [r4, #12]
 801bb1e:	07db      	lsls	r3, r3, #31
 801bb20:	d5e1      	bpl.n	801bae6 <__swbuf_r+0x2e>
 801bb22:	2e0a      	cmp	r6, #10
 801bb24:	d1df      	bne.n	801bae6 <__swbuf_r+0x2e>
 801bb26:	4621      	mov	r1, r4
 801bb28:	4628      	mov	r0, r5
 801bb2a:	f7ff ff8b 	bl	801ba44 <_fflush_r>
 801bb2e:	2800      	cmp	r0, #0
 801bb30:	d0d9      	beq.n	801bae6 <__swbuf_r+0x2e>
 801bb32:	e7d6      	b.n	801bae2 <__swbuf_r+0x2a>

0801bb34 <__swsetup_r>:
 801bb34:	b538      	push	{r3, r4, r5, lr}
 801bb36:	4b29      	ldr	r3, [pc, #164]	@ (801bbdc <__swsetup_r+0xa8>)
 801bb38:	4605      	mov	r5, r0
 801bb3a:	6818      	ldr	r0, [r3, #0]
 801bb3c:	460c      	mov	r4, r1
 801bb3e:	b118      	cbz	r0, 801bb48 <__swsetup_r+0x14>
 801bb40:	6a03      	ldr	r3, [r0, #32]
 801bb42:	b90b      	cbnz	r3, 801bb48 <__swsetup_r+0x14>
 801bb44:	f7ff f878 	bl	801ac38 <__sinit>
 801bb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb4c:	0719      	lsls	r1, r3, #28
 801bb4e:	d422      	bmi.n	801bb96 <__swsetup_r+0x62>
 801bb50:	06da      	lsls	r2, r3, #27
 801bb52:	d407      	bmi.n	801bb64 <__swsetup_r+0x30>
 801bb54:	2209      	movs	r2, #9
 801bb56:	602a      	str	r2, [r5, #0]
 801bb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb5c:	81a3      	strh	r3, [r4, #12]
 801bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb62:	e033      	b.n	801bbcc <__swsetup_r+0x98>
 801bb64:	0758      	lsls	r0, r3, #29
 801bb66:	d512      	bpl.n	801bb8e <__swsetup_r+0x5a>
 801bb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bb6a:	b141      	cbz	r1, 801bb7e <__swsetup_r+0x4a>
 801bb6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bb70:	4299      	cmp	r1, r3
 801bb72:	d002      	beq.n	801bb7a <__swsetup_r+0x46>
 801bb74:	4628      	mov	r0, r5
 801bb76:	f000 f865 	bl	801bc44 <_free_r>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	6363      	str	r3, [r4, #52]	@ 0x34
 801bb7e:	89a3      	ldrh	r3, [r4, #12]
 801bb80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bb84:	81a3      	strh	r3, [r4, #12]
 801bb86:	2300      	movs	r3, #0
 801bb88:	6063      	str	r3, [r4, #4]
 801bb8a:	6923      	ldr	r3, [r4, #16]
 801bb8c:	6023      	str	r3, [r4, #0]
 801bb8e:	89a3      	ldrh	r3, [r4, #12]
 801bb90:	f043 0308 	orr.w	r3, r3, #8
 801bb94:	81a3      	strh	r3, [r4, #12]
 801bb96:	6923      	ldr	r3, [r4, #16]
 801bb98:	b94b      	cbnz	r3, 801bbae <__swsetup_r+0x7a>
 801bb9a:	89a3      	ldrh	r3, [r4, #12]
 801bb9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bba4:	d003      	beq.n	801bbae <__swsetup_r+0x7a>
 801bba6:	4621      	mov	r1, r4
 801bba8:	4628      	mov	r0, r5
 801bbaa:	f000 f8e9 	bl	801bd80 <__smakebuf_r>
 801bbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbb2:	f013 0201 	ands.w	r2, r3, #1
 801bbb6:	d00a      	beq.n	801bbce <__swsetup_r+0x9a>
 801bbb8:	2200      	movs	r2, #0
 801bbba:	60a2      	str	r2, [r4, #8]
 801bbbc:	6962      	ldr	r2, [r4, #20]
 801bbbe:	4252      	negs	r2, r2
 801bbc0:	61a2      	str	r2, [r4, #24]
 801bbc2:	6922      	ldr	r2, [r4, #16]
 801bbc4:	b942      	cbnz	r2, 801bbd8 <__swsetup_r+0xa4>
 801bbc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bbca:	d1c5      	bne.n	801bb58 <__swsetup_r+0x24>
 801bbcc:	bd38      	pop	{r3, r4, r5, pc}
 801bbce:	0799      	lsls	r1, r3, #30
 801bbd0:	bf58      	it	pl
 801bbd2:	6962      	ldrpl	r2, [r4, #20]
 801bbd4:	60a2      	str	r2, [r4, #8]
 801bbd6:	e7f4      	b.n	801bbc2 <__swsetup_r+0x8e>
 801bbd8:	2000      	movs	r0, #0
 801bbda:	e7f7      	b.n	801bbcc <__swsetup_r+0x98>
 801bbdc:	24000044 	.word	0x24000044

0801bbe0 <memmove>:
 801bbe0:	4288      	cmp	r0, r1
 801bbe2:	b510      	push	{r4, lr}
 801bbe4:	eb01 0402 	add.w	r4, r1, r2
 801bbe8:	d902      	bls.n	801bbf0 <memmove+0x10>
 801bbea:	4284      	cmp	r4, r0
 801bbec:	4623      	mov	r3, r4
 801bbee:	d807      	bhi.n	801bc00 <memmove+0x20>
 801bbf0:	1e43      	subs	r3, r0, #1
 801bbf2:	42a1      	cmp	r1, r4
 801bbf4:	d008      	beq.n	801bc08 <memmove+0x28>
 801bbf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bbfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bbfe:	e7f8      	b.n	801bbf2 <memmove+0x12>
 801bc00:	4402      	add	r2, r0
 801bc02:	4601      	mov	r1, r0
 801bc04:	428a      	cmp	r2, r1
 801bc06:	d100      	bne.n	801bc0a <memmove+0x2a>
 801bc08:	bd10      	pop	{r4, pc}
 801bc0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bc0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bc12:	e7f7      	b.n	801bc04 <memmove+0x24>

0801bc14 <_sbrk_r>:
 801bc14:	b538      	push	{r3, r4, r5, lr}
 801bc16:	4d06      	ldr	r5, [pc, #24]	@ (801bc30 <_sbrk_r+0x1c>)
 801bc18:	2300      	movs	r3, #0
 801bc1a:	4604      	mov	r4, r0
 801bc1c:	4608      	mov	r0, r1
 801bc1e:	602b      	str	r3, [r5, #0]
 801bc20:	f7e5 fbb4 	bl	800138c <_sbrk>
 801bc24:	1c43      	adds	r3, r0, #1
 801bc26:	d102      	bne.n	801bc2e <_sbrk_r+0x1a>
 801bc28:	682b      	ldr	r3, [r5, #0]
 801bc2a:	b103      	cbz	r3, 801bc2e <_sbrk_r+0x1a>
 801bc2c:	6023      	str	r3, [r4, #0]
 801bc2e:	bd38      	pop	{r3, r4, r5, pc}
 801bc30:	24007820 	.word	0x24007820

0801bc34 <abort>:
 801bc34:	b508      	push	{r3, lr}
 801bc36:	2006      	movs	r0, #6
 801bc38:	f000 f906 	bl	801be48 <raise>
 801bc3c:	2001      	movs	r0, #1
 801bc3e:	f7e5 fb49 	bl	80012d4 <_exit>
	...

0801bc44 <_free_r>:
 801bc44:	b538      	push	{r3, r4, r5, lr}
 801bc46:	4605      	mov	r5, r0
 801bc48:	2900      	cmp	r1, #0
 801bc4a:	d041      	beq.n	801bcd0 <_free_r+0x8c>
 801bc4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc50:	1f0c      	subs	r4, r1, #4
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	bfb8      	it	lt
 801bc56:	18e4      	addlt	r4, r4, r3
 801bc58:	f7ff fa3c 	bl	801b0d4 <__malloc_lock>
 801bc5c:	4a1d      	ldr	r2, [pc, #116]	@ (801bcd4 <_free_r+0x90>)
 801bc5e:	6813      	ldr	r3, [r2, #0]
 801bc60:	b933      	cbnz	r3, 801bc70 <_free_r+0x2c>
 801bc62:	6063      	str	r3, [r4, #4]
 801bc64:	6014      	str	r4, [r2, #0]
 801bc66:	4628      	mov	r0, r5
 801bc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc6c:	f7ff ba38 	b.w	801b0e0 <__malloc_unlock>
 801bc70:	42a3      	cmp	r3, r4
 801bc72:	d908      	bls.n	801bc86 <_free_r+0x42>
 801bc74:	6820      	ldr	r0, [r4, #0]
 801bc76:	1821      	adds	r1, r4, r0
 801bc78:	428b      	cmp	r3, r1
 801bc7a:	bf01      	itttt	eq
 801bc7c:	6819      	ldreq	r1, [r3, #0]
 801bc7e:	685b      	ldreq	r3, [r3, #4]
 801bc80:	1809      	addeq	r1, r1, r0
 801bc82:	6021      	streq	r1, [r4, #0]
 801bc84:	e7ed      	b.n	801bc62 <_free_r+0x1e>
 801bc86:	461a      	mov	r2, r3
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	b10b      	cbz	r3, 801bc90 <_free_r+0x4c>
 801bc8c:	42a3      	cmp	r3, r4
 801bc8e:	d9fa      	bls.n	801bc86 <_free_r+0x42>
 801bc90:	6811      	ldr	r1, [r2, #0]
 801bc92:	1850      	adds	r0, r2, r1
 801bc94:	42a0      	cmp	r0, r4
 801bc96:	d10b      	bne.n	801bcb0 <_free_r+0x6c>
 801bc98:	6820      	ldr	r0, [r4, #0]
 801bc9a:	4401      	add	r1, r0
 801bc9c:	1850      	adds	r0, r2, r1
 801bc9e:	4283      	cmp	r3, r0
 801bca0:	6011      	str	r1, [r2, #0]
 801bca2:	d1e0      	bne.n	801bc66 <_free_r+0x22>
 801bca4:	6818      	ldr	r0, [r3, #0]
 801bca6:	685b      	ldr	r3, [r3, #4]
 801bca8:	6053      	str	r3, [r2, #4]
 801bcaa:	4408      	add	r0, r1
 801bcac:	6010      	str	r0, [r2, #0]
 801bcae:	e7da      	b.n	801bc66 <_free_r+0x22>
 801bcb0:	d902      	bls.n	801bcb8 <_free_r+0x74>
 801bcb2:	230c      	movs	r3, #12
 801bcb4:	602b      	str	r3, [r5, #0]
 801bcb6:	e7d6      	b.n	801bc66 <_free_r+0x22>
 801bcb8:	6820      	ldr	r0, [r4, #0]
 801bcba:	1821      	adds	r1, r4, r0
 801bcbc:	428b      	cmp	r3, r1
 801bcbe:	bf04      	itt	eq
 801bcc0:	6819      	ldreq	r1, [r3, #0]
 801bcc2:	685b      	ldreq	r3, [r3, #4]
 801bcc4:	6063      	str	r3, [r4, #4]
 801bcc6:	bf04      	itt	eq
 801bcc8:	1809      	addeq	r1, r1, r0
 801bcca:	6021      	streq	r1, [r4, #0]
 801bccc:	6054      	str	r4, [r2, #4]
 801bcce:	e7ca      	b.n	801bc66 <_free_r+0x22>
 801bcd0:	bd38      	pop	{r3, r4, r5, pc}
 801bcd2:	bf00      	nop
 801bcd4:	2400796c 	.word	0x2400796c

0801bcd8 <_realloc_r>:
 801bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcdc:	4680      	mov	r8, r0
 801bcde:	4615      	mov	r5, r2
 801bce0:	460c      	mov	r4, r1
 801bce2:	b921      	cbnz	r1, 801bcee <_realloc_r+0x16>
 801bce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bce8:	4611      	mov	r1, r2
 801bcea:	f7ff b973 	b.w	801afd4 <_malloc_r>
 801bcee:	b92a      	cbnz	r2, 801bcfc <_realloc_r+0x24>
 801bcf0:	f7ff ffa8 	bl	801bc44 <_free_r>
 801bcf4:	2400      	movs	r4, #0
 801bcf6:	4620      	mov	r0, r4
 801bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcfc:	f000 f8e2 	bl	801bec4 <_malloc_usable_size_r>
 801bd00:	4285      	cmp	r5, r0
 801bd02:	4606      	mov	r6, r0
 801bd04:	d802      	bhi.n	801bd0c <_realloc_r+0x34>
 801bd06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bd0a:	d8f4      	bhi.n	801bcf6 <_realloc_r+0x1e>
 801bd0c:	4629      	mov	r1, r5
 801bd0e:	4640      	mov	r0, r8
 801bd10:	f7ff f960 	bl	801afd4 <_malloc_r>
 801bd14:	4607      	mov	r7, r0
 801bd16:	2800      	cmp	r0, #0
 801bd18:	d0ec      	beq.n	801bcf4 <_realloc_r+0x1c>
 801bd1a:	42b5      	cmp	r5, r6
 801bd1c:	462a      	mov	r2, r5
 801bd1e:	4621      	mov	r1, r4
 801bd20:	bf28      	it	cs
 801bd22:	4632      	movcs	r2, r6
 801bd24:	f7ff f8ff 	bl	801af26 <memcpy>
 801bd28:	4621      	mov	r1, r4
 801bd2a:	4640      	mov	r0, r8
 801bd2c:	f7ff ff8a 	bl	801bc44 <_free_r>
 801bd30:	463c      	mov	r4, r7
 801bd32:	e7e0      	b.n	801bcf6 <_realloc_r+0x1e>

0801bd34 <__swhatbuf_r>:
 801bd34:	b570      	push	{r4, r5, r6, lr}
 801bd36:	460c      	mov	r4, r1
 801bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd3c:	2900      	cmp	r1, #0
 801bd3e:	b096      	sub	sp, #88	@ 0x58
 801bd40:	4615      	mov	r5, r2
 801bd42:	461e      	mov	r6, r3
 801bd44:	da0d      	bge.n	801bd62 <__swhatbuf_r+0x2e>
 801bd46:	89a3      	ldrh	r3, [r4, #12]
 801bd48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bd4c:	f04f 0100 	mov.w	r1, #0
 801bd50:	bf14      	ite	ne
 801bd52:	2340      	movne	r3, #64	@ 0x40
 801bd54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bd58:	2000      	movs	r0, #0
 801bd5a:	6031      	str	r1, [r6, #0]
 801bd5c:	602b      	str	r3, [r5, #0]
 801bd5e:	b016      	add	sp, #88	@ 0x58
 801bd60:	bd70      	pop	{r4, r5, r6, pc}
 801bd62:	466a      	mov	r2, sp
 801bd64:	f000 f878 	bl	801be58 <_fstat_r>
 801bd68:	2800      	cmp	r0, #0
 801bd6a:	dbec      	blt.n	801bd46 <__swhatbuf_r+0x12>
 801bd6c:	9901      	ldr	r1, [sp, #4]
 801bd6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bd72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bd76:	4259      	negs	r1, r3
 801bd78:	4159      	adcs	r1, r3
 801bd7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bd7e:	e7eb      	b.n	801bd58 <__swhatbuf_r+0x24>

0801bd80 <__smakebuf_r>:
 801bd80:	898b      	ldrh	r3, [r1, #12]
 801bd82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bd84:	079d      	lsls	r5, r3, #30
 801bd86:	4606      	mov	r6, r0
 801bd88:	460c      	mov	r4, r1
 801bd8a:	d507      	bpl.n	801bd9c <__smakebuf_r+0x1c>
 801bd8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bd90:	6023      	str	r3, [r4, #0]
 801bd92:	6123      	str	r3, [r4, #16]
 801bd94:	2301      	movs	r3, #1
 801bd96:	6163      	str	r3, [r4, #20]
 801bd98:	b003      	add	sp, #12
 801bd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd9c:	ab01      	add	r3, sp, #4
 801bd9e:	466a      	mov	r2, sp
 801bda0:	f7ff ffc8 	bl	801bd34 <__swhatbuf_r>
 801bda4:	9f00      	ldr	r7, [sp, #0]
 801bda6:	4605      	mov	r5, r0
 801bda8:	4639      	mov	r1, r7
 801bdaa:	4630      	mov	r0, r6
 801bdac:	f7ff f912 	bl	801afd4 <_malloc_r>
 801bdb0:	b948      	cbnz	r0, 801bdc6 <__smakebuf_r+0x46>
 801bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdb6:	059a      	lsls	r2, r3, #22
 801bdb8:	d4ee      	bmi.n	801bd98 <__smakebuf_r+0x18>
 801bdba:	f023 0303 	bic.w	r3, r3, #3
 801bdbe:	f043 0302 	orr.w	r3, r3, #2
 801bdc2:	81a3      	strh	r3, [r4, #12]
 801bdc4:	e7e2      	b.n	801bd8c <__smakebuf_r+0xc>
 801bdc6:	89a3      	ldrh	r3, [r4, #12]
 801bdc8:	6020      	str	r0, [r4, #0]
 801bdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bdce:	81a3      	strh	r3, [r4, #12]
 801bdd0:	9b01      	ldr	r3, [sp, #4]
 801bdd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bdd6:	b15b      	cbz	r3, 801bdf0 <__smakebuf_r+0x70>
 801bdd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bddc:	4630      	mov	r0, r6
 801bdde:	f000 f84d 	bl	801be7c <_isatty_r>
 801bde2:	b128      	cbz	r0, 801bdf0 <__smakebuf_r+0x70>
 801bde4:	89a3      	ldrh	r3, [r4, #12]
 801bde6:	f023 0303 	bic.w	r3, r3, #3
 801bdea:	f043 0301 	orr.w	r3, r3, #1
 801bdee:	81a3      	strh	r3, [r4, #12]
 801bdf0:	89a3      	ldrh	r3, [r4, #12]
 801bdf2:	431d      	orrs	r5, r3
 801bdf4:	81a5      	strh	r5, [r4, #12]
 801bdf6:	e7cf      	b.n	801bd98 <__smakebuf_r+0x18>

0801bdf8 <_raise_r>:
 801bdf8:	291f      	cmp	r1, #31
 801bdfa:	b538      	push	{r3, r4, r5, lr}
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	460c      	mov	r4, r1
 801be00:	d904      	bls.n	801be0c <_raise_r+0x14>
 801be02:	2316      	movs	r3, #22
 801be04:	6003      	str	r3, [r0, #0]
 801be06:	f04f 30ff 	mov.w	r0, #4294967295
 801be0a:	bd38      	pop	{r3, r4, r5, pc}
 801be0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801be0e:	b112      	cbz	r2, 801be16 <_raise_r+0x1e>
 801be10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801be14:	b94b      	cbnz	r3, 801be2a <_raise_r+0x32>
 801be16:	4628      	mov	r0, r5
 801be18:	f000 f852 	bl	801bec0 <_getpid_r>
 801be1c:	4622      	mov	r2, r4
 801be1e:	4601      	mov	r1, r0
 801be20:	4628      	mov	r0, r5
 801be22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be26:	f000 b839 	b.w	801be9c <_kill_r>
 801be2a:	2b01      	cmp	r3, #1
 801be2c:	d00a      	beq.n	801be44 <_raise_r+0x4c>
 801be2e:	1c59      	adds	r1, r3, #1
 801be30:	d103      	bne.n	801be3a <_raise_r+0x42>
 801be32:	2316      	movs	r3, #22
 801be34:	6003      	str	r3, [r0, #0]
 801be36:	2001      	movs	r0, #1
 801be38:	e7e7      	b.n	801be0a <_raise_r+0x12>
 801be3a:	2100      	movs	r1, #0
 801be3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801be40:	4620      	mov	r0, r4
 801be42:	4798      	blx	r3
 801be44:	2000      	movs	r0, #0
 801be46:	e7e0      	b.n	801be0a <_raise_r+0x12>

0801be48 <raise>:
 801be48:	4b02      	ldr	r3, [pc, #8]	@ (801be54 <raise+0xc>)
 801be4a:	4601      	mov	r1, r0
 801be4c:	6818      	ldr	r0, [r3, #0]
 801be4e:	f7ff bfd3 	b.w	801bdf8 <_raise_r>
 801be52:	bf00      	nop
 801be54:	24000044 	.word	0x24000044

0801be58 <_fstat_r>:
 801be58:	b538      	push	{r3, r4, r5, lr}
 801be5a:	4d07      	ldr	r5, [pc, #28]	@ (801be78 <_fstat_r+0x20>)
 801be5c:	2300      	movs	r3, #0
 801be5e:	4604      	mov	r4, r0
 801be60:	4608      	mov	r0, r1
 801be62:	4611      	mov	r1, r2
 801be64:	602b      	str	r3, [r5, #0]
 801be66:	f7e5 fa69 	bl	800133c <_fstat>
 801be6a:	1c43      	adds	r3, r0, #1
 801be6c:	d102      	bne.n	801be74 <_fstat_r+0x1c>
 801be6e:	682b      	ldr	r3, [r5, #0]
 801be70:	b103      	cbz	r3, 801be74 <_fstat_r+0x1c>
 801be72:	6023      	str	r3, [r4, #0]
 801be74:	bd38      	pop	{r3, r4, r5, pc}
 801be76:	bf00      	nop
 801be78:	24007820 	.word	0x24007820

0801be7c <_isatty_r>:
 801be7c:	b538      	push	{r3, r4, r5, lr}
 801be7e:	4d06      	ldr	r5, [pc, #24]	@ (801be98 <_isatty_r+0x1c>)
 801be80:	2300      	movs	r3, #0
 801be82:	4604      	mov	r4, r0
 801be84:	4608      	mov	r0, r1
 801be86:	602b      	str	r3, [r5, #0]
 801be88:	f7e5 fa68 	bl	800135c <_isatty>
 801be8c:	1c43      	adds	r3, r0, #1
 801be8e:	d102      	bne.n	801be96 <_isatty_r+0x1a>
 801be90:	682b      	ldr	r3, [r5, #0]
 801be92:	b103      	cbz	r3, 801be96 <_isatty_r+0x1a>
 801be94:	6023      	str	r3, [r4, #0]
 801be96:	bd38      	pop	{r3, r4, r5, pc}
 801be98:	24007820 	.word	0x24007820

0801be9c <_kill_r>:
 801be9c:	b538      	push	{r3, r4, r5, lr}
 801be9e:	4d07      	ldr	r5, [pc, #28]	@ (801bebc <_kill_r+0x20>)
 801bea0:	2300      	movs	r3, #0
 801bea2:	4604      	mov	r4, r0
 801bea4:	4608      	mov	r0, r1
 801bea6:	4611      	mov	r1, r2
 801bea8:	602b      	str	r3, [r5, #0]
 801beaa:	f7e5 fa01 	bl	80012b0 <_kill>
 801beae:	1c43      	adds	r3, r0, #1
 801beb0:	d102      	bne.n	801beb8 <_kill_r+0x1c>
 801beb2:	682b      	ldr	r3, [r5, #0]
 801beb4:	b103      	cbz	r3, 801beb8 <_kill_r+0x1c>
 801beb6:	6023      	str	r3, [r4, #0]
 801beb8:	bd38      	pop	{r3, r4, r5, pc}
 801beba:	bf00      	nop
 801bebc:	24007820 	.word	0x24007820

0801bec0 <_getpid_r>:
 801bec0:	f7e5 b9ee 	b.w	80012a0 <_getpid>

0801bec4 <_malloc_usable_size_r>:
 801bec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bec8:	1f18      	subs	r0, r3, #4
 801beca:	2b00      	cmp	r3, #0
 801becc:	bfbc      	itt	lt
 801bece:	580b      	ldrlt	r3, [r1, r0]
 801bed0:	18c0      	addlt	r0, r0, r3
 801bed2:	4770      	bx	lr

0801bed4 <_init>:
 801bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bed6:	bf00      	nop
 801bed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801beda:	bc08      	pop	{r3}
 801bedc:	469e      	mov	lr, r3
 801bede:	4770      	bx	lr

0801bee0 <_fini>:
 801bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bee2:	bf00      	nop
 801bee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bee6:	bc08      	pop	{r3}
 801bee8:	469e      	mov	lr, r3
 801beea:	4770      	bx	lr
